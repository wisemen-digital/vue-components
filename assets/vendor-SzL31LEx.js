function makeMap$1(str, expectsLowerCase) {
  const map2 = /* @__PURE__ */ Object.create(null);
  const list = str.split(",");
  for (let i3 = 0; i3 < list.length; i3++) {
    map2[list[i3]] = true;
  }
  return expectsLowerCase ? (val) => !!map2[val.toLowerCase()] : (val) => !!map2[val];
}
const EMPTY_OBJ$1 = Object.freeze({});
const EMPTY_ARR$1 = Object.freeze([]);
const NOOP$1 = () => {
};
const NO$1 = () => false;
const onRE = /^on[^a-z]/;
const isOn$1 = (key) => onRE.test(key);
const isModelListener$1 = (key) => key.startsWith("onUpdate:");
const extend$1 = Object.assign;
const remove$1 = (arr, el3) => {
  const i3 = arr.indexOf(el3);
  if (i3 > -1) {
    arr.splice(i3, 1);
  }
};
const hasOwnProperty$1$1 = Object.prototype.hasOwnProperty;
const hasOwn$2 = (val, key) => hasOwnProperty$1$1.call(val, key);
const isArray$4 = Array.isArray;
const isMap$1 = (val) => toTypeString$2(val) === "[object Map]";
const isSet$1 = (val) => toTypeString$2(val) === "[object Set]";
const isFunction$3 = (val) => typeof val === "function";
const isString$3 = (val) => typeof val === "string";
const isSymbol$1 = (val) => typeof val === "symbol";
const isObject$4 = (val) => val !== null && typeof val === "object";
const isPromise$2 = (val) => {
  return (isObject$4(val) || isFunction$3(val)) && isFunction$3(val.then) && isFunction$3(val.catch);
};
const objectToString$2 = Object.prototype.toString;
const toTypeString$2 = (value) => objectToString$2.call(value);
const toRawType$1 = (value) => {
  return toTypeString$2(value).slice(8, -1);
};
const isPlainObject$3 = (val) => toTypeString$2(val) === "[object Object]";
const isIntegerKey$1 = (key) => isString$3(key) && key !== "NaN" && key[0] !== "-" && "" + parseInt(key, 10) === key;
const isReservedProp$1 = /* @__PURE__ */ makeMap$1(
  // the leading comma is intentional so empty string "" is also included
  ",key,ref,ref_for,ref_key,onVnodeBeforeMount,onVnodeMounted,onVnodeBeforeUpdate,onVnodeUpdated,onVnodeBeforeUnmount,onVnodeUnmounted"
);
const isBuiltInDirective$1 = /* @__PURE__ */ makeMap$1(
  "bind,cloak,else-if,else,for,html,if,model,on,once,pre,show,slot,text,memo"
);
const cacheStringFunction$1 = (fn2) => {
  const cache2 = /* @__PURE__ */ Object.create(null);
  return (str) => {
    const hit = cache2[str];
    return hit || (cache2[str] = fn2(str));
  };
};
const camelizeRE$1 = /-(\w)/g;
const camelize$1 = cacheStringFunction$1((str) => {
  return str.replace(camelizeRE$1, (_2, c3) => c3 ? c3.toUpperCase() : "");
});
const hyphenateRE$1 = /\B([A-Z])/g;
const hyphenate$1 = cacheStringFunction$1(
  (str) => str.replace(hyphenateRE$1, "-$1").toLowerCase()
);
const capitalize$2 = cacheStringFunction$1((str) => {
  return str.charAt(0).toUpperCase() + str.slice(1);
});
const toHandlerKey$1 = cacheStringFunction$1((str) => {
  const s5 = str ? `on${capitalize$2(str)}` : ``;
  return s5;
});
const hasChanged$1 = (value, oldValue) => !Object.is(value, oldValue);
const invokeArrayFns$1 = (fns, arg) => {
  for (let i3 = 0; i3 < fns.length; i3++) {
    fns[i3](arg);
  }
};
const def$1 = (obj, key, value) => {
  Object.defineProperty(obj, key, {
    configurable: true,
    enumerable: false,
    value
  });
};
const looseToNumber$1 = (val) => {
  const n2 = parseFloat(val);
  return isNaN(n2) ? val : n2;
};
const toNumber$1 = (val) => {
  const n2 = isString$3(val) ? Number(val) : NaN;
  return isNaN(n2) ? val : n2;
};
let _globalThis$2;
const getGlobalThis$2 = () => {
  return _globalThis$2 || (_globalThis$2 = typeof globalThis !== "undefined" ? globalThis : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : typeof global !== "undefined" ? global : {});
};
function normalizeStyle$1(value) {
  if (isArray$4(value)) {
    const res = {};
    for (let i3 = 0; i3 < value.length; i3++) {
      const item = value[i3];
      const normalized = isString$3(item) ? parseStringStyle$1(item) : normalizeStyle$1(item);
      if (normalized) {
        for (const key in normalized) {
          res[key] = normalized[key];
        }
      }
    }
    return res;
  } else if (isString$3(value) || isObject$4(value)) {
    return value;
  }
}
const listDelimiterRE$1 = /;(?![^(]*\))/g;
const propertyDelimiterRE$1 = /:([^]+)/;
const styleCommentRE$1 = /\/\*[^]*?\*\//g;
function parseStringStyle$1(cssText) {
  const ret = {};
  cssText.replace(styleCommentRE$1, "").split(listDelimiterRE$1).forEach((item) => {
    if (item) {
      const tmp = item.split(propertyDelimiterRE$1);
      tmp.length > 1 && (ret[tmp[0].trim()] = tmp[1].trim());
    }
  });
  return ret;
}
function normalizeClass$1(value) {
  let res = "";
  if (isString$3(value)) {
    res = value;
  } else if (isArray$4(value)) {
    for (let i3 = 0; i3 < value.length; i3++) {
      const normalized = normalizeClass$1(value[i3]);
      if (normalized) {
        res += normalized + " ";
      }
    }
  } else if (isObject$4(value)) {
    for (const name in value) {
      if (value[name]) {
        res += name + " ";
      }
    }
  }
  return res.trim();
}
function normalizeProps$1(props) {
  if (!props)
    return null;
  let { class: klass, style } = props;
  if (klass && !isString$3(klass)) {
    props.class = normalizeClass$1(klass);
  }
  if (style) {
    props.style = normalizeStyle$1(style);
  }
  return props;
}
const HTML_TAGS$1 = "html,body,base,head,link,meta,style,title,address,article,aside,footer,header,hgroup,h1,h2,h3,h4,h5,h6,nav,section,div,dd,dl,dt,figcaption,figure,picture,hr,img,li,main,ol,p,pre,ul,a,b,abbr,bdi,bdo,br,cite,code,data,dfn,em,i,kbd,mark,q,rp,rt,ruby,s,samp,small,span,strong,sub,sup,time,u,var,wbr,area,audio,map,track,video,embed,object,param,source,canvas,script,noscript,del,ins,caption,col,colgroup,table,thead,tbody,td,th,tr,button,datalist,fieldset,form,input,label,legend,meter,optgroup,option,output,progress,select,textarea,details,dialog,menu,summary,template,blockquote,iframe,tfoot";
const SVG_TAGS$1 = "svg,animate,animateMotion,animateTransform,circle,clipPath,color-profile,defs,desc,discard,ellipse,feBlend,feColorMatrix,feComponentTransfer,feComposite,feConvolveMatrix,feDiffuseLighting,feDisplacementMap,feDistantLight,feDropShadow,feFlood,feFuncA,feFuncB,feFuncG,feFuncR,feGaussianBlur,feImage,feMerge,feMergeNode,feMorphology,feOffset,fePointLight,feSpecularLighting,feSpotLight,feTile,feTurbulence,filter,foreignObject,g,hatch,hatchpath,image,line,linearGradient,marker,mask,mesh,meshgradient,meshpatch,meshrow,metadata,mpath,path,pattern,polygon,polyline,radialGradient,rect,set,solidcolor,stop,switch,symbol,text,textPath,title,tspan,unknown,use,view";
const isHTMLTag$1 = /* @__PURE__ */ makeMap$1(HTML_TAGS$1);
const isSVGTag$1 = /* @__PURE__ */ makeMap$1(SVG_TAGS$1);
const specialBooleanAttrs$1 = `itemscope,allowfullscreen,formnovalidate,ismap,nomodule,novalidate,readonly`;
const isSpecialBooleanAttr$1 = /* @__PURE__ */ makeMap$1(specialBooleanAttrs$1);
function includeBooleanAttr$1(value) {
  return !!value || value === "";
}
const toDisplayString$2 = (val) => {
  return isString$3(val) ? val : val == null ? "" : isArray$4(val) || isObject$4(val) && (val.toString === objectToString$2 || !isFunction$3(val.toString)) ? JSON.stringify(val, replacer$1, 2) : String(val);
};
const replacer$1 = (_key, val) => {
  if (val && val.__v_isRef) {
    return replacer$1(_key, val.value);
  } else if (isMap$1(val)) {
    return {
      [`Map(${val.size})`]: [...val.entries()].reduce((entries, [key, val2]) => {
        entries[`${key} =>`] = val2;
        return entries;
      }, {})
    };
  } else if (isSet$1(val)) {
    return {
      [`Set(${val.size})`]: [...val.values()]
    };
  } else if (isObject$4(val) && !isArray$4(val) && !isPlainObject$3(val)) {
    return String(val);
  }
  return val;
};
function warn$1$2(msg, ...args) {
  console.warn(`[Vue warn] ${msg}`, ...args);
}
let activeEffectScope$1;
let EffectScope$1 = class EffectScope2 {
  constructor(detached = false) {
    this.detached = detached;
    this._active = true;
    this.effects = [];
    this.cleanups = [];
    this.parent = activeEffectScope$1;
    if (!detached && activeEffectScope$1) {
      this.index = (activeEffectScope$1.scopes || (activeEffectScope$1.scopes = [])).push(
        this
      ) - 1;
    }
  }
  get active() {
    return this._active;
  }
  run(fn2) {
    if (this._active) {
      const currentEffectScope = activeEffectScope$1;
      try {
        activeEffectScope$1 = this;
        return fn2();
      } finally {
        activeEffectScope$1 = currentEffectScope;
      }
    } else {
      warn$1$2(`cannot run an inactive effect scope.`);
    }
  }
  /**
   * This should only be called on non-detached scopes
   * @internal
   */
  on() {
    activeEffectScope$1 = this;
  }
  /**
   * This should only be called on non-detached scopes
   * @internal
   */
  off() {
    activeEffectScope$1 = this.parent;
  }
  stop(fromParent) {
    if (this._active) {
      let i3, l2;
      for (i3 = 0, l2 = this.effects.length; i3 < l2; i3++) {
        this.effects[i3].stop();
      }
      for (i3 = 0, l2 = this.cleanups.length; i3 < l2; i3++) {
        this.cleanups[i3]();
      }
      if (this.scopes) {
        for (i3 = 0, l2 = this.scopes.length; i3 < l2; i3++) {
          this.scopes[i3].stop(true);
        }
      }
      if (!this.detached && this.parent && !fromParent) {
        const last = this.parent.scopes.pop();
        if (last && last !== this) {
          this.parent.scopes[this.index] = last;
          last.index = this.index;
        }
      }
      this.parent = void 0;
      this._active = false;
    }
  }
};
function effectScope$1(detached) {
  return new EffectScope$1(detached);
}
function recordEffectScope$1(effect2, scope = activeEffectScope$1) {
  if (scope && scope.active) {
    scope.effects.push(effect2);
  }
}
function getCurrentScope$1() {
  return activeEffectScope$1;
}
function onScopeDispose$1(fn2) {
  if (activeEffectScope$1) {
    activeEffectScope$1.cleanups.push(fn2);
  } else {
    warn$1$2(
      `onScopeDispose() is called when there is no active effect scope to be associated with.`
    );
  }
}
const createDep$1 = (effects) => {
  const dep = new Set(effects);
  dep.w = 0;
  dep.n = 0;
  return dep;
};
const wasTracked = (dep) => (dep.w & trackOpBit) > 0;
const newTracked = (dep) => (dep.n & trackOpBit) > 0;
const initDepMarkers = ({ deps }) => {
  if (deps.length) {
    for (let i3 = 0; i3 < deps.length; i3++) {
      deps[i3].w |= trackOpBit;
    }
  }
};
const finalizeDepMarkers = (effect2) => {
  const { deps } = effect2;
  if (deps.length) {
    let ptr = 0;
    for (let i3 = 0; i3 < deps.length; i3++) {
      const dep = deps[i3];
      if (wasTracked(dep) && !newTracked(dep)) {
        dep.delete(effect2);
      } else {
        deps[ptr++] = dep;
      }
      dep.w &= ~trackOpBit;
      dep.n &= ~trackOpBit;
    }
    deps.length = ptr;
  }
};
const targetMap$1 = /* @__PURE__ */ new WeakMap();
let effectTrackDepth = 0;
let trackOpBit = 1;
const maxMarkerBits = 30;
let activeEffect$1;
const ITERATE_KEY$1 = Symbol("iterate");
const MAP_KEY_ITERATE_KEY$1 = Symbol("Map key iterate");
let ReactiveEffect$1 = class ReactiveEffect2 {
  constructor(fn2, scheduler2 = null, scope) {
    this.fn = fn2;
    this.scheduler = scheduler2;
    this.active = true;
    this.deps = [];
    this.parent = void 0;
    recordEffectScope$1(this, scope);
  }
  run() {
    if (!this.active) {
      return this.fn();
    }
    let parent = activeEffect$1;
    let lastShouldTrack = shouldTrack$1;
    while (parent) {
      if (parent === this) {
        return;
      }
      parent = parent.parent;
    }
    try {
      this.parent = activeEffect$1;
      activeEffect$1 = this;
      shouldTrack$1 = true;
      trackOpBit = 1 << ++effectTrackDepth;
      if (effectTrackDepth <= maxMarkerBits) {
        initDepMarkers(this);
      } else {
        cleanupEffect(this);
      }
      return this.fn();
    } finally {
      if (effectTrackDepth <= maxMarkerBits) {
        finalizeDepMarkers(this);
      }
      trackOpBit = 1 << --effectTrackDepth;
      activeEffect$1 = this.parent;
      shouldTrack$1 = lastShouldTrack;
      this.parent = void 0;
      if (this.deferStop) {
        this.stop();
      }
    }
  }
  stop() {
    if (activeEffect$1 === this) {
      this.deferStop = true;
    } else if (this.active) {
      cleanupEffect(this);
      if (this.onStop) {
        this.onStop();
      }
      this.active = false;
    }
  }
};
function cleanupEffect(effect2) {
  const { deps } = effect2;
  if (deps.length) {
    for (let i3 = 0; i3 < deps.length; i3++) {
      deps[i3].delete(effect2);
    }
    deps.length = 0;
  }
}
let shouldTrack$1 = true;
const trackStack$1 = [];
function pauseTracking$1() {
  trackStack$1.push(shouldTrack$1);
  shouldTrack$1 = false;
}
function resetTracking$1() {
  const last = trackStack$1.pop();
  shouldTrack$1 = last === void 0 ? true : last;
}
function track$1(target, type, key) {
  if (shouldTrack$1 && activeEffect$1) {
    let depsMap = targetMap$1.get(target);
    if (!depsMap) {
      targetMap$1.set(target, depsMap = /* @__PURE__ */ new Map());
    }
    let dep = depsMap.get(key);
    if (!dep) {
      depsMap.set(key, dep = createDep$1());
    }
    const eventInfo = { effect: activeEffect$1, target, type, key };
    trackEffects(dep, eventInfo);
  }
}
function trackEffects(dep, debuggerEventExtraInfo) {
  let shouldTrack2 = false;
  if (effectTrackDepth <= maxMarkerBits) {
    if (!newTracked(dep)) {
      dep.n |= trackOpBit;
      shouldTrack2 = !wasTracked(dep);
    }
  } else {
    shouldTrack2 = !dep.has(activeEffect$1);
  }
  if (shouldTrack2) {
    dep.add(activeEffect$1);
    activeEffect$1.deps.push(dep);
    if (activeEffect$1.onTrack) {
      activeEffect$1.onTrack(
        extend$1(
          {
            effect: activeEffect$1
          },
          debuggerEventExtraInfo
        )
      );
    }
  }
}
function trigger$1(target, type, key, newValue, oldValue, oldTarget) {
  const depsMap = targetMap$1.get(target);
  if (!depsMap) {
    return;
  }
  let deps = [];
  if (type === "clear") {
    deps = [...depsMap.values()];
  } else if (key === "length" && isArray$4(target)) {
    const newLength = Number(newValue);
    depsMap.forEach((dep, key2) => {
      if (key2 === "length" || !isSymbol$1(key2) && key2 >= newLength) {
        deps.push(dep);
      }
    });
  } else {
    if (key !== void 0) {
      deps.push(depsMap.get(key));
    }
    switch (type) {
      case "add":
        if (!isArray$4(target)) {
          deps.push(depsMap.get(ITERATE_KEY$1));
          if (isMap$1(target)) {
            deps.push(depsMap.get(MAP_KEY_ITERATE_KEY$1));
          }
        } else if (isIntegerKey$1(key)) {
          deps.push(depsMap.get("length"));
        }
        break;
      case "delete":
        if (!isArray$4(target)) {
          deps.push(depsMap.get(ITERATE_KEY$1));
          if (isMap$1(target)) {
            deps.push(depsMap.get(MAP_KEY_ITERATE_KEY$1));
          }
        }
        break;
      case "set":
        if (isMap$1(target)) {
          deps.push(depsMap.get(ITERATE_KEY$1));
        }
        break;
    }
  }
  const eventInfo = { target, type, key, newValue, oldValue, oldTarget };
  if (deps.length === 1) {
    if (deps[0]) {
      {
        triggerEffects$1(deps[0], eventInfo);
      }
    }
  } else {
    const effects = [];
    for (const dep of deps) {
      if (dep) {
        effects.push(...dep);
      }
    }
    {
      triggerEffects$1(createDep$1(effects), eventInfo);
    }
  }
}
function triggerEffects$1(dep, debuggerEventExtraInfo) {
  const effects = isArray$4(dep) ? dep : [...dep];
  for (const effect2 of effects) {
    if (effect2.computed) {
      triggerEffect(effect2, debuggerEventExtraInfo);
    }
  }
  for (const effect2 of effects) {
    if (!effect2.computed) {
      triggerEffect(effect2, debuggerEventExtraInfo);
    }
  }
}
function triggerEffect(effect2, debuggerEventExtraInfo) {
  if (effect2 !== activeEffect$1 || effect2.allowRecurse) {
    if (effect2.onTrigger) {
      effect2.onTrigger(extend$1({ effect: effect2 }, debuggerEventExtraInfo));
    }
    if (effect2.scheduler) {
      effect2.scheduler();
    } else {
      effect2.run();
    }
  }
}
function getDepFromReactive$1(object, key) {
  var _a2;
  return (_a2 = targetMap$1.get(object)) == null ? void 0 : _a2.get(key);
}
const isNonTrackableKeys$1 = /* @__PURE__ */ makeMap$1(`__proto__,__v_isRef,__isVue`);
const builtInSymbols$1 = new Set(
  /* @__PURE__ */ Object.getOwnPropertyNames(Symbol).filter((key) => key !== "arguments" && key !== "caller").map((key) => Symbol[key]).filter(isSymbol$1)
);
const arrayInstrumentations$1 = /* @__PURE__ */ createArrayInstrumentations$1();
function createArrayInstrumentations$1() {
  const instrumentations = {};
  ["includes", "indexOf", "lastIndexOf"].forEach((key) => {
    instrumentations[key] = function(...args) {
      const arr = toRaw$1(this);
      for (let i3 = 0, l2 = this.length; i3 < l2; i3++) {
        track$1(arr, "get", i3 + "");
      }
      const res = arr[key](...args);
      if (res === -1 || res === false) {
        return arr[key](...args.map(toRaw$1));
      } else {
        return res;
      }
    };
  });
  ["push", "pop", "shift", "unshift", "splice"].forEach((key) => {
    instrumentations[key] = function(...args) {
      pauseTracking$1();
      const res = toRaw$1(this)[key].apply(this, args);
      resetTracking$1();
      return res;
    };
  });
  return instrumentations;
}
function hasOwnProperty$3(key) {
  const obj = toRaw$1(this);
  track$1(obj, "has", key);
  return obj.hasOwnProperty(key);
}
let BaseReactiveHandler$1 = class BaseReactiveHandler2 {
  constructor(_isReadonly = false, _shallow = false) {
    this._isReadonly = _isReadonly;
    this._shallow = _shallow;
  }
  get(target, key, receiver) {
    const isReadonly2 = this._isReadonly, shallow = this._shallow;
    if (key === "__v_isReactive") {
      return !isReadonly2;
    } else if (key === "__v_isReadonly") {
      return isReadonly2;
    } else if (key === "__v_isShallow") {
      return shallow;
    } else if (key === "__v_raw" && receiver === (isReadonly2 ? shallow ? shallowReadonlyMap$1 : readonlyMap$1 : shallow ? shallowReactiveMap$1 : reactiveMap$1).get(target)) {
      return target;
    }
    const targetIsArray = isArray$4(target);
    if (!isReadonly2) {
      if (targetIsArray && hasOwn$2(arrayInstrumentations$1, key)) {
        return Reflect.get(arrayInstrumentations$1, key, receiver);
      }
      if (key === "hasOwnProperty") {
        return hasOwnProperty$3;
      }
    }
    const res = Reflect.get(target, key, receiver);
    if (isSymbol$1(key) ? builtInSymbols$1.has(key) : isNonTrackableKeys$1(key)) {
      return res;
    }
    if (!isReadonly2) {
      track$1(target, "get", key);
    }
    if (shallow) {
      return res;
    }
    if (isRef$1(res)) {
      return targetIsArray && isIntegerKey$1(key) ? res : res.value;
    }
    if (isObject$4(res)) {
      return isReadonly2 ? readonly$1(res) : reactive$1(res);
    }
    return res;
  }
};
let MutableReactiveHandler$1 = class MutableReactiveHandler2 extends BaseReactiveHandler$1 {
  constructor(shallow = false) {
    super(false, shallow);
  }
  set(target, key, value, receiver) {
    let oldValue = target[key];
    if (isReadonly$1(oldValue) && isRef$1(oldValue) && !isRef$1(value)) {
      return false;
    }
    if (!this._shallow) {
      if (!isShallow$1(value) && !isReadonly$1(value)) {
        oldValue = toRaw$1(oldValue);
        value = toRaw$1(value);
      }
      if (!isArray$4(target) && isRef$1(oldValue) && !isRef$1(value)) {
        oldValue.value = value;
        return true;
      }
    }
    const hadKey = isArray$4(target) && isIntegerKey$1(key) ? Number(key) < target.length : hasOwn$2(target, key);
    const result = Reflect.set(target, key, value, receiver);
    if (target === toRaw$1(receiver)) {
      if (!hadKey) {
        trigger$1(target, "add", key, value);
      } else if (hasChanged$1(value, oldValue)) {
        trigger$1(target, "set", key, value, oldValue);
      }
    }
    return result;
  }
  deleteProperty(target, key) {
    const hadKey = hasOwn$2(target, key);
    const oldValue = target[key];
    const result = Reflect.deleteProperty(target, key);
    if (result && hadKey) {
      trigger$1(target, "delete", key, void 0, oldValue);
    }
    return result;
  }
  has(target, key) {
    const result = Reflect.has(target, key);
    if (!isSymbol$1(key) || !builtInSymbols$1.has(key)) {
      track$1(target, "has", key);
    }
    return result;
  }
  ownKeys(target) {
    track$1(
      target,
      "iterate",
      isArray$4(target) ? "length" : ITERATE_KEY$1
    );
    return Reflect.ownKeys(target);
  }
};
let ReadonlyReactiveHandler$1 = class ReadonlyReactiveHandler2 extends BaseReactiveHandler$1 {
  constructor(shallow = false) {
    super(true, shallow);
  }
  set(target, key) {
    {
      warn$1$2(
        `Set operation on key "${String(key)}" failed: target is readonly.`,
        target
      );
    }
    return true;
  }
  deleteProperty(target, key) {
    {
      warn$1$2(
        `Delete operation on key "${String(key)}" failed: target is readonly.`,
        target
      );
    }
    return true;
  }
};
const mutableHandlers$1 = /* @__PURE__ */ new MutableReactiveHandler$1();
const readonlyHandlers$1 = /* @__PURE__ */ new ReadonlyReactiveHandler$1();
const shallowReactiveHandlers$1 = /* @__PURE__ */ new MutableReactiveHandler$1(
  true
);
const shallowReadonlyHandlers$1 = /* @__PURE__ */ new ReadonlyReactiveHandler$1(true);
const toShallow$1 = (value) => value;
const getProto$1 = (v2) => Reflect.getPrototypeOf(v2);
function get$1(target, key, isReadonly2 = false, isShallow22 = false) {
  target = target["__v_raw"];
  const rawTarget = toRaw$1(target);
  const rawKey = toRaw$1(key);
  if (!isReadonly2) {
    if (hasChanged$1(key, rawKey)) {
      track$1(rawTarget, "get", key);
    }
    track$1(rawTarget, "get", rawKey);
  }
  const { has: has2 } = getProto$1(rawTarget);
  const wrap2 = isShallow22 ? toShallow$1 : isReadonly2 ? toReadonly$1 : toReactive$1;
  if (has2.call(rawTarget, key)) {
    return wrap2(target.get(key));
  } else if (has2.call(rawTarget, rawKey)) {
    return wrap2(target.get(rawKey));
  } else if (target !== rawTarget) {
    target.get(key);
  }
}
function has$1(key, isReadonly2 = false) {
  const target = this["__v_raw"];
  const rawTarget = toRaw$1(target);
  const rawKey = toRaw$1(key);
  if (!isReadonly2) {
    if (hasChanged$1(key, rawKey)) {
      track$1(rawTarget, "has", key);
    }
    track$1(rawTarget, "has", rawKey);
  }
  return key === rawKey ? target.has(key) : target.has(key) || target.has(rawKey);
}
function size$2(target, isReadonly2 = false) {
  target = target["__v_raw"];
  !isReadonly2 && track$1(toRaw$1(target), "iterate", ITERATE_KEY$1);
  return Reflect.get(target, "size", target);
}
function add$2(value) {
  value = toRaw$1(value);
  const target = toRaw$1(this);
  const proto = getProto$1(target);
  const hadKey = proto.has.call(target, value);
  if (!hadKey) {
    target.add(value);
    trigger$1(target, "add", value, value);
  }
  return this;
}
function set$3(key, value) {
  value = toRaw$1(value);
  const target = toRaw$1(this);
  const { has: has2, get: get2 } = getProto$1(target);
  let hadKey = has2.call(target, key);
  if (!hadKey) {
    key = toRaw$1(key);
    hadKey = has2.call(target, key);
  } else {
    checkIdentityKeys$1(target, has2, key);
  }
  const oldValue = get2.call(target, key);
  target.set(key, value);
  if (!hadKey) {
    trigger$1(target, "add", key, value);
  } else if (hasChanged$1(value, oldValue)) {
    trigger$1(target, "set", key, value, oldValue);
  }
  return this;
}
function deleteEntry$1(key) {
  const target = toRaw$1(this);
  const { has: has2, get: get2 } = getProto$1(target);
  let hadKey = has2.call(target, key);
  if (!hadKey) {
    key = toRaw$1(key);
    hadKey = has2.call(target, key);
  } else {
    checkIdentityKeys$1(target, has2, key);
  }
  const oldValue = get2 ? get2.call(target, key) : void 0;
  const result = target.delete(key);
  if (hadKey) {
    trigger$1(target, "delete", key, void 0, oldValue);
  }
  return result;
}
function clear$1() {
  const target = toRaw$1(this);
  const hadItems = target.size !== 0;
  const oldTarget = isMap$1(target) ? new Map(target) : new Set(target);
  const result = target.clear();
  if (hadItems) {
    trigger$1(target, "clear", void 0, void 0, oldTarget);
  }
  return result;
}
function createForEach$1(isReadonly2, isShallow22) {
  return function forEach(callback, thisArg) {
    const observed = this;
    const target = observed["__v_raw"];
    const rawTarget = toRaw$1(target);
    const wrap2 = isShallow22 ? toShallow$1 : isReadonly2 ? toReadonly$1 : toReactive$1;
    !isReadonly2 && track$1(rawTarget, "iterate", ITERATE_KEY$1);
    return target.forEach((value, key) => {
      return callback.call(thisArg, wrap2(value), wrap2(key), observed);
    });
  };
}
function createIterableMethod$1(method, isReadonly2, isShallow22) {
  return function(...args) {
    const target = this["__v_raw"];
    const rawTarget = toRaw$1(target);
    const targetIsMap = isMap$1(rawTarget);
    const isPair = method === "entries" || method === Symbol.iterator && targetIsMap;
    const isKeyOnly = method === "keys" && targetIsMap;
    const innerIterator = target[method](...args);
    const wrap2 = isShallow22 ? toShallow$1 : isReadonly2 ? toReadonly$1 : toReactive$1;
    !isReadonly2 && track$1(
      rawTarget,
      "iterate",
      isKeyOnly ? MAP_KEY_ITERATE_KEY$1 : ITERATE_KEY$1
    );
    return {
      // iterator protocol
      next() {
        const { value, done } = innerIterator.next();
        return done ? { value, done } : {
          value: isPair ? [wrap2(value[0]), wrap2(value[1])] : wrap2(value),
          done
        };
      },
      // iterable protocol
      [Symbol.iterator]() {
        return this;
      }
    };
  };
}
function createReadonlyMethod$1(type) {
  return function(...args) {
    {
      const key = args[0] ? `on key "${args[0]}" ` : ``;
      console.warn(
        `${capitalize$2(type)} operation ${key}failed: target is readonly.`,
        toRaw$1(this)
      );
    }
    return type === "delete" ? false : this;
  };
}
function createInstrumentations$1() {
  const mutableInstrumentations2 = {
    get(key) {
      return get$1(this, key);
    },
    get size() {
      return size$2(this);
    },
    has: has$1,
    add: add$2,
    set: set$3,
    delete: deleteEntry$1,
    clear: clear$1,
    forEach: createForEach$1(false, false)
  };
  const shallowInstrumentations2 = {
    get(key) {
      return get$1(this, key, false, true);
    },
    get size() {
      return size$2(this);
    },
    has: has$1,
    add: add$2,
    set: set$3,
    delete: deleteEntry$1,
    clear: clear$1,
    forEach: createForEach$1(false, true)
  };
  const readonlyInstrumentations2 = {
    get(key) {
      return get$1(this, key, true);
    },
    get size() {
      return size$2(this, true);
    },
    has(key) {
      return has$1.call(this, key, true);
    },
    add: createReadonlyMethod$1("add"),
    set: createReadonlyMethod$1("set"),
    delete: createReadonlyMethod$1("delete"),
    clear: createReadonlyMethod$1("clear"),
    forEach: createForEach$1(true, false)
  };
  const shallowReadonlyInstrumentations2 = {
    get(key) {
      return get$1(this, key, true, true);
    },
    get size() {
      return size$2(this, true);
    },
    has(key) {
      return has$1.call(this, key, true);
    },
    add: createReadonlyMethod$1("add"),
    set: createReadonlyMethod$1("set"),
    delete: createReadonlyMethod$1("delete"),
    clear: createReadonlyMethod$1("clear"),
    forEach: createForEach$1(true, true)
  };
  const iteratorMethods = ["keys", "values", "entries", Symbol.iterator];
  iteratorMethods.forEach((method) => {
    mutableInstrumentations2[method] = createIterableMethod$1(
      method,
      false,
      false
    );
    readonlyInstrumentations2[method] = createIterableMethod$1(
      method,
      true,
      false
    );
    shallowInstrumentations2[method] = createIterableMethod$1(
      method,
      false,
      true
    );
    shallowReadonlyInstrumentations2[method] = createIterableMethod$1(
      method,
      true,
      true
    );
  });
  return [
    mutableInstrumentations2,
    readonlyInstrumentations2,
    shallowInstrumentations2,
    shallowReadonlyInstrumentations2
  ];
}
const [
  mutableInstrumentations$1,
  readonlyInstrumentations$1,
  shallowInstrumentations$1,
  shallowReadonlyInstrumentations$1
] = /* @__PURE__ */ createInstrumentations$1();
function createInstrumentationGetter$1(isReadonly2, shallow) {
  const instrumentations = shallow ? isReadonly2 ? shallowReadonlyInstrumentations$1 : shallowInstrumentations$1 : isReadonly2 ? readonlyInstrumentations$1 : mutableInstrumentations$1;
  return (target, key, receiver) => {
    if (key === "__v_isReactive") {
      return !isReadonly2;
    } else if (key === "__v_isReadonly") {
      return isReadonly2;
    } else if (key === "__v_raw") {
      return target;
    }
    return Reflect.get(
      hasOwn$2(instrumentations, key) && key in target ? instrumentations : target,
      key,
      receiver
    );
  };
}
const mutableCollectionHandlers$1 = {
  get: /* @__PURE__ */ createInstrumentationGetter$1(false, false)
};
const shallowCollectionHandlers$1 = {
  get: /* @__PURE__ */ createInstrumentationGetter$1(false, true)
};
const readonlyCollectionHandlers$1 = {
  get: /* @__PURE__ */ createInstrumentationGetter$1(true, false)
};
const shallowReadonlyCollectionHandlers$1 = {
  get: /* @__PURE__ */ createInstrumentationGetter$1(true, true)
};
function checkIdentityKeys$1(target, has2, key) {
  const rawKey = toRaw$1(key);
  if (rawKey !== key && has2.call(target, rawKey)) {
    const type = toRawType$1(target);
    console.warn(
      `Reactive ${type} contains both the raw and reactive versions of the same object${type === `Map` ? ` as keys` : ``}, which can lead to inconsistencies. Avoid differentiating between the raw and reactive versions of an object and only use the reactive version if possible.`
    );
  }
}
const reactiveMap$1 = /* @__PURE__ */ new WeakMap();
const shallowReactiveMap$1 = /* @__PURE__ */ new WeakMap();
const readonlyMap$1 = /* @__PURE__ */ new WeakMap();
const shallowReadonlyMap$1 = /* @__PURE__ */ new WeakMap();
function targetTypeMap$1(rawType) {
  switch (rawType) {
    case "Object":
    case "Array":
      return 1;
    case "Map":
    case "Set":
    case "WeakMap":
    case "WeakSet":
      return 2;
    default:
      return 0;
  }
}
function getTargetType$1(value) {
  return value["__v_skip"] || !Object.isExtensible(value) ? 0 : targetTypeMap$1(toRawType$1(value));
}
function reactive$1(target) {
  if (isReadonly$1(target)) {
    return target;
  }
  return createReactiveObject$1(
    target,
    false,
    mutableHandlers$1,
    mutableCollectionHandlers$1,
    reactiveMap$1
  );
}
function shallowReactive$1(target) {
  return createReactiveObject$1(
    target,
    false,
    shallowReactiveHandlers$1,
    shallowCollectionHandlers$1,
    shallowReactiveMap$1
  );
}
function readonly$1(target) {
  return createReactiveObject$1(
    target,
    true,
    readonlyHandlers$1,
    readonlyCollectionHandlers$1,
    readonlyMap$1
  );
}
function shallowReadonly$1(target) {
  return createReactiveObject$1(
    target,
    true,
    shallowReadonlyHandlers$1,
    shallowReadonlyCollectionHandlers$1,
    shallowReadonlyMap$1
  );
}
function createReactiveObject$1(target, isReadonly2, baseHandlers, collectionHandlers, proxyMap) {
  if (!isObject$4(target)) {
    {
      console.warn(`value cannot be made reactive: ${String(target)}`);
    }
    return target;
  }
  if (target["__v_raw"] && !(isReadonly2 && target["__v_isReactive"])) {
    return target;
  }
  const existingProxy = proxyMap.get(target);
  if (existingProxy) {
    return existingProxy;
  }
  const targetType = getTargetType$1(target);
  if (targetType === 0) {
    return target;
  }
  const proxy = new Proxy(
    target,
    targetType === 2 ? collectionHandlers : baseHandlers
  );
  proxyMap.set(target, proxy);
  return proxy;
}
function isReactive$1(value) {
  if (isReadonly$1(value)) {
    return isReactive$1(value["__v_raw"]);
  }
  return !!(value && value["__v_isReactive"]);
}
function isReadonly$1(value) {
  return !!(value && value["__v_isReadonly"]);
}
function isShallow$1(value) {
  return !!(value && value["__v_isShallow"]);
}
function isProxy$1(value) {
  return isReactive$1(value) || isReadonly$1(value);
}
function toRaw$1(observed) {
  const raw = observed && observed["__v_raw"];
  return raw ? toRaw$1(raw) : observed;
}
function markRaw$1(value) {
  def$1(value, "__v_skip", true);
  return value;
}
const toReactive$1 = (value) => isObject$4(value) ? reactive$1(value) : value;
const toReadonly$1 = (value) => isObject$4(value) ? readonly$1(value) : value;
function trackRefValue$1(ref2) {
  if (shouldTrack$1 && activeEffect$1) {
    ref2 = toRaw$1(ref2);
    {
      trackEffects(ref2.dep || (ref2.dep = createDep$1()), {
        target: ref2,
        type: "get",
        key: "value"
      });
    }
  }
}
function triggerRefValue$1(ref2, newVal) {
  ref2 = toRaw$1(ref2);
  const dep = ref2.dep;
  if (dep) {
    {
      triggerEffects$1(dep, {
        target: ref2,
        type: "set",
        key: "value",
        newValue: newVal
      });
    }
  }
}
function isRef$1(r2) {
  return !!(r2 && r2.__v_isRef === true);
}
function ref$1(value) {
  return createRef$1(value, false);
}
function shallowRef$1(value) {
  return createRef$1(value, true);
}
function createRef$1(rawValue, shallow) {
  if (isRef$1(rawValue)) {
    return rawValue;
  }
  return new RefImpl$1(rawValue, shallow);
}
let RefImpl$1 = class RefImpl2 {
  constructor(value, __v_isShallow) {
    this.__v_isShallow = __v_isShallow;
    this.dep = void 0;
    this.__v_isRef = true;
    this._rawValue = __v_isShallow ? value : toRaw$1(value);
    this._value = __v_isShallow ? value : toReactive$1(value);
  }
  get value() {
    trackRefValue$1(this);
    return this._value;
  }
  set value(newVal) {
    const useDirectValue = this.__v_isShallow || isShallow$1(newVal) || isReadonly$1(newVal);
    newVal = useDirectValue ? newVal : toRaw$1(newVal);
    if (hasChanged$1(newVal, this._rawValue)) {
      this._rawValue = newVal;
      this._value = useDirectValue ? newVal : toReactive$1(newVal);
      triggerRefValue$1(this, newVal);
    }
  }
};
function unref$1(ref2) {
  return isRef$1(ref2) ? ref2.value : ref2;
}
const shallowUnwrapHandlers$1 = {
  get: (target, key, receiver) => unref$1(Reflect.get(target, key, receiver)),
  set: (target, key, value, receiver) => {
    const oldValue = target[key];
    if (isRef$1(oldValue) && !isRef$1(value)) {
      oldValue.value = value;
      return true;
    } else {
      return Reflect.set(target, key, value, receiver);
    }
  }
};
function proxyRefs$1(objectWithRefs) {
  return isReactive$1(objectWithRefs) ? objectWithRefs : new Proxy(objectWithRefs, shallowUnwrapHandlers$1);
}
function toRefs(object) {
  if (!isProxy$1(object)) {
    console.warn(`toRefs() expects a reactive object but received a plain one.`);
  }
  const ret = isArray$4(object) ? new Array(object.length) : {};
  for (const key in object) {
    ret[key] = propertyToRef$1(object, key);
  }
  return ret;
}
let ObjectRefImpl$1 = class ObjectRefImpl2 {
  constructor(_object, _key, _defaultValue) {
    this._object = _object;
    this._key = _key;
    this._defaultValue = _defaultValue;
    this.__v_isRef = true;
  }
  get value() {
    const val = this._object[this._key];
    return val === void 0 ? this._defaultValue : val;
  }
  set value(newVal) {
    this._object[this._key] = newVal;
  }
  get dep() {
    return getDepFromReactive$1(toRaw$1(this._object), this._key);
  }
};
let GetterRefImpl$1 = class GetterRefImpl2 {
  constructor(_getter) {
    this._getter = _getter;
    this.__v_isRef = true;
    this.__v_isReadonly = true;
  }
  get value() {
    return this._getter();
  }
};
function toRef$1(source, key, defaultValue) {
  if (isRef$1(source)) {
    return source;
  } else if (isFunction$3(source)) {
    return new GetterRefImpl$1(source);
  } else if (isObject$4(source) && arguments.length > 1) {
    return propertyToRef$1(source, key, defaultValue);
  } else {
    return ref$1(source);
  }
}
function propertyToRef$1(source, key, defaultValue) {
  const val = source[key];
  return isRef$1(val) ? val : new ObjectRefImpl$1(source, key, defaultValue);
}
let ComputedRefImpl$1 = class ComputedRefImpl2 {
  constructor(getter, _setter, isReadonly2, isSSR) {
    this._setter = _setter;
    this.dep = void 0;
    this.__v_isRef = true;
    this["__v_isReadonly"] = false;
    this._dirty = true;
    this.effect = new ReactiveEffect$1(getter, () => {
      if (!this._dirty) {
        this._dirty = true;
        triggerRefValue$1(this);
      }
    });
    this.effect.computed = this;
    this.effect.active = this._cacheable = !isSSR;
    this["__v_isReadonly"] = isReadonly2;
  }
  get value() {
    const self2 = toRaw$1(this);
    trackRefValue$1(self2);
    if (self2._dirty || !self2._cacheable) {
      self2._dirty = false;
      self2._value = self2.effect.run();
    }
    return self2._value;
  }
  set value(newValue) {
    this._setter(newValue);
  }
};
function computed$1$1(getterOrOptions, debugOptions, isSSR = false) {
  let getter;
  let setter;
  const onlyGetter = isFunction$3(getterOrOptions);
  if (onlyGetter) {
    getter = getterOrOptions;
    setter = () => {
      console.warn("Write operation failed: computed value is readonly");
    };
  } else {
    getter = getterOrOptions.get;
    setter = getterOrOptions.set;
  }
  const cRef = new ComputedRefImpl$1(getter, setter, onlyGetter || !setter, isSSR);
  if (debugOptions && !isSSR) {
    cRef.effect.onTrack = debugOptions.onTrack;
    cRef.effect.onTrigger = debugOptions.onTrigger;
  }
  return cRef;
}
const stack$1 = [];
function pushWarningContext$1(vnode) {
  stack$1.push(vnode);
}
function popWarningContext$1() {
  stack$1.pop();
}
function warn$5(msg, ...args) {
  pauseTracking$1();
  const instance = stack$1.length ? stack$1[stack$1.length - 1].component : null;
  const appWarnHandler = instance && instance.appContext.config.warnHandler;
  const trace = getComponentTrace$1();
  if (appWarnHandler) {
    callWithErrorHandling$1(
      appWarnHandler,
      instance,
      11,
      [
        msg + args.join(""),
        instance && instance.proxy,
        trace.map(
          ({ vnode }) => `at <${formatComponentName$1(instance, vnode.type)}>`
        ).join("\n"),
        trace
      ]
    );
  } else {
    const warnArgs = [`[Vue warn]: ${msg}`, ...args];
    if (trace.length && // avoid spamming console during tests
    true) {
      warnArgs.push(`
`, ...formatTrace$1(trace));
    }
    console.warn(...warnArgs);
  }
  resetTracking$1();
}
function getComponentTrace$1() {
  let currentVNode = stack$1[stack$1.length - 1];
  if (!currentVNode) {
    return [];
  }
  const normalizedStack = [];
  while (currentVNode) {
    const last = normalizedStack[0];
    if (last && last.vnode === currentVNode) {
      last.recurseCount++;
    } else {
      normalizedStack.push({
        vnode: currentVNode,
        recurseCount: 0
      });
    }
    const parentInstance = currentVNode.component && currentVNode.component.parent;
    currentVNode = parentInstance && parentInstance.vnode;
  }
  return normalizedStack;
}
function formatTrace$1(trace) {
  const logs = [];
  trace.forEach((entry, i3) => {
    logs.push(...i3 === 0 ? [] : [`
`], ...formatTraceEntry$1(entry));
  });
  return logs;
}
function formatTraceEntry$1({ vnode, recurseCount }) {
  const postfix = recurseCount > 0 ? `... (${recurseCount} recursive calls)` : ``;
  const isRoot = vnode.component ? vnode.component.parent == null : false;
  const open2 = ` at <${formatComponentName$1(
    vnode.component,
    vnode.type,
    isRoot
  )}`;
  const close = `>` + postfix;
  return vnode.props ? [open2, ...formatProps$1(vnode.props), close] : [open2 + close];
}
function formatProps$1(props) {
  const res = [];
  const keys = Object.keys(props);
  keys.slice(0, 3).forEach((key) => {
    res.push(...formatProp$1(key, props[key]));
  });
  if (keys.length > 3) {
    res.push(` ...`);
  }
  return res;
}
function formatProp$1(key, value, raw) {
  if (isString$3(value)) {
    value = JSON.stringify(value);
    return raw ? value : [`${key}=${value}`];
  } else if (typeof value === "number" || typeof value === "boolean" || value == null) {
    return raw ? value : [`${key}=${value}`];
  } else if (isRef$1(value)) {
    value = formatProp$1(key, toRaw$1(value.value), true);
    return raw ? value : [`${key}=Ref<`, value, `>`];
  } else if (isFunction$3(value)) {
    return [`${key}=fn${value.name ? `<${value.name}>` : ``}`];
  } else {
    value = toRaw$1(value);
    return raw ? value : [`${key}=`, value];
  }
}
function assertNumber$1(val, type) {
  if (val === void 0) {
    return;
  } else if (typeof val !== "number") {
    warn$5(`${type} is not a valid number - got ${JSON.stringify(val)}.`);
  } else if (isNaN(val)) {
    warn$5(`${type} is NaN - the duration expression might be incorrect.`);
  }
}
const ErrorTypeStrings = {
  ["sp"]: "serverPrefetch hook",
  ["bc"]: "beforeCreate hook",
  ["c"]: "created hook",
  ["bm"]: "beforeMount hook",
  ["m"]: "mounted hook",
  ["bu"]: "beforeUpdate hook",
  ["u"]: "updated",
  ["bum"]: "beforeUnmount hook",
  ["um"]: "unmounted hook",
  ["a"]: "activated hook",
  ["da"]: "deactivated hook",
  ["ec"]: "errorCaptured hook",
  ["rtc"]: "renderTracked hook",
  ["rtg"]: "renderTriggered hook",
  [0]: "setup function",
  [1]: "render function",
  [2]: "watcher getter",
  [3]: "watcher callback",
  [4]: "watcher cleanup function",
  [5]: "native event handler",
  [6]: "component event handler",
  [7]: "vnode hook",
  [8]: "directive hook",
  [9]: "transition hook",
  [10]: "app errorHandler",
  [11]: "app warnHandler",
  [12]: "ref function",
  [13]: "async component loader",
  [14]: "scheduler flush. This is likely a Vue internals bug. Please open an issue at https://new-issue.vuejs.org/?repo=vuejs/core"
};
function callWithErrorHandling$1(fn2, instance, type, args) {
  let res;
  try {
    res = args ? fn2(...args) : fn2();
  } catch (err) {
    handleError$1(err, instance, type);
  }
  return res;
}
function callWithAsyncErrorHandling$1(fn2, instance, type, args) {
  if (isFunction$3(fn2)) {
    const res = callWithErrorHandling$1(fn2, instance, type, args);
    if (res && isPromise$2(res)) {
      res.catch((err) => {
        handleError$1(err, instance, type);
      });
    }
    return res;
  }
  const values = [];
  for (let i3 = 0; i3 < fn2.length; i3++) {
    values.push(callWithAsyncErrorHandling$1(fn2[i3], instance, type, args));
  }
  return values;
}
function handleError$1(err, instance, type, throwInDev = true) {
  const contextVNode = instance ? instance.vnode : null;
  if (instance) {
    let cur = instance.parent;
    const exposedInstance = instance.proxy;
    const errorInfo = ErrorTypeStrings[type];
    while (cur) {
      const errorCapturedHooks = cur.ec;
      if (errorCapturedHooks) {
        for (let i3 = 0; i3 < errorCapturedHooks.length; i3++) {
          if (errorCapturedHooks[i3](err, exposedInstance, errorInfo) === false) {
            return;
          }
        }
      }
      cur = cur.parent;
    }
    const appErrorHandler = instance.appContext.config.errorHandler;
    if (appErrorHandler) {
      callWithErrorHandling$1(
        appErrorHandler,
        null,
        10,
        [err, exposedInstance, errorInfo]
      );
      return;
    }
  }
  logError$1(err, type, contextVNode, throwInDev);
}
function logError$1(err, type, contextVNode, throwInDev = true) {
  {
    const info = ErrorTypeStrings[type];
    if (contextVNode) {
      pushWarningContext$1(contextVNode);
    }
    warn$5(`Unhandled error${info ? ` during execution of ${info}` : ``}`);
    if (contextVNode) {
      popWarningContext$1();
    }
    if (throwInDev) {
      throw err;
    } else {
      console.error(err);
    }
  }
}
let isFlushing$1 = false;
let isFlushPending$1 = false;
const queue$1 = [];
let flushIndex$1 = 0;
const pendingPostFlushCbs$1 = [];
let activePostFlushCbs$1 = null;
let postFlushIndex$1 = 0;
const resolvedPromise$1 = /* @__PURE__ */ Promise.resolve();
let currentFlushPromise$1 = null;
const RECURSION_LIMIT$1 = 100;
function nextTick$1(fn2) {
  const p2 = currentFlushPromise$1 || resolvedPromise$1;
  return fn2 ? p2.then(this ? fn2.bind(this) : fn2) : p2;
}
function findInsertionIndex$1(id2) {
  let start = flushIndex$1 + 1;
  let end = queue$1.length;
  while (start < end) {
    const middle = start + end >>> 1;
    const middleJob = queue$1[middle];
    const middleJobId = getId$1(middleJob);
    if (middleJobId < id2 || middleJobId === id2 && middleJob.pre) {
      start = middle + 1;
    } else {
      end = middle;
    }
  }
  return start;
}
function queueJob$1(job) {
  if (!queue$1.length || !queue$1.includes(
    job,
    isFlushing$1 && job.allowRecurse ? flushIndex$1 + 1 : flushIndex$1
  )) {
    if (job.id == null) {
      queue$1.push(job);
    } else {
      queue$1.splice(findInsertionIndex$1(job.id), 0, job);
    }
    queueFlush$1();
  }
}
function queueFlush$1() {
  if (!isFlushing$1 && !isFlushPending$1) {
    isFlushPending$1 = true;
    currentFlushPromise$1 = resolvedPromise$1.then(flushJobs$1);
  }
}
function invalidateJob$1(job) {
  const i3 = queue$1.indexOf(job);
  if (i3 > flushIndex$1) {
    queue$1.splice(i3, 1);
  }
}
function queuePostFlushCb$1(cb) {
  if (!isArray$4(cb)) {
    if (!activePostFlushCbs$1 || !activePostFlushCbs$1.includes(
      cb,
      cb.allowRecurse ? postFlushIndex$1 + 1 : postFlushIndex$1
    )) {
      pendingPostFlushCbs$1.push(cb);
    }
  } else {
    pendingPostFlushCbs$1.push(...cb);
  }
  queueFlush$1();
}
function flushPreFlushCbs$1(seen2, i3 = isFlushing$1 ? flushIndex$1 + 1 : 0) {
  {
    seen2 = seen2 || /* @__PURE__ */ new Map();
  }
  for (; i3 < queue$1.length; i3++) {
    const cb = queue$1[i3];
    if (cb && cb.pre) {
      if (checkRecursiveUpdates$1(seen2, cb)) {
        continue;
      }
      queue$1.splice(i3, 1);
      i3--;
      cb();
    }
  }
}
function flushPostFlushCbs$1(seen2) {
  if (pendingPostFlushCbs$1.length) {
    const deduped = [...new Set(pendingPostFlushCbs$1)];
    pendingPostFlushCbs$1.length = 0;
    if (activePostFlushCbs$1) {
      activePostFlushCbs$1.push(...deduped);
      return;
    }
    activePostFlushCbs$1 = deduped;
    {
      seen2 = seen2 || /* @__PURE__ */ new Map();
    }
    activePostFlushCbs$1.sort((a4, b4) => getId$1(a4) - getId$1(b4));
    for (postFlushIndex$1 = 0; postFlushIndex$1 < activePostFlushCbs$1.length; postFlushIndex$1++) {
      if (checkRecursiveUpdates$1(seen2, activePostFlushCbs$1[postFlushIndex$1])) {
        continue;
      }
      activePostFlushCbs$1[postFlushIndex$1]();
    }
    activePostFlushCbs$1 = null;
    postFlushIndex$1 = 0;
  }
}
const getId$1 = (job) => job.id == null ? Infinity : job.id;
const comparator$1 = (a4, b4) => {
  const diff = getId$1(a4) - getId$1(b4);
  if (diff === 0) {
    if (a4.pre && !b4.pre)
      return -1;
    if (b4.pre && !a4.pre)
      return 1;
  }
  return diff;
};
function flushJobs$1(seen2) {
  isFlushPending$1 = false;
  isFlushing$1 = true;
  {
    seen2 = seen2 || /* @__PURE__ */ new Map();
  }
  queue$1.sort(comparator$1);
  const check = (job) => checkRecursiveUpdates$1(seen2, job);
  try {
    for (flushIndex$1 = 0; flushIndex$1 < queue$1.length; flushIndex$1++) {
      const job = queue$1[flushIndex$1];
      if (job && job.active !== false) {
        if (check(job)) {
          continue;
        }
        callWithErrorHandling$1(job, null, 14);
      }
    }
  } finally {
    flushIndex$1 = 0;
    queue$1.length = 0;
    flushPostFlushCbs$1(seen2);
    isFlushing$1 = false;
    currentFlushPromise$1 = null;
    if (queue$1.length || pendingPostFlushCbs$1.length) {
      flushJobs$1(seen2);
    }
  }
}
function checkRecursiveUpdates$1(seen2, fn2) {
  if (!seen2.has(fn2)) {
    seen2.set(fn2, 1);
  } else {
    const count2 = seen2.get(fn2);
    if (count2 > RECURSION_LIMIT$1) {
      const instance = fn2.ownerInstance;
      const componentName = instance && getComponentName$1(instance.type);
      warn$5(
        `Maximum recursive updates exceeded${componentName ? ` in component <${componentName}>` : ``}. This means you have a reactive effect that is mutating its own dependencies and thus recursively triggering itself. Possible sources include component template, render function, updated hook or watcher source function.`
      );
      return true;
    } else {
      seen2.set(fn2, count2 + 1);
    }
  }
}
let isHmrUpdating$1 = false;
const hmrDirtyComponents$1 = /* @__PURE__ */ new Set();
{
  getGlobalThis$2().__VUE_HMR_RUNTIME__ = {
    createRecord: tryWrap$1(createRecord$1),
    rerender: tryWrap$1(rerender$1),
    reload: tryWrap$1(reload$1)
  };
}
const map$1 = /* @__PURE__ */ new Map();
function registerHMR$1(instance) {
  const id2 = instance.type.__hmrId;
  let record = map$1.get(id2);
  if (!record) {
    createRecord$1(id2, instance.type);
    record = map$1.get(id2);
  }
  record.instances.add(instance);
}
function unregisterHMR$1(instance) {
  map$1.get(instance.type.__hmrId).instances.delete(instance);
}
function createRecord$1(id2, initialDef) {
  if (map$1.has(id2)) {
    return false;
  }
  map$1.set(id2, {
    initialDef: normalizeClassComponent$1(initialDef),
    instances: /* @__PURE__ */ new Set()
  });
  return true;
}
function normalizeClassComponent$1(component) {
  return isClassComponent$1(component) ? component.__vccOpts : component;
}
function rerender$1(id2, newRender) {
  const record = map$1.get(id2);
  if (!record) {
    return;
  }
  record.initialDef.render = newRender;
  [...record.instances].forEach((instance) => {
    if (newRender) {
      instance.render = newRender;
      normalizeClassComponent$1(instance.type).render = newRender;
    }
    instance.renderCache = [];
    isHmrUpdating$1 = true;
    instance.update();
    isHmrUpdating$1 = false;
  });
}
function reload$1(id2, newComp) {
  const record = map$1.get(id2);
  if (!record)
    return;
  newComp = normalizeClassComponent$1(newComp);
  updateComponentDef$1(record.initialDef, newComp);
  const instances = [...record.instances];
  for (const instance of instances) {
    const oldComp = normalizeClassComponent$1(instance.type);
    if (!hmrDirtyComponents$1.has(oldComp)) {
      if (oldComp !== record.initialDef) {
        updateComponentDef$1(oldComp, newComp);
      }
      hmrDirtyComponents$1.add(oldComp);
    }
    instance.appContext.propsCache.delete(instance.type);
    instance.appContext.emitsCache.delete(instance.type);
    instance.appContext.optionsCache.delete(instance.type);
    if (instance.ceReload) {
      hmrDirtyComponents$1.add(oldComp);
      instance.ceReload(newComp.styles);
      hmrDirtyComponents$1.delete(oldComp);
    } else if (instance.parent) {
      queueJob$1(instance.parent.update);
    } else if (instance.appContext.reload) {
      instance.appContext.reload();
    } else if (typeof window !== "undefined") {
      window.location.reload();
    } else {
      console.warn(
        "[HMR] Root or manually mounted instance modified. Full reload required."
      );
    }
  }
  queuePostFlushCb$1(() => {
    for (const instance of instances) {
      hmrDirtyComponents$1.delete(
        normalizeClassComponent$1(instance.type)
      );
    }
  });
}
function updateComponentDef$1(oldComp, newComp) {
  extend$1(oldComp, newComp);
  for (const key in oldComp) {
    if (key !== "__file" && !(key in newComp)) {
      delete oldComp[key];
    }
  }
}
function tryWrap$1(fn2) {
  return (id2, arg) => {
    try {
      return fn2(id2, arg);
    } catch (e3) {
      console.error(e3);
      console.warn(
        `[HMR] Something went wrong during Vue component hot-reload. Full reload required.`
      );
    }
  };
}
let devtools$2;
let buffer$1 = [];
let devtoolsNotInstalled$1 = false;
function emit$1$1(event, ...args) {
  if (devtools$2) {
    devtools$2.emit(event, ...args);
  } else if (!devtoolsNotInstalled$1) {
    buffer$1.push({ event, args });
  }
}
function setDevtoolsHook(hook, target) {
  var _a2, _b;
  devtools$2 = hook;
  if (devtools$2) {
    devtools$2.enabled = true;
    buffer$1.forEach(({ event, args }) => devtools$2.emit(event, ...args));
    buffer$1 = [];
  } else if (
    // handle late devtools injection - only do this if we are in an actual
    // browser environment to avoid the timer handle stalling test runner exit
    // (#4815)
    typeof window !== "undefined" && // some envs mock window but not fully
    window.HTMLElement && // also exclude jsdom
    !((_b = (_a2 = window.navigator) == null ? void 0 : _a2.userAgent) == null ? void 0 : _b.includes("jsdom"))
  ) {
    const replay = target.__VUE_DEVTOOLS_HOOK_REPLAY__ = target.__VUE_DEVTOOLS_HOOK_REPLAY__ || [];
    replay.push((newHook) => {
      setDevtoolsHook(newHook, target);
    });
    setTimeout(() => {
      if (!devtools$2) {
        target.__VUE_DEVTOOLS_HOOK_REPLAY__ = null;
        devtoolsNotInstalled$1 = true;
        buffer$1 = [];
      }
    }, 3e3);
  } else {
    devtoolsNotInstalled$1 = true;
    buffer$1 = [];
  }
}
function devtoolsInitApp$1(app, version2) {
  emit$1$1("app:init", app, version2, {
    Fragment: Fragment$1,
    Text: Text$1,
    Comment: Comment$2,
    Static: Static$1
  });
}
function devtoolsUnmountApp$1(app) {
  emit$1$1("app:unmount", app);
}
const devtoolsComponentAdded$1 = /* @__PURE__ */ createDevtoolsComponentHook$1(
  "component:added"
  /* COMPONENT_ADDED */
);
const devtoolsComponentUpdated$1 = /* @__PURE__ */ createDevtoolsComponentHook$1(
  "component:updated"
  /* COMPONENT_UPDATED */
);
const _devtoolsComponentRemoved$1 = /* @__PURE__ */ createDevtoolsComponentHook$1(
  "component:removed"
  /* COMPONENT_REMOVED */
);
const devtoolsComponentRemoved$1 = (component) => {
  if (devtools$2 && typeof devtools$2.cleanupBuffer === "function" && // remove the component if it wasn't buffered
  !devtools$2.cleanupBuffer(component)) {
    _devtoolsComponentRemoved$1(component);
  }
};
function createDevtoolsComponentHook$1(hook) {
  return (component) => {
    emit$1$1(
      hook,
      component.appContext.app,
      component.uid,
      component.parent ? component.parent.uid : void 0,
      component
    );
  };
}
const devtoolsPerfStart$1 = /* @__PURE__ */ createDevtoolsPerformanceHook$1(
  "perf:start"
  /* PERFORMANCE_START */
);
const devtoolsPerfEnd$1 = /* @__PURE__ */ createDevtoolsPerformanceHook$1(
  "perf:end"
  /* PERFORMANCE_END */
);
function createDevtoolsPerformanceHook$1(hook) {
  return (component, type, time) => {
    emit$1$1(hook, component.appContext.app, component.uid, component, type, time);
  };
}
function devtoolsComponentEmit$1(component, event, params) {
  emit$1$1(
    "component:emit",
    component.appContext.app,
    component,
    event,
    params
  );
}
function emit$2(instance, event, ...rawArgs) {
  if (instance.isUnmounted)
    return;
  const props = instance.vnode.props || EMPTY_OBJ$1;
  {
    const {
      emitsOptions,
      propsOptions: [propsOptions]
    } = instance;
    if (emitsOptions) {
      if (!(event in emitsOptions) && true) {
        if (!propsOptions || !(toHandlerKey$1(event) in propsOptions)) {
          warn$5(
            `Component emitted event "${event}" but it is neither declared in the emits option nor as an "${toHandlerKey$1(event)}" prop.`
          );
        }
      } else {
        const validator = emitsOptions[event];
        if (isFunction$3(validator)) {
          const isValid2 = validator(...rawArgs);
          if (!isValid2) {
            warn$5(
              `Invalid event arguments: event validation failed for event "${event}".`
            );
          }
        }
      }
    }
  }
  let args = rawArgs;
  const isModelListener2 = event.startsWith("update:");
  const modelArg = isModelListener2 && event.slice(7);
  if (modelArg && modelArg in props) {
    const modifiersKey = `${modelArg === "modelValue" ? "model" : modelArg}Modifiers`;
    const { number: number2, trim } = props[modifiersKey] || EMPTY_OBJ$1;
    if (trim) {
      args = rawArgs.map((a4) => isString$3(a4) ? a4.trim() : a4);
    }
    if (number2) {
      args = rawArgs.map(looseToNumber$1);
    }
  }
  {
    devtoolsComponentEmit$1(instance, event, args);
  }
  {
    const lowerCaseEvent = event.toLowerCase();
    if (lowerCaseEvent !== event && props[toHandlerKey$1(lowerCaseEvent)]) {
      warn$5(
        `Event "${lowerCaseEvent}" is emitted in component ${formatComponentName$1(
          instance,
          instance.type
        )} but the handler is registered for "${event}". Note that HTML attributes are case-insensitive and you cannot use v-on to listen to camelCase events when using in-DOM templates. You should probably use "${hyphenate$1(event)}" instead of "${event}".`
      );
    }
  }
  let handlerName;
  let handler = props[handlerName = toHandlerKey$1(event)] || // also try camelCase event handler (#2249)
  props[handlerName = toHandlerKey$1(camelize$1(event))];
  if (!handler && isModelListener2) {
    handler = props[handlerName = toHandlerKey$1(hyphenate$1(event))];
  }
  if (handler) {
    callWithAsyncErrorHandling$1(
      handler,
      instance,
      6,
      args
    );
  }
  const onceHandler = props[handlerName + `Once`];
  if (onceHandler) {
    if (!instance.emitted) {
      instance.emitted = {};
    } else if (instance.emitted[handlerName]) {
      return;
    }
    instance.emitted[handlerName] = true;
    callWithAsyncErrorHandling$1(
      onceHandler,
      instance,
      6,
      args
    );
  }
}
function normalizeEmitsOptions$1(comp, appContext, asMixin = false) {
  const cache2 = appContext.emitsCache;
  const cached = cache2.get(comp);
  if (cached !== void 0) {
    return cached;
  }
  const raw = comp.emits;
  let normalized = {};
  let hasExtends = false;
  if (!isFunction$3(comp)) {
    const extendEmits = (raw2) => {
      const normalizedFromExtend = normalizeEmitsOptions$1(raw2, appContext, true);
      if (normalizedFromExtend) {
        hasExtends = true;
        extend$1(normalized, normalizedFromExtend);
      }
    };
    if (!asMixin && appContext.mixins.length) {
      appContext.mixins.forEach(extendEmits);
    }
    if (comp.extends) {
      extendEmits(comp.extends);
    }
    if (comp.mixins) {
      comp.mixins.forEach(extendEmits);
    }
  }
  if (!raw && !hasExtends) {
    if (isObject$4(comp)) {
      cache2.set(comp, null);
    }
    return null;
  }
  if (isArray$4(raw)) {
    raw.forEach((key) => normalized[key] = null);
  } else {
    extend$1(normalized, raw);
  }
  if (isObject$4(comp)) {
    cache2.set(comp, normalized);
  }
  return normalized;
}
function isEmitListener$1(options, key) {
  if (!options || !isOn$1(key)) {
    return false;
  }
  key = key.slice(2).replace(/Once$/, "");
  return hasOwn$2(options, key[0].toLowerCase() + key.slice(1)) || hasOwn$2(options, hyphenate$1(key)) || hasOwn$2(options, key);
}
let currentRenderingInstance$1 = null;
let currentScopeId$1 = null;
function setCurrentRenderingInstance$1(instance) {
  const prev = currentRenderingInstance$1;
  currentRenderingInstance$1 = instance;
  currentScopeId$1 = instance && instance.type.__scopeId || null;
  return prev;
}
function pushScopeId$1(id2) {
  currentScopeId$1 = id2;
}
function popScopeId$1() {
  currentScopeId$1 = null;
}
const withScopeId = (_id) => withCtx$1;
function withCtx$1(fn2, ctx = currentRenderingInstance$1, isNonScopedSlot) {
  if (!ctx)
    return fn2;
  if (fn2._n) {
    return fn2;
  }
  const renderFnWithContext = (...args) => {
    if (renderFnWithContext._d) {
      setBlockTracking$1(-1);
    }
    const prevInstance = setCurrentRenderingInstance$1(ctx);
    let res;
    try {
      res = fn2(...args);
    } finally {
      setCurrentRenderingInstance$1(prevInstance);
      if (renderFnWithContext._d) {
        setBlockTracking$1(1);
      }
    }
    {
      devtoolsComponentUpdated$1(ctx);
    }
    return res;
  };
  renderFnWithContext._n = true;
  renderFnWithContext._c = true;
  renderFnWithContext._d = true;
  return renderFnWithContext;
}
let accessedAttrs$1 = false;
function markAttrsAccessed$1() {
  accessedAttrs$1 = true;
}
function renderComponentRoot$1(instance) {
  const {
    type: Component,
    vnode,
    proxy,
    withProxy,
    props,
    propsOptions: [propsOptions],
    slots,
    attrs,
    emit: emit2,
    render: render2,
    renderCache,
    data,
    setupState,
    ctx,
    inheritAttrs
  } = instance;
  let result;
  let fallthroughAttrs;
  const prev = setCurrentRenderingInstance$1(instance);
  {
    accessedAttrs$1 = false;
  }
  try {
    if (vnode.shapeFlag & 4) {
      const proxyToUse = withProxy || proxy;
      result = normalizeVNode$1(
        render2.call(
          proxyToUse,
          proxyToUse,
          renderCache,
          props,
          setupState,
          data,
          ctx
        )
      );
      fallthroughAttrs = attrs;
    } else {
      const render22 = Component;
      if (attrs === props) {
        markAttrsAccessed$1();
      }
      result = normalizeVNode$1(
        render22.length > 1 ? render22(
          props,
          true ? {
            get attrs() {
              markAttrsAccessed$1();
              return attrs;
            },
            slots,
            emit: emit2
          } : { attrs, slots, emit: emit2 }
        ) : render22(
          props,
          null
          /* we know it doesn't need it */
        )
      );
      fallthroughAttrs = Component.props ? attrs : getFunctionalFallthrough$1(attrs);
    }
  } catch (err) {
    blockStack$1.length = 0;
    handleError$1(err, instance, 1);
    result = createVNode$1(Comment$2);
  }
  let root = result;
  let setRoot = void 0;
  if (result.patchFlag > 0 && result.patchFlag & 2048) {
    [root, setRoot] = getChildRoot$1(result);
  }
  if (fallthroughAttrs && inheritAttrs !== false) {
    const keys = Object.keys(fallthroughAttrs);
    const { shapeFlag } = root;
    if (keys.length) {
      if (shapeFlag & (1 | 6)) {
        if (propsOptions && keys.some(isModelListener$1)) {
          fallthroughAttrs = filterModelListeners$1(
            fallthroughAttrs,
            propsOptions
          );
        }
        root = cloneVNode$1(root, fallthroughAttrs);
      } else if (!accessedAttrs$1 && root.type !== Comment$2) {
        const allAttrs = Object.keys(attrs);
        const eventAttrs = [];
        const extraAttrs = [];
        for (let i3 = 0, l2 = allAttrs.length; i3 < l2; i3++) {
          const key = allAttrs[i3];
          if (isOn$1(key)) {
            if (!isModelListener$1(key)) {
              eventAttrs.push(key[2].toLowerCase() + key.slice(3));
            }
          } else {
            extraAttrs.push(key);
          }
        }
        if (extraAttrs.length) {
          warn$5(
            `Extraneous non-props attributes (${extraAttrs.join(", ")}) were passed to component but could not be automatically inherited because component renders fragment or text root nodes.`
          );
        }
        if (eventAttrs.length) {
          warn$5(
            `Extraneous non-emits event listeners (${eventAttrs.join(", ")}) were passed to component but could not be automatically inherited because component renders fragment or text root nodes. If the listener is intended to be a component custom event listener only, declare it using the "emits" option.`
          );
        }
      }
    }
  }
  if (vnode.dirs) {
    if (!isElementRoot$1(root)) {
      warn$5(
        `Runtime directive used on component with non-element root node. The directives will not function as intended.`
      );
    }
    root = cloneVNode$1(root);
    root.dirs = root.dirs ? root.dirs.concat(vnode.dirs) : vnode.dirs;
  }
  if (vnode.transition) {
    if (!isElementRoot$1(root)) {
      warn$5(
        `Component inside <Transition> renders non-element root node that cannot be animated.`
      );
    }
    root.transition = vnode.transition;
  }
  if (setRoot) {
    setRoot(root);
  } else {
    result = root;
  }
  setCurrentRenderingInstance$1(prev);
  return result;
}
const getChildRoot$1 = (vnode) => {
  const rawChildren = vnode.children;
  const dynamicChildren = vnode.dynamicChildren;
  const childRoot = filterSingleRoot$1(rawChildren);
  if (!childRoot) {
    return [vnode, void 0];
  }
  const index = rawChildren.indexOf(childRoot);
  const dynamicIndex = dynamicChildren ? dynamicChildren.indexOf(childRoot) : -1;
  const setRoot = (updatedRoot) => {
    rawChildren[index] = updatedRoot;
    if (dynamicChildren) {
      if (dynamicIndex > -1) {
        dynamicChildren[dynamicIndex] = updatedRoot;
      } else if (updatedRoot.patchFlag > 0) {
        vnode.dynamicChildren = [...dynamicChildren, updatedRoot];
      }
    }
  };
  return [normalizeVNode$1(childRoot), setRoot];
};
function filterSingleRoot$1(children) {
  let singleRoot;
  for (let i3 = 0; i3 < children.length; i3++) {
    const child = children[i3];
    if (isVNode$2(child)) {
      if (child.type !== Comment$2 || child.children === "v-if") {
        if (singleRoot) {
          return;
        } else {
          singleRoot = child;
        }
      }
    } else {
      return;
    }
  }
  return singleRoot;
}
const getFunctionalFallthrough$1 = (attrs) => {
  let res;
  for (const key in attrs) {
    if (key === "class" || key === "style" || isOn$1(key)) {
      (res || (res = {}))[key] = attrs[key];
    }
  }
  return res;
};
const filterModelListeners$1 = (attrs, props) => {
  const res = {};
  for (const key in attrs) {
    if (!isModelListener$1(key) || !(key.slice(9) in props)) {
      res[key] = attrs[key];
    }
  }
  return res;
};
const isElementRoot$1 = (vnode) => {
  return vnode.shapeFlag & (6 | 1) || vnode.type === Comment$2;
};
function shouldUpdateComponent$1(prevVNode, nextVNode, optimized) {
  const { props: prevProps, children: prevChildren, component } = prevVNode;
  const { props: nextProps, children: nextChildren, patchFlag } = nextVNode;
  const emits = component.emitsOptions;
  if ((prevChildren || nextChildren) && isHmrUpdating$1) {
    return true;
  }
  if (nextVNode.dirs || nextVNode.transition) {
    return true;
  }
  if (optimized && patchFlag >= 0) {
    if (patchFlag & 1024) {
      return true;
    }
    if (patchFlag & 16) {
      if (!prevProps) {
        return !!nextProps;
      }
      return hasPropsChanged$1(prevProps, nextProps, emits);
    } else if (patchFlag & 8) {
      const dynamicProps = nextVNode.dynamicProps;
      for (let i3 = 0; i3 < dynamicProps.length; i3++) {
        const key = dynamicProps[i3];
        if (nextProps[key] !== prevProps[key] && !isEmitListener$1(emits, key)) {
          return true;
        }
      }
    }
  } else {
    if (prevChildren || nextChildren) {
      if (!nextChildren || !nextChildren.$stable) {
        return true;
      }
    }
    if (prevProps === nextProps) {
      return false;
    }
    if (!prevProps) {
      return !!nextProps;
    }
    if (!nextProps) {
      return true;
    }
    return hasPropsChanged$1(prevProps, nextProps, emits);
  }
  return false;
}
function hasPropsChanged$1(prevProps, nextProps, emitsOptions) {
  const nextKeys = Object.keys(nextProps);
  if (nextKeys.length !== Object.keys(prevProps).length) {
    return true;
  }
  for (let i3 = 0; i3 < nextKeys.length; i3++) {
    const key = nextKeys[i3];
    if (nextProps[key] !== prevProps[key] && !isEmitListener$1(emitsOptions, key)) {
      return true;
    }
  }
  return false;
}
function updateHOCHostEl$1({ vnode, parent }, el3) {
  while (parent && parent.subTree === vnode) {
    (vnode = parent.vnode).el = el3;
    parent = parent.parent;
  }
}
const COMPONENTS$1 = "components";
const DIRECTIVES = "directives";
function resolveComponent$1(name, maybeSelfReference) {
  return resolveAsset$1(COMPONENTS$1, name, true, maybeSelfReference) || name;
}
const NULL_DYNAMIC_COMPONENT$1 = Symbol.for("v-ndc");
function resolveDynamicComponent$1(component) {
  if (isString$3(component)) {
    return resolveAsset$1(COMPONENTS$1, component, false) || component;
  } else {
    return component || NULL_DYNAMIC_COMPONENT$1;
  }
}
function resolveDirective(name) {
  return resolveAsset$1(DIRECTIVES, name);
}
function resolveAsset$1(type, name, warnMissing = true, maybeSelfReference = false) {
  const instance = currentRenderingInstance$1 || currentInstance$1;
  if (instance) {
    const Component = instance.type;
    if (type === COMPONENTS$1) {
      const selfName = getComponentName$1(
        Component,
        false
        /* do not include inferred name to avoid breaking existing code */
      );
      if (selfName && (selfName === name || selfName === camelize$1(name) || selfName === capitalize$2(camelize$1(name)))) {
        return Component;
      }
    }
    const res = (
      // local registration
      // check instance[type] first which is resolved for options API
      resolve$1(instance[type] || Component[type], name) || // global registration
      resolve$1(instance.appContext[type], name)
    );
    if (!res && maybeSelfReference) {
      return Component;
    }
    if (warnMissing && !res) {
      const extra = type === COMPONENTS$1 ? `
If this is a native custom element, make sure to exclude it from component resolution via compilerOptions.isCustomElement.` : ``;
      warn$5(`Failed to resolve ${type.slice(0, -1)}: ${name}${extra}`);
    }
    return res;
  } else {
    warn$5(
      `resolve${capitalize$2(type.slice(0, -1))} can only be used in render() or setup().`
    );
  }
}
function resolve$1(registry, name) {
  return registry && (registry[name] || registry[camelize$1(name)] || registry[capitalize$2(camelize$1(name))]);
}
const isSuspense$1 = (type) => type.__isSuspense;
function queueEffectWithSuspense$1(fn2, suspense) {
  if (suspense && suspense.pendingBranch) {
    if (isArray$4(fn2)) {
      suspense.effects.push(...fn2);
    } else {
      suspense.effects.push(fn2);
    }
  } else {
    queuePostFlushCb$1(fn2);
  }
}
function watchEffect$1(effect2, options) {
  return doWatch$1(effect2, null, options);
}
function watchPostEffect$1(effect2, options) {
  return doWatch$1(
    effect2,
    null,
    extend$1({}, options, { flush: "post" })
  );
}
const INITIAL_WATCHER_VALUE$1 = {};
function watch$1(source, cb, options) {
  if (!isFunction$3(cb)) {
    warn$5(
      `\`watch(fn, options?)\` signature has been moved to a separate API. Use \`watchEffect(fn, options?)\` instead. \`watch\` now only supports \`watch(source, cb, options?) signature.`
    );
  }
  return doWatch$1(source, cb, options);
}
function doWatch$1(source, cb, { immediate, deep, flush: flush2, onTrack, onTrigger } = EMPTY_OBJ$1) {
  var _a2;
  if (!cb) {
    if (immediate !== void 0) {
      warn$5(
        `watch() "immediate" option is only respected when using the watch(source, callback, options?) signature.`
      );
    }
    if (deep !== void 0) {
      warn$5(
        `watch() "deep" option is only respected when using the watch(source, callback, options?) signature.`
      );
    }
  }
  const warnInvalidSource = (s5) => {
    warn$5(
      `Invalid watch source: `,
      s5,
      `A watch source can only be a getter/effect function, a ref, a reactive object, or an array of these types.`
    );
  };
  const instance = getCurrentScope$1() === ((_a2 = currentInstance$1) == null ? void 0 : _a2.scope) ? currentInstance$1 : null;
  let getter;
  let forceTrigger = false;
  let isMultiSource = false;
  if (isRef$1(source)) {
    getter = () => source.value;
    forceTrigger = isShallow$1(source);
  } else if (isReactive$1(source)) {
    getter = () => source;
    deep = true;
  } else if (isArray$4(source)) {
    isMultiSource = true;
    forceTrigger = source.some((s5) => isReactive$1(s5) || isShallow$1(s5));
    getter = () => source.map((s5) => {
      if (isRef$1(s5)) {
        return s5.value;
      } else if (isReactive$1(s5)) {
        return traverse$1(s5);
      } else if (isFunction$3(s5)) {
        return callWithErrorHandling$1(s5, instance, 2);
      } else {
        warnInvalidSource(s5);
      }
    });
  } else if (isFunction$3(source)) {
    if (cb) {
      getter = () => callWithErrorHandling$1(source, instance, 2);
    } else {
      getter = () => {
        if (instance && instance.isUnmounted) {
          return;
        }
        if (cleanup) {
          cleanup();
        }
        return callWithAsyncErrorHandling$1(
          source,
          instance,
          3,
          [onCleanup]
        );
      };
    }
  } else {
    getter = NOOP$1;
    warnInvalidSource(source);
  }
  if (cb && deep) {
    const baseGetter = getter;
    getter = () => traverse$1(baseGetter());
  }
  let cleanup;
  let onCleanup = (fn2) => {
    cleanup = effect2.onStop = () => {
      callWithErrorHandling$1(fn2, instance, 4);
    };
  };
  let ssrCleanup;
  if (isInSSRComponentSetup$1) {
    onCleanup = NOOP$1;
    if (!cb) {
      getter();
    } else if (immediate) {
      callWithAsyncErrorHandling$1(cb, instance, 3, [
        getter(),
        isMultiSource ? [] : void 0,
        onCleanup
      ]);
    }
    if (flush2 === "sync") {
      const ctx = useSSRContext$1();
      ssrCleanup = ctx.__watcherHandles || (ctx.__watcherHandles = []);
    } else {
      return NOOP$1;
    }
  }
  let oldValue = isMultiSource ? new Array(source.length).fill(INITIAL_WATCHER_VALUE$1) : INITIAL_WATCHER_VALUE$1;
  const job = () => {
    if (!effect2.active) {
      return;
    }
    if (cb) {
      const newValue = effect2.run();
      if (deep || forceTrigger || (isMultiSource ? newValue.some((v2, i3) => hasChanged$1(v2, oldValue[i3])) : hasChanged$1(newValue, oldValue)) || false) {
        if (cleanup) {
          cleanup();
        }
        callWithAsyncErrorHandling$1(cb, instance, 3, [
          newValue,
          // pass undefined as the old value when it's changed for the first time
          oldValue === INITIAL_WATCHER_VALUE$1 ? void 0 : isMultiSource && oldValue[0] === INITIAL_WATCHER_VALUE$1 ? [] : oldValue,
          onCleanup
        ]);
        oldValue = newValue;
      }
    } else {
      effect2.run();
    }
  };
  job.allowRecurse = !!cb;
  let scheduler2;
  if (flush2 === "sync") {
    scheduler2 = job;
  } else if (flush2 === "post") {
    scheduler2 = () => queuePostRenderEffect$1(job, instance && instance.suspense);
  } else {
    job.pre = true;
    if (instance)
      job.id = instance.uid;
    scheduler2 = () => queueJob$1(job);
  }
  const effect2 = new ReactiveEffect$1(getter, scheduler2);
  {
    effect2.onTrack = onTrack;
    effect2.onTrigger = onTrigger;
  }
  if (cb) {
    if (immediate) {
      job();
    } else {
      oldValue = effect2.run();
    }
  } else if (flush2 === "post") {
    queuePostRenderEffect$1(
      effect2.run.bind(effect2),
      instance && instance.suspense
    );
  } else {
    effect2.run();
  }
  const unwatch = () => {
    effect2.stop();
    if (instance && instance.scope) {
      remove$1(instance.scope.effects, effect2);
    }
  };
  if (ssrCleanup)
    ssrCleanup.push(unwatch);
  return unwatch;
}
function instanceWatch$1(source, value, options) {
  const publicThis = this.proxy;
  const getter = isString$3(source) ? source.includes(".") ? createPathGetter$1(publicThis, source) : () => publicThis[source] : source.bind(publicThis, publicThis);
  let cb;
  if (isFunction$3(value)) {
    cb = value;
  } else {
    cb = value.handler;
    options = value;
  }
  const cur = currentInstance$1;
  setCurrentInstance$1(this);
  const res = doWatch$1(getter, cb.bind(publicThis), options);
  if (cur) {
    setCurrentInstance$1(cur);
  } else {
    unsetCurrentInstance$1();
  }
  return res;
}
function createPathGetter$1(ctx, path) {
  const segments = path.split(".");
  return () => {
    let cur = ctx;
    for (let i3 = 0; i3 < segments.length && cur; i3++) {
      cur = cur[segments[i3]];
    }
    return cur;
  };
}
function traverse$1(value, seen2) {
  if (!isObject$4(value) || value["__v_skip"]) {
    return value;
  }
  seen2 = seen2 || /* @__PURE__ */ new Set();
  if (seen2.has(value)) {
    return value;
  }
  seen2.add(value);
  if (isRef$1(value)) {
    traverse$1(value.value, seen2);
  } else if (isArray$4(value)) {
    for (let i3 = 0; i3 < value.length; i3++) {
      traverse$1(value[i3], seen2);
    }
  } else if (isSet$1(value) || isMap$1(value)) {
    value.forEach((v2) => {
      traverse$1(v2, seen2);
    });
  } else if (isPlainObject$3(value)) {
    for (const key in value) {
      traverse$1(value[key], seen2);
    }
  }
  return value;
}
function validateDirectiveName$1(name) {
  if (isBuiltInDirective$1(name)) {
    warn$5("Do not use built-in directive ids as custom directive id: " + name);
  }
}
function withDirectives$1(vnode, directives2) {
  const internalInstance = currentRenderingInstance$1;
  if (internalInstance === null) {
    warn$5(`withDirectives can only be used inside render functions.`);
    return vnode;
  }
  const instance = getExposeProxy$1(internalInstance) || internalInstance.proxy;
  const bindings = vnode.dirs || (vnode.dirs = []);
  for (let i3 = 0; i3 < directives2.length; i3++) {
    let [dir, value, arg, modifiers = EMPTY_OBJ$1] = directives2[i3];
    if (dir) {
      if (isFunction$3(dir)) {
        dir = {
          mounted: dir,
          updated: dir
        };
      }
      if (dir.deep) {
        traverse$1(value);
      }
      bindings.push({
        dir,
        instance,
        value,
        oldValue: void 0,
        arg,
        modifiers
      });
    }
  }
  return vnode;
}
function invokeDirectiveHook$1(vnode, prevVNode, instance, name) {
  const bindings = vnode.dirs;
  const oldBindings = prevVNode && prevVNode.dirs;
  for (let i3 = 0; i3 < bindings.length; i3++) {
    const binding = bindings[i3];
    if (oldBindings) {
      binding.oldValue = oldBindings[i3].value;
    }
    let hook = binding.dir[name];
    if (hook) {
      pauseTracking$1();
      callWithAsyncErrorHandling$1(hook, instance, 8, [
        vnode.el,
        binding,
        vnode,
        prevVNode
      ]);
      resetTracking$1();
    }
  }
}
const leaveCbKey$1 = Symbol("_leaveCb");
const enterCbKey$1 = Symbol("_enterCb");
function useTransitionState$1() {
  const state = {
    isMounted: false,
    isLeaving: false,
    isUnmounting: false,
    leavingVNodes: /* @__PURE__ */ new Map()
  };
  onMounted$1(() => {
    state.isMounted = true;
  });
  onBeforeUnmount$1(() => {
    state.isUnmounting = true;
  });
  return state;
}
const TransitionHookValidator$1 = [Function, Array];
const BaseTransitionPropsValidators$1 = {
  mode: String,
  appear: Boolean,
  persisted: Boolean,
  // enter
  onBeforeEnter: TransitionHookValidator$1,
  onEnter: TransitionHookValidator$1,
  onAfterEnter: TransitionHookValidator$1,
  onEnterCancelled: TransitionHookValidator$1,
  // leave
  onBeforeLeave: TransitionHookValidator$1,
  onLeave: TransitionHookValidator$1,
  onAfterLeave: TransitionHookValidator$1,
  onLeaveCancelled: TransitionHookValidator$1,
  // appear
  onBeforeAppear: TransitionHookValidator$1,
  onAppear: TransitionHookValidator$1,
  onAfterAppear: TransitionHookValidator$1,
  onAppearCancelled: TransitionHookValidator$1
};
const BaseTransitionImpl$1 = {
  name: `BaseTransition`,
  props: BaseTransitionPropsValidators$1,
  setup(props, { slots }) {
    const instance = getCurrentInstance$1();
    const state = useTransitionState$1();
    let prevTransitionKey;
    return () => {
      const children = slots.default && getTransitionRawChildren$1(slots.default(), true);
      if (!children || !children.length) {
        return;
      }
      let child = children[0];
      if (children.length > 1) {
        let hasFound = false;
        for (const c3 of children) {
          if (c3.type !== Comment$2) {
            if (hasFound) {
              warn$5(
                "<transition> can only be used on a single element or component. Use <transition-group> for lists."
              );
              break;
            }
            child = c3;
            hasFound = true;
          }
        }
      }
      const rawProps = toRaw$1(props);
      const { mode } = rawProps;
      if (mode && mode !== "in-out" && mode !== "out-in" && mode !== "default") {
        warn$5(`invalid <transition> mode: ${mode}`);
      }
      if (state.isLeaving) {
        return emptyPlaceholder$1(child);
      }
      const innerChild = getKeepAliveChild$1(child);
      if (!innerChild) {
        return emptyPlaceholder$1(child);
      }
      const enterHooks = resolveTransitionHooks$1(
        innerChild,
        rawProps,
        state,
        instance
      );
      setTransitionHooks$1(innerChild, enterHooks);
      const oldChild = instance.subTree;
      const oldInnerChild = oldChild && getKeepAliveChild$1(oldChild);
      let transitionKeyChanged = false;
      const { getTransitionKey } = innerChild.type;
      if (getTransitionKey) {
        const key = getTransitionKey();
        if (prevTransitionKey === void 0) {
          prevTransitionKey = key;
        } else if (key !== prevTransitionKey) {
          prevTransitionKey = key;
          transitionKeyChanged = true;
        }
      }
      if (oldInnerChild && oldInnerChild.type !== Comment$2 && (!isSameVNodeType$1(innerChild, oldInnerChild) || transitionKeyChanged)) {
        const leavingHooks = resolveTransitionHooks$1(
          oldInnerChild,
          rawProps,
          state,
          instance
        );
        setTransitionHooks$1(oldInnerChild, leavingHooks);
        if (mode === "out-in") {
          state.isLeaving = true;
          leavingHooks.afterLeave = () => {
            state.isLeaving = false;
            if (instance.update.active !== false) {
              instance.update();
            }
          };
          return emptyPlaceholder$1(child);
        } else if (mode === "in-out" && innerChild.type !== Comment$2) {
          leavingHooks.delayLeave = (el3, earlyRemove, delayedLeave) => {
            const leavingVNodesCache = getLeavingNodesForType$1(
              state,
              oldInnerChild
            );
            leavingVNodesCache[String(oldInnerChild.key)] = oldInnerChild;
            el3[leaveCbKey$1] = () => {
              earlyRemove();
              el3[leaveCbKey$1] = void 0;
              delete enterHooks.delayedLeave;
            };
            enterHooks.delayedLeave = delayedLeave;
          };
        }
      }
      return child;
    };
  }
};
const BaseTransition$1 = BaseTransitionImpl$1;
function getLeavingNodesForType$1(state, vnode) {
  const { leavingVNodes } = state;
  let leavingVNodesCache = leavingVNodes.get(vnode.type);
  if (!leavingVNodesCache) {
    leavingVNodesCache = /* @__PURE__ */ Object.create(null);
    leavingVNodes.set(vnode.type, leavingVNodesCache);
  }
  return leavingVNodesCache;
}
function resolveTransitionHooks$1(vnode, props, state, instance) {
  const {
    appear,
    mode,
    persisted = false,
    onBeforeEnter,
    onEnter,
    onAfterEnter,
    onEnterCancelled,
    onBeforeLeave,
    onLeave,
    onAfterLeave,
    onLeaveCancelled,
    onBeforeAppear,
    onAppear,
    onAfterAppear,
    onAppearCancelled
  } = props;
  const key = String(vnode.key);
  const leavingVNodesCache = getLeavingNodesForType$1(state, vnode);
  const callHook2 = (hook, args) => {
    hook && callWithAsyncErrorHandling$1(
      hook,
      instance,
      9,
      args
    );
  };
  const callAsyncHook = (hook, args) => {
    const done = args[1];
    callHook2(hook, args);
    if (isArray$4(hook)) {
      if (hook.every((hook2) => hook2.length <= 1))
        done();
    } else if (hook.length <= 1) {
      done();
    }
  };
  const hooks = {
    mode,
    persisted,
    beforeEnter(el3) {
      let hook = onBeforeEnter;
      if (!state.isMounted) {
        if (appear) {
          hook = onBeforeAppear || onBeforeEnter;
        } else {
          return;
        }
      }
      if (el3[leaveCbKey$1]) {
        el3[leaveCbKey$1](
          true
          /* cancelled */
        );
      }
      const leavingVNode = leavingVNodesCache[key];
      if (leavingVNode && isSameVNodeType$1(vnode, leavingVNode) && leavingVNode.el[leaveCbKey$1]) {
        leavingVNode.el[leaveCbKey$1]();
      }
      callHook2(hook, [el3]);
    },
    enter(el3) {
      let hook = onEnter;
      let afterHook = onAfterEnter;
      let cancelHook = onEnterCancelled;
      if (!state.isMounted) {
        if (appear) {
          hook = onAppear || onEnter;
          afterHook = onAfterAppear || onAfterEnter;
          cancelHook = onAppearCancelled || onEnterCancelled;
        } else {
          return;
        }
      }
      let called = false;
      const done = el3[enterCbKey$1] = (cancelled) => {
        if (called)
          return;
        called = true;
        if (cancelled) {
          callHook2(cancelHook, [el3]);
        } else {
          callHook2(afterHook, [el3]);
        }
        if (hooks.delayedLeave) {
          hooks.delayedLeave();
        }
        el3[enterCbKey$1] = void 0;
      };
      if (hook) {
        callAsyncHook(hook, [el3, done]);
      } else {
        done();
      }
    },
    leave(el3, remove2) {
      const key2 = String(vnode.key);
      if (el3[enterCbKey$1]) {
        el3[enterCbKey$1](
          true
          /* cancelled */
        );
      }
      if (state.isUnmounting) {
        return remove2();
      }
      callHook2(onBeforeLeave, [el3]);
      let called = false;
      const done = el3[leaveCbKey$1] = (cancelled) => {
        if (called)
          return;
        called = true;
        remove2();
        if (cancelled) {
          callHook2(onLeaveCancelled, [el3]);
        } else {
          callHook2(onAfterLeave, [el3]);
        }
        el3[leaveCbKey$1] = void 0;
        if (leavingVNodesCache[key2] === vnode) {
          delete leavingVNodesCache[key2];
        }
      };
      leavingVNodesCache[key2] = vnode;
      if (onLeave) {
        callAsyncHook(onLeave, [el3, done]);
      } else {
        done();
      }
    },
    clone(vnode2) {
      return resolveTransitionHooks$1(vnode2, props, state, instance);
    }
  };
  return hooks;
}
function emptyPlaceholder$1(vnode) {
  if (isKeepAlive$1(vnode)) {
    vnode = cloneVNode$1(vnode);
    vnode.children = null;
    return vnode;
  }
}
function getKeepAliveChild$1(vnode) {
  return isKeepAlive$1(vnode) ? vnode.children ? vnode.children[0] : void 0 : vnode;
}
function setTransitionHooks$1(vnode, hooks) {
  if (vnode.shapeFlag & 6 && vnode.component) {
    setTransitionHooks$1(vnode.component.subTree, hooks);
  } else if (vnode.shapeFlag & 128) {
    vnode.ssContent.transition = hooks.clone(vnode.ssContent);
    vnode.ssFallback.transition = hooks.clone(vnode.ssFallback);
  } else {
    vnode.transition = hooks;
  }
}
function getTransitionRawChildren$1(children, keepComment = false, parentKey) {
  let ret = [];
  let keyedFragmentCount = 0;
  for (let i3 = 0; i3 < children.length; i3++) {
    let child = children[i3];
    const key = parentKey == null ? child.key : String(parentKey) + String(child.key != null ? child.key : i3);
    if (child.type === Fragment$1) {
      if (child.patchFlag & 128)
        keyedFragmentCount++;
      ret = ret.concat(
        getTransitionRawChildren$1(child.children, keepComment, key)
      );
    } else if (keepComment || child.type !== Comment$2) {
      ret.push(key != null ? cloneVNode$1(child, { key }) : child);
    }
  }
  if (keyedFragmentCount > 1) {
    for (let i3 = 0; i3 < ret.length; i3++) {
      ret[i3].patchFlag = -2;
    }
  }
  return ret;
}
/*! #__NO_SIDE_EFFECTS__ */
// @__NO_SIDE_EFFECTS__
function defineComponent$1(options, extraOptions) {
  return isFunction$3(options) ? (
    // #8326: extend call and options.name access are considered side-effects
    // by Rollup, so we have to wrap it in a pure-annotated IIFE.
    /* @__PURE__ */ (() => extend$1({ name: options.name }, extraOptions, { setup: options }))()
  ) : options;
}
const isAsyncWrapper$1 = (i3) => !!i3.type.__asyncLoader;
/*! #__NO_SIDE_EFFECTS__ */
// @__NO_SIDE_EFFECTS__
function defineAsyncComponent$1(source) {
  if (isFunction$3(source)) {
    source = { loader: source };
  }
  const {
    loader,
    loadingComponent,
    errorComponent,
    delay = 200,
    timeout,
    // undefined = never times out
    suspensible = true,
    onError: userOnError
  } = source;
  let pendingRequest = null;
  let resolvedComp;
  let retries = 0;
  const retry = () => {
    retries++;
    pendingRequest = null;
    return load();
  };
  const load = () => {
    let thisRequest;
    return pendingRequest || (thisRequest = pendingRequest = loader().catch((err) => {
      err = err instanceof Error ? err : new Error(String(err));
      if (userOnError) {
        return new Promise((resolve2, reject) => {
          const userRetry = () => resolve2(retry());
          const userFail = () => reject(err);
          userOnError(err, userRetry, userFail, retries + 1);
        });
      } else {
        throw err;
      }
    }).then((comp) => {
      if (thisRequest !== pendingRequest && pendingRequest) {
        return pendingRequest;
      }
      if (!comp) {
        warn$5(
          `Async component loader resolved to undefined. If you are using retry(), make sure to return its return value.`
        );
      }
      if (comp && (comp.__esModule || comp[Symbol.toStringTag] === "Module")) {
        comp = comp.default;
      }
      if (comp && !isObject$4(comp) && !isFunction$3(comp)) {
        throw new Error(`Invalid async component load result: ${comp}`);
      }
      resolvedComp = comp;
      return comp;
    }));
  };
  return /* @__PURE__ */ defineComponent$1({
    name: "AsyncComponentWrapper",
    __asyncLoader: load,
    get __asyncResolved() {
      return resolvedComp;
    },
    setup() {
      const instance = currentInstance$1;
      if (resolvedComp) {
        return () => createInnerComp$1(resolvedComp, instance);
      }
      const onError = (err) => {
        pendingRequest = null;
        handleError$1(
          err,
          instance,
          13,
          !errorComponent
          /* do not throw in dev if user provided error component */
        );
      };
      if (suspensible && instance.suspense || isInSSRComponentSetup$1) {
        return load().then((comp) => {
          return () => createInnerComp$1(comp, instance);
        }).catch((err) => {
          onError(err);
          return () => errorComponent ? createVNode$1(errorComponent, {
            error: err
          }) : null;
        });
      }
      const loaded2 = ref$1(false);
      const error = ref$1();
      const delayed = ref$1(!!delay);
      if (delay) {
        setTimeout(() => {
          delayed.value = false;
        }, delay);
      }
      if (timeout != null) {
        setTimeout(() => {
          if (!loaded2.value && !error.value) {
            const err = new Error(
              `Async component timed out after ${timeout}ms.`
            );
            onError(err);
            error.value = err;
          }
        }, timeout);
      }
      load().then(() => {
        loaded2.value = true;
        if (instance.parent && isKeepAlive$1(instance.parent.vnode)) {
          queueJob$1(instance.parent.update);
        }
      }).catch((err) => {
        onError(err);
        error.value = err;
      });
      return () => {
        if (loaded2.value && resolvedComp) {
          return createInnerComp$1(resolvedComp, instance);
        } else if (error.value && errorComponent) {
          return createVNode$1(errorComponent, {
            error: error.value
          });
        } else if (loadingComponent && !delayed.value) {
          return createVNode$1(loadingComponent);
        }
      };
    }
  });
}
function createInnerComp$1(comp, parent) {
  const { ref: ref2, props, children, ce: ce2 } = parent.vnode;
  const vnode = createVNode$1(comp, props, children);
  vnode.ref = ref2;
  vnode.ce = ce2;
  delete parent.vnode.ce;
  return vnode;
}
const isKeepAlive$1 = (vnode) => vnode.type.__isKeepAlive;
function onActivated$1(hook, target) {
  registerKeepAliveHook$1(hook, "a", target);
}
function onDeactivated$1(hook, target) {
  registerKeepAliveHook$1(hook, "da", target);
}
function registerKeepAliveHook$1(hook, type, target = currentInstance$1) {
  const wrappedHook = hook.__wdc || (hook.__wdc = () => {
    let current = target;
    while (current) {
      if (current.isDeactivated) {
        return;
      }
      current = current.parent;
    }
    return hook();
  });
  injectHook$1(type, wrappedHook, target);
  if (target) {
    let current = target.parent;
    while (current && current.parent) {
      if (isKeepAlive$1(current.parent.vnode)) {
        injectToKeepAliveRoot$1(wrappedHook, type, target, current);
      }
      current = current.parent;
    }
  }
}
function injectToKeepAliveRoot$1(hook, type, target, keepAliveRoot) {
  const injected = injectHook$1(
    type,
    hook,
    keepAliveRoot,
    true
    /* prepend */
  );
  onUnmounted$1(() => {
    remove$1(keepAliveRoot[type], injected);
  }, target);
}
function injectHook$1(type, hook, target = currentInstance$1, prepend = false) {
  if (target) {
    const hooks = target[type] || (target[type] = []);
    const wrappedHook = hook.__weh || (hook.__weh = (...args) => {
      if (target.isUnmounted) {
        return;
      }
      pauseTracking$1();
      setCurrentInstance$1(target);
      const res = callWithAsyncErrorHandling$1(hook, target, type, args);
      unsetCurrentInstance$1();
      resetTracking$1();
      return res;
    });
    if (prepend) {
      hooks.unshift(wrappedHook);
    } else {
      hooks.push(wrappedHook);
    }
    return wrappedHook;
  } else {
    const apiName = toHandlerKey$1(ErrorTypeStrings[type].replace(/ hook$/, ""));
    warn$5(
      `${apiName} is called when there is no active component instance to be associated with. Lifecycle injection APIs can only be used during execution of setup(). If you are using async setup(), make sure to register lifecycle hooks before the first await statement.`
    );
  }
}
const createHook$1 = (lifecycle) => (hook, target = currentInstance$1) => (
  // post-create lifecycle registrations are noops during SSR (except for serverPrefetch)
  (!isInSSRComponentSetup$1 || lifecycle === "sp") && injectHook$1(lifecycle, (...args) => hook(...args), target)
);
const onBeforeMount$1 = createHook$1("bm");
const onMounted$1 = createHook$1("m");
const onBeforeUpdate$1 = createHook$1("bu");
const onUpdated$1 = createHook$1("u");
const onBeforeUnmount$1 = createHook$1("bum");
const onUnmounted$1 = createHook$1("um");
const onServerPrefetch$1 = createHook$1("sp");
const onRenderTriggered$1 = createHook$1(
  "rtg"
);
const onRenderTracked$1 = createHook$1(
  "rtc"
);
function onErrorCaptured$1(hook, target = currentInstance$1) {
  injectHook$1("ec", hook, target);
}
function renderList$1(source, renderItem, cache2, index) {
  let ret;
  const cached = cache2 && cache2[index];
  if (isArray$4(source) || isString$3(source)) {
    ret = new Array(source.length);
    for (let i3 = 0, l2 = source.length; i3 < l2; i3++) {
      ret[i3] = renderItem(source[i3], i3, void 0, cached && cached[i3]);
    }
  } else if (typeof source === "number") {
    if (!Number.isInteger(source)) {
      warn$5(`The v-for range expect an integer value but got ${source}.`);
    }
    ret = new Array(source);
    for (let i3 = 0; i3 < source; i3++) {
      ret[i3] = renderItem(i3 + 1, i3, void 0, cached && cached[i3]);
    }
  } else if (isObject$4(source)) {
    if (source[Symbol.iterator]) {
      ret = Array.from(
        source,
        (item, i3) => renderItem(item, i3, void 0, cached && cached[i3])
      );
    } else {
      const keys = Object.keys(source);
      ret = new Array(keys.length);
      for (let i3 = 0, l2 = keys.length; i3 < l2; i3++) {
        const key = keys[i3];
        ret[i3] = renderItem(source[key], key, i3, cached && cached[i3]);
      }
    }
  } else {
    ret = [];
  }
  if (cache2) {
    cache2[index] = ret;
  }
  return ret;
}
function renderSlot$1(slots, name, props = {}, fallback, noSlotted) {
  if (currentRenderingInstance$1.isCE || currentRenderingInstance$1.parent && isAsyncWrapper$1(currentRenderingInstance$1.parent) && currentRenderingInstance$1.parent.isCE) {
    if (name !== "default")
      props.name = name;
    return createVNode$1("slot", props, fallback && fallback());
  }
  let slot = slots[name];
  if (slot && slot.length > 1) {
    warn$5(
      `SSR-optimized slot function detected in a non-SSR-optimized render function. You need to mark this component with $dynamic-slots in the parent template.`
    );
    slot = () => [];
  }
  if (slot && slot._c) {
    slot._d = false;
  }
  openBlock$1();
  const validSlotContent = slot && ensureValidVNode$1(slot(props));
  const rendered = createBlock$1(
    Fragment$1,
    {
      key: props.key || // slot content array of a dynamic conditional slot may have a branch
      // key attached in the `createSlots` helper, respect that
      validSlotContent && validSlotContent.key || `_${name}`
    },
    validSlotContent || (fallback ? fallback() : []),
    validSlotContent && slots._ === 1 ? 64 : -2
  );
  if (!noSlotted && rendered.scopeId) {
    rendered.slotScopeIds = [rendered.scopeId + "-s"];
  }
  if (slot && slot._c) {
    slot._d = true;
  }
  return rendered;
}
function ensureValidVNode$1(vnodes) {
  return vnodes.some((child) => {
    if (!isVNode$2(child))
      return true;
    if (child.type === Comment$2)
      return false;
    if (child.type === Fragment$1 && !ensureValidVNode$1(child.children))
      return false;
    return true;
  }) ? vnodes : null;
}
const getPublicInstance$1 = (i3) => {
  if (!i3)
    return null;
  if (isStatefulComponent$1(i3))
    return getExposeProxy$1(i3) || i3.proxy;
  return getPublicInstance$1(i3.parent);
};
const publicPropertiesMap$1 = (
  // Move PURE marker to new line to workaround compiler discarding it
  // due to type annotation
  /* @__PURE__ */ extend$1(/* @__PURE__ */ Object.create(null), {
    $: (i3) => i3,
    $el: (i3) => i3.vnode.el,
    $data: (i3) => i3.data,
    $props: (i3) => shallowReadonly$1(i3.props),
    $attrs: (i3) => shallowReadonly$1(i3.attrs),
    $slots: (i3) => shallowReadonly$1(i3.slots),
    $refs: (i3) => shallowReadonly$1(i3.refs),
    $parent: (i3) => getPublicInstance$1(i3.parent),
    $root: (i3) => getPublicInstance$1(i3.root),
    $emit: (i3) => i3.emit,
    $options: (i3) => resolveMergedOptions$1(i3),
    $forceUpdate: (i3) => i3.f || (i3.f = () => queueJob$1(i3.update)),
    $nextTick: (i3) => i3.n || (i3.n = nextTick$1.bind(i3.proxy)),
    $watch: (i3) => instanceWatch$1.bind(i3)
  })
);
const isReservedPrefix$1 = (key) => key === "_" || key === "$";
const hasSetupBinding$1 = (state, key) => state !== EMPTY_OBJ$1 && !state.__isScriptSetup && hasOwn$2(state, key);
const PublicInstanceProxyHandlers$1 = {
  get({ _: instance }, key) {
    const { ctx, setupState, data, props, accessCache, type, appContext } = instance;
    if (key === "__isVue") {
      return true;
    }
    let normalizedProps;
    if (key[0] !== "$") {
      const n2 = accessCache[key];
      if (n2 !== void 0) {
        switch (n2) {
          case 1:
            return setupState[key];
          case 2:
            return data[key];
          case 4:
            return ctx[key];
          case 3:
            return props[key];
        }
      } else if (hasSetupBinding$1(setupState, key)) {
        accessCache[key] = 1;
        return setupState[key];
      } else if (data !== EMPTY_OBJ$1 && hasOwn$2(data, key)) {
        accessCache[key] = 2;
        return data[key];
      } else if (
        // only cache other properties when instance has declared (thus stable)
        // props
        (normalizedProps = instance.propsOptions[0]) && hasOwn$2(normalizedProps, key)
      ) {
        accessCache[key] = 3;
        return props[key];
      } else if (ctx !== EMPTY_OBJ$1 && hasOwn$2(ctx, key)) {
        accessCache[key] = 4;
        return ctx[key];
      } else if (shouldCacheAccess$1) {
        accessCache[key] = 0;
      }
    }
    const publicGetter = publicPropertiesMap$1[key];
    let cssModule, globalProperties;
    if (publicGetter) {
      if (key === "$attrs") {
        track$1(instance, "get", key);
        markAttrsAccessed$1();
      } else if (key === "$slots") {
        track$1(instance, "get", key);
      }
      return publicGetter(instance);
    } else if (
      // css module (injected by vue-loader)
      (cssModule = type.__cssModules) && (cssModule = cssModule[key])
    ) {
      return cssModule;
    } else if (ctx !== EMPTY_OBJ$1 && hasOwn$2(ctx, key)) {
      accessCache[key] = 4;
      return ctx[key];
    } else if (
      // global properties
      globalProperties = appContext.config.globalProperties, hasOwn$2(globalProperties, key)
    ) {
      {
        return globalProperties[key];
      }
    } else if (currentRenderingInstance$1 && (!isString$3(key) || // #1091 avoid internal isRef/isVNode checks on component instance leading
    // to infinite warning loop
    key.indexOf("__v") !== 0)) {
      if (data !== EMPTY_OBJ$1 && isReservedPrefix$1(key[0]) && hasOwn$2(data, key)) {
        warn$5(
          `Property ${JSON.stringify(
            key
          )} must be accessed via $data because it starts with a reserved character ("$" or "_") and is not proxied on the render context.`
        );
      } else if (instance === currentRenderingInstance$1) {
        warn$5(
          `Property ${JSON.stringify(key)} was accessed during render but is not defined on instance.`
        );
      }
    }
  },
  set({ _: instance }, key, value) {
    const { data, setupState, ctx } = instance;
    if (hasSetupBinding$1(setupState, key)) {
      setupState[key] = value;
      return true;
    } else if (setupState.__isScriptSetup && hasOwn$2(setupState, key)) {
      warn$5(`Cannot mutate <script setup> binding "${key}" from Options API.`);
      return false;
    } else if (data !== EMPTY_OBJ$1 && hasOwn$2(data, key)) {
      data[key] = value;
      return true;
    } else if (hasOwn$2(instance.props, key)) {
      warn$5(`Attempting to mutate prop "${key}". Props are readonly.`);
      return false;
    }
    if (key[0] === "$" && key.slice(1) in instance) {
      warn$5(
        `Attempting to mutate public property "${key}". Properties starting with $ are reserved and readonly.`
      );
      return false;
    } else {
      if (key in instance.appContext.config.globalProperties) {
        Object.defineProperty(ctx, key, {
          enumerable: true,
          configurable: true,
          value
        });
      } else {
        ctx[key] = value;
      }
    }
    return true;
  },
  has({
    _: { data, setupState, accessCache, ctx, appContext, propsOptions }
  }, key) {
    let normalizedProps;
    return !!accessCache[key] || data !== EMPTY_OBJ$1 && hasOwn$2(data, key) || hasSetupBinding$1(setupState, key) || (normalizedProps = propsOptions[0]) && hasOwn$2(normalizedProps, key) || hasOwn$2(ctx, key) || hasOwn$2(publicPropertiesMap$1, key) || hasOwn$2(appContext.config.globalProperties, key);
  },
  defineProperty(target, key, descriptor) {
    if (descriptor.get != null) {
      target._.accessCache[key] = 0;
    } else if (hasOwn$2(descriptor, "value")) {
      this.set(target, key, descriptor.value, null);
    }
    return Reflect.defineProperty(target, key, descriptor);
  }
};
{
  PublicInstanceProxyHandlers$1.ownKeys = (target) => {
    warn$5(
      `Avoid app logic that relies on enumerating keys on a component instance. The keys will be empty in production mode to avoid performance overhead.`
    );
    return Reflect.ownKeys(target);
  };
}
function createDevRenderContext$1(instance) {
  const target = {};
  Object.defineProperty(target, `_`, {
    configurable: true,
    enumerable: false,
    get: () => instance
  });
  Object.keys(publicPropertiesMap$1).forEach((key) => {
    Object.defineProperty(target, key, {
      configurable: true,
      enumerable: false,
      get: () => publicPropertiesMap$1[key](instance),
      // intercepted by the proxy so no need for implementation,
      // but needed to prevent set errors
      set: NOOP$1
    });
  });
  return target;
}
function exposePropsOnRenderContext$1(instance) {
  const {
    ctx,
    propsOptions: [propsOptions]
  } = instance;
  if (propsOptions) {
    Object.keys(propsOptions).forEach((key) => {
      Object.defineProperty(ctx, key, {
        enumerable: true,
        configurable: true,
        get: () => instance.props[key],
        set: NOOP$1
      });
    });
  }
}
function exposeSetupStateOnRenderContext$1(instance) {
  const { ctx, setupState } = instance;
  Object.keys(toRaw$1(setupState)).forEach((key) => {
    if (!setupState.__isScriptSetup) {
      if (isReservedPrefix$1(key[0])) {
        warn$5(
          `setup() return property ${JSON.stringify(
            key
          )} should not start with "$" or "_" which are reserved prefixes for Vue internals.`
        );
        return;
      }
      Object.defineProperty(ctx, key, {
        enumerable: true,
        configurable: true,
        get: () => setupState[key],
        set: NOOP$1
      });
    }
  });
}
function normalizePropsOrEmits$1(props) {
  return isArray$4(props) ? props.reduce(
    (normalized, p2) => (normalized[p2] = null, normalized),
    {}
  ) : props;
}
function createDuplicateChecker$1() {
  const cache2 = /* @__PURE__ */ Object.create(null);
  return (type, key) => {
    if (cache2[key]) {
      warn$5(`${type} property "${key}" is already defined in ${cache2[key]}.`);
    } else {
      cache2[key] = type;
    }
  };
}
let shouldCacheAccess$1 = true;
function applyOptions$1(instance) {
  const options = resolveMergedOptions$1(instance);
  const publicThis = instance.proxy;
  const ctx = instance.ctx;
  shouldCacheAccess$1 = false;
  if (options.beforeCreate) {
    callHook$1$1(options.beforeCreate, instance, "bc");
  }
  const {
    // state
    data: dataOptions,
    computed: computedOptions,
    methods,
    watch: watchOptions,
    provide: provideOptions,
    inject: injectOptions,
    // lifecycle
    created,
    beforeMount,
    mounted,
    beforeUpdate,
    updated,
    activated,
    deactivated,
    beforeDestroy,
    beforeUnmount,
    destroyed,
    unmounted,
    render: render2,
    renderTracked,
    renderTriggered,
    errorCaptured,
    serverPrefetch,
    // public API
    expose,
    inheritAttrs,
    // assets
    components,
    directives: directives2,
    filters
  } = options;
  const checkDuplicateProperties = createDuplicateChecker$1();
  {
    const [propsOptions] = instance.propsOptions;
    if (propsOptions) {
      for (const key in propsOptions) {
        checkDuplicateProperties("Props", key);
      }
    }
  }
  if (injectOptions) {
    resolveInjections$1(injectOptions, ctx, checkDuplicateProperties);
  }
  if (methods) {
    for (const key in methods) {
      const methodHandler = methods[key];
      if (isFunction$3(methodHandler)) {
        {
          Object.defineProperty(ctx, key, {
            value: methodHandler.bind(publicThis),
            configurable: true,
            enumerable: true,
            writable: true
          });
        }
        {
          checkDuplicateProperties("Methods", key);
        }
      } else {
        warn$5(
          `Method "${key}" has type "${typeof methodHandler}" in the component definition. Did you reference the function correctly?`
        );
      }
    }
  }
  if (dataOptions) {
    if (!isFunction$3(dataOptions)) {
      warn$5(
        `The data option must be a function. Plain object usage is no longer supported.`
      );
    }
    const data = dataOptions.call(publicThis, publicThis);
    if (isPromise$2(data)) {
      warn$5(
        `data() returned a Promise - note data() cannot be async; If you intend to perform data fetching before component renders, use async setup() + <Suspense>.`
      );
    }
    if (!isObject$4(data)) {
      warn$5(`data() should return an object.`);
    } else {
      instance.data = reactive$1(data);
      {
        for (const key in data) {
          checkDuplicateProperties("Data", key);
          if (!isReservedPrefix$1(key[0])) {
            Object.defineProperty(ctx, key, {
              configurable: true,
              enumerable: true,
              get: () => data[key],
              set: NOOP$1
            });
          }
        }
      }
    }
  }
  shouldCacheAccess$1 = true;
  if (computedOptions) {
    for (const key in computedOptions) {
      const opt = computedOptions[key];
      const get2 = isFunction$3(opt) ? opt.bind(publicThis, publicThis) : isFunction$3(opt.get) ? opt.get.bind(publicThis, publicThis) : NOOP$1;
      if (get2 === NOOP$1) {
        warn$5(`Computed property "${key}" has no getter.`);
      }
      const set2 = !isFunction$3(opt) && isFunction$3(opt.set) ? opt.set.bind(publicThis) : () => {
        warn$5(
          `Write operation failed: computed property "${key}" is readonly.`
        );
      };
      const c3 = computed$2({
        get: get2,
        set: set2
      });
      Object.defineProperty(ctx, key, {
        enumerable: true,
        configurable: true,
        get: () => c3.value,
        set: (v2) => c3.value = v2
      });
      {
        checkDuplicateProperties("Computed", key);
      }
    }
  }
  if (watchOptions) {
    for (const key in watchOptions) {
      createWatcher$1(watchOptions[key], ctx, publicThis, key);
    }
  }
  if (provideOptions) {
    const provides = isFunction$3(provideOptions) ? provideOptions.call(publicThis) : provideOptions;
    Reflect.ownKeys(provides).forEach((key) => {
      provide$1(key, provides[key]);
    });
  }
  if (created) {
    callHook$1$1(created, instance, "c");
  }
  function registerLifecycleHook(register, hook) {
    if (isArray$4(hook)) {
      hook.forEach((_hook) => register(_hook.bind(publicThis)));
    } else if (hook) {
      register(hook.bind(publicThis));
    }
  }
  registerLifecycleHook(onBeforeMount$1, beforeMount);
  registerLifecycleHook(onMounted$1, mounted);
  registerLifecycleHook(onBeforeUpdate$1, beforeUpdate);
  registerLifecycleHook(onUpdated$1, updated);
  registerLifecycleHook(onActivated$1, activated);
  registerLifecycleHook(onDeactivated$1, deactivated);
  registerLifecycleHook(onErrorCaptured$1, errorCaptured);
  registerLifecycleHook(onRenderTracked$1, renderTracked);
  registerLifecycleHook(onRenderTriggered$1, renderTriggered);
  registerLifecycleHook(onBeforeUnmount$1, beforeUnmount);
  registerLifecycleHook(onUnmounted$1, unmounted);
  registerLifecycleHook(onServerPrefetch$1, serverPrefetch);
  if (isArray$4(expose)) {
    if (expose.length) {
      const exposed = instance.exposed || (instance.exposed = {});
      expose.forEach((key) => {
        Object.defineProperty(exposed, key, {
          get: () => publicThis[key],
          set: (val) => publicThis[key] = val
        });
      });
    } else if (!instance.exposed) {
      instance.exposed = {};
    }
  }
  if (render2 && instance.render === NOOP$1) {
    instance.render = render2;
  }
  if (inheritAttrs != null) {
    instance.inheritAttrs = inheritAttrs;
  }
  if (components)
    instance.components = components;
  if (directives2)
    instance.directives = directives2;
}
function resolveInjections$1(injectOptions, ctx, checkDuplicateProperties = NOOP$1) {
  if (isArray$4(injectOptions)) {
    injectOptions = normalizeInject$1(injectOptions);
  }
  for (const key in injectOptions) {
    const opt = injectOptions[key];
    let injected;
    if (isObject$4(opt)) {
      if ("default" in opt) {
        injected = inject$1(
          opt.from || key,
          opt.default,
          true
          /* treat default function as factory */
        );
      } else {
        injected = inject$1(opt.from || key);
      }
    } else {
      injected = inject$1(opt);
    }
    if (isRef$1(injected)) {
      Object.defineProperty(ctx, key, {
        enumerable: true,
        configurable: true,
        get: () => injected.value,
        set: (v2) => injected.value = v2
      });
    } else {
      ctx[key] = injected;
    }
    {
      checkDuplicateProperties("Inject", key);
    }
  }
}
function callHook$1$1(hook, instance, type) {
  callWithAsyncErrorHandling$1(
    isArray$4(hook) ? hook.map((h22) => h22.bind(instance.proxy)) : hook.bind(instance.proxy),
    instance,
    type
  );
}
function createWatcher$1(raw, ctx, publicThis, key) {
  const getter = key.includes(".") ? createPathGetter$1(publicThis, key) : () => publicThis[key];
  if (isString$3(raw)) {
    const handler = ctx[raw];
    if (isFunction$3(handler)) {
      watch$1(getter, handler);
    } else {
      warn$5(`Invalid watch handler specified by key "${raw}"`, handler);
    }
  } else if (isFunction$3(raw)) {
    watch$1(getter, raw.bind(publicThis));
  } else if (isObject$4(raw)) {
    if (isArray$4(raw)) {
      raw.forEach((r2) => createWatcher$1(r2, ctx, publicThis, key));
    } else {
      const handler = isFunction$3(raw.handler) ? raw.handler.bind(publicThis) : ctx[raw.handler];
      if (isFunction$3(handler)) {
        watch$1(getter, handler, raw);
      } else {
        warn$5(`Invalid watch handler specified by key "${raw.handler}"`, handler);
      }
    }
  } else {
    warn$5(`Invalid watch option: "${key}"`, raw);
  }
}
function resolveMergedOptions$1(instance) {
  const base = instance.type;
  const { mixins, extends: extendsOptions } = base;
  const {
    mixins: globalMixins,
    optionsCache: cache2,
    config: { optionMergeStrategies }
  } = instance.appContext;
  const cached = cache2.get(base);
  let resolved;
  if (cached) {
    resolved = cached;
  } else if (!globalMixins.length && !mixins && !extendsOptions) {
    {
      resolved = base;
    }
  } else {
    resolved = {};
    if (globalMixins.length) {
      globalMixins.forEach(
        (m4) => mergeOptions$3(resolved, m4, optionMergeStrategies, true)
      );
    }
    mergeOptions$3(resolved, base, optionMergeStrategies);
  }
  if (isObject$4(base)) {
    cache2.set(base, resolved);
  }
  return resolved;
}
function mergeOptions$3(to2, from, strats, asMixin = false) {
  const { mixins, extends: extendsOptions } = from;
  if (extendsOptions) {
    mergeOptions$3(to2, extendsOptions, strats, true);
  }
  if (mixins) {
    mixins.forEach(
      (m4) => mergeOptions$3(to2, m4, strats, true)
    );
  }
  for (const key in from) {
    if (asMixin && key === "expose") {
      warn$5(
        `"expose" option is ignored when declared in mixins or extends. It should only be declared in the base component itself.`
      );
    } else {
      const strat = internalOptionMergeStrats$1[key] || strats && strats[key];
      to2[key] = strat ? strat(to2[key], from[key]) : from[key];
    }
  }
  return to2;
}
const internalOptionMergeStrats$1 = {
  data: mergeDataFn$1,
  props: mergeEmitsOrPropsOptions$1,
  emits: mergeEmitsOrPropsOptions$1,
  // objects
  methods: mergeObjectOptions$1,
  computed: mergeObjectOptions$1,
  // lifecycle
  beforeCreate: mergeAsArray$1,
  created: mergeAsArray$1,
  beforeMount: mergeAsArray$1,
  mounted: mergeAsArray$1,
  beforeUpdate: mergeAsArray$1,
  updated: mergeAsArray$1,
  beforeDestroy: mergeAsArray$1,
  beforeUnmount: mergeAsArray$1,
  destroyed: mergeAsArray$1,
  unmounted: mergeAsArray$1,
  activated: mergeAsArray$1,
  deactivated: mergeAsArray$1,
  errorCaptured: mergeAsArray$1,
  serverPrefetch: mergeAsArray$1,
  // assets
  components: mergeObjectOptions$1,
  directives: mergeObjectOptions$1,
  // watch
  watch: mergeWatchOptions$1,
  // provide / inject
  provide: mergeDataFn$1,
  inject: mergeInject$1
};
function mergeDataFn$1(to2, from) {
  if (!from) {
    return to2;
  }
  if (!to2) {
    return from;
  }
  return function mergedDataFn() {
    return extend$1(
      isFunction$3(to2) ? to2.call(this, this) : to2,
      isFunction$3(from) ? from.call(this, this) : from
    );
  };
}
function mergeInject$1(to2, from) {
  return mergeObjectOptions$1(normalizeInject$1(to2), normalizeInject$1(from));
}
function normalizeInject$1(raw) {
  if (isArray$4(raw)) {
    const res = {};
    for (let i3 = 0; i3 < raw.length; i3++) {
      res[raw[i3]] = raw[i3];
    }
    return res;
  }
  return raw;
}
function mergeAsArray$1(to2, from) {
  return to2 ? [...new Set([].concat(to2, from))] : from;
}
function mergeObjectOptions$1(to2, from) {
  return to2 ? extend$1(/* @__PURE__ */ Object.create(null), to2, from) : from;
}
function mergeEmitsOrPropsOptions$1(to2, from) {
  if (to2) {
    if (isArray$4(to2) && isArray$4(from)) {
      return [.../* @__PURE__ */ new Set([...to2, ...from])];
    }
    return extend$1(
      /* @__PURE__ */ Object.create(null),
      normalizePropsOrEmits$1(to2),
      normalizePropsOrEmits$1(from != null ? from : {})
    );
  } else {
    return from;
  }
}
function mergeWatchOptions$1(to2, from) {
  if (!to2)
    return from;
  if (!from)
    return to2;
  const merged = extend$1(/* @__PURE__ */ Object.create(null), to2);
  for (const key in from) {
    merged[key] = mergeAsArray$1(to2[key], from[key]);
  }
  return merged;
}
function createAppContext$1() {
  return {
    app: null,
    config: {
      isNativeTag: NO$1,
      performance: false,
      globalProperties: {},
      optionMergeStrategies: {},
      errorHandler: void 0,
      warnHandler: void 0,
      compilerOptions: {}
    },
    mixins: [],
    components: {},
    directives: {},
    provides: /* @__PURE__ */ Object.create(null),
    optionsCache: /* @__PURE__ */ new WeakMap(),
    propsCache: /* @__PURE__ */ new WeakMap(),
    emitsCache: /* @__PURE__ */ new WeakMap()
  };
}
let uid$1$1 = 0;
function createAppAPI$1(render2, hydrate2) {
  return function createApp2(rootComponent, rootProps = null) {
    if (!isFunction$3(rootComponent)) {
      rootComponent = extend$1({}, rootComponent);
    }
    if (rootProps != null && !isObject$4(rootProps)) {
      warn$5(`root props passed to app.mount() must be an object.`);
      rootProps = null;
    }
    const context = createAppContext$1();
    {
      Object.defineProperty(context.config, "unwrapInjectedRef", {
        get() {
          return true;
        },
        set() {
          warn$5(
            `app.config.unwrapInjectedRef has been deprecated. 3.3 now always unwraps injected refs in Options API.`
          );
        }
      });
    }
    const installedPlugins = /* @__PURE__ */ new WeakSet();
    let isMounted = false;
    const app = context.app = {
      _uid: uid$1$1++,
      _component: rootComponent,
      _props: rootProps,
      _container: null,
      _context: context,
      _instance: null,
      version: version$2,
      get config() {
        return context.config;
      },
      set config(v2) {
        {
          warn$5(
            `app.config cannot be replaced. Modify individual options instead.`
          );
        }
      },
      use(plugin2, ...options) {
        if (installedPlugins.has(plugin2)) {
          warn$5(`Plugin has already been applied to target app.`);
        } else if (plugin2 && isFunction$3(plugin2.install)) {
          installedPlugins.add(plugin2);
          plugin2.install(app, ...options);
        } else if (isFunction$3(plugin2)) {
          installedPlugins.add(plugin2);
          plugin2(app, ...options);
        } else {
          warn$5(
            `A plugin must either be a function or an object with an "install" function.`
          );
        }
        return app;
      },
      mixin(mixin) {
        {
          if (!context.mixins.includes(mixin)) {
            context.mixins.push(mixin);
          } else {
            warn$5(
              "Mixin has already been applied to target app" + (mixin.name ? `: ${mixin.name}` : "")
            );
          }
        }
        return app;
      },
      component(name, component) {
        {
          validateComponentName$1(name, context.config);
        }
        if (!component) {
          return context.components[name];
        }
        if (context.components[name]) {
          warn$5(`Component "${name}" has already been registered in target app.`);
        }
        context.components[name] = component;
        return app;
      },
      directive(name, directive) {
        {
          validateDirectiveName$1(name);
        }
        if (!directive) {
          return context.directives[name];
        }
        if (context.directives[name]) {
          warn$5(`Directive "${name}" has already been registered in target app.`);
        }
        context.directives[name] = directive;
        return app;
      },
      mount(rootContainer, isHydrate, isSVG) {
        if (!isMounted) {
          if (rootContainer.__vue_app__) {
            warn$5(
              `There is already an app instance mounted on the host container.
 If you want to mount another app on the same host container, you need to unmount the previous app by calling \`app.unmount()\` first.`
            );
          }
          const vnode = createVNode$1(rootComponent, rootProps);
          vnode.appContext = context;
          {
            context.reload = () => {
              render2(cloneVNode$1(vnode), rootContainer, isSVG);
            };
          }
          if (isHydrate && hydrate2) {
            hydrate2(vnode, rootContainer);
          } else {
            render2(vnode, rootContainer, isSVG);
          }
          isMounted = true;
          app._container = rootContainer;
          rootContainer.__vue_app__ = app;
          {
            app._instance = vnode.component;
            devtoolsInitApp$1(app, version$2);
          }
          return getExposeProxy$1(vnode.component) || vnode.component.proxy;
        } else {
          warn$5(
            `App has already been mounted.
If you want to remount the same app, move your app creation logic into a factory function and create fresh app instances for each mount - e.g. \`const createMyApp = () => createApp(App)\``
          );
        }
      },
      unmount() {
        if (isMounted) {
          render2(null, app._container);
          {
            app._instance = null;
            devtoolsUnmountApp$1(app);
          }
          delete app._container.__vue_app__;
        } else {
          warn$5(`Cannot unmount an app that is not mounted.`);
        }
      },
      provide(key, value) {
        if (key in context.provides) {
          warn$5(
            `App already provides property with key "${String(key)}". It will be overwritten with the new value.`
          );
        }
        context.provides[key] = value;
        return app;
      },
      runWithContext(fn2) {
        currentApp$1 = app;
        try {
          return fn2();
        } finally {
          currentApp$1 = null;
        }
      }
    };
    return app;
  };
}
let currentApp$1 = null;
function provide$1(key, value) {
  if (!currentInstance$1) {
    {
      warn$5(`provide() can only be used inside setup().`);
    }
  } else {
    let provides = currentInstance$1.provides;
    const parentProvides = currentInstance$1.parent && currentInstance$1.parent.provides;
    if (parentProvides === provides) {
      provides = currentInstance$1.provides = Object.create(parentProvides);
    }
    provides[key] = value;
  }
}
function inject$1(key, defaultValue, treatDefaultAsFactory = false) {
  const instance = currentInstance$1 || currentRenderingInstance$1;
  if (instance || currentApp$1) {
    const provides = instance ? instance.parent == null ? instance.vnode.appContext && instance.vnode.appContext.provides : instance.parent.provides : currentApp$1._context.provides;
    if (provides && key in provides) {
      return provides[key];
    } else if (arguments.length > 1) {
      return treatDefaultAsFactory && isFunction$3(defaultValue) ? defaultValue.call(instance && instance.proxy) : defaultValue;
    } else {
      warn$5(`injection "${String(key)}" not found.`);
    }
  } else {
    warn$5(`inject() can only be used inside setup() or functional components.`);
  }
}
function hasInjectionContext() {
  return !!(currentInstance$1 || currentRenderingInstance$1 || currentApp$1);
}
function initProps$1(instance, rawProps, isStateful, isSSR = false) {
  const props = {};
  const attrs = {};
  def$1(attrs, InternalObjectKey$1, 1);
  instance.propsDefaults = /* @__PURE__ */ Object.create(null);
  setFullProps$1(instance, rawProps, props, attrs);
  for (const key in instance.propsOptions[0]) {
    if (!(key in props)) {
      props[key] = void 0;
    }
  }
  {
    validateProps$1(rawProps || {}, props, instance);
  }
  if (isStateful) {
    instance.props = isSSR ? props : shallowReactive$1(props);
  } else {
    if (!instance.type.props) {
      instance.props = attrs;
    } else {
      instance.props = props;
    }
  }
  instance.attrs = attrs;
}
function isInHmrContext$1(instance) {
  while (instance) {
    if (instance.type.__hmrId)
      return true;
    instance = instance.parent;
  }
}
function updateProps$1(instance, rawProps, rawPrevProps, optimized) {
  const {
    props,
    attrs,
    vnode: { patchFlag }
  } = instance;
  const rawCurrentProps = toRaw$1(props);
  const [options] = instance.propsOptions;
  let hasAttrsChanged = false;
  if (
    // always force full diff in dev
    // - #1942 if hmr is enabled with sfc component
    // - vite#872 non-sfc component used by sfc component
    !isInHmrContext$1(instance) && (optimized || patchFlag > 0) && !(patchFlag & 16)
  ) {
    if (patchFlag & 8) {
      const propsToUpdate = instance.vnode.dynamicProps;
      for (let i3 = 0; i3 < propsToUpdate.length; i3++) {
        let key = propsToUpdate[i3];
        if (isEmitListener$1(instance.emitsOptions, key)) {
          continue;
        }
        const value = rawProps[key];
        if (options) {
          if (hasOwn$2(attrs, key)) {
            if (value !== attrs[key]) {
              attrs[key] = value;
              hasAttrsChanged = true;
            }
          } else {
            const camelizedKey = camelize$1(key);
            props[camelizedKey] = resolvePropValue$1(
              options,
              rawCurrentProps,
              camelizedKey,
              value,
              instance,
              false
              /* isAbsent */
            );
          }
        } else {
          if (value !== attrs[key]) {
            attrs[key] = value;
            hasAttrsChanged = true;
          }
        }
      }
    }
  } else {
    if (setFullProps$1(instance, rawProps, props, attrs)) {
      hasAttrsChanged = true;
    }
    let kebabKey;
    for (const key in rawCurrentProps) {
      if (!rawProps || // for camelCase
      !hasOwn$2(rawProps, key) && // it's possible the original props was passed in as kebab-case
      // and converted to camelCase (#955)
      ((kebabKey = hyphenate$1(key)) === key || !hasOwn$2(rawProps, kebabKey))) {
        if (options) {
          if (rawPrevProps && // for camelCase
          (rawPrevProps[key] !== void 0 || // for kebab-case
          rawPrevProps[kebabKey] !== void 0)) {
            props[key] = resolvePropValue$1(
              options,
              rawCurrentProps,
              key,
              void 0,
              instance,
              true
              /* isAbsent */
            );
          }
        } else {
          delete props[key];
        }
      }
    }
    if (attrs !== rawCurrentProps) {
      for (const key in attrs) {
        if (!rawProps || !hasOwn$2(rawProps, key) && true) {
          delete attrs[key];
          hasAttrsChanged = true;
        }
      }
    }
  }
  if (hasAttrsChanged) {
    trigger$1(instance, "set", "$attrs");
  }
  {
    validateProps$1(rawProps || {}, props, instance);
  }
}
function setFullProps$1(instance, rawProps, props, attrs) {
  const [options, needCastKeys] = instance.propsOptions;
  let hasAttrsChanged = false;
  let rawCastValues;
  if (rawProps) {
    for (let key in rawProps) {
      if (isReservedProp$1(key)) {
        continue;
      }
      const value = rawProps[key];
      let camelKey;
      if (options && hasOwn$2(options, camelKey = camelize$1(key))) {
        if (!needCastKeys || !needCastKeys.includes(camelKey)) {
          props[camelKey] = value;
        } else {
          (rawCastValues || (rawCastValues = {}))[camelKey] = value;
        }
      } else if (!isEmitListener$1(instance.emitsOptions, key)) {
        if (!(key in attrs) || value !== attrs[key]) {
          attrs[key] = value;
          hasAttrsChanged = true;
        }
      }
    }
  }
  if (needCastKeys) {
    const rawCurrentProps = toRaw$1(props);
    const castValues = rawCastValues || EMPTY_OBJ$1;
    for (let i3 = 0; i3 < needCastKeys.length; i3++) {
      const key = needCastKeys[i3];
      props[key] = resolvePropValue$1(
        options,
        rawCurrentProps,
        key,
        castValues[key],
        instance,
        !hasOwn$2(castValues, key)
      );
    }
  }
  return hasAttrsChanged;
}
function resolvePropValue$1(options, props, key, value, instance, isAbsent) {
  const opt = options[key];
  if (opt != null) {
    const hasDefault = hasOwn$2(opt, "default");
    if (hasDefault && value === void 0) {
      const defaultValue = opt.default;
      if (opt.type !== Function && !opt.skipFactory && isFunction$3(defaultValue)) {
        const { propsDefaults } = instance;
        if (key in propsDefaults) {
          value = propsDefaults[key];
        } else {
          setCurrentInstance$1(instance);
          value = propsDefaults[key] = defaultValue.call(
            null,
            props
          );
          unsetCurrentInstance$1();
        }
      } else {
        value = defaultValue;
      }
    }
    if (opt[
      0
      /* shouldCast */
    ]) {
      if (isAbsent && !hasDefault) {
        value = false;
      } else if (opt[
        1
        /* shouldCastTrue */
      ] && (value === "" || value === hyphenate$1(key))) {
        value = true;
      }
    }
  }
  return value;
}
function normalizePropsOptions$1(comp, appContext, asMixin = false) {
  const cache2 = appContext.propsCache;
  const cached = cache2.get(comp);
  if (cached) {
    return cached;
  }
  const raw = comp.props;
  const normalized = {};
  const needCastKeys = [];
  let hasExtends = false;
  if (!isFunction$3(comp)) {
    const extendProps = (raw2) => {
      hasExtends = true;
      const [props, keys] = normalizePropsOptions$1(raw2, appContext, true);
      extend$1(normalized, props);
      if (keys)
        needCastKeys.push(...keys);
    };
    if (!asMixin && appContext.mixins.length) {
      appContext.mixins.forEach(extendProps);
    }
    if (comp.extends) {
      extendProps(comp.extends);
    }
    if (comp.mixins) {
      comp.mixins.forEach(extendProps);
    }
  }
  if (!raw && !hasExtends) {
    if (isObject$4(comp)) {
      cache2.set(comp, EMPTY_ARR$1);
    }
    return EMPTY_ARR$1;
  }
  if (isArray$4(raw)) {
    for (let i3 = 0; i3 < raw.length; i3++) {
      if (!isString$3(raw[i3])) {
        warn$5(`props must be strings when using array syntax.`, raw[i3]);
      }
      const normalizedKey = camelize$1(raw[i3]);
      if (validatePropName$1(normalizedKey)) {
        normalized[normalizedKey] = EMPTY_OBJ$1;
      }
    }
  } else if (raw) {
    if (!isObject$4(raw)) {
      warn$5(`invalid props options`, raw);
    }
    for (const key in raw) {
      const normalizedKey = camelize$1(key);
      if (validatePropName$1(normalizedKey)) {
        const opt = raw[key];
        const prop = normalized[normalizedKey] = isArray$4(opt) || isFunction$3(opt) ? { type: opt } : extend$1({}, opt);
        if (prop) {
          const booleanIndex = getTypeIndex$1(Boolean, prop.type);
          const stringIndex = getTypeIndex$1(String, prop.type);
          prop[
            0
            /* shouldCast */
          ] = booleanIndex > -1;
          prop[
            1
            /* shouldCastTrue */
          ] = stringIndex < 0 || booleanIndex < stringIndex;
          if (booleanIndex > -1 || hasOwn$2(prop, "default")) {
            needCastKeys.push(normalizedKey);
          }
        }
      }
    }
  }
  const res = [normalized, needCastKeys];
  if (isObject$4(comp)) {
    cache2.set(comp, res);
  }
  return res;
}
function validatePropName$1(key) {
  if (key[0] !== "$") {
    return true;
  } else {
    warn$5(`Invalid prop name: "${key}" is a reserved property.`);
  }
  return false;
}
function getType$1(ctor) {
  const match2 = ctor && ctor.toString().match(/^\s*(function|class) (\w+)/);
  return match2 ? match2[2] : ctor === null ? "null" : "";
}
function isSameType$1(a4, b4) {
  return getType$1(a4) === getType$1(b4);
}
function getTypeIndex$1(type, expectedTypes) {
  if (isArray$4(expectedTypes)) {
    return expectedTypes.findIndex((t3) => isSameType$1(t3, type));
  } else if (isFunction$3(expectedTypes)) {
    return isSameType$1(expectedTypes, type) ? 0 : -1;
  }
  return -1;
}
function validateProps$1(rawProps, props, instance) {
  const resolvedValues = toRaw$1(props);
  const options = instance.propsOptions[0];
  for (const key in options) {
    let opt = options[key];
    if (opt == null)
      continue;
    validateProp$1(
      key,
      resolvedValues[key],
      opt,
      !hasOwn$2(rawProps, key) && !hasOwn$2(rawProps, hyphenate$1(key))
    );
  }
}
function validateProp$1(name, value, prop, isAbsent) {
  const { type, required, validator, skipCheck } = prop;
  if (required && isAbsent) {
    warn$5('Missing required prop: "' + name + '"');
    return;
  }
  if (value == null && !required) {
    return;
  }
  if (type != null && type !== true && !skipCheck) {
    let isValid2 = false;
    const types = isArray$4(type) ? type : [type];
    const expectedTypes = [];
    for (let i3 = 0; i3 < types.length && !isValid2; i3++) {
      const { valid, expectedType } = assertType$1(value, types[i3]);
      expectedTypes.push(expectedType || "");
      isValid2 = valid;
    }
    if (!isValid2) {
      warn$5(getInvalidTypeMessage$1(name, value, expectedTypes));
      return;
    }
  }
  if (validator && !validator(value)) {
    warn$5('Invalid prop: custom validator check failed for prop "' + name + '".');
  }
}
const isSimpleType$1 = /* @__PURE__ */ makeMap$1(
  "String,Number,Boolean,Function,Symbol,BigInt"
);
function assertType$1(value, type) {
  let valid;
  const expectedType = getType$1(type);
  if (isSimpleType$1(expectedType)) {
    const t3 = typeof value;
    valid = t3 === expectedType.toLowerCase();
    if (!valid && t3 === "object") {
      valid = value instanceof type;
    }
  } else if (expectedType === "Object") {
    valid = isObject$4(value);
  } else if (expectedType === "Array") {
    valid = isArray$4(value);
  } else if (expectedType === "null") {
    valid = value === null;
  } else {
    valid = value instanceof type;
  }
  return {
    valid,
    expectedType
  };
}
function getInvalidTypeMessage$1(name, value, expectedTypes) {
  let message = `Invalid prop: type check failed for prop "${name}". Expected ${expectedTypes.map(capitalize$2).join(" | ")}`;
  const expectedType = expectedTypes[0];
  const receivedType = toRawType$1(value);
  const expectedValue = styleValue$1(value, expectedType);
  const receivedValue = styleValue$1(value, receivedType);
  if (expectedTypes.length === 1 && isExplicable$1(expectedType) && !isBoolean$2(expectedType, receivedType)) {
    message += ` with value ${expectedValue}`;
  }
  message += `, got ${receivedType} `;
  if (isExplicable$1(receivedType)) {
    message += `with value ${receivedValue}.`;
  }
  return message;
}
function styleValue$1(value, type) {
  if (type === "String") {
    return `"${value}"`;
  } else if (type === "Number") {
    return `${Number(value)}`;
  } else {
    return `${value}`;
  }
}
function isExplicable$1(type) {
  const explicitTypes = ["string", "number", "boolean"];
  return explicitTypes.some((elem) => type.toLowerCase() === elem);
}
function isBoolean$2(...args) {
  return args.some((elem) => elem.toLowerCase() === "boolean");
}
const isInternalKey$1 = (key) => key[0] === "_" || key === "$stable";
const normalizeSlotValue$1 = (value) => isArray$4(value) ? value.map(normalizeVNode$1) : [normalizeVNode$1(value)];
const normalizeSlot$3 = (key, rawSlot, ctx) => {
  if (rawSlot._n) {
    return rawSlot;
  }
  const normalized = withCtx$1((...args) => {
    if (currentInstance$1) {
      warn$5(
        `Slot "${key}" invoked outside of the render function: this will not track dependencies used in the slot. Invoke the slot function inside the render function instead.`
      );
    }
    return normalizeSlotValue$1(rawSlot(...args));
  }, ctx);
  normalized._c = false;
  return normalized;
};
const normalizeObjectSlots$1 = (rawSlots, slots, instance) => {
  const ctx = rawSlots._ctx;
  for (const key in rawSlots) {
    if (isInternalKey$1(key))
      continue;
    const value = rawSlots[key];
    if (isFunction$3(value)) {
      slots[key] = normalizeSlot$3(key, value, ctx);
    } else if (value != null) {
      {
        warn$5(
          `Non-function value encountered for slot "${key}". Prefer function slots for better performance.`
        );
      }
      const normalized = normalizeSlotValue$1(value);
      slots[key] = () => normalized;
    }
  }
};
const normalizeVNodeSlots$1 = (instance, children) => {
  if (!isKeepAlive$1(instance.vnode) && true) {
    warn$5(
      `Non-function value encountered for default slot. Prefer function slots for better performance.`
    );
  }
  const normalized = normalizeSlotValue$1(children);
  instance.slots.default = () => normalized;
};
const initSlots$1 = (instance, children) => {
  if (instance.vnode.shapeFlag & 32) {
    const type = children._;
    if (type) {
      instance.slots = toRaw$1(children);
      def$1(children, "_", type);
    } else {
      normalizeObjectSlots$1(
        children,
        instance.slots = {}
      );
    }
  } else {
    instance.slots = {};
    if (children) {
      normalizeVNodeSlots$1(instance, children);
    }
  }
  def$1(instance.slots, InternalObjectKey$1, 1);
};
const updateSlots$1 = (instance, children, optimized) => {
  const { vnode, slots } = instance;
  let needDeletionCheck = true;
  let deletionComparisonTarget = EMPTY_OBJ$1;
  if (vnode.shapeFlag & 32) {
    const type = children._;
    if (type) {
      if (isHmrUpdating$1) {
        extend$1(slots, children);
        trigger$1(instance, "set", "$slots");
      } else if (optimized && type === 1) {
        needDeletionCheck = false;
      } else {
        extend$1(slots, children);
        if (!optimized && type === 1) {
          delete slots._;
        }
      }
    } else {
      needDeletionCheck = !children.$stable;
      normalizeObjectSlots$1(children, slots);
    }
    deletionComparisonTarget = children;
  } else if (children) {
    normalizeVNodeSlots$1(instance, children);
    deletionComparisonTarget = { default: 1 };
  }
  if (needDeletionCheck) {
    for (const key in slots) {
      if (!isInternalKey$1(key) && deletionComparisonTarget[key] == null) {
        delete slots[key];
      }
    }
  }
};
function setRef$1(rawRef, oldRawRef, parentSuspense, vnode, isUnmount = false) {
  if (isArray$4(rawRef)) {
    rawRef.forEach(
      (r2, i3) => setRef$1(
        r2,
        oldRawRef && (isArray$4(oldRawRef) ? oldRawRef[i3] : oldRawRef),
        parentSuspense,
        vnode,
        isUnmount
      )
    );
    return;
  }
  if (isAsyncWrapper$1(vnode) && !isUnmount) {
    return;
  }
  const refValue = vnode.shapeFlag & 4 ? getExposeProxy$1(vnode.component) || vnode.component.proxy : vnode.el;
  const value = isUnmount ? null : refValue;
  const { i: owner, r: ref2 } = rawRef;
  if (!owner) {
    warn$5(
      `Missing ref owner context. ref cannot be used on hoisted vnodes. A vnode with ref must be created inside the render function.`
    );
    return;
  }
  const oldRef = oldRawRef && oldRawRef.r;
  const refs = owner.refs === EMPTY_OBJ$1 ? owner.refs = {} : owner.refs;
  const setupState = owner.setupState;
  if (oldRef != null && oldRef !== ref2) {
    if (isString$3(oldRef)) {
      refs[oldRef] = null;
      if (hasOwn$2(setupState, oldRef)) {
        setupState[oldRef] = null;
      }
    } else if (isRef$1(oldRef)) {
      oldRef.value = null;
    }
  }
  if (isFunction$3(ref2)) {
    callWithErrorHandling$1(ref2, owner, 12, [value, refs]);
  } else {
    const _isString = isString$3(ref2);
    const _isRef = isRef$1(ref2);
    if (_isString || _isRef) {
      const doSet = () => {
        if (rawRef.f) {
          const existing = _isString ? hasOwn$2(setupState, ref2) ? setupState[ref2] : refs[ref2] : ref2.value;
          if (isUnmount) {
            isArray$4(existing) && remove$1(existing, refValue);
          } else {
            if (!isArray$4(existing)) {
              if (_isString) {
                refs[ref2] = [refValue];
                if (hasOwn$2(setupState, ref2)) {
                  setupState[ref2] = refs[ref2];
                }
              } else {
                ref2.value = [refValue];
                if (rawRef.k)
                  refs[rawRef.k] = ref2.value;
              }
            } else if (!existing.includes(refValue)) {
              existing.push(refValue);
            }
          }
        } else if (_isString) {
          refs[ref2] = value;
          if (hasOwn$2(setupState, ref2)) {
            setupState[ref2] = value;
          }
        } else if (_isRef) {
          ref2.value = value;
          if (rawRef.k)
            refs[rawRef.k] = value;
        } else {
          warn$5("Invalid template ref type:", ref2, `(${typeof ref2})`);
        }
      };
      if (value) {
        doSet.id = -1;
        queuePostRenderEffect$1(doSet, parentSuspense);
      } else {
        doSet();
      }
    } else {
      warn$5("Invalid template ref type:", ref2, `(${typeof ref2})`);
    }
  }
}
let supported$3;
let perf$3;
function startMeasure$1(instance, type) {
  if (instance.appContext.config.performance && isSupported$1()) {
    perf$3.mark(`vue-${type}-${instance.uid}`);
  }
  {
    devtoolsPerfStart$1(instance, type, isSupported$1() ? perf$3.now() : Date.now());
  }
}
function endMeasure$1(instance, type) {
  if (instance.appContext.config.performance && isSupported$1()) {
    const startTag = `vue-${type}-${instance.uid}`;
    const endTag = startTag + `:end`;
    perf$3.mark(endTag);
    perf$3.measure(
      `<${formatComponentName$1(instance, instance.type)}> ${type}`,
      startTag,
      endTag
    );
    perf$3.clearMarks(startTag);
    perf$3.clearMarks(endTag);
  }
  {
    devtoolsPerfEnd$1(instance, type, isSupported$1() ? perf$3.now() : Date.now());
  }
}
function isSupported$1() {
  if (supported$3 !== void 0) {
    return supported$3;
  }
  if (typeof window !== "undefined" && window.performance) {
    supported$3 = true;
    perf$3 = window.performance;
  } else {
    supported$3 = false;
  }
  return supported$3;
}
function initFeatureFlags$3() {
  const needWarn = [];
  if (needWarn.length) {
    const multi = needWarn.length > 1;
    console.warn(
      `Feature flag${multi ? `s` : ``} ${needWarn.join(", ")} ${multi ? `are` : `is`} not explicitly defined. You are running the esm-bundler build of Vue, which expects these compile-time feature flags to be globally injected via the bundler config in order to get better tree-shaking in the production bundle.

For more details, see https://link.vuejs.org/feature-flags.`
    );
  }
}
const queuePostRenderEffect$1 = queueEffectWithSuspense$1;
function createRenderer$1(options) {
  return baseCreateRenderer$1(options);
}
function baseCreateRenderer$1(options, createHydrationFns) {
  {
    initFeatureFlags$3();
  }
  const target = getGlobalThis$2();
  target.__VUE__ = true;
  {
    setDevtoolsHook(target.__VUE_DEVTOOLS_GLOBAL_HOOK__, target);
  }
  const {
    insert: hostInsert,
    remove: hostRemove,
    patchProp: hostPatchProp,
    createElement: hostCreateElement,
    createText: hostCreateText,
    createComment: hostCreateComment,
    setText: hostSetText,
    setElementText: hostSetElementText,
    parentNode: hostParentNode,
    nextSibling: hostNextSibling,
    setScopeId: hostSetScopeId = NOOP$1,
    insertStaticContent: hostInsertStaticContent
  } = options;
  const patch = (n1, n2, container, anchor = null, parentComponent = null, parentSuspense = null, isSVG = false, slotScopeIds = null, optimized = isHmrUpdating$1 ? false : !!n2.dynamicChildren) => {
    if (n1 === n2) {
      return;
    }
    if (n1 && !isSameVNodeType$1(n1, n2)) {
      anchor = getNextHostNode(n1);
      unmount(n1, parentComponent, parentSuspense, true);
      n1 = null;
    }
    if (n2.patchFlag === -2) {
      optimized = false;
      n2.dynamicChildren = null;
    }
    const { type, ref: ref2, shapeFlag } = n2;
    switch (type) {
      case Text$1:
        processText(n1, n2, container, anchor);
        break;
      case Comment$2:
        processCommentNode(n1, n2, container, anchor);
        break;
      case Static$1:
        if (n1 == null) {
          mountStaticNode(n2, container, anchor, isSVG);
        } else {
          patchStaticNode(n1, n2, container, isSVG);
        }
        break;
      case Fragment$1:
        processFragment(
          n1,
          n2,
          container,
          anchor,
          parentComponent,
          parentSuspense,
          isSVG,
          slotScopeIds,
          optimized
        );
        break;
      default:
        if (shapeFlag & 1) {
          processElement(
            n1,
            n2,
            container,
            anchor,
            parentComponent,
            parentSuspense,
            isSVG,
            slotScopeIds,
            optimized
          );
        } else if (shapeFlag & 6) {
          processComponent(
            n1,
            n2,
            container,
            anchor,
            parentComponent,
            parentSuspense,
            isSVG,
            slotScopeIds,
            optimized
          );
        } else if (shapeFlag & 64) {
          type.process(
            n1,
            n2,
            container,
            anchor,
            parentComponent,
            parentSuspense,
            isSVG,
            slotScopeIds,
            optimized,
            internals
          );
        } else if (shapeFlag & 128) {
          type.process(
            n1,
            n2,
            container,
            anchor,
            parentComponent,
            parentSuspense,
            isSVG,
            slotScopeIds,
            optimized,
            internals
          );
        } else {
          warn$5("Invalid VNode type:", type, `(${typeof type})`);
        }
    }
    if (ref2 != null && parentComponent) {
      setRef$1(ref2, n1 && n1.ref, parentSuspense, n2 || n1, !n2);
    }
  };
  const processText = (n1, n2, container, anchor) => {
    if (n1 == null) {
      hostInsert(
        n2.el = hostCreateText(n2.children),
        container,
        anchor
      );
    } else {
      const el3 = n2.el = n1.el;
      if (n2.children !== n1.children) {
        hostSetText(el3, n2.children);
      }
    }
  };
  const processCommentNode = (n1, n2, container, anchor) => {
    if (n1 == null) {
      hostInsert(
        n2.el = hostCreateComment(n2.children || ""),
        container,
        anchor
      );
    } else {
      n2.el = n1.el;
    }
  };
  const mountStaticNode = (n2, container, anchor, isSVG) => {
    [n2.el, n2.anchor] = hostInsertStaticContent(
      n2.children,
      container,
      anchor,
      isSVG,
      n2.el,
      n2.anchor
    );
  };
  const patchStaticNode = (n1, n2, container, isSVG) => {
    if (n2.children !== n1.children) {
      const anchor = hostNextSibling(n1.anchor);
      removeStaticNode(n1);
      [n2.el, n2.anchor] = hostInsertStaticContent(
        n2.children,
        container,
        anchor,
        isSVG
      );
    } else {
      n2.el = n1.el;
      n2.anchor = n1.anchor;
    }
  };
  const moveStaticNode = ({ el: el3, anchor }, container, nextSibling) => {
    let next;
    while (el3 && el3 !== anchor) {
      next = hostNextSibling(el3);
      hostInsert(el3, container, nextSibling);
      el3 = next;
    }
    hostInsert(anchor, container, nextSibling);
  };
  const removeStaticNode = ({ el: el3, anchor }) => {
    let next;
    while (el3 && el3 !== anchor) {
      next = hostNextSibling(el3);
      hostRemove(el3);
      el3 = next;
    }
    hostRemove(anchor);
  };
  const processElement = (n1, n2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized) => {
    isSVG = isSVG || n2.type === "svg";
    if (n1 == null) {
      mountElement(
        n2,
        container,
        anchor,
        parentComponent,
        parentSuspense,
        isSVG,
        slotScopeIds,
        optimized
      );
    } else {
      patchElement(
        n1,
        n2,
        parentComponent,
        parentSuspense,
        isSVG,
        slotScopeIds,
        optimized
      );
    }
  };
  const mountElement = (vnode, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized) => {
    let el3;
    let vnodeHook;
    const { type, props, shapeFlag, transition, dirs } = vnode;
    el3 = vnode.el = hostCreateElement(
      vnode.type,
      isSVG,
      props && props.is,
      props
    );
    if (shapeFlag & 8) {
      hostSetElementText(el3, vnode.children);
    } else if (shapeFlag & 16) {
      mountChildren(
        vnode.children,
        el3,
        null,
        parentComponent,
        parentSuspense,
        isSVG && type !== "foreignObject",
        slotScopeIds,
        optimized
      );
    }
    if (dirs) {
      invokeDirectiveHook$1(vnode, null, parentComponent, "created");
    }
    setScopeId(el3, vnode, vnode.scopeId, slotScopeIds, parentComponent);
    if (props) {
      for (const key in props) {
        if (key !== "value" && !isReservedProp$1(key)) {
          hostPatchProp(
            el3,
            key,
            null,
            props[key],
            isSVG,
            vnode.children,
            parentComponent,
            parentSuspense,
            unmountChildren
          );
        }
      }
      if ("value" in props) {
        hostPatchProp(el3, "value", null, props.value);
      }
      if (vnodeHook = props.onVnodeBeforeMount) {
        invokeVNodeHook$1(vnodeHook, parentComponent, vnode);
      }
    }
    {
      Object.defineProperty(el3, "__vnode", {
        value: vnode,
        enumerable: false
      });
      Object.defineProperty(el3, "__vueParentComponent", {
        value: parentComponent,
        enumerable: false
      });
    }
    if (dirs) {
      invokeDirectiveHook$1(vnode, null, parentComponent, "beforeMount");
    }
    const needCallTransitionHooks = needTransition$1(parentSuspense, transition);
    if (needCallTransitionHooks) {
      transition.beforeEnter(el3);
    }
    hostInsert(el3, container, anchor);
    if ((vnodeHook = props && props.onVnodeMounted) || needCallTransitionHooks || dirs) {
      queuePostRenderEffect$1(() => {
        vnodeHook && invokeVNodeHook$1(vnodeHook, parentComponent, vnode);
        needCallTransitionHooks && transition.enter(el3);
        dirs && invokeDirectiveHook$1(vnode, null, parentComponent, "mounted");
      }, parentSuspense);
    }
  };
  const setScopeId = (el3, vnode, scopeId, slotScopeIds, parentComponent) => {
    if (scopeId) {
      hostSetScopeId(el3, scopeId);
    }
    if (slotScopeIds) {
      for (let i3 = 0; i3 < slotScopeIds.length; i3++) {
        hostSetScopeId(el3, slotScopeIds[i3]);
      }
    }
    if (parentComponent) {
      let subTree = parentComponent.subTree;
      if (subTree.patchFlag > 0 && subTree.patchFlag & 2048) {
        subTree = filterSingleRoot$1(subTree.children) || subTree;
      }
      if (vnode === subTree) {
        const parentVNode = parentComponent.vnode;
        setScopeId(
          el3,
          parentVNode,
          parentVNode.scopeId,
          parentVNode.slotScopeIds,
          parentComponent.parent
        );
      }
    }
  };
  const mountChildren = (children, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized, start = 0) => {
    for (let i3 = start; i3 < children.length; i3++) {
      const child = children[i3] = optimized ? cloneIfMounted$1(children[i3]) : normalizeVNode$1(children[i3]);
      patch(
        null,
        child,
        container,
        anchor,
        parentComponent,
        parentSuspense,
        isSVG,
        slotScopeIds,
        optimized
      );
    }
  };
  const patchElement = (n1, n2, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized) => {
    const el3 = n2.el = n1.el;
    let { patchFlag, dynamicChildren, dirs } = n2;
    patchFlag |= n1.patchFlag & 16;
    const oldProps = n1.props || EMPTY_OBJ$1;
    const newProps = n2.props || EMPTY_OBJ$1;
    let vnodeHook;
    parentComponent && toggleRecurse$1(parentComponent, false);
    if (vnodeHook = newProps.onVnodeBeforeUpdate) {
      invokeVNodeHook$1(vnodeHook, parentComponent, n2, n1);
    }
    if (dirs) {
      invokeDirectiveHook$1(n2, n1, parentComponent, "beforeUpdate");
    }
    parentComponent && toggleRecurse$1(parentComponent, true);
    if (isHmrUpdating$1) {
      patchFlag = 0;
      optimized = false;
      dynamicChildren = null;
    }
    const areChildrenSVG = isSVG && n2.type !== "foreignObject";
    if (dynamicChildren) {
      patchBlockChildren(
        n1.dynamicChildren,
        dynamicChildren,
        el3,
        parentComponent,
        parentSuspense,
        areChildrenSVG,
        slotScopeIds
      );
      {
        traverseStaticChildren$1(n1, n2);
      }
    } else if (!optimized) {
      patchChildren(
        n1,
        n2,
        el3,
        null,
        parentComponent,
        parentSuspense,
        areChildrenSVG,
        slotScopeIds,
        false
      );
    }
    if (patchFlag > 0) {
      if (patchFlag & 16) {
        patchProps(
          el3,
          n2,
          oldProps,
          newProps,
          parentComponent,
          parentSuspense,
          isSVG
        );
      } else {
        if (patchFlag & 2) {
          if (oldProps.class !== newProps.class) {
            hostPatchProp(el3, "class", null, newProps.class, isSVG);
          }
        }
        if (patchFlag & 4) {
          hostPatchProp(el3, "style", oldProps.style, newProps.style, isSVG);
        }
        if (patchFlag & 8) {
          const propsToUpdate = n2.dynamicProps;
          for (let i3 = 0; i3 < propsToUpdate.length; i3++) {
            const key = propsToUpdate[i3];
            const prev = oldProps[key];
            const next = newProps[key];
            if (next !== prev || key === "value") {
              hostPatchProp(
                el3,
                key,
                prev,
                next,
                isSVG,
                n1.children,
                parentComponent,
                parentSuspense,
                unmountChildren
              );
            }
          }
        }
      }
      if (patchFlag & 1) {
        if (n1.children !== n2.children) {
          hostSetElementText(el3, n2.children);
        }
      }
    } else if (!optimized && dynamicChildren == null) {
      patchProps(
        el3,
        n2,
        oldProps,
        newProps,
        parentComponent,
        parentSuspense,
        isSVG
      );
    }
    if ((vnodeHook = newProps.onVnodeUpdated) || dirs) {
      queuePostRenderEffect$1(() => {
        vnodeHook && invokeVNodeHook$1(vnodeHook, parentComponent, n2, n1);
        dirs && invokeDirectiveHook$1(n2, n1, parentComponent, "updated");
      }, parentSuspense);
    }
  };
  const patchBlockChildren = (oldChildren, newChildren, fallbackContainer, parentComponent, parentSuspense, isSVG, slotScopeIds) => {
    for (let i3 = 0; i3 < newChildren.length; i3++) {
      const oldVNode = oldChildren[i3];
      const newVNode = newChildren[i3];
      const container = (
        // oldVNode may be an errored async setup() component inside Suspense
        // which will not have a mounted element
        oldVNode.el && // - In the case of a Fragment, we need to provide the actual parent
        // of the Fragment itself so it can move its children.
        (oldVNode.type === Fragment$1 || // - In the case of different nodes, there is going to be a replacement
        // which also requires the correct parent container
        !isSameVNodeType$1(oldVNode, newVNode) || // - In the case of a component, it could contain anything.
        oldVNode.shapeFlag & (6 | 64)) ? hostParentNode(oldVNode.el) : (
          // In other cases, the parent container is not actually used so we
          // just pass the block element here to avoid a DOM parentNode call.
          fallbackContainer
        )
      );
      patch(
        oldVNode,
        newVNode,
        container,
        null,
        parentComponent,
        parentSuspense,
        isSVG,
        slotScopeIds,
        true
      );
    }
  };
  const patchProps = (el3, vnode, oldProps, newProps, parentComponent, parentSuspense, isSVG) => {
    if (oldProps !== newProps) {
      if (oldProps !== EMPTY_OBJ$1) {
        for (const key in oldProps) {
          if (!isReservedProp$1(key) && !(key in newProps)) {
            hostPatchProp(
              el3,
              key,
              oldProps[key],
              null,
              isSVG,
              vnode.children,
              parentComponent,
              parentSuspense,
              unmountChildren
            );
          }
        }
      }
      for (const key in newProps) {
        if (isReservedProp$1(key))
          continue;
        const next = newProps[key];
        const prev = oldProps[key];
        if (next !== prev && key !== "value") {
          hostPatchProp(
            el3,
            key,
            prev,
            next,
            isSVG,
            vnode.children,
            parentComponent,
            parentSuspense,
            unmountChildren
          );
        }
      }
      if ("value" in newProps) {
        hostPatchProp(el3, "value", oldProps.value, newProps.value);
      }
    }
  };
  const processFragment = (n1, n2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized) => {
    const fragmentStartAnchor = n2.el = n1 ? n1.el : hostCreateText("");
    const fragmentEndAnchor = n2.anchor = n1 ? n1.anchor : hostCreateText("");
    let { patchFlag, dynamicChildren, slotScopeIds: fragmentSlotScopeIds } = n2;
    if (
      // #5523 dev root fragment may inherit directives
      isHmrUpdating$1 || patchFlag & 2048
    ) {
      patchFlag = 0;
      optimized = false;
      dynamicChildren = null;
    }
    if (fragmentSlotScopeIds) {
      slotScopeIds = slotScopeIds ? slotScopeIds.concat(fragmentSlotScopeIds) : fragmentSlotScopeIds;
    }
    if (n1 == null) {
      hostInsert(fragmentStartAnchor, container, anchor);
      hostInsert(fragmentEndAnchor, container, anchor);
      mountChildren(
        n2.children,
        container,
        fragmentEndAnchor,
        parentComponent,
        parentSuspense,
        isSVG,
        slotScopeIds,
        optimized
      );
    } else {
      if (patchFlag > 0 && patchFlag & 64 && dynamicChildren && // #2715 the previous fragment could've been a BAILed one as a result
      // of renderSlot() with no valid children
      n1.dynamicChildren) {
        patchBlockChildren(
          n1.dynamicChildren,
          dynamicChildren,
          container,
          parentComponent,
          parentSuspense,
          isSVG,
          slotScopeIds
        );
        {
          traverseStaticChildren$1(n1, n2);
        }
      } else {
        patchChildren(
          n1,
          n2,
          container,
          fragmentEndAnchor,
          parentComponent,
          parentSuspense,
          isSVG,
          slotScopeIds,
          optimized
        );
      }
    }
  };
  const processComponent = (n1, n2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized) => {
    n2.slotScopeIds = slotScopeIds;
    if (n1 == null) {
      if (n2.shapeFlag & 512) {
        parentComponent.ctx.activate(
          n2,
          container,
          anchor,
          isSVG,
          optimized
        );
      } else {
        mountComponent(
          n2,
          container,
          anchor,
          parentComponent,
          parentSuspense,
          isSVG,
          optimized
        );
      }
    } else {
      updateComponent(n1, n2, optimized);
    }
  };
  const mountComponent = (initialVNode, container, anchor, parentComponent, parentSuspense, isSVG, optimized) => {
    const instance = initialVNode.component = createComponentInstance$1(
      initialVNode,
      parentComponent,
      parentSuspense
    );
    if (instance.type.__hmrId) {
      registerHMR$1(instance);
    }
    {
      pushWarningContext$1(initialVNode);
      startMeasure$1(instance, `mount`);
    }
    if (isKeepAlive$1(initialVNode)) {
      instance.ctx.renderer = internals;
    }
    {
      {
        startMeasure$1(instance, `init`);
      }
      setupComponent$1(instance);
      {
        endMeasure$1(instance, `init`);
      }
    }
    if (instance.asyncDep) {
      parentSuspense && parentSuspense.registerDep(instance, setupRenderEffect);
      if (!initialVNode.el) {
        const placeholder = instance.subTree = createVNode$1(Comment$2);
        processCommentNode(null, placeholder, container, anchor);
      }
      return;
    }
    setupRenderEffect(
      instance,
      initialVNode,
      container,
      anchor,
      parentSuspense,
      isSVG,
      optimized
    );
    {
      popWarningContext$1();
      endMeasure$1(instance, `mount`);
    }
  };
  const updateComponent = (n1, n2, optimized) => {
    const instance = n2.component = n1.component;
    if (shouldUpdateComponent$1(n1, n2, optimized)) {
      if (instance.asyncDep && !instance.asyncResolved) {
        {
          pushWarningContext$1(n2);
        }
        updateComponentPreRender(instance, n2, optimized);
        {
          popWarningContext$1();
        }
        return;
      } else {
        instance.next = n2;
        invalidateJob$1(instance.update);
        instance.update();
      }
    } else {
      n2.el = n1.el;
      instance.vnode = n2;
    }
  };
  const setupRenderEffect = (instance, initialVNode, container, anchor, parentSuspense, isSVG, optimized) => {
    const componentUpdateFn = () => {
      if (!instance.isMounted) {
        let vnodeHook;
        const { el: el3, props } = initialVNode;
        const { bm: bm2, m: m4, parent } = instance;
        const isAsyncWrapperVNode = isAsyncWrapper$1(initialVNode);
        toggleRecurse$1(instance, false);
        if (bm2) {
          invokeArrayFns$1(bm2);
        }
        if (!isAsyncWrapperVNode && (vnodeHook = props && props.onVnodeBeforeMount)) {
          invokeVNodeHook$1(vnodeHook, parent, initialVNode);
        }
        toggleRecurse$1(instance, true);
        if (el3 && hydrateNode) {
          const hydrateSubTree = () => {
            {
              startMeasure$1(instance, `render`);
            }
            instance.subTree = renderComponentRoot$1(instance);
            {
              endMeasure$1(instance, `render`);
            }
            {
              startMeasure$1(instance, `hydrate`);
            }
            hydrateNode(
              el3,
              instance.subTree,
              instance,
              parentSuspense,
              null
            );
            {
              endMeasure$1(instance, `hydrate`);
            }
          };
          if (isAsyncWrapperVNode) {
            initialVNode.type.__asyncLoader().then(
              // note: we are moving the render call into an async callback,
              // which means it won't track dependencies - but it's ok because
              // a server-rendered async wrapper is already in resolved state
              // and it will never need to change.
              () => !instance.isUnmounted && hydrateSubTree()
            );
          } else {
            hydrateSubTree();
          }
        } else {
          {
            startMeasure$1(instance, `render`);
          }
          const subTree = instance.subTree = renderComponentRoot$1(instance);
          {
            endMeasure$1(instance, `render`);
          }
          {
            startMeasure$1(instance, `patch`);
          }
          patch(
            null,
            subTree,
            container,
            anchor,
            instance,
            parentSuspense,
            isSVG
          );
          {
            endMeasure$1(instance, `patch`);
          }
          initialVNode.el = subTree.el;
        }
        if (m4) {
          queuePostRenderEffect$1(m4, parentSuspense);
        }
        if (!isAsyncWrapperVNode && (vnodeHook = props && props.onVnodeMounted)) {
          const scopedInitialVNode = initialVNode;
          queuePostRenderEffect$1(
            () => invokeVNodeHook$1(vnodeHook, parent, scopedInitialVNode),
            parentSuspense
          );
        }
        if (initialVNode.shapeFlag & 256 || parent && isAsyncWrapper$1(parent.vnode) && parent.vnode.shapeFlag & 256) {
          instance.a && queuePostRenderEffect$1(instance.a, parentSuspense);
        }
        instance.isMounted = true;
        {
          devtoolsComponentAdded$1(instance);
        }
        initialVNode = container = anchor = null;
      } else {
        let { next, bu: bu2, u: u3, parent, vnode } = instance;
        let originNext = next;
        let vnodeHook;
        {
          pushWarningContext$1(next || instance.vnode);
        }
        toggleRecurse$1(instance, false);
        if (next) {
          next.el = vnode.el;
          updateComponentPreRender(instance, next, optimized);
        } else {
          next = vnode;
        }
        if (bu2) {
          invokeArrayFns$1(bu2);
        }
        if (vnodeHook = next.props && next.props.onVnodeBeforeUpdate) {
          invokeVNodeHook$1(vnodeHook, parent, next, vnode);
        }
        toggleRecurse$1(instance, true);
        {
          startMeasure$1(instance, `render`);
        }
        const nextTree = renderComponentRoot$1(instance);
        {
          endMeasure$1(instance, `render`);
        }
        const prevTree = instance.subTree;
        instance.subTree = nextTree;
        {
          startMeasure$1(instance, `patch`);
        }
        patch(
          prevTree,
          nextTree,
          // parent may have changed if it's in a teleport
          hostParentNode(prevTree.el),
          // anchor may have changed if it's in a fragment
          getNextHostNode(prevTree),
          instance,
          parentSuspense,
          isSVG
        );
        {
          endMeasure$1(instance, `patch`);
        }
        next.el = nextTree.el;
        if (originNext === null) {
          updateHOCHostEl$1(instance, nextTree.el);
        }
        if (u3) {
          queuePostRenderEffect$1(u3, parentSuspense);
        }
        if (vnodeHook = next.props && next.props.onVnodeUpdated) {
          queuePostRenderEffect$1(
            () => invokeVNodeHook$1(vnodeHook, parent, next, vnode),
            parentSuspense
          );
        }
        {
          devtoolsComponentUpdated$1(instance);
        }
        {
          popWarningContext$1();
        }
      }
    };
    const effect2 = instance.effect = new ReactiveEffect$1(
      componentUpdateFn,
      () => queueJob$1(update),
      instance.scope
      // track it in component's effect scope
    );
    const update = instance.update = () => effect2.run();
    update.id = instance.uid;
    toggleRecurse$1(instance, true);
    {
      effect2.onTrack = instance.rtc ? (e3) => invokeArrayFns$1(instance.rtc, e3) : void 0;
      effect2.onTrigger = instance.rtg ? (e3) => invokeArrayFns$1(instance.rtg, e3) : void 0;
      update.ownerInstance = instance;
    }
    update();
  };
  const updateComponentPreRender = (instance, nextVNode, optimized) => {
    nextVNode.component = instance;
    const prevProps = instance.vnode.props;
    instance.vnode = nextVNode;
    instance.next = null;
    updateProps$1(instance, nextVNode.props, prevProps, optimized);
    updateSlots$1(instance, nextVNode.children, optimized);
    pauseTracking$1();
    flushPreFlushCbs$1();
    resetTracking$1();
  };
  const patchChildren = (n1, n2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized = false) => {
    const c1 = n1 && n1.children;
    const prevShapeFlag = n1 ? n1.shapeFlag : 0;
    const c22 = n2.children;
    const { patchFlag, shapeFlag } = n2;
    if (patchFlag > 0) {
      if (patchFlag & 128) {
        patchKeyedChildren(
          c1,
          c22,
          container,
          anchor,
          parentComponent,
          parentSuspense,
          isSVG,
          slotScopeIds,
          optimized
        );
        return;
      } else if (patchFlag & 256) {
        patchUnkeyedChildren(
          c1,
          c22,
          container,
          anchor,
          parentComponent,
          parentSuspense,
          isSVG,
          slotScopeIds,
          optimized
        );
        return;
      }
    }
    if (shapeFlag & 8) {
      if (prevShapeFlag & 16) {
        unmountChildren(c1, parentComponent, parentSuspense);
      }
      if (c22 !== c1) {
        hostSetElementText(container, c22);
      }
    } else {
      if (prevShapeFlag & 16) {
        if (shapeFlag & 16) {
          patchKeyedChildren(
            c1,
            c22,
            container,
            anchor,
            parentComponent,
            parentSuspense,
            isSVG,
            slotScopeIds,
            optimized
          );
        } else {
          unmountChildren(c1, parentComponent, parentSuspense, true);
        }
      } else {
        if (prevShapeFlag & 8) {
          hostSetElementText(container, "");
        }
        if (shapeFlag & 16) {
          mountChildren(
            c22,
            container,
            anchor,
            parentComponent,
            parentSuspense,
            isSVG,
            slotScopeIds,
            optimized
          );
        }
      }
    }
  };
  const patchUnkeyedChildren = (c1, c22, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized) => {
    c1 = c1 || EMPTY_ARR$1;
    c22 = c22 || EMPTY_ARR$1;
    const oldLength = c1.length;
    const newLength = c22.length;
    const commonLength = Math.min(oldLength, newLength);
    let i3;
    for (i3 = 0; i3 < commonLength; i3++) {
      const nextChild = c22[i3] = optimized ? cloneIfMounted$1(c22[i3]) : normalizeVNode$1(c22[i3]);
      patch(
        c1[i3],
        nextChild,
        container,
        null,
        parentComponent,
        parentSuspense,
        isSVG,
        slotScopeIds,
        optimized
      );
    }
    if (oldLength > newLength) {
      unmountChildren(
        c1,
        parentComponent,
        parentSuspense,
        true,
        false,
        commonLength
      );
    } else {
      mountChildren(
        c22,
        container,
        anchor,
        parentComponent,
        parentSuspense,
        isSVG,
        slotScopeIds,
        optimized,
        commonLength
      );
    }
  };
  const patchKeyedChildren = (c1, c22, container, parentAnchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized) => {
    let i3 = 0;
    const l2 = c22.length;
    let e1 = c1.length - 1;
    let e22 = l2 - 1;
    while (i3 <= e1 && i3 <= e22) {
      const n1 = c1[i3];
      const n2 = c22[i3] = optimized ? cloneIfMounted$1(c22[i3]) : normalizeVNode$1(c22[i3]);
      if (isSameVNodeType$1(n1, n2)) {
        patch(
          n1,
          n2,
          container,
          null,
          parentComponent,
          parentSuspense,
          isSVG,
          slotScopeIds,
          optimized
        );
      } else {
        break;
      }
      i3++;
    }
    while (i3 <= e1 && i3 <= e22) {
      const n1 = c1[e1];
      const n2 = c22[e22] = optimized ? cloneIfMounted$1(c22[e22]) : normalizeVNode$1(c22[e22]);
      if (isSameVNodeType$1(n1, n2)) {
        patch(
          n1,
          n2,
          container,
          null,
          parentComponent,
          parentSuspense,
          isSVG,
          slotScopeIds,
          optimized
        );
      } else {
        break;
      }
      e1--;
      e22--;
    }
    if (i3 > e1) {
      if (i3 <= e22) {
        const nextPos = e22 + 1;
        const anchor = nextPos < l2 ? c22[nextPos].el : parentAnchor;
        while (i3 <= e22) {
          patch(
            null,
            c22[i3] = optimized ? cloneIfMounted$1(c22[i3]) : normalizeVNode$1(c22[i3]),
            container,
            anchor,
            parentComponent,
            parentSuspense,
            isSVG,
            slotScopeIds,
            optimized
          );
          i3++;
        }
      }
    } else if (i3 > e22) {
      while (i3 <= e1) {
        unmount(c1[i3], parentComponent, parentSuspense, true);
        i3++;
      }
    } else {
      const s1 = i3;
      const s22 = i3;
      const keyToNewIndexMap = /* @__PURE__ */ new Map();
      for (i3 = s22; i3 <= e22; i3++) {
        const nextChild = c22[i3] = optimized ? cloneIfMounted$1(c22[i3]) : normalizeVNode$1(c22[i3]);
        if (nextChild.key != null) {
          if (keyToNewIndexMap.has(nextChild.key)) {
            warn$5(
              `Duplicate keys found during update:`,
              JSON.stringify(nextChild.key),
              `Make sure keys are unique.`
            );
          }
          keyToNewIndexMap.set(nextChild.key, i3);
        }
      }
      let j2;
      let patched = 0;
      const toBePatched = e22 - s22 + 1;
      let moved = false;
      let maxNewIndexSoFar = 0;
      const newIndexToOldIndexMap = new Array(toBePatched);
      for (i3 = 0; i3 < toBePatched; i3++)
        newIndexToOldIndexMap[i3] = 0;
      for (i3 = s1; i3 <= e1; i3++) {
        const prevChild = c1[i3];
        if (patched >= toBePatched) {
          unmount(prevChild, parentComponent, parentSuspense, true);
          continue;
        }
        let newIndex;
        if (prevChild.key != null) {
          newIndex = keyToNewIndexMap.get(prevChild.key);
        } else {
          for (j2 = s22; j2 <= e22; j2++) {
            if (newIndexToOldIndexMap[j2 - s22] === 0 && isSameVNodeType$1(prevChild, c22[j2])) {
              newIndex = j2;
              break;
            }
          }
        }
        if (newIndex === void 0) {
          unmount(prevChild, parentComponent, parentSuspense, true);
        } else {
          newIndexToOldIndexMap[newIndex - s22] = i3 + 1;
          if (newIndex >= maxNewIndexSoFar) {
            maxNewIndexSoFar = newIndex;
          } else {
            moved = true;
          }
          patch(
            prevChild,
            c22[newIndex],
            container,
            null,
            parentComponent,
            parentSuspense,
            isSVG,
            slotScopeIds,
            optimized
          );
          patched++;
        }
      }
      const increasingNewIndexSequence = moved ? getSequence$1(newIndexToOldIndexMap) : EMPTY_ARR$1;
      j2 = increasingNewIndexSequence.length - 1;
      for (i3 = toBePatched - 1; i3 >= 0; i3--) {
        const nextIndex = s22 + i3;
        const nextChild = c22[nextIndex];
        const anchor = nextIndex + 1 < l2 ? c22[nextIndex + 1].el : parentAnchor;
        if (newIndexToOldIndexMap[i3] === 0) {
          patch(
            null,
            nextChild,
            container,
            anchor,
            parentComponent,
            parentSuspense,
            isSVG,
            slotScopeIds,
            optimized
          );
        } else if (moved) {
          if (j2 < 0 || i3 !== increasingNewIndexSequence[j2]) {
            move(nextChild, container, anchor, 2);
          } else {
            j2--;
          }
        }
      }
    }
  };
  const move = (vnode, container, anchor, moveType, parentSuspense = null) => {
    const { el: el3, type, transition, children, shapeFlag } = vnode;
    if (shapeFlag & 6) {
      move(vnode.component.subTree, container, anchor, moveType);
      return;
    }
    if (shapeFlag & 128) {
      vnode.suspense.move(container, anchor, moveType);
      return;
    }
    if (shapeFlag & 64) {
      type.move(vnode, container, anchor, internals);
      return;
    }
    if (type === Fragment$1) {
      hostInsert(el3, container, anchor);
      for (let i3 = 0; i3 < children.length; i3++) {
        move(children[i3], container, anchor, moveType);
      }
      hostInsert(vnode.anchor, container, anchor);
      return;
    }
    if (type === Static$1) {
      moveStaticNode(vnode, container, anchor);
      return;
    }
    const needTransition2 = moveType !== 2 && shapeFlag & 1 && transition;
    if (needTransition2) {
      if (moveType === 0) {
        transition.beforeEnter(el3);
        hostInsert(el3, container, anchor);
        queuePostRenderEffect$1(() => transition.enter(el3), parentSuspense);
      } else {
        const { leave, delayLeave, afterLeave } = transition;
        const remove22 = () => hostInsert(el3, container, anchor);
        const performLeave = () => {
          leave(el3, () => {
            remove22();
            afterLeave && afterLeave();
          });
        };
        if (delayLeave) {
          delayLeave(el3, remove22, performLeave);
        } else {
          performLeave();
        }
      }
    } else {
      hostInsert(el3, container, anchor);
    }
  };
  const unmount = (vnode, parentComponent, parentSuspense, doRemove = false, optimized = false) => {
    const {
      type,
      props,
      ref: ref2,
      children,
      dynamicChildren,
      shapeFlag,
      patchFlag,
      dirs
    } = vnode;
    if (ref2 != null) {
      setRef$1(ref2, null, parentSuspense, vnode, true);
    }
    if (shapeFlag & 256) {
      parentComponent.ctx.deactivate(vnode);
      return;
    }
    const shouldInvokeDirs = shapeFlag & 1 && dirs;
    const shouldInvokeVnodeHook = !isAsyncWrapper$1(vnode);
    let vnodeHook;
    if (shouldInvokeVnodeHook && (vnodeHook = props && props.onVnodeBeforeUnmount)) {
      invokeVNodeHook$1(vnodeHook, parentComponent, vnode);
    }
    if (shapeFlag & 6) {
      unmountComponent(vnode.component, parentSuspense, doRemove);
    } else {
      if (shapeFlag & 128) {
        vnode.suspense.unmount(parentSuspense, doRemove);
        return;
      }
      if (shouldInvokeDirs) {
        invokeDirectiveHook$1(vnode, null, parentComponent, "beforeUnmount");
      }
      if (shapeFlag & 64) {
        vnode.type.remove(
          vnode,
          parentComponent,
          parentSuspense,
          optimized,
          internals,
          doRemove
        );
      } else if (dynamicChildren && // #1153: fast path should not be taken for non-stable (v-for) fragments
      (type !== Fragment$1 || patchFlag > 0 && patchFlag & 64)) {
        unmountChildren(
          dynamicChildren,
          parentComponent,
          parentSuspense,
          false,
          true
        );
      } else if (type === Fragment$1 && patchFlag & (128 | 256) || !optimized && shapeFlag & 16) {
        unmountChildren(children, parentComponent, parentSuspense);
      }
      if (doRemove) {
        remove2(vnode);
      }
    }
    if (shouldInvokeVnodeHook && (vnodeHook = props && props.onVnodeUnmounted) || shouldInvokeDirs) {
      queuePostRenderEffect$1(() => {
        vnodeHook && invokeVNodeHook$1(vnodeHook, parentComponent, vnode);
        shouldInvokeDirs && invokeDirectiveHook$1(vnode, null, parentComponent, "unmounted");
      }, parentSuspense);
    }
  };
  const remove2 = (vnode) => {
    const { type, el: el3, anchor, transition } = vnode;
    if (type === Fragment$1) {
      if (vnode.patchFlag > 0 && vnode.patchFlag & 2048 && transition && !transition.persisted) {
        vnode.children.forEach((child) => {
          if (child.type === Comment$2) {
            hostRemove(child.el);
          } else {
            remove2(child);
          }
        });
      } else {
        removeFragment(el3, anchor);
      }
      return;
    }
    if (type === Static$1) {
      removeStaticNode(vnode);
      return;
    }
    const performRemove = () => {
      hostRemove(el3);
      if (transition && !transition.persisted && transition.afterLeave) {
        transition.afterLeave();
      }
    };
    if (vnode.shapeFlag & 1 && transition && !transition.persisted) {
      const { leave, delayLeave } = transition;
      const performLeave = () => leave(el3, performRemove);
      if (delayLeave) {
        delayLeave(vnode.el, performRemove, performLeave);
      } else {
        performLeave();
      }
    } else {
      performRemove();
    }
  };
  const removeFragment = (cur, end) => {
    let next;
    while (cur !== end) {
      next = hostNextSibling(cur);
      hostRemove(cur);
      cur = next;
    }
    hostRemove(end);
  };
  const unmountComponent = (instance, parentSuspense, doRemove) => {
    if (instance.type.__hmrId) {
      unregisterHMR$1(instance);
    }
    const { bum, scope, update, subTree, um: um2 } = instance;
    if (bum) {
      invokeArrayFns$1(bum);
    }
    scope.stop();
    if (update) {
      update.active = false;
      unmount(subTree, instance, parentSuspense, doRemove);
    }
    if (um2) {
      queuePostRenderEffect$1(um2, parentSuspense);
    }
    queuePostRenderEffect$1(() => {
      instance.isUnmounted = true;
    }, parentSuspense);
    if (parentSuspense && parentSuspense.pendingBranch && !parentSuspense.isUnmounted && instance.asyncDep && !instance.asyncResolved && instance.suspenseId === parentSuspense.pendingId) {
      parentSuspense.deps--;
      if (parentSuspense.deps === 0) {
        parentSuspense.resolve();
      }
    }
    {
      devtoolsComponentRemoved$1(instance);
    }
  };
  const unmountChildren = (children, parentComponent, parentSuspense, doRemove = false, optimized = false, start = 0) => {
    for (let i3 = start; i3 < children.length; i3++) {
      unmount(children[i3], parentComponent, parentSuspense, doRemove, optimized);
    }
  };
  const getNextHostNode = (vnode) => {
    if (vnode.shapeFlag & 6) {
      return getNextHostNode(vnode.component.subTree);
    }
    if (vnode.shapeFlag & 128) {
      return vnode.suspense.next();
    }
    return hostNextSibling(vnode.anchor || vnode.el);
  };
  const render2 = (vnode, container, isSVG) => {
    if (vnode == null) {
      if (container._vnode) {
        unmount(container._vnode, null, null, true);
      }
    } else {
      patch(container._vnode || null, vnode, container, null, null, null, isSVG);
    }
    flushPreFlushCbs$1();
    flushPostFlushCbs$1();
    container._vnode = vnode;
  };
  const internals = {
    p: patch,
    um: unmount,
    m: move,
    r: remove2,
    mt: mountComponent,
    mc: mountChildren,
    pc: patchChildren,
    pbc: patchBlockChildren,
    n: getNextHostNode,
    o: options
  };
  let hydrate2;
  let hydrateNode;
  if (createHydrationFns) {
    [hydrate2, hydrateNode] = createHydrationFns(
      internals
    );
  }
  return {
    render: render2,
    hydrate: hydrate2,
    createApp: createAppAPI$1(render2, hydrate2)
  };
}
function toggleRecurse$1({ effect: effect2, update }, allowed) {
  effect2.allowRecurse = update.allowRecurse = allowed;
}
function needTransition$1(parentSuspense, transition) {
  return (!parentSuspense || parentSuspense && !parentSuspense.pendingBranch) && transition && !transition.persisted;
}
function traverseStaticChildren$1(n1, n2, shallow = false) {
  const ch1 = n1.children;
  const ch2 = n2.children;
  if (isArray$4(ch1) && isArray$4(ch2)) {
    for (let i3 = 0; i3 < ch1.length; i3++) {
      const c1 = ch1[i3];
      let c22 = ch2[i3];
      if (c22.shapeFlag & 1 && !c22.dynamicChildren) {
        if (c22.patchFlag <= 0 || c22.patchFlag === 32) {
          c22 = ch2[i3] = cloneIfMounted$1(ch2[i3]);
          c22.el = c1.el;
        }
        if (!shallow)
          traverseStaticChildren$1(c1, c22);
      }
      if (c22.type === Text$1) {
        c22.el = c1.el;
      }
      if (c22.type === Comment$2 && !c22.el) {
        c22.el = c1.el;
      }
    }
  }
}
function getSequence$1(arr) {
  const p2 = arr.slice();
  const result = [0];
  let i3, j2, u3, v2, c3;
  const len = arr.length;
  for (i3 = 0; i3 < len; i3++) {
    const arrI = arr[i3];
    if (arrI !== 0) {
      j2 = result[result.length - 1];
      if (arr[j2] < arrI) {
        p2[i3] = j2;
        result.push(i3);
        continue;
      }
      u3 = 0;
      v2 = result.length - 1;
      while (u3 < v2) {
        c3 = u3 + v2 >> 1;
        if (arr[result[c3]] < arrI) {
          u3 = c3 + 1;
        } else {
          v2 = c3;
        }
      }
      if (arrI < arr[result[u3]]) {
        if (u3 > 0) {
          p2[i3] = result[u3 - 1];
        }
        result[u3] = i3;
      }
    }
  }
  u3 = result.length;
  v2 = result[u3 - 1];
  while (u3-- > 0) {
    result[u3] = v2;
    v2 = p2[v2];
  }
  return result;
}
const isTeleport$1 = (type) => type.__isTeleport;
const Fragment$1 = Symbol.for("v-fgt");
const Text$1 = Symbol.for("v-txt");
const Comment$2 = Symbol.for("v-cmt");
const Static$1 = Symbol.for("v-stc");
const blockStack$1 = [];
let currentBlock$1 = null;
function openBlock$1(disableTracking = false) {
  blockStack$1.push(currentBlock$1 = disableTracking ? null : []);
}
function closeBlock$1() {
  blockStack$1.pop();
  currentBlock$1 = blockStack$1[blockStack$1.length - 1] || null;
}
let isBlockTreeEnabled$1 = 1;
function setBlockTracking$1(value) {
  isBlockTreeEnabled$1 += value;
}
function setupBlock$1(vnode) {
  vnode.dynamicChildren = isBlockTreeEnabled$1 > 0 ? currentBlock$1 || EMPTY_ARR$1 : null;
  closeBlock$1();
  if (isBlockTreeEnabled$1 > 0 && currentBlock$1) {
    currentBlock$1.push(vnode);
  }
  return vnode;
}
function createElementBlock$1(type, props, children, patchFlag, dynamicProps, shapeFlag) {
  return setupBlock$1(
    createBaseVNode$1(
      type,
      props,
      children,
      patchFlag,
      dynamicProps,
      shapeFlag,
      true
      /* isBlock */
    )
  );
}
function createBlock$1(type, props, children, patchFlag, dynamicProps) {
  return setupBlock$1(
    createVNode$1(
      type,
      props,
      children,
      patchFlag,
      dynamicProps,
      true
      /* isBlock: prevent a block from tracking itself */
    )
  );
}
function isVNode$2(value) {
  return value ? value.__v_isVNode === true : false;
}
function isSameVNodeType$1(n1, n2) {
  if (n2.shapeFlag & 6 && hmrDirtyComponents$1.has(n2.type)) {
    n1.shapeFlag &= ~256;
    n2.shapeFlag &= ~512;
    return false;
  }
  return n1.type === n2.type && n1.key === n2.key;
}
const createVNodeWithArgsTransform$1 = (...args) => {
  return _createVNode$1(
    ...args
  );
};
const InternalObjectKey$1 = `__vInternal`;
const normalizeKey$1 = ({ key }) => key != null ? key : null;
const normalizeRef$1 = ({
  ref: ref2,
  ref_key,
  ref_for
}) => {
  if (typeof ref2 === "number") {
    ref2 = "" + ref2;
  }
  return ref2 != null ? isString$3(ref2) || isRef$1(ref2) || isFunction$3(ref2) ? { i: currentRenderingInstance$1, r: ref2, k: ref_key, f: !!ref_for } : ref2 : null;
};
function createBaseVNode$1(type, props = null, children = null, patchFlag = 0, dynamicProps = null, shapeFlag = type === Fragment$1 ? 0 : 1, isBlockNode = false, needFullChildrenNormalization = false) {
  const vnode = {
    __v_isVNode: true,
    __v_skip: true,
    type,
    props,
    key: props && normalizeKey$1(props),
    ref: props && normalizeRef$1(props),
    scopeId: currentScopeId$1,
    slotScopeIds: null,
    children,
    component: null,
    suspense: null,
    ssContent: null,
    ssFallback: null,
    dirs: null,
    transition: null,
    el: null,
    anchor: null,
    target: null,
    targetAnchor: null,
    staticCount: 0,
    shapeFlag,
    patchFlag,
    dynamicProps,
    dynamicChildren: null,
    appContext: null,
    ctx: currentRenderingInstance$1
  };
  if (needFullChildrenNormalization) {
    normalizeChildren$1(vnode, children);
    if (shapeFlag & 128) {
      type.normalize(vnode);
    }
  } else if (children) {
    vnode.shapeFlag |= isString$3(children) ? 8 : 16;
  }
  if (vnode.key !== vnode.key) {
    warn$5(`VNode created with invalid key (NaN). VNode type:`, vnode.type);
  }
  if (isBlockTreeEnabled$1 > 0 && // avoid a block node from tracking itself
  !isBlockNode && // has current parent block
  currentBlock$1 && // presence of a patch flag indicates this node needs patching on updates.
  // component nodes also should always be patched, because even if the
  // component doesn't need to update, it needs to persist the instance on to
  // the next vnode so that it can be properly unmounted later.
  (vnode.patchFlag > 0 || shapeFlag & 6) && // the EVENTS flag is only for hydration and if it is the only flag, the
  // vnode should not be considered dynamic due to handler caching.
  vnode.patchFlag !== 32) {
    currentBlock$1.push(vnode);
  }
  return vnode;
}
const createVNode$1 = createVNodeWithArgsTransform$1;
function _createVNode$1(type, props = null, children = null, patchFlag = 0, dynamicProps = null, isBlockNode = false) {
  if (!type || type === NULL_DYNAMIC_COMPONENT$1) {
    if (!type) {
      warn$5(`Invalid vnode type when creating vnode: ${type}.`);
    }
    type = Comment$2;
  }
  if (isVNode$2(type)) {
    const cloned = cloneVNode$1(
      type,
      props,
      true
      /* mergeRef: true */
    );
    if (children) {
      normalizeChildren$1(cloned, children);
    }
    if (isBlockTreeEnabled$1 > 0 && !isBlockNode && currentBlock$1) {
      if (cloned.shapeFlag & 6) {
        currentBlock$1[currentBlock$1.indexOf(type)] = cloned;
      } else {
        currentBlock$1.push(cloned);
      }
    }
    cloned.patchFlag |= -2;
    return cloned;
  }
  if (isClassComponent$1(type)) {
    type = type.__vccOpts;
  }
  if (props) {
    props = guardReactiveProps$1(props);
    let { class: klass, style } = props;
    if (klass && !isString$3(klass)) {
      props.class = normalizeClass$1(klass);
    }
    if (isObject$4(style)) {
      if (isProxy$1(style) && !isArray$4(style)) {
        style = extend$1({}, style);
      }
      props.style = normalizeStyle$1(style);
    }
  }
  const shapeFlag = isString$3(type) ? 1 : isSuspense$1(type) ? 128 : isTeleport$1(type) ? 64 : isObject$4(type) ? 4 : isFunction$3(type) ? 2 : 0;
  if (shapeFlag & 4 && isProxy$1(type)) {
    type = toRaw$1(type);
    warn$5(
      `Vue received a Component which was made a reactive object. This can lead to unnecessary performance overhead, and should be avoided by marking the component with \`markRaw\` or using \`shallowRef\` instead of \`ref\`.`,
      `
Component that was made reactive: `,
      type
    );
  }
  return createBaseVNode$1(
    type,
    props,
    children,
    patchFlag,
    dynamicProps,
    shapeFlag,
    isBlockNode,
    true
  );
}
function guardReactiveProps$1(props) {
  if (!props)
    return null;
  return isProxy$1(props) || InternalObjectKey$1 in props ? extend$1({}, props) : props;
}
function cloneVNode$1(vnode, extraProps, mergeRef = false) {
  const { props, ref: ref2, patchFlag, children } = vnode;
  const mergedProps = extraProps ? mergeProps$1(props || {}, extraProps) : props;
  const cloned = {
    __v_isVNode: true,
    __v_skip: true,
    type: vnode.type,
    props: mergedProps,
    key: mergedProps && normalizeKey$1(mergedProps),
    ref: extraProps && extraProps.ref ? (
      // #2078 in the case of <component :is="vnode" ref="extra"/>
      // if the vnode itself already has a ref, cloneVNode will need to merge
      // the refs so the single vnode can be set on multiple refs
      mergeRef && ref2 ? isArray$4(ref2) ? ref2.concat(normalizeRef$1(extraProps)) : [ref2, normalizeRef$1(extraProps)] : normalizeRef$1(extraProps)
    ) : ref2,
    scopeId: vnode.scopeId,
    slotScopeIds: vnode.slotScopeIds,
    children: patchFlag === -1 && isArray$4(children) ? children.map(deepCloneVNode$1) : children,
    target: vnode.target,
    targetAnchor: vnode.targetAnchor,
    staticCount: vnode.staticCount,
    shapeFlag: vnode.shapeFlag,
    // if the vnode is cloned with extra props, we can no longer assume its
    // existing patch flag to be reliable and need to add the FULL_PROPS flag.
    // note: preserve flag for fragments since they use the flag for children
    // fast paths only.
    patchFlag: extraProps && vnode.type !== Fragment$1 ? patchFlag === -1 ? 16 : patchFlag | 16 : patchFlag,
    dynamicProps: vnode.dynamicProps,
    dynamicChildren: vnode.dynamicChildren,
    appContext: vnode.appContext,
    dirs: vnode.dirs,
    transition: vnode.transition,
    // These should technically only be non-null on mounted VNodes. However,
    // they *should* be copied for kept-alive vnodes. So we just always copy
    // them since them being non-null during a mount doesn't affect the logic as
    // they will simply be overwritten.
    component: vnode.component,
    suspense: vnode.suspense,
    ssContent: vnode.ssContent && cloneVNode$1(vnode.ssContent),
    ssFallback: vnode.ssFallback && cloneVNode$1(vnode.ssFallback),
    el: vnode.el,
    anchor: vnode.anchor,
    ctx: vnode.ctx,
    ce: vnode.ce
  };
  return cloned;
}
function deepCloneVNode$1(vnode) {
  const cloned = cloneVNode$1(vnode);
  if (isArray$4(vnode.children)) {
    cloned.children = vnode.children.map(deepCloneVNode$1);
  }
  return cloned;
}
function createTextVNode$1(text = " ", flag = 0) {
  return createVNode$1(Text$1, null, text, flag);
}
function createStaticVNode(content, numberOfNodes) {
  const vnode = createVNode$1(Static$1, null, content);
  vnode.staticCount = numberOfNodes;
  return vnode;
}
function createCommentVNode$1(text = "", asBlock = false) {
  return asBlock ? (openBlock$1(), createBlock$1(Comment$2, null, text)) : createVNode$1(Comment$2, null, text);
}
function normalizeVNode$1(child) {
  if (child == null || typeof child === "boolean") {
    return createVNode$1(Comment$2);
  } else if (isArray$4(child)) {
    return createVNode$1(
      Fragment$1,
      null,
      // #3666, avoid reference pollution when reusing vnode
      child.slice()
    );
  } else if (typeof child === "object") {
    return cloneIfMounted$1(child);
  } else {
    return createVNode$1(Text$1, null, String(child));
  }
}
function cloneIfMounted$1(child) {
  return child.el === null && child.patchFlag !== -1 || child.memo ? child : cloneVNode$1(child);
}
function normalizeChildren$1(vnode, children) {
  let type = 0;
  const { shapeFlag } = vnode;
  if (children == null) {
    children = null;
  } else if (isArray$4(children)) {
    type = 16;
  } else if (typeof children === "object") {
    if (shapeFlag & (1 | 64)) {
      const slot = children.default;
      if (slot) {
        slot._c && (slot._d = false);
        normalizeChildren$1(vnode, slot());
        slot._c && (slot._d = true);
      }
      return;
    } else {
      type = 32;
      const slotFlag = children._;
      if (!slotFlag && !(InternalObjectKey$1 in children)) {
        children._ctx = currentRenderingInstance$1;
      } else if (slotFlag === 3 && currentRenderingInstance$1) {
        if (currentRenderingInstance$1.slots._ === 1) {
          children._ = 1;
        } else {
          children._ = 2;
          vnode.patchFlag |= 1024;
        }
      }
    }
  } else if (isFunction$3(children)) {
    children = { default: children, _ctx: currentRenderingInstance$1 };
    type = 32;
  } else {
    children = String(children);
    if (shapeFlag & 64) {
      type = 16;
      children = [createTextVNode$1(children)];
    } else {
      type = 8;
    }
  }
  vnode.children = children;
  vnode.shapeFlag |= type;
}
function mergeProps$1(...args) {
  const ret = {};
  for (let i3 = 0; i3 < args.length; i3++) {
    const toMerge = args[i3];
    for (const key in toMerge) {
      if (key === "class") {
        if (ret.class !== toMerge.class) {
          ret.class = normalizeClass$1([ret.class, toMerge.class]);
        }
      } else if (key === "style") {
        ret.style = normalizeStyle$1([ret.style, toMerge.style]);
      } else if (isOn$1(key)) {
        const existing = ret[key];
        const incoming = toMerge[key];
        if (incoming && existing !== incoming && !(isArray$4(existing) && existing.includes(incoming))) {
          ret[key] = existing ? [].concat(existing, incoming) : incoming;
        }
      } else if (key !== "") {
        ret[key] = toMerge[key];
      }
    }
  }
  return ret;
}
function invokeVNodeHook$1(hook, instance, vnode, prevVNode = null) {
  callWithAsyncErrorHandling$1(hook, instance, 7, [
    vnode,
    prevVNode
  ]);
}
const emptyAppContext$1 = createAppContext$1();
let uid$3 = 0;
function createComponentInstance$1(vnode, parent, suspense) {
  const type = vnode.type;
  const appContext = (parent ? parent.appContext : vnode.appContext) || emptyAppContext$1;
  const instance = {
    uid: uid$3++,
    vnode,
    type,
    parent,
    appContext,
    root: null,
    // to be immediately set
    next: null,
    subTree: null,
    // will be set synchronously right after creation
    effect: null,
    update: null,
    // will be set synchronously right after creation
    scope: new EffectScope$1(
      true
      /* detached */
    ),
    render: null,
    proxy: null,
    exposed: null,
    exposeProxy: null,
    withProxy: null,
    provides: parent ? parent.provides : Object.create(appContext.provides),
    accessCache: null,
    renderCache: [],
    // local resolved assets
    components: null,
    directives: null,
    // resolved props and emits options
    propsOptions: normalizePropsOptions$1(type, appContext),
    emitsOptions: normalizeEmitsOptions$1(type, appContext),
    // emit
    emit: null,
    // to be set immediately
    emitted: null,
    // props default value
    propsDefaults: EMPTY_OBJ$1,
    // inheritAttrs
    inheritAttrs: type.inheritAttrs,
    // state
    ctx: EMPTY_OBJ$1,
    data: EMPTY_OBJ$1,
    props: EMPTY_OBJ$1,
    attrs: EMPTY_OBJ$1,
    slots: EMPTY_OBJ$1,
    refs: EMPTY_OBJ$1,
    setupState: EMPTY_OBJ$1,
    setupContext: null,
    attrsProxy: null,
    slotsProxy: null,
    // suspense related
    suspense,
    suspenseId: suspense ? suspense.pendingId : 0,
    asyncDep: null,
    asyncResolved: false,
    // lifecycle hooks
    // not using enums here because it results in computed properties
    isMounted: false,
    isUnmounted: false,
    isDeactivated: false,
    bc: null,
    c: null,
    bm: null,
    m: null,
    bu: null,
    u: null,
    um: null,
    bum: null,
    da: null,
    a: null,
    rtg: null,
    rtc: null,
    ec: null,
    sp: null
  };
  {
    instance.ctx = createDevRenderContext$1(instance);
  }
  instance.root = parent ? parent.root : instance;
  instance.emit = emit$2.bind(null, instance);
  if (vnode.ce) {
    vnode.ce(instance);
  }
  return instance;
}
let currentInstance$1 = null;
const getCurrentInstance$1 = () => currentInstance$1 || currentRenderingInstance$1;
let internalSetCurrentInstance$1;
let globalCurrentInstanceSetters;
let settersKey = "__VUE_INSTANCE_SETTERS__";
{
  if (!(globalCurrentInstanceSetters = getGlobalThis$2()[settersKey])) {
    globalCurrentInstanceSetters = getGlobalThis$2()[settersKey] = [];
  }
  globalCurrentInstanceSetters.push((i3) => currentInstance$1 = i3);
  internalSetCurrentInstance$1 = (instance) => {
    if (globalCurrentInstanceSetters.length > 1) {
      globalCurrentInstanceSetters.forEach((s5) => s5(instance));
    } else {
      globalCurrentInstanceSetters[0](instance);
    }
  };
}
const setCurrentInstance$1 = (instance) => {
  internalSetCurrentInstance$1(instance);
  instance.scope.on();
};
const unsetCurrentInstance$1 = () => {
  currentInstance$1 && currentInstance$1.scope.off();
  internalSetCurrentInstance$1(null);
};
const isBuiltInTag$1 = /* @__PURE__ */ makeMap$1("slot,component");
function validateComponentName$1(name, config2) {
  const appIsNativeTag = config2.isNativeTag || NO$1;
  if (isBuiltInTag$1(name) || appIsNativeTag(name)) {
    warn$5(
      "Do not use built-in or reserved HTML elements as component id: " + name
    );
  }
}
function isStatefulComponent$1(instance) {
  return instance.vnode.shapeFlag & 4;
}
let isInSSRComponentSetup$1 = false;
function setupComponent$1(instance, isSSR = false) {
  isInSSRComponentSetup$1 = isSSR;
  const { props, children } = instance.vnode;
  const isStateful = isStatefulComponent$1(instance);
  initProps$1(instance, props, isStateful, isSSR);
  initSlots$1(instance, children);
  const setupResult = isStateful ? setupStatefulComponent$1(instance, isSSR) : void 0;
  isInSSRComponentSetup$1 = false;
  return setupResult;
}
function setupStatefulComponent$1(instance, isSSR) {
  var _a2;
  const Component = instance.type;
  {
    if (Component.name) {
      validateComponentName$1(Component.name, instance.appContext.config);
    }
    if (Component.components) {
      const names = Object.keys(Component.components);
      for (let i3 = 0; i3 < names.length; i3++) {
        validateComponentName$1(names[i3], instance.appContext.config);
      }
    }
    if (Component.directives) {
      const names = Object.keys(Component.directives);
      for (let i3 = 0; i3 < names.length; i3++) {
        validateDirectiveName$1(names[i3]);
      }
    }
    if (Component.compilerOptions && isRuntimeOnly$1()) {
      warn$5(
        `"compilerOptions" is only supported when using a build of Vue that includes the runtime compiler. Since you are using a runtime-only build, the options should be passed via your build tool config instead.`
      );
    }
  }
  instance.accessCache = /* @__PURE__ */ Object.create(null);
  instance.proxy = markRaw$1(new Proxy(instance.ctx, PublicInstanceProxyHandlers$1));
  {
    exposePropsOnRenderContext$1(instance);
  }
  const { setup } = Component;
  if (setup) {
    const setupContext = instance.setupContext = setup.length > 1 ? createSetupContext$1(instance) : null;
    setCurrentInstance$1(instance);
    pauseTracking$1();
    const setupResult = callWithErrorHandling$1(
      setup,
      instance,
      0,
      [shallowReadonly$1(instance.props), setupContext]
    );
    resetTracking$1();
    unsetCurrentInstance$1();
    if (isPromise$2(setupResult)) {
      setupResult.then(unsetCurrentInstance$1, unsetCurrentInstance$1);
      if (isSSR) {
        return setupResult.then((resolvedResult) => {
          handleSetupResult$1(instance, resolvedResult, isSSR);
        }).catch((e3) => {
          handleError$1(e3, instance, 0);
        });
      } else {
        instance.asyncDep = setupResult;
        if (!instance.suspense) {
          const name = (_a2 = Component.name) != null ? _a2 : "Anonymous";
          warn$5(
            `Component <${name}>: setup function returned a promise, but no <Suspense> boundary was found in the parent component tree. A component with async setup() must be nested in a <Suspense> in order to be rendered.`
          );
        }
      }
    } else {
      handleSetupResult$1(instance, setupResult, isSSR);
    }
  } else {
    finishComponentSetup$1(instance, isSSR);
  }
}
function handleSetupResult$1(instance, setupResult, isSSR) {
  if (isFunction$3(setupResult)) {
    if (instance.type.__ssrInlineRender) {
      instance.ssrRender = setupResult;
    } else {
      instance.render = setupResult;
    }
  } else if (isObject$4(setupResult)) {
    if (isVNode$2(setupResult)) {
      warn$5(
        `setup() should not return VNodes directly - return a render function instead.`
      );
    }
    {
      instance.devtoolsRawSetupState = setupResult;
    }
    instance.setupState = proxyRefs$1(setupResult);
    {
      exposeSetupStateOnRenderContext$1(instance);
    }
  } else if (setupResult !== void 0) {
    warn$5(
      `setup() should return an object. Received: ${setupResult === null ? "null" : typeof setupResult}`
    );
  }
  finishComponentSetup$1(instance, isSSR);
}
let compile$1;
const isRuntimeOnly$1 = () => !compile$1;
function finishComponentSetup$1(instance, isSSR, skipOptions) {
  const Component = instance.type;
  if (!instance.render) {
    if (!isSSR && compile$1 && !Component.render) {
      const template = Component.template || resolveMergedOptions$1(instance).template;
      if (template) {
        {
          startMeasure$1(instance, `compile`);
        }
        const { isCustomElement, compilerOptions } = instance.appContext.config;
        const { delimiters, compilerOptions: componentCompilerOptions } = Component;
        const finalCompilerOptions = extend$1(
          extend$1(
            {
              isCustomElement,
              delimiters
            },
            compilerOptions
          ),
          componentCompilerOptions
        );
        Component.render = compile$1(template, finalCompilerOptions);
        {
          endMeasure$1(instance, `compile`);
        }
      }
    }
    instance.render = Component.render || NOOP$1;
  }
  {
    setCurrentInstance$1(instance);
    pauseTracking$1();
    try {
      applyOptions$1(instance);
    } finally {
      resetTracking$1();
      unsetCurrentInstance$1();
    }
  }
  if (!Component.render && instance.render === NOOP$1 && !isSSR) {
    if (Component.template) {
      warn$5(
        `Component provided template option but runtime compilation is not supported in this build of Vue. Configure your bundler to alias "vue" to "vue/dist/vue.esm-bundler.js".`
        /* should not happen */
      );
    } else {
      warn$5(`Component is missing template or render function.`);
    }
  }
}
function getAttrsProxy$1(instance) {
  return instance.attrsProxy || (instance.attrsProxy = new Proxy(
    instance.attrs,
    {
      get(target, key) {
        markAttrsAccessed$1();
        track$1(instance, "get", "$attrs");
        return target[key];
      },
      set() {
        warn$5(`setupContext.attrs is readonly.`);
        return false;
      },
      deleteProperty() {
        warn$5(`setupContext.attrs is readonly.`);
        return false;
      }
    }
  ));
}
function getSlotsProxy$1(instance) {
  return instance.slotsProxy || (instance.slotsProxy = new Proxy(instance.slots, {
    get(target, key) {
      track$1(instance, "get", "$slots");
      return target[key];
    }
  }));
}
function createSetupContext$1(instance) {
  const expose = (exposed) => {
    {
      if (instance.exposed) {
        warn$5(`expose() should be called only once per setup().`);
      }
      if (exposed != null) {
        let exposedType = typeof exposed;
        if (exposedType === "object") {
          if (isArray$4(exposed)) {
            exposedType = "array";
          } else if (isRef$1(exposed)) {
            exposedType = "ref";
          }
        }
        if (exposedType !== "object") {
          warn$5(
            `expose() should be passed a plain object, received ${exposedType}.`
          );
        }
      }
    }
    instance.exposed = exposed || {};
  };
  {
    return Object.freeze({
      get attrs() {
        return getAttrsProxy$1(instance);
      },
      get slots() {
        return getSlotsProxy$1(instance);
      },
      get emit() {
        return (event, ...args) => instance.emit(event, ...args);
      },
      expose
    });
  }
}
function getExposeProxy$1(instance) {
  if (instance.exposed) {
    return instance.exposeProxy || (instance.exposeProxy = new Proxy(proxyRefs$1(markRaw$1(instance.exposed)), {
      get(target, key) {
        if (key in target) {
          return target[key];
        } else if (key in publicPropertiesMap$1) {
          return publicPropertiesMap$1[key](instance);
        }
      },
      has(target, key) {
        return key in target || key in publicPropertiesMap$1;
      }
    }));
  }
}
const classifyRE$1 = /(?:^|[-_])(\w)/g;
const classify$1 = (str) => str.replace(classifyRE$1, (c3) => c3.toUpperCase()).replace(/[-_]/g, "");
function getComponentName$1(Component, includeInferred = true) {
  return isFunction$3(Component) ? Component.displayName || Component.name : Component.name || includeInferred && Component.__name;
}
function formatComponentName$1(instance, Component, isRoot = false) {
  let name = getComponentName$1(Component);
  if (!name && Component.__file) {
    const match2 = Component.__file.match(/([^/\\]+)\.\w+$/);
    if (match2) {
      name = match2[1];
    }
  }
  if (!name && instance && instance.parent) {
    const inferFromRegistry = (registry) => {
      for (const key in registry) {
        if (registry[key] === Component) {
          return key;
        }
      }
    };
    name = inferFromRegistry(
      instance.components || instance.parent.type.components
    ) || inferFromRegistry(instance.appContext.components);
  }
  return name ? classify$1(name) : isRoot ? `App` : `Anonymous`;
}
function isClassComponent$1(value) {
  return isFunction$3(value) && "__vccOpts" in value;
}
const computed$2 = (getterOrOptions, debugOptions) => {
  return computed$1$1(getterOrOptions, debugOptions, isInSSRComponentSetup$1);
};
function h$4(type, propsOrChildren, children) {
  const l2 = arguments.length;
  if (l2 === 2) {
    if (isObject$4(propsOrChildren) && !isArray$4(propsOrChildren)) {
      if (isVNode$2(propsOrChildren)) {
        return createVNode$1(type, null, [propsOrChildren]);
      }
      return createVNode$1(type, propsOrChildren);
    } else {
      return createVNode$1(type, null, propsOrChildren);
    }
  } else {
    if (l2 > 3) {
      children = Array.prototype.slice.call(arguments, 2);
    } else if (l2 === 3 && isVNode$2(children)) {
      children = [children];
    }
    return createVNode$1(type, propsOrChildren, children);
  }
}
const ssrContextKey$1 = Symbol.for("v-scx");
const useSSRContext$1 = () => {
  {
    const ctx = inject$1(ssrContextKey$1);
    if (!ctx) {
      warn$5(
        `Server rendering context not provided. Make sure to only call useSSRContext() conditionally in the server build.`
      );
    }
    return ctx;
  }
};
function isShallow$2(value) {
  return !!(value && value["__v_isShallow"]);
}
function initCustomFormatter$1() {
  if (typeof window === "undefined") {
    return;
  }
  const vueStyle = { style: "color:#3ba776" };
  const numberStyle = { style: "color:#0b1bc9" };
  const stringStyle = { style: "color:#b62e24" };
  const keywordStyle = { style: "color:#9d288c" };
  const formatter = {
    header(obj) {
      if (!isObject$4(obj)) {
        return null;
      }
      if (obj.__isVue) {
        return ["div", vueStyle, `VueInstance`];
      } else if (isRef$1(obj)) {
        return [
          "div",
          {},
          ["span", vueStyle, genRefFlag(obj)],
          "<",
          formatValue(obj.value),
          `>`
        ];
      } else if (isReactive$1(obj)) {
        return [
          "div",
          {},
          ["span", vueStyle, isShallow$2(obj) ? "ShallowReactive" : "Reactive"],
          "<",
          formatValue(obj),
          `>${isReadonly$1(obj) ? ` (readonly)` : ``}`
        ];
      } else if (isReadonly$1(obj)) {
        return [
          "div",
          {},
          ["span", vueStyle, isShallow$2(obj) ? "ShallowReadonly" : "Readonly"],
          "<",
          formatValue(obj),
          ">"
        ];
      }
      return null;
    },
    hasBody(obj) {
      return obj && obj.__isVue;
    },
    body(obj) {
      if (obj && obj.__isVue) {
        return [
          "div",
          {},
          ...formatInstance(obj.$)
        ];
      }
    }
  };
  function formatInstance(instance) {
    const blocks = [];
    if (instance.type.props && instance.props) {
      blocks.push(createInstanceBlock("props", toRaw$1(instance.props)));
    }
    if (instance.setupState !== EMPTY_OBJ$1) {
      blocks.push(createInstanceBlock("setup", instance.setupState));
    }
    if (instance.data !== EMPTY_OBJ$1) {
      blocks.push(createInstanceBlock("data", toRaw$1(instance.data)));
    }
    const computed2 = extractKeys(instance, "computed");
    if (computed2) {
      blocks.push(createInstanceBlock("computed", computed2));
    }
    const injected = extractKeys(instance, "inject");
    if (injected) {
      blocks.push(createInstanceBlock("injected", injected));
    }
    blocks.push([
      "div",
      {},
      [
        "span",
        {
          style: keywordStyle.style + ";opacity:0.66"
        },
        "$ (internal): "
      ],
      ["object", { object: instance }]
    ]);
    return blocks;
  }
  function createInstanceBlock(type, target) {
    target = extend$1({}, target);
    if (!Object.keys(target).length) {
      return ["span", {}];
    }
    return [
      "div",
      { style: "line-height:1.25em;margin-bottom:0.6em" },
      [
        "div",
        {
          style: "color:#476582"
        },
        type
      ],
      [
        "div",
        {
          style: "padding-left:1.25em"
        },
        ...Object.keys(target).map((key) => {
          return [
            "div",
            {},
            ["span", keywordStyle, key + ": "],
            formatValue(target[key], false)
          ];
        })
      ]
    ];
  }
  function formatValue(v2, asRaw = true) {
    if (typeof v2 === "number") {
      return ["span", numberStyle, v2];
    } else if (typeof v2 === "string") {
      return ["span", stringStyle, JSON.stringify(v2)];
    } else if (typeof v2 === "boolean") {
      return ["span", keywordStyle, v2];
    } else if (isObject$4(v2)) {
      return ["object", { object: asRaw ? toRaw$1(v2) : v2 }];
    } else {
      return ["span", stringStyle, String(v2)];
    }
  }
  function extractKeys(instance, type) {
    const Comp = instance.type;
    if (isFunction$3(Comp)) {
      return;
    }
    const extracted = {};
    for (const key in instance.ctx) {
      if (isKeyOfType(Comp, key, type)) {
        extracted[key] = instance.ctx[key];
      }
    }
    return extracted;
  }
  function isKeyOfType(Comp, key, type) {
    const opts = Comp[type];
    if (isArray$4(opts) && opts.includes(key) || isObject$4(opts) && key in opts) {
      return true;
    }
    if (Comp.extends && isKeyOfType(Comp.extends, key, type)) {
      return true;
    }
    if (Comp.mixins && Comp.mixins.some((m4) => isKeyOfType(m4, key, type))) {
      return true;
    }
  }
  function genRefFlag(v2) {
    if (isShallow$2(v2)) {
      return `ShallowRef`;
    }
    if (v2.effect) {
      return `ComputedRef`;
    }
    return `Ref`;
  }
  if (window.devtoolsFormatters) {
    window.devtoolsFormatters.push(formatter);
  } else {
    window.devtoolsFormatters = [formatter];
  }
}
const version$2 = "3.3.8";
const svgNS$1 = "http://www.w3.org/2000/svg";
const doc$1 = typeof document !== "undefined" ? document : null;
const templateContainer$1 = doc$1 && /* @__PURE__ */ doc$1.createElement("template");
const nodeOps$1 = {
  insert: (child, parent, anchor) => {
    parent.insertBefore(child, anchor || null);
  },
  remove: (child) => {
    const parent = child.parentNode;
    if (parent) {
      parent.removeChild(child);
    }
  },
  createElement: (tag, isSVG, is2, props) => {
    const el3 = isSVG ? doc$1.createElementNS(svgNS$1, tag) : doc$1.createElement(tag, is2 ? { is: is2 } : void 0);
    if (tag === "select" && props && props.multiple != null) {
      el3.setAttribute("multiple", props.multiple);
    }
    return el3;
  },
  createText: (text) => doc$1.createTextNode(text),
  createComment: (text) => doc$1.createComment(text),
  setText: (node, text) => {
    node.nodeValue = text;
  },
  setElementText: (el3, text) => {
    el3.textContent = text;
  },
  parentNode: (node) => node.parentNode,
  nextSibling: (node) => node.nextSibling,
  querySelector: (selector) => doc$1.querySelector(selector),
  setScopeId(el3, id2) {
    el3.setAttribute(id2, "");
  },
  // __UNSAFE__
  // Reason: innerHTML.
  // Static content here can only come from compiled templates.
  // As long as the user only uses trusted templates, this is safe.
  insertStaticContent(content, parent, anchor, isSVG, start, end) {
    const before = anchor ? anchor.previousSibling : parent.lastChild;
    if (start && (start === end || start.nextSibling)) {
      while (true) {
        parent.insertBefore(start.cloneNode(true), anchor);
        if (start === end || !(start = start.nextSibling))
          break;
      }
    } else {
      templateContainer$1.innerHTML = isSVG ? `<svg>${content}</svg>` : content;
      const template = templateContainer$1.content;
      if (isSVG) {
        const wrapper = template.firstChild;
        while (wrapper.firstChild) {
          template.appendChild(wrapper.firstChild);
        }
        template.removeChild(wrapper);
      }
      parent.insertBefore(template, anchor);
    }
    return [
      // first
      before ? before.nextSibling : parent.firstChild,
      // last
      anchor ? anchor.previousSibling : parent.lastChild
    ];
  }
};
const TRANSITION$1 = "transition";
const ANIMATION$1 = "animation";
const vtcKey$1 = Symbol("_vtc");
const Transition$1 = (props, { slots }) => h$4(BaseTransition$1, resolveTransitionProps$1(props), slots);
Transition$1.displayName = "Transition";
const DOMTransitionPropsValidators$1 = {
  name: String,
  type: String,
  css: {
    type: Boolean,
    default: true
  },
  duration: [String, Number, Object],
  enterFromClass: String,
  enterActiveClass: String,
  enterToClass: String,
  appearFromClass: String,
  appearActiveClass: String,
  appearToClass: String,
  leaveFromClass: String,
  leaveActiveClass: String,
  leaveToClass: String
};
const TransitionPropsValidators = Transition$1.props = /* @__PURE__ */ extend$1(
  {},
  BaseTransitionPropsValidators$1,
  DOMTransitionPropsValidators$1
);
const callHook$2 = (hook, args = []) => {
  if (isArray$4(hook)) {
    hook.forEach((h22) => h22(...args));
  } else if (hook) {
    hook(...args);
  }
};
const hasExplicitCallback$1 = (hook) => {
  return hook ? isArray$4(hook) ? hook.some((h22) => h22.length > 1) : hook.length > 1 : false;
};
function resolveTransitionProps$1(rawProps) {
  const baseProps = {};
  for (const key in rawProps) {
    if (!(key in DOMTransitionPropsValidators$1)) {
      baseProps[key] = rawProps[key];
    }
  }
  if (rawProps.css === false) {
    return baseProps;
  }
  const {
    name = "v",
    type,
    duration,
    enterFromClass = `${name}-enter-from`,
    enterActiveClass = `${name}-enter-active`,
    enterToClass = `${name}-enter-to`,
    appearFromClass = enterFromClass,
    appearActiveClass = enterActiveClass,
    appearToClass = enterToClass,
    leaveFromClass = `${name}-leave-from`,
    leaveActiveClass = `${name}-leave-active`,
    leaveToClass = `${name}-leave-to`
  } = rawProps;
  const durations = normalizeDuration$1(duration);
  const enterDuration = durations && durations[0];
  const leaveDuration = durations && durations[1];
  const {
    onBeforeEnter,
    onEnter,
    onEnterCancelled,
    onLeave,
    onLeaveCancelled,
    onBeforeAppear = onBeforeEnter,
    onAppear = onEnter,
    onAppearCancelled = onEnterCancelled
  } = baseProps;
  const finishEnter = (el3, isAppear, done) => {
    removeTransitionClass$1(el3, isAppear ? appearToClass : enterToClass);
    removeTransitionClass$1(el3, isAppear ? appearActiveClass : enterActiveClass);
    done && done();
  };
  const finishLeave = (el3, done) => {
    el3._isLeaving = false;
    removeTransitionClass$1(el3, leaveFromClass);
    removeTransitionClass$1(el3, leaveToClass);
    removeTransitionClass$1(el3, leaveActiveClass);
    done && done();
  };
  const makeEnterHook = (isAppear) => {
    return (el3, done) => {
      const hook = isAppear ? onAppear : onEnter;
      const resolve2 = () => finishEnter(el3, isAppear, done);
      callHook$2(hook, [el3, resolve2]);
      nextFrame$2(() => {
        removeTransitionClass$1(el3, isAppear ? appearFromClass : enterFromClass);
        addTransitionClass$1(el3, isAppear ? appearToClass : enterToClass);
        if (!hasExplicitCallback$1(hook)) {
          whenTransitionEnds$1(el3, type, enterDuration, resolve2);
        }
      });
    };
  };
  return extend$1(baseProps, {
    onBeforeEnter(el3) {
      callHook$2(onBeforeEnter, [el3]);
      addTransitionClass$1(el3, enterFromClass);
      addTransitionClass$1(el3, enterActiveClass);
    },
    onBeforeAppear(el3) {
      callHook$2(onBeforeAppear, [el3]);
      addTransitionClass$1(el3, appearFromClass);
      addTransitionClass$1(el3, appearActiveClass);
    },
    onEnter: makeEnterHook(false),
    onAppear: makeEnterHook(true),
    onLeave(el3, done) {
      el3._isLeaving = true;
      const resolve2 = () => finishLeave(el3, done);
      addTransitionClass$1(el3, leaveFromClass);
      forceReflow$1();
      addTransitionClass$1(el3, leaveActiveClass);
      nextFrame$2(() => {
        if (!el3._isLeaving) {
          return;
        }
        removeTransitionClass$1(el3, leaveFromClass);
        addTransitionClass$1(el3, leaveToClass);
        if (!hasExplicitCallback$1(onLeave)) {
          whenTransitionEnds$1(el3, type, leaveDuration, resolve2);
        }
      });
      callHook$2(onLeave, [el3, resolve2]);
    },
    onEnterCancelled(el3) {
      finishEnter(el3, false);
      callHook$2(onEnterCancelled, [el3]);
    },
    onAppearCancelled(el3) {
      finishEnter(el3, true);
      callHook$2(onAppearCancelled, [el3]);
    },
    onLeaveCancelled(el3) {
      finishLeave(el3);
      callHook$2(onLeaveCancelled, [el3]);
    }
  });
}
function normalizeDuration$1(duration) {
  if (duration == null) {
    return null;
  } else if (isObject$4(duration)) {
    return [NumberOf$1(duration.enter), NumberOf$1(duration.leave)];
  } else {
    const n2 = NumberOf$1(duration);
    return [n2, n2];
  }
}
function NumberOf$1(val) {
  const res = toNumber$1(val);
  {
    assertNumber$1(res, "<transition> explicit duration");
  }
  return res;
}
function addTransitionClass$1(el3, cls) {
  cls.split(/\s+/).forEach((c3) => c3 && el3.classList.add(c3));
  (el3[vtcKey$1] || (el3[vtcKey$1] = /* @__PURE__ */ new Set())).add(cls);
}
function removeTransitionClass$1(el3, cls) {
  cls.split(/\s+/).forEach((c3) => c3 && el3.classList.remove(c3));
  const _vtc = el3[vtcKey$1];
  if (_vtc) {
    _vtc.delete(cls);
    if (!_vtc.size) {
      el3[vtcKey$1] = void 0;
    }
  }
}
function nextFrame$2(cb) {
  requestAnimationFrame(() => {
    requestAnimationFrame(cb);
  });
}
let endId$1 = 0;
function whenTransitionEnds$1(el3, expectedType, explicitTimeout, resolve2) {
  const id2 = el3._endId = ++endId$1;
  const resolveIfNotStale = () => {
    if (id2 === el3._endId) {
      resolve2();
    }
  };
  if (explicitTimeout) {
    return setTimeout(resolveIfNotStale, explicitTimeout);
  }
  const { type, timeout, propCount } = getTransitionInfo$1(el3, expectedType);
  if (!type) {
    return resolve2();
  }
  const endEvent = type + "end";
  let ended = 0;
  const end = () => {
    el3.removeEventListener(endEvent, onEnd);
    resolveIfNotStale();
  };
  const onEnd = (e3) => {
    if (e3.target === el3 && ++ended >= propCount) {
      end();
    }
  };
  setTimeout(() => {
    if (ended < propCount) {
      end();
    }
  }, timeout + 1);
  el3.addEventListener(endEvent, onEnd);
}
function getTransitionInfo$1(el3, expectedType) {
  const styles = window.getComputedStyle(el3);
  const getStyleProperties = (key) => (styles[key] || "").split(", ");
  const transitionDelays = getStyleProperties(`${TRANSITION$1}Delay`);
  const transitionDurations = getStyleProperties(`${TRANSITION$1}Duration`);
  const transitionTimeout = getTimeout$1(transitionDelays, transitionDurations);
  const animationDelays = getStyleProperties(`${ANIMATION$1}Delay`);
  const animationDurations = getStyleProperties(`${ANIMATION$1}Duration`);
  const animationTimeout = getTimeout$1(animationDelays, animationDurations);
  let type = null;
  let timeout = 0;
  let propCount = 0;
  if (expectedType === TRANSITION$1) {
    if (transitionTimeout > 0) {
      type = TRANSITION$1;
      timeout = transitionTimeout;
      propCount = transitionDurations.length;
    }
  } else if (expectedType === ANIMATION$1) {
    if (animationTimeout > 0) {
      type = ANIMATION$1;
      timeout = animationTimeout;
      propCount = animationDurations.length;
    }
  } else {
    timeout = Math.max(transitionTimeout, animationTimeout);
    type = timeout > 0 ? transitionTimeout > animationTimeout ? TRANSITION$1 : ANIMATION$1 : null;
    propCount = type ? type === TRANSITION$1 ? transitionDurations.length : animationDurations.length : 0;
  }
  const hasTransform = type === TRANSITION$1 && /\b(transform|all)(,|$)/.test(
    getStyleProperties(`${TRANSITION$1}Property`).toString()
  );
  return {
    type,
    timeout,
    propCount,
    hasTransform
  };
}
function getTimeout$1(delays, durations) {
  while (delays.length < durations.length) {
    delays = delays.concat(delays);
  }
  return Math.max(...durations.map((d4, i3) => toMs$1(d4) + toMs$1(delays[i3])));
}
function toMs$1(s5) {
  if (s5 === "auto")
    return 0;
  return Number(s5.slice(0, -1).replace(",", ".")) * 1e3;
}
function forceReflow$1() {
  return document.body.offsetHeight;
}
function patchClass$1(el3, value, isSVG) {
  const transitionClasses = el3[vtcKey$1];
  if (transitionClasses) {
    value = (value ? [value, ...transitionClasses] : [...transitionClasses]).join(" ");
  }
  if (value == null) {
    el3.removeAttribute("class");
  } else if (isSVG) {
    el3.setAttribute("class", value);
  } else {
    el3.className = value;
  }
}
const vShowOldKey$1 = Symbol("_vod");
const vShow$1 = {
  beforeMount(el3, { value }, { transition }) {
    el3[vShowOldKey$1] = el3.style.display === "none" ? "" : el3.style.display;
    if (transition && value) {
      transition.beforeEnter(el3);
    } else {
      setDisplay$1(el3, value);
    }
  },
  mounted(el3, { value }, { transition }) {
    if (transition && value) {
      transition.enter(el3);
    }
  },
  updated(el3, { value, oldValue }, { transition }) {
    if (!value === !oldValue)
      return;
    if (transition) {
      if (value) {
        transition.beforeEnter(el3);
        setDisplay$1(el3, true);
        transition.enter(el3);
      } else {
        transition.leave(el3, () => {
          setDisplay$1(el3, false);
        });
      }
    } else {
      setDisplay$1(el3, value);
    }
  },
  beforeUnmount(el3, { value }) {
    setDisplay$1(el3, value);
  }
};
function setDisplay$1(el3, value) {
  el3.style.display = value ? el3[vShowOldKey$1] : "none";
}
function patchStyle$1(el3, prev, next) {
  const style = el3.style;
  const isCssString = isString$3(next);
  if (next && !isCssString) {
    if (prev && !isString$3(prev)) {
      for (const key in prev) {
        if (next[key] == null) {
          setStyle$1(style, key, "");
        }
      }
    }
    for (const key in next) {
      setStyle$1(style, key, next[key]);
    }
  } else {
    const currentDisplay = style.display;
    if (isCssString) {
      if (prev !== next) {
        style.cssText = next;
      }
    } else if (prev) {
      el3.removeAttribute("style");
    }
    if (vShowOldKey$1 in el3) {
      style.display = currentDisplay;
    }
  }
}
const semicolonRE$1 = /[^\\];\s*$/;
const importantRE$1 = /\s*!important$/;
function setStyle$1(style, name, val) {
  if (isArray$4(val)) {
    val.forEach((v2) => setStyle$1(style, name, v2));
  } else {
    if (val == null)
      val = "";
    {
      if (semicolonRE$1.test(val)) {
        warn$5(
          `Unexpected semicolon at the end of '${name}' style value: '${val}'`
        );
      }
    }
    if (name.startsWith("--")) {
      style.setProperty(name, val);
    } else {
      const prefixed = autoPrefix$1(style, name);
      if (importantRE$1.test(val)) {
        style.setProperty(
          hyphenate$1(prefixed),
          val.replace(importantRE$1, ""),
          "important"
        );
      } else {
        style[prefixed] = val;
      }
    }
  }
}
const prefixes$1 = ["Webkit", "Moz", "ms"];
const prefixCache$1 = {};
function autoPrefix$1(style, rawName) {
  const cached = prefixCache$1[rawName];
  if (cached) {
    return cached;
  }
  let name = camelize$1(rawName);
  if (name !== "filter" && name in style) {
    return prefixCache$1[rawName] = name;
  }
  name = capitalize$2(name);
  for (let i3 = 0; i3 < prefixes$1.length; i3++) {
    const prefixed = prefixes$1[i3] + name;
    if (prefixed in style) {
      return prefixCache$1[rawName] = prefixed;
    }
  }
  return rawName;
}
const xlinkNS$1 = "http://www.w3.org/1999/xlink";
function patchAttr$1(el3, key, value, isSVG, instance) {
  if (isSVG && key.startsWith("xlink:")) {
    if (value == null) {
      el3.removeAttributeNS(xlinkNS$1, key.slice(6, key.length));
    } else {
      el3.setAttributeNS(xlinkNS$1, key, value);
    }
  } else {
    const isBoolean2 = isSpecialBooleanAttr$1(key);
    if (value == null || isBoolean2 && !includeBooleanAttr$1(value)) {
      el3.removeAttribute(key);
    } else {
      el3.setAttribute(key, isBoolean2 ? "" : value);
    }
  }
}
function patchDOMProp$1(el3, key, value, prevChildren, parentComponent, parentSuspense, unmountChildren) {
  if (key === "innerHTML" || key === "textContent") {
    if (prevChildren) {
      unmountChildren(prevChildren, parentComponent, parentSuspense);
    }
    el3[key] = value == null ? "" : value;
    return;
  }
  const tag = el3.tagName;
  if (key === "value" && tag !== "PROGRESS" && // custom elements may use _value internally
  !tag.includes("-")) {
    el3._value = value;
    const oldValue = tag === "OPTION" ? el3.getAttribute("value") : el3.value;
    const newValue = value == null ? "" : value;
    if (oldValue !== newValue) {
      el3.value = newValue;
    }
    if (value == null) {
      el3.removeAttribute(key);
    }
    return;
  }
  let needRemove = false;
  if (value === "" || value == null) {
    const type = typeof el3[key];
    if (type === "boolean") {
      value = includeBooleanAttr$1(value);
    } else if (value == null && type === "string") {
      value = "";
      needRemove = true;
    } else if (type === "number") {
      value = 0;
      needRemove = true;
    }
  }
  try {
    el3[key] = value;
  } catch (e3) {
    if (!needRemove) {
      warn$5(
        `Failed setting prop "${key}" on <${tag.toLowerCase()}>: value ${value} is invalid.`,
        e3
      );
    }
  }
  needRemove && el3.removeAttribute(key);
}
function addEventListener$1(el3, event, handler, options) {
  el3.addEventListener(event, handler, options);
}
function removeEventListener$1(el3, event, handler, options) {
  el3.removeEventListener(event, handler, options);
}
const veiKey$1 = Symbol("_vei");
function patchEvent$1(el3, rawName, prevValue, nextValue, instance = null) {
  const invokers = el3[veiKey$1] || (el3[veiKey$1] = {});
  const existingInvoker = invokers[rawName];
  if (nextValue && existingInvoker) {
    existingInvoker.value = nextValue;
  } else {
    const [name, options] = parseName$1(rawName);
    if (nextValue) {
      const invoker = invokers[rawName] = createInvoker$1(nextValue, instance);
      addEventListener$1(el3, name, invoker, options);
    } else if (existingInvoker) {
      removeEventListener$1(el3, name, existingInvoker, options);
      invokers[rawName] = void 0;
    }
  }
}
const optionsModifierRE$1 = /(?:Once|Passive|Capture)$/;
function parseName$1(name) {
  let options;
  if (optionsModifierRE$1.test(name)) {
    options = {};
    let m4;
    while (m4 = name.match(optionsModifierRE$1)) {
      name = name.slice(0, name.length - m4[0].length);
      options[m4[0].toLowerCase()] = true;
    }
  }
  const event = name[2] === ":" ? name.slice(3) : hyphenate$1(name.slice(2));
  return [event, options];
}
let cachedNow$1 = 0;
const p$3 = /* @__PURE__ */ Promise.resolve();
const getNow$1 = () => cachedNow$1 || (p$3.then(() => cachedNow$1 = 0), cachedNow$1 = Date.now());
function createInvoker$1(initialValue, instance) {
  const invoker = (e3) => {
    if (!e3._vts) {
      e3._vts = Date.now();
    } else if (e3._vts <= invoker.attached) {
      return;
    }
    callWithAsyncErrorHandling$1(
      patchStopImmediatePropagation$1(e3, invoker.value),
      instance,
      5,
      [e3]
    );
  };
  invoker.value = initialValue;
  invoker.attached = getNow$1();
  return invoker;
}
function patchStopImmediatePropagation$1(e3, value) {
  if (isArray$4(value)) {
    const originalStop = e3.stopImmediatePropagation;
    e3.stopImmediatePropagation = () => {
      originalStop.call(e3);
      e3._stopped = true;
    };
    return value.map((fn2) => (e22) => !e22._stopped && fn2 && fn2(e22));
  } else {
    return value;
  }
}
const nativeOnRE = /^on[a-z]/;
const patchProp$1 = (el3, key, prevValue, nextValue, isSVG = false, prevChildren, parentComponent, parentSuspense, unmountChildren) => {
  if (key === "class") {
    patchClass$1(el3, nextValue, isSVG);
  } else if (key === "style") {
    patchStyle$1(el3, prevValue, nextValue);
  } else if (isOn$1(key)) {
    if (!isModelListener$1(key)) {
      patchEvent$1(el3, key, prevValue, nextValue, parentComponent);
    }
  } else if (key[0] === "." ? (key = key.slice(1), true) : key[0] === "^" ? (key = key.slice(1), false) : shouldSetAsProp$1(el3, key, nextValue, isSVG)) {
    patchDOMProp$1(
      el3,
      key,
      nextValue,
      prevChildren,
      parentComponent,
      parentSuspense,
      unmountChildren
    );
  } else {
    if (key === "true-value") {
      el3._trueValue = nextValue;
    } else if (key === "false-value") {
      el3._falseValue = nextValue;
    }
    patchAttr$1(el3, key, nextValue, isSVG);
  }
};
function shouldSetAsProp$1(el3, key, value, isSVG) {
  if (isSVG) {
    if (key === "innerHTML" || key === "textContent") {
      return true;
    }
    if (key in el3 && nativeOnRE.test(key) && isFunction$3(value)) {
      return true;
    }
    return false;
  }
  if (key === "spellcheck" || key === "draggable" || key === "translate") {
    return false;
  }
  if (key === "form") {
    return false;
  }
  if (key === "list" && el3.tagName === "INPUT") {
    return false;
  }
  if (key === "type" && el3.tagName === "TEXTAREA") {
    return false;
  }
  if (nativeOnRE.test(key) && isString$3(value)) {
    return false;
  }
  return key in el3;
}
function useCssVars$1(getter) {
  const instance = getCurrentInstance$1();
  if (!instance) {
    warn$5(`useCssVars is called without current active component instance.`);
    return;
  }
  const updateTeleports = instance.ut = (vars = getter(instance.proxy)) => {
    Array.from(
      document.querySelectorAll(`[data-v-owner="${instance.uid}"]`)
    ).forEach((node) => setVarsOnNode$1(node, vars));
  };
  const setVars = () => {
    const vars = getter(instance.proxy);
    setVarsOnVNode$1(instance.subTree, vars);
    updateTeleports(vars);
  };
  watchPostEffect$1(setVars);
  onMounted$1(() => {
    const ob = new MutationObserver(setVars);
    ob.observe(instance.subTree.el.parentNode, { childList: true });
    onUnmounted$1(() => ob.disconnect());
  });
}
function setVarsOnVNode$1(vnode, vars) {
  if (vnode.shapeFlag & 128) {
    const suspense = vnode.suspense;
    vnode = suspense.activeBranch;
    if (suspense.pendingBranch && !suspense.isHydrating) {
      suspense.effects.push(() => {
        setVarsOnVNode$1(suspense.activeBranch, vars);
      });
    }
  }
  while (vnode.component) {
    vnode = vnode.component.subTree;
  }
  if (vnode.shapeFlag & 1 && vnode.el) {
    setVarsOnNode$1(vnode.el, vars);
  } else if (vnode.type === Fragment$1) {
    vnode.children.forEach((c3) => setVarsOnVNode$1(c3, vars));
  } else if (vnode.type === Static$1) {
    let { el: el3, anchor } = vnode;
    while (el3) {
      setVarsOnNode$1(el3, vars);
      if (el3 === anchor)
        break;
      el3 = el3.nextSibling;
    }
  }
}
function setVarsOnNode$1(el3, vars) {
  if (el3.nodeType === 1) {
    const style = el3.style;
    for (const key in vars) {
      style.setProperty(`--${key}`, vars[key]);
    }
  }
}
const positionMap = /* @__PURE__ */ new WeakMap();
const newPositionMap = /* @__PURE__ */ new WeakMap();
const moveCbKey = Symbol("_moveCb");
const enterCbKey$2 = Symbol("_enterCb");
const TransitionGroupImpl = {
  name: "TransitionGroup",
  props: /* @__PURE__ */ extend$1({}, TransitionPropsValidators, {
    tag: String,
    moveClass: String
  }),
  setup(props, { slots }) {
    const instance = getCurrentInstance$1();
    const state = useTransitionState$1();
    let prevChildren;
    let children;
    onUpdated$1(() => {
      if (!prevChildren.length) {
        return;
      }
      const moveClass = props.moveClass || `${props.name || "v"}-move`;
      if (!hasCSSTransform(
        prevChildren[0].el,
        instance.vnode.el,
        moveClass
      )) {
        return;
      }
      prevChildren.forEach(callPendingCbs);
      prevChildren.forEach(recordPosition);
      const movedChildren = prevChildren.filter(applyTranslation);
      forceReflow$1();
      movedChildren.forEach((c3) => {
        const el3 = c3.el;
        const style = el3.style;
        addTransitionClass$1(el3, moveClass);
        style.transform = style.webkitTransform = style.transitionDuration = "";
        const cb = el3[moveCbKey] = (e3) => {
          if (e3 && e3.target !== el3) {
            return;
          }
          if (!e3 || /transform$/.test(e3.propertyName)) {
            el3.removeEventListener("transitionend", cb);
            el3[moveCbKey] = null;
            removeTransitionClass$1(el3, moveClass);
          }
        };
        el3.addEventListener("transitionend", cb);
      });
    });
    return () => {
      const rawProps = toRaw$1(props);
      const cssTransitionProps = resolveTransitionProps$1(rawProps);
      let tag = rawProps.tag || Fragment$1;
      prevChildren = children;
      children = slots.default ? getTransitionRawChildren$1(slots.default()) : [];
      for (let i3 = 0; i3 < children.length; i3++) {
        const child = children[i3];
        if (child.key != null) {
          setTransitionHooks$1(
            child,
            resolveTransitionHooks$1(child, cssTransitionProps, state, instance)
          );
        } else {
          warn$5(`<TransitionGroup> children must be keyed.`);
        }
      }
      if (prevChildren) {
        for (let i3 = 0; i3 < prevChildren.length; i3++) {
          const child = prevChildren[i3];
          setTransitionHooks$1(
            child,
            resolveTransitionHooks$1(child, cssTransitionProps, state, instance)
          );
          positionMap.set(child, child.el.getBoundingClientRect());
        }
      }
      return createVNode$1(tag, null, children);
    };
  }
};
const removeMode = (props) => delete props.mode;
/* @__PURE__ */ removeMode(TransitionGroupImpl.props);
function callPendingCbs(c3) {
  const el3 = c3.el;
  if (el3[moveCbKey]) {
    el3[moveCbKey]();
  }
  if (el3[enterCbKey$2]) {
    el3[enterCbKey$2]();
  }
}
function recordPosition(c3) {
  newPositionMap.set(c3, c3.el.getBoundingClientRect());
}
function applyTranslation(c3) {
  const oldPos = positionMap.get(c3);
  const newPos = newPositionMap.get(c3);
  const dx = oldPos.left - newPos.left;
  const dy = oldPos.top - newPos.top;
  if (dx || dy) {
    const s5 = c3.el.style;
    s5.transform = s5.webkitTransform = `translate(${dx}px,${dy}px)`;
    s5.transitionDuration = "0s";
    return c3;
  }
}
function hasCSSTransform(el3, root, moveClass) {
  const clone2 = el3.cloneNode();
  const _vtc = el3[vtcKey$1];
  if (_vtc) {
    _vtc.forEach((cls) => {
      cls.split(/\s+/).forEach((c3) => c3 && clone2.classList.remove(c3));
    });
  }
  moveClass.split(/\s+/).forEach((c3) => c3 && clone2.classList.add(c3));
  clone2.style.display = "none";
  const container = root.nodeType === 1 ? root : root.parentNode;
  container.appendChild(clone2);
  const { hasTransform } = getTransitionInfo$1(clone2);
  container.removeChild(clone2);
  return hasTransform;
}
const getModelAssigner$1 = (vnode) => {
  const fn2 = vnode.props["onUpdate:modelValue"] || false;
  return isArray$4(fn2) ? (value) => invokeArrayFns$1(fn2, value) : fn2;
};
function onCompositionStart$1(e3) {
  e3.target.composing = true;
}
function onCompositionEnd$1(e3) {
  const target = e3.target;
  if (target.composing) {
    target.composing = false;
    target.dispatchEvent(new Event("input"));
  }
}
const assignKey$1 = Symbol("_assign");
const vModelText$1 = {
  created(el3, { modifiers: { lazy, trim, number: number2 } }, vnode) {
    el3[assignKey$1] = getModelAssigner$1(vnode);
    const castToNumber = number2 || vnode.props && vnode.props.type === "number";
    addEventListener$1(el3, lazy ? "change" : "input", (e3) => {
      if (e3.target.composing)
        return;
      let domValue = el3.value;
      if (trim) {
        domValue = domValue.trim();
      }
      if (castToNumber) {
        domValue = looseToNumber$1(domValue);
      }
      el3[assignKey$1](domValue);
    });
    if (trim) {
      addEventListener$1(el3, "change", () => {
        el3.value = el3.value.trim();
      });
    }
    if (!lazy) {
      addEventListener$1(el3, "compositionstart", onCompositionStart$1);
      addEventListener$1(el3, "compositionend", onCompositionEnd$1);
      addEventListener$1(el3, "change", onCompositionEnd$1);
    }
  },
  // set value on mounted so it's after min/max for type="range"
  mounted(el3, { value }) {
    el3.value = value == null ? "" : value;
  },
  beforeUpdate(el3, { value, modifiers: { lazy, trim, number: number2 } }, vnode) {
    el3[assignKey$1] = getModelAssigner$1(vnode);
    if (el3.composing)
      return;
    if (document.activeElement === el3 && el3.type !== "range") {
      if (lazy) {
        return;
      }
      if (trim && el3.value.trim() === value) {
        return;
      }
      if ((number2 || el3.type === "number") && looseToNumber$1(el3.value) === value) {
        return;
      }
    }
    const newValue = value == null ? "" : value;
    if (el3.value !== newValue) {
      el3.value = newValue;
    }
  }
};
const systemModifiers$1 = ["ctrl", "shift", "alt", "meta"];
const modifierGuards$1 = {
  stop: (e3) => e3.stopPropagation(),
  prevent: (e3) => e3.preventDefault(),
  self: (e3) => e3.target !== e3.currentTarget,
  ctrl: (e3) => !e3.ctrlKey,
  shift: (e3) => !e3.shiftKey,
  alt: (e3) => !e3.altKey,
  meta: (e3) => !e3.metaKey,
  left: (e3) => "button" in e3 && e3.button !== 0,
  middle: (e3) => "button" in e3 && e3.button !== 1,
  right: (e3) => "button" in e3 && e3.button !== 2,
  exact: (e3, modifiers) => systemModifiers$1.some((m4) => e3[`${m4}Key`] && !modifiers.includes(m4))
};
const withModifiers$1 = (fn2, modifiers) => {
  return (event, ...args) => {
    for (let i3 = 0; i3 < modifiers.length; i3++) {
      const guard = modifierGuards$1[modifiers[i3]];
      if (guard && guard(event, modifiers))
        return;
    }
    return fn2(event, ...args);
  };
};
const keyNames$1 = {
  esc: "escape",
  space: " ",
  up: "arrow-up",
  left: "arrow-left",
  right: "arrow-right",
  down: "arrow-down",
  delete: "backspace"
};
const withKeys$1 = (fn2, modifiers) => {
  return (event) => {
    if (!("key" in event)) {
      return;
    }
    const eventKey = hyphenate$1(event.key);
    if (modifiers.some((k3) => k3 === eventKey || keyNames$1[k3] === eventKey)) {
      return fn2(event);
    }
  };
};
const rendererOptions$1 = /* @__PURE__ */ extend$1({ patchProp: patchProp$1 }, nodeOps$1);
let renderer$1;
function ensureRenderer$1() {
  return renderer$1 || (renderer$1 = createRenderer$1(rendererOptions$1));
}
const createApp$1 = (...args) => {
  const app = ensureRenderer$1().createApp(...args);
  {
    injectNativeTagCheck$1(app);
    injectCompilerOptionsCheck$1(app);
  }
  const { mount } = app;
  app.mount = (containerOrSelector) => {
    const container = normalizeContainer$1(containerOrSelector);
    if (!container)
      return;
    const component = app._component;
    if (!isFunction$3(component) && !component.render && !component.template) {
      component.template = container.innerHTML;
    }
    container.innerHTML = "";
    const proxy = mount(container, false, container instanceof SVGElement);
    if (container instanceof Element) {
      container.removeAttribute("v-cloak");
      container.setAttribute("data-v-app", "");
    }
    return proxy;
  };
  return app;
};
function injectNativeTagCheck$1(app) {
  Object.defineProperty(app.config, "isNativeTag", {
    value: (tag) => isHTMLTag$1(tag) || isSVGTag$1(tag),
    writable: false
  });
}
function injectCompilerOptionsCheck$1(app) {
  {
    const isCustomElement = app.config.isCustomElement;
    Object.defineProperty(app.config, "isCustomElement", {
      get() {
        return isCustomElement;
      },
      set() {
        warn$5(
          `The \`isCustomElement\` config option is deprecated. Use \`compilerOptions.isCustomElement\` instead.`
        );
      }
    });
    const compilerOptions = app.config.compilerOptions;
    const msg = `The \`compilerOptions\` config option is only respected when using a build of Vue.js that includes the runtime compiler (aka "full build"). Since you are using the runtime-only build, \`compilerOptions\` must be passed to \`@vue/compiler-dom\` in the build setup instead.
- For vue-loader: pass it via vue-loader's \`compilerOptions\` loader option.
- For vue-cli: see https://cli.vuejs.org/guide/webpack.html#modifying-options-of-a-loader
- For vite: pass it via @vitejs/plugin-vue options. See https://github.com/vitejs/vite-plugin-vue/tree/main/packages/plugin-vue#example-for-passing-options-to-vuecompiler-sfc`;
    Object.defineProperty(app.config, "compilerOptions", {
      get() {
        warn$5(msg);
        return compilerOptions;
      },
      set() {
        warn$5(msg);
      }
    });
  }
}
function normalizeContainer$1(container) {
  if (isString$3(container)) {
    const res = document.querySelector(container);
    if (!res) {
      warn$5(
        `Failed to mount app: mount target selector "${container}" returned null.`
      );
    }
    return res;
  }
  if (window.ShadowRoot && container instanceof window.ShadowRoot && container.mode === "closed") {
    warn$5(
      `mounting on a ShadowRoot with \`{mode: "closed"}\` may lead to unpredictable bugs`
    );
  }
  return container;
}
function initDev$1() {
  {
    initCustomFormatter$1();
  }
}
{
  initDev$1();
}
var isVue2$1 = false;
function set$2(target, key, val) {
  if (Array.isArray(target)) {
    target.length = Math.max(target.length, key);
    target.splice(key, 1, val);
    return val;
  }
  target[key] = val;
  return val;
}
function del(target, key) {
  if (Array.isArray(target)) {
    target.splice(key, 1);
    return;
  }
  delete target[key];
}
function getDevtoolsGlobalHook$1() {
  return getTarget$1().__VUE_DEVTOOLS_GLOBAL_HOOK__;
}
function getTarget$1() {
  return typeof navigator !== "undefined" && typeof window !== "undefined" ? window : typeof global !== "undefined" ? global : {};
}
const isProxyAvailable$1 = typeof Proxy === "function";
const HOOK_SETUP$1 = "devtools-plugin:setup";
const HOOK_PLUGIN_SETTINGS_SET$1 = "plugin:settings:set";
let supported$2;
let perf$2;
function isPerformanceSupported$1() {
  var _a2;
  if (supported$2 !== void 0) {
    return supported$2;
  }
  if (typeof window !== "undefined" && window.performance) {
    supported$2 = true;
    perf$2 = window.performance;
  } else if (typeof global !== "undefined" && ((_a2 = global.perf_hooks) === null || _a2 === void 0 ? void 0 : _a2.performance)) {
    supported$2 = true;
    perf$2 = global.perf_hooks.performance;
  } else {
    supported$2 = false;
  }
  return supported$2;
}
function now$1() {
  return isPerformanceSupported$1() ? perf$2.now() : Date.now();
}
let ApiProxy$1 = class ApiProxy2 {
  constructor(plugin2, hook) {
    this.target = null;
    this.targetQueue = [];
    this.onQueue = [];
    this.plugin = plugin2;
    this.hook = hook;
    const defaultSettings = {};
    if (plugin2.settings) {
      for (const id2 in plugin2.settings) {
        const item = plugin2.settings[id2];
        defaultSettings[id2] = item.defaultValue;
      }
    }
    const localSettingsSaveId = `__vue-devtools-plugin-settings__${plugin2.id}`;
    let currentSettings = Object.assign({}, defaultSettings);
    try {
      const raw = localStorage.getItem(localSettingsSaveId);
      const data = JSON.parse(raw);
      Object.assign(currentSettings, data);
    } catch (e3) {
    }
    this.fallbacks = {
      getSettings() {
        return currentSettings;
      },
      setSettings(value) {
        try {
          localStorage.setItem(localSettingsSaveId, JSON.stringify(value));
        } catch (e3) {
        }
        currentSettings = value;
      },
      now() {
        return now$1();
      }
    };
    if (hook) {
      hook.on(HOOK_PLUGIN_SETTINGS_SET$1, (pluginId, value) => {
        if (pluginId === this.plugin.id) {
          this.fallbacks.setSettings(value);
        }
      });
    }
    this.proxiedOn = new Proxy({}, {
      get: (_target, prop) => {
        if (this.target) {
          return this.target.on[prop];
        } else {
          return (...args) => {
            this.onQueue.push({
              method: prop,
              args
            });
          };
        }
      }
    });
    this.proxiedTarget = new Proxy({}, {
      get: (_target, prop) => {
        if (this.target) {
          return this.target[prop];
        } else if (prop === "on") {
          return this.proxiedOn;
        } else if (Object.keys(this.fallbacks).includes(prop)) {
          return (...args) => {
            this.targetQueue.push({
              method: prop,
              args,
              resolve: () => {
              }
            });
            return this.fallbacks[prop](...args);
          };
        } else {
          return (...args) => {
            return new Promise((resolve2) => {
              this.targetQueue.push({
                method: prop,
                args,
                resolve: resolve2
              });
            });
          };
        }
      }
    });
  }
  async setRealTarget(target) {
    this.target = target;
    for (const item of this.onQueue) {
      this.target.on[item.method](...item.args);
    }
    for (const item of this.targetQueue) {
      item.resolve(await this.target[item.method](...item.args));
    }
  }
};
function setupDevtoolsPlugin$1(pluginDescriptor, setupFn) {
  const descriptor = pluginDescriptor;
  const target = getTarget$1();
  const hook = getDevtoolsGlobalHook$1();
  const enableProxy = isProxyAvailable$1 && descriptor.enableEarlyProxy;
  if (hook && (target.__VUE_DEVTOOLS_PLUGIN_API_AVAILABLE__ || !enableProxy)) {
    hook.emit(HOOK_SETUP$1, pluginDescriptor, setupFn);
  } else {
    const proxy = enableProxy ? new ApiProxy$1(descriptor, hook) : null;
    const list = target.__VUE_DEVTOOLS_PLUGINS__ = target.__VUE_DEVTOOLS_PLUGINS__ || [];
    list.push({
      pluginDescriptor: descriptor,
      setupFn,
      proxy
    });
    if (proxy)
      setupFn(proxy.proxiedTarget);
  }
}
/*!
 * pinia v2.1.7
 * (c) 2023 Eduardo San Martin Morote
 * @license MIT
 */
let activePinia;
const setActivePinia = (pinia) => activePinia = pinia;
const piniaSymbol$1 = Symbol("pinia");
function isPlainObject$2(o2) {
  return o2 && typeof o2 === "object" && Object.prototype.toString.call(o2) === "[object Object]" && typeof o2.toJSON !== "function";
}
var MutationType$1;
(function(MutationType2) {
  MutationType2["direct"] = "direct";
  MutationType2["patchObject"] = "patch object";
  MutationType2["patchFunction"] = "patch function";
})(MutationType$1 || (MutationType$1 = {}));
const IS_CLIENT$1 = typeof window !== "undefined";
const USE_DEVTOOLS$1 = IS_CLIENT$1;
const _global$2 = /* @__PURE__ */ (() => typeof window === "object" && window.window === window ? window : typeof self === "object" && self.self === self ? self : typeof global === "object" && global.global === global ? global : typeof globalThis === "object" ? globalThis : { HTMLElement: null })();
function bom$1(blob, { autoBom = false } = {}) {
  if (autoBom && /^\s*(?:text\/\S*|application\/xml|\S*\/\S*\+xml)\s*;.*charset\s*=\s*utf-8/i.test(blob.type)) {
    return new Blob([String.fromCharCode(65279), blob], { type: blob.type });
  }
  return blob;
}
function download$1(url, name, opts) {
  const xhr = new XMLHttpRequest();
  xhr.open("GET", url);
  xhr.responseType = "blob";
  xhr.onload = function() {
    saveAs$1(xhr.response, name, opts);
  };
  xhr.onerror = function() {
    console.error("could not download file");
  };
  xhr.send();
}
function corsEnabled$1(url) {
  const xhr = new XMLHttpRequest();
  xhr.open("HEAD", url, false);
  try {
    xhr.send();
  } catch (e3) {
  }
  return xhr.status >= 200 && xhr.status <= 299;
}
function click$1(node) {
  try {
    node.dispatchEvent(new MouseEvent("click"));
  } catch (e3) {
    const evt = document.createEvent("MouseEvents");
    evt.initMouseEvent("click", true, true, window, 0, 0, 0, 80, 20, false, false, false, false, 0, null);
    node.dispatchEvent(evt);
  }
}
const _navigator$1 = typeof navigator === "object" ? navigator : { userAgent: "" };
const isMacOSWebView$1 = /* @__PURE__ */ (() => /Macintosh/.test(_navigator$1.userAgent) && /AppleWebKit/.test(_navigator$1.userAgent) && !/Safari/.test(_navigator$1.userAgent))();
const saveAs$1 = !IS_CLIENT$1 ? () => {
} : (
  // Use download attribute first if possible (#193 Lumia mobile) unless this is a macOS WebView or mini program
  typeof HTMLAnchorElement !== "undefined" && "download" in HTMLAnchorElement.prototype && !isMacOSWebView$1 ? downloadSaveAs$1 : (
    // Use msSaveOrOpenBlob as a second approach
    "msSaveOrOpenBlob" in _navigator$1 ? msSaveAs$1 : (
      // Fallback to using FileReader and a popup
      fileSaverSaveAs$1
    )
  )
);
function downloadSaveAs$1(blob, name = "download", opts) {
  const a4 = document.createElement("a");
  a4.download = name;
  a4.rel = "noopener";
  if (typeof blob === "string") {
    a4.href = blob;
    if (a4.origin !== location.origin) {
      if (corsEnabled$1(a4.href)) {
        download$1(blob, name, opts);
      } else {
        a4.target = "_blank";
        click$1(a4);
      }
    } else {
      click$1(a4);
    }
  } else {
    a4.href = URL.createObjectURL(blob);
    setTimeout(function() {
      URL.revokeObjectURL(a4.href);
    }, 4e4);
    setTimeout(function() {
      click$1(a4);
    }, 0);
  }
}
function msSaveAs$1(blob, name = "download", opts) {
  if (typeof blob === "string") {
    if (corsEnabled$1(blob)) {
      download$1(blob, name, opts);
    } else {
      const a4 = document.createElement("a");
      a4.href = blob;
      a4.target = "_blank";
      setTimeout(function() {
        click$1(a4);
      });
    }
  } else {
    navigator.msSaveOrOpenBlob(bom$1(blob, opts), name);
  }
}
function fileSaverSaveAs$1(blob, name, opts, popup) {
  popup = popup || open("", "_blank");
  if (popup) {
    popup.document.title = popup.document.body.innerText = "downloading...";
  }
  if (typeof blob === "string")
    return download$1(blob, name, opts);
  const force = blob.type === "application/octet-stream";
  const isSafari = /constructor/i.test(String(_global$2.HTMLElement)) || "safari" in _global$2;
  const isChromeIOS = /CriOS\/[\d]+/.test(navigator.userAgent);
  if ((isChromeIOS || force && isSafari || isMacOSWebView$1) && typeof FileReader !== "undefined") {
    const reader = new FileReader();
    reader.onloadend = function() {
      let url = reader.result;
      if (typeof url !== "string") {
        popup = null;
        throw new Error("Wrong reader.result type");
      }
      url = isChromeIOS ? url : url.replace(/^data:[^;]*;/, "data:attachment/file;");
      if (popup) {
        popup.location.href = url;
      } else {
        location.assign(url);
      }
      popup = null;
    };
    reader.readAsDataURL(blob);
  } else {
    const url = URL.createObjectURL(blob);
    if (popup)
      popup.location.assign(url);
    else
      location.href = url;
    popup = null;
    setTimeout(function() {
      URL.revokeObjectURL(url);
    }, 4e4);
  }
}
function toastMessage$1(message, type) {
  const piniaMessage = "🍍 " + message;
  if (typeof __VUE_DEVTOOLS_TOAST__ === "function") {
    __VUE_DEVTOOLS_TOAST__(piniaMessage, type);
  } else if (type === "error") {
    console.error(piniaMessage);
  } else if (type === "warn") {
    console.warn(piniaMessage);
  } else {
    console.log(piniaMessage);
  }
}
function isPinia$1(o2) {
  return "_a" in o2 && "install" in o2;
}
function checkClipboardAccess$1() {
  if (!("clipboard" in navigator)) {
    toastMessage$1(`Your browser doesn't support the Clipboard API`, "error");
    return true;
  }
}
function checkNotFocusedError$1(error) {
  if (error instanceof Error && error.message.toLowerCase().includes("document is not focused")) {
    toastMessage$1('You need to activate the "Emulate a focused page" setting in the "Rendering" panel of devtools.', "warn");
    return true;
  }
  return false;
}
async function actionGlobalCopyState$1(pinia) {
  if (checkClipboardAccess$1())
    return;
  try {
    await navigator.clipboard.writeText(JSON.stringify(pinia.state.value));
    toastMessage$1("Global state copied to clipboard.");
  } catch (error) {
    if (checkNotFocusedError$1(error))
      return;
    toastMessage$1(`Failed to serialize the state. Check the console for more details.`, "error");
    console.error(error);
  }
}
async function actionGlobalPasteState$1(pinia) {
  if (checkClipboardAccess$1())
    return;
  try {
    loadStoresState$1(pinia, JSON.parse(await navigator.clipboard.readText()));
    toastMessage$1("Global state pasted from clipboard.");
  } catch (error) {
    if (checkNotFocusedError$1(error))
      return;
    toastMessage$1(`Failed to deserialize the state from clipboard. Check the console for more details.`, "error");
    console.error(error);
  }
}
async function actionGlobalSaveState$1(pinia) {
  try {
    saveAs$1(new Blob([JSON.stringify(pinia.state.value)], {
      type: "text/plain;charset=utf-8"
    }), "pinia-state.json");
  } catch (error) {
    toastMessage$1(`Failed to export the state as JSON. Check the console for more details.`, "error");
    console.error(error);
  }
}
let fileInput$1;
function getFileOpener$1() {
  if (!fileInput$1) {
    fileInput$1 = document.createElement("input");
    fileInput$1.type = "file";
    fileInput$1.accept = ".json";
  }
  function openFile() {
    return new Promise((resolve2, reject) => {
      fileInput$1.onchange = async () => {
        const files = fileInput$1.files;
        if (!files)
          return resolve2(null);
        const file = files.item(0);
        if (!file)
          return resolve2(null);
        return resolve2({ text: await file.text(), file });
      };
      fileInput$1.oncancel = () => resolve2(null);
      fileInput$1.onerror = reject;
      fileInput$1.click();
    });
  }
  return openFile;
}
async function actionGlobalOpenStateFile$1(pinia) {
  try {
    const open2 = getFileOpener$1();
    const result = await open2();
    if (!result)
      return;
    const { text, file } = result;
    loadStoresState$1(pinia, JSON.parse(text));
    toastMessage$1(`Global state imported from "${file.name}".`);
  } catch (error) {
    toastMessage$1(`Failed to import the state from JSON. Check the console for more details.`, "error");
    console.error(error);
  }
}
function loadStoresState$1(pinia, state) {
  for (const key in state) {
    const storeState = pinia.state.value[key];
    if (storeState) {
      Object.assign(storeState, state[key]);
    } else {
      pinia.state.value[key] = state[key];
    }
  }
}
function formatDisplay$3(display) {
  return {
    _custom: {
      display
    }
  };
}
const PINIA_ROOT_LABEL$1 = "🍍 Pinia (root)";
const PINIA_ROOT_ID$1 = "_root";
function formatStoreForInspectorTree$1(store) {
  return isPinia$1(store) ? {
    id: PINIA_ROOT_ID$1,
    label: PINIA_ROOT_LABEL$1
  } : {
    id: store.$id,
    label: store.$id
  };
}
function formatStoreForInspectorState$1(store) {
  if (isPinia$1(store)) {
    const storeNames = Array.from(store._s.keys());
    const storeMap = store._s;
    const state2 = {
      state: storeNames.map((storeId) => ({
        editable: true,
        key: storeId,
        value: store.state.value[storeId]
      })),
      getters: storeNames.filter((id2) => storeMap.get(id2)._getters).map((id2) => {
        const store2 = storeMap.get(id2);
        return {
          editable: false,
          key: id2,
          value: store2._getters.reduce((getters, key) => {
            getters[key] = store2[key];
            return getters;
          }, {})
        };
      })
    };
    return state2;
  }
  const state = {
    state: Object.keys(store.$state).map((key) => ({
      editable: true,
      key,
      value: store.$state[key]
    }))
  };
  if (store._getters && store._getters.length) {
    state.getters = store._getters.map((getterName) => ({
      editable: false,
      key: getterName,
      value: store[getterName]
    }));
  }
  if (store._customProperties.size) {
    state.customProperties = Array.from(store._customProperties).map((key) => ({
      editable: true,
      key,
      value: store[key]
    }));
  }
  return state;
}
function formatEventData$1(events) {
  if (!events)
    return {};
  if (Array.isArray(events)) {
    return events.reduce((data, event) => {
      data.keys.push(event.key);
      data.operations.push(event.type);
      data.oldValue[event.key] = event.oldValue;
      data.newValue[event.key] = event.newValue;
      return data;
    }, {
      oldValue: {},
      keys: [],
      operations: [],
      newValue: {}
    });
  } else {
    return {
      operation: formatDisplay$3(events.type),
      key: formatDisplay$3(events.key),
      oldValue: events.oldValue,
      newValue: events.newValue
    };
  }
}
function formatMutationType$1(type) {
  switch (type) {
    case MutationType$1.direct:
      return "mutation";
    case MutationType$1.patchFunction:
      return "$patch";
    case MutationType$1.patchObject:
      return "$patch";
    default:
      return "unknown";
  }
}
let isTimelineActive$1 = true;
const componentStateTypes$1 = [];
const MUTATIONS_LAYER_ID$1 = "pinia:mutations";
const INSPECTOR_ID$1 = "pinia";
const { assign: assign$1$1 } = Object;
const getStoreType$1 = (id2) => "🍍 " + id2;
function registerPiniaDevtools$1(app, pinia) {
  setupDevtoolsPlugin$1({
    id: "dev.esm.pinia",
    label: "Pinia 🍍",
    logo: "https://pinia.vuejs.org/logo.svg",
    packageName: "pinia",
    homepage: "https://pinia.vuejs.org",
    componentStateTypes: componentStateTypes$1,
    app
  }, (api) => {
    if (typeof api.now !== "function") {
      toastMessage$1("You seem to be using an outdated version of Vue Devtools. Are you still using the Beta release instead of the stable one? You can find the links at https://devtools.vuejs.org/guide/installation.html.");
    }
    api.addTimelineLayer({
      id: MUTATIONS_LAYER_ID$1,
      label: `Pinia 🍍`,
      color: 15064968
    });
    api.addInspector({
      id: INSPECTOR_ID$1,
      label: "Pinia 🍍",
      icon: "storage",
      treeFilterPlaceholder: "Search stores",
      actions: [
        {
          icon: "content_copy",
          action: () => {
            actionGlobalCopyState$1(pinia);
          },
          tooltip: "Serialize and copy the state"
        },
        {
          icon: "content_paste",
          action: async () => {
            await actionGlobalPasteState$1(pinia);
            api.sendInspectorTree(INSPECTOR_ID$1);
            api.sendInspectorState(INSPECTOR_ID$1);
          },
          tooltip: "Replace the state with the content of your clipboard"
        },
        {
          icon: "save",
          action: () => {
            actionGlobalSaveState$1(pinia);
          },
          tooltip: "Save the state as a JSON file"
        },
        {
          icon: "folder_open",
          action: async () => {
            await actionGlobalOpenStateFile$1(pinia);
            api.sendInspectorTree(INSPECTOR_ID$1);
            api.sendInspectorState(INSPECTOR_ID$1);
          },
          tooltip: "Import the state from a JSON file"
        }
      ],
      nodeActions: [
        {
          icon: "restore",
          tooltip: 'Reset the state (with "$reset")',
          action: (nodeId) => {
            const store = pinia._s.get(nodeId);
            if (!store) {
              toastMessage$1(`Cannot reset "${nodeId}" store because it wasn't found.`, "warn");
            } else if (typeof store.$reset !== "function") {
              toastMessage$1(`Cannot reset "${nodeId}" store because it doesn't have a "$reset" method implemented.`, "warn");
            } else {
              store.$reset();
              toastMessage$1(`Store "${nodeId}" reset.`);
            }
          }
        }
      ]
    });
    api.on.inspectComponent((payload, ctx) => {
      const proxy = payload.componentInstance && payload.componentInstance.proxy;
      if (proxy && proxy._pStores) {
        const piniaStores = payload.componentInstance.proxy._pStores;
        Object.values(piniaStores).forEach((store) => {
          payload.instanceData.state.push({
            type: getStoreType$1(store.$id),
            key: "state",
            editable: true,
            value: store._isOptionsAPI ? {
              _custom: {
                value: toRaw$1(store.$state),
                actions: [
                  {
                    icon: "restore",
                    tooltip: "Reset the state of this store",
                    action: () => store.$reset()
                  }
                ]
              }
            } : (
              // NOTE: workaround to unwrap transferred refs
              Object.keys(store.$state).reduce((state, key) => {
                state[key] = store.$state[key];
                return state;
              }, {})
            )
          });
          if (store._getters && store._getters.length) {
            payload.instanceData.state.push({
              type: getStoreType$1(store.$id),
              key: "getters",
              editable: false,
              value: store._getters.reduce((getters, key) => {
                try {
                  getters[key] = store[key];
                } catch (error) {
                  getters[key] = error;
                }
                return getters;
              }, {})
            });
          }
        });
      }
    });
    api.on.getInspectorTree((payload) => {
      if (payload.app === app && payload.inspectorId === INSPECTOR_ID$1) {
        let stores = [pinia];
        stores = stores.concat(Array.from(pinia._s.values()));
        payload.rootNodes = (payload.filter ? stores.filter((store) => "$id" in store ? store.$id.toLowerCase().includes(payload.filter.toLowerCase()) : PINIA_ROOT_LABEL$1.toLowerCase().includes(payload.filter.toLowerCase())) : stores).map(formatStoreForInspectorTree$1);
      }
    });
    api.on.getInspectorState((payload) => {
      if (payload.app === app && payload.inspectorId === INSPECTOR_ID$1) {
        const inspectedStore = payload.nodeId === PINIA_ROOT_ID$1 ? pinia : pinia._s.get(payload.nodeId);
        if (!inspectedStore) {
          return;
        }
        if (inspectedStore) {
          payload.state = formatStoreForInspectorState$1(inspectedStore);
        }
      }
    });
    api.on.editInspectorState((payload, ctx) => {
      if (payload.app === app && payload.inspectorId === INSPECTOR_ID$1) {
        const inspectedStore = payload.nodeId === PINIA_ROOT_ID$1 ? pinia : pinia._s.get(payload.nodeId);
        if (!inspectedStore) {
          return toastMessage$1(`store "${payload.nodeId}" not found`, "error");
        }
        const { path } = payload;
        if (!isPinia$1(inspectedStore)) {
          if (path.length !== 1 || !inspectedStore._customProperties.has(path[0]) || path[0] in inspectedStore.$state) {
            path.unshift("$state");
          }
        } else {
          path.unshift("state");
        }
        isTimelineActive$1 = false;
        payload.set(inspectedStore, path, payload.state.value);
        isTimelineActive$1 = true;
      }
    });
    api.on.editComponentState((payload) => {
      if (payload.type.startsWith("🍍")) {
        const storeId = payload.type.replace(/^🍍\s*/, "");
        const store = pinia._s.get(storeId);
        if (!store) {
          return toastMessage$1(`store "${storeId}" not found`, "error");
        }
        const { path } = payload;
        if (path[0] !== "state") {
          return toastMessage$1(`Invalid path for store "${storeId}":
${path}
Only state can be modified.`);
        }
        path[0] = "$state";
        isTimelineActive$1 = false;
        payload.set(store, path, payload.state.value);
        isTimelineActive$1 = true;
      }
    });
  });
}
function addStoreToDevtools$1(app, store) {
  if (!componentStateTypes$1.includes(getStoreType$1(store.$id))) {
    componentStateTypes$1.push(getStoreType$1(store.$id));
  }
  setupDevtoolsPlugin$1({
    id: "dev.esm.pinia",
    label: "Pinia 🍍",
    logo: "https://pinia.vuejs.org/logo.svg",
    packageName: "pinia",
    homepage: "https://pinia.vuejs.org",
    componentStateTypes: componentStateTypes$1,
    app,
    settings: {
      logStoreChanges: {
        label: "Notify about new/deleted stores",
        type: "boolean",
        defaultValue: true
      }
      // useEmojis: {
      //   label: 'Use emojis in messages ⚡️',
      //   type: 'boolean',
      //   defaultValue: true,
      // },
    }
  }, (api) => {
    const now2 = typeof api.now === "function" ? api.now.bind(api) : Date.now;
    store.$onAction(({ after, onError, name, args }) => {
      const groupId = runningActionId$1++;
      api.addTimelineEvent({
        layerId: MUTATIONS_LAYER_ID$1,
        event: {
          time: now2(),
          title: "🛫 " + name,
          subtitle: "start",
          data: {
            store: formatDisplay$3(store.$id),
            action: formatDisplay$3(name),
            args
          },
          groupId
        }
      });
      after((result) => {
        activeAction$1 = void 0;
        api.addTimelineEvent({
          layerId: MUTATIONS_LAYER_ID$1,
          event: {
            time: now2(),
            title: "🛬 " + name,
            subtitle: "end",
            data: {
              store: formatDisplay$3(store.$id),
              action: formatDisplay$3(name),
              args,
              result
            },
            groupId
          }
        });
      });
      onError((error) => {
        activeAction$1 = void 0;
        api.addTimelineEvent({
          layerId: MUTATIONS_LAYER_ID$1,
          event: {
            time: now2(),
            logType: "error",
            title: "💥 " + name,
            subtitle: "end",
            data: {
              store: formatDisplay$3(store.$id),
              action: formatDisplay$3(name),
              args,
              error
            },
            groupId
          }
        });
      });
    }, true);
    store._customProperties.forEach((name) => {
      watch$1(() => unref$1(store[name]), (newValue, oldValue) => {
        api.notifyComponentUpdate();
        api.sendInspectorState(INSPECTOR_ID$1);
        if (isTimelineActive$1) {
          api.addTimelineEvent({
            layerId: MUTATIONS_LAYER_ID$1,
            event: {
              time: now2(),
              title: "Change",
              subtitle: name,
              data: {
                newValue,
                oldValue
              },
              groupId: activeAction$1
            }
          });
        }
      }, { deep: true });
    });
    store.$subscribe(({ events, type }, state) => {
      api.notifyComponentUpdate();
      api.sendInspectorState(INSPECTOR_ID$1);
      if (!isTimelineActive$1)
        return;
      const eventData = {
        time: now2(),
        title: formatMutationType$1(type),
        data: assign$1$1({ store: formatDisplay$3(store.$id) }, formatEventData$1(events)),
        groupId: activeAction$1
      };
      if (type === MutationType$1.patchFunction) {
        eventData.subtitle = "⤵️";
      } else if (type === MutationType$1.patchObject) {
        eventData.subtitle = "🧩";
      } else if (events && !Array.isArray(events)) {
        eventData.subtitle = events.type;
      }
      if (events) {
        eventData.data["rawEvent(s)"] = {
          _custom: {
            display: "DebuggerEvent",
            type: "object",
            tooltip: "raw DebuggerEvent[]",
            value: events
          }
        };
      }
      api.addTimelineEvent({
        layerId: MUTATIONS_LAYER_ID$1,
        event: eventData
      });
    }, { detached: true, flush: "sync" });
    const hotUpdate = store._hotUpdate;
    store._hotUpdate = markRaw$1((newStore) => {
      hotUpdate(newStore);
      api.addTimelineEvent({
        layerId: MUTATIONS_LAYER_ID$1,
        event: {
          time: now2(),
          title: "🔥 " + store.$id,
          subtitle: "HMR update",
          data: {
            store: formatDisplay$3(store.$id),
            info: formatDisplay$3(`HMR update`)
          }
        }
      });
      api.notifyComponentUpdate();
      api.sendInspectorTree(INSPECTOR_ID$1);
      api.sendInspectorState(INSPECTOR_ID$1);
    });
    const { $dispose } = store;
    store.$dispose = () => {
      $dispose();
      api.notifyComponentUpdate();
      api.sendInspectorTree(INSPECTOR_ID$1);
      api.sendInspectorState(INSPECTOR_ID$1);
      api.getSettings().logStoreChanges && toastMessage$1(`Disposed "${store.$id}" store 🗑`);
    };
    api.notifyComponentUpdate();
    api.sendInspectorTree(INSPECTOR_ID$1);
    api.sendInspectorState(INSPECTOR_ID$1);
    api.getSettings().logStoreChanges && toastMessage$1(`"${store.$id}" store installed 🆕`);
  });
}
let runningActionId$1 = 0;
let activeAction$1;
function patchActionForGrouping$1(store, actionNames, wrapWithProxy) {
  const actions = actionNames.reduce((storeActions, actionName) => {
    storeActions[actionName] = toRaw$1(store)[actionName];
    return storeActions;
  }, {});
  for (const actionName in actions) {
    store[actionName] = function() {
      const _actionId = runningActionId$1;
      const trackedStore = wrapWithProxy ? new Proxy(store, {
        get(...args) {
          activeAction$1 = _actionId;
          return Reflect.get(...args);
        },
        set(...args) {
          activeAction$1 = _actionId;
          return Reflect.set(...args);
        }
      }) : store;
      activeAction$1 = _actionId;
      const retValue = actions[actionName].apply(trackedStore, arguments);
      activeAction$1 = void 0;
      return retValue;
    };
  }
}
function devtoolsPlugin$1({ app, store, options }) {
  if (store.$id.startsWith("__hot:")) {
    return;
  }
  store._isOptionsAPI = !!options.state;
  patchActionForGrouping$1(store, Object.keys(options.actions), store._isOptionsAPI);
  const originalHotUpdate = store._hotUpdate;
  toRaw$1(store)._hotUpdate = function(newStore) {
    originalHotUpdate.apply(this, arguments);
    patchActionForGrouping$1(store, Object.keys(newStore._hmrPayload.actions), !!store._isOptionsAPI);
  };
  addStoreToDevtools$1(
    app,
    // FIXME: is there a way to allow the assignment from Store<Id, S, G, A> to StoreGeneric?
    store
  );
}
function createPinia$1() {
  const scope = effectScope$1(true);
  const state = scope.run(() => ref$1({}));
  let _p2 = [];
  let toBeInstalled = [];
  const pinia = markRaw$1({
    install(app) {
      setActivePinia(pinia);
      {
        pinia._a = app;
        app.provide(piniaSymbol$1, pinia);
        app.config.globalProperties.$pinia = pinia;
        if (USE_DEVTOOLS$1) {
          registerPiniaDevtools$1(app, pinia);
        }
        toBeInstalled.forEach((plugin2) => _p2.push(plugin2));
        toBeInstalled = [];
      }
    },
    use(plugin2) {
      if (!this._a && !isVue2$1) {
        toBeInstalled.push(plugin2);
      } else {
        _p2.push(plugin2);
      }
      return this;
    },
    _p: _p2,
    // it's actually undefined here
    // @ts-expect-error
    _a: null,
    _e: scope,
    _s: /* @__PURE__ */ new Map(),
    state
  });
  if (USE_DEVTOOLS$1 && typeof Proxy !== "undefined") {
    pinia.use(devtoolsPlugin$1);
  }
  return pinia;
}
function patchObject(newState, oldState) {
  for (const key in oldState) {
    const subPatch = oldState[key];
    if (!(key in newState)) {
      continue;
    }
    const targetValue = newState[key];
    if (isPlainObject$2(targetValue) && isPlainObject$2(subPatch) && !isRef$1(subPatch) && !isReactive$1(subPatch)) {
      newState[key] = patchObject(targetValue, subPatch);
    } else {
      {
        newState[key] = subPatch;
      }
    }
  }
  return newState;
}
const noop$4 = () => {
};
function addSubscription(subscriptions, callback, detached, onCleanup = noop$4) {
  subscriptions.push(callback);
  const removeSubscription = () => {
    const idx = subscriptions.indexOf(callback);
    if (idx > -1) {
      subscriptions.splice(idx, 1);
      onCleanup();
    }
  };
  if (!detached && getCurrentScope$1()) {
    onScopeDispose$1(removeSubscription);
  }
  return removeSubscription;
}
function triggerSubscriptions(subscriptions, ...args) {
  subscriptions.slice().forEach((callback) => {
    callback(...args);
  });
}
const fallbackRunWithContext = (fn2) => fn2();
function mergeReactiveObjects(target, patchToApply) {
  if (target instanceof Map && patchToApply instanceof Map) {
    patchToApply.forEach((value, key) => target.set(key, value));
  }
  if (target instanceof Set && patchToApply instanceof Set) {
    patchToApply.forEach(target.add, target);
  }
  for (const key in patchToApply) {
    if (!patchToApply.hasOwnProperty(key))
      continue;
    const subPatch = patchToApply[key];
    const targetValue = target[key];
    if (isPlainObject$2(targetValue) && isPlainObject$2(subPatch) && target.hasOwnProperty(key) && !isRef$1(subPatch) && !isReactive$1(subPatch)) {
      target[key] = mergeReactiveObjects(targetValue, subPatch);
    } else {
      target[key] = subPatch;
    }
  }
  return target;
}
const skipHydrateSymbol = Symbol("pinia:skipHydration");
function shouldHydrate(obj) {
  return !isPlainObject$2(obj) || !obj.hasOwnProperty(skipHydrateSymbol);
}
const { assign: assign$6 } = Object;
function isComputed(o2) {
  return !!(isRef$1(o2) && o2.effect);
}
function createOptionsStore(id2, options, pinia, hot) {
  const { state, actions, getters } = options;
  const initialState = pinia.state.value[id2];
  let store;
  function setup() {
    if (!initialState && !hot) {
      {
        pinia.state.value[id2] = state ? state() : {};
      }
    }
    const localState = hot ? (
      // use ref() to unwrap refs inside state TODO: check if this is still necessary
      toRefs(ref$1(state ? state() : {}).value)
    ) : toRefs(pinia.state.value[id2]);
    return assign$6(localState, actions, Object.keys(getters || {}).reduce((computedGetters, name) => {
      if (name in localState) {
        console.warn(`[🍍]: A getter cannot have the same name as another state property. Rename one of them. Found with "${name}" in store "${id2}".`);
      }
      computedGetters[name] = markRaw$1(computed$2(() => {
        setActivePinia(pinia);
        const store2 = pinia._s.get(id2);
        return getters[name].call(store2, store2);
      }));
      return computedGetters;
    }, {}));
  }
  store = createSetupStore(id2, setup, options, pinia, hot, true);
  return store;
}
function createSetupStore($id, setup, options = {}, pinia, hot, isOptionsStore) {
  let scope;
  const optionsForPlugin = assign$6({ actions: {} }, options);
  if (!pinia._e.active) {
    throw new Error("Pinia destroyed");
  }
  const $subscribeOptions = {
    deep: true
    // flush: 'post',
  };
  {
    $subscribeOptions.onTrigger = (event) => {
      if (isListening) {
        debuggerEvents = event;
      } else if (isListening == false && !store._hotUpdating) {
        if (Array.isArray(debuggerEvents)) {
          debuggerEvents.push(event);
        } else {
          console.error("🍍 debuggerEvents should be an array. This is most likely an internal Pinia bug.");
        }
      }
    };
  }
  let isListening;
  let isSyncListening;
  let subscriptions = [];
  let actionSubscriptions = [];
  let debuggerEvents;
  const initialState = pinia.state.value[$id];
  if (!isOptionsStore && !initialState && !hot) {
    {
      pinia.state.value[$id] = {};
    }
  }
  const hotState = ref$1({});
  let activeListener;
  function $patch(partialStateOrMutator) {
    let subscriptionMutation;
    isListening = isSyncListening = false;
    {
      debuggerEvents = [];
    }
    if (typeof partialStateOrMutator === "function") {
      partialStateOrMutator(pinia.state.value[$id]);
      subscriptionMutation = {
        type: MutationType$1.patchFunction,
        storeId: $id,
        events: debuggerEvents
      };
    } else {
      mergeReactiveObjects(pinia.state.value[$id], partialStateOrMutator);
      subscriptionMutation = {
        type: MutationType$1.patchObject,
        payload: partialStateOrMutator,
        storeId: $id,
        events: debuggerEvents
      };
    }
    const myListenerId = activeListener = Symbol();
    nextTick$1().then(() => {
      if (activeListener === myListenerId) {
        isListening = true;
      }
    });
    isSyncListening = true;
    triggerSubscriptions(subscriptions, subscriptionMutation, pinia.state.value[$id]);
  }
  const $reset = isOptionsStore ? function $reset2() {
    const { state } = options;
    const newState = state ? state() : {};
    this.$patch(($state) => {
      assign$6($state, newState);
    });
  } : (
    /* istanbul ignore next */
    () => {
      throw new Error(`🍍: Store "${$id}" is built using the setup syntax and does not implement $reset().`);
    }
  );
  function $dispose() {
    scope.stop();
    subscriptions = [];
    actionSubscriptions = [];
    pinia._s.delete($id);
  }
  function wrapAction(name, action) {
    return function() {
      setActivePinia(pinia);
      const args = Array.from(arguments);
      const afterCallbackList = [];
      const onErrorCallbackList = [];
      function after(callback) {
        afterCallbackList.push(callback);
      }
      function onError(callback) {
        onErrorCallbackList.push(callback);
      }
      triggerSubscriptions(actionSubscriptions, {
        args,
        name,
        store,
        after,
        onError
      });
      let ret;
      try {
        ret = action.apply(this && this.$id === $id ? this : store, args);
      } catch (error) {
        triggerSubscriptions(onErrorCallbackList, error);
        throw error;
      }
      if (ret instanceof Promise) {
        return ret.then((value) => {
          triggerSubscriptions(afterCallbackList, value);
          return value;
        }).catch((error) => {
          triggerSubscriptions(onErrorCallbackList, error);
          return Promise.reject(error);
        });
      }
      triggerSubscriptions(afterCallbackList, ret);
      return ret;
    };
  }
  const _hmrPayload = /* @__PURE__ */ markRaw$1({
    actions: {},
    getters: {},
    state: [],
    hotState
  });
  const partialStore = {
    _p: pinia,
    // _s: scope,
    $id,
    $onAction: addSubscription.bind(null, actionSubscriptions),
    $patch,
    $reset,
    $subscribe(callback, options2 = {}) {
      const removeSubscription = addSubscription(subscriptions, callback, options2.detached, () => stopWatcher());
      const stopWatcher = scope.run(() => watch$1(() => pinia.state.value[$id], (state) => {
        if (options2.flush === "sync" ? isSyncListening : isListening) {
          callback({
            storeId: $id,
            type: MutationType$1.direct,
            events: debuggerEvents
          }, state);
        }
      }, assign$6({}, $subscribeOptions, options2)));
      return removeSubscription;
    },
    $dispose
  };
  const store = reactive$1(assign$6(
    {
      _hmrPayload,
      _customProperties: markRaw$1(/* @__PURE__ */ new Set())
      // devtools custom properties
    },
    partialStore
    // must be added later
    // setupStore
  ));
  pinia._s.set($id, store);
  const runWithContext = pinia._a && pinia._a.runWithContext || fallbackRunWithContext;
  const setupStore = runWithContext(() => pinia._e.run(() => (scope = effectScope$1()).run(setup)));
  for (const key in setupStore) {
    const prop = setupStore[key];
    if (isRef$1(prop) && !isComputed(prop) || isReactive$1(prop)) {
      if (hot) {
        set$2(hotState.value, key, toRef$1(setupStore, key));
      } else if (!isOptionsStore) {
        if (initialState && shouldHydrate(prop)) {
          if (isRef$1(prop)) {
            prop.value = initialState[key];
          } else {
            mergeReactiveObjects(prop, initialState[key]);
          }
        }
        {
          pinia.state.value[$id][key] = prop;
        }
      }
      {
        _hmrPayload.state.push(key);
      }
    } else if (typeof prop === "function") {
      const actionValue = hot ? prop : wrapAction(key, prop);
      {
        setupStore[key] = actionValue;
      }
      {
        _hmrPayload.actions[key] = prop;
      }
      optionsForPlugin.actions[key] = prop;
    } else {
      if (isComputed(prop)) {
        _hmrPayload.getters[key] = isOptionsStore ? (
          // @ts-expect-error
          options.getters[key]
        ) : prop;
        if (IS_CLIENT$1) {
          const getters = setupStore._getters || // @ts-expect-error: same
          (setupStore._getters = markRaw$1([]));
          getters.push(key);
        }
      }
    }
  }
  {
    assign$6(store, setupStore);
    assign$6(toRaw$1(store), setupStore);
  }
  Object.defineProperty(store, "$state", {
    get: () => hot ? hotState.value : pinia.state.value[$id],
    set: (state) => {
      if (hot) {
        throw new Error("cannot set hotState");
      }
      $patch(($state) => {
        assign$6($state, state);
      });
    }
  });
  {
    store._hotUpdate = markRaw$1((newStore) => {
      store._hotUpdating = true;
      newStore._hmrPayload.state.forEach((stateKey) => {
        if (stateKey in store.$state) {
          const newStateTarget = newStore.$state[stateKey];
          const oldStateSource = store.$state[stateKey];
          if (typeof newStateTarget === "object" && isPlainObject$2(newStateTarget) && isPlainObject$2(oldStateSource)) {
            patchObject(newStateTarget, oldStateSource);
          } else {
            newStore.$state[stateKey] = oldStateSource;
          }
        }
        set$2(store, stateKey, toRef$1(newStore.$state, stateKey));
      });
      Object.keys(store.$state).forEach((stateKey) => {
        if (!(stateKey in newStore.$state)) {
          del(store, stateKey);
        }
      });
      isListening = false;
      isSyncListening = false;
      pinia.state.value[$id] = toRef$1(newStore._hmrPayload, "hotState");
      isSyncListening = true;
      nextTick$1().then(() => {
        isListening = true;
      });
      for (const actionName in newStore._hmrPayload.actions) {
        const action = newStore[actionName];
        set$2(store, actionName, wrapAction(actionName, action));
      }
      for (const getterName in newStore._hmrPayload.getters) {
        const getter = newStore._hmrPayload.getters[getterName];
        const getterValue = isOptionsStore ? (
          // special handling of options api
          computed$2(() => {
            setActivePinia(pinia);
            return getter.call(store, store);
          })
        ) : getter;
        set$2(store, getterName, getterValue);
      }
      Object.keys(store._hmrPayload.getters).forEach((key) => {
        if (!(key in newStore._hmrPayload.getters)) {
          del(store, key);
        }
      });
      Object.keys(store._hmrPayload.actions).forEach((key) => {
        if (!(key in newStore._hmrPayload.actions)) {
          del(store, key);
        }
      });
      store._hmrPayload = newStore._hmrPayload;
      store._getters = newStore._getters;
      store._hotUpdating = false;
    });
  }
  if (USE_DEVTOOLS$1) {
    const nonEnumerable = {
      writable: true,
      configurable: true,
      // avoid warning on devtools trying to display this property
      enumerable: false
    };
    ["_p", "_hmrPayload", "_getters", "_customProperties"].forEach((p2) => {
      Object.defineProperty(store, p2, assign$6({ value: store[p2] }, nonEnumerable));
    });
  }
  pinia._p.forEach((extender) => {
    if (USE_DEVTOOLS$1) {
      const extensions = scope.run(() => extender({
        store,
        app: pinia._a,
        pinia,
        options: optionsForPlugin
      }));
      Object.keys(extensions || {}).forEach((key) => store._customProperties.add(key));
      assign$6(store, extensions);
    } else {
      assign$6(store, scope.run(() => extender({
        store,
        app: pinia._a,
        pinia,
        options: optionsForPlugin
      })));
    }
  });
  if (store.$state && typeof store.$state === "object" && typeof store.$state.constructor === "function" && !store.$state.constructor.toString().includes("[native code]")) {
    console.warn(`[🍍]: The "state" must be a plain object. It cannot be
	state: () => new MyClass()
Found in store "${store.$id}".`);
  }
  if (initialState && isOptionsStore && options.hydrate) {
    options.hydrate(store.$state, initialState);
  }
  isListening = true;
  isSyncListening = true;
  return store;
}
function defineStore(idOrOptions, setup, setupOptions) {
  let id2;
  let options;
  const isSetupStore = typeof setup === "function";
  if (typeof idOrOptions === "string") {
    id2 = idOrOptions;
    options = isSetupStore ? setupOptions : setup;
  } else {
    options = idOrOptions;
    id2 = idOrOptions.id;
    if (typeof id2 !== "string") {
      throw new Error(`[🍍]: "defineStore()" must be passed a store id as its first argument.`);
    }
  }
  function useStore(pinia, hot) {
    const hasContext = hasInjectionContext();
    pinia = // in test mode, ignore the argument provided as we can always retrieve a
    // pinia instance with getActivePinia()
    pinia || (hasContext ? inject$1(piniaSymbol$1, null) : null);
    if (pinia)
      setActivePinia(pinia);
    if (!activePinia) {
      throw new Error(`[🍍]: "getActivePinia()" was called but there was no active Pinia. Are you trying to use a store before calling "app.use(pinia)"?
See https://pinia.vuejs.org/core-concepts/outside-component-usage.html for help.
This will fail in production.`);
    }
    pinia = activePinia;
    if (!pinia._s.has(id2)) {
      if (isSetupStore) {
        createSetupStore(id2, setup, options, pinia);
      } else {
        createOptionsStore(id2, options, pinia);
      }
      {
        useStore._pinia = pinia;
      }
    }
    const store = pinia._s.get(id2);
    if (hot) {
      const hotId = "__hot:" + id2;
      const newStore = isSetupStore ? createSetupStore(hotId, setup, options, pinia, true) : createOptionsStore(hotId, assign$6({}, options), pinia, true);
      hot._hotUpdate(newStore);
      delete pinia.state.value[hotId];
      pinia._s.delete(hotId);
    }
    if (IS_CLIENT$1) {
      const currentInstance2 = getCurrentInstance$1();
      if (currentInstance2 && currentInstance2.proxy && // avoid adding stores that are just built for hot module replacement
      !hot) {
        const vm2 = currentInstance2.proxy;
        const cache2 = "_pStores" in vm2 ? vm2._pStores : vm2._pStores = {};
        cache2[id2] = store;
      }
    }
    return store;
  }
  useStore.$id = id2;
  return useStore;
}
function getBasePlacement(placement) {
  return placement.split("-")[0];
}
function getAlignment$1(placement) {
  return placement.split("-")[1];
}
function getMainAxisFromPlacement(placement) {
  return ["top", "bottom"].includes(getBasePlacement(placement)) ? "x" : "y";
}
function getLengthFromAxis(axis) {
  return axis === "y" ? "height" : "width";
}
function computeCoordsFromPlacement$1(_ref) {
  let {
    reference,
    floating,
    placement
  } = _ref;
  const commonX = reference.x + reference.width / 2 - floating.width / 2;
  const commonY = reference.y + reference.height / 2 - floating.height / 2;
  let coords;
  switch (getBasePlacement(placement)) {
    case "top":
      coords = {
        x: commonX,
        y: reference.y - floating.height
      };
      break;
    case "bottom":
      coords = {
        x: commonX,
        y: reference.y + reference.height
      };
      break;
    case "right":
      coords = {
        x: reference.x + reference.width,
        y: commonY
      };
      break;
    case "left":
      coords = {
        x: reference.x - floating.width,
        y: commonY
      };
      break;
    default:
      coords = {
        x: reference.x,
        y: reference.y
      };
  }
  const mainAxis = getMainAxisFromPlacement(placement);
  const length = getLengthFromAxis(mainAxis);
  switch (getAlignment$1(placement)) {
    case "start":
      coords[mainAxis] = coords[mainAxis] - (reference[length] / 2 - floating[length] / 2);
      break;
    case "end":
      coords[mainAxis] = coords[mainAxis] + (reference[length] / 2 - floating[length] / 2);
      break;
  }
  return coords;
}
const computePosition$1$1 = async (reference, floating, config2) => {
  const {
    placement = "bottom",
    strategy = "absolute",
    middleware = [],
    platform: platform2
  } = config2;
  {
    if (platform2 == null) {
      console.error(["Floating UI: `platform` property was not passed to config. If you", "want to use Floating UI on the web, install @floating-ui/dom", "instead of the /core package. Otherwise, you can create your own", "`platform`: https://floating-ui.com/docs/platform"].join(" "));
    }
    if (middleware.filter((_ref) => {
      let {
        name
      } = _ref;
      return name === "autoPlacement" || name === "flip";
    }).length > 1) {
      throw new Error(["Floating UI: duplicate `flip` and/or `autoPlacement`", "middleware detected. This will lead to an infinite loop. Ensure only", "one of either has been passed to the `middleware` array."].join(" "));
    }
  }
  let rects = await platform2.getElementRects({
    reference,
    floating,
    strategy
  });
  let {
    x: x3,
    y: y4
  } = computeCoordsFromPlacement$1({
    ...rects,
    placement
  });
  let statefulPlacement = placement;
  let middlewareData = {};
  let _debug_loop_count_ = 0;
  for (let i3 = 0; i3 < middleware.length; i3++) {
    {
      _debug_loop_count_++;
      if (_debug_loop_count_ > 100) {
        throw new Error(["Floating UI: The middleware lifecycle appears to be", "running in an infinite loop. This is usually caused by a `reset`", "continually being returned without a break condition."].join(" "));
      }
    }
    const {
      name,
      fn: fn2
    } = middleware[i3];
    const {
      x: nextX,
      y: nextY,
      data,
      reset
    } = await fn2({
      x: x3,
      y: y4,
      initialPlacement: placement,
      placement: statefulPlacement,
      strategy,
      middlewareData,
      rects,
      platform: platform2,
      elements: {
        reference,
        floating
      }
    });
    x3 = nextX != null ? nextX : x3;
    y4 = nextY != null ? nextY : y4;
    middlewareData = {
      ...middlewareData,
      [name]: data != null ? data : {}
    };
    if (reset) {
      if (typeof reset === "object") {
        if (reset.placement) {
          statefulPlacement = reset.placement;
        }
        if (reset.rects) {
          rects = reset.rects === true ? await platform2.getElementRects({
            reference,
            floating,
            strategy
          }) : reset.rects;
        }
        ({
          x: x3,
          y: y4
        } = computeCoordsFromPlacement$1({
          ...rects,
          placement: statefulPlacement
        }));
      }
      i3 = -1;
      continue;
    }
  }
  return {
    x: x3,
    y: y4,
    placement: statefulPlacement,
    strategy,
    middlewareData
  };
};
function expandPaddingObject$1(padding) {
  return {
    top: 0,
    right: 0,
    bottom: 0,
    left: 0,
    ...padding
  };
}
function getSideObjectFromPadding(padding) {
  return typeof padding !== "number" ? expandPaddingObject$1(padding) : {
    top: padding,
    right: padding,
    bottom: padding,
    left: padding
  };
}
function rectToClientRect$1(rect) {
  return {
    ...rect,
    top: rect.y,
    left: rect.x,
    right: rect.x + rect.width,
    bottom: rect.y + rect.height
  };
}
async function detectOverflow$1(middlewareArguments, options2) {
  if (options2 === void 0) {
    options2 = {};
  }
  const {
    x: x3,
    y: y4,
    platform: platform2,
    rects,
    elements,
    strategy
  } = middlewareArguments;
  const {
    boundary = "clippingParents",
    rootBoundary = "viewport",
    elementContext = "floating",
    altBoundary = false,
    padding = 0
  } = options2;
  const paddingObject = getSideObjectFromPadding(padding);
  const altContext = elementContext === "floating" ? "reference" : "floating";
  const element = elements[altBoundary ? altContext : elementContext];
  const clippingClientRect = await platform2.getClippingClientRect({
    element: await platform2.isElement(element) ? element : element.contextElement || await platform2.getDocumentElement({
      element: elements.floating
    }),
    boundary,
    rootBoundary
  });
  const elementClientRect = rectToClientRect$1(await platform2.convertOffsetParentRelativeRectToViewportRelativeRect({
    rect: elementContext === "floating" ? {
      ...rects.floating,
      x: x3,
      y: y4
    } : rects.reference,
    offsetParent: await platform2.getOffsetParent({
      element: elements.floating
    }),
    strategy
  }));
  return {
    top: clippingClientRect.top - elementClientRect.top + paddingObject.top,
    bottom: elementClientRect.bottom - clippingClientRect.bottom + paddingObject.bottom,
    left: clippingClientRect.left - elementClientRect.left + paddingObject.left,
    right: elementClientRect.right - clippingClientRect.right + paddingObject.right
  };
}
const min$1 = Math.min;
const max$1 = Math.max;
function within(min$1$1, value, max$1$1) {
  return max$1(min$1$1, min$1(value, max$1$1));
}
const arrow$3 = (options2) => ({
  name: "arrow",
  options: options2,
  async fn(middlewareArguments) {
    const {
      element,
      padding = 0
    } = options2 != null ? options2 : {};
    const {
      x: x3,
      y: y4,
      placement,
      rects,
      platform: platform2
    } = middlewareArguments;
    if (element == null) {
      {
        console.warn("Floating UI: No `element` was passed to the `arrow` middleware.");
      }
      return {};
    }
    const paddingObject = getSideObjectFromPadding(padding);
    const coords = {
      x: x3,
      y: y4
    };
    const basePlacement = getBasePlacement(placement);
    const axis = getMainAxisFromPlacement(basePlacement);
    const length = getLengthFromAxis(axis);
    const arrowDimensions = await platform2.getDimensions({
      element
    });
    const minProp = axis === "y" ? "top" : "left";
    const maxProp = axis === "y" ? "bottom" : "right";
    const endDiff = rects.reference[length] + rects.reference[axis] - coords[axis] - rects.floating[length];
    const startDiff = coords[axis] - rects.reference[axis];
    const arrowOffsetParent = await platform2.getOffsetParent({
      element
    });
    const clientSize = arrowOffsetParent ? axis === "y" ? arrowOffsetParent.clientHeight || 0 : arrowOffsetParent.clientWidth || 0 : 0;
    const centerToReference = endDiff / 2 - startDiff / 2;
    const min2 = paddingObject[minProp];
    const max2 = clientSize - arrowDimensions[length] - paddingObject[maxProp];
    const center = clientSize / 2 - arrowDimensions[length] / 2 + centerToReference;
    const offset2 = within(min2, center, max2);
    return {
      data: {
        [axis]: offset2,
        centerOffset: center - offset2
      }
    };
  }
});
const hash$1 = {
  left: "right",
  right: "left",
  bottom: "top",
  top: "bottom"
};
function getOppositePlacement$1(placement) {
  return placement.replace(/left|right|bottom|top/g, (matched) => hash$1[matched]);
}
function getAlignmentSides$1(placement, rects) {
  const isStart = getAlignment$1(placement) === "start";
  const mainAxis = getMainAxisFromPlacement(placement);
  const length = getLengthFromAxis(mainAxis);
  let mainAlignmentSide = mainAxis === "x" ? isStart ? "right" : "left" : isStart ? "bottom" : "top";
  if (rects.reference[length] > rects.floating[length]) {
    mainAlignmentSide = getOppositePlacement$1(mainAlignmentSide);
  }
  return {
    main: mainAlignmentSide,
    cross: getOppositePlacement$1(mainAlignmentSide)
  };
}
const hash = {
  start: "end",
  end: "start"
};
function getOppositeAlignmentPlacement$1(placement) {
  return placement.replace(/start|end/g, (matched) => hash[matched]);
}
const basePlacements = ["top", "right", "bottom", "left"];
const allPlacements = /* @__PURE__ */ basePlacements.reduce((acc, basePlacement) => acc.concat(basePlacement, basePlacement + "-start", basePlacement + "-end"), []);
function getPlacementList$1(alignment, autoAlignment, allowedPlacements) {
  const allowedPlacementsSortedByAlignment = alignment ? [...allowedPlacements.filter((placement) => getAlignment$1(placement) === alignment), ...allowedPlacements.filter((placement) => getAlignment$1(placement) !== alignment)] : allowedPlacements.filter((placement) => getBasePlacement(placement) === placement);
  return allowedPlacementsSortedByAlignment.filter((placement) => {
    if (alignment) {
      return getAlignment$1(placement) === alignment || (autoAlignment ? getOppositeAlignmentPlacement$1(placement) !== placement : false);
    }
    return true;
  });
}
const autoPlacement$2 = function(options2) {
  if (options2 === void 0) {
    options2 = {};
  }
  return {
    name: "autoPlacement",
    options: options2,
    async fn(middlewareArguments) {
      var _middlewareData$autoP, _middlewareData$autoP2, _middlewareData$autoP3, _middlewareData$autoP4, _middlewareData$autoP5, _placementsSortedByLe;
      const {
        x: x3,
        y: y4,
        rects,
        middlewareData,
        placement
      } = middlewareArguments;
      const {
        alignment = null,
        allowedPlacements = allPlacements,
        autoAlignment = true,
        ...detectOverflowOptions
      } = options2;
      if ((_middlewareData$autoP = middlewareData.autoPlacement) != null && _middlewareData$autoP.skip) {
        return {};
      }
      const placements2 = getPlacementList$1(alignment, autoAlignment, allowedPlacements);
      const overflow = await detectOverflow$1(middlewareArguments, detectOverflowOptions);
      const currentIndex = (_middlewareData$autoP2 = (_middlewareData$autoP3 = middlewareData.autoPlacement) == null ? void 0 : _middlewareData$autoP3.index) != null ? _middlewareData$autoP2 : 0;
      const currentPlacement = placements2[currentIndex];
      const {
        main: main2,
        cross
      } = getAlignmentSides$1(currentPlacement, rects);
      if (placement !== currentPlacement) {
        return {
          x: x3,
          y: y4,
          reset: {
            placement: placements2[0]
          }
        };
      }
      const currentOverflows = [overflow[getBasePlacement(currentPlacement)], overflow[main2], overflow[cross]];
      const allOverflows = [...(_middlewareData$autoP4 = (_middlewareData$autoP5 = middlewareData.autoPlacement) == null ? void 0 : _middlewareData$autoP5.overflows) != null ? _middlewareData$autoP4 : [], {
        placement: currentPlacement,
        overflows: currentOverflows
      }];
      const nextPlacement = placements2[currentIndex + 1];
      if (nextPlacement) {
        return {
          data: {
            index: currentIndex + 1,
            overflows: allOverflows
          },
          reset: {
            placement: nextPlacement
          }
        };
      }
      const placementsSortedByLeastOverflow = allOverflows.slice().sort((a4, b4) => a4.overflows[0] - b4.overflows[0]);
      const placementThatFitsOnAllSides = (_placementsSortedByLe = placementsSortedByLeastOverflow.find((_ref) => {
        let {
          overflows
        } = _ref;
        return overflows.every((overflow2) => overflow2 <= 0);
      })) == null ? void 0 : _placementsSortedByLe.placement;
      return {
        data: {
          skip: true
        },
        reset: {
          placement: placementThatFitsOnAllSides != null ? placementThatFitsOnAllSides : placementsSortedByLeastOverflow[0].placement
        }
      };
    }
  };
};
function getExpandedPlacements$1(placement) {
  const oppositePlacement = getOppositePlacement$1(placement);
  return [getOppositeAlignmentPlacement$1(placement), oppositePlacement, getOppositeAlignmentPlacement$1(oppositePlacement)];
}
const flip$2 = function(options2) {
  if (options2 === void 0) {
    options2 = {};
  }
  return {
    name: "flip",
    options: options2,
    async fn(middlewareArguments) {
      var _middlewareData$flip, _middlewareData$flip2;
      const {
        placement,
        middlewareData,
        rects,
        initialPlacement
      } = middlewareArguments;
      if ((_middlewareData$flip = middlewareData.flip) != null && _middlewareData$flip.skip) {
        return {};
      }
      const {
        mainAxis: checkMainAxis = true,
        crossAxis: checkCrossAxis = true,
        fallbackPlacements: specifiedFallbackPlacements,
        fallbackStrategy = "bestFit",
        flipAlignment = true,
        ...detectOverflowOptions
      } = options2;
      const basePlacement = getBasePlacement(placement);
      const isBasePlacement = basePlacement === initialPlacement;
      const fallbackPlacements = specifiedFallbackPlacements || (isBasePlacement || !flipAlignment ? [getOppositePlacement$1(initialPlacement)] : getExpandedPlacements$1(initialPlacement));
      const placements2 = [initialPlacement, ...fallbackPlacements];
      const overflow = await detectOverflow$1(middlewareArguments, detectOverflowOptions);
      const overflows = [];
      let overflowsData = ((_middlewareData$flip2 = middlewareData.flip) == null ? void 0 : _middlewareData$flip2.overflows) || [];
      if (checkMainAxis) {
        overflows.push(overflow[basePlacement]);
      }
      if (checkCrossAxis) {
        const {
          main: main2,
          cross
        } = getAlignmentSides$1(placement, rects);
        overflows.push(overflow[main2], overflow[cross]);
      }
      overflowsData = [...overflowsData, {
        placement,
        overflows
      }];
      if (!overflows.every((side) => side <= 0)) {
        var _middlewareData$flip$, _middlewareData$flip3;
        const nextIndex = ((_middlewareData$flip$ = (_middlewareData$flip3 = middlewareData.flip) == null ? void 0 : _middlewareData$flip3.index) != null ? _middlewareData$flip$ : 0) + 1;
        const nextPlacement = placements2[nextIndex];
        if (nextPlacement) {
          return {
            data: {
              index: nextIndex,
              overflows: overflowsData
            },
            reset: {
              placement: nextPlacement
            }
          };
        }
        let resetPlacement = "bottom";
        switch (fallbackStrategy) {
          case "bestFit": {
            var _overflowsData$slice$;
            const placement2 = (_overflowsData$slice$ = overflowsData.slice().sort((a4, b4) => a4.overflows.filter((overflow2) => overflow2 > 0).reduce((acc, overflow2) => acc + overflow2, 0) - b4.overflows.filter((overflow2) => overflow2 > 0).reduce((acc, overflow2) => acc + overflow2, 0))[0]) == null ? void 0 : _overflowsData$slice$.placement;
            if (placement2) {
              resetPlacement = placement2;
            }
            break;
          }
          case "initialPlacement":
            resetPlacement = initialPlacement;
            break;
        }
        return {
          data: {
            skip: true
          },
          reset: {
            placement: resetPlacement
          }
        };
      }
      return {};
    }
  };
};
function convertValueToCoords$1(_ref) {
  let {
    placement,
    rects,
    value
  } = _ref;
  const basePlacement = getBasePlacement(placement);
  const multiplier = ["left", "top"].includes(basePlacement) ? -1 : 1;
  const rawValue = typeof value === "function" ? value({
    ...rects,
    placement
  }) : value;
  const {
    mainAxis,
    crossAxis
  } = typeof rawValue === "number" ? {
    mainAxis: rawValue,
    crossAxis: 0
  } : {
    mainAxis: 0,
    crossAxis: 0,
    ...rawValue
  };
  return getMainAxisFromPlacement(basePlacement) === "x" ? {
    x: crossAxis,
    y: mainAxis * multiplier
  } : {
    x: mainAxis * multiplier,
    y: crossAxis
  };
}
const offset$1 = function(value) {
  if (value === void 0) {
    value = 0;
  }
  return {
    name: "offset",
    options: value,
    fn(middlewareArguments) {
      const {
        x: x3,
        y: y4,
        placement,
        rects
      } = middlewareArguments;
      const diffCoords = convertValueToCoords$1({
        placement,
        rects,
        value
      });
      return {
        x: x3 + diffCoords.x,
        y: y4 + diffCoords.y,
        data: diffCoords
      };
    }
  };
};
function getCrossAxis(axis) {
  return axis === "x" ? "y" : "x";
}
const shift$2 = function(options2) {
  if (options2 === void 0) {
    options2 = {};
  }
  return {
    name: "shift",
    options: options2,
    async fn(middlewareArguments) {
      const {
        x: x3,
        y: y4,
        placement
      } = middlewareArguments;
      const {
        mainAxis: checkMainAxis = true,
        crossAxis: checkCrossAxis = false,
        limiter = {
          fn: (_ref) => {
            let {
              x: x22,
              y: y22
            } = _ref;
            return {
              x: x22,
              y: y22
            };
          }
        },
        ...detectOverflowOptions
      } = options2;
      const coords = {
        x: x3,
        y: y4
      };
      const overflow = await detectOverflow$1(middlewareArguments, detectOverflowOptions);
      const mainAxis = getMainAxisFromPlacement(getBasePlacement(placement));
      const crossAxis = getCrossAxis(mainAxis);
      let mainAxisCoord = coords[mainAxis];
      let crossAxisCoord = coords[crossAxis];
      if (checkMainAxis) {
        const minSide = mainAxis === "y" ? "top" : "left";
        const maxSide = mainAxis === "y" ? "bottom" : "right";
        const min2 = mainAxisCoord + overflow[minSide];
        const max2 = mainAxisCoord - overflow[maxSide];
        mainAxisCoord = within(min2, mainAxisCoord, max2);
      }
      if (checkCrossAxis) {
        const minSide = crossAxis === "y" ? "top" : "left";
        const maxSide = crossAxis === "y" ? "bottom" : "right";
        const min2 = crossAxisCoord + overflow[minSide];
        const max2 = crossAxisCoord - overflow[maxSide];
        crossAxisCoord = within(min2, crossAxisCoord, max2);
      }
      const limitedCoords = limiter.fn({
        ...middlewareArguments,
        [mainAxis]: mainAxisCoord,
        [crossAxis]: crossAxisCoord
      });
      return {
        ...limitedCoords,
        data: {
          x: limitedCoords.x - x3,
          y: limitedCoords.y - y4
        }
      };
    }
  };
};
const size$1 = function(options2) {
  if (options2 === void 0) {
    options2 = {};
  }
  return {
    name: "size",
    options: options2,
    async fn(middlewareArguments) {
      var _middlewareData$size;
      const {
        placement,
        rects,
        middlewareData
      } = middlewareArguments;
      const {
        apply: apply2,
        ...detectOverflowOptions
      } = options2;
      if ((_middlewareData$size = middlewareData.size) != null && _middlewareData$size.skip) {
        return {};
      }
      const overflow = await detectOverflow$1(middlewareArguments, detectOverflowOptions);
      const basePlacement = getBasePlacement(placement);
      const isEnd = getAlignment$1(placement) === "end";
      let heightSide;
      let widthSide;
      if (basePlacement === "top" || basePlacement === "bottom") {
        heightSide = basePlacement;
        widthSide = isEnd ? "left" : "right";
      } else {
        widthSide = basePlacement;
        heightSide = isEnd ? "top" : "bottom";
      }
      const xMin = max$1(overflow.left, 0);
      const xMax = max$1(overflow.right, 0);
      const yMin = max$1(overflow.top, 0);
      const yMax = max$1(overflow.bottom, 0);
      const dimensions = {
        height: rects.floating.height - (["left", "right"].includes(placement) ? 2 * (yMin !== 0 || yMax !== 0 ? yMin + yMax : max$1(overflow.top, overflow.bottom)) : overflow[heightSide]),
        width: rects.floating.width - (["top", "bottom"].includes(placement) ? 2 * (xMin !== 0 || xMax !== 0 ? xMin + xMax : max$1(overflow.left, overflow.right)) : overflow[widthSide])
      };
      apply2 == null ? void 0 : apply2({
        ...dimensions,
        ...rects
      });
      return {
        data: {
          skip: true
        },
        reset: {
          rects: true
        }
      };
    }
  };
};
function isWindow(value) {
  return (value == null ? void 0 : value.toString()) === "[object Window]";
}
function getWindow$1(node) {
  if (node == null) {
    return window;
  }
  if (!isWindow(node)) {
    const ownerDocument = node.ownerDocument;
    return ownerDocument ? ownerDocument.defaultView || window : window;
  }
  return node;
}
function getComputedStyle$1$1(element) {
  return getWindow$1(element).getComputedStyle(element);
}
function getNodeName$1(node) {
  return isWindow(node) ? "" : node ? (node.nodeName || "").toLowerCase() : "";
}
function isHTMLElement$1(value) {
  return value instanceof getWindow$1(value).HTMLElement;
}
function isElement$1(value) {
  return value instanceof getWindow$1(value).Element;
}
function isNode$1(value) {
  return value instanceof getWindow$1(value).Node;
}
function isShadowRoot$1(node) {
  const OwnElement = getWindow$1(node).ShadowRoot;
  return node instanceof OwnElement || node instanceof ShadowRoot;
}
function isScrollParent(element) {
  const {
    overflow,
    overflowX,
    overflowY
  } = getComputedStyle$1$1(element);
  return /auto|scroll|overlay|hidden/.test(overflow + overflowY + overflowX);
}
function isTableElement$1(element) {
  return ["table", "td", "th"].includes(getNodeName$1(element));
}
function isContainingBlock$1(element) {
  const isFirefox = navigator.userAgent.toLowerCase().includes("firefox");
  const css = getComputedStyle$1$1(element);
  return css.transform !== "none" || css.perspective !== "none" || css.contain === "paint" || ["transform", "perspective"].includes(css.willChange) || isFirefox && css.willChange === "filter" || isFirefox && (css.filter ? css.filter !== "none" : false);
}
const min$2 = Math.min;
const max$2 = Math.max;
const round$1 = Math.round;
function getBoundingClientRect$1(element, includeScale) {
  if (includeScale === void 0) {
    includeScale = false;
  }
  const clientRect = element.getBoundingClientRect();
  let scaleX = 1;
  let scaleY = 1;
  if (includeScale && isHTMLElement$1(element)) {
    scaleX = element.offsetWidth > 0 ? round$1(clientRect.width) / element.offsetWidth || 1 : 1;
    scaleY = element.offsetHeight > 0 ? round$1(clientRect.height) / element.offsetHeight || 1 : 1;
  }
  return {
    width: clientRect.width / scaleX,
    height: clientRect.height / scaleY,
    top: clientRect.top / scaleY,
    right: clientRect.right / scaleX,
    bottom: clientRect.bottom / scaleY,
    left: clientRect.left / scaleX,
    x: clientRect.left / scaleX,
    y: clientRect.top / scaleY
  };
}
function getDocumentElement$1(node) {
  return ((isNode$1(node) ? node.ownerDocument : node.document) || window.document).documentElement;
}
function getNodeScroll$1(element) {
  if (isWindow(element)) {
    return {
      scrollLeft: element.pageXOffset,
      scrollTop: element.pageYOffset
    };
  }
  return {
    scrollLeft: element.scrollLeft,
    scrollTop: element.scrollTop
  };
}
function getWindowScrollBarX$1(element) {
  return getBoundingClientRect$1(getDocumentElement$1(element)).left + getNodeScroll$1(element).scrollLeft;
}
function isScaled(element) {
  const rect = getBoundingClientRect$1(element);
  return round$1(rect.width) !== element.offsetWidth || round$1(rect.height) !== element.offsetHeight;
}
function getRectRelativeToOffsetParent$1(element, offsetParent, strategy) {
  const isOffsetParentAnElement = isHTMLElement$1(offsetParent);
  const documentElement = getDocumentElement$1(offsetParent);
  const rect = getBoundingClientRect$1(element, isOffsetParentAnElement && isScaled(offsetParent));
  let scroll = {
    scrollLeft: 0,
    scrollTop: 0
  };
  const offsets = {
    x: 0,
    y: 0
  };
  if (isOffsetParentAnElement || !isOffsetParentAnElement && strategy !== "fixed") {
    if (getNodeName$1(offsetParent) !== "body" || isScrollParent(documentElement)) {
      scroll = getNodeScroll$1(offsetParent);
    }
    if (isHTMLElement$1(offsetParent)) {
      const offsetRect = getBoundingClientRect$1(offsetParent, true);
      offsets.x = offsetRect.x + offsetParent.clientLeft;
      offsets.y = offsetRect.y + offsetParent.clientTop;
    } else if (documentElement) {
      offsets.x = getWindowScrollBarX$1(documentElement);
    }
  }
  return {
    x: rect.left + scroll.scrollLeft - offsets.x,
    y: rect.top + scroll.scrollTop - offsets.y,
    width: rect.width,
    height: rect.height
  };
}
function getParentNode$1(node) {
  if (getNodeName$1(node) === "html") {
    return node;
  }
  return (
    // this is a quicker (but less type safe) way to save quite some bytes from the bundle
    // @ts-ignore
    node.assignedSlot || // step into the shadow DOM of the parent of a slotted node
    node.parentNode || // DOM Element detected
    (isShadowRoot$1(node) ? node.host : null) || // ShadowRoot detected
    getDocumentElement$1(node)
  );
}
function getTrueOffsetParent$1(element) {
  if (!isHTMLElement$1(element) || getComputedStyle(element).position === "fixed") {
    return null;
  }
  return element.offsetParent;
}
function getContainingBlock$1(element) {
  let currentNode = getParentNode$1(element);
  while (isHTMLElement$1(currentNode) && !["html", "body"].includes(getNodeName$1(currentNode))) {
    if (isContainingBlock$1(currentNode)) {
      return currentNode;
    } else {
      currentNode = currentNode.parentNode;
    }
  }
  return null;
}
function getOffsetParent$1(element) {
  const window2 = getWindow$1(element);
  let offsetParent = getTrueOffsetParent$1(element);
  while (offsetParent && isTableElement$1(offsetParent) && getComputedStyle(offsetParent).position === "static") {
    offsetParent = getTrueOffsetParent$1(offsetParent);
  }
  if (offsetParent && (getNodeName$1(offsetParent) === "html" || getNodeName$1(offsetParent) === "body" && getComputedStyle(offsetParent).position === "static" && !isContainingBlock$1(offsetParent))) {
    return window2;
  }
  return offsetParent || getContainingBlock$1(element) || window2;
}
function getDimensions$1(element) {
  return {
    width: element.offsetWidth,
    height: element.offsetHeight
  };
}
function convertOffsetParentRelativeRectToViewportRelativeRect$1(_ref) {
  let {
    rect,
    offsetParent,
    strategy
  } = _ref;
  const isOffsetParentAnElement = isHTMLElement$1(offsetParent);
  const documentElement = getDocumentElement$1(offsetParent);
  if (offsetParent === documentElement) {
    return rect;
  }
  let scroll = {
    scrollLeft: 0,
    scrollTop: 0
  };
  const offsets = {
    x: 0,
    y: 0
  };
  if (isOffsetParentAnElement || !isOffsetParentAnElement && strategy !== "fixed") {
    if (getNodeName$1(offsetParent) !== "body" || isScrollParent(documentElement)) {
      scroll = getNodeScroll$1(offsetParent);
    }
    if (isHTMLElement$1(offsetParent)) {
      const offsetRect = getBoundingClientRect$1(offsetParent, true);
      offsets.x = offsetRect.x + offsetParent.clientLeft;
      offsets.y = offsetRect.y + offsetParent.clientTop;
    }
  }
  return {
    ...rect,
    x: rect.x - scroll.scrollLeft + offsets.x,
    y: rect.y - scroll.scrollTop + offsets.y
  };
}
function getViewportRect$1(element) {
  const win = getWindow$1(element);
  const html = getDocumentElement$1(element);
  const visualViewport = win.visualViewport;
  let width = html.clientWidth;
  let height = html.clientHeight;
  let x3 = 0;
  let y4 = 0;
  if (visualViewport) {
    width = visualViewport.width;
    height = visualViewport.height;
    if (Math.abs(win.innerWidth / visualViewport.scale - visualViewport.width) < 0.01) {
      x3 = visualViewport.offsetLeft;
      y4 = visualViewport.offsetTop;
    }
  }
  return {
    width,
    height,
    x: x3,
    y: y4
  };
}
function getDocumentRect$1(element) {
  var _element$ownerDocumen;
  const html = getDocumentElement$1(element);
  const scroll = getNodeScroll$1(element);
  const body = (_element$ownerDocumen = element.ownerDocument) == null ? void 0 : _element$ownerDocumen.body;
  const width = max$2(html.scrollWidth, html.clientWidth, body ? body.scrollWidth : 0, body ? body.clientWidth : 0);
  const height = max$2(html.scrollHeight, html.clientHeight, body ? body.scrollHeight : 0, body ? body.clientHeight : 0);
  let x3 = -scroll.scrollLeft + getWindowScrollBarX$1(element);
  const y4 = -scroll.scrollTop;
  if (getComputedStyle$1$1(body || html).direction === "rtl") {
    x3 += max$2(html.clientWidth, body ? body.clientWidth : 0) - width;
  }
  return {
    width,
    height,
    x: x3,
    y: y4
  };
}
function getScrollParent(node) {
  if (["html", "body", "#document"].includes(getNodeName$1(node))) {
    return node.ownerDocument.body;
  }
  if (isHTMLElement$1(node) && isScrollParent(node)) {
    return node;
  }
  return getScrollParent(getParentNode$1(node));
}
function getScrollParents(node, list) {
  var _node$ownerDocument;
  if (list === void 0) {
    list = [];
  }
  const scrollParent = getScrollParent(node);
  const isBody = scrollParent === ((_node$ownerDocument = node.ownerDocument) == null ? void 0 : _node$ownerDocument.body);
  const win = getWindow$1(scrollParent);
  const target = isBody ? [win].concat(win.visualViewport || [], isScrollParent(scrollParent) ? scrollParent : []) : scrollParent;
  const updatedList = list.concat(target);
  return isBody ? updatedList : (
    // @ts-ignore: isBody tells us target will be an HTMLElement here
    updatedList.concat(getScrollParents(getParentNode$1(target)))
  );
}
function contains(parent, child) {
  const rootNode = child.getRootNode == null ? void 0 : child.getRootNode();
  if (parent.contains(child)) {
    return true;
  } else if (rootNode && isShadowRoot$1(rootNode)) {
    let next = child;
    do {
      if (next && parent === next) {
        return true;
      }
      next = next.parentNode || next.host;
    } while (next);
  }
  return false;
}
function getInnerBoundingClientRect$1(element) {
  const clientRect = getBoundingClientRect$1(element);
  const top = clientRect.top + element.clientTop;
  const left = clientRect.left + element.clientLeft;
  return {
    top,
    left,
    x: left,
    y: top,
    right: left + element.clientWidth,
    bottom: top + element.clientHeight,
    width: element.clientWidth,
    height: element.clientHeight
  };
}
function getClientRectFromClippingParent(element, clippingParent) {
  if (clippingParent === "viewport") {
    return rectToClientRect$1(getViewportRect$1(element));
  }
  if (isElement$1(clippingParent)) {
    return getInnerBoundingClientRect$1(clippingParent);
  }
  return rectToClientRect$1(getDocumentRect$1(getDocumentElement$1(element)));
}
function getClippingParents(element) {
  const clippingParents = getScrollParents(getParentNode$1(element));
  const canEscapeClipping = ["absolute", "fixed"].includes(getComputedStyle$1$1(element).position);
  const clipperElement = canEscapeClipping && isHTMLElement$1(element) ? getOffsetParent$1(element) : element;
  if (!isElement$1(clipperElement)) {
    return [];
  }
  return clippingParents.filter((clippingParent) => isElement$1(clippingParent) && contains(clippingParent, clipperElement) && getNodeName$1(clippingParent) !== "body");
}
function getClippingClientRect(_ref) {
  let {
    element,
    boundary,
    rootBoundary
  } = _ref;
  const mainClippingParents = boundary === "clippingParents" ? getClippingParents(element) : [].concat(boundary);
  const clippingParents = [...mainClippingParents, rootBoundary];
  const firstClippingParent = clippingParents[0];
  const clippingRect = clippingParents.reduce((accRect, clippingParent) => {
    const rect = getClientRectFromClippingParent(element, clippingParent);
    accRect.top = max$2(rect.top, accRect.top);
    accRect.right = min$2(rect.right, accRect.right);
    accRect.bottom = min$2(rect.bottom, accRect.bottom);
    accRect.left = max$2(rect.left, accRect.left);
    return accRect;
  }, getClientRectFromClippingParent(element, firstClippingParent));
  clippingRect.width = clippingRect.right - clippingRect.left;
  clippingRect.height = clippingRect.bottom - clippingRect.top;
  clippingRect.x = clippingRect.left;
  clippingRect.y = clippingRect.top;
  return clippingRect;
}
const platform$1 = {
  getElementRects: (_ref) => {
    let {
      reference,
      floating,
      strategy
    } = _ref;
    return {
      reference: getRectRelativeToOffsetParent$1(reference, getOffsetParent$1(floating), strategy),
      floating: {
        ...getDimensions$1(floating),
        x: 0,
        y: 0
      }
    };
  },
  convertOffsetParentRelativeRectToViewportRelativeRect: (args) => convertOffsetParentRelativeRectToViewportRelativeRect$1(args),
  getOffsetParent: (_ref2) => {
    let {
      element
    } = _ref2;
    return getOffsetParent$1(element);
  },
  isElement: (value) => isElement$1(value),
  getDocumentElement: (_ref3) => {
    let {
      element
    } = _ref3;
    return getDocumentElement$1(element);
  },
  getClippingClientRect: (args) => getClippingClientRect(args),
  getDimensions: (_ref4) => {
    let {
      element
    } = _ref4;
    return getDimensions$1(element);
  },
  getClientRects: (_ref5) => {
    let {
      element
    } = _ref5;
    return element.getClientRects();
  }
};
const computePosition$2 = (reference, floating, options2) => computePosition$1$1(reference, floating, {
  platform: platform$1,
  ...options2
});
var __defProp$1 = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols$1 = Object.getOwnPropertySymbols;
var __hasOwnProp$1 = Object.prototype.hasOwnProperty;
var __propIsEnum$1 = Object.prototype.propertyIsEnumerable;
var __defNormalProp$1 = (obj, key, value) => key in obj ? __defProp$1(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues$1 = (a4, b4) => {
  for (var prop in b4 || (b4 = {}))
    if (__hasOwnProp$1.call(b4, prop))
      __defNormalProp$1(a4, prop, b4[prop]);
  if (__getOwnPropSymbols$1)
    for (var prop of __getOwnPropSymbols$1(b4)) {
      if (__propIsEnum$1.call(b4, prop))
        __defNormalProp$1(a4, prop, b4[prop]);
    }
  return a4;
};
var __spreadProps = (a4, b4) => __defProps(a4, __getOwnPropDescs(b4));
function assign$5(to2, from) {
  for (const key in from) {
    if (Object.prototype.hasOwnProperty.call(from, key)) {
      if (typeof from[key] === "object" && to2[key]) {
        assign$5(to2[key], from[key]);
      } else {
        to2[key] = from[key];
      }
    }
  }
}
const config$2 = {
  disabled: false,
  distance: 5,
  skidding: 0,
  container: "body",
  boundary: void 0,
  instantMove: false,
  disposeTimeout: 5e3,
  popperTriggers: [],
  strategy: "absolute",
  preventOverflow: true,
  flip: true,
  shift: true,
  overflowPadding: 0,
  arrowPadding: 0,
  arrowOverflow: true,
  themes: {
    tooltip: {
      placement: "top",
      triggers: ["hover", "focus", "touch"],
      hideTriggers: (events) => [...events, "click"],
      delay: {
        show: 200,
        hide: 0
      },
      handleResize: false,
      html: false,
      loadingContent: "..."
    },
    dropdown: {
      placement: "bottom",
      triggers: ["click"],
      delay: 0,
      handleResize: true,
      autoHide: true
    },
    menu: {
      $extend: "dropdown",
      triggers: ["hover", "focus"],
      popperTriggers: ["hover", "focus"],
      delay: {
        show: 0,
        hide: 400
      }
    }
  }
};
function getDefaultConfig$1(theme, key) {
  let themeConfig = config$2.themes[theme] || {};
  let value;
  do {
    value = themeConfig[key];
    if (typeof value === "undefined") {
      if (themeConfig.$extend) {
        themeConfig = config$2.themes[themeConfig.$extend] || {};
      } else {
        themeConfig = null;
        value = config$2[key];
      }
    } else {
      themeConfig = null;
    }
  } while (themeConfig);
  return value;
}
function getThemeClasses(theme) {
  const result = [theme];
  let themeConfig = config$2.themes[theme] || {};
  do {
    if (themeConfig.$extend && !themeConfig.$resetCss) {
      result.push(themeConfig.$extend);
      themeConfig = config$2.themes[themeConfig.$extend] || {};
    } else {
      themeConfig = null;
    }
  } while (themeConfig);
  return result.map((c3) => `v-popper--theme-${c3}`);
}
function getAllParentThemes(theme) {
  const result = [theme];
  let themeConfig = config$2.themes[theme] || {};
  do {
    if (themeConfig.$extend) {
      result.push(themeConfig.$extend);
      themeConfig = config$2.themes[themeConfig.$extend] || {};
    } else {
      themeConfig = null;
    }
  } while (themeConfig);
  return result;
}
let supportsPassive = false;
if (typeof window !== "undefined") {
  supportsPassive = false;
  try {
    const opts = Object.defineProperty({}, "passive", {
      get() {
        supportsPassive = true;
      }
    });
    window.addEventListener("test", null, opts);
  } catch (e3) {
  }
}
let isIOS$1 = false;
if (typeof window !== "undefined" && typeof navigator !== "undefined") {
  isIOS$1 = /iPad|iPhone|iPod/.test(navigator.userAgent) && !window.MSStream;
}
const placements$1 = ["auto", "top", "bottom", "left", "right"].reduce((acc, base) => acc.concat([
  base,
  `${base}-start`,
  `${base}-end`
]), []);
const SHOW_EVENT_MAP = {
  hover: "mouseenter",
  focus: "focus",
  click: "click",
  touch: "touchstart"
};
const HIDE_EVENT_MAP = {
  hover: "mouseleave",
  focus: "blur",
  click: "click",
  touch: "touchend"
};
function removeFromArray(array, item) {
  const index = array.indexOf(item);
  if (index !== -1) {
    array.splice(index, 1);
  }
}
function nextFrame$1() {
  return new Promise((resolve2) => requestAnimationFrame(() => {
    requestAnimationFrame(resolve2);
  }));
}
const shownPoppers = [];
let hidingPopper = null;
const shownPoppersByTheme = {};
function getShownPoppersByTheme(theme) {
  let list = shownPoppersByTheme[theme];
  if (!list) {
    list = shownPoppersByTheme[theme] = [];
  }
  return list;
}
let Element$1 = function() {
};
if (typeof window !== "undefined") {
  Element$1 = window.Element;
}
function defaultPropFactory(prop) {
  return function(props) {
    return getDefaultConfig$1(props.theme, prop);
  };
}
const PROVIDE_KEY = "__floating-vue__popper";
var PrivatePopper = () => /* @__PURE__ */ defineComponent$1({
  name: "VPopper",
  provide() {
    return {
      [PROVIDE_KEY]: {
        parentPopper: this
      }
    };
  },
  inject: {
    [PROVIDE_KEY]: { default: null }
  },
  props: {
    theme: {
      type: String,
      required: true
    },
    targetNodes: {
      type: Function,
      required: true
    },
    referenceNode: {
      type: Function,
      default: null
    },
    popperNode: {
      type: Function,
      required: true
    },
    shown: {
      type: Boolean,
      default: false
    },
    showGroup: {
      type: String,
      default: null
    },
    ariaId: {
      default: null
    },
    disabled: {
      type: Boolean,
      default: defaultPropFactory("disabled")
    },
    positioningDisabled: {
      type: Boolean,
      default: defaultPropFactory("positioningDisabled")
    },
    placement: {
      type: String,
      default: defaultPropFactory("placement"),
      validator: (value) => placements$1.includes(value)
    },
    delay: {
      type: [String, Number, Object],
      default: defaultPropFactory("delay")
    },
    distance: {
      type: [Number, String],
      default: defaultPropFactory("distance")
    },
    skidding: {
      type: [Number, String],
      default: defaultPropFactory("skidding")
    },
    triggers: {
      type: Array,
      default: defaultPropFactory("triggers")
    },
    showTriggers: {
      type: [Array, Function],
      default: defaultPropFactory("showTriggers")
    },
    hideTriggers: {
      type: [Array, Function],
      default: defaultPropFactory("hideTriggers")
    },
    popperTriggers: {
      type: Array,
      default: defaultPropFactory("popperTriggers")
    },
    popperShowTriggers: {
      type: [Array, Function],
      default: defaultPropFactory("popperShowTriggers")
    },
    popperHideTriggers: {
      type: [Array, Function],
      default: defaultPropFactory("popperHideTriggers")
    },
    container: {
      type: [String, Object, Element$1, Boolean],
      default: defaultPropFactory("container")
    },
    boundary: {
      type: [String, Element$1],
      default: defaultPropFactory("boundary")
    },
    strategy: {
      type: String,
      validator: (value) => ["absolute", "fixed"].includes(value),
      default: defaultPropFactory("strategy")
    },
    autoHide: {
      type: [Boolean, Function],
      default: defaultPropFactory("autoHide")
    },
    handleResize: {
      type: Boolean,
      default: defaultPropFactory("handleResize")
    },
    instantMove: {
      type: Boolean,
      default: defaultPropFactory("instantMove")
    },
    eagerMount: {
      type: Boolean,
      default: defaultPropFactory("eagerMount")
    },
    popperClass: {
      type: [String, Array, Object],
      default: defaultPropFactory("popperClass")
    },
    computeTransformOrigin: {
      type: Boolean,
      default: defaultPropFactory("computeTransformOrigin")
    },
    autoMinSize: {
      type: Boolean,
      default: defaultPropFactory("autoMinSize")
    },
    autoSize: {
      type: [Boolean, String],
      default: defaultPropFactory("autoSize")
    },
    autoMaxSize: {
      type: Boolean,
      default: defaultPropFactory("autoMaxSize")
    },
    autoBoundaryMaxSize: {
      type: Boolean,
      default: defaultPropFactory("autoBoundaryMaxSize")
    },
    preventOverflow: {
      type: Boolean,
      default: defaultPropFactory("preventOverflow")
    },
    overflowPadding: {
      type: [Number, String],
      default: defaultPropFactory("overflowPadding")
    },
    arrowPadding: {
      type: [Number, String],
      default: defaultPropFactory("arrowPadding")
    },
    arrowOverflow: {
      type: Boolean,
      default: defaultPropFactory("arrowOverflow")
    },
    flip: {
      type: Boolean,
      default: defaultPropFactory("flip")
    },
    shift: {
      type: Boolean,
      default: defaultPropFactory("shift")
    },
    shiftCrossAxis: {
      type: Boolean,
      default: defaultPropFactory("shiftCrossAxis")
    }
  },
  emits: [
    "show",
    "hide",
    "update:shown",
    "apply-show",
    "apply-hide",
    "close-group",
    "close-directive",
    "auto-hide",
    "resize",
    "dispose"
  ],
  data() {
    return {
      isShown: false,
      isMounted: false,
      skipTransition: false,
      classes: {
        showFrom: false,
        showTo: false,
        hideFrom: false,
        hideTo: true
      },
      result: {
        x: 0,
        y: 0,
        placement: "",
        strategy: this.strategy,
        arrow: {
          x: 0,
          y: 0,
          centerOffset: 0
        },
        transformOrigin: null
      },
      shownChildren: /* @__PURE__ */ new Set(),
      lastAutoHide: true
    };
  },
  computed: {
    popperId() {
      return this.ariaId != null ? this.ariaId : this.randomId;
    },
    shouldMountContent() {
      return this.eagerMount || this.isMounted;
    },
    slotData() {
      return {
        popperId: this.popperId,
        isShown: this.isShown,
        shouldMountContent: this.shouldMountContent,
        skipTransition: this.skipTransition,
        autoHide: typeof this.autoHide === "function" ? this.lastAutoHide : this.autoHide,
        show: this.show,
        hide: this.hide,
        handleResize: this.handleResize,
        onResize: this.onResize,
        classes: __spreadProps(__spreadValues$1({}, this.classes), {
          popperClass: this.popperClass
        }),
        result: this.positioningDisabled ? null : this.result,
        attrs: this.$attrs
      };
    },
    parentPopper() {
      var _a2;
      return (_a2 = this[PROVIDE_KEY]) == null ? void 0 : _a2.parentPopper;
    },
    hasPopperShowTriggerHover() {
      var _a2, _b;
      return ((_a2 = this.popperTriggers) == null ? void 0 : _a2.includes("hover")) || ((_b = this.popperShowTriggers) == null ? void 0 : _b.includes("hover"));
    }
  },
  watch: __spreadValues$1(__spreadValues$1({
    shown: "$_autoShowHide",
    disabled(value) {
      if (value) {
        this.dispose();
      } else {
        this.init();
      }
    },
    async container() {
      if (this.isShown) {
        this.$_ensureTeleport();
        await this.$_computePosition();
      }
    }
  }, [
    "triggers",
    "positioningDisabled"
  ].reduce((acc, prop) => {
    acc[prop] = "$_refreshListeners";
    return acc;
  }, {})), [
    "placement",
    "distance",
    "skidding",
    "boundary",
    "strategy",
    "overflowPadding",
    "arrowPadding",
    "preventOverflow",
    "shift",
    "shiftCrossAxis",
    "flip"
  ].reduce((acc, prop) => {
    acc[prop] = "$_computePosition";
    return acc;
  }, {})),
  created() {
    this.$_isDisposed = true;
    this.randomId = `popper_${[Math.random(), Date.now()].map((n2) => n2.toString(36).substring(2, 10)).join("_")}`;
    if (this.autoMinSize) {
      console.warn('[floating-vue] `autoMinSize` option is deprecated. Use `autoSize="min"` instead.');
    }
    if (this.autoMaxSize) {
      console.warn("[floating-vue] `autoMaxSize` option is deprecated. Use `autoBoundaryMaxSize` instead.");
    }
  },
  mounted() {
    this.init();
    this.$_detachPopperNode();
  },
  activated() {
    this.$_autoShowHide();
  },
  deactivated() {
    this.hide();
  },
  beforeUnmount() {
    this.dispose();
  },
  methods: {
    show({ event = null, skipDelay = false, force = false } = {}) {
      var _a2, _b;
      if (((_a2 = this.parentPopper) == null ? void 0 : _a2.lockedChild) && this.parentPopper.lockedChild !== this)
        return;
      this.$_pendingHide = false;
      if (force || !this.disabled) {
        if (((_b = this.parentPopper) == null ? void 0 : _b.lockedChild) === this) {
          this.parentPopper.lockedChild = null;
        }
        this.$_scheduleShow(event, skipDelay);
        this.$emit("show");
        this.$_showFrameLocked = true;
        requestAnimationFrame(() => {
          this.$_showFrameLocked = false;
        });
      }
      this.$emit("update:shown", true);
    },
    hide({ event = null, skipDelay = false } = {}) {
      var _a2;
      if (this.$_hideInProgress)
        return;
      if (this.shownChildren.size > 0) {
        this.$_pendingHide = true;
        return;
      }
      if (this.hasPopperShowTriggerHover && this.$_isAimingPopper()) {
        if (this.parentPopper) {
          this.parentPopper.lockedChild = this;
          clearTimeout(this.parentPopper.lockedChildTimer);
          this.parentPopper.lockedChildTimer = setTimeout(() => {
            if (this.parentPopper.lockedChild === this) {
              this.parentPopper.lockedChild.hide({ skipDelay });
              this.parentPopper.lockedChild = null;
            }
          }, 1e3);
        }
        return;
      }
      if (((_a2 = this.parentPopper) == null ? void 0 : _a2.lockedChild) === this) {
        this.parentPopper.lockedChild = null;
      }
      this.$_pendingHide = false;
      this.$_scheduleHide(event, skipDelay);
      this.$emit("hide");
      this.$emit("update:shown", false);
    },
    init() {
      var _a2, _b;
      if (!this.$_isDisposed)
        return;
      this.$_isDisposed = false;
      this.isMounted = false;
      this.$_events = [];
      this.$_preventShow = false;
      this.$_referenceNode = (_b = (_a2 = this.referenceNode) == null ? void 0 : _a2.call(this)) != null ? _b : this.$el;
      this.$_targetNodes = this.targetNodes().filter((e3) => e3.nodeType === e3.ELEMENT_NODE);
      this.$_popperNode = this.popperNode();
      this.$_innerNode = this.$_popperNode.querySelector(".v-popper__inner");
      this.$_arrowNode = this.$_popperNode.querySelector(".v-popper__arrow-container");
      this.$_swapTargetAttrs("title", "data-original-title");
      this.$_detachPopperNode();
      if (this.triggers.length) {
        this.$_addEventListeners();
      }
      if (this.shown) {
        this.show();
      }
    },
    dispose() {
      if (this.$_isDisposed)
        return;
      this.$_isDisposed = true;
      this.$_removeEventListeners();
      this.hide({ skipDelay: true });
      this.$_detachPopperNode();
      this.isMounted = false;
      this.isShown = false;
      this.$_updateParentShownChildren(false);
      this.$_swapTargetAttrs("data-original-title", "title");
      this.$emit("dispose");
    },
    async onResize() {
      if (this.isShown) {
        await this.$_computePosition();
        this.$emit("resize");
      }
    },
    async $_computePosition() {
      var _a2;
      if (this.$_isDisposed || this.positioningDisabled)
        return;
      const options2 = {
        strategy: this.strategy,
        middleware: []
      };
      if (this.distance || this.skidding) {
        options2.middleware.push(offset$1({
          mainAxis: this.distance,
          crossAxis: this.skidding
        }));
      }
      const isPlacementAuto = this.placement.startsWith("auto");
      if (isPlacementAuto) {
        options2.middleware.push(autoPlacement$2({
          alignment: (_a2 = this.placement.split("-")[1]) != null ? _a2 : ""
        }));
      } else {
        options2.placement = this.placement;
      }
      if (this.preventOverflow) {
        if (this.shift) {
          options2.middleware.push(shift$2({
            padding: this.overflowPadding,
            boundary: this.boundary,
            crossAxis: this.shiftCrossAxis
          }));
        }
        if (!isPlacementAuto && this.flip) {
          options2.middleware.push(flip$2({
            padding: this.overflowPadding,
            boundary: this.boundary
          }));
        }
      }
      options2.middleware.push(arrow$3({
        element: this.$_arrowNode,
        padding: this.arrowPadding
      }));
      if (this.arrowOverflow) {
        options2.middleware.push({
          name: "arrowOverflow",
          fn: ({ placement, rects, middlewareData }) => {
            let overflow;
            const { centerOffset } = middlewareData.arrow;
            if (placement.startsWith("top") || placement.startsWith("bottom")) {
              overflow = Math.abs(centerOffset) > rects.reference.width / 2;
            } else {
              overflow = Math.abs(centerOffset) > rects.reference.height / 2;
            }
            return {
              data: {
                overflow
              }
            };
          }
        });
      }
      if (this.autoMinSize || this.autoSize) {
        const autoSize = this.autoSize ? this.autoSize : this.autoMinSize ? "min" : null;
        options2.middleware.push({
          name: "autoSize",
          fn: ({ rects, placement, middlewareData }) => {
            var _a22;
            if ((_a22 = middlewareData.autoSize) == null ? void 0 : _a22.skip) {
              return {};
            }
            let width;
            let height;
            if (placement.startsWith("top") || placement.startsWith("bottom")) {
              width = rects.reference.width;
            } else {
              height = rects.reference.height;
            }
            this.$_innerNode.style[autoSize === "min" ? "minWidth" : autoSize === "max" ? "maxWidth" : "width"] = width != null ? `${width}px` : null;
            this.$_innerNode.style[autoSize === "min" ? "minHeight" : autoSize === "max" ? "maxHeight" : "height"] = height != null ? `${height}px` : null;
            return {
              data: {
                skip: true
              },
              reset: {
                rects: true
              }
            };
          }
        });
      }
      if (this.autoMaxSize || this.autoBoundaryMaxSize) {
        this.$_innerNode.style.maxWidth = null;
        this.$_innerNode.style.maxHeight = null;
        options2.middleware.push(size$1({
          boundary: this.boundary,
          padding: this.overflowPadding,
          apply: ({ width, height }) => {
            this.$_innerNode.style.maxWidth = width != null ? `${width}px` : null;
            this.$_innerNode.style.maxHeight = height != null ? `${height}px` : null;
          }
        }));
      }
      const data = await computePosition$2(this.$_referenceNode, this.$_popperNode, options2);
      Object.assign(this.result, {
        x: data.x,
        y: data.y,
        placement: data.placement,
        strategy: data.strategy,
        arrow: __spreadValues$1(__spreadValues$1({}, data.middlewareData.arrow), data.middlewareData.arrowOverflow)
      });
    },
    $_scheduleShow(event = null, skipDelay = false) {
      this.$_updateParentShownChildren(true);
      this.$_hideInProgress = false;
      clearTimeout(this.$_scheduleTimer);
      if (hidingPopper && this.instantMove && hidingPopper.instantMove && hidingPopper !== this.parentPopper) {
        hidingPopper.$_applyHide(true);
        this.$_applyShow(true);
        return;
      }
      if (skipDelay) {
        this.$_applyShow();
      } else {
        this.$_scheduleTimer = setTimeout(this.$_applyShow.bind(this), this.$_computeDelay("show"));
      }
    },
    $_scheduleHide(event = null, skipDelay = false) {
      if (this.shownChildren.size > 0) {
        this.$_pendingHide = true;
        return;
      }
      this.$_updateParentShownChildren(false);
      this.$_hideInProgress = true;
      clearTimeout(this.$_scheduleTimer);
      if (this.isShown) {
        hidingPopper = this;
      }
      if (skipDelay) {
        this.$_applyHide();
      } else {
        this.$_scheduleTimer = setTimeout(this.$_applyHide.bind(this), this.$_computeDelay("hide"));
      }
    },
    $_computeDelay(type) {
      const delay = this.delay;
      return parseInt(delay && delay[type] || delay || 0);
    },
    async $_applyShow(skipTransition = false) {
      clearTimeout(this.$_disposeTimer);
      clearTimeout(this.$_scheduleTimer);
      this.skipTransition = skipTransition;
      if (this.isShown) {
        return;
      }
      this.$_ensureTeleport();
      await nextFrame$1();
      await this.$_computePosition();
      await this.$_applyShowEffect();
      if (!this.positioningDisabled) {
        this.$_registerEventListeners([
          ...getScrollParents(this.$_referenceNode),
          ...getScrollParents(this.$_popperNode)
        ], "scroll", () => {
          this.$_computePosition();
        });
      }
    },
    async $_applyShowEffect() {
      if (this.$_hideInProgress)
        return;
      if (this.computeTransformOrigin) {
        const bounds = this.$_referenceNode.getBoundingClientRect();
        const popperWrapper = this.$_popperNode.querySelector(".v-popper__wrapper");
        const parentBounds = popperWrapper.parentNode.getBoundingClientRect();
        const x3 = bounds.x + bounds.width / 2 - (parentBounds.left + popperWrapper.offsetLeft);
        const y4 = bounds.y + bounds.height / 2 - (parentBounds.top + popperWrapper.offsetTop);
        this.result.transformOrigin = `${x3}px ${y4}px`;
      }
      this.isShown = true;
      this.$_applyAttrsToTarget({
        "aria-describedby": this.popperId,
        "data-popper-shown": ""
      });
      const showGroup = this.showGroup;
      if (showGroup) {
        let popover;
        for (let i3 = 0; i3 < shownPoppers.length; i3++) {
          popover = shownPoppers[i3];
          if (popover.showGroup !== showGroup) {
            popover.hide();
            popover.$emit("close-group");
          }
        }
      }
      shownPoppers.push(this);
      document.body.classList.add("v-popper--some-open");
      for (const theme of getAllParentThemes(this.theme)) {
        getShownPoppersByTheme(theme).push(this);
        document.body.classList.add(`v-popper--some-open--${theme}`);
      }
      this.$emit("apply-show");
      this.classes.showFrom = true;
      this.classes.showTo = false;
      this.classes.hideFrom = false;
      this.classes.hideTo = false;
      await nextFrame$1();
      this.classes.showFrom = false;
      this.classes.showTo = true;
      this.$_popperNode.focus();
    },
    async $_applyHide(skipTransition = false) {
      if (this.shownChildren.size > 0) {
        this.$_pendingHide = true;
        this.$_hideInProgress = false;
        return;
      }
      clearTimeout(this.$_scheduleTimer);
      if (!this.isShown) {
        return;
      }
      this.skipTransition = skipTransition;
      removeFromArray(shownPoppers, this);
      if (shownPoppers.length === 0) {
        document.body.classList.remove("v-popper--some-open");
      }
      for (const theme of getAllParentThemes(this.theme)) {
        const list = getShownPoppersByTheme(theme);
        removeFromArray(list, this);
        if (list.length === 0) {
          document.body.classList.remove(`v-popper--some-open--${theme}`);
        }
      }
      if (hidingPopper === this) {
        hidingPopper = null;
      }
      this.isShown = false;
      this.$_applyAttrsToTarget({
        "aria-describedby": void 0,
        "data-popper-shown": void 0
      });
      clearTimeout(this.$_disposeTimer);
      const disposeTime = getDefaultConfig$1(this.theme, "disposeTimeout");
      if (disposeTime !== null) {
        this.$_disposeTimer = setTimeout(() => {
          if (this.$_popperNode) {
            this.$_detachPopperNode();
            this.isMounted = false;
          }
        }, disposeTime);
      }
      this.$_removeEventListeners("scroll");
      this.$emit("apply-hide");
      this.classes.showFrom = false;
      this.classes.showTo = false;
      this.classes.hideFrom = true;
      this.classes.hideTo = false;
      await nextFrame$1();
      this.classes.hideFrom = false;
      this.classes.hideTo = true;
    },
    $_autoShowHide() {
      if (this.shown) {
        this.show();
      } else {
        this.hide();
      }
    },
    $_ensureTeleport() {
      if (this.$_isDisposed)
        return;
      let container = this.container;
      if (typeof container === "string") {
        container = window.document.querySelector(container);
      } else if (container === false) {
        container = this.$_targetNodes[0].parentNode;
      }
      if (!container) {
        throw new Error("No container for popover: " + this.container);
      }
      container.appendChild(this.$_popperNode);
      this.isMounted = true;
    },
    $_addEventListeners() {
      const handleShow = (event) => {
        if (this.isShown && !this.$_hideInProgress) {
          return;
        }
        event.usedByTooltip = true;
        !this.$_preventShow && this.show({ event });
      };
      this.$_registerTriggerListeners(this.$_targetNodes, SHOW_EVENT_MAP, this.triggers, this.showTriggers, handleShow);
      this.$_registerTriggerListeners([this.$_popperNode], SHOW_EVENT_MAP, this.popperTriggers, this.popperShowTriggers, handleShow);
      const handleHide = (event) => {
        if (event.usedByTooltip) {
          return;
        }
        this.hide({ event });
      };
      this.$_registerTriggerListeners(this.$_targetNodes, HIDE_EVENT_MAP, this.triggers, this.hideTriggers, handleHide);
      this.$_registerTriggerListeners([this.$_popperNode], HIDE_EVENT_MAP, this.popperTriggers, this.popperHideTriggers, handleHide);
    },
    $_registerEventListeners(targetNodes, eventType, handler) {
      this.$_events.push({ targetNodes, eventType, handler });
      targetNodes.forEach((node) => node.addEventListener(eventType, handler, supportsPassive ? {
        passive: true
      } : void 0));
    },
    $_registerTriggerListeners(targetNodes, eventMap, commonTriggers, customTrigger, handler) {
      let triggers = commonTriggers;
      if (customTrigger != null) {
        triggers = typeof customTrigger === "function" ? customTrigger(triggers) : customTrigger;
      }
      triggers.forEach((trigger2) => {
        const eventType = eventMap[trigger2];
        if (eventType) {
          this.$_registerEventListeners(targetNodes, eventType, handler);
        }
      });
    },
    $_removeEventListeners(filterEventType) {
      const newList = [];
      this.$_events.forEach((listener) => {
        const { targetNodes, eventType, handler } = listener;
        if (!filterEventType || filterEventType === eventType) {
          targetNodes.forEach((node) => node.removeEventListener(eventType, handler));
        } else {
          newList.push(listener);
        }
      });
      this.$_events = newList;
    },
    $_refreshListeners() {
      if (!this.$_isDisposed) {
        this.$_removeEventListeners();
        this.$_addEventListeners();
      }
    },
    $_handleGlobalClose(event, touch = false) {
      if (this.$_showFrameLocked)
        return;
      this.hide({ event });
      if (event.closePopover) {
        this.$emit("close-directive");
      } else {
        this.$emit("auto-hide");
      }
      if (touch) {
        this.$_preventShow = true;
        setTimeout(() => {
          this.$_preventShow = false;
        }, 300);
      }
    },
    $_detachPopperNode() {
      this.$_popperNode.parentNode && this.$_popperNode.parentNode.removeChild(this.$_popperNode);
    },
    $_swapTargetAttrs(attrFrom, attrTo) {
      for (const el3 of this.$_targetNodes) {
        const value = el3.getAttribute(attrFrom);
        if (value) {
          el3.removeAttribute(attrFrom);
          el3.setAttribute(attrTo, value);
        }
      }
    },
    $_applyAttrsToTarget(attrs) {
      for (const el3 of this.$_targetNodes) {
        for (const n2 in attrs) {
          const value = attrs[n2];
          if (value == null) {
            el3.removeAttribute(n2);
          } else {
            el3.setAttribute(n2, value);
          }
        }
      }
    },
    $_updateParentShownChildren(value) {
      let parent = this.parentPopper;
      while (parent) {
        if (value) {
          parent.shownChildren.add(this.randomId);
        } else {
          parent.shownChildren.delete(this.randomId);
          if (parent.$_pendingHide) {
            parent.hide();
          }
        }
        parent = parent.parentPopper;
      }
    },
    $_isAimingPopper() {
      const referenceBounds = this.$_referenceNode.getBoundingClientRect();
      if (mouseX >= referenceBounds.left && mouseX <= referenceBounds.right && mouseY >= referenceBounds.top && mouseY <= referenceBounds.bottom) {
        const popperBounds = this.$_popperNode.getBoundingClientRect();
        const vectorX = mouseX - mousePreviousX;
        const vectorY = mouseY - mousePreviousY;
        const distance = popperBounds.left + popperBounds.width / 2 - mousePreviousX + (popperBounds.top + popperBounds.height / 2) - mousePreviousY;
        const newVectorLength = distance + popperBounds.width + popperBounds.height;
        const edgeX = mousePreviousX + vectorX * newVectorLength;
        const edgeY = mousePreviousY + vectorY * newVectorLength;
        return lineIntersectsLine(mousePreviousX, mousePreviousY, edgeX, edgeY, popperBounds.left, popperBounds.top, popperBounds.left, popperBounds.bottom) || lineIntersectsLine(mousePreviousX, mousePreviousY, edgeX, edgeY, popperBounds.left, popperBounds.top, popperBounds.right, popperBounds.top) || lineIntersectsLine(mousePreviousX, mousePreviousY, edgeX, edgeY, popperBounds.right, popperBounds.top, popperBounds.right, popperBounds.bottom) || lineIntersectsLine(mousePreviousX, mousePreviousY, edgeX, edgeY, popperBounds.left, popperBounds.bottom, popperBounds.right, popperBounds.bottom);
      }
      return false;
    }
  },
  render() {
    return this.$slots.default(this.slotData);
  }
});
if (typeof document !== "undefined" && typeof window !== "undefined") {
  if (isIOS$1) {
    document.addEventListener("touchstart", handleGlobalMousedown, supportsPassive ? {
      passive: true,
      capture: true
    } : true);
    document.addEventListener("touchend", handleGlobalTouchend, supportsPassive ? {
      passive: true,
      capture: true
    } : true);
  } else {
    window.addEventListener("mousedown", handleGlobalMousedown, true);
    window.addEventListener("click", handleGlobalClick, true);
  }
  window.addEventListener("resize", computePositionAllShownPoppers);
}
function handleGlobalMousedown(event) {
  for (let i3 = 0; i3 < shownPoppers.length; i3++) {
    const popper = shownPoppers[i3];
    try {
      const popperContent = popper.popperNode();
      popper.$_mouseDownContains = popperContent.contains(event.target);
    } catch (e3) {
    }
  }
}
function handleGlobalClick(event) {
  handleGlobalClose(event);
}
function handleGlobalTouchend(event) {
  handleGlobalClose(event, true);
}
function handleGlobalClose(event, touch = false) {
  const preventClose = {};
  for (let i3 = shownPoppers.length - 1; i3 >= 0; i3--) {
    const popper = shownPoppers[i3];
    try {
      const contains2 = popper.$_containsGlobalTarget = isContainingEventTarget(popper, event);
      popper.$_pendingHide = false;
      requestAnimationFrame(() => {
        popper.$_pendingHide = false;
        if (preventClose[popper.randomId])
          return;
        if (shouldAutoHide(popper, contains2, event)) {
          popper.$_handleGlobalClose(event, touch);
          if (!event.closeAllPopover && event.closePopover && contains2) {
            let parent2 = popper.parentPopper;
            while (parent2) {
              preventClose[parent2.randomId] = true;
              parent2 = parent2.parentPopper;
            }
            return;
          }
          let parent = popper.parentPopper;
          while (parent) {
            if (shouldAutoHide(parent, parent.$_containsGlobalTarget, event)) {
              parent.$_handleGlobalClose(event, touch);
            } else {
              break;
            }
            parent = parent.parentPopper;
          }
        }
      });
    } catch (e3) {
    }
  }
}
function isContainingEventTarget(popper, event) {
  const popperContent = popper.popperNode();
  return popper.$_mouseDownContains || popperContent.contains(event.target);
}
function shouldAutoHide(popper, contains2, event) {
  return event.closeAllPopover || event.closePopover && contains2 || getAutoHideResult(popper, event) && !contains2;
}
function getAutoHideResult(popper, event) {
  if (typeof popper.autoHide === "function") {
    const result = popper.autoHide(event);
    popper.lastAutoHide = result;
    return result;
  }
  return popper.autoHide;
}
function computePositionAllShownPoppers(event) {
  for (let i3 = 0; i3 < shownPoppers.length; i3++) {
    const popper = shownPoppers[i3];
    popper.$_computePosition(event);
  }
}
let mousePreviousX = 0;
let mousePreviousY = 0;
let mouseX = 0;
let mouseY = 0;
if (typeof window !== "undefined") {
  window.addEventListener("mousemove", (event) => {
    mousePreviousX = mouseX;
    mousePreviousY = mouseY;
    mouseX = event.clientX;
    mouseY = event.clientY;
  }, supportsPassive ? {
    passive: true
  } : void 0);
}
function lineIntersectsLine(x1, y1, x22, y22, x3, y32, x4, y4) {
  const uA = ((x4 - x3) * (y1 - y32) - (y4 - y32) * (x1 - x3)) / ((y4 - y32) * (x22 - x1) - (x4 - x3) * (y22 - y1));
  const uB = ((x22 - x1) * (y1 - y32) - (y22 - y1) * (x1 - x3)) / ((y4 - y32) * (x22 - x1) - (x4 - x3) * (y22 - y1));
  return uA >= 0 && uA <= 1 && uB >= 0 && uB <= 1;
}
var _export_sfc = (sfc, props) => {
  const target = sfc.__vccOpts || sfc;
  for (const [key, val] of props) {
    target[key] = val;
  }
  return target;
};
const _sfc_main$6 = {
  extends: PrivatePopper()
};
function _sfc_render$3(_ctx, _cache, $props, $setup, $data, $options) {
  return openBlock$1(), createElementBlock$1("div", {
    ref: "reference",
    class: normalizeClass$1(["v-popper", {
      "v-popper--shown": _ctx.slotData.isShown
    }])
  }, [
    renderSlot$1(_ctx.$slots, "default", normalizeProps$1(guardReactiveProps$1(_ctx.slotData)))
  ], 2);
}
var Popper$1 = /* @__PURE__ */ _export_sfc(_sfc_main$6, [["render", _sfc_render$3]]);
function getInternetExplorerVersion() {
  var ua2 = window.navigator.userAgent;
  var msie = ua2.indexOf("MSIE ");
  if (msie > 0) {
    return parseInt(ua2.substring(msie + 5, ua2.indexOf(".", msie)), 10);
  }
  var trident = ua2.indexOf("Trident/");
  if (trident > 0) {
    var rv = ua2.indexOf("rv:");
    return parseInt(ua2.substring(rv + 3, ua2.indexOf(".", rv)), 10);
  }
  var edge = ua2.indexOf("Edge/");
  if (edge > 0) {
    return parseInt(ua2.substring(edge + 5, ua2.indexOf(".", edge)), 10);
  }
  return -1;
}
let isIE;
function initCompat() {
  if (!initCompat.init) {
    initCompat.init = true;
    isIE = getInternetExplorerVersion() !== -1;
  }
}
var script = {
  name: "ResizeObserver",
  props: {
    emitOnMount: {
      type: Boolean,
      default: false
    },
    ignoreWidth: {
      type: Boolean,
      default: false
    },
    ignoreHeight: {
      type: Boolean,
      default: false
    }
  },
  emits: [
    "notify"
  ],
  mounted() {
    initCompat();
    nextTick$1(() => {
      this._w = this.$el.offsetWidth;
      this._h = this.$el.offsetHeight;
      if (this.emitOnMount) {
        this.emitSize();
      }
    });
    const object = document.createElement("object");
    this._resizeObject = object;
    object.setAttribute("aria-hidden", "true");
    object.setAttribute("tabindex", -1);
    object.onload = this.addResizeHandlers;
    object.type = "text/html";
    if (isIE) {
      this.$el.appendChild(object);
    }
    object.data = "about:blank";
    if (!isIE) {
      this.$el.appendChild(object);
    }
  },
  beforeUnmount() {
    this.removeResizeHandlers();
  },
  methods: {
    compareAndNotify() {
      if (!this.ignoreWidth && this._w !== this.$el.offsetWidth || !this.ignoreHeight && this._h !== this.$el.offsetHeight) {
        this._w = this.$el.offsetWidth;
        this._h = this.$el.offsetHeight;
        this.emitSize();
      }
    },
    emitSize() {
      this.$emit("notify", {
        width: this._w,
        height: this._h
      });
    },
    addResizeHandlers() {
      this._resizeObject.contentDocument.defaultView.addEventListener("resize", this.compareAndNotify);
      this.compareAndNotify();
    },
    removeResizeHandlers() {
      if (this._resizeObject && this._resizeObject.onload) {
        if (!isIE && this._resizeObject.contentDocument) {
          this._resizeObject.contentDocument.defaultView.removeEventListener("resize", this.compareAndNotify);
        }
        this.$el.removeChild(this._resizeObject);
        this._resizeObject.onload = null;
        this._resizeObject = null;
      }
    }
  }
};
const _withId = /* @__PURE__ */ withScopeId();
pushScopeId$1("data-v-b329ee4c");
const _hoisted_1$2 = {
  class: "resize-observer",
  tabindex: "-1"
};
popScopeId$1();
const render$2 = /* @__PURE__ */ _withId((_ctx, _cache, $props, $setup, $data, $options) => {
  return openBlock$1(), createBlock$1("div", _hoisted_1$2);
});
script.render = render$2;
script.__scopeId = "data-v-b329ee4c";
script.__file = "src/components/ResizeObserver.vue";
var PrivateThemeClass = (prop = "theme") => ({
  computed: {
    themeClass() {
      return getThemeClasses(this[prop]);
    }
  }
});
const _sfc_main$5 = /* @__PURE__ */ defineComponent$1({
  name: "VPopperContent",
  components: {
    ResizeObserver: script
  },
  mixins: [
    PrivateThemeClass()
  ],
  props: {
    popperId: String,
    theme: String,
    shown: Boolean,
    mounted: Boolean,
    skipTransition: Boolean,
    autoHide: Boolean,
    handleResize: Boolean,
    classes: Object,
    result: Object
  },
  emits: [
    "hide",
    "resize"
  ],
  methods: {
    toPx(value) {
      if (value != null && !isNaN(value)) {
        return `${value}px`;
      }
      return null;
    }
  }
});
const _hoisted_1$1 = ["id", "aria-hidden", "tabindex", "data-popper-placement"];
const _hoisted_2$1 = {
  ref: "inner",
  class: "v-popper__inner"
};
const _hoisted_3 = /* @__PURE__ */ createBaseVNode$1("div", { class: "v-popper__arrow-outer" }, null, -1);
const _hoisted_4 = /* @__PURE__ */ createBaseVNode$1("div", { class: "v-popper__arrow-inner" }, null, -1);
const _hoisted_5 = [
  _hoisted_3,
  _hoisted_4
];
function _sfc_render$2(_ctx, _cache, $props, $setup, $data, $options) {
  const _component_ResizeObserver = resolveComponent$1("ResizeObserver");
  return openBlock$1(), createElementBlock$1("div", {
    id: _ctx.popperId,
    ref: "popover",
    class: normalizeClass$1(["v-popper__popper", [
      _ctx.themeClass,
      _ctx.classes.popperClass,
      {
        "v-popper__popper--shown": _ctx.shown,
        "v-popper__popper--hidden": !_ctx.shown,
        "v-popper__popper--show-from": _ctx.classes.showFrom,
        "v-popper__popper--show-to": _ctx.classes.showTo,
        "v-popper__popper--hide-from": _ctx.classes.hideFrom,
        "v-popper__popper--hide-to": _ctx.classes.hideTo,
        "v-popper__popper--skip-transition": _ctx.skipTransition,
        "v-popper__popper--arrow-overflow": _ctx.result && _ctx.result.arrow.overflow,
        "v-popper__popper--no-positioning": !_ctx.result
      }
    ]]),
    style: normalizeStyle$1(_ctx.result ? {
      position: _ctx.result.strategy,
      transform: `translate3d(${Math.round(_ctx.result.x)}px,${Math.round(_ctx.result.y)}px,0)`
    } : void 0),
    "aria-hidden": _ctx.shown ? "false" : "true",
    tabindex: _ctx.autoHide ? 0 : void 0,
    "data-popper-placement": _ctx.result ? _ctx.result.placement : void 0,
    onKeyup: _cache[2] || (_cache[2] = withKeys$1(($event) => _ctx.autoHide && _ctx.$emit("hide"), ["esc"]))
  }, [
    createBaseVNode$1("div", {
      class: "v-popper__backdrop",
      onClick: _cache[0] || (_cache[0] = ($event) => _ctx.autoHide && _ctx.$emit("hide"))
    }),
    createBaseVNode$1("div", {
      class: "v-popper__wrapper",
      style: normalizeStyle$1(_ctx.result ? {
        transformOrigin: _ctx.result.transformOrigin
      } : void 0)
    }, [
      createBaseVNode$1("div", _hoisted_2$1, [
        _ctx.mounted ? (openBlock$1(), createElementBlock$1(Fragment$1, { key: 0 }, [
          createBaseVNode$1("div", null, [
            renderSlot$1(_ctx.$slots, "default")
          ]),
          _ctx.handleResize ? (openBlock$1(), createBlock$1(_component_ResizeObserver, {
            key: 0,
            onNotify: _cache[1] || (_cache[1] = ($event) => _ctx.$emit("resize", $event))
          })) : createCommentVNode$1("", true)
        ], 64)) : createCommentVNode$1("", true)
      ], 512),
      createBaseVNode$1("div", {
        ref: "arrow",
        class: "v-popper__arrow-container",
        style: normalizeStyle$1(_ctx.result ? {
          left: _ctx.toPx(_ctx.result.arrow.x),
          top: _ctx.toPx(_ctx.result.arrow.y)
        } : void 0)
      }, _hoisted_5, 4)
    ], 4)
  ], 46, _hoisted_1$1);
}
var PrivatePopperContent = /* @__PURE__ */ _export_sfc(_sfc_main$5, [["render", _sfc_render$2]]);
var PrivatePopperMethods = {
  methods: {
    show(...args) {
      return this.$refs.popper.show(...args);
    },
    hide(...args) {
      return this.$refs.popper.hide(...args);
    },
    dispose(...args) {
      return this.$refs.popper.dispose(...args);
    },
    onResize(...args) {
      return this.$refs.popper.onResize(...args);
    }
  }
};
const _sfc_main$4 = /* @__PURE__ */ defineComponent$1({
  name: "VPopperWrapper",
  components: {
    Popper: Popper$1,
    PopperContent: PrivatePopperContent
  },
  mixins: [
    PrivatePopperMethods,
    PrivateThemeClass("finalTheme")
  ],
  props: {
    theme: {
      type: String,
      default: null
    }
  },
  computed: {
    finalTheme() {
      var _a2;
      return (_a2 = this.theme) != null ? _a2 : this.$options.vPopperTheme;
    }
  },
  methods: {
    getTargetNodes() {
      return Array.from(this.$el.children).filter((node) => node !== this.$refs.popperContent.$el);
    }
  }
});
function _sfc_render$1(_ctx, _cache, $props, $setup, $data, $options) {
  const _component_PopperContent = resolveComponent$1("PopperContent");
  const _component_Popper = resolveComponent$1("Popper");
  return openBlock$1(), createBlock$1(_component_Popper, {
    ref: "popper",
    theme: _ctx.finalTheme,
    "target-nodes": _ctx.getTargetNodes,
    "popper-node": () => _ctx.$refs.popperContent.$el,
    class: normalizeClass$1([
      _ctx.themeClass
    ])
  }, {
    default: withCtx$1(({
      popperId,
      isShown,
      shouldMountContent,
      skipTransition,
      autoHide,
      show,
      hide: hide2,
      handleResize,
      onResize,
      classes,
      result
    }) => [
      renderSlot$1(_ctx.$slots, "default", {
        shown: isShown,
        show,
        hide: hide2
      }),
      createVNode$1(_component_PopperContent, {
        ref: "popperContent",
        "popper-id": popperId,
        theme: _ctx.finalTheme,
        shown: isShown,
        mounted: shouldMountContent,
        "skip-transition": skipTransition,
        "auto-hide": autoHide,
        "handle-resize": handleResize,
        classes,
        result,
        onHide: hide2,
        onResize
      }, {
        default: withCtx$1(() => [
          renderSlot$1(_ctx.$slots, "popper", {
            shown: isShown,
            hide: hide2
          })
        ]),
        _: 2
      }, 1032, ["popper-id", "theme", "shown", "mounted", "skip-transition", "auto-hide", "handle-resize", "classes", "result", "onHide", "onResize"])
    ]),
    _: 3
  }, 8, ["theme", "target-nodes", "popper-node", "class"]);
}
var PrivatePopperWrapper = /* @__PURE__ */ _export_sfc(_sfc_main$4, [["render", _sfc_render$1]]);
const _sfc_main$3 = /* @__PURE__ */ defineComponent$1(__spreadProps(__spreadValues$1({}, PrivatePopperWrapper), {
  name: "VDropdown",
  vPopperTheme: "dropdown"
}));
const _sfc_main$2 = /* @__PURE__ */ defineComponent$1(__spreadProps(__spreadValues$1({}, PrivatePopperWrapper), {
  name: "VMenu",
  vPopperTheme: "menu"
}));
const _sfc_main$1 = /* @__PURE__ */ defineComponent$1(__spreadProps(__spreadValues$1({}, PrivatePopperWrapper), {
  name: "VTooltip",
  vPopperTheme: "tooltip"
}));
const _sfc_main = /* @__PURE__ */ defineComponent$1({
  name: "VTooltipDirective",
  components: {
    Popper: PrivatePopper(),
    PopperContent: PrivatePopperContent
  },
  mixins: [
    PrivatePopperMethods
  ],
  inheritAttrs: false,
  props: {
    theme: {
      type: String,
      default: "tooltip"
    },
    html: {
      type: Boolean,
      default: (props) => getDefaultConfig$1(props.theme, "html")
    },
    content: {
      type: [String, Number, Function],
      default: null
    },
    loadingContent: {
      type: String,
      default: (props) => getDefaultConfig$1(props.theme, "loadingContent")
    }
  },
  data() {
    return {
      asyncContent: null
    };
  },
  computed: {
    isContentAsync() {
      return typeof this.content === "function";
    },
    loading() {
      return this.isContentAsync && this.asyncContent == null;
    },
    finalContent() {
      if (this.isContentAsync) {
        return this.loading ? this.loadingContent : this.asyncContent;
      }
      return this.content;
    }
  },
  watch: {
    content: {
      handler() {
        this.fetchContent(true);
      },
      immediate: true
    },
    async finalContent() {
      await this.$nextTick();
      this.$refs.popper.onResize();
    }
  },
  created() {
    this.$_fetchId = 0;
  },
  methods: {
    fetchContent(force) {
      if (typeof this.content === "function" && this.$_isShown && (force || !this.$_loading && this.asyncContent == null)) {
        this.asyncContent = null;
        this.$_loading = true;
        const fetchId = ++this.$_fetchId;
        const result = this.content(this);
        if (result.then) {
          result.then((res) => this.onResult(fetchId, res));
        } else {
          this.onResult(fetchId, result);
        }
      }
    },
    onResult(fetchId, result) {
      if (fetchId !== this.$_fetchId)
        return;
      this.$_loading = false;
      this.asyncContent = result;
    },
    onShow() {
      this.$_isShown = true;
      this.fetchContent();
    },
    onHide() {
      this.$_isShown = false;
    }
  }
});
const _hoisted_1 = ["innerHTML"];
const _hoisted_2 = ["textContent"];
function _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
  const _component_PopperContent = resolveComponent$1("PopperContent");
  const _component_Popper = resolveComponent$1("Popper");
  return openBlock$1(), createBlock$1(_component_Popper, mergeProps$1({ ref: "popper" }, _ctx.$attrs, {
    theme: _ctx.theme,
    "popper-node": () => _ctx.$refs.popperContent.$el,
    onApplyShow: _ctx.onShow,
    onApplyHide: _ctx.onHide
  }), {
    default: withCtx$1(({
      popperId,
      isShown,
      shouldMountContent,
      skipTransition,
      autoHide,
      hide: hide2,
      handleResize,
      onResize,
      classes,
      result
    }) => [
      createVNode$1(_component_PopperContent, {
        ref: "popperContent",
        class: normalizeClass$1({
          "v-popper--tooltip-loading": _ctx.loading
        }),
        "popper-id": popperId,
        theme: _ctx.theme,
        shown: isShown,
        mounted: shouldMountContent,
        "skip-transition": skipTransition,
        "auto-hide": autoHide,
        "handle-resize": handleResize,
        classes,
        result,
        onHide: hide2,
        onResize
      }, {
        default: withCtx$1(() => [
          _ctx.html ? (openBlock$1(), createElementBlock$1("div", {
            key: 0,
            innerHTML: _ctx.finalContent
          }, null, 8, _hoisted_1)) : (openBlock$1(), createElementBlock$1("div", {
            key: 1,
            textContent: toDisplayString$2(_ctx.finalContent)
          }, null, 8, _hoisted_2))
        ]),
        _: 2
      }, 1032, ["class", "popper-id", "theme", "shown", "mounted", "skip-transition", "auto-hide", "handle-resize", "classes", "result", "onHide", "onResize"])
    ]),
    _: 1
  }, 16, ["theme", "popper-node", "onApplyShow", "onApplyHide"]);
}
var PrivateTooltipDirective = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render]]);
const TARGET_CLASS = "v-popper--has-tooltip";
function getPlacement(options2, modifiers) {
  let result = options2.placement;
  if (!result && modifiers) {
    for (const pos of placements$1) {
      if (modifiers[pos]) {
        result = pos;
      }
    }
  }
  if (!result) {
    result = getDefaultConfig$1(options2.theme || "tooltip", "placement");
  }
  return result;
}
function getOptions$1(el3, value, modifiers) {
  let options2;
  const type = typeof value;
  if (type === "string") {
    options2 = { content: value };
  } else if (value && type === "object") {
    options2 = value;
  } else {
    options2 = { content: false };
  }
  options2.placement = getPlacement(options2, modifiers);
  options2.targetNodes = () => [el3];
  options2.referenceNode = () => el3;
  return options2;
}
let directiveApp;
let directives;
let uid$2 = 0;
function ensureDirectiveApp() {
  if (directiveApp)
    return;
  directives = ref$1([]);
  directiveApp = createApp$1({
    name: "VTooltipDirectiveApp",
    setup() {
      return {
        directives
      };
    },
    render() {
      return this.directives.map((directive) => {
        return h$4(PrivateTooltipDirective, __spreadProps(__spreadValues$1({}, directive.options), {
          shown: directive.shown || directive.options.shown,
          key: directive.id
        }));
      });
    },
    devtools: {
      hide: true
    }
  });
  const mountTarget = document.createElement("div");
  document.body.appendChild(mountTarget);
  directiveApp.mount(mountTarget);
}
function createTooltip(el3, value, modifiers) {
  ensureDirectiveApp();
  const options2 = ref$1(getOptions$1(el3, value, modifiers));
  const shown = ref$1(false);
  const item = {
    id: uid$2++,
    options: options2,
    shown
  };
  directives.value.push(item);
  if (el3.classList) {
    el3.classList.add(TARGET_CLASS);
  }
  const result = el3.$_popper = {
    options: options2,
    item,
    show() {
      shown.value = true;
    },
    hide() {
      shown.value = false;
    }
  };
  return result;
}
function destroyTooltip(el3) {
  if (el3.$_popper) {
    const index = directives.value.indexOf(el3.$_popper.item);
    if (index !== -1)
      directives.value.splice(index, 1);
    delete el3.$_popper;
    delete el3.$_popperOldShown;
    delete el3.$_popperMountTarget;
  }
  if (el3.classList) {
    el3.classList.remove(TARGET_CLASS);
  }
}
function bind(el3, { value, modifiers }) {
  const options2 = getOptions$1(el3, value, modifiers);
  if (!options2.content || getDefaultConfig$1(options2.theme || "tooltip", "disabled")) {
    destroyTooltip(el3);
  } else {
    let directive;
    if (el3.$_popper) {
      directive = el3.$_popper;
      directive.options.value = options2;
    } else {
      directive = createTooltip(el3, value, modifiers);
    }
    if (typeof value.shown !== "undefined" && value.shown !== el3.$_popperOldShown) {
      el3.$_popperOldShown = value.shown;
      value.shown ? directive.show() : directive.hide();
    }
  }
}
var PrivateVTooltip = {
  beforeMount: bind,
  updated: bind,
  beforeUnmount(el3) {
    destroyTooltip(el3);
  }
};
function addListeners(el3) {
  el3.addEventListener("click", onClick);
  el3.addEventListener("touchstart", onTouchStart, supportsPassive ? {
    passive: true
  } : false);
}
function removeListeners(el3) {
  el3.removeEventListener("click", onClick);
  el3.removeEventListener("touchstart", onTouchStart);
  el3.removeEventListener("touchend", onTouchEnd);
  el3.removeEventListener("touchcancel", onTouchCancel);
}
function onClick(event) {
  const el3 = event.currentTarget;
  event.closePopover = !el3.$_vclosepopover_touch;
  event.closeAllPopover = el3.$_closePopoverModifiers && !!el3.$_closePopoverModifiers.all;
}
function onTouchStart(event) {
  if (event.changedTouches.length === 1) {
    const el3 = event.currentTarget;
    el3.$_vclosepopover_touch = true;
    const touch = event.changedTouches[0];
    el3.$_vclosepopover_touchPoint = touch;
    el3.addEventListener("touchend", onTouchEnd);
    el3.addEventListener("touchcancel", onTouchCancel);
  }
}
function onTouchEnd(event) {
  const el3 = event.currentTarget;
  el3.$_vclosepopover_touch = false;
  if (event.changedTouches.length === 1) {
    const touch = event.changedTouches[0];
    const firstTouch = el3.$_vclosepopover_touchPoint;
    event.closePopover = Math.abs(touch.screenY - firstTouch.screenY) < 20 && Math.abs(touch.screenX - firstTouch.screenX) < 20;
    event.closeAllPopover = el3.$_closePopoverModifiers && !!el3.$_closePopoverModifiers.all;
  }
}
function onTouchCancel(event) {
  const el3 = event.currentTarget;
  el3.$_vclosepopover_touch = false;
}
var PrivateVClosePopper = {
  beforeMount(el3, { value, modifiers }) {
    el3.$_closePopoverModifiers = modifiers;
    if (typeof value === "undefined" || value) {
      addListeners(el3);
    }
  },
  updated(el3, { value, oldValue, modifiers }) {
    el3.$_closePopoverModifiers = modifiers;
    if (value !== oldValue) {
      if (typeof value === "undefined" || value) {
        addListeners(el3);
      } else {
        removeListeners(el3);
      }
    }
  },
  beforeUnmount(el3) {
    removeListeners(el3);
  }
};
const VTooltip = PrivateVTooltip;
const Dropdown = _sfc_main$3;
function install(app, options2 = {}) {
  if (app.$_vTooltipInstalled)
    return;
  app.$_vTooltipInstalled = true;
  assign$5(config$2, options2);
  app.directive("tooltip", PrivateVTooltip);
  app.directive("close-popper", PrivateVClosePopper);
  app.component("VTooltip", _sfc_main$1);
  app.component("VDropdown", _sfc_main$3);
  app.component("VMenu", _sfc_main$2);
}
const plugin = {
  version: "2.0.0-beta.19",
  install,
  options: config$2
};
const scriptRel = "modulepreload";
const assetsURL = function(dep) {
  return "/vue-components/" + dep;
};
const seen = {};
const __vitePreload = function preload(baseModule, deps, importerUrl) {
  let promise = Promise.resolve();
  if (deps && deps.length > 0) {
    const links = document.getElementsByTagName("link");
    promise = Promise.all(deps.map((dep) => {
      dep = assetsURL(dep);
      if (dep in seen)
        return;
      seen[dep] = true;
      const isCss = dep.endsWith(".css");
      const cssSelector = isCss ? '[rel="stylesheet"]' : "";
      const isBaseRelative = !!importerUrl;
      if (isBaseRelative) {
        for (let i3 = links.length - 1; i3 >= 0; i3--) {
          const link2 = links[i3];
          if (link2.href === dep && (!isCss || link2.rel === "stylesheet")) {
            return;
          }
        }
      } else if (document.querySelector(`link[href="${dep}"]${cssSelector}`)) {
        return;
      }
      const link = document.createElement("link");
      link.rel = isCss ? "stylesheet" : scriptRel;
      if (!isCss) {
        link.as = "script";
        link.crossOrigin = "";
      }
      link.href = dep;
      document.head.appendChild(link);
      if (isCss) {
        return new Promise((res, rej) => {
          link.addEventListener("load", res);
          link.addEventListener("error", () => rej(new Error(`Unable to preload CSS for ${dep}`)));
        });
      }
    }));
  }
  return promise.then(() => baseModule()).catch((err) => {
    const e3 = new Event("vite:preloadError", { cancelable: true });
    e3.payload = err;
    window.dispatchEvent(e3);
    if (!e3.defaultPrevented) {
      throw err;
    }
  });
};
function makeMap(str, expectsLowerCase) {
  const set2 = new Set(str.split(","));
  return expectsLowerCase ? (val) => set2.has(val.toLowerCase()) : (val) => set2.has(val);
}
const EMPTY_OBJ = Object.freeze({});
const EMPTY_ARR = Object.freeze([]);
const NOOP = () => {
};
const NO = () => false;
const isOn = (key) => key.charCodeAt(0) === 111 && key.charCodeAt(1) === 110 && // uppercase letter
(key.charCodeAt(2) > 122 || key.charCodeAt(2) < 97);
const isModelListener = (key) => key.startsWith("onUpdate:");
const extend = Object.assign;
const remove = (arr, el3) => {
  const i3 = arr.indexOf(el3);
  if (i3 > -1) {
    arr.splice(i3, 1);
  }
};
const hasOwnProperty$2 = Object.prototype.hasOwnProperty;
const hasOwn$1 = (val, key) => hasOwnProperty$2.call(val, key);
const isArray$3 = Array.isArray;
const isMap = (val) => toTypeString$1(val) === "[object Map]";
const isSet = (val) => toTypeString$1(val) === "[object Set]";
const isDate$2 = (val) => toTypeString$1(val) === "[object Date]";
const isFunction$2 = (val) => typeof val === "function";
const isString$2 = (val) => typeof val === "string";
const isSymbol = (val) => typeof val === "symbol";
const isObject$3 = (val) => val !== null && typeof val === "object";
const isPromise$1 = (val) => {
  return (isObject$3(val) || isFunction$2(val)) && isFunction$2(val.then) && isFunction$2(val.catch);
};
const objectToString$1 = Object.prototype.toString;
const toTypeString$1 = (value) => objectToString$1.call(value);
const toRawType = (value) => {
  return toTypeString$1(value).slice(8, -1);
};
const isPlainObject$1 = (val) => toTypeString$1(val) === "[object Object]";
const isIntegerKey = (key) => isString$2(key) && key !== "NaN" && key[0] !== "-" && "" + parseInt(key, 10) === key;
const isReservedProp = /* @__PURE__ */ makeMap(
  // the leading comma is intentional so empty string "" is also included
  ",key,ref,ref_for,ref_key,onVnodeBeforeMount,onVnodeMounted,onVnodeBeforeUpdate,onVnodeUpdated,onVnodeBeforeUnmount,onVnodeUnmounted"
);
const isBuiltInDirective = /* @__PURE__ */ makeMap(
  "bind,cloak,else-if,else,for,html,if,model,on,once,pre,show,slot,text,memo"
);
const cacheStringFunction = (fn2) => {
  const cache2 = /* @__PURE__ */ Object.create(null);
  return (str) => {
    const hit = cache2[str];
    return hit || (cache2[str] = fn2(str));
  };
};
const camelizeRE = /-(\w)/g;
const camelize = cacheStringFunction((str) => {
  return str.replace(camelizeRE, (_2, c3) => c3 ? c3.toUpperCase() : "");
});
const hyphenateRE = /\B([A-Z])/g;
const hyphenate = cacheStringFunction(
  (str) => str.replace(hyphenateRE, "-$1").toLowerCase()
);
const capitalize$1 = cacheStringFunction((str) => {
  return str.charAt(0).toUpperCase() + str.slice(1);
});
const toHandlerKey = cacheStringFunction((str) => {
  const s5 = str ? `on${capitalize$1(str)}` : ``;
  return s5;
});
const hasChanged = (value, oldValue) => !Object.is(value, oldValue);
const invokeArrayFns = (fns, arg) => {
  for (let i3 = 0; i3 < fns.length; i3++) {
    fns[i3](arg);
  }
};
const def = (obj, key, value) => {
  Object.defineProperty(obj, key, {
    configurable: true,
    enumerable: false,
    value
  });
};
const looseToNumber = (val) => {
  const n2 = parseFloat(val);
  return isNaN(n2) ? val : n2;
};
const toNumber = (val) => {
  const n2 = isString$2(val) ? Number(val) : NaN;
  return isNaN(n2) ? val : n2;
};
let _globalThis$1;
const getGlobalThis$1 = () => {
  return _globalThis$1 || (_globalThis$1 = typeof globalThis !== "undefined" ? globalThis : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : typeof global !== "undefined" ? global : {});
};
function normalizeStyle(value) {
  if (isArray$3(value)) {
    const res = {};
    for (let i3 = 0; i3 < value.length; i3++) {
      const item = value[i3];
      const normalized = isString$2(item) ? parseStringStyle(item) : normalizeStyle(item);
      if (normalized) {
        for (const key in normalized) {
          res[key] = normalized[key];
        }
      }
    }
    return res;
  } else if (isString$2(value) || isObject$3(value)) {
    return value;
  }
}
const listDelimiterRE = /;(?![^(]*\))/g;
const propertyDelimiterRE = /:([^]+)/;
const styleCommentRE = /\/\*[^]*?\*\//g;
function parseStringStyle(cssText) {
  const ret = {};
  cssText.replace(styleCommentRE, "").split(listDelimiterRE).forEach((item) => {
    if (item) {
      const tmp = item.split(propertyDelimiterRE);
      tmp.length > 1 && (ret[tmp[0].trim()] = tmp[1].trim());
    }
  });
  return ret;
}
function normalizeClass(value) {
  let res = "";
  if (isString$2(value)) {
    res = value;
  } else if (isArray$3(value)) {
    for (let i3 = 0; i3 < value.length; i3++) {
      const normalized = normalizeClass(value[i3]);
      if (normalized) {
        res += normalized + " ";
      }
    }
  } else if (isObject$3(value)) {
    for (const name in value) {
      if (value[name]) {
        res += name + " ";
      }
    }
  }
  return res.trim();
}
function normalizeProps(props) {
  if (!props)
    return null;
  let { class: klass, style } = props;
  if (klass && !isString$2(klass)) {
    props.class = normalizeClass(klass);
  }
  if (style) {
    props.style = normalizeStyle(style);
  }
  return props;
}
const HTML_TAGS = "html,body,base,head,link,meta,style,title,address,article,aside,footer,header,hgroup,h1,h2,h3,h4,h5,h6,nav,section,div,dd,dl,dt,figcaption,figure,picture,hr,img,li,main,ol,p,pre,ul,a,b,abbr,bdi,bdo,br,cite,code,data,dfn,em,i,kbd,mark,q,rp,rt,ruby,s,samp,small,span,strong,sub,sup,time,u,var,wbr,area,audio,map,track,video,embed,object,param,source,canvas,script,noscript,del,ins,caption,col,colgroup,table,thead,tbody,td,th,tr,button,datalist,fieldset,form,input,label,legend,meter,optgroup,option,output,progress,select,textarea,details,dialog,menu,summary,template,blockquote,iframe,tfoot";
const SVG_TAGS = "svg,animate,animateMotion,animateTransform,circle,clipPath,color-profile,defs,desc,discard,ellipse,feBlend,feColorMatrix,feComponentTransfer,feComposite,feConvolveMatrix,feDiffuseLighting,feDisplacementMap,feDistantLight,feDropShadow,feFlood,feFuncA,feFuncB,feFuncG,feFuncR,feGaussianBlur,feImage,feMerge,feMergeNode,feMorphology,feOffset,fePointLight,feSpecularLighting,feSpotLight,feTile,feTurbulence,filter,foreignObject,g,hatch,hatchpath,image,line,linearGradient,marker,mask,mesh,meshgradient,meshpatch,meshrow,metadata,mpath,path,pattern,polygon,polyline,radialGradient,rect,set,solidcolor,stop,switch,symbol,text,textPath,title,tspan,unknown,use,view";
const MATH_TAGS = "annotation,annotation-xml,maction,maligngroup,malignmark,math,menclose,merror,mfenced,mfrac,mfraction,mglyph,mi,mlabeledtr,mlongdiv,mmultiscripts,mn,mo,mover,mpadded,mphantom,mprescripts,mroot,mrow,ms,mscarries,mscarry,msgroup,msline,mspace,msqrt,msrow,mstack,mstyle,msub,msubsup,msup,mtable,mtd,mtext,mtr,munder,munderover,none,semantics";
const isHTMLTag = /* @__PURE__ */ makeMap(HTML_TAGS);
const isSVGTag = /* @__PURE__ */ makeMap(SVG_TAGS);
const isMathMLTag = /* @__PURE__ */ makeMap(MATH_TAGS);
const specialBooleanAttrs = `itemscope,allowfullscreen,formnovalidate,ismap,nomodule,novalidate,readonly`;
const isSpecialBooleanAttr = /* @__PURE__ */ makeMap(specialBooleanAttrs);
function includeBooleanAttr(value) {
  return !!value || value === "";
}
function looseCompareArrays(a4, b4) {
  if (a4.length !== b4.length)
    return false;
  let equal = true;
  for (let i3 = 0; equal && i3 < a4.length; i3++) {
    equal = looseEqual(a4[i3], b4[i3]);
  }
  return equal;
}
function looseEqual(a4, b4) {
  if (a4 === b4)
    return true;
  let aValidType = isDate$2(a4);
  let bValidType = isDate$2(b4);
  if (aValidType || bValidType) {
    return aValidType && bValidType ? a4.getTime() === b4.getTime() : false;
  }
  aValidType = isSymbol(a4);
  bValidType = isSymbol(b4);
  if (aValidType || bValidType) {
    return a4 === b4;
  }
  aValidType = isArray$3(a4);
  bValidType = isArray$3(b4);
  if (aValidType || bValidType) {
    return aValidType && bValidType ? looseCompareArrays(a4, b4) : false;
  }
  aValidType = isObject$3(a4);
  bValidType = isObject$3(b4);
  if (aValidType || bValidType) {
    if (!aValidType || !bValidType) {
      return false;
    }
    const aKeysCount = Object.keys(a4).length;
    const bKeysCount = Object.keys(b4).length;
    if (aKeysCount !== bKeysCount) {
      return false;
    }
    for (const key in a4) {
      const aHasKey = a4.hasOwnProperty(key);
      const bHasKey = b4.hasOwnProperty(key);
      if (aHasKey && !bHasKey || !aHasKey && bHasKey || !looseEqual(a4[key], b4[key])) {
        return false;
      }
    }
  }
  return String(a4) === String(b4);
}
function looseIndexOf(arr, val) {
  return arr.findIndex((item) => looseEqual(item, val));
}
const toDisplayString$1 = (val) => {
  return isString$2(val) ? val : val == null ? "" : isArray$3(val) || isObject$3(val) && (val.toString === objectToString$1 || !isFunction$2(val.toString)) ? JSON.stringify(val, replacer, 2) : String(val);
};
const replacer = (_key, val) => {
  if (val && val.__v_isRef) {
    return replacer(_key, val.value);
  } else if (isMap(val)) {
    return {
      [`Map(${val.size})`]: [...val.entries()].reduce(
        (entries, [key, val2], i3) => {
          entries[stringifySymbol(key, i3) + " =>"] = val2;
          return entries;
        },
        {}
      )
    };
  } else if (isSet(val)) {
    return {
      [`Set(${val.size})`]: [...val.values()].map((v2) => stringifySymbol(v2))
    };
  } else if (isSymbol(val)) {
    return stringifySymbol(val);
  } else if (isObject$3(val) && !isArray$3(val) && !isPlainObject$1(val)) {
    return String(val);
  }
  return val;
};
const stringifySymbol = (v2, i3 = "") => {
  var _a2;
  return isSymbol(v2) ? `Symbol(${(_a2 = v2.description) != null ? _a2 : i3})` : v2;
};
function warn$4(msg, ...args) {
  console.warn(`[Vue warn] ${msg}`, ...args);
}
let activeEffectScope;
class EffectScope {
  constructor(detached = false) {
    this.detached = detached;
    this._active = true;
    this.effects = [];
    this.cleanups = [];
    this.parent = activeEffectScope;
    if (!detached && activeEffectScope) {
      this.index = (activeEffectScope.scopes || (activeEffectScope.scopes = [])).push(
        this
      ) - 1;
    }
  }
  get active() {
    return this._active;
  }
  run(fn2) {
    if (this._active) {
      const currentEffectScope = activeEffectScope;
      try {
        activeEffectScope = this;
        return fn2();
      } finally {
        activeEffectScope = currentEffectScope;
      }
    } else {
      warn$4(`cannot run an inactive effect scope.`);
    }
  }
  /**
   * This should only be called on non-detached scopes
   * @internal
   */
  on() {
    activeEffectScope = this;
  }
  /**
   * This should only be called on non-detached scopes
   * @internal
   */
  off() {
    activeEffectScope = this.parent;
  }
  stop(fromParent) {
    if (this._active) {
      let i3, l2;
      for (i3 = 0, l2 = this.effects.length; i3 < l2; i3++) {
        this.effects[i3].stop();
      }
      for (i3 = 0, l2 = this.cleanups.length; i3 < l2; i3++) {
        this.cleanups[i3]();
      }
      if (this.scopes) {
        for (i3 = 0, l2 = this.scopes.length; i3 < l2; i3++) {
          this.scopes[i3].stop(true);
        }
      }
      if (!this.detached && this.parent && !fromParent) {
        const last = this.parent.scopes.pop();
        if (last && last !== this) {
          this.parent.scopes[this.index] = last;
          last.index = this.index;
        }
      }
      this.parent = void 0;
      this._active = false;
    }
  }
}
function effectScope(detached) {
  return new EffectScope(detached);
}
function recordEffectScope(effect2, scope = activeEffectScope) {
  if (scope && scope.active) {
    scope.effects.push(effect2);
  }
}
function getCurrentScope() {
  return activeEffectScope;
}
function onScopeDispose(fn2) {
  if (activeEffectScope) {
    activeEffectScope.cleanups.push(fn2);
  } else {
    warn$4(
      `onScopeDispose() is called when there is no active effect scope to be associated with.`
    );
  }
}
let activeEffect;
class ReactiveEffect {
  constructor(fn2, trigger2, scheduler, scope) {
    this.fn = fn2;
    this.trigger = trigger2;
    this.scheduler = scheduler;
    this.active = true;
    this.deps = [];
    this._dirtyLevel = 3;
    this._trackId = 0;
    this._runnings = 0;
    this._queryings = 0;
    this._depsLength = 0;
    recordEffectScope(this, scope);
  }
  get dirty() {
    if (this._dirtyLevel === 1) {
      this._dirtyLevel = 0;
      this._queryings++;
      pauseTracking();
      for (const dep of this.deps) {
        if (dep.computed) {
          triggerComputed(dep.computed);
          if (this._dirtyLevel >= 2) {
            break;
          }
        }
      }
      resetTracking();
      this._queryings--;
    }
    return this._dirtyLevel >= 2;
  }
  set dirty(v2) {
    this._dirtyLevel = v2 ? 3 : 0;
  }
  run() {
    this._dirtyLevel = 0;
    if (!this.active) {
      return this.fn();
    }
    let lastShouldTrack = shouldTrack;
    let lastEffect = activeEffect;
    try {
      shouldTrack = true;
      activeEffect = this;
      this._runnings++;
      preCleanupEffect(this);
      return this.fn();
    } finally {
      postCleanupEffect(this);
      this._runnings--;
      activeEffect = lastEffect;
      shouldTrack = lastShouldTrack;
    }
  }
  stop() {
    var _a2;
    if (this.active) {
      preCleanupEffect(this);
      postCleanupEffect(this);
      (_a2 = this.onStop) == null ? void 0 : _a2.call(this);
      this.active = false;
    }
  }
}
function triggerComputed(computed2) {
  return computed2.value;
}
function preCleanupEffect(effect2) {
  effect2._trackId++;
  effect2._depsLength = 0;
}
function postCleanupEffect(effect2) {
  if (effect2.deps && effect2.deps.length > effect2._depsLength) {
    for (let i3 = effect2._depsLength; i3 < effect2.deps.length; i3++) {
      cleanupDepEffect(effect2.deps[i3], effect2);
    }
    effect2.deps.length = effect2._depsLength;
  }
}
function cleanupDepEffect(dep, effect2) {
  const trackId = dep.get(effect2);
  if (trackId !== void 0 && effect2._trackId !== trackId) {
    dep.delete(effect2);
    if (dep.size === 0) {
      dep.cleanup();
    }
  }
}
let shouldTrack = true;
let pauseScheduleStack = 0;
const trackStack = [];
function pauseTracking() {
  trackStack.push(shouldTrack);
  shouldTrack = false;
}
function resetTracking() {
  const last = trackStack.pop();
  shouldTrack = last === void 0 ? true : last;
}
function pauseScheduling() {
  pauseScheduleStack++;
}
function resetScheduling() {
  pauseScheduleStack--;
  while (!pauseScheduleStack && queueEffectSchedulers.length) {
    queueEffectSchedulers.shift()();
  }
}
function trackEffect(effect2, dep, debuggerEventExtraInfo) {
  var _a2;
  if (dep.get(effect2) !== effect2._trackId) {
    dep.set(effect2, effect2._trackId);
    const oldDep = effect2.deps[effect2._depsLength];
    if (oldDep !== dep) {
      if (oldDep) {
        cleanupDepEffect(oldDep, effect2);
      }
      effect2.deps[effect2._depsLength++] = dep;
    } else {
      effect2._depsLength++;
    }
    {
      (_a2 = effect2.onTrack) == null ? void 0 : _a2.call(effect2, extend({ effect: effect2 }, debuggerEventExtraInfo));
    }
  }
}
const queueEffectSchedulers = [];
function triggerEffects(dep, dirtyLevel, debuggerEventExtraInfo) {
  var _a2;
  pauseScheduling();
  for (const effect2 of dep.keys()) {
    if (!effect2.allowRecurse && effect2._runnings) {
      continue;
    }
    if (effect2._dirtyLevel < dirtyLevel && (!effect2._runnings || dirtyLevel !== 2)) {
      const lastDirtyLevel = effect2._dirtyLevel;
      effect2._dirtyLevel = dirtyLevel;
      if (lastDirtyLevel === 0 && (!effect2._queryings || dirtyLevel !== 2)) {
        {
          (_a2 = effect2.onTrigger) == null ? void 0 : _a2.call(effect2, extend({ effect: effect2 }, debuggerEventExtraInfo));
        }
        effect2.trigger();
        if (effect2.scheduler) {
          queueEffectSchedulers.push(effect2.scheduler);
        }
      }
    }
  }
  resetScheduling();
}
const createDep = (cleanup, computed2) => {
  const dep = /* @__PURE__ */ new Map();
  dep.cleanup = cleanup;
  dep.computed = computed2;
  return dep;
};
const targetMap = /* @__PURE__ */ new WeakMap();
const ITERATE_KEY = Symbol("iterate");
const MAP_KEY_ITERATE_KEY = Symbol("Map key iterate");
function track(target, type, key) {
  if (shouldTrack && activeEffect) {
    let depsMap = targetMap.get(target);
    if (!depsMap) {
      targetMap.set(target, depsMap = /* @__PURE__ */ new Map());
    }
    let dep = depsMap.get(key);
    if (!dep) {
      depsMap.set(key, dep = createDep(() => depsMap.delete(key)));
    }
    trackEffect(
      activeEffect,
      dep,
      {
        target,
        type,
        key
      }
    );
  }
}
function trigger(target, type, key, newValue, oldValue, oldTarget) {
  const depsMap = targetMap.get(target);
  if (!depsMap) {
    return;
  }
  let deps = [];
  if (type === "clear") {
    deps = [...depsMap.values()];
  } else if (key === "length" && isArray$3(target)) {
    const newLength = Number(newValue);
    depsMap.forEach((dep, key2) => {
      if (key2 === "length" || !isSymbol(key2) && key2 >= newLength) {
        deps.push(dep);
      }
    });
  } else {
    if (key !== void 0) {
      deps.push(depsMap.get(key));
    }
    switch (type) {
      case "add":
        if (!isArray$3(target)) {
          deps.push(depsMap.get(ITERATE_KEY));
          if (isMap(target)) {
            deps.push(depsMap.get(MAP_KEY_ITERATE_KEY));
          }
        } else if (isIntegerKey(key)) {
          deps.push(depsMap.get("length"));
        }
        break;
      case "delete":
        if (!isArray$3(target)) {
          deps.push(depsMap.get(ITERATE_KEY));
          if (isMap(target)) {
            deps.push(depsMap.get(MAP_KEY_ITERATE_KEY));
          }
        }
        break;
      case "set":
        if (isMap(target)) {
          deps.push(depsMap.get(ITERATE_KEY));
        }
        break;
    }
  }
  pauseScheduling();
  for (const dep of deps) {
    if (dep) {
      triggerEffects(
        dep,
        3,
        {
          target,
          type,
          key,
          newValue,
          oldValue,
          oldTarget
        }
      );
    }
  }
  resetScheduling();
}
function getDepFromReactive(object, key) {
  var _a2;
  return (_a2 = targetMap.get(object)) == null ? void 0 : _a2.get(key);
}
const isNonTrackableKeys = /* @__PURE__ */ makeMap(`__proto__,__v_isRef,__isVue`);
const builtInSymbols = new Set(
  /* @__PURE__ */ Object.getOwnPropertyNames(Symbol).filter((key) => key !== "arguments" && key !== "caller").map((key) => Symbol[key]).filter(isSymbol)
);
const arrayInstrumentations = /* @__PURE__ */ createArrayInstrumentations();
function createArrayInstrumentations() {
  const instrumentations = {};
  ["includes", "indexOf", "lastIndexOf"].forEach((key) => {
    instrumentations[key] = function(...args) {
      const arr = toRaw(this);
      for (let i3 = 0, l2 = this.length; i3 < l2; i3++) {
        track(arr, "get", i3 + "");
      }
      const res = arr[key](...args);
      if (res === -1 || res === false) {
        return arr[key](...args.map(toRaw));
      } else {
        return res;
      }
    };
  });
  ["push", "pop", "shift", "unshift", "splice"].forEach((key) => {
    instrumentations[key] = function(...args) {
      pauseTracking();
      pauseScheduling();
      const res = toRaw(this)[key].apply(this, args);
      resetScheduling();
      resetTracking();
      return res;
    };
  });
  return instrumentations;
}
function hasOwnProperty$1(key) {
  const obj = toRaw(this);
  track(obj, "has", key);
  return obj.hasOwnProperty(key);
}
class BaseReactiveHandler {
  constructor(_isReadonly = false, _shallow = false) {
    this._isReadonly = _isReadonly;
    this._shallow = _shallow;
  }
  get(target, key, receiver) {
    const isReadonly2 = this._isReadonly, shallow = this._shallow;
    if (key === "__v_isReactive") {
      return !isReadonly2;
    } else if (key === "__v_isReadonly") {
      return isReadonly2;
    } else if (key === "__v_isShallow") {
      return shallow;
    } else if (key === "__v_raw") {
      if (receiver === (isReadonly2 ? shallow ? shallowReadonlyMap : readonlyMap : shallow ? shallowReactiveMap : reactiveMap).get(target) || // receiver is not the reactive proxy, but has the same prototype
      // this means the reciever is a user proxy of the reactive proxy
      Object.getPrototypeOf(target) === Object.getPrototypeOf(receiver)) {
        return target;
      }
      return;
    }
    const targetIsArray = isArray$3(target);
    if (!isReadonly2) {
      if (targetIsArray && hasOwn$1(arrayInstrumentations, key)) {
        return Reflect.get(arrayInstrumentations, key, receiver);
      }
      if (key === "hasOwnProperty") {
        return hasOwnProperty$1;
      }
    }
    const res = Reflect.get(target, key, receiver);
    if (isSymbol(key) ? builtInSymbols.has(key) : isNonTrackableKeys(key)) {
      return res;
    }
    if (!isReadonly2) {
      track(target, "get", key);
    }
    if (shallow) {
      return res;
    }
    if (isRef(res)) {
      return targetIsArray && isIntegerKey(key) ? res : res.value;
    }
    if (isObject$3(res)) {
      return isReadonly2 ? readonly(res) : reactive(res);
    }
    return res;
  }
}
class MutableReactiveHandler extends BaseReactiveHandler {
  constructor(shallow = false) {
    super(false, shallow);
  }
  set(target, key, value, receiver) {
    let oldValue = target[key];
    if (!this._shallow) {
      const isOldValueReadonly = isReadonly(oldValue);
      if (!isShallow(value) && !isReadonly(value)) {
        oldValue = toRaw(oldValue);
        value = toRaw(value);
      }
      if (!isArray$3(target) && isRef(oldValue) && !isRef(value)) {
        if (isOldValueReadonly) {
          return false;
        } else {
          oldValue.value = value;
          return true;
        }
      }
    }
    const hadKey = isArray$3(target) && isIntegerKey(key) ? Number(key) < target.length : hasOwn$1(target, key);
    const result = Reflect.set(target, key, value, receiver);
    if (target === toRaw(receiver)) {
      if (!hadKey) {
        trigger(target, "add", key, value);
      } else if (hasChanged(value, oldValue)) {
        trigger(target, "set", key, value, oldValue);
      }
    }
    return result;
  }
  deleteProperty(target, key) {
    const hadKey = hasOwn$1(target, key);
    const oldValue = target[key];
    const result = Reflect.deleteProperty(target, key);
    if (result && hadKey) {
      trigger(target, "delete", key, void 0, oldValue);
    }
    return result;
  }
  has(target, key) {
    const result = Reflect.has(target, key);
    if (!isSymbol(key) || !builtInSymbols.has(key)) {
      track(target, "has", key);
    }
    return result;
  }
  ownKeys(target) {
    track(
      target,
      "iterate",
      isArray$3(target) ? "length" : ITERATE_KEY
    );
    return Reflect.ownKeys(target);
  }
}
class ReadonlyReactiveHandler extends BaseReactiveHandler {
  constructor(shallow = false) {
    super(true, shallow);
  }
  set(target, key) {
    {
      warn$4(
        `Set operation on key "${String(key)}" failed: target is readonly.`,
        target
      );
    }
    return true;
  }
  deleteProperty(target, key) {
    {
      warn$4(
        `Delete operation on key "${String(key)}" failed: target is readonly.`,
        target
      );
    }
    return true;
  }
}
const mutableHandlers = /* @__PURE__ */ new MutableReactiveHandler();
const readonlyHandlers = /* @__PURE__ */ new ReadonlyReactiveHandler();
const shallowReactiveHandlers = /* @__PURE__ */ new MutableReactiveHandler(
  true
);
const shallowReadonlyHandlers = /* @__PURE__ */ new ReadonlyReactiveHandler(true);
const toShallow = (value) => value;
const getProto = (v2) => Reflect.getPrototypeOf(v2);
function get(target, key, isReadonly2 = false, isShallow22 = false) {
  target = target["__v_raw"];
  const rawTarget = toRaw(target);
  const rawKey = toRaw(key);
  if (!isReadonly2) {
    if (hasChanged(key, rawKey)) {
      track(rawTarget, "get", key);
    }
    track(rawTarget, "get", rawKey);
  }
  const { has: has2 } = getProto(rawTarget);
  const wrap2 = isShallow22 ? toShallow : isReadonly2 ? toReadonly : toReactive;
  if (has2.call(rawTarget, key)) {
    return wrap2(target.get(key));
  } else if (has2.call(rawTarget, rawKey)) {
    return wrap2(target.get(rawKey));
  } else if (target !== rawTarget) {
    target.get(key);
  }
}
function has(key, isReadonly2 = false) {
  const target = this["__v_raw"];
  const rawTarget = toRaw(target);
  const rawKey = toRaw(key);
  if (!isReadonly2) {
    if (hasChanged(key, rawKey)) {
      track(rawTarget, "has", key);
    }
    track(rawTarget, "has", rawKey);
  }
  return key === rawKey ? target.has(key) : target.has(key) || target.has(rawKey);
}
function size(target, isReadonly2 = false) {
  target = target["__v_raw"];
  !isReadonly2 && track(toRaw(target), "iterate", ITERATE_KEY);
  return Reflect.get(target, "size", target);
}
function add$1(value) {
  value = toRaw(value);
  const target = toRaw(this);
  const proto = getProto(target);
  const hadKey = proto.has.call(target, value);
  if (!hadKey) {
    target.add(value);
    trigger(target, "add", value, value);
  }
  return this;
}
function set$1(key, value) {
  value = toRaw(value);
  const target = toRaw(this);
  const { has: has2, get: get2 } = getProto(target);
  let hadKey = has2.call(target, key);
  if (!hadKey) {
    key = toRaw(key);
    hadKey = has2.call(target, key);
  } else {
    checkIdentityKeys(target, has2, key);
  }
  const oldValue = get2.call(target, key);
  target.set(key, value);
  if (!hadKey) {
    trigger(target, "add", key, value);
  } else if (hasChanged(value, oldValue)) {
    trigger(target, "set", key, value, oldValue);
  }
  return this;
}
function deleteEntry(key) {
  const target = toRaw(this);
  const { has: has2, get: get2 } = getProto(target);
  let hadKey = has2.call(target, key);
  if (!hadKey) {
    key = toRaw(key);
    hadKey = has2.call(target, key);
  } else {
    checkIdentityKeys(target, has2, key);
  }
  const oldValue = get2 ? get2.call(target, key) : void 0;
  const result = target.delete(key);
  if (hadKey) {
    trigger(target, "delete", key, void 0, oldValue);
  }
  return result;
}
function clear() {
  const target = toRaw(this);
  const hadItems = target.size !== 0;
  const oldTarget = isMap(target) ? new Map(target) : new Set(target);
  const result = target.clear();
  if (hadItems) {
    trigger(target, "clear", void 0, void 0, oldTarget);
  }
  return result;
}
function createForEach(isReadonly2, isShallow22) {
  return function forEach(callback, thisArg) {
    const observed = this;
    const target = observed["__v_raw"];
    const rawTarget = toRaw(target);
    const wrap2 = isShallow22 ? toShallow : isReadonly2 ? toReadonly : toReactive;
    !isReadonly2 && track(rawTarget, "iterate", ITERATE_KEY);
    return target.forEach((value, key) => {
      return callback.call(thisArg, wrap2(value), wrap2(key), observed);
    });
  };
}
function createIterableMethod(method, isReadonly2, isShallow22) {
  return function(...args) {
    const target = this["__v_raw"];
    const rawTarget = toRaw(target);
    const targetIsMap = isMap(rawTarget);
    const isPair = method === "entries" || method === Symbol.iterator && targetIsMap;
    const isKeyOnly = method === "keys" && targetIsMap;
    const innerIterator = target[method](...args);
    const wrap2 = isShallow22 ? toShallow : isReadonly2 ? toReadonly : toReactive;
    !isReadonly2 && track(
      rawTarget,
      "iterate",
      isKeyOnly ? MAP_KEY_ITERATE_KEY : ITERATE_KEY
    );
    return {
      // iterator protocol
      next() {
        const { value, done } = innerIterator.next();
        return done ? { value, done } : {
          value: isPair ? [wrap2(value[0]), wrap2(value[1])] : wrap2(value),
          done
        };
      },
      // iterable protocol
      [Symbol.iterator]() {
        return this;
      }
    };
  };
}
function createReadonlyMethod(type) {
  return function(...args) {
    {
      const key = args[0] ? `on key "${args[0]}" ` : ``;
      console.warn(
        `${capitalize$1(type)} operation ${key}failed: target is readonly.`,
        toRaw(this)
      );
    }
    return type === "delete" ? false : type === "clear" ? void 0 : this;
  };
}
function createInstrumentations() {
  const mutableInstrumentations2 = {
    get(key) {
      return get(this, key);
    },
    get size() {
      return size(this);
    },
    has,
    add: add$1,
    set: set$1,
    delete: deleteEntry,
    clear,
    forEach: createForEach(false, false)
  };
  const shallowInstrumentations2 = {
    get(key) {
      return get(this, key, false, true);
    },
    get size() {
      return size(this);
    },
    has,
    add: add$1,
    set: set$1,
    delete: deleteEntry,
    clear,
    forEach: createForEach(false, true)
  };
  const readonlyInstrumentations2 = {
    get(key) {
      return get(this, key, true);
    },
    get size() {
      return size(this, true);
    },
    has(key) {
      return has.call(this, key, true);
    },
    add: createReadonlyMethod("add"),
    set: createReadonlyMethod("set"),
    delete: createReadonlyMethod("delete"),
    clear: createReadonlyMethod("clear"),
    forEach: createForEach(true, false)
  };
  const shallowReadonlyInstrumentations2 = {
    get(key) {
      return get(this, key, true, true);
    },
    get size() {
      return size(this, true);
    },
    has(key) {
      return has.call(this, key, true);
    },
    add: createReadonlyMethod("add"),
    set: createReadonlyMethod("set"),
    delete: createReadonlyMethod("delete"),
    clear: createReadonlyMethod("clear"),
    forEach: createForEach(true, true)
  };
  const iteratorMethods = ["keys", "values", "entries", Symbol.iterator];
  iteratorMethods.forEach((method) => {
    mutableInstrumentations2[method] = createIterableMethod(
      method,
      false,
      false
    );
    readonlyInstrumentations2[method] = createIterableMethod(
      method,
      true,
      false
    );
    shallowInstrumentations2[method] = createIterableMethod(
      method,
      false,
      true
    );
    shallowReadonlyInstrumentations2[method] = createIterableMethod(
      method,
      true,
      true
    );
  });
  return [
    mutableInstrumentations2,
    readonlyInstrumentations2,
    shallowInstrumentations2,
    shallowReadonlyInstrumentations2
  ];
}
const [
  mutableInstrumentations,
  readonlyInstrumentations,
  shallowInstrumentations,
  shallowReadonlyInstrumentations
] = /* @__PURE__ */ createInstrumentations();
function createInstrumentationGetter(isReadonly2, shallow) {
  const instrumentations = shallow ? isReadonly2 ? shallowReadonlyInstrumentations : shallowInstrumentations : isReadonly2 ? readonlyInstrumentations : mutableInstrumentations;
  return (target, key, receiver) => {
    if (key === "__v_isReactive") {
      return !isReadonly2;
    } else if (key === "__v_isReadonly") {
      return isReadonly2;
    } else if (key === "__v_raw") {
      return target;
    }
    return Reflect.get(
      hasOwn$1(instrumentations, key) && key in target ? instrumentations : target,
      key,
      receiver
    );
  };
}
const mutableCollectionHandlers = {
  get: /* @__PURE__ */ createInstrumentationGetter(false, false)
};
const shallowCollectionHandlers = {
  get: /* @__PURE__ */ createInstrumentationGetter(false, true)
};
const readonlyCollectionHandlers = {
  get: /* @__PURE__ */ createInstrumentationGetter(true, false)
};
const shallowReadonlyCollectionHandlers = {
  get: /* @__PURE__ */ createInstrumentationGetter(true, true)
};
function checkIdentityKeys(target, has2, key) {
  const rawKey = toRaw(key);
  if (rawKey !== key && has2.call(target, rawKey)) {
    const type = toRawType(target);
    console.warn(
      `Reactive ${type} contains both the raw and reactive versions of the same object${type === `Map` ? ` as keys` : ``}, which can lead to inconsistencies. Avoid differentiating between the raw and reactive versions of an object and only use the reactive version if possible.`
    );
  }
}
const reactiveMap = /* @__PURE__ */ new WeakMap();
const shallowReactiveMap = /* @__PURE__ */ new WeakMap();
const readonlyMap = /* @__PURE__ */ new WeakMap();
const shallowReadonlyMap = /* @__PURE__ */ new WeakMap();
function targetTypeMap(rawType) {
  switch (rawType) {
    case "Object":
    case "Array":
      return 1;
    case "Map":
    case "Set":
    case "WeakMap":
    case "WeakSet":
      return 2;
    default:
      return 0;
  }
}
function getTargetType(value) {
  return value["__v_skip"] || !Object.isExtensible(value) ? 0 : targetTypeMap(toRawType(value));
}
function reactive(target) {
  if (isReadonly(target)) {
    return target;
  }
  return createReactiveObject(
    target,
    false,
    mutableHandlers,
    mutableCollectionHandlers,
    reactiveMap
  );
}
function shallowReactive(target) {
  return createReactiveObject(
    target,
    false,
    shallowReactiveHandlers,
    shallowCollectionHandlers,
    shallowReactiveMap
  );
}
function readonly(target) {
  return createReactiveObject(
    target,
    true,
    readonlyHandlers,
    readonlyCollectionHandlers,
    readonlyMap
  );
}
function shallowReadonly(target) {
  return createReactiveObject(
    target,
    true,
    shallowReadonlyHandlers,
    shallowReadonlyCollectionHandlers,
    shallowReadonlyMap
  );
}
function createReactiveObject(target, isReadonly2, baseHandlers, collectionHandlers, proxyMap) {
  if (!isObject$3(target)) {
    {
      console.warn(`value cannot be made reactive: ${String(target)}`);
    }
    return target;
  }
  if (target["__v_raw"] && !(isReadonly2 && target["__v_isReactive"])) {
    return target;
  }
  const existingProxy = proxyMap.get(target);
  if (existingProxy) {
    return existingProxy;
  }
  const targetType = getTargetType(target);
  if (targetType === 0) {
    return target;
  }
  const proxy = new Proxy(
    target,
    targetType === 2 ? collectionHandlers : baseHandlers
  );
  proxyMap.set(target, proxy);
  return proxy;
}
function isReactive(value) {
  if (isReadonly(value)) {
    return isReactive(value["__v_raw"]);
  }
  return !!(value && value["__v_isReactive"]);
}
function isReadonly(value) {
  return !!(value && value["__v_isReadonly"]);
}
function isShallow(value) {
  return !!(value && value["__v_isShallow"]);
}
function isProxy(value) {
  return isReactive(value) || isReadonly(value);
}
function toRaw(observed) {
  const raw = observed && observed["__v_raw"];
  return raw ? toRaw(raw) : observed;
}
function markRaw(value) {
  def(value, "__v_skip", true);
  return value;
}
const toReactive = (value) => isObject$3(value) ? reactive(value) : value;
const toReadonly = (value) => isObject$3(value) ? readonly(value) : value;
class ComputedRefImpl {
  constructor(getter, _setter, isReadonly2, isSSR) {
    this._setter = _setter;
    this.dep = void 0;
    this.__v_isRef = true;
    this["__v_isReadonly"] = false;
    this.effect = new ReactiveEffect(
      () => getter(this._value),
      () => triggerRefValue(this, 1)
    );
    this.effect.computed = this;
    this.effect.active = this._cacheable = !isSSR;
    this["__v_isReadonly"] = isReadonly2;
  }
  get value() {
    const self2 = toRaw(this);
    trackRefValue(self2);
    if (!self2._cacheable || self2.effect.dirty) {
      if (hasChanged(self2._value, self2._value = self2.effect.run())) {
        triggerRefValue(self2, 2);
      }
    }
    return self2._value;
  }
  set value(newValue) {
    this._setter(newValue);
  }
  // #region polyfill _dirty for backward compatibility third party code for Vue <= 3.3.x
  get _dirty() {
    return this.effect.dirty;
  }
  set _dirty(v2) {
    this.effect.dirty = v2;
  }
  // #endregion
}
function computed$1(getterOrOptions, debugOptions, isSSR = false) {
  let getter;
  let setter;
  const onlyGetter = isFunction$2(getterOrOptions);
  if (onlyGetter) {
    getter = getterOrOptions;
    setter = () => {
      console.warn("Write operation failed: computed value is readonly");
    };
  } else {
    getter = getterOrOptions.get;
    setter = getterOrOptions.set;
  }
  const cRef = new ComputedRefImpl(getter, setter, onlyGetter || !setter, isSSR);
  if (debugOptions && !isSSR) {
    cRef.effect.onTrack = debugOptions.onTrack;
    cRef.effect.onTrigger = debugOptions.onTrigger;
  }
  return cRef;
}
function trackRefValue(ref2) {
  if (shouldTrack && activeEffect) {
    ref2 = toRaw(ref2);
    trackEffect(
      activeEffect,
      ref2.dep || (ref2.dep = createDep(
        () => ref2.dep = void 0,
        ref2 instanceof ComputedRefImpl ? ref2 : void 0
      )),
      {
        target: ref2,
        type: "get",
        key: "value"
      }
    );
  }
}
function triggerRefValue(ref2, dirtyLevel = 3, newVal) {
  ref2 = toRaw(ref2);
  const dep = ref2.dep;
  if (dep) {
    triggerEffects(
      dep,
      dirtyLevel,
      {
        target: ref2,
        type: "set",
        key: "value",
        newValue: newVal
      }
    );
  }
}
function isRef(r2) {
  return !!(r2 && r2.__v_isRef === true);
}
function ref(value) {
  return createRef(value, false);
}
function shallowRef(value) {
  return createRef(value, true);
}
function createRef(rawValue, shallow) {
  if (isRef(rawValue)) {
    return rawValue;
  }
  return new RefImpl(rawValue, shallow);
}
class RefImpl {
  constructor(value, __v_isShallow) {
    this.__v_isShallow = __v_isShallow;
    this.dep = void 0;
    this.__v_isRef = true;
    this._rawValue = __v_isShallow ? value : toRaw(value);
    this._value = __v_isShallow ? value : toReactive(value);
  }
  get value() {
    trackRefValue(this);
    return this._value;
  }
  set value(newVal) {
    const useDirectValue = this.__v_isShallow || isShallow(newVal) || isReadonly(newVal);
    newVal = useDirectValue ? newVal : toRaw(newVal);
    if (hasChanged(newVal, this._rawValue)) {
      this._rawValue = newVal;
      this._value = useDirectValue ? newVal : toReactive(newVal);
      triggerRefValue(this, 3, newVal);
    }
  }
}
function unref(ref2) {
  return isRef(ref2) ? ref2.value : ref2;
}
function toValue$2(source) {
  return isFunction$2(source) ? source() : unref(source);
}
const shallowUnwrapHandlers = {
  get: (target, key, receiver) => unref(Reflect.get(target, key, receiver)),
  set: (target, key, value, receiver) => {
    const oldValue = target[key];
    if (isRef(oldValue) && !isRef(value)) {
      oldValue.value = value;
      return true;
    } else {
      return Reflect.set(target, key, value, receiver);
    }
  }
};
function proxyRefs(objectWithRefs) {
  return isReactive(objectWithRefs) ? objectWithRefs : new Proxy(objectWithRefs, shallowUnwrapHandlers);
}
class CustomRefImpl {
  constructor(factory) {
    this.dep = void 0;
    this.__v_isRef = true;
    const { get: get2, set: set2 } = factory(
      () => trackRefValue(this),
      () => triggerRefValue(this)
    );
    this._get = get2;
    this._set = set2;
  }
  get value() {
    return this._get();
  }
  set value(newVal) {
    this._set(newVal);
  }
}
function customRef(factory) {
  return new CustomRefImpl(factory);
}
class ObjectRefImpl {
  constructor(_object, _key, _defaultValue) {
    this._object = _object;
    this._key = _key;
    this._defaultValue = _defaultValue;
    this.__v_isRef = true;
  }
  get value() {
    const val = this._object[this._key];
    return val === void 0 ? this._defaultValue : val;
  }
  set value(newVal) {
    this._object[this._key] = newVal;
  }
  get dep() {
    return getDepFromReactive(toRaw(this._object), this._key);
  }
}
class GetterRefImpl {
  constructor(_getter) {
    this._getter = _getter;
    this.__v_isRef = true;
    this.__v_isReadonly = true;
  }
  get value() {
    return this._getter();
  }
}
function toRef(source, key, defaultValue) {
  if (isRef(source)) {
    return source;
  } else if (isFunction$2(source)) {
    return new GetterRefImpl(source);
  } else if (isObject$3(source) && arguments.length > 1) {
    return propertyToRef(source, key, defaultValue);
  } else {
    return ref(source);
  }
}
function propertyToRef(source, key, defaultValue) {
  const val = source[key];
  return isRef(val) ? val : new ObjectRefImpl(source, key, defaultValue);
}
const stack = [];
function pushWarningContext(vnode) {
  stack.push(vnode);
}
function popWarningContext() {
  stack.pop();
}
function warn$1$1(msg, ...args) {
  pauseTracking();
  const instance = stack.length ? stack[stack.length - 1].component : null;
  const appWarnHandler = instance && instance.appContext.config.warnHandler;
  const trace = getComponentTrace();
  if (appWarnHandler) {
    callWithErrorHandling(
      appWarnHandler,
      instance,
      11,
      [
        msg + args.join(""),
        instance && instance.proxy,
        trace.map(
          ({ vnode }) => `at <${formatComponentName(instance, vnode.type)}>`
        ).join("\n"),
        trace
      ]
    );
  } else {
    const warnArgs = [`[Vue warn]: ${msg}`, ...args];
    if (trace.length && // avoid spamming console during tests
    true) {
      warnArgs.push(`
`, ...formatTrace(trace));
    }
    console.warn(...warnArgs);
  }
  resetTracking();
}
function getComponentTrace() {
  let currentVNode = stack[stack.length - 1];
  if (!currentVNode) {
    return [];
  }
  const normalizedStack = [];
  while (currentVNode) {
    const last = normalizedStack[0];
    if (last && last.vnode === currentVNode) {
      last.recurseCount++;
    } else {
      normalizedStack.push({
        vnode: currentVNode,
        recurseCount: 0
      });
    }
    const parentInstance = currentVNode.component && currentVNode.component.parent;
    currentVNode = parentInstance && parentInstance.vnode;
  }
  return normalizedStack;
}
function formatTrace(trace) {
  const logs = [];
  trace.forEach((entry, i3) => {
    logs.push(...i3 === 0 ? [] : [`
`], ...formatTraceEntry(entry));
  });
  return logs;
}
function formatTraceEntry({ vnode, recurseCount }) {
  const postfix = recurseCount > 0 ? `... (${recurseCount} recursive calls)` : ``;
  const isRoot = vnode.component ? vnode.component.parent == null : false;
  const open2 = ` at <${formatComponentName(
    vnode.component,
    vnode.type,
    isRoot
  )}`;
  const close = `>` + postfix;
  return vnode.props ? [open2, ...formatProps(vnode.props), close] : [open2 + close];
}
function formatProps(props) {
  const res = [];
  const keys = Object.keys(props);
  keys.slice(0, 3).forEach((key) => {
    res.push(...formatProp(key, props[key]));
  });
  if (keys.length > 3) {
    res.push(` ...`);
  }
  return res;
}
function formatProp(key, value, raw) {
  if (isString$2(value)) {
    value = JSON.stringify(value);
    return raw ? value : [`${key}=${value}`];
  } else if (typeof value === "number" || typeof value === "boolean" || value == null) {
    return raw ? value : [`${key}=${value}`];
  } else if (isRef(value)) {
    value = formatProp(key, toRaw(value.value), true);
    return raw ? value : [`${key}=Ref<`, value, `>`];
  } else if (isFunction$2(value)) {
    return [`${key}=fn${value.name ? `<${value.name}>` : ``}`];
  } else {
    value = toRaw(value);
    return raw ? value : [`${key}=`, value];
  }
}
function assertNumber(val, type) {
  if (val === void 0) {
    return;
  } else if (typeof val !== "number") {
    warn$1$1(`${type} is not a valid number - got ${JSON.stringify(val)}.`);
  } else if (isNaN(val)) {
    warn$1$1(`${type} is NaN - the duration expression might be incorrect.`);
  }
}
const ErrorTypeStrings$1 = {
  ["sp"]: "serverPrefetch hook",
  ["bc"]: "beforeCreate hook",
  ["c"]: "created hook",
  ["bm"]: "beforeMount hook",
  ["m"]: "mounted hook",
  ["bu"]: "beforeUpdate hook",
  ["u"]: "updated",
  ["bum"]: "beforeUnmount hook",
  ["um"]: "unmounted hook",
  ["a"]: "activated hook",
  ["da"]: "deactivated hook",
  ["ec"]: "errorCaptured hook",
  ["rtc"]: "renderTracked hook",
  ["rtg"]: "renderTriggered hook",
  [0]: "setup function",
  [1]: "render function",
  [2]: "watcher getter",
  [3]: "watcher callback",
  [4]: "watcher cleanup function",
  [5]: "native event handler",
  [6]: "component event handler",
  [7]: "vnode hook",
  [8]: "directive hook",
  [9]: "transition hook",
  [10]: "app errorHandler",
  [11]: "app warnHandler",
  [12]: "ref function",
  [13]: "async component loader",
  [14]: "scheduler flush. This is likely a Vue internals bug. Please open an issue at https://github.com/vuejs/core ."
};
function callWithErrorHandling(fn2, instance, type, args) {
  let res;
  try {
    res = args ? fn2(...args) : fn2();
  } catch (err) {
    handleError(err, instance, type);
  }
  return res;
}
function callWithAsyncErrorHandling(fn2, instance, type, args) {
  if (isFunction$2(fn2)) {
    const res = callWithErrorHandling(fn2, instance, type, args);
    if (res && isPromise$1(res)) {
      res.catch((err) => {
        handleError(err, instance, type);
      });
    }
    return res;
  }
  const values = [];
  for (let i3 = 0; i3 < fn2.length; i3++) {
    values.push(callWithAsyncErrorHandling(fn2[i3], instance, type, args));
  }
  return values;
}
function handleError(err, instance, type, throwInDev = true) {
  const contextVNode = instance ? instance.vnode : null;
  if (instance) {
    let cur = instance.parent;
    const exposedInstance = instance.proxy;
    const errorInfo = ErrorTypeStrings$1[type];
    while (cur) {
      const errorCapturedHooks = cur.ec;
      if (errorCapturedHooks) {
        for (let i3 = 0; i3 < errorCapturedHooks.length; i3++) {
          if (errorCapturedHooks[i3](err, exposedInstance, errorInfo) === false) {
            return;
          }
        }
      }
      cur = cur.parent;
    }
    const appErrorHandler = instance.appContext.config.errorHandler;
    if (appErrorHandler) {
      callWithErrorHandling(
        appErrorHandler,
        null,
        10,
        [err, exposedInstance, errorInfo]
      );
      return;
    }
  }
  logError(err, type, contextVNode, throwInDev);
}
function logError(err, type, contextVNode, throwInDev = true) {
  {
    const info = ErrorTypeStrings$1[type];
    if (contextVNode) {
      pushWarningContext(contextVNode);
    }
    warn$1$1(`Unhandled error${info ? ` during execution of ${info}` : ``}`);
    if (contextVNode) {
      popWarningContext();
    }
    if (throwInDev) {
      throw err;
    } else {
      console.error(err);
    }
  }
}
let isFlushing = false;
let isFlushPending = false;
const queue = [];
let flushIndex = 0;
const pendingPostFlushCbs = [];
let activePostFlushCbs = null;
let postFlushIndex = 0;
const resolvedPromise = /* @__PURE__ */ Promise.resolve();
let currentFlushPromise = null;
const RECURSION_LIMIT = 100;
function nextTick(fn2) {
  const p2 = currentFlushPromise || resolvedPromise;
  return fn2 ? p2.then(this ? fn2.bind(this) : fn2) : p2;
}
function findInsertionIndex(id2) {
  let start = flushIndex + 1;
  let end = queue.length;
  while (start < end) {
    const middle = start + end >>> 1;
    const middleJob = queue[middle];
    const middleJobId = getId(middleJob);
    if (middleJobId < id2 || middleJobId === id2 && middleJob.pre) {
      start = middle + 1;
    } else {
      end = middle;
    }
  }
  return start;
}
function queueJob(job) {
  if (!queue.length || !queue.includes(
    job,
    isFlushing && job.allowRecurse ? flushIndex + 1 : flushIndex
  )) {
    if (job.id == null) {
      queue.push(job);
    } else {
      queue.splice(findInsertionIndex(job.id), 0, job);
    }
    queueFlush();
  }
}
function queueFlush() {
  if (!isFlushing && !isFlushPending) {
    isFlushPending = true;
    currentFlushPromise = resolvedPromise.then(flushJobs);
  }
}
function invalidateJob(job) {
  const i3 = queue.indexOf(job);
  if (i3 > flushIndex) {
    queue.splice(i3, 1);
  }
}
function queuePostFlushCb(cb) {
  if (!isArray$3(cb)) {
    if (!activePostFlushCbs || !activePostFlushCbs.includes(
      cb,
      cb.allowRecurse ? postFlushIndex + 1 : postFlushIndex
    )) {
      pendingPostFlushCbs.push(cb);
    }
  } else {
    pendingPostFlushCbs.push(...cb);
  }
  queueFlush();
}
function flushPreFlushCbs(instance, seen2, i3 = isFlushing ? flushIndex + 1 : 0) {
  {
    seen2 = seen2 || /* @__PURE__ */ new Map();
  }
  for (; i3 < queue.length; i3++) {
    const cb = queue[i3];
    if (cb && cb.pre) {
      if (instance && cb.id !== instance.uid) {
        continue;
      }
      if (checkRecursiveUpdates(seen2, cb)) {
        continue;
      }
      queue.splice(i3, 1);
      i3--;
      cb();
    }
  }
}
function flushPostFlushCbs(seen2) {
  if (pendingPostFlushCbs.length) {
    const deduped = [...new Set(pendingPostFlushCbs)].sort(
      (a4, b4) => getId(a4) - getId(b4)
    );
    pendingPostFlushCbs.length = 0;
    if (activePostFlushCbs) {
      activePostFlushCbs.push(...deduped);
      return;
    }
    activePostFlushCbs = deduped;
    {
      seen2 = seen2 || /* @__PURE__ */ new Map();
    }
    for (postFlushIndex = 0; postFlushIndex < activePostFlushCbs.length; postFlushIndex++) {
      if (checkRecursiveUpdates(seen2, activePostFlushCbs[postFlushIndex])) {
        continue;
      }
      activePostFlushCbs[postFlushIndex]();
    }
    activePostFlushCbs = null;
    postFlushIndex = 0;
  }
}
const getId = (job) => job.id == null ? Infinity : job.id;
const comparator = (a4, b4) => {
  const diff = getId(a4) - getId(b4);
  if (diff === 0) {
    if (a4.pre && !b4.pre)
      return -1;
    if (b4.pre && !a4.pre)
      return 1;
  }
  return diff;
};
function flushJobs(seen2) {
  isFlushPending = false;
  isFlushing = true;
  {
    seen2 = seen2 || /* @__PURE__ */ new Map();
  }
  queue.sort(comparator);
  const check = (job) => checkRecursiveUpdates(seen2, job);
  try {
    for (flushIndex = 0; flushIndex < queue.length; flushIndex++) {
      const job = queue[flushIndex];
      if (job && job.active !== false) {
        if (check(job)) {
          continue;
        }
        callWithErrorHandling(job, null, 14);
      }
    }
  } finally {
    flushIndex = 0;
    queue.length = 0;
    flushPostFlushCbs(seen2);
    isFlushing = false;
    currentFlushPromise = null;
    if (queue.length || pendingPostFlushCbs.length) {
      flushJobs(seen2);
    }
  }
}
function checkRecursiveUpdates(seen2, fn2) {
  if (!seen2.has(fn2)) {
    seen2.set(fn2, 1);
  } else {
    const count2 = seen2.get(fn2);
    if (count2 > RECURSION_LIMIT) {
      const instance = fn2.ownerInstance;
      const componentName = instance && getComponentName(instance.type);
      handleError(
        `Maximum recursive updates exceeded${componentName ? ` in component <${componentName}>` : ``}. This means you have a reactive effect that is mutating its own dependencies and thus recursively triggering itself. Possible sources include component template, render function, updated hook or watcher source function.`,
        null,
        10
      );
      return true;
    } else {
      seen2.set(fn2, count2 + 1);
    }
  }
}
let isHmrUpdating = false;
const hmrDirtyComponents = /* @__PURE__ */ new Set();
{
  getGlobalThis$1().__VUE_HMR_RUNTIME__ = {
    createRecord: tryWrap(createRecord),
    rerender: tryWrap(rerender),
    reload: tryWrap(reload)
  };
}
const map = /* @__PURE__ */ new Map();
function registerHMR(instance) {
  const id2 = instance.type.__hmrId;
  let record = map.get(id2);
  if (!record) {
    createRecord(id2, instance.type);
    record = map.get(id2);
  }
  record.instances.add(instance);
}
function unregisterHMR(instance) {
  map.get(instance.type.__hmrId).instances.delete(instance);
}
function createRecord(id2, initialDef) {
  if (map.has(id2)) {
    return false;
  }
  map.set(id2, {
    initialDef: normalizeClassComponent(initialDef),
    instances: /* @__PURE__ */ new Set()
  });
  return true;
}
function normalizeClassComponent(component) {
  return isClassComponent(component) ? component.__vccOpts : component;
}
function rerender(id2, newRender) {
  const record = map.get(id2);
  if (!record) {
    return;
  }
  record.initialDef.render = newRender;
  [...record.instances].forEach((instance) => {
    if (newRender) {
      instance.render = newRender;
      normalizeClassComponent(instance.type).render = newRender;
    }
    instance.renderCache = [];
    isHmrUpdating = true;
    instance.effect.dirty = true;
    instance.update();
    isHmrUpdating = false;
  });
}
function reload(id2, newComp) {
  const record = map.get(id2);
  if (!record)
    return;
  newComp = normalizeClassComponent(newComp);
  updateComponentDef(record.initialDef, newComp);
  const instances = [...record.instances];
  for (const instance of instances) {
    const oldComp = normalizeClassComponent(instance.type);
    if (!hmrDirtyComponents.has(oldComp)) {
      if (oldComp !== record.initialDef) {
        updateComponentDef(oldComp, newComp);
      }
      hmrDirtyComponents.add(oldComp);
    }
    instance.appContext.propsCache.delete(instance.type);
    instance.appContext.emitsCache.delete(instance.type);
    instance.appContext.optionsCache.delete(instance.type);
    if (instance.ceReload) {
      hmrDirtyComponents.add(oldComp);
      instance.ceReload(newComp.styles);
      hmrDirtyComponents.delete(oldComp);
    } else if (instance.parent) {
      instance.parent.effect.dirty = true;
      queueJob(instance.parent.update);
    } else if (instance.appContext.reload) {
      instance.appContext.reload();
    } else if (typeof window !== "undefined") {
      window.location.reload();
    } else {
      console.warn(
        "[HMR] Root or manually mounted instance modified. Full reload required."
      );
    }
  }
  queuePostFlushCb(() => {
    for (const instance of instances) {
      hmrDirtyComponents.delete(
        normalizeClassComponent(instance.type)
      );
    }
  });
}
function updateComponentDef(oldComp, newComp) {
  extend(oldComp, newComp);
  for (const key in oldComp) {
    if (key !== "__file" && !(key in newComp)) {
      delete oldComp[key];
    }
  }
}
function tryWrap(fn2) {
  return (id2, arg) => {
    try {
      return fn2(id2, arg);
    } catch (e3) {
      console.error(e3);
      console.warn(
        `[HMR] Something went wrong during Vue component hot-reload. Full reload required.`
      );
    }
  };
}
let devtools$1;
let buffer = [];
let devtoolsNotInstalled = false;
function emit$1(event, ...args) {
  if (devtools$1) {
    devtools$1.emit(event, ...args);
  } else if (!devtoolsNotInstalled) {
    buffer.push({ event, args });
  }
}
function setDevtoolsHook$1(hook, target) {
  var _a2, _b;
  devtools$1 = hook;
  if (devtools$1) {
    devtools$1.enabled = true;
    buffer.forEach(({ event, args }) => devtools$1.emit(event, ...args));
    buffer = [];
  } else if (
    // handle late devtools injection - only do this if we are in an actual
    // browser environment to avoid the timer handle stalling test runner exit
    // (#4815)
    typeof window !== "undefined" && // some envs mock window but not fully
    window.HTMLElement && // also exclude jsdom
    !((_b = (_a2 = window.navigator) == null ? void 0 : _a2.userAgent) == null ? void 0 : _b.includes("jsdom"))
  ) {
    const replay = target.__VUE_DEVTOOLS_HOOK_REPLAY__ = target.__VUE_DEVTOOLS_HOOK_REPLAY__ || [];
    replay.push((newHook) => {
      setDevtoolsHook$1(newHook, target);
    });
    setTimeout(() => {
      if (!devtools$1) {
        target.__VUE_DEVTOOLS_HOOK_REPLAY__ = null;
        devtoolsNotInstalled = true;
        buffer = [];
      }
    }, 3e3);
  } else {
    devtoolsNotInstalled = true;
    buffer = [];
  }
}
function devtoolsInitApp(app, version2) {
  emit$1("app:init", app, version2, {
    Fragment,
    Text,
    Comment: Comment$1,
    Static
  });
}
function devtoolsUnmountApp(app) {
  emit$1("app:unmount", app);
}
const devtoolsComponentAdded = /* @__PURE__ */ createDevtoolsComponentHook(
  "component:added"
  /* COMPONENT_ADDED */
);
const devtoolsComponentUpdated = /* @__PURE__ */ createDevtoolsComponentHook(
  "component:updated"
  /* COMPONENT_UPDATED */
);
const _devtoolsComponentRemoved = /* @__PURE__ */ createDevtoolsComponentHook(
  "component:removed"
  /* COMPONENT_REMOVED */
);
const devtoolsComponentRemoved = (component) => {
  if (devtools$1 && typeof devtools$1.cleanupBuffer === "function" && // remove the component if it wasn't buffered
  !devtools$1.cleanupBuffer(component)) {
    _devtoolsComponentRemoved(component);
  }
};
function createDevtoolsComponentHook(hook) {
  return (component) => {
    emit$1(
      hook,
      component.appContext.app,
      component.uid,
      component.parent ? component.parent.uid : void 0,
      component
    );
  };
}
const devtoolsPerfStart = /* @__PURE__ */ createDevtoolsPerformanceHook(
  "perf:start"
  /* PERFORMANCE_START */
);
const devtoolsPerfEnd = /* @__PURE__ */ createDevtoolsPerformanceHook(
  "perf:end"
  /* PERFORMANCE_END */
);
function createDevtoolsPerformanceHook(hook) {
  return (component, type, time) => {
    emit$1(hook, component.appContext.app, component.uid, component, type, time);
  };
}
function devtoolsComponentEmit(component, event, params) {
  emit$1(
    "component:emit",
    component.appContext.app,
    component,
    event,
    params
  );
}
function emit(instance, event, ...rawArgs) {
  if (instance.isUnmounted)
    return;
  const props = instance.vnode.props || EMPTY_OBJ;
  {
    const {
      emitsOptions,
      propsOptions: [propsOptions]
    } = instance;
    if (emitsOptions) {
      if (!(event in emitsOptions) && true) {
        if (!propsOptions || !(toHandlerKey(event) in propsOptions)) {
          warn$1$1(
            `Component emitted event "${event}" but it is neither declared in the emits option nor as an "${toHandlerKey(event)}" prop.`
          );
        }
      } else {
        const validator = emitsOptions[event];
        if (isFunction$2(validator)) {
          const isValid2 = validator(...rawArgs);
          if (!isValid2) {
            warn$1$1(
              `Invalid event arguments: event validation failed for event "${event}".`
            );
          }
        }
      }
    }
  }
  let args = rawArgs;
  const isModelListener2 = event.startsWith("update:");
  const modelArg = isModelListener2 && event.slice(7);
  if (modelArg && modelArg in props) {
    const modifiersKey = `${modelArg === "modelValue" ? "model" : modelArg}Modifiers`;
    const { number: number2, trim } = props[modifiersKey] || EMPTY_OBJ;
    if (trim) {
      args = rawArgs.map((a4) => isString$2(a4) ? a4.trim() : a4);
    }
    if (number2) {
      args = rawArgs.map(looseToNumber);
    }
  }
  {
    devtoolsComponentEmit(instance, event, args);
  }
  {
    const lowerCaseEvent = event.toLowerCase();
    if (lowerCaseEvent !== event && props[toHandlerKey(lowerCaseEvent)]) {
      warn$1$1(
        `Event "${lowerCaseEvent}" is emitted in component ${formatComponentName(
          instance,
          instance.type
        )} but the handler is registered for "${event}". Note that HTML attributes are case-insensitive and you cannot use v-on to listen to camelCase events when using in-DOM templates. You should probably use "${hyphenate(
          event
        )}" instead of "${event}".`
      );
    }
  }
  let handlerName;
  let handler = props[handlerName = toHandlerKey(event)] || // also try camelCase event handler (#2249)
  props[handlerName = toHandlerKey(camelize(event))];
  if (!handler && isModelListener2) {
    handler = props[handlerName = toHandlerKey(hyphenate(event))];
  }
  if (handler) {
    callWithAsyncErrorHandling(
      handler,
      instance,
      6,
      args
    );
  }
  const onceHandler = props[handlerName + `Once`];
  if (onceHandler) {
    if (!instance.emitted) {
      instance.emitted = {};
    } else if (instance.emitted[handlerName]) {
      return;
    }
    instance.emitted[handlerName] = true;
    callWithAsyncErrorHandling(
      onceHandler,
      instance,
      6,
      args
    );
  }
}
function normalizeEmitsOptions(comp, appContext, asMixin = false) {
  const cache2 = appContext.emitsCache;
  const cached = cache2.get(comp);
  if (cached !== void 0) {
    return cached;
  }
  const raw = comp.emits;
  let normalized = {};
  let hasExtends = false;
  if (!isFunction$2(comp)) {
    const extendEmits = (raw2) => {
      const normalizedFromExtend = normalizeEmitsOptions(raw2, appContext, true);
      if (normalizedFromExtend) {
        hasExtends = true;
        extend(normalized, normalizedFromExtend);
      }
    };
    if (!asMixin && appContext.mixins.length) {
      appContext.mixins.forEach(extendEmits);
    }
    if (comp.extends) {
      extendEmits(comp.extends);
    }
    if (comp.mixins) {
      comp.mixins.forEach(extendEmits);
    }
  }
  if (!raw && !hasExtends) {
    if (isObject$3(comp)) {
      cache2.set(comp, null);
    }
    return null;
  }
  if (isArray$3(raw)) {
    raw.forEach((key) => normalized[key] = null);
  } else {
    extend(normalized, raw);
  }
  if (isObject$3(comp)) {
    cache2.set(comp, normalized);
  }
  return normalized;
}
function isEmitListener(options, key) {
  if (!options || !isOn(key)) {
    return false;
  }
  key = key.slice(2).replace(/Once$/, "");
  return hasOwn$1(options, key[0].toLowerCase() + key.slice(1)) || hasOwn$1(options, hyphenate(key)) || hasOwn$1(options, key);
}
let currentRenderingInstance = null;
let currentScopeId = null;
function setCurrentRenderingInstance(instance) {
  const prev = currentRenderingInstance;
  currentRenderingInstance = instance;
  currentScopeId = instance && instance.type.__scopeId || null;
  return prev;
}
function pushScopeId(id2) {
  currentScopeId = id2;
}
function popScopeId() {
  currentScopeId = null;
}
function withCtx(fn2, ctx = currentRenderingInstance, isNonScopedSlot) {
  if (!ctx)
    return fn2;
  if (fn2._n) {
    return fn2;
  }
  const renderFnWithContext = (...args) => {
    if (renderFnWithContext._d) {
      setBlockTracking(-1);
    }
    const prevInstance = setCurrentRenderingInstance(ctx);
    let res;
    try {
      res = fn2(...args);
    } finally {
      setCurrentRenderingInstance(prevInstance);
      if (renderFnWithContext._d) {
        setBlockTracking(1);
      }
    }
    {
      devtoolsComponentUpdated(ctx);
    }
    return res;
  };
  renderFnWithContext._n = true;
  renderFnWithContext._c = true;
  renderFnWithContext._d = true;
  return renderFnWithContext;
}
let accessedAttrs = false;
function markAttrsAccessed() {
  accessedAttrs = true;
}
function renderComponentRoot(instance) {
  const {
    type: Component,
    vnode,
    proxy,
    withProxy,
    props,
    propsOptions: [propsOptions],
    slots,
    attrs,
    emit: emit2,
    render: render2,
    renderCache,
    data,
    setupState,
    ctx,
    inheritAttrs
  } = instance;
  let result;
  let fallthroughAttrs;
  const prev = setCurrentRenderingInstance(instance);
  {
    accessedAttrs = false;
  }
  try {
    if (vnode.shapeFlag & 4) {
      const proxyToUse = withProxy || proxy;
      const thisProxy = setupState.__isScriptSetup ? new Proxy(proxyToUse, {
        get(target, key, receiver) {
          warn$1$1(
            `Property '${String(
              key
            )}' was accessed via 'this'. Avoid using 'this' in templates.`
          );
          return Reflect.get(target, key, receiver);
        }
      }) : proxyToUse;
      result = normalizeVNode(
        render2.call(
          thisProxy,
          proxyToUse,
          renderCache,
          props,
          setupState,
          data,
          ctx
        )
      );
      fallthroughAttrs = attrs;
    } else {
      const render22 = Component;
      if (attrs === props) {
        markAttrsAccessed();
      }
      result = normalizeVNode(
        render22.length > 1 ? render22(
          props,
          true ? {
            get attrs() {
              markAttrsAccessed();
              return attrs;
            },
            slots,
            emit: emit2
          } : { attrs, slots, emit: emit2 }
        ) : render22(
          props,
          null
          /* we know it doesn't need it */
        )
      );
      fallthroughAttrs = Component.props ? attrs : getFunctionalFallthrough(attrs);
    }
  } catch (err) {
    blockStack.length = 0;
    handleError(err, instance, 1);
    result = createVNode(Comment$1);
  }
  let root = result;
  let setRoot = void 0;
  if (result.patchFlag > 0 && result.patchFlag & 2048) {
    [root, setRoot] = getChildRoot(result);
  }
  if (fallthroughAttrs && inheritAttrs !== false) {
    const keys = Object.keys(fallthroughAttrs);
    const { shapeFlag } = root;
    if (keys.length) {
      if (shapeFlag & (1 | 6)) {
        if (propsOptions && keys.some(isModelListener)) {
          fallthroughAttrs = filterModelListeners(
            fallthroughAttrs,
            propsOptions
          );
        }
        root = cloneVNode(root, fallthroughAttrs);
      } else if (!accessedAttrs && root.type !== Comment$1) {
        const allAttrs = Object.keys(attrs);
        const eventAttrs = [];
        const extraAttrs = [];
        for (let i3 = 0, l2 = allAttrs.length; i3 < l2; i3++) {
          const key = allAttrs[i3];
          if (isOn(key)) {
            if (!isModelListener(key)) {
              eventAttrs.push(key[2].toLowerCase() + key.slice(3));
            }
          } else {
            extraAttrs.push(key);
          }
        }
        if (extraAttrs.length) {
          warn$1$1(
            `Extraneous non-props attributes (${extraAttrs.join(", ")}) were passed to component but could not be automatically inherited because component renders fragment or text root nodes.`
          );
        }
        if (eventAttrs.length) {
          warn$1$1(
            `Extraneous non-emits event listeners (${eventAttrs.join(", ")}) were passed to component but could not be automatically inherited because component renders fragment or text root nodes. If the listener is intended to be a component custom event listener only, declare it using the "emits" option.`
          );
        }
      }
    }
  }
  if (vnode.dirs) {
    if (!isElementRoot(root)) {
      warn$1$1(
        `Runtime directive used on component with non-element root node. The directives will not function as intended.`
      );
    }
    root = cloneVNode(root);
    root.dirs = root.dirs ? root.dirs.concat(vnode.dirs) : vnode.dirs;
  }
  if (vnode.transition) {
    if (!isElementRoot(root)) {
      warn$1$1(
        `Component inside <Transition> renders non-element root node that cannot be animated.`
      );
    }
    root.transition = vnode.transition;
  }
  if (setRoot) {
    setRoot(root);
  } else {
    result = root;
  }
  setCurrentRenderingInstance(prev);
  return result;
}
const getChildRoot = (vnode) => {
  const rawChildren = vnode.children;
  const dynamicChildren = vnode.dynamicChildren;
  const childRoot = filterSingleRoot(rawChildren);
  if (!childRoot) {
    return [vnode, void 0];
  }
  const index = rawChildren.indexOf(childRoot);
  const dynamicIndex = dynamicChildren ? dynamicChildren.indexOf(childRoot) : -1;
  const setRoot = (updatedRoot) => {
    rawChildren[index] = updatedRoot;
    if (dynamicChildren) {
      if (dynamicIndex > -1) {
        dynamicChildren[dynamicIndex] = updatedRoot;
      } else if (updatedRoot.patchFlag > 0) {
        vnode.dynamicChildren = [...dynamicChildren, updatedRoot];
      }
    }
  };
  return [normalizeVNode(childRoot), setRoot];
};
function filterSingleRoot(children) {
  let singleRoot;
  for (let i3 = 0; i3 < children.length; i3++) {
    const child = children[i3];
    if (isVNode$1(child)) {
      if (child.type !== Comment$1 || child.children === "v-if") {
        if (singleRoot) {
          return;
        } else {
          singleRoot = child;
        }
      }
    } else {
      return;
    }
  }
  return singleRoot;
}
const getFunctionalFallthrough = (attrs) => {
  let res;
  for (const key in attrs) {
    if (key === "class" || key === "style" || isOn(key)) {
      (res || (res = {}))[key] = attrs[key];
    }
  }
  return res;
};
const filterModelListeners = (attrs, props) => {
  const res = {};
  for (const key in attrs) {
    if (!isModelListener(key) || !(key.slice(9) in props)) {
      res[key] = attrs[key];
    }
  }
  return res;
};
const isElementRoot = (vnode) => {
  return vnode.shapeFlag & (6 | 1) || vnode.type === Comment$1;
};
function shouldUpdateComponent(prevVNode, nextVNode, optimized) {
  const { props: prevProps, children: prevChildren, component } = prevVNode;
  const { props: nextProps, children: nextChildren, patchFlag } = nextVNode;
  const emits = component.emitsOptions;
  if ((prevChildren || nextChildren) && isHmrUpdating) {
    return true;
  }
  if (nextVNode.dirs || nextVNode.transition) {
    return true;
  }
  if (optimized && patchFlag >= 0) {
    if (patchFlag & 1024) {
      return true;
    }
    if (patchFlag & 16) {
      if (!prevProps) {
        return !!nextProps;
      }
      return hasPropsChanged(prevProps, nextProps, emits);
    } else if (patchFlag & 8) {
      const dynamicProps = nextVNode.dynamicProps;
      for (let i3 = 0; i3 < dynamicProps.length; i3++) {
        const key = dynamicProps[i3];
        if (nextProps[key] !== prevProps[key] && !isEmitListener(emits, key)) {
          return true;
        }
      }
    }
  } else {
    if (prevChildren || nextChildren) {
      if (!nextChildren || !nextChildren.$stable) {
        return true;
      }
    }
    if (prevProps === nextProps) {
      return false;
    }
    if (!prevProps) {
      return !!nextProps;
    }
    if (!nextProps) {
      return true;
    }
    return hasPropsChanged(prevProps, nextProps, emits);
  }
  return false;
}
function hasPropsChanged(prevProps, nextProps, emitsOptions) {
  const nextKeys = Object.keys(nextProps);
  if (nextKeys.length !== Object.keys(prevProps).length) {
    return true;
  }
  for (let i3 = 0; i3 < nextKeys.length; i3++) {
    const key = nextKeys[i3];
    if (nextProps[key] !== prevProps[key] && !isEmitListener(emitsOptions, key)) {
      return true;
    }
  }
  return false;
}
function updateHOCHostEl({ vnode, parent }, el3) {
  if (!el3)
    return;
  while (parent) {
    const root = parent.subTree;
    if (root.suspense && root.suspense.activeBranch === vnode) {
      root.el = vnode.el;
    }
    if (root === vnode) {
      (vnode = parent.vnode).el = el3;
      parent = parent.parent;
    } else {
      break;
    }
  }
}
const COMPONENTS = "components";
function resolveComponent(name, maybeSelfReference) {
  return resolveAsset(COMPONENTS, name, true, maybeSelfReference) || name;
}
const NULL_DYNAMIC_COMPONENT = Symbol.for("v-ndc");
function resolveDynamicComponent(component) {
  if (isString$2(component)) {
    return resolveAsset(COMPONENTS, component, false) || component;
  } else {
    return component || NULL_DYNAMIC_COMPONENT;
  }
}
function resolveAsset(type, name, warnMissing = true, maybeSelfReference = false) {
  const instance = currentRenderingInstance || currentInstance;
  if (instance) {
    const Component = instance.type;
    if (type === COMPONENTS) {
      const selfName = getComponentName(
        Component,
        false
      );
      if (selfName && (selfName === name || selfName === camelize(name) || selfName === capitalize$1(camelize(name)))) {
        return Component;
      }
    }
    const res = (
      // local registration
      // check instance[type] first which is resolved for options API
      resolve(instance[type] || Component[type], name) || // global registration
      resolve(instance.appContext[type], name)
    );
    if (!res && maybeSelfReference) {
      return Component;
    }
    if (warnMissing && !res) {
      const extra = type === COMPONENTS ? `
If this is a native custom element, make sure to exclude it from component resolution via compilerOptions.isCustomElement.` : ``;
      warn$1$1(`Failed to resolve ${type.slice(0, -1)}: ${name}${extra}`);
    }
    return res;
  } else {
    warn$1$1(
      `resolve${capitalize$1(type.slice(0, -1))} can only be used in render() or setup().`
    );
  }
}
function resolve(registry, name) {
  return registry && (registry[name] || registry[camelize(name)] || registry[capitalize$1(camelize(name))]);
}
const isSuspense = (type) => type.__isSuspense;
let suspenseId = 0;
const SuspenseImpl = {
  name: "Suspense",
  // In order to make Suspense tree-shakable, we need to avoid importing it
  // directly in the renderer. The renderer checks for the __isSuspense flag
  // on a vnode's type and calls the `process` method, passing in renderer
  // internals.
  __isSuspense: true,
  process(n1, n2, container, anchor, parentComponent, parentSuspense, namespace, slotScopeIds, optimized, rendererInternals) {
    if (n1 == null) {
      mountSuspense(
        n2,
        container,
        anchor,
        parentComponent,
        parentSuspense,
        namespace,
        slotScopeIds,
        optimized,
        rendererInternals
      );
    } else {
      patchSuspense(
        n1,
        n2,
        container,
        anchor,
        parentComponent,
        namespace,
        slotScopeIds,
        optimized,
        rendererInternals
      );
    }
  },
  hydrate: hydrateSuspense,
  create: createSuspenseBoundary,
  normalize: normalizeSuspenseChildren
};
const Suspense = SuspenseImpl;
function triggerEvent(vnode, name) {
  const eventListener = vnode.props && vnode.props[name];
  if (isFunction$2(eventListener)) {
    eventListener();
  }
}
function mountSuspense(vnode, container, anchor, parentComponent, parentSuspense, namespace, slotScopeIds, optimized, rendererInternals) {
  const {
    p: patch,
    o: { createElement }
  } = rendererInternals;
  const hiddenContainer = createElement("div");
  const suspense = vnode.suspense = createSuspenseBoundary(
    vnode,
    parentSuspense,
    parentComponent,
    container,
    hiddenContainer,
    anchor,
    namespace,
    slotScopeIds,
    optimized,
    rendererInternals
  );
  patch(
    null,
    suspense.pendingBranch = vnode.ssContent,
    hiddenContainer,
    null,
    parentComponent,
    suspense,
    namespace,
    slotScopeIds
  );
  if (suspense.deps > 0) {
    triggerEvent(vnode, "onPending");
    triggerEvent(vnode, "onFallback");
    patch(
      null,
      vnode.ssFallback,
      container,
      anchor,
      parentComponent,
      null,
      // fallback tree will not have suspense context
      namespace,
      slotScopeIds
    );
    setActiveBranch(suspense, vnode.ssFallback);
  } else {
    suspense.resolve(false, true);
  }
}
function patchSuspense(n1, n2, container, anchor, parentComponent, namespace, slotScopeIds, optimized, { p: patch, um: unmount, o: { createElement } }) {
  const suspense = n2.suspense = n1.suspense;
  suspense.vnode = n2;
  n2.el = n1.el;
  const newBranch = n2.ssContent;
  const newFallback = n2.ssFallback;
  const { activeBranch, pendingBranch, isInFallback, isHydrating } = suspense;
  if (pendingBranch) {
    suspense.pendingBranch = newBranch;
    if (isSameVNodeType(newBranch, pendingBranch)) {
      patch(
        pendingBranch,
        newBranch,
        suspense.hiddenContainer,
        null,
        parentComponent,
        suspense,
        namespace,
        slotScopeIds,
        optimized
      );
      if (suspense.deps <= 0) {
        suspense.resolve();
      } else if (isInFallback) {
        if (!isHydrating) {
          patch(
            activeBranch,
            newFallback,
            container,
            anchor,
            parentComponent,
            null,
            // fallback tree will not have suspense context
            namespace,
            slotScopeIds,
            optimized
          );
          setActiveBranch(suspense, newFallback);
        }
      }
    } else {
      suspense.pendingId = suspenseId++;
      if (isHydrating) {
        suspense.isHydrating = false;
        suspense.activeBranch = pendingBranch;
      } else {
        unmount(pendingBranch, parentComponent, suspense);
      }
      suspense.deps = 0;
      suspense.effects.length = 0;
      suspense.hiddenContainer = createElement("div");
      if (isInFallback) {
        patch(
          null,
          newBranch,
          suspense.hiddenContainer,
          null,
          parentComponent,
          suspense,
          namespace,
          slotScopeIds,
          optimized
        );
        if (suspense.deps <= 0) {
          suspense.resolve();
        } else {
          patch(
            activeBranch,
            newFallback,
            container,
            anchor,
            parentComponent,
            null,
            // fallback tree will not have suspense context
            namespace,
            slotScopeIds,
            optimized
          );
          setActiveBranch(suspense, newFallback);
        }
      } else if (activeBranch && isSameVNodeType(newBranch, activeBranch)) {
        patch(
          activeBranch,
          newBranch,
          container,
          anchor,
          parentComponent,
          suspense,
          namespace,
          slotScopeIds,
          optimized
        );
        suspense.resolve(true);
      } else {
        patch(
          null,
          newBranch,
          suspense.hiddenContainer,
          null,
          parentComponent,
          suspense,
          namespace,
          slotScopeIds,
          optimized
        );
        if (suspense.deps <= 0) {
          suspense.resolve();
        }
      }
    }
  } else {
    if (activeBranch && isSameVNodeType(newBranch, activeBranch)) {
      patch(
        activeBranch,
        newBranch,
        container,
        anchor,
        parentComponent,
        suspense,
        namespace,
        slotScopeIds,
        optimized
      );
      setActiveBranch(suspense, newBranch);
    } else {
      triggerEvent(n2, "onPending");
      suspense.pendingBranch = newBranch;
      if (newBranch.shapeFlag & 512) {
        suspense.pendingId = newBranch.component.suspenseId;
      } else {
        suspense.pendingId = suspenseId++;
      }
      patch(
        null,
        newBranch,
        suspense.hiddenContainer,
        null,
        parentComponent,
        suspense,
        namespace,
        slotScopeIds,
        optimized
      );
      if (suspense.deps <= 0) {
        suspense.resolve();
      } else {
        const { timeout, pendingId } = suspense;
        if (timeout > 0) {
          setTimeout(() => {
            if (suspense.pendingId === pendingId) {
              suspense.fallback(newFallback);
            }
          }, timeout);
        } else if (timeout === 0) {
          suspense.fallback(newFallback);
        }
      }
    }
  }
}
let hasWarned$1 = false;
function createSuspenseBoundary(vnode, parentSuspense, parentComponent, container, hiddenContainer, anchor, namespace, slotScopeIds, optimized, rendererInternals, isHydrating = false) {
  if (!hasWarned$1) {
    hasWarned$1 = true;
    console[console.info ? "info" : "log"](
      `<Suspense> is an experimental feature and its API will likely change.`
    );
  }
  const {
    p: patch,
    m: move,
    um: unmount,
    n: next,
    o: { parentNode, remove: remove2 }
  } = rendererInternals;
  let parentSuspenseId;
  const isSuspensible = isVNodeSuspensible(vnode);
  if (isSuspensible) {
    if (parentSuspense == null ? void 0 : parentSuspense.pendingBranch) {
      parentSuspenseId = parentSuspense.pendingId;
      parentSuspense.deps++;
    }
  }
  const timeout = vnode.props ? toNumber(vnode.props.timeout) : void 0;
  {
    assertNumber(timeout, `Suspense timeout`);
  }
  const initialAnchor = anchor;
  const suspense = {
    vnode,
    parent: parentSuspense,
    parentComponent,
    namespace,
    container,
    hiddenContainer,
    deps: 0,
    pendingId: suspenseId++,
    timeout: typeof timeout === "number" ? timeout : -1,
    activeBranch: null,
    pendingBranch: null,
    isInFallback: !isHydrating,
    isHydrating,
    isUnmounted: false,
    effects: [],
    resolve(resume = false, sync = false) {
      {
        if (!resume && !suspense.pendingBranch) {
          throw new Error(
            `suspense.resolve() is called without a pending branch.`
          );
        }
        if (suspense.isUnmounted) {
          throw new Error(
            `suspense.resolve() is called on an already unmounted suspense boundary.`
          );
        }
      }
      const {
        vnode: vnode2,
        activeBranch,
        pendingBranch,
        pendingId,
        effects,
        parentComponent: parentComponent2,
        container: container2
      } = suspense;
      let delayEnter = false;
      if (suspense.isHydrating) {
        suspense.isHydrating = false;
      } else if (!resume) {
        delayEnter = activeBranch && pendingBranch.transition && pendingBranch.transition.mode === "out-in";
        if (delayEnter) {
          activeBranch.transition.afterLeave = () => {
            if (pendingId === suspense.pendingId) {
              move(
                pendingBranch,
                container2,
                anchor === initialAnchor ? next(activeBranch) : anchor,
                0
              );
              queuePostFlushCb(effects);
            }
          };
        }
        if (activeBranch) {
          if (parentNode(activeBranch.el) !== suspense.hiddenContainer) {
            anchor = next(activeBranch);
          }
          unmount(activeBranch, parentComponent2, suspense, true);
        }
        if (!delayEnter) {
          move(pendingBranch, container2, anchor, 0);
        }
      }
      setActiveBranch(suspense, pendingBranch);
      suspense.pendingBranch = null;
      suspense.isInFallback = false;
      let parent = suspense.parent;
      let hasUnresolvedAncestor = false;
      while (parent) {
        if (parent.pendingBranch) {
          parent.effects.push(...effects);
          hasUnresolvedAncestor = true;
          break;
        }
        parent = parent.parent;
      }
      if (!hasUnresolvedAncestor && !delayEnter) {
        queuePostFlushCb(effects);
      }
      suspense.effects = [];
      if (isSuspensible) {
        if (parentSuspense && parentSuspense.pendingBranch && parentSuspenseId === parentSuspense.pendingId) {
          parentSuspense.deps--;
          if (parentSuspense.deps === 0 && !sync) {
            parentSuspense.resolve();
          }
        }
      }
      triggerEvent(vnode2, "onResolve");
    },
    fallback(fallbackVNode) {
      if (!suspense.pendingBranch) {
        return;
      }
      const { vnode: vnode2, activeBranch, parentComponent: parentComponent2, container: container2, namespace: namespace2 } = suspense;
      triggerEvent(vnode2, "onFallback");
      const anchor2 = next(activeBranch);
      const mountFallback = () => {
        if (!suspense.isInFallback) {
          return;
        }
        patch(
          null,
          fallbackVNode,
          container2,
          anchor2,
          parentComponent2,
          null,
          // fallback tree will not have suspense context
          namespace2,
          slotScopeIds,
          optimized
        );
        setActiveBranch(suspense, fallbackVNode);
      };
      const delayEnter = fallbackVNode.transition && fallbackVNode.transition.mode === "out-in";
      if (delayEnter) {
        activeBranch.transition.afterLeave = mountFallback;
      }
      suspense.isInFallback = true;
      unmount(
        activeBranch,
        parentComponent2,
        null,
        // no suspense so unmount hooks fire now
        true
        // shouldRemove
      );
      if (!delayEnter) {
        mountFallback();
      }
    },
    move(container2, anchor2, type) {
      suspense.activeBranch && move(suspense.activeBranch, container2, anchor2, type);
      suspense.container = container2;
    },
    next() {
      return suspense.activeBranch && next(suspense.activeBranch);
    },
    registerDep(instance, setupRenderEffect) {
      const isInPendingSuspense = !!suspense.pendingBranch;
      if (isInPendingSuspense) {
        suspense.deps++;
      }
      const hydratedEl = instance.vnode.el;
      instance.asyncDep.catch((err) => {
        handleError(err, instance, 0);
      }).then((asyncSetupResult) => {
        if (instance.isUnmounted || suspense.isUnmounted || suspense.pendingId !== instance.suspenseId) {
          return;
        }
        instance.asyncResolved = true;
        const { vnode: vnode2 } = instance;
        {
          pushWarningContext(vnode2);
        }
        handleSetupResult(instance, asyncSetupResult, false);
        if (hydratedEl) {
          vnode2.el = hydratedEl;
        }
        const placeholder = !hydratedEl && instance.subTree.el;
        setupRenderEffect(
          instance,
          vnode2,
          // component may have been moved before resolve.
          // if this is not a hydration, instance.subTree will be the comment
          // placeholder.
          parentNode(hydratedEl || instance.subTree.el),
          // anchor will not be used if this is hydration, so only need to
          // consider the comment placeholder case.
          hydratedEl ? null : next(instance.subTree),
          suspense,
          namespace,
          optimized
        );
        if (placeholder) {
          remove2(placeholder);
        }
        updateHOCHostEl(instance, vnode2.el);
        {
          popWarningContext();
        }
        if (isInPendingSuspense && --suspense.deps === 0) {
          suspense.resolve();
        }
      });
    },
    unmount(parentSuspense2, doRemove) {
      suspense.isUnmounted = true;
      if (suspense.activeBranch) {
        unmount(
          suspense.activeBranch,
          parentComponent,
          parentSuspense2,
          doRemove
        );
      }
      if (suspense.pendingBranch) {
        unmount(
          suspense.pendingBranch,
          parentComponent,
          parentSuspense2,
          doRemove
        );
      }
    }
  };
  return suspense;
}
function hydrateSuspense(node, vnode, parentComponent, parentSuspense, namespace, slotScopeIds, optimized, rendererInternals, hydrateNode) {
  const suspense = vnode.suspense = createSuspenseBoundary(
    vnode,
    parentSuspense,
    parentComponent,
    node.parentNode,
    // eslint-disable-next-line no-restricted-globals
    document.createElement("div"),
    null,
    namespace,
    slotScopeIds,
    optimized,
    rendererInternals,
    true
  );
  const result = hydrateNode(
    node,
    suspense.pendingBranch = vnode.ssContent,
    parentComponent,
    suspense,
    slotScopeIds,
    optimized
  );
  if (suspense.deps === 0) {
    suspense.resolve(false, true);
  }
  return result;
}
function normalizeSuspenseChildren(vnode) {
  const { shapeFlag, children } = vnode;
  const isSlotChildren = shapeFlag & 32;
  vnode.ssContent = normalizeSuspenseSlot(
    isSlotChildren ? children.default : children
  );
  vnode.ssFallback = isSlotChildren ? normalizeSuspenseSlot(children.fallback) : createVNode(Comment$1);
}
function normalizeSuspenseSlot(s5) {
  let block;
  if (isFunction$2(s5)) {
    const trackBlock = isBlockTreeEnabled && s5._c;
    if (trackBlock) {
      s5._d = false;
      openBlock();
    }
    s5 = s5();
    if (trackBlock) {
      s5._d = true;
      block = currentBlock;
      closeBlock();
    }
  }
  if (isArray$3(s5)) {
    const singleChild = filterSingleRoot(s5);
    if (!singleChild && s5.filter((child) => child !== NULL_DYNAMIC_COMPONENT).length > 0) {
      warn$1$1(`<Suspense> slots expect a single root node.`);
    }
    s5 = singleChild;
  }
  s5 = normalizeVNode(s5);
  if (block && !s5.dynamicChildren) {
    s5.dynamicChildren = block.filter((c3) => c3 !== s5);
  }
  return s5;
}
function queueEffectWithSuspense(fn2, suspense) {
  if (suspense && suspense.pendingBranch) {
    if (isArray$3(fn2)) {
      suspense.effects.push(...fn2);
    } else {
      suspense.effects.push(fn2);
    }
  } else {
    queuePostFlushCb(fn2);
  }
}
function setActiveBranch(suspense, branch) {
  suspense.activeBranch = branch;
  const { vnode, parentComponent } = suspense;
  const el3 = vnode.el = branch.el;
  if (parentComponent && parentComponent.subTree === vnode) {
    parentComponent.vnode.el = el3;
    updateHOCHostEl(parentComponent, el3);
  }
}
function isVNodeSuspensible(vnode) {
  var _a2;
  return ((_a2 = vnode.props) == null ? void 0 : _a2.suspensible) != null && vnode.props.suspensible !== false;
}
const ssrContextKey = Symbol.for("v-scx");
const useSSRContext = () => {
  {
    const ctx = inject(ssrContextKey);
    if (!ctx) {
      warn$1$1(
        `Server rendering context not provided. Make sure to only call useSSRContext() conditionally in the server build.`
      );
    }
    return ctx;
  }
};
function watchEffect(effect2, options) {
  return doWatch(effect2, null, options);
}
function watchPostEffect(effect2, options) {
  return doWatch(
    effect2,
    null,
    extend({}, options, { flush: "post" })
  );
}
function watchSyncEffect(effect2, options) {
  return doWatch(
    effect2,
    null,
    extend({}, options, { flush: "sync" })
  );
}
const INITIAL_WATCHER_VALUE = {};
function watch(source, cb, options) {
  if (!isFunction$2(cb)) {
    warn$1$1(
      `\`watch(fn, options?)\` signature has been moved to a separate API. Use \`watchEffect(fn, options?)\` instead. \`watch\` now only supports \`watch(source, cb, options?) signature.`
    );
  }
  return doWatch(source, cb, options);
}
function doWatch(source, cb, {
  immediate,
  deep,
  flush,
  once,
  onTrack,
  onTrigger
} = EMPTY_OBJ) {
  if (cb && once) {
    const _cb = cb;
    cb = (...args) => {
      _cb(...args);
      unwatch();
    };
  }
  if (deep !== void 0 && typeof deep === "number") {
    warn$1$1(
      `watch() "deep" option with number value will be used as watch depth in future versions. Please use a boolean instead to avoid potential breakage.`
    );
  }
  if (!cb) {
    if (immediate !== void 0) {
      warn$1$1(
        `watch() "immediate" option is only respected when using the watch(source, callback, options?) signature.`
      );
    }
    if (deep !== void 0) {
      warn$1$1(
        `watch() "deep" option is only respected when using the watch(source, callback, options?) signature.`
      );
    }
    if (once !== void 0) {
      warn$1$1(
        `watch() "once" option is only respected when using the watch(source, callback, options?) signature.`
      );
    }
  }
  const warnInvalidSource = (s5) => {
    warn$1$1(
      `Invalid watch source: `,
      s5,
      `A watch source can only be a getter/effect function, a ref, a reactive object, or an array of these types.`
    );
  };
  const instance = currentInstance;
  const reactiveGetter = (source2) => deep === true ? source2 : (
    // for deep: false, only traverse root-level properties
    traverse(source2, deep === false ? 1 : void 0)
  );
  let getter;
  let forceTrigger = false;
  let isMultiSource = false;
  if (isRef(source)) {
    getter = () => source.value;
    forceTrigger = isShallow(source);
  } else if (isReactive(source)) {
    getter = () => reactiveGetter(source);
    forceTrigger = true;
  } else if (isArray$3(source)) {
    isMultiSource = true;
    forceTrigger = source.some((s5) => isReactive(s5) || isShallow(s5));
    getter = () => source.map((s5) => {
      if (isRef(s5)) {
        return s5.value;
      } else if (isReactive(s5)) {
        return reactiveGetter(s5);
      } else if (isFunction$2(s5)) {
        return callWithErrorHandling(s5, instance, 2);
      } else {
        warnInvalidSource(s5);
      }
    });
  } else if (isFunction$2(source)) {
    if (cb) {
      getter = () => callWithErrorHandling(source, instance, 2);
    } else {
      getter = () => {
        if (cleanup) {
          cleanup();
        }
        return callWithAsyncErrorHandling(
          source,
          instance,
          3,
          [onCleanup]
        );
      };
    }
  } else {
    getter = NOOP;
    warnInvalidSource(source);
  }
  if (cb && deep) {
    const baseGetter = getter;
    getter = () => traverse(baseGetter());
  }
  let cleanup;
  let onCleanup = (fn2) => {
    cleanup = effect2.onStop = () => {
      callWithErrorHandling(fn2, instance, 4);
      cleanup = effect2.onStop = void 0;
    };
  };
  let ssrCleanup;
  if (isInSSRComponentSetup) {
    onCleanup = NOOP;
    if (!cb) {
      getter();
    } else if (immediate) {
      callWithAsyncErrorHandling(cb, instance, 3, [
        getter(),
        isMultiSource ? [] : void 0,
        onCleanup
      ]);
    }
    if (flush === "sync") {
      const ctx = useSSRContext();
      ssrCleanup = ctx.__watcherHandles || (ctx.__watcherHandles = []);
    } else {
      return NOOP;
    }
  }
  let oldValue = isMultiSource ? new Array(source.length).fill(INITIAL_WATCHER_VALUE) : INITIAL_WATCHER_VALUE;
  const job = () => {
    if (!effect2.active || !effect2.dirty) {
      return;
    }
    if (cb) {
      const newValue = effect2.run();
      if (deep || forceTrigger || (isMultiSource ? newValue.some((v2, i3) => hasChanged(v2, oldValue[i3])) : hasChanged(newValue, oldValue)) || false) {
        if (cleanup) {
          cleanup();
        }
        callWithAsyncErrorHandling(cb, instance, 3, [
          newValue,
          // pass undefined as the old value when it's changed for the first time
          oldValue === INITIAL_WATCHER_VALUE ? void 0 : isMultiSource && oldValue[0] === INITIAL_WATCHER_VALUE ? [] : oldValue,
          onCleanup
        ]);
        oldValue = newValue;
      }
    } else {
      effect2.run();
    }
  };
  job.allowRecurse = !!cb;
  let scheduler;
  if (flush === "sync") {
    scheduler = job;
  } else if (flush === "post") {
    scheduler = () => queuePostRenderEffect(job, instance && instance.suspense);
  } else {
    job.pre = true;
    if (instance)
      job.id = instance.uid;
    scheduler = () => queueJob(job);
  }
  const effect2 = new ReactiveEffect(getter, NOOP, scheduler);
  const scope = getCurrentScope();
  const unwatch = () => {
    effect2.stop();
    if (scope) {
      remove(scope.effects, effect2);
    }
  };
  {
    effect2.onTrack = onTrack;
    effect2.onTrigger = onTrigger;
  }
  if (cb) {
    if (immediate) {
      job();
    } else {
      oldValue = effect2.run();
    }
  } else if (flush === "post") {
    queuePostRenderEffect(
      effect2.run.bind(effect2),
      instance && instance.suspense
    );
  } else {
    effect2.run();
  }
  if (ssrCleanup)
    ssrCleanup.push(unwatch);
  return unwatch;
}
function instanceWatch(source, value, options) {
  const publicThis = this.proxy;
  const getter = isString$2(source) ? source.includes(".") ? createPathGetter(publicThis, source) : () => publicThis[source] : source.bind(publicThis, publicThis);
  let cb;
  if (isFunction$2(value)) {
    cb = value;
  } else {
    cb = value.handler;
    options = value;
  }
  const reset = setCurrentInstance(this);
  const res = doWatch(getter, cb.bind(publicThis), options);
  reset();
  return res;
}
function createPathGetter(ctx, path) {
  const segments = path.split(".");
  return () => {
    let cur = ctx;
    for (let i3 = 0; i3 < segments.length && cur; i3++) {
      cur = cur[segments[i3]];
    }
    return cur;
  };
}
function traverse(value, depth, currentDepth = 0, seen2) {
  if (!isObject$3(value) || value["__v_skip"]) {
    return value;
  }
  if (depth && depth > 0) {
    if (currentDepth >= depth) {
      return value;
    }
    currentDepth++;
  }
  seen2 = seen2 || /* @__PURE__ */ new Set();
  if (seen2.has(value)) {
    return value;
  }
  seen2.add(value);
  if (isRef(value)) {
    traverse(value.value, depth, currentDepth, seen2);
  } else if (isArray$3(value)) {
    for (let i3 = 0; i3 < value.length; i3++) {
      traverse(value[i3], depth, currentDepth, seen2);
    }
  } else if (isSet(value) || isMap(value)) {
    value.forEach((v2) => {
      traverse(v2, depth, currentDepth, seen2);
    });
  } else if (isPlainObject$1(value)) {
    for (const key in value) {
      traverse(value[key], depth, currentDepth, seen2);
    }
  }
  return value;
}
function validateDirectiveName(name) {
  if (isBuiltInDirective(name)) {
    warn$1$1("Do not use built-in directive ids as custom directive id: " + name);
  }
}
function withDirectives(vnode, directives2) {
  if (currentRenderingInstance === null) {
    warn$1$1(`withDirectives can only be used inside render functions.`);
    return vnode;
  }
  const instance = getExposeProxy(currentRenderingInstance) || currentRenderingInstance.proxy;
  const bindings = vnode.dirs || (vnode.dirs = []);
  for (let i3 = 0; i3 < directives2.length; i3++) {
    let [dir, value, arg, modifiers = EMPTY_OBJ] = directives2[i3];
    if (dir) {
      if (isFunction$2(dir)) {
        dir = {
          mounted: dir,
          updated: dir
        };
      }
      if (dir.deep) {
        traverse(value);
      }
      bindings.push({
        dir,
        instance,
        value,
        oldValue: void 0,
        arg,
        modifiers
      });
    }
  }
  return vnode;
}
function invokeDirectiveHook(vnode, prevVNode, instance, name) {
  const bindings = vnode.dirs;
  const oldBindings = prevVNode && prevVNode.dirs;
  for (let i3 = 0; i3 < bindings.length; i3++) {
    const binding = bindings[i3];
    if (oldBindings) {
      binding.oldValue = oldBindings[i3].value;
    }
    let hook = binding.dir[name];
    if (hook) {
      pauseTracking();
      callWithAsyncErrorHandling(hook, instance, 8, [
        vnode.el,
        binding,
        vnode,
        prevVNode
      ]);
      resetTracking();
    }
  }
}
const leaveCbKey = Symbol("_leaveCb");
const enterCbKey = Symbol("_enterCb");
function useTransitionState() {
  const state = {
    isMounted: false,
    isLeaving: false,
    isUnmounting: false,
    leavingVNodes: /* @__PURE__ */ new Map()
  };
  onMounted(() => {
    state.isMounted = true;
  });
  onBeforeUnmount(() => {
    state.isUnmounting = true;
  });
  return state;
}
const TransitionHookValidator = [Function, Array];
const BaseTransitionPropsValidators = {
  mode: String,
  appear: Boolean,
  persisted: Boolean,
  // enter
  onBeforeEnter: TransitionHookValidator,
  onEnter: TransitionHookValidator,
  onAfterEnter: TransitionHookValidator,
  onEnterCancelled: TransitionHookValidator,
  // leave
  onBeforeLeave: TransitionHookValidator,
  onLeave: TransitionHookValidator,
  onAfterLeave: TransitionHookValidator,
  onLeaveCancelled: TransitionHookValidator,
  // appear
  onBeforeAppear: TransitionHookValidator,
  onAppear: TransitionHookValidator,
  onAfterAppear: TransitionHookValidator,
  onAppearCancelled: TransitionHookValidator
};
const BaseTransitionImpl = {
  name: `BaseTransition`,
  props: BaseTransitionPropsValidators,
  setup(props, { slots }) {
    const instance = getCurrentInstance();
    const state = useTransitionState();
    let prevTransitionKey;
    return () => {
      const children = slots.default && getTransitionRawChildren(slots.default(), true);
      if (!children || !children.length) {
        return;
      }
      let child = children[0];
      if (children.length > 1) {
        let hasFound = false;
        for (const c3 of children) {
          if (c3.type !== Comment$1) {
            if (hasFound) {
              warn$1$1(
                "<transition> can only be used on a single element or component. Use <transition-group> for lists."
              );
              break;
            }
            child = c3;
            hasFound = true;
          }
        }
      }
      const rawProps = toRaw(props);
      const { mode } = rawProps;
      if (mode && mode !== "in-out" && mode !== "out-in" && mode !== "default") {
        warn$1$1(`invalid <transition> mode: ${mode}`);
      }
      if (state.isLeaving) {
        return emptyPlaceholder(child);
      }
      const innerChild = getKeepAliveChild(child);
      if (!innerChild) {
        return emptyPlaceholder(child);
      }
      const enterHooks = resolveTransitionHooks(
        innerChild,
        rawProps,
        state,
        instance
      );
      setTransitionHooks(innerChild, enterHooks);
      const oldChild = instance.subTree;
      const oldInnerChild = oldChild && getKeepAliveChild(oldChild);
      let transitionKeyChanged = false;
      const { getTransitionKey } = innerChild.type;
      if (getTransitionKey) {
        const key = getTransitionKey();
        if (prevTransitionKey === void 0) {
          prevTransitionKey = key;
        } else if (key !== prevTransitionKey) {
          prevTransitionKey = key;
          transitionKeyChanged = true;
        }
      }
      if (oldInnerChild && oldInnerChild.type !== Comment$1 && (!isSameVNodeType(innerChild, oldInnerChild) || transitionKeyChanged)) {
        const leavingHooks = resolveTransitionHooks(
          oldInnerChild,
          rawProps,
          state,
          instance
        );
        setTransitionHooks(oldInnerChild, leavingHooks);
        if (mode === "out-in") {
          state.isLeaving = true;
          leavingHooks.afterLeave = () => {
            state.isLeaving = false;
            if (instance.update.active !== false) {
              instance.effect.dirty = true;
              instance.update();
            }
          };
          return emptyPlaceholder(child);
        } else if (mode === "in-out" && innerChild.type !== Comment$1) {
          leavingHooks.delayLeave = (el3, earlyRemove, delayedLeave) => {
            const leavingVNodesCache = getLeavingNodesForType(
              state,
              oldInnerChild
            );
            leavingVNodesCache[String(oldInnerChild.key)] = oldInnerChild;
            el3[leaveCbKey] = () => {
              earlyRemove();
              el3[leaveCbKey] = void 0;
              delete enterHooks.delayedLeave;
            };
            enterHooks.delayedLeave = delayedLeave;
          };
        }
      }
      return child;
    };
  }
};
const BaseTransition = BaseTransitionImpl;
function getLeavingNodesForType(state, vnode) {
  const { leavingVNodes } = state;
  let leavingVNodesCache = leavingVNodes.get(vnode.type);
  if (!leavingVNodesCache) {
    leavingVNodesCache = /* @__PURE__ */ Object.create(null);
    leavingVNodes.set(vnode.type, leavingVNodesCache);
  }
  return leavingVNodesCache;
}
function resolveTransitionHooks(vnode, props, state, instance) {
  const {
    appear,
    mode,
    persisted = false,
    onBeforeEnter,
    onEnter,
    onAfterEnter,
    onEnterCancelled,
    onBeforeLeave,
    onLeave,
    onAfterLeave,
    onLeaveCancelled,
    onBeforeAppear,
    onAppear,
    onAfterAppear,
    onAppearCancelled
  } = props;
  const key = String(vnode.key);
  const leavingVNodesCache = getLeavingNodesForType(state, vnode);
  const callHook2 = (hook, args) => {
    hook && callWithAsyncErrorHandling(
      hook,
      instance,
      9,
      args
    );
  };
  const callAsyncHook = (hook, args) => {
    const done = args[1];
    callHook2(hook, args);
    if (isArray$3(hook)) {
      if (hook.every((hook2) => hook2.length <= 1))
        done();
    } else if (hook.length <= 1) {
      done();
    }
  };
  const hooks = {
    mode,
    persisted,
    beforeEnter(el3) {
      let hook = onBeforeEnter;
      if (!state.isMounted) {
        if (appear) {
          hook = onBeforeAppear || onBeforeEnter;
        } else {
          return;
        }
      }
      if (el3[leaveCbKey]) {
        el3[leaveCbKey](
          true
          /* cancelled */
        );
      }
      const leavingVNode = leavingVNodesCache[key];
      if (leavingVNode && isSameVNodeType(vnode, leavingVNode) && leavingVNode.el[leaveCbKey]) {
        leavingVNode.el[leaveCbKey]();
      }
      callHook2(hook, [el3]);
    },
    enter(el3) {
      let hook = onEnter;
      let afterHook = onAfterEnter;
      let cancelHook = onEnterCancelled;
      if (!state.isMounted) {
        if (appear) {
          hook = onAppear || onEnter;
          afterHook = onAfterAppear || onAfterEnter;
          cancelHook = onAppearCancelled || onEnterCancelled;
        } else {
          return;
        }
      }
      let called = false;
      const done = el3[enterCbKey] = (cancelled) => {
        if (called)
          return;
        called = true;
        if (cancelled) {
          callHook2(cancelHook, [el3]);
        } else {
          callHook2(afterHook, [el3]);
        }
        if (hooks.delayedLeave) {
          hooks.delayedLeave();
        }
        el3[enterCbKey] = void 0;
      };
      if (hook) {
        callAsyncHook(hook, [el3, done]);
      } else {
        done();
      }
    },
    leave(el3, remove2) {
      const key2 = String(vnode.key);
      if (el3[enterCbKey]) {
        el3[enterCbKey](
          true
          /* cancelled */
        );
      }
      if (state.isUnmounting) {
        return remove2();
      }
      callHook2(onBeforeLeave, [el3]);
      let called = false;
      const done = el3[leaveCbKey] = (cancelled) => {
        if (called)
          return;
        called = true;
        remove2();
        if (cancelled) {
          callHook2(onLeaveCancelled, [el3]);
        } else {
          callHook2(onAfterLeave, [el3]);
        }
        el3[leaveCbKey] = void 0;
        if (leavingVNodesCache[key2] === vnode) {
          delete leavingVNodesCache[key2];
        }
      };
      leavingVNodesCache[key2] = vnode;
      if (onLeave) {
        callAsyncHook(onLeave, [el3, done]);
      } else {
        done();
      }
    },
    clone(vnode2) {
      return resolveTransitionHooks(vnode2, props, state, instance);
    }
  };
  return hooks;
}
function emptyPlaceholder(vnode) {
  if (isKeepAlive(vnode)) {
    vnode = cloneVNode(vnode);
    vnode.children = null;
    return vnode;
  }
}
function getKeepAliveChild(vnode) {
  return isKeepAlive(vnode) ? (
    // #7121 ensure get the child component subtree in case
    // it's been replaced during HMR
    vnode.component ? vnode.component.subTree : vnode.children ? vnode.children[0] : void 0
  ) : vnode;
}
function setTransitionHooks(vnode, hooks) {
  if (vnode.shapeFlag & 6 && vnode.component) {
    setTransitionHooks(vnode.component.subTree, hooks);
  } else if (vnode.shapeFlag & 128) {
    vnode.ssContent.transition = hooks.clone(vnode.ssContent);
    vnode.ssFallback.transition = hooks.clone(vnode.ssFallback);
  } else {
    vnode.transition = hooks;
  }
}
function getTransitionRawChildren(children, keepComment = false, parentKey) {
  let ret = [];
  let keyedFragmentCount = 0;
  for (let i3 = 0; i3 < children.length; i3++) {
    let child = children[i3];
    const key = parentKey == null ? child.key : String(parentKey) + String(child.key != null ? child.key : i3);
    if (child.type === Fragment) {
      if (child.patchFlag & 128)
        keyedFragmentCount++;
      ret = ret.concat(
        getTransitionRawChildren(child.children, keepComment, key)
      );
    } else if (keepComment || child.type !== Comment$1) {
      ret.push(key != null ? cloneVNode(child, { key }) : child);
    }
  }
  if (keyedFragmentCount > 1) {
    for (let i3 = 0; i3 < ret.length; i3++) {
      ret[i3].patchFlag = -2;
    }
  }
  return ret;
}
/*! #__NO_SIDE_EFFECTS__ */
// @__NO_SIDE_EFFECTS__
function defineComponent(options, extraOptions) {
  return isFunction$2(options) ? (
    // #8326: extend call and options.name access are considered side-effects
    // by Rollup, so we have to wrap it in a pure-annotated IIFE.
    /* @__PURE__ */ (() => extend({ name: options.name }, extraOptions, { setup: options }))()
  ) : options;
}
const isAsyncWrapper = (i3) => !!i3.type.__asyncLoader;
/*! #__NO_SIDE_EFFECTS__ */
// @__NO_SIDE_EFFECTS__
function defineAsyncComponent(source) {
  if (isFunction$2(source)) {
    source = { loader: source };
  }
  const {
    loader,
    loadingComponent,
    errorComponent,
    delay = 200,
    timeout,
    // undefined = never times out
    suspensible = true,
    onError: userOnError
  } = source;
  let pendingRequest = null;
  let resolvedComp;
  let retries = 0;
  const retry = () => {
    retries++;
    pendingRequest = null;
    return load();
  };
  const load = () => {
    let thisRequest;
    return pendingRequest || (thisRequest = pendingRequest = loader().catch((err) => {
      err = err instanceof Error ? err : new Error(String(err));
      if (userOnError) {
        return new Promise((resolve2, reject) => {
          const userRetry = () => resolve2(retry());
          const userFail = () => reject(err);
          userOnError(err, userRetry, userFail, retries + 1);
        });
      } else {
        throw err;
      }
    }).then((comp) => {
      if (thisRequest !== pendingRequest && pendingRequest) {
        return pendingRequest;
      }
      if (!comp) {
        warn$1$1(
          `Async component loader resolved to undefined. If you are using retry(), make sure to return its return value.`
        );
      }
      if (comp && (comp.__esModule || comp[Symbol.toStringTag] === "Module")) {
        comp = comp.default;
      }
      if (comp && !isObject$3(comp) && !isFunction$2(comp)) {
        throw new Error(`Invalid async component load result: ${comp}`);
      }
      resolvedComp = comp;
      return comp;
    }));
  };
  return /* @__PURE__ */ defineComponent({
    name: "AsyncComponentWrapper",
    __asyncLoader: load,
    get __asyncResolved() {
      return resolvedComp;
    },
    setup() {
      const instance = currentInstance;
      if (resolvedComp) {
        return () => createInnerComp(resolvedComp, instance);
      }
      const onError = (err) => {
        pendingRequest = null;
        handleError(
          err,
          instance,
          13,
          !errorComponent
        );
      };
      if (suspensible && instance.suspense || isInSSRComponentSetup) {
        return load().then((comp) => {
          return () => createInnerComp(comp, instance);
        }).catch((err) => {
          onError(err);
          return () => errorComponent ? createVNode(errorComponent, {
            error: err
          }) : null;
        });
      }
      const loaded2 = ref(false);
      const error = ref();
      const delayed = ref(!!delay);
      if (delay) {
        setTimeout(() => {
          delayed.value = false;
        }, delay);
      }
      if (timeout != null) {
        setTimeout(() => {
          if (!loaded2.value && !error.value) {
            const err = new Error(
              `Async component timed out after ${timeout}ms.`
            );
            onError(err);
            error.value = err;
          }
        }, timeout);
      }
      load().then(() => {
        loaded2.value = true;
        if (instance.parent && isKeepAlive(instance.parent.vnode)) {
          instance.parent.effect.dirty = true;
          queueJob(instance.parent.update);
        }
      }).catch((err) => {
        onError(err);
        error.value = err;
      });
      return () => {
        if (loaded2.value && resolvedComp) {
          return createInnerComp(resolvedComp, instance);
        } else if (error.value && errorComponent) {
          return createVNode(errorComponent, {
            error: error.value
          });
        } else if (loadingComponent && !delayed.value) {
          return createVNode(loadingComponent);
        }
      };
    }
  });
}
function createInnerComp(comp, parent) {
  const { ref: ref22, props, children, ce: ce2 } = parent.vnode;
  const vnode = createVNode(comp, props, children);
  vnode.ref = ref22;
  vnode.ce = ce2;
  delete parent.vnode.ce;
  return vnode;
}
const isKeepAlive = (vnode) => vnode.type.__isKeepAlive;
function onActivated(hook, target) {
  registerKeepAliveHook(hook, "a", target);
}
function onDeactivated(hook, target) {
  registerKeepAliveHook(hook, "da", target);
}
function registerKeepAliveHook(hook, type, target = currentInstance) {
  const wrappedHook = hook.__wdc || (hook.__wdc = () => {
    let current = target;
    while (current) {
      if (current.isDeactivated) {
        return;
      }
      current = current.parent;
    }
    return hook();
  });
  injectHook(type, wrappedHook, target);
  if (target) {
    let current = target.parent;
    while (current && current.parent) {
      if (isKeepAlive(current.parent.vnode)) {
        injectToKeepAliveRoot(wrappedHook, type, target, current);
      }
      current = current.parent;
    }
  }
}
function injectToKeepAliveRoot(hook, type, target, keepAliveRoot) {
  const injected = injectHook(
    type,
    hook,
    keepAliveRoot,
    true
    /* prepend */
  );
  onUnmounted(() => {
    remove(keepAliveRoot[type], injected);
  }, target);
}
function injectHook(type, hook, target = currentInstance, prepend = false) {
  if (target) {
    const hooks = target[type] || (target[type] = []);
    const wrappedHook = hook.__weh || (hook.__weh = (...args) => {
      if (target.isUnmounted) {
        return;
      }
      pauseTracking();
      const reset = setCurrentInstance(target);
      const res = callWithAsyncErrorHandling(hook, target, type, args);
      reset();
      resetTracking();
      return res;
    });
    if (prepend) {
      hooks.unshift(wrappedHook);
    } else {
      hooks.push(wrappedHook);
    }
    return wrappedHook;
  } else {
    const apiName = toHandlerKey(ErrorTypeStrings$1[type].replace(/ hook$/, ""));
    warn$1$1(
      `${apiName} is called when there is no active component instance to be associated with. Lifecycle injection APIs can only be used during execution of setup(). If you are using async setup(), make sure to register lifecycle hooks before the first await statement.`
    );
  }
}
const createHook = (lifecycle) => (hook, target = currentInstance) => (
  // post-create lifecycle registrations are noops during SSR (except for serverPrefetch)
  (!isInSSRComponentSetup || lifecycle === "sp") && injectHook(lifecycle, (...args) => hook(...args), target)
);
const onBeforeMount = createHook("bm");
const onMounted = createHook("m");
const onBeforeUpdate = createHook("bu");
const onUpdated = createHook("u");
const onBeforeUnmount = createHook("bum");
const onUnmounted = createHook("um");
const onServerPrefetch = createHook("sp");
const onRenderTriggered = createHook(
  "rtg"
);
const onRenderTracked = createHook(
  "rtc"
);
function onErrorCaptured(hook, target = currentInstance) {
  injectHook("ec", hook, target);
}
function renderList(source, renderItem, cache2, index) {
  let ret;
  const cached = cache2 && cache2[index];
  if (isArray$3(source) || isString$2(source)) {
    ret = new Array(source.length);
    for (let i3 = 0, l2 = source.length; i3 < l2; i3++) {
      ret[i3] = renderItem(source[i3], i3, void 0, cached && cached[i3]);
    }
  } else if (typeof source === "number") {
    if (!Number.isInteger(source)) {
      warn$1$1(`The v-for range expect an integer value but got ${source}.`);
    }
    ret = new Array(source);
    for (let i3 = 0; i3 < source; i3++) {
      ret[i3] = renderItem(i3 + 1, i3, void 0, cached && cached[i3]);
    }
  } else if (isObject$3(source)) {
    if (source[Symbol.iterator]) {
      ret = Array.from(
        source,
        (item, i3) => renderItem(item, i3, void 0, cached && cached[i3])
      );
    } else {
      const keys = Object.keys(source);
      ret = new Array(keys.length);
      for (let i3 = 0, l2 = keys.length; i3 < l2; i3++) {
        const key = keys[i3];
        ret[i3] = renderItem(source[key], key, i3, cached && cached[i3]);
      }
    }
  } else {
    ret = [];
  }
  if (cache2) {
    cache2[index] = ret;
  }
  return ret;
}
function createSlots(slots, dynamicSlots) {
  for (let i3 = 0; i3 < dynamicSlots.length; i3++) {
    const slot = dynamicSlots[i3];
    if (isArray$3(slot)) {
      for (let j2 = 0; j2 < slot.length; j2++) {
        slots[slot[j2].name] = slot[j2].fn;
      }
    } else if (slot) {
      slots[slot.name] = slot.key ? (...args) => {
        const res = slot.fn(...args);
        if (res)
          res.key = slot.key;
        return res;
      } : slot.fn;
    }
  }
  return slots;
}
function renderSlot(slots, name, props = {}, fallback, noSlotted) {
  if (currentRenderingInstance.isCE || currentRenderingInstance.parent && isAsyncWrapper(currentRenderingInstance.parent) && currentRenderingInstance.parent.isCE) {
    if (name !== "default")
      props.name = name;
    return createVNode("slot", props, fallback && fallback());
  }
  let slot = slots[name];
  if (slot && slot.length > 1) {
    warn$1$1(
      `SSR-optimized slot function detected in a non-SSR-optimized render function. You need to mark this component with $dynamic-slots in the parent template.`
    );
    slot = () => [];
  }
  if (slot && slot._c) {
    slot._d = false;
  }
  openBlock();
  const validSlotContent = slot && ensureValidVNode(slot(props));
  const rendered = createBlock(
    Fragment,
    {
      key: props.key || // slot content array of a dynamic conditional slot may have a branch
      // key attached in the `createSlots` helper, respect that
      validSlotContent && validSlotContent.key || `_${name}`
    },
    validSlotContent || (fallback ? fallback() : []),
    validSlotContent && slots._ === 1 ? 64 : -2
  );
  if (!noSlotted && rendered.scopeId) {
    rendered.slotScopeIds = [rendered.scopeId + "-s"];
  }
  if (slot && slot._c) {
    slot._d = true;
  }
  return rendered;
}
function ensureValidVNode(vnodes) {
  return vnodes.some((child) => {
    if (!isVNode$1(child))
      return true;
    if (child.type === Comment$1)
      return false;
    if (child.type === Fragment && !ensureValidVNode(child.children))
      return false;
    return true;
  }) ? vnodes : null;
}
const getPublicInstance = (i3) => {
  if (!i3)
    return null;
  if (isStatefulComponent(i3))
    return getExposeProxy(i3) || i3.proxy;
  return getPublicInstance(i3.parent);
};
const publicPropertiesMap = (
  // Move PURE marker to new line to workaround compiler discarding it
  // due to type annotation
  /* @__PURE__ */ extend(/* @__PURE__ */ Object.create(null), {
    $: (i3) => i3,
    $el: (i3) => i3.vnode.el,
    $data: (i3) => i3.data,
    $props: (i3) => shallowReadonly(i3.props),
    $attrs: (i3) => shallowReadonly(i3.attrs),
    $slots: (i3) => shallowReadonly(i3.slots),
    $refs: (i3) => shallowReadonly(i3.refs),
    $parent: (i3) => getPublicInstance(i3.parent),
    $root: (i3) => getPublicInstance(i3.root),
    $emit: (i3) => i3.emit,
    $options: (i3) => resolveMergedOptions(i3),
    $forceUpdate: (i3) => i3.f || (i3.f = () => {
      i3.effect.dirty = true;
      queueJob(i3.update);
    }),
    $nextTick: (i3) => i3.n || (i3.n = nextTick.bind(i3.proxy)),
    $watch: (i3) => instanceWatch.bind(i3)
  })
);
const isReservedPrefix = (key) => key === "_" || key === "$";
const hasSetupBinding = (state, key) => state !== EMPTY_OBJ && !state.__isScriptSetup && hasOwn$1(state, key);
const PublicInstanceProxyHandlers = {
  get({ _: instance }, key) {
    const { ctx, setupState, data, props, accessCache, type, appContext } = instance;
    if (key === "__isVue") {
      return true;
    }
    let normalizedProps;
    if (key[0] !== "$") {
      const n2 = accessCache[key];
      if (n2 !== void 0) {
        switch (n2) {
          case 1:
            return setupState[key];
          case 2:
            return data[key];
          case 4:
            return ctx[key];
          case 3:
            return props[key];
        }
      } else if (hasSetupBinding(setupState, key)) {
        accessCache[key] = 1;
        return setupState[key];
      } else if (data !== EMPTY_OBJ && hasOwn$1(data, key)) {
        accessCache[key] = 2;
        return data[key];
      } else if (
        // only cache other properties when instance has declared (thus stable)
        // props
        (normalizedProps = instance.propsOptions[0]) && hasOwn$1(normalizedProps, key)
      ) {
        accessCache[key] = 3;
        return props[key];
      } else if (ctx !== EMPTY_OBJ && hasOwn$1(ctx, key)) {
        accessCache[key] = 4;
        return ctx[key];
      } else if (shouldCacheAccess) {
        accessCache[key] = 0;
      }
    }
    const publicGetter = publicPropertiesMap[key];
    let cssModule, globalProperties;
    if (publicGetter) {
      if (key === "$attrs") {
        track(instance, "get", key);
        markAttrsAccessed();
      } else if (key === "$slots") {
        track(instance, "get", key);
      }
      return publicGetter(instance);
    } else if (
      // css module (injected by vue-loader)
      (cssModule = type.__cssModules) && (cssModule = cssModule[key])
    ) {
      return cssModule;
    } else if (ctx !== EMPTY_OBJ && hasOwn$1(ctx, key)) {
      accessCache[key] = 4;
      return ctx[key];
    } else if (
      // global properties
      globalProperties = appContext.config.globalProperties, hasOwn$1(globalProperties, key)
    ) {
      {
        return globalProperties[key];
      }
    } else if (currentRenderingInstance && (!isString$2(key) || // #1091 avoid internal isRef/isVNode checks on component instance leading
    // to infinite warning loop
    key.indexOf("__v") !== 0)) {
      if (data !== EMPTY_OBJ && isReservedPrefix(key[0]) && hasOwn$1(data, key)) {
        warn$1$1(
          `Property ${JSON.stringify(
            key
          )} must be accessed via $data because it starts with a reserved character ("$" or "_") and is not proxied on the render context.`
        );
      } else if (instance === currentRenderingInstance) {
        warn$1$1(
          `Property ${JSON.stringify(key)} was accessed during render but is not defined on instance.`
        );
      }
    }
  },
  set({ _: instance }, key, value) {
    const { data, setupState, ctx } = instance;
    if (hasSetupBinding(setupState, key)) {
      setupState[key] = value;
      return true;
    } else if (setupState.__isScriptSetup && hasOwn$1(setupState, key)) {
      warn$1$1(`Cannot mutate <script setup> binding "${key}" from Options API.`);
      return false;
    } else if (data !== EMPTY_OBJ && hasOwn$1(data, key)) {
      data[key] = value;
      return true;
    } else if (hasOwn$1(instance.props, key)) {
      warn$1$1(`Attempting to mutate prop "${key}". Props are readonly.`);
      return false;
    }
    if (key[0] === "$" && key.slice(1) in instance) {
      warn$1$1(
        `Attempting to mutate public property "${key}". Properties starting with $ are reserved and readonly.`
      );
      return false;
    } else {
      if (key in instance.appContext.config.globalProperties) {
        Object.defineProperty(ctx, key, {
          enumerable: true,
          configurable: true,
          value
        });
      } else {
        ctx[key] = value;
      }
    }
    return true;
  },
  has({
    _: { data, setupState, accessCache, ctx, appContext, propsOptions }
  }, key) {
    let normalizedProps;
    return !!accessCache[key] || data !== EMPTY_OBJ && hasOwn$1(data, key) || hasSetupBinding(setupState, key) || (normalizedProps = propsOptions[0]) && hasOwn$1(normalizedProps, key) || hasOwn$1(ctx, key) || hasOwn$1(publicPropertiesMap, key) || hasOwn$1(appContext.config.globalProperties, key);
  },
  defineProperty(target, key, descriptor) {
    if (descriptor.get != null) {
      target._.accessCache[key] = 0;
    } else if (hasOwn$1(descriptor, "value")) {
      this.set(target, key, descriptor.value, null);
    }
    return Reflect.defineProperty(target, key, descriptor);
  }
};
{
  PublicInstanceProxyHandlers.ownKeys = (target) => {
    warn$1$1(
      `Avoid app logic that relies on enumerating keys on a component instance. The keys will be empty in production mode to avoid performance overhead.`
    );
    return Reflect.ownKeys(target);
  };
}
function createDevRenderContext(instance) {
  const target = {};
  Object.defineProperty(target, `_`, {
    configurable: true,
    enumerable: false,
    get: () => instance
  });
  Object.keys(publicPropertiesMap).forEach((key) => {
    Object.defineProperty(target, key, {
      configurable: true,
      enumerable: false,
      get: () => publicPropertiesMap[key](instance),
      // intercepted by the proxy so no need for implementation,
      // but needed to prevent set errors
      set: NOOP
    });
  });
  return target;
}
function exposePropsOnRenderContext(instance) {
  const {
    ctx,
    propsOptions: [propsOptions]
  } = instance;
  if (propsOptions) {
    Object.keys(propsOptions).forEach((key) => {
      Object.defineProperty(ctx, key, {
        enumerable: true,
        configurable: true,
        get: () => instance.props[key],
        set: NOOP
      });
    });
  }
}
function exposeSetupStateOnRenderContext(instance) {
  const { ctx, setupState } = instance;
  Object.keys(toRaw(setupState)).forEach((key) => {
    if (!setupState.__isScriptSetup) {
      if (isReservedPrefix(key[0])) {
        warn$1$1(
          `setup() return property ${JSON.stringify(
            key
          )} should not start with "$" or "_" which are reserved prefixes for Vue internals.`
        );
        return;
      }
      Object.defineProperty(ctx, key, {
        enumerable: true,
        configurable: true,
        get: () => setupState[key],
        set: NOOP
      });
    }
  });
}
function useSlots() {
  return getContext().slots;
}
function useAttrs() {
  return getContext().attrs;
}
function useModel(props, name, options = EMPTY_OBJ) {
  const i3 = getCurrentInstance();
  if (!i3) {
    warn$1$1(`useModel() called without active instance.`);
    return ref();
  }
  if (!i3.propsOptions[0][name]) {
    warn$1$1(`useModel() called with prop "${name}" which is not declared.`);
    return ref();
  }
  const camelizedName = camelize(name);
  const hyphenatedName = hyphenate(name);
  const res = customRef((track2, trigger2) => {
    let localValue;
    watchSyncEffect(() => {
      const propValue = props[name];
      if (hasChanged(localValue, propValue)) {
        localValue = propValue;
        trigger2();
      }
    });
    return {
      get() {
        track2();
        return options.get ? options.get(localValue) : localValue;
      },
      set(value) {
        const rawProps = i3.vnode.props;
        if (!(rawProps && // check if parent has passed v-model
        (name in rawProps || camelizedName in rawProps || hyphenatedName in rawProps) && (`onUpdate:${name}` in rawProps || `onUpdate:${camelizedName}` in rawProps || `onUpdate:${hyphenatedName}` in rawProps)) && hasChanged(value, localValue)) {
          localValue = value;
          trigger2();
        }
        i3.emit(`update:${name}`, options.set ? options.set(value) : value);
      }
    };
  });
  const modifierKey = name === "modelValue" ? "modelModifiers" : `${name}Modifiers`;
  res[Symbol.iterator] = () => {
    let i22 = 0;
    return {
      next() {
        if (i22 < 2) {
          return { value: i22++ ? props[modifierKey] || {} : res, done: false };
        } else {
          return { done: true };
        }
      }
    };
  };
  return res;
}
function getContext() {
  const i3 = getCurrentInstance();
  if (!i3) {
    warn$1$1(`useContext() called without active instance.`);
  }
  return i3.setupContext || (i3.setupContext = createSetupContext(i3));
}
function normalizePropsOrEmits(props) {
  return isArray$3(props) ? props.reduce(
    (normalized, p2) => (normalized[p2] = null, normalized),
    {}
  ) : props;
}
function mergeModels(a4, b4) {
  if (!a4 || !b4)
    return a4 || b4;
  if (isArray$3(a4) && isArray$3(b4))
    return a4.concat(b4);
  return extend({}, normalizePropsOrEmits(a4), normalizePropsOrEmits(b4));
}
function createDuplicateChecker() {
  const cache2 = /* @__PURE__ */ Object.create(null);
  return (type, key) => {
    if (cache2[key]) {
      warn$1$1(`${type} property "${key}" is already defined in ${cache2[key]}.`);
    } else {
      cache2[key] = type;
    }
  };
}
let shouldCacheAccess = true;
function applyOptions(instance) {
  const options = resolveMergedOptions(instance);
  const publicThis = instance.proxy;
  const ctx = instance.ctx;
  shouldCacheAccess = false;
  if (options.beforeCreate) {
    callHook$1(options.beforeCreate, instance, "bc");
  }
  const {
    // state
    data: dataOptions,
    computed: computedOptions,
    methods,
    watch: watchOptions,
    provide: provideOptions,
    inject: injectOptions,
    // lifecycle
    created,
    beforeMount,
    mounted,
    beforeUpdate,
    updated,
    activated,
    deactivated,
    beforeDestroy,
    beforeUnmount,
    destroyed,
    unmounted,
    render: render2,
    renderTracked,
    renderTriggered,
    errorCaptured,
    serverPrefetch,
    // public API
    expose,
    inheritAttrs,
    // assets
    components,
    directives: directives2,
    filters
  } = options;
  const checkDuplicateProperties = createDuplicateChecker();
  {
    const [propsOptions] = instance.propsOptions;
    if (propsOptions) {
      for (const key in propsOptions) {
        checkDuplicateProperties("Props", key);
      }
    }
  }
  if (injectOptions) {
    resolveInjections(injectOptions, ctx, checkDuplicateProperties);
  }
  if (methods) {
    for (const key in methods) {
      const methodHandler = methods[key];
      if (isFunction$2(methodHandler)) {
        {
          Object.defineProperty(ctx, key, {
            value: methodHandler.bind(publicThis),
            configurable: true,
            enumerable: true,
            writable: true
          });
        }
        {
          checkDuplicateProperties("Methods", key);
        }
      } else {
        warn$1$1(
          `Method "${key}" has type "${typeof methodHandler}" in the component definition. Did you reference the function correctly?`
        );
      }
    }
  }
  if (dataOptions) {
    if (!isFunction$2(dataOptions)) {
      warn$1$1(
        `The data option must be a function. Plain object usage is no longer supported.`
      );
    }
    const data = dataOptions.call(publicThis, publicThis);
    if (isPromise$1(data)) {
      warn$1$1(
        `data() returned a Promise - note data() cannot be async; If you intend to perform data fetching before component renders, use async setup() + <Suspense>.`
      );
    }
    if (!isObject$3(data)) {
      warn$1$1(`data() should return an object.`);
    } else {
      instance.data = reactive(data);
      {
        for (const key in data) {
          checkDuplicateProperties("Data", key);
          if (!isReservedPrefix(key[0])) {
            Object.defineProperty(ctx, key, {
              configurable: true,
              enumerable: true,
              get: () => data[key],
              set: NOOP
            });
          }
        }
      }
    }
  }
  shouldCacheAccess = true;
  if (computedOptions) {
    for (const key in computedOptions) {
      const opt = computedOptions[key];
      const get2 = isFunction$2(opt) ? opt.bind(publicThis, publicThis) : isFunction$2(opt.get) ? opt.get.bind(publicThis, publicThis) : NOOP;
      if (get2 === NOOP) {
        warn$1$1(`Computed property "${key}" has no getter.`);
      }
      const set2 = !isFunction$2(opt) && isFunction$2(opt.set) ? opt.set.bind(publicThis) : () => {
        warn$1$1(
          `Write operation failed: computed property "${key}" is readonly.`
        );
      };
      const c3 = computed({
        get: get2,
        set: set2
      });
      Object.defineProperty(ctx, key, {
        enumerable: true,
        configurable: true,
        get: () => c3.value,
        set: (v2) => c3.value = v2
      });
      {
        checkDuplicateProperties("Computed", key);
      }
    }
  }
  if (watchOptions) {
    for (const key in watchOptions) {
      createWatcher(watchOptions[key], ctx, publicThis, key);
    }
  }
  if (provideOptions) {
    const provides = isFunction$2(provideOptions) ? provideOptions.call(publicThis) : provideOptions;
    Reflect.ownKeys(provides).forEach((key) => {
      provide(key, provides[key]);
    });
  }
  if (created) {
    callHook$1(created, instance, "c");
  }
  function registerLifecycleHook(register, hook) {
    if (isArray$3(hook)) {
      hook.forEach((_hook) => register(_hook.bind(publicThis)));
    } else if (hook) {
      register(hook.bind(publicThis));
    }
  }
  registerLifecycleHook(onBeforeMount, beforeMount);
  registerLifecycleHook(onMounted, mounted);
  registerLifecycleHook(onBeforeUpdate, beforeUpdate);
  registerLifecycleHook(onUpdated, updated);
  registerLifecycleHook(onActivated, activated);
  registerLifecycleHook(onDeactivated, deactivated);
  registerLifecycleHook(onErrorCaptured, errorCaptured);
  registerLifecycleHook(onRenderTracked, renderTracked);
  registerLifecycleHook(onRenderTriggered, renderTriggered);
  registerLifecycleHook(onBeforeUnmount, beforeUnmount);
  registerLifecycleHook(onUnmounted, unmounted);
  registerLifecycleHook(onServerPrefetch, serverPrefetch);
  if (isArray$3(expose)) {
    if (expose.length) {
      const exposed = instance.exposed || (instance.exposed = {});
      expose.forEach((key) => {
        Object.defineProperty(exposed, key, {
          get: () => publicThis[key],
          set: (val) => publicThis[key] = val
        });
      });
    } else if (!instance.exposed) {
      instance.exposed = {};
    }
  }
  if (render2 && instance.render === NOOP) {
    instance.render = render2;
  }
  if (inheritAttrs != null) {
    instance.inheritAttrs = inheritAttrs;
  }
  if (components)
    instance.components = components;
  if (directives2)
    instance.directives = directives2;
}
function resolveInjections(injectOptions, ctx, checkDuplicateProperties = NOOP) {
  if (isArray$3(injectOptions)) {
    injectOptions = normalizeInject(injectOptions);
  }
  for (const key in injectOptions) {
    const opt = injectOptions[key];
    let injected;
    if (isObject$3(opt)) {
      if ("default" in opt) {
        injected = inject(
          opt.from || key,
          opt.default,
          true
        );
      } else {
        injected = inject(opt.from || key);
      }
    } else {
      injected = inject(opt);
    }
    if (isRef(injected)) {
      Object.defineProperty(ctx, key, {
        enumerable: true,
        configurable: true,
        get: () => injected.value,
        set: (v2) => injected.value = v2
      });
    } else {
      ctx[key] = injected;
    }
    {
      checkDuplicateProperties("Inject", key);
    }
  }
}
function callHook$1(hook, instance, type) {
  callWithAsyncErrorHandling(
    isArray$3(hook) ? hook.map((h22) => h22.bind(instance.proxy)) : hook.bind(instance.proxy),
    instance,
    type
  );
}
function createWatcher(raw, ctx, publicThis, key) {
  const getter = key.includes(".") ? createPathGetter(publicThis, key) : () => publicThis[key];
  if (isString$2(raw)) {
    const handler = ctx[raw];
    if (isFunction$2(handler)) {
      watch(getter, handler);
    } else {
      warn$1$1(`Invalid watch handler specified by key "${raw}"`, handler);
    }
  } else if (isFunction$2(raw)) {
    watch(getter, raw.bind(publicThis));
  } else if (isObject$3(raw)) {
    if (isArray$3(raw)) {
      raw.forEach((r2) => createWatcher(r2, ctx, publicThis, key));
    } else {
      const handler = isFunction$2(raw.handler) ? raw.handler.bind(publicThis) : ctx[raw.handler];
      if (isFunction$2(handler)) {
        watch(getter, handler, raw);
      } else {
        warn$1$1(`Invalid watch handler specified by key "${raw.handler}"`, handler);
      }
    }
  } else {
    warn$1$1(`Invalid watch option: "${key}"`, raw);
  }
}
function resolveMergedOptions(instance) {
  const base = instance.type;
  const { mixins, extends: extendsOptions } = base;
  const {
    mixins: globalMixins,
    optionsCache: cache2,
    config: { optionMergeStrategies }
  } = instance.appContext;
  const cached = cache2.get(base);
  let resolved;
  if (cached) {
    resolved = cached;
  } else if (!globalMixins.length && !mixins && !extendsOptions) {
    {
      resolved = base;
    }
  } else {
    resolved = {};
    if (globalMixins.length) {
      globalMixins.forEach(
        (m4) => mergeOptions$2(resolved, m4, optionMergeStrategies, true)
      );
    }
    mergeOptions$2(resolved, base, optionMergeStrategies);
  }
  if (isObject$3(base)) {
    cache2.set(base, resolved);
  }
  return resolved;
}
function mergeOptions$2(to2, from, strats, asMixin = false) {
  const { mixins, extends: extendsOptions } = from;
  if (extendsOptions) {
    mergeOptions$2(to2, extendsOptions, strats, true);
  }
  if (mixins) {
    mixins.forEach(
      (m4) => mergeOptions$2(to2, m4, strats, true)
    );
  }
  for (const key in from) {
    if (asMixin && key === "expose") {
      warn$1$1(
        `"expose" option is ignored when declared in mixins or extends. It should only be declared in the base component itself.`
      );
    } else {
      const strat = internalOptionMergeStrats[key] || strats && strats[key];
      to2[key] = strat ? strat(to2[key], from[key]) : from[key];
    }
  }
  return to2;
}
const internalOptionMergeStrats = {
  data: mergeDataFn,
  props: mergeEmitsOrPropsOptions,
  emits: mergeEmitsOrPropsOptions,
  // objects
  methods: mergeObjectOptions,
  computed: mergeObjectOptions,
  // lifecycle
  beforeCreate: mergeAsArray,
  created: mergeAsArray,
  beforeMount: mergeAsArray,
  mounted: mergeAsArray,
  beforeUpdate: mergeAsArray,
  updated: mergeAsArray,
  beforeDestroy: mergeAsArray,
  beforeUnmount: mergeAsArray,
  destroyed: mergeAsArray,
  unmounted: mergeAsArray,
  activated: mergeAsArray,
  deactivated: mergeAsArray,
  errorCaptured: mergeAsArray,
  serverPrefetch: mergeAsArray,
  // assets
  components: mergeObjectOptions,
  directives: mergeObjectOptions,
  // watch
  watch: mergeWatchOptions,
  // provide / inject
  provide: mergeDataFn,
  inject: mergeInject
};
function mergeDataFn(to2, from) {
  if (!from) {
    return to2;
  }
  if (!to2) {
    return from;
  }
  return function mergedDataFn() {
    return extend(
      isFunction$2(to2) ? to2.call(this, this) : to2,
      isFunction$2(from) ? from.call(this, this) : from
    );
  };
}
function mergeInject(to2, from) {
  return mergeObjectOptions(normalizeInject(to2), normalizeInject(from));
}
function normalizeInject(raw) {
  if (isArray$3(raw)) {
    const res = {};
    for (let i3 = 0; i3 < raw.length; i3++) {
      res[raw[i3]] = raw[i3];
    }
    return res;
  }
  return raw;
}
function mergeAsArray(to2, from) {
  return to2 ? [...new Set([].concat(to2, from))] : from;
}
function mergeObjectOptions(to2, from) {
  return to2 ? extend(/* @__PURE__ */ Object.create(null), to2, from) : from;
}
function mergeEmitsOrPropsOptions(to2, from) {
  if (to2) {
    if (isArray$3(to2) && isArray$3(from)) {
      return [.../* @__PURE__ */ new Set([...to2, ...from])];
    }
    return extend(
      /* @__PURE__ */ Object.create(null),
      normalizePropsOrEmits(to2),
      normalizePropsOrEmits(from != null ? from : {})
    );
  } else {
    return from;
  }
}
function mergeWatchOptions(to2, from) {
  if (!to2)
    return from;
  if (!from)
    return to2;
  const merged = extend(/* @__PURE__ */ Object.create(null), to2);
  for (const key in from) {
    merged[key] = mergeAsArray(to2[key], from[key]);
  }
  return merged;
}
function createAppContext() {
  return {
    app: null,
    config: {
      isNativeTag: NO,
      performance: false,
      globalProperties: {},
      optionMergeStrategies: {},
      errorHandler: void 0,
      warnHandler: void 0,
      compilerOptions: {}
    },
    mixins: [],
    components: {},
    directives: {},
    provides: /* @__PURE__ */ Object.create(null),
    optionsCache: /* @__PURE__ */ new WeakMap(),
    propsCache: /* @__PURE__ */ new WeakMap(),
    emitsCache: /* @__PURE__ */ new WeakMap()
  };
}
let uid$1 = 0;
function createAppAPI(render2, hydrate) {
  return function createApp2(rootComponent, rootProps = null) {
    if (!isFunction$2(rootComponent)) {
      rootComponent = extend({}, rootComponent);
    }
    if (rootProps != null && !isObject$3(rootProps)) {
      warn$1$1(`root props passed to app.mount() must be an object.`);
      rootProps = null;
    }
    const context = createAppContext();
    const installedPlugins = /* @__PURE__ */ new WeakSet();
    let isMounted = false;
    const app = context.app = {
      _uid: uid$1++,
      _component: rootComponent,
      _props: rootProps,
      _container: null,
      _context: context,
      _instance: null,
      version: version$1,
      get config() {
        return context.config;
      },
      set config(v2) {
        {
          warn$1$1(
            `app.config cannot be replaced. Modify individual options instead.`
          );
        }
      },
      use(plugin2, ...options) {
        if (installedPlugins.has(plugin2)) {
          warn$1$1(`Plugin has already been applied to target app.`);
        } else if (plugin2 && isFunction$2(plugin2.install)) {
          installedPlugins.add(plugin2);
          plugin2.install(app, ...options);
        } else if (isFunction$2(plugin2)) {
          installedPlugins.add(plugin2);
          plugin2(app, ...options);
        } else {
          warn$1$1(
            `A plugin must either be a function or an object with an "install" function.`
          );
        }
        return app;
      },
      mixin(mixin) {
        {
          if (!context.mixins.includes(mixin)) {
            context.mixins.push(mixin);
          } else {
            warn$1$1(
              "Mixin has already been applied to target app" + (mixin.name ? `: ${mixin.name}` : "")
            );
          }
        }
        return app;
      },
      component(name, component) {
        {
          validateComponentName(name, context.config);
        }
        if (!component) {
          return context.components[name];
        }
        if (context.components[name]) {
          warn$1$1(`Component "${name}" has already been registered in target app.`);
        }
        context.components[name] = component;
        return app;
      },
      directive(name, directive) {
        {
          validateDirectiveName(name);
        }
        if (!directive) {
          return context.directives[name];
        }
        if (context.directives[name]) {
          warn$1$1(`Directive "${name}" has already been registered in target app.`);
        }
        context.directives[name] = directive;
        return app;
      },
      mount(rootContainer, isHydrate, namespace) {
        if (!isMounted) {
          if (rootContainer.__vue_app__) {
            warn$1$1(
              `There is already an app instance mounted on the host container.
 If you want to mount another app on the same host container, you need to unmount the previous app by calling \`app.unmount()\` first.`
            );
          }
          const vnode = createVNode(rootComponent, rootProps);
          vnode.appContext = context;
          if (namespace === true) {
            namespace = "svg";
          } else if (namespace === false) {
            namespace = void 0;
          }
          {
            context.reload = () => {
              render2(
                cloneVNode(vnode),
                rootContainer,
                namespace
              );
            };
          }
          if (isHydrate && hydrate) {
            hydrate(vnode, rootContainer);
          } else {
            render2(vnode, rootContainer, namespace);
          }
          isMounted = true;
          app._container = rootContainer;
          rootContainer.__vue_app__ = app;
          {
            app._instance = vnode.component;
            devtoolsInitApp(app, version$1);
          }
          return getExposeProxy(vnode.component) || vnode.component.proxy;
        } else {
          warn$1$1(
            `App has already been mounted.
If you want to remount the same app, move your app creation logic into a factory function and create fresh app instances for each mount - e.g. \`const createMyApp = () => createApp(App)\``
          );
        }
      },
      unmount() {
        if (isMounted) {
          render2(null, app._container);
          {
            app._instance = null;
            devtoolsUnmountApp(app);
          }
          delete app._container.__vue_app__;
        } else {
          warn$1$1(`Cannot unmount an app that is not mounted.`);
        }
      },
      provide(key, value) {
        if (key in context.provides) {
          warn$1$1(
            `App already provides property with key "${String(key)}". It will be overwritten with the new value.`
          );
        }
        context.provides[key] = value;
        return app;
      },
      runWithContext(fn2) {
        currentApp = app;
        try {
          return fn2();
        } finally {
          currentApp = null;
        }
      }
    };
    return app;
  };
}
let currentApp = null;
function provide(key, value) {
  if (!currentInstance) {
    {
      warn$1$1(`provide() can only be used inside setup().`);
    }
  } else {
    let provides = currentInstance.provides;
    const parentProvides = currentInstance.parent && currentInstance.parent.provides;
    if (parentProvides === provides) {
      provides = currentInstance.provides = Object.create(parentProvides);
    }
    provides[key] = value;
  }
}
function inject(key, defaultValue, treatDefaultAsFactory = false) {
  const instance = currentInstance || currentRenderingInstance;
  if (instance || currentApp) {
    const provides = instance ? instance.parent == null ? instance.vnode.appContext && instance.vnode.appContext.provides : instance.parent.provides : currentApp._context.provides;
    if (provides && key in provides) {
      return provides[key];
    } else if (arguments.length > 1) {
      return treatDefaultAsFactory && isFunction$2(defaultValue) ? defaultValue.call(instance && instance.proxy) : defaultValue;
    } else {
      warn$1$1(`injection "${String(key)}" not found.`);
    }
  } else {
    warn$1$1(`inject() can only be used inside setup() or functional components.`);
  }
}
function initProps(instance, rawProps, isStateful, isSSR = false) {
  const props = {};
  const attrs = {};
  def(attrs, InternalObjectKey, 1);
  instance.propsDefaults = /* @__PURE__ */ Object.create(null);
  setFullProps(instance, rawProps, props, attrs);
  for (const key in instance.propsOptions[0]) {
    if (!(key in props)) {
      props[key] = void 0;
    }
  }
  {
    validateProps(rawProps || {}, props, instance);
  }
  if (isStateful) {
    instance.props = isSSR ? props : shallowReactive(props);
  } else {
    if (!instance.type.props) {
      instance.props = attrs;
    } else {
      instance.props = props;
    }
  }
  instance.attrs = attrs;
}
function isInHmrContext(instance) {
  while (instance) {
    if (instance.type.__hmrId)
      return true;
    instance = instance.parent;
  }
}
function updateProps(instance, rawProps, rawPrevProps, optimized) {
  const {
    props,
    attrs,
    vnode: { patchFlag }
  } = instance;
  const rawCurrentProps = toRaw(props);
  const [options] = instance.propsOptions;
  let hasAttrsChanged = false;
  if (
    // always force full diff in dev
    // - #1942 if hmr is enabled with sfc component
    // - vite#872 non-sfc component used by sfc component
    !isInHmrContext(instance) && (optimized || patchFlag > 0) && !(patchFlag & 16)
  ) {
    if (patchFlag & 8) {
      const propsToUpdate = instance.vnode.dynamicProps;
      for (let i3 = 0; i3 < propsToUpdate.length; i3++) {
        let key = propsToUpdate[i3];
        if (isEmitListener(instance.emitsOptions, key)) {
          continue;
        }
        const value = rawProps[key];
        if (options) {
          if (hasOwn$1(attrs, key)) {
            if (value !== attrs[key]) {
              attrs[key] = value;
              hasAttrsChanged = true;
            }
          } else {
            const camelizedKey = camelize(key);
            props[camelizedKey] = resolvePropValue(
              options,
              rawCurrentProps,
              camelizedKey,
              value,
              instance,
              false
            );
          }
        } else {
          if (value !== attrs[key]) {
            attrs[key] = value;
            hasAttrsChanged = true;
          }
        }
      }
    }
  } else {
    if (setFullProps(instance, rawProps, props, attrs)) {
      hasAttrsChanged = true;
    }
    let kebabKey;
    for (const key in rawCurrentProps) {
      if (!rawProps || // for camelCase
      !hasOwn$1(rawProps, key) && // it's possible the original props was passed in as kebab-case
      // and converted to camelCase (#955)
      ((kebabKey = hyphenate(key)) === key || !hasOwn$1(rawProps, kebabKey))) {
        if (options) {
          if (rawPrevProps && // for camelCase
          (rawPrevProps[key] !== void 0 || // for kebab-case
          rawPrevProps[kebabKey] !== void 0)) {
            props[key] = resolvePropValue(
              options,
              rawCurrentProps,
              key,
              void 0,
              instance,
              true
            );
          }
        } else {
          delete props[key];
        }
      }
    }
    if (attrs !== rawCurrentProps) {
      for (const key in attrs) {
        if (!rawProps || !hasOwn$1(rawProps, key) && true) {
          delete attrs[key];
          hasAttrsChanged = true;
        }
      }
    }
  }
  if (hasAttrsChanged) {
    trigger(instance, "set", "$attrs");
  }
  {
    validateProps(rawProps || {}, props, instance);
  }
}
function setFullProps(instance, rawProps, props, attrs) {
  const [options, needCastKeys] = instance.propsOptions;
  let hasAttrsChanged = false;
  let rawCastValues;
  if (rawProps) {
    for (let key in rawProps) {
      if (isReservedProp(key)) {
        continue;
      }
      const value = rawProps[key];
      let camelKey;
      if (options && hasOwn$1(options, camelKey = camelize(key))) {
        if (!needCastKeys || !needCastKeys.includes(camelKey)) {
          props[camelKey] = value;
        } else {
          (rawCastValues || (rawCastValues = {}))[camelKey] = value;
        }
      } else if (!isEmitListener(instance.emitsOptions, key)) {
        if (!(key in attrs) || value !== attrs[key]) {
          attrs[key] = value;
          hasAttrsChanged = true;
        }
      }
    }
  }
  if (needCastKeys) {
    const rawCurrentProps = toRaw(props);
    const castValues = rawCastValues || EMPTY_OBJ;
    for (let i3 = 0; i3 < needCastKeys.length; i3++) {
      const key = needCastKeys[i3];
      props[key] = resolvePropValue(
        options,
        rawCurrentProps,
        key,
        castValues[key],
        instance,
        !hasOwn$1(castValues, key)
      );
    }
  }
  return hasAttrsChanged;
}
function resolvePropValue(options, props, key, value, instance, isAbsent) {
  const opt = options[key];
  if (opt != null) {
    const hasDefault = hasOwn$1(opt, "default");
    if (hasDefault && value === void 0) {
      const defaultValue = opt.default;
      if (opt.type !== Function && !opt.skipFactory && isFunction$2(defaultValue)) {
        const { propsDefaults } = instance;
        if (key in propsDefaults) {
          value = propsDefaults[key];
        } else {
          const reset = setCurrentInstance(instance);
          value = propsDefaults[key] = defaultValue.call(
            null,
            props
          );
          reset();
        }
      } else {
        value = defaultValue;
      }
    }
    if (opt[
      0
      /* shouldCast */
    ]) {
      if (isAbsent && !hasDefault) {
        value = false;
      } else if (opt[
        1
        /* shouldCastTrue */
      ] && (value === "" || value === hyphenate(key))) {
        value = true;
      }
    }
  }
  return value;
}
function normalizePropsOptions(comp, appContext, asMixin = false) {
  const cache2 = appContext.propsCache;
  const cached = cache2.get(comp);
  if (cached) {
    return cached;
  }
  const raw = comp.props;
  const normalized = {};
  const needCastKeys = [];
  let hasExtends = false;
  if (!isFunction$2(comp)) {
    const extendProps = (raw2) => {
      hasExtends = true;
      const [props, keys] = normalizePropsOptions(raw2, appContext, true);
      extend(normalized, props);
      if (keys)
        needCastKeys.push(...keys);
    };
    if (!asMixin && appContext.mixins.length) {
      appContext.mixins.forEach(extendProps);
    }
    if (comp.extends) {
      extendProps(comp.extends);
    }
    if (comp.mixins) {
      comp.mixins.forEach(extendProps);
    }
  }
  if (!raw && !hasExtends) {
    if (isObject$3(comp)) {
      cache2.set(comp, EMPTY_ARR);
    }
    return EMPTY_ARR;
  }
  if (isArray$3(raw)) {
    for (let i3 = 0; i3 < raw.length; i3++) {
      if (!isString$2(raw[i3])) {
        warn$1$1(`props must be strings when using array syntax.`, raw[i3]);
      }
      const normalizedKey = camelize(raw[i3]);
      if (validatePropName(normalizedKey)) {
        normalized[normalizedKey] = EMPTY_OBJ;
      }
    }
  } else if (raw) {
    if (!isObject$3(raw)) {
      warn$1$1(`invalid props options`, raw);
    }
    for (const key in raw) {
      const normalizedKey = camelize(key);
      if (validatePropName(normalizedKey)) {
        const opt = raw[key];
        const prop = normalized[normalizedKey] = isArray$3(opt) || isFunction$2(opt) ? { type: opt } : extend({}, opt);
        if (prop) {
          const booleanIndex = getTypeIndex(Boolean, prop.type);
          const stringIndex = getTypeIndex(String, prop.type);
          prop[
            0
            /* shouldCast */
          ] = booleanIndex > -1;
          prop[
            1
            /* shouldCastTrue */
          ] = stringIndex < 0 || booleanIndex < stringIndex;
          if (booleanIndex > -1 || hasOwn$1(prop, "default")) {
            needCastKeys.push(normalizedKey);
          }
        }
      }
    }
  }
  const res = [normalized, needCastKeys];
  if (isObject$3(comp)) {
    cache2.set(comp, res);
  }
  return res;
}
function validatePropName(key) {
  if (key[0] !== "$") {
    return true;
  } else {
    warn$1$1(`Invalid prop name: "${key}" is a reserved property.`);
  }
  return false;
}
function getType(ctor) {
  const match2 = ctor && ctor.toString().match(/^\s*(function|class) (\w+)/);
  return match2 ? match2[2] : ctor === null ? "null" : "";
}
function isSameType(a4, b4) {
  return getType(a4) === getType(b4);
}
function getTypeIndex(type, expectedTypes) {
  if (isArray$3(expectedTypes)) {
    return expectedTypes.findIndex((t3) => isSameType(t3, type));
  } else if (isFunction$2(expectedTypes)) {
    return isSameType(expectedTypes, type) ? 0 : -1;
  }
  return -1;
}
function validateProps(rawProps, props, instance) {
  const resolvedValues = toRaw(props);
  const options = instance.propsOptions[0];
  for (const key in options) {
    let opt = options[key];
    if (opt == null)
      continue;
    validateProp(
      key,
      resolvedValues[key],
      opt,
      shallowReadonly(resolvedValues),
      !hasOwn$1(rawProps, key) && !hasOwn$1(rawProps, hyphenate(key))
    );
  }
}
function validateProp(name, value, prop, props, isAbsent) {
  const { type, required, validator, skipCheck } = prop;
  if (required && isAbsent) {
    warn$1$1('Missing required prop: "' + name + '"');
    return;
  }
  if (value == null && !required) {
    return;
  }
  if (type != null && type !== true && !skipCheck) {
    let isValid2 = false;
    const types = isArray$3(type) ? type : [type];
    const expectedTypes = [];
    for (let i3 = 0; i3 < types.length && !isValid2; i3++) {
      const { valid, expectedType } = assertType(value, types[i3]);
      expectedTypes.push(expectedType || "");
      isValid2 = valid;
    }
    if (!isValid2) {
      warn$1$1(getInvalidTypeMessage(name, value, expectedTypes));
      return;
    }
  }
  if (validator && !validator(value, props)) {
    warn$1$1('Invalid prop: custom validator check failed for prop "' + name + '".');
  }
}
const isSimpleType = /* @__PURE__ */ makeMap(
  "String,Number,Boolean,Function,Symbol,BigInt"
);
function assertType(value, type) {
  let valid;
  const expectedType = getType(type);
  if (isSimpleType(expectedType)) {
    const t3 = typeof value;
    valid = t3 === expectedType.toLowerCase();
    if (!valid && t3 === "object") {
      valid = value instanceof type;
    }
  } else if (expectedType === "Object") {
    valid = isObject$3(value);
  } else if (expectedType === "Array") {
    valid = isArray$3(value);
  } else if (expectedType === "null") {
    valid = value === null;
  } else {
    valid = value instanceof type;
  }
  return {
    valid,
    expectedType
  };
}
function getInvalidTypeMessage(name, value, expectedTypes) {
  if (expectedTypes.length === 0) {
    return `Prop type [] for prop "${name}" won't match anything. Did you mean to use type Array instead?`;
  }
  let message = `Invalid prop: type check failed for prop "${name}". Expected ${expectedTypes.map(capitalize$1).join(" | ")}`;
  const expectedType = expectedTypes[0];
  const receivedType = toRawType(value);
  const expectedValue = styleValue(value, expectedType);
  const receivedValue = styleValue(value, receivedType);
  if (expectedTypes.length === 1 && isExplicable(expectedType) && !isBoolean$1(expectedType, receivedType)) {
    message += ` with value ${expectedValue}`;
  }
  message += `, got ${receivedType} `;
  if (isExplicable(receivedType)) {
    message += `with value ${receivedValue}.`;
  }
  return message;
}
function styleValue(value, type) {
  if (type === "String") {
    return `"${value}"`;
  } else if (type === "Number") {
    return `${Number(value)}`;
  } else {
    return `${value}`;
  }
}
function isExplicable(type) {
  const explicitTypes = ["string", "number", "boolean"];
  return explicitTypes.some((elem) => type.toLowerCase() === elem);
}
function isBoolean$1(...args) {
  return args.some((elem) => elem.toLowerCase() === "boolean");
}
const isInternalKey = (key) => key[0] === "_" || key === "$stable";
const normalizeSlotValue = (value) => isArray$3(value) ? value.map(normalizeVNode) : [normalizeVNode(value)];
const normalizeSlot$2 = (key, rawSlot, ctx) => {
  if (rawSlot._n) {
    return rawSlot;
  }
  const normalized = withCtx((...args) => {
    if (currentInstance) {
      warn$1$1(
        `Slot "${key}" invoked outside of the render function: this will not track dependencies used in the slot. Invoke the slot function inside the render function instead.`
      );
    }
    return normalizeSlotValue(rawSlot(...args));
  }, ctx);
  normalized._c = false;
  return normalized;
};
const normalizeObjectSlots = (rawSlots, slots, instance) => {
  const ctx = rawSlots._ctx;
  for (const key in rawSlots) {
    if (isInternalKey(key))
      continue;
    const value = rawSlots[key];
    if (isFunction$2(value)) {
      slots[key] = normalizeSlot$2(key, value, ctx);
    } else if (value != null) {
      {
        warn$1$1(
          `Non-function value encountered for slot "${key}". Prefer function slots for better performance.`
        );
      }
      const normalized = normalizeSlotValue(value);
      slots[key] = () => normalized;
    }
  }
};
const normalizeVNodeSlots = (instance, children) => {
  if (!isKeepAlive(instance.vnode) && true) {
    warn$1$1(
      `Non-function value encountered for default slot. Prefer function slots for better performance.`
    );
  }
  const normalized = normalizeSlotValue(children);
  instance.slots.default = () => normalized;
};
const initSlots = (instance, children) => {
  if (instance.vnode.shapeFlag & 32) {
    const type = children._;
    if (type) {
      instance.slots = toRaw(children);
      def(children, "_", type);
    } else {
      normalizeObjectSlots(
        children,
        instance.slots = {}
      );
    }
  } else {
    instance.slots = {};
    if (children) {
      normalizeVNodeSlots(instance, children);
    }
  }
  def(instance.slots, InternalObjectKey, 1);
};
const updateSlots = (instance, children, optimized) => {
  const { vnode, slots } = instance;
  let needDeletionCheck = true;
  let deletionComparisonTarget = EMPTY_OBJ;
  if (vnode.shapeFlag & 32) {
    const type = children._;
    if (type) {
      if (isHmrUpdating) {
        extend(slots, children);
        trigger(instance, "set", "$slots");
      } else if (optimized && type === 1) {
        needDeletionCheck = false;
      } else {
        extend(slots, children);
        if (!optimized && type === 1) {
          delete slots._;
        }
      }
    } else {
      needDeletionCheck = !children.$stable;
      normalizeObjectSlots(children, slots);
    }
    deletionComparisonTarget = children;
  } else if (children) {
    normalizeVNodeSlots(instance, children);
    deletionComparisonTarget = { default: 1 };
  }
  if (needDeletionCheck) {
    for (const key in slots) {
      if (!isInternalKey(key) && deletionComparisonTarget[key] == null) {
        delete slots[key];
      }
    }
  }
};
function setRef(rawRef, oldRawRef, parentSuspense, vnode, isUnmount = false) {
  if (isArray$3(rawRef)) {
    rawRef.forEach(
      (r2, i3) => setRef(
        r2,
        oldRawRef && (isArray$3(oldRawRef) ? oldRawRef[i3] : oldRawRef),
        parentSuspense,
        vnode,
        isUnmount
      )
    );
    return;
  }
  if (isAsyncWrapper(vnode) && !isUnmount) {
    return;
  }
  const refValue = vnode.shapeFlag & 4 ? getExposeProxy(vnode.component) || vnode.component.proxy : vnode.el;
  const value = isUnmount ? null : refValue;
  const { i: owner, r: ref3 } = rawRef;
  if (!owner) {
    warn$1$1(
      `Missing ref owner context. ref cannot be used on hoisted vnodes. A vnode with ref must be created inside the render function.`
    );
    return;
  }
  const oldRef = oldRawRef && oldRawRef.r;
  const refs = owner.refs === EMPTY_OBJ ? owner.refs = {} : owner.refs;
  const setupState = owner.setupState;
  if (oldRef != null && oldRef !== ref3) {
    if (isString$2(oldRef)) {
      refs[oldRef] = null;
      if (hasOwn$1(setupState, oldRef)) {
        setupState[oldRef] = null;
      }
    } else if (isRef(oldRef)) {
      oldRef.value = null;
    }
  }
  if (isFunction$2(ref3)) {
    callWithErrorHandling(ref3, owner, 12, [value, refs]);
  } else {
    const _isString = isString$2(ref3);
    const _isRef = isRef(ref3);
    if (_isString || _isRef) {
      const doSet = () => {
        if (rawRef.f) {
          const existing = _isString ? hasOwn$1(setupState, ref3) ? setupState[ref3] : refs[ref3] : ref3.value;
          if (isUnmount) {
            isArray$3(existing) && remove(existing, refValue);
          } else {
            if (!isArray$3(existing)) {
              if (_isString) {
                refs[ref3] = [refValue];
                if (hasOwn$1(setupState, ref3)) {
                  setupState[ref3] = refs[ref3];
                }
              } else {
                ref3.value = [refValue];
                if (rawRef.k)
                  refs[rawRef.k] = ref3.value;
              }
            } else if (!existing.includes(refValue)) {
              existing.push(refValue);
            }
          }
        } else if (_isString) {
          refs[ref3] = value;
          if (hasOwn$1(setupState, ref3)) {
            setupState[ref3] = value;
          }
        } else if (_isRef) {
          ref3.value = value;
          if (rawRef.k)
            refs[rawRef.k] = value;
        } else {
          warn$1$1("Invalid template ref type:", ref3, `(${typeof ref3})`);
        }
      };
      if (value) {
        doSet.id = -1;
        queuePostRenderEffect(doSet, parentSuspense);
      } else {
        doSet();
      }
    } else {
      warn$1$1("Invalid template ref type:", ref3, `(${typeof ref3})`);
    }
  }
}
let supported$1;
let perf$1;
function startMeasure(instance, type) {
  if (instance.appContext.config.performance && isSupported()) {
    perf$1.mark(`vue-${type}-${instance.uid}`);
  }
  {
    devtoolsPerfStart(instance, type, isSupported() ? perf$1.now() : Date.now());
  }
}
function endMeasure(instance, type) {
  if (instance.appContext.config.performance && isSupported()) {
    const startTag = `vue-${type}-${instance.uid}`;
    const endTag = startTag + `:end`;
    perf$1.mark(endTag);
    perf$1.measure(
      `<${formatComponentName(instance, instance.type)}> ${type}`,
      startTag,
      endTag
    );
    perf$1.clearMarks(startTag);
    perf$1.clearMarks(endTag);
  }
  {
    devtoolsPerfEnd(instance, type, isSupported() ? perf$1.now() : Date.now());
  }
}
function isSupported() {
  if (supported$1 !== void 0) {
    return supported$1;
  }
  if (typeof window !== "undefined" && window.performance) {
    supported$1 = true;
    perf$1 = window.performance;
  } else {
    supported$1 = false;
  }
  return supported$1;
}
function initFeatureFlags$2() {
  const needWarn = [];
  if (needWarn.length) {
    const multi = needWarn.length > 1;
    console.warn(
      `Feature flag${multi ? `s` : ``} ${needWarn.join(", ")} ${multi ? `are` : `is`} not explicitly defined. You are running the esm-bundler build of Vue, which expects these compile-time feature flags to be globally injected via the bundler config in order to get better tree-shaking in the production bundle.

For more details, see https://link.vuejs.org/feature-flags.`
    );
  }
}
const queuePostRenderEffect = queueEffectWithSuspense;
function createRenderer(options) {
  return baseCreateRenderer(options);
}
function baseCreateRenderer(options, createHydrationFns) {
  {
    initFeatureFlags$2();
  }
  const target = getGlobalThis$1();
  target.__VUE__ = true;
  {
    setDevtoolsHook$1(target.__VUE_DEVTOOLS_GLOBAL_HOOK__, target);
  }
  const {
    insert: hostInsert,
    remove: hostRemove,
    patchProp: hostPatchProp,
    createElement: hostCreateElement,
    createText: hostCreateText,
    createComment: hostCreateComment,
    setText: hostSetText,
    setElementText: hostSetElementText,
    parentNode: hostParentNode,
    nextSibling: hostNextSibling,
    setScopeId: hostSetScopeId = NOOP,
    insertStaticContent: hostInsertStaticContent
  } = options;
  const patch = (n1, n2, container, anchor = null, parentComponent = null, parentSuspense = null, namespace = void 0, slotScopeIds = null, optimized = isHmrUpdating ? false : !!n2.dynamicChildren) => {
    if (n1 === n2) {
      return;
    }
    if (n1 && !isSameVNodeType(n1, n2)) {
      anchor = getNextHostNode(n1);
      unmount(n1, parentComponent, parentSuspense, true);
      n1 = null;
    }
    if (n2.patchFlag === -2) {
      optimized = false;
      n2.dynamicChildren = null;
    }
    const { type, ref: ref3, shapeFlag } = n2;
    switch (type) {
      case Text:
        processText(n1, n2, container, anchor);
        break;
      case Comment$1:
        processCommentNode(n1, n2, container, anchor);
        break;
      case Static:
        if (n1 == null) {
          mountStaticNode(n2, container, anchor, namespace);
        } else {
          patchStaticNode(n1, n2, container, namespace);
        }
        break;
      case Fragment:
        processFragment(
          n1,
          n2,
          container,
          anchor,
          parentComponent,
          parentSuspense,
          namespace,
          slotScopeIds,
          optimized
        );
        break;
      default:
        if (shapeFlag & 1) {
          processElement(
            n1,
            n2,
            container,
            anchor,
            parentComponent,
            parentSuspense,
            namespace,
            slotScopeIds,
            optimized
          );
        } else if (shapeFlag & 6) {
          processComponent(
            n1,
            n2,
            container,
            anchor,
            parentComponent,
            parentSuspense,
            namespace,
            slotScopeIds,
            optimized
          );
        } else if (shapeFlag & 64) {
          type.process(
            n1,
            n2,
            container,
            anchor,
            parentComponent,
            parentSuspense,
            namespace,
            slotScopeIds,
            optimized,
            internals
          );
        } else if (shapeFlag & 128) {
          type.process(
            n1,
            n2,
            container,
            anchor,
            parentComponent,
            parentSuspense,
            namespace,
            slotScopeIds,
            optimized,
            internals
          );
        } else {
          warn$1$1("Invalid VNode type:", type, `(${typeof type})`);
        }
    }
    if (ref3 != null && parentComponent) {
      setRef(ref3, n1 && n1.ref, parentSuspense, n2 || n1, !n2);
    }
  };
  const processText = (n1, n2, container, anchor) => {
    if (n1 == null) {
      hostInsert(
        n2.el = hostCreateText(n2.children),
        container,
        anchor
      );
    } else {
      const el3 = n2.el = n1.el;
      if (n2.children !== n1.children) {
        hostSetText(el3, n2.children);
      }
    }
  };
  const processCommentNode = (n1, n2, container, anchor) => {
    if (n1 == null) {
      hostInsert(
        n2.el = hostCreateComment(n2.children || ""),
        container,
        anchor
      );
    } else {
      n2.el = n1.el;
    }
  };
  const mountStaticNode = (n2, container, anchor, namespace) => {
    [n2.el, n2.anchor] = hostInsertStaticContent(
      n2.children,
      container,
      anchor,
      namespace,
      n2.el,
      n2.anchor
    );
  };
  const patchStaticNode = (n1, n2, container, namespace) => {
    if (n2.children !== n1.children) {
      const anchor = hostNextSibling(n1.anchor);
      removeStaticNode(n1);
      [n2.el, n2.anchor] = hostInsertStaticContent(
        n2.children,
        container,
        anchor,
        namespace
      );
    } else {
      n2.el = n1.el;
      n2.anchor = n1.anchor;
    }
  };
  const moveStaticNode = ({ el: el3, anchor }, container, nextSibling) => {
    let next;
    while (el3 && el3 !== anchor) {
      next = hostNextSibling(el3);
      hostInsert(el3, container, nextSibling);
      el3 = next;
    }
    hostInsert(anchor, container, nextSibling);
  };
  const removeStaticNode = ({ el: el3, anchor }) => {
    let next;
    while (el3 && el3 !== anchor) {
      next = hostNextSibling(el3);
      hostRemove(el3);
      el3 = next;
    }
    hostRemove(anchor);
  };
  const processElement = (n1, n2, container, anchor, parentComponent, parentSuspense, namespace, slotScopeIds, optimized) => {
    if (n2.type === "svg") {
      namespace = "svg";
    } else if (n2.type === "math") {
      namespace = "mathml";
    }
    if (n1 == null) {
      mountElement(
        n2,
        container,
        anchor,
        parentComponent,
        parentSuspense,
        namespace,
        slotScopeIds,
        optimized
      );
    } else {
      patchElement(
        n1,
        n2,
        parentComponent,
        parentSuspense,
        namespace,
        slotScopeIds,
        optimized
      );
    }
  };
  const mountElement = (vnode, container, anchor, parentComponent, parentSuspense, namespace, slotScopeIds, optimized) => {
    let el3;
    let vnodeHook;
    const { props, shapeFlag, transition, dirs } = vnode;
    el3 = vnode.el = hostCreateElement(
      vnode.type,
      namespace,
      props && props.is,
      props
    );
    if (shapeFlag & 8) {
      hostSetElementText(el3, vnode.children);
    } else if (shapeFlag & 16) {
      mountChildren(
        vnode.children,
        el3,
        null,
        parentComponent,
        parentSuspense,
        resolveChildrenNamespace(vnode, namespace),
        slotScopeIds,
        optimized
      );
    }
    if (dirs) {
      invokeDirectiveHook(vnode, null, parentComponent, "created");
    }
    setScopeId(el3, vnode, vnode.scopeId, slotScopeIds, parentComponent);
    if (props) {
      for (const key in props) {
        if (key !== "value" && !isReservedProp(key)) {
          hostPatchProp(
            el3,
            key,
            null,
            props[key],
            namespace,
            vnode.children,
            parentComponent,
            parentSuspense,
            unmountChildren
          );
        }
      }
      if ("value" in props) {
        hostPatchProp(el3, "value", null, props.value, namespace);
      }
      if (vnodeHook = props.onVnodeBeforeMount) {
        invokeVNodeHook(vnodeHook, parentComponent, vnode);
      }
    }
    {
      Object.defineProperty(el3, "__vnode", {
        value: vnode,
        enumerable: false
      });
      Object.defineProperty(el3, "__vueParentComponent", {
        value: parentComponent,
        enumerable: false
      });
    }
    if (dirs) {
      invokeDirectiveHook(vnode, null, parentComponent, "beforeMount");
    }
    const needCallTransitionHooks = needTransition(parentSuspense, transition);
    if (needCallTransitionHooks) {
      transition.beforeEnter(el3);
    }
    hostInsert(el3, container, anchor);
    if ((vnodeHook = props && props.onVnodeMounted) || needCallTransitionHooks || dirs) {
      queuePostRenderEffect(() => {
        vnodeHook && invokeVNodeHook(vnodeHook, parentComponent, vnode);
        needCallTransitionHooks && transition.enter(el3);
        dirs && invokeDirectiveHook(vnode, null, parentComponent, "mounted");
      }, parentSuspense);
    }
  };
  const setScopeId = (el3, vnode, scopeId, slotScopeIds, parentComponent) => {
    if (scopeId) {
      hostSetScopeId(el3, scopeId);
    }
    if (slotScopeIds) {
      for (let i3 = 0; i3 < slotScopeIds.length; i3++) {
        hostSetScopeId(el3, slotScopeIds[i3]);
      }
    }
    if (parentComponent) {
      let subTree = parentComponent.subTree;
      if (subTree.patchFlag > 0 && subTree.patchFlag & 2048) {
        subTree = filterSingleRoot(subTree.children) || subTree;
      }
      if (vnode === subTree) {
        const parentVNode = parentComponent.vnode;
        setScopeId(
          el3,
          parentVNode,
          parentVNode.scopeId,
          parentVNode.slotScopeIds,
          parentComponent.parent
        );
      }
    }
  };
  const mountChildren = (children, container, anchor, parentComponent, parentSuspense, namespace, slotScopeIds, optimized, start = 0) => {
    for (let i3 = start; i3 < children.length; i3++) {
      const child = children[i3] = optimized ? cloneIfMounted(children[i3]) : normalizeVNode(children[i3]);
      patch(
        null,
        child,
        container,
        anchor,
        parentComponent,
        parentSuspense,
        namespace,
        slotScopeIds,
        optimized
      );
    }
  };
  const patchElement = (n1, n2, parentComponent, parentSuspense, namespace, slotScopeIds, optimized) => {
    const el3 = n2.el = n1.el;
    let { patchFlag, dynamicChildren, dirs } = n2;
    patchFlag |= n1.patchFlag & 16;
    const oldProps = n1.props || EMPTY_OBJ;
    const newProps = n2.props || EMPTY_OBJ;
    let vnodeHook;
    parentComponent && toggleRecurse(parentComponent, false);
    if (vnodeHook = newProps.onVnodeBeforeUpdate) {
      invokeVNodeHook(vnodeHook, parentComponent, n2, n1);
    }
    if (dirs) {
      invokeDirectiveHook(n2, n1, parentComponent, "beforeUpdate");
    }
    parentComponent && toggleRecurse(parentComponent, true);
    if (isHmrUpdating) {
      patchFlag = 0;
      optimized = false;
      dynamicChildren = null;
    }
    if (dynamicChildren) {
      patchBlockChildren(
        n1.dynamicChildren,
        dynamicChildren,
        el3,
        parentComponent,
        parentSuspense,
        resolveChildrenNamespace(n2, namespace),
        slotScopeIds
      );
      {
        traverseStaticChildren(n1, n2);
      }
    } else if (!optimized) {
      patchChildren(
        n1,
        n2,
        el3,
        null,
        parentComponent,
        parentSuspense,
        resolveChildrenNamespace(n2, namespace),
        slotScopeIds,
        false
      );
    }
    if (patchFlag > 0) {
      if (patchFlag & 16) {
        patchProps(
          el3,
          n2,
          oldProps,
          newProps,
          parentComponent,
          parentSuspense,
          namespace
        );
      } else {
        if (patchFlag & 2) {
          if (oldProps.class !== newProps.class) {
            hostPatchProp(el3, "class", null, newProps.class, namespace);
          }
        }
        if (patchFlag & 4) {
          hostPatchProp(el3, "style", oldProps.style, newProps.style, namespace);
        }
        if (patchFlag & 8) {
          const propsToUpdate = n2.dynamicProps;
          for (let i3 = 0; i3 < propsToUpdate.length; i3++) {
            const key = propsToUpdate[i3];
            const prev = oldProps[key];
            const next = newProps[key];
            if (next !== prev || key === "value") {
              hostPatchProp(
                el3,
                key,
                prev,
                next,
                namespace,
                n1.children,
                parentComponent,
                parentSuspense,
                unmountChildren
              );
            }
          }
        }
      }
      if (patchFlag & 1) {
        if (n1.children !== n2.children) {
          hostSetElementText(el3, n2.children);
        }
      }
    } else if (!optimized && dynamicChildren == null) {
      patchProps(
        el3,
        n2,
        oldProps,
        newProps,
        parentComponent,
        parentSuspense,
        namespace
      );
    }
    if ((vnodeHook = newProps.onVnodeUpdated) || dirs) {
      queuePostRenderEffect(() => {
        vnodeHook && invokeVNodeHook(vnodeHook, parentComponent, n2, n1);
        dirs && invokeDirectiveHook(n2, n1, parentComponent, "updated");
      }, parentSuspense);
    }
  };
  const patchBlockChildren = (oldChildren, newChildren, fallbackContainer, parentComponent, parentSuspense, namespace, slotScopeIds) => {
    for (let i3 = 0; i3 < newChildren.length; i3++) {
      const oldVNode = oldChildren[i3];
      const newVNode = newChildren[i3];
      const container = (
        // oldVNode may be an errored async setup() component inside Suspense
        // which will not have a mounted element
        oldVNode.el && // - In the case of a Fragment, we need to provide the actual parent
        // of the Fragment itself so it can move its children.
        (oldVNode.type === Fragment || // - In the case of different nodes, there is going to be a replacement
        // which also requires the correct parent container
        !isSameVNodeType(oldVNode, newVNode) || // - In the case of a component, it could contain anything.
        oldVNode.shapeFlag & (6 | 64)) ? hostParentNode(oldVNode.el) : (
          // In other cases, the parent container is not actually used so we
          // just pass the block element here to avoid a DOM parentNode call.
          fallbackContainer
        )
      );
      patch(
        oldVNode,
        newVNode,
        container,
        null,
        parentComponent,
        parentSuspense,
        namespace,
        slotScopeIds,
        true
      );
    }
  };
  const patchProps = (el3, vnode, oldProps, newProps, parentComponent, parentSuspense, namespace) => {
    if (oldProps !== newProps) {
      if (oldProps !== EMPTY_OBJ) {
        for (const key in oldProps) {
          if (!isReservedProp(key) && !(key in newProps)) {
            hostPatchProp(
              el3,
              key,
              oldProps[key],
              null,
              namespace,
              vnode.children,
              parentComponent,
              parentSuspense,
              unmountChildren
            );
          }
        }
      }
      for (const key in newProps) {
        if (isReservedProp(key))
          continue;
        const next = newProps[key];
        const prev = oldProps[key];
        if (next !== prev && key !== "value") {
          hostPatchProp(
            el3,
            key,
            prev,
            next,
            namespace,
            vnode.children,
            parentComponent,
            parentSuspense,
            unmountChildren
          );
        }
      }
      if ("value" in newProps) {
        hostPatchProp(el3, "value", oldProps.value, newProps.value, namespace);
      }
    }
  };
  const processFragment = (n1, n2, container, anchor, parentComponent, parentSuspense, namespace, slotScopeIds, optimized) => {
    const fragmentStartAnchor = n2.el = n1 ? n1.el : hostCreateText("");
    const fragmentEndAnchor = n2.anchor = n1 ? n1.anchor : hostCreateText("");
    let { patchFlag, dynamicChildren, slotScopeIds: fragmentSlotScopeIds } = n2;
    if (
      // #5523 dev root fragment may inherit directives
      isHmrUpdating || patchFlag & 2048
    ) {
      patchFlag = 0;
      optimized = false;
      dynamicChildren = null;
    }
    if (fragmentSlotScopeIds) {
      slotScopeIds = slotScopeIds ? slotScopeIds.concat(fragmentSlotScopeIds) : fragmentSlotScopeIds;
    }
    if (n1 == null) {
      hostInsert(fragmentStartAnchor, container, anchor);
      hostInsert(fragmentEndAnchor, container, anchor);
      mountChildren(
        // #10007
        // such fragment like `<></>` will be compiled into
        // a fragment which doesn't have a children.
        // In this case fallback to an empty array
        n2.children || [],
        container,
        fragmentEndAnchor,
        parentComponent,
        parentSuspense,
        namespace,
        slotScopeIds,
        optimized
      );
    } else {
      if (patchFlag > 0 && patchFlag & 64 && dynamicChildren && // #2715 the previous fragment could've been a BAILed one as a result
      // of renderSlot() with no valid children
      n1.dynamicChildren) {
        patchBlockChildren(
          n1.dynamicChildren,
          dynamicChildren,
          container,
          parentComponent,
          parentSuspense,
          namespace,
          slotScopeIds
        );
        {
          traverseStaticChildren(n1, n2);
        }
      } else {
        patchChildren(
          n1,
          n2,
          container,
          fragmentEndAnchor,
          parentComponent,
          parentSuspense,
          namespace,
          slotScopeIds,
          optimized
        );
      }
    }
  };
  const processComponent = (n1, n2, container, anchor, parentComponent, parentSuspense, namespace, slotScopeIds, optimized) => {
    n2.slotScopeIds = slotScopeIds;
    if (n1 == null) {
      if (n2.shapeFlag & 512) {
        parentComponent.ctx.activate(
          n2,
          container,
          anchor,
          namespace,
          optimized
        );
      } else {
        mountComponent(
          n2,
          container,
          anchor,
          parentComponent,
          parentSuspense,
          namespace,
          optimized
        );
      }
    } else {
      updateComponent(n1, n2, optimized);
    }
  };
  const mountComponent = (initialVNode, container, anchor, parentComponent, parentSuspense, namespace, optimized) => {
    const instance = initialVNode.component = createComponentInstance(
      initialVNode,
      parentComponent,
      parentSuspense
    );
    if (instance.type.__hmrId) {
      registerHMR(instance);
    }
    {
      pushWarningContext(initialVNode);
      startMeasure(instance, `mount`);
    }
    if (isKeepAlive(initialVNode)) {
      instance.ctx.renderer = internals;
    }
    {
      {
        startMeasure(instance, `init`);
      }
      setupComponent(instance);
      {
        endMeasure(instance, `init`);
      }
    }
    if (instance.asyncDep) {
      parentSuspense && parentSuspense.registerDep(instance, setupRenderEffect);
      if (!initialVNode.el) {
        const placeholder = instance.subTree = createVNode(Comment$1);
        processCommentNode(null, placeholder, container, anchor);
      }
    } else {
      setupRenderEffect(
        instance,
        initialVNode,
        container,
        anchor,
        parentSuspense,
        namespace,
        optimized
      );
    }
    {
      popWarningContext();
      endMeasure(instance, `mount`);
    }
  };
  const updateComponent = (n1, n2, optimized) => {
    const instance = n2.component = n1.component;
    if (shouldUpdateComponent(n1, n2, optimized)) {
      if (instance.asyncDep && !instance.asyncResolved) {
        {
          pushWarningContext(n2);
        }
        updateComponentPreRender(instance, n2, optimized);
        {
          popWarningContext();
        }
        return;
      } else {
        instance.next = n2;
        invalidateJob(instance.update);
        instance.effect.dirty = true;
        instance.update();
      }
    } else {
      n2.el = n1.el;
      instance.vnode = n2;
    }
  };
  const setupRenderEffect = (instance, initialVNode, container, anchor, parentSuspense, namespace, optimized) => {
    const componentUpdateFn = () => {
      if (!instance.isMounted) {
        let vnodeHook;
        const { el: el3, props } = initialVNode;
        const { bm: bm2, m: m4, parent } = instance;
        const isAsyncWrapperVNode = isAsyncWrapper(initialVNode);
        toggleRecurse(instance, false);
        if (bm2) {
          invokeArrayFns(bm2);
        }
        if (!isAsyncWrapperVNode && (vnodeHook = props && props.onVnodeBeforeMount)) {
          invokeVNodeHook(vnodeHook, parent, initialVNode);
        }
        toggleRecurse(instance, true);
        if (el3 && hydrateNode) {
          const hydrateSubTree = () => {
            {
              startMeasure(instance, `render`);
            }
            instance.subTree = renderComponentRoot(instance);
            {
              endMeasure(instance, `render`);
            }
            {
              startMeasure(instance, `hydrate`);
            }
            hydrateNode(
              el3,
              instance.subTree,
              instance,
              parentSuspense,
              null
            );
            {
              endMeasure(instance, `hydrate`);
            }
          };
          if (isAsyncWrapperVNode) {
            initialVNode.type.__asyncLoader().then(
              // note: we are moving the render call into an async callback,
              // which means it won't track dependencies - but it's ok because
              // a server-rendered async wrapper is already in resolved state
              // and it will never need to change.
              () => !instance.isUnmounted && hydrateSubTree()
            );
          } else {
            hydrateSubTree();
          }
        } else {
          {
            startMeasure(instance, `render`);
          }
          const subTree = instance.subTree = renderComponentRoot(instance);
          {
            endMeasure(instance, `render`);
          }
          {
            startMeasure(instance, `patch`);
          }
          patch(
            null,
            subTree,
            container,
            anchor,
            instance,
            parentSuspense,
            namespace
          );
          {
            endMeasure(instance, `patch`);
          }
          initialVNode.el = subTree.el;
        }
        if (m4) {
          queuePostRenderEffect(m4, parentSuspense);
        }
        if (!isAsyncWrapperVNode && (vnodeHook = props && props.onVnodeMounted)) {
          const scopedInitialVNode = initialVNode;
          queuePostRenderEffect(
            () => invokeVNodeHook(vnodeHook, parent, scopedInitialVNode),
            parentSuspense
          );
        }
        if (initialVNode.shapeFlag & 256 || parent && isAsyncWrapper(parent.vnode) && parent.vnode.shapeFlag & 256) {
          instance.a && queuePostRenderEffect(instance.a, parentSuspense);
        }
        instance.isMounted = true;
        {
          devtoolsComponentAdded(instance);
        }
        initialVNode = container = anchor = null;
      } else {
        let { next, bu: bu2, u: u3, parent, vnode } = instance;
        {
          const nonHydratedAsyncRoot = locateNonHydratedAsyncRoot(instance);
          if (nonHydratedAsyncRoot) {
            if (next) {
              next.el = vnode.el;
              updateComponentPreRender(instance, next, optimized);
            }
            nonHydratedAsyncRoot.asyncDep.then(() => {
              if (!instance.isUnmounted) {
                componentUpdateFn();
              }
            });
            return;
          }
        }
        let originNext = next;
        let vnodeHook;
        {
          pushWarningContext(next || instance.vnode);
        }
        toggleRecurse(instance, false);
        if (next) {
          next.el = vnode.el;
          updateComponentPreRender(instance, next, optimized);
        } else {
          next = vnode;
        }
        if (bu2) {
          invokeArrayFns(bu2);
        }
        if (vnodeHook = next.props && next.props.onVnodeBeforeUpdate) {
          invokeVNodeHook(vnodeHook, parent, next, vnode);
        }
        toggleRecurse(instance, true);
        {
          startMeasure(instance, `render`);
        }
        const nextTree = renderComponentRoot(instance);
        {
          endMeasure(instance, `render`);
        }
        const prevTree = instance.subTree;
        instance.subTree = nextTree;
        {
          startMeasure(instance, `patch`);
        }
        patch(
          prevTree,
          nextTree,
          // parent may have changed if it's in a teleport
          hostParentNode(prevTree.el),
          // anchor may have changed if it's in a fragment
          getNextHostNode(prevTree),
          instance,
          parentSuspense,
          namespace
        );
        {
          endMeasure(instance, `patch`);
        }
        next.el = nextTree.el;
        if (originNext === null) {
          updateHOCHostEl(instance, nextTree.el);
        }
        if (u3) {
          queuePostRenderEffect(u3, parentSuspense);
        }
        if (vnodeHook = next.props && next.props.onVnodeUpdated) {
          queuePostRenderEffect(
            () => invokeVNodeHook(vnodeHook, parent, next, vnode),
            parentSuspense
          );
        }
        {
          devtoolsComponentUpdated(instance);
        }
        {
          popWarningContext();
        }
      }
    };
    const effect2 = instance.effect = new ReactiveEffect(
      componentUpdateFn,
      NOOP,
      () => queueJob(update),
      instance.scope
      // track it in component's effect scope
    );
    const update = instance.update = () => {
      if (effect2.dirty) {
        effect2.run();
      }
    };
    update.id = instance.uid;
    toggleRecurse(instance, true);
    {
      effect2.onTrack = instance.rtc ? (e3) => invokeArrayFns(instance.rtc, e3) : void 0;
      effect2.onTrigger = instance.rtg ? (e3) => invokeArrayFns(instance.rtg, e3) : void 0;
      update.ownerInstance = instance;
    }
    update();
  };
  const updateComponentPreRender = (instance, nextVNode, optimized) => {
    nextVNode.component = instance;
    const prevProps = instance.vnode.props;
    instance.vnode = nextVNode;
    instance.next = null;
    updateProps(instance, nextVNode.props, prevProps, optimized);
    updateSlots(instance, nextVNode.children, optimized);
    pauseTracking();
    flushPreFlushCbs(instance);
    resetTracking();
  };
  const patchChildren = (n1, n2, container, anchor, parentComponent, parentSuspense, namespace, slotScopeIds, optimized = false) => {
    const c1 = n1 && n1.children;
    const prevShapeFlag = n1 ? n1.shapeFlag : 0;
    const c22 = n2.children;
    const { patchFlag, shapeFlag } = n2;
    if (patchFlag > 0) {
      if (patchFlag & 128) {
        patchKeyedChildren(
          c1,
          c22,
          container,
          anchor,
          parentComponent,
          parentSuspense,
          namespace,
          slotScopeIds,
          optimized
        );
        return;
      } else if (patchFlag & 256) {
        patchUnkeyedChildren(
          c1,
          c22,
          container,
          anchor,
          parentComponent,
          parentSuspense,
          namespace,
          slotScopeIds,
          optimized
        );
        return;
      }
    }
    if (shapeFlag & 8) {
      if (prevShapeFlag & 16) {
        unmountChildren(c1, parentComponent, parentSuspense);
      }
      if (c22 !== c1) {
        hostSetElementText(container, c22);
      }
    } else {
      if (prevShapeFlag & 16) {
        if (shapeFlag & 16) {
          patchKeyedChildren(
            c1,
            c22,
            container,
            anchor,
            parentComponent,
            parentSuspense,
            namespace,
            slotScopeIds,
            optimized
          );
        } else {
          unmountChildren(c1, parentComponent, parentSuspense, true);
        }
      } else {
        if (prevShapeFlag & 8) {
          hostSetElementText(container, "");
        }
        if (shapeFlag & 16) {
          mountChildren(
            c22,
            container,
            anchor,
            parentComponent,
            parentSuspense,
            namespace,
            slotScopeIds,
            optimized
          );
        }
      }
    }
  };
  const patchUnkeyedChildren = (c1, c22, container, anchor, parentComponent, parentSuspense, namespace, slotScopeIds, optimized) => {
    c1 = c1 || EMPTY_ARR;
    c22 = c22 || EMPTY_ARR;
    const oldLength = c1.length;
    const newLength = c22.length;
    const commonLength = Math.min(oldLength, newLength);
    let i3;
    for (i3 = 0; i3 < commonLength; i3++) {
      const nextChild = c22[i3] = optimized ? cloneIfMounted(c22[i3]) : normalizeVNode(c22[i3]);
      patch(
        c1[i3],
        nextChild,
        container,
        null,
        parentComponent,
        parentSuspense,
        namespace,
        slotScopeIds,
        optimized
      );
    }
    if (oldLength > newLength) {
      unmountChildren(
        c1,
        parentComponent,
        parentSuspense,
        true,
        false,
        commonLength
      );
    } else {
      mountChildren(
        c22,
        container,
        anchor,
        parentComponent,
        parentSuspense,
        namespace,
        slotScopeIds,
        optimized,
        commonLength
      );
    }
  };
  const patchKeyedChildren = (c1, c22, container, parentAnchor, parentComponent, parentSuspense, namespace, slotScopeIds, optimized) => {
    let i3 = 0;
    const l2 = c22.length;
    let e1 = c1.length - 1;
    let e22 = l2 - 1;
    while (i3 <= e1 && i3 <= e22) {
      const n1 = c1[i3];
      const n2 = c22[i3] = optimized ? cloneIfMounted(c22[i3]) : normalizeVNode(c22[i3]);
      if (isSameVNodeType(n1, n2)) {
        patch(
          n1,
          n2,
          container,
          null,
          parentComponent,
          parentSuspense,
          namespace,
          slotScopeIds,
          optimized
        );
      } else {
        break;
      }
      i3++;
    }
    while (i3 <= e1 && i3 <= e22) {
      const n1 = c1[e1];
      const n2 = c22[e22] = optimized ? cloneIfMounted(c22[e22]) : normalizeVNode(c22[e22]);
      if (isSameVNodeType(n1, n2)) {
        patch(
          n1,
          n2,
          container,
          null,
          parentComponent,
          parentSuspense,
          namespace,
          slotScopeIds,
          optimized
        );
      } else {
        break;
      }
      e1--;
      e22--;
    }
    if (i3 > e1) {
      if (i3 <= e22) {
        const nextPos = e22 + 1;
        const anchor = nextPos < l2 ? c22[nextPos].el : parentAnchor;
        while (i3 <= e22) {
          patch(
            null,
            c22[i3] = optimized ? cloneIfMounted(c22[i3]) : normalizeVNode(c22[i3]),
            container,
            anchor,
            parentComponent,
            parentSuspense,
            namespace,
            slotScopeIds,
            optimized
          );
          i3++;
        }
      }
    } else if (i3 > e22) {
      while (i3 <= e1) {
        unmount(c1[i3], parentComponent, parentSuspense, true);
        i3++;
      }
    } else {
      const s1 = i3;
      const s22 = i3;
      const keyToNewIndexMap = /* @__PURE__ */ new Map();
      for (i3 = s22; i3 <= e22; i3++) {
        const nextChild = c22[i3] = optimized ? cloneIfMounted(c22[i3]) : normalizeVNode(c22[i3]);
        if (nextChild.key != null) {
          if (keyToNewIndexMap.has(nextChild.key)) {
            warn$1$1(
              `Duplicate keys found during update:`,
              JSON.stringify(nextChild.key),
              `Make sure keys are unique.`
            );
          }
          keyToNewIndexMap.set(nextChild.key, i3);
        }
      }
      let j2;
      let patched = 0;
      const toBePatched = e22 - s22 + 1;
      let moved = false;
      let maxNewIndexSoFar = 0;
      const newIndexToOldIndexMap = new Array(toBePatched);
      for (i3 = 0; i3 < toBePatched; i3++)
        newIndexToOldIndexMap[i3] = 0;
      for (i3 = s1; i3 <= e1; i3++) {
        const prevChild = c1[i3];
        if (patched >= toBePatched) {
          unmount(prevChild, parentComponent, parentSuspense, true);
          continue;
        }
        let newIndex;
        if (prevChild.key != null) {
          newIndex = keyToNewIndexMap.get(prevChild.key);
        } else {
          for (j2 = s22; j2 <= e22; j2++) {
            if (newIndexToOldIndexMap[j2 - s22] === 0 && isSameVNodeType(prevChild, c22[j2])) {
              newIndex = j2;
              break;
            }
          }
        }
        if (newIndex === void 0) {
          unmount(prevChild, parentComponent, parentSuspense, true);
        } else {
          newIndexToOldIndexMap[newIndex - s22] = i3 + 1;
          if (newIndex >= maxNewIndexSoFar) {
            maxNewIndexSoFar = newIndex;
          } else {
            moved = true;
          }
          patch(
            prevChild,
            c22[newIndex],
            container,
            null,
            parentComponent,
            parentSuspense,
            namespace,
            slotScopeIds,
            optimized
          );
          patched++;
        }
      }
      const increasingNewIndexSequence = moved ? getSequence(newIndexToOldIndexMap) : EMPTY_ARR;
      j2 = increasingNewIndexSequence.length - 1;
      for (i3 = toBePatched - 1; i3 >= 0; i3--) {
        const nextIndex = s22 + i3;
        const nextChild = c22[nextIndex];
        const anchor = nextIndex + 1 < l2 ? c22[nextIndex + 1].el : parentAnchor;
        if (newIndexToOldIndexMap[i3] === 0) {
          patch(
            null,
            nextChild,
            container,
            anchor,
            parentComponent,
            parentSuspense,
            namespace,
            slotScopeIds,
            optimized
          );
        } else if (moved) {
          if (j2 < 0 || i3 !== increasingNewIndexSequence[j2]) {
            move(nextChild, container, anchor, 2);
          } else {
            j2--;
          }
        }
      }
    }
  };
  const move = (vnode, container, anchor, moveType, parentSuspense = null) => {
    const { el: el3, type, transition, children, shapeFlag } = vnode;
    if (shapeFlag & 6) {
      move(vnode.component.subTree, container, anchor, moveType);
      return;
    }
    if (shapeFlag & 128) {
      vnode.suspense.move(container, anchor, moveType);
      return;
    }
    if (shapeFlag & 64) {
      type.move(vnode, container, anchor, internals);
      return;
    }
    if (type === Fragment) {
      hostInsert(el3, container, anchor);
      for (let i3 = 0; i3 < children.length; i3++) {
        move(children[i3], container, anchor, moveType);
      }
      hostInsert(vnode.anchor, container, anchor);
      return;
    }
    if (type === Static) {
      moveStaticNode(vnode, container, anchor);
      return;
    }
    const needTransition2 = moveType !== 2 && shapeFlag & 1 && transition;
    if (needTransition2) {
      if (moveType === 0) {
        transition.beforeEnter(el3);
        hostInsert(el3, container, anchor);
        queuePostRenderEffect(() => transition.enter(el3), parentSuspense);
      } else {
        const { leave, delayLeave, afterLeave } = transition;
        const remove22 = () => hostInsert(el3, container, anchor);
        const performLeave = () => {
          leave(el3, () => {
            remove22();
            afterLeave && afterLeave();
          });
        };
        if (delayLeave) {
          delayLeave(el3, remove22, performLeave);
        } else {
          performLeave();
        }
      }
    } else {
      hostInsert(el3, container, anchor);
    }
  };
  const unmount = (vnode, parentComponent, parentSuspense, doRemove = false, optimized = false) => {
    const {
      type,
      props,
      ref: ref3,
      children,
      dynamicChildren,
      shapeFlag,
      patchFlag,
      dirs
    } = vnode;
    if (ref3 != null) {
      setRef(ref3, null, parentSuspense, vnode, true);
    }
    if (shapeFlag & 256) {
      parentComponent.ctx.deactivate(vnode);
      return;
    }
    const shouldInvokeDirs = shapeFlag & 1 && dirs;
    const shouldInvokeVnodeHook = !isAsyncWrapper(vnode);
    let vnodeHook;
    if (shouldInvokeVnodeHook && (vnodeHook = props && props.onVnodeBeforeUnmount)) {
      invokeVNodeHook(vnodeHook, parentComponent, vnode);
    }
    if (shapeFlag & 6) {
      unmountComponent(vnode.component, parentSuspense, doRemove);
    } else {
      if (shapeFlag & 128) {
        vnode.suspense.unmount(parentSuspense, doRemove);
        return;
      }
      if (shouldInvokeDirs) {
        invokeDirectiveHook(vnode, null, parentComponent, "beforeUnmount");
      }
      if (shapeFlag & 64) {
        vnode.type.remove(
          vnode,
          parentComponent,
          parentSuspense,
          optimized,
          internals,
          doRemove
        );
      } else if (dynamicChildren && // #1153: fast path should not be taken for non-stable (v-for) fragments
      (type !== Fragment || patchFlag > 0 && patchFlag & 64)) {
        unmountChildren(
          dynamicChildren,
          parentComponent,
          parentSuspense,
          false,
          true
        );
      } else if (type === Fragment && patchFlag & (128 | 256) || !optimized && shapeFlag & 16) {
        unmountChildren(children, parentComponent, parentSuspense);
      }
      if (doRemove) {
        remove2(vnode);
      }
    }
    if (shouldInvokeVnodeHook && (vnodeHook = props && props.onVnodeUnmounted) || shouldInvokeDirs) {
      queuePostRenderEffect(() => {
        vnodeHook && invokeVNodeHook(vnodeHook, parentComponent, vnode);
        shouldInvokeDirs && invokeDirectiveHook(vnode, null, parentComponent, "unmounted");
      }, parentSuspense);
    }
  };
  const remove2 = (vnode) => {
    const { type, el: el3, anchor, transition } = vnode;
    if (type === Fragment) {
      if (vnode.patchFlag > 0 && vnode.patchFlag & 2048 && transition && !transition.persisted) {
        vnode.children.forEach((child) => {
          if (child.type === Comment$1) {
            hostRemove(child.el);
          } else {
            remove2(child);
          }
        });
      } else {
        removeFragment(el3, anchor);
      }
      return;
    }
    if (type === Static) {
      removeStaticNode(vnode);
      return;
    }
    const performRemove = () => {
      hostRemove(el3);
      if (transition && !transition.persisted && transition.afterLeave) {
        transition.afterLeave();
      }
    };
    if (vnode.shapeFlag & 1 && transition && !transition.persisted) {
      const { leave, delayLeave } = transition;
      const performLeave = () => leave(el3, performRemove);
      if (delayLeave) {
        delayLeave(vnode.el, performRemove, performLeave);
      } else {
        performLeave();
      }
    } else {
      performRemove();
    }
  };
  const removeFragment = (cur, end) => {
    let next;
    while (cur !== end) {
      next = hostNextSibling(cur);
      hostRemove(cur);
      cur = next;
    }
    hostRemove(end);
  };
  const unmountComponent = (instance, parentSuspense, doRemove) => {
    if (instance.type.__hmrId) {
      unregisterHMR(instance);
    }
    const { bum, scope, update, subTree, um: um2 } = instance;
    if (bum) {
      invokeArrayFns(bum);
    }
    scope.stop();
    if (update) {
      update.active = false;
      unmount(subTree, instance, parentSuspense, doRemove);
    }
    if (um2) {
      queuePostRenderEffect(um2, parentSuspense);
    }
    queuePostRenderEffect(() => {
      instance.isUnmounted = true;
    }, parentSuspense);
    if (parentSuspense && parentSuspense.pendingBranch && !parentSuspense.isUnmounted && instance.asyncDep && !instance.asyncResolved && instance.suspenseId === parentSuspense.pendingId) {
      parentSuspense.deps--;
      if (parentSuspense.deps === 0) {
        parentSuspense.resolve();
      }
    }
    {
      devtoolsComponentRemoved(instance);
    }
  };
  const unmountChildren = (children, parentComponent, parentSuspense, doRemove = false, optimized = false, start = 0) => {
    for (let i3 = start; i3 < children.length; i3++) {
      unmount(children[i3], parentComponent, parentSuspense, doRemove, optimized);
    }
  };
  const getNextHostNode = (vnode) => {
    if (vnode.shapeFlag & 6) {
      return getNextHostNode(vnode.component.subTree);
    }
    if (vnode.shapeFlag & 128) {
      return vnode.suspense.next();
    }
    return hostNextSibling(vnode.anchor || vnode.el);
  };
  let isFlushing2 = false;
  const render2 = (vnode, container, namespace) => {
    if (vnode == null) {
      if (container._vnode) {
        unmount(container._vnode, null, null, true);
      }
    } else {
      patch(
        container._vnode || null,
        vnode,
        container,
        null,
        null,
        null,
        namespace
      );
    }
    if (!isFlushing2) {
      isFlushing2 = true;
      flushPreFlushCbs();
      flushPostFlushCbs();
      isFlushing2 = false;
    }
    container._vnode = vnode;
  };
  const internals = {
    p: patch,
    um: unmount,
    m: move,
    r: remove2,
    mt: mountComponent,
    mc: mountChildren,
    pc: patchChildren,
    pbc: patchBlockChildren,
    n: getNextHostNode,
    o: options
  };
  let hydrate;
  let hydrateNode;
  if (createHydrationFns) {
    [hydrate, hydrateNode] = createHydrationFns(
      internals
    );
  }
  return {
    render: render2,
    hydrate,
    createApp: createAppAPI(render2, hydrate)
  };
}
function resolveChildrenNamespace({ type, props }, currentNamespace) {
  return currentNamespace === "svg" && type === "foreignObject" || currentNamespace === "mathml" && type === "annotation-xml" && props && props.encoding && props.encoding.includes("html") ? void 0 : currentNamespace;
}
function toggleRecurse({ effect: effect2, update }, allowed) {
  effect2.allowRecurse = update.allowRecurse = allowed;
}
function needTransition(parentSuspense, transition) {
  return (!parentSuspense || parentSuspense && !parentSuspense.pendingBranch) && transition && !transition.persisted;
}
function traverseStaticChildren(n1, n2, shallow = false) {
  const ch1 = n1.children;
  const ch2 = n2.children;
  if (isArray$3(ch1) && isArray$3(ch2)) {
    for (let i3 = 0; i3 < ch1.length; i3++) {
      const c1 = ch1[i3];
      let c22 = ch2[i3];
      if (c22.shapeFlag & 1 && !c22.dynamicChildren) {
        if (c22.patchFlag <= 0 || c22.patchFlag === 32) {
          c22 = ch2[i3] = cloneIfMounted(ch2[i3]);
          c22.el = c1.el;
        }
        if (!shallow)
          traverseStaticChildren(c1, c22);
      }
      if (c22.type === Text) {
        c22.el = c1.el;
      }
      if (c22.type === Comment$1 && !c22.el) {
        c22.el = c1.el;
      }
    }
  }
}
function getSequence(arr) {
  const p2 = arr.slice();
  const result = [0];
  let i3, j2, u3, v2, c3;
  const len = arr.length;
  for (i3 = 0; i3 < len; i3++) {
    const arrI = arr[i3];
    if (arrI !== 0) {
      j2 = result[result.length - 1];
      if (arr[j2] < arrI) {
        p2[i3] = j2;
        result.push(i3);
        continue;
      }
      u3 = 0;
      v2 = result.length - 1;
      while (u3 < v2) {
        c3 = u3 + v2 >> 1;
        if (arr[result[c3]] < arrI) {
          u3 = c3 + 1;
        } else {
          v2 = c3;
        }
      }
      if (arrI < arr[result[u3]]) {
        if (u3 > 0) {
          p2[i3] = result[u3 - 1];
        }
        result[u3] = i3;
      }
    }
  }
  u3 = result.length;
  v2 = result[u3 - 1];
  while (u3-- > 0) {
    result[u3] = v2;
    v2 = p2[v2];
  }
  return result;
}
function locateNonHydratedAsyncRoot(instance) {
  const subComponent = instance.subTree.component;
  if (subComponent) {
    if (subComponent.asyncDep && !subComponent.asyncResolved) {
      return subComponent;
    } else {
      return locateNonHydratedAsyncRoot(subComponent);
    }
  }
}
const isTeleport = (type) => type.__isTeleport;
const isTeleportDisabled = (props) => props && (props.disabled || props.disabled === "");
const isTargetSVG = (target) => typeof SVGElement !== "undefined" && target instanceof SVGElement;
const isTargetMathML = (target) => typeof MathMLElement === "function" && target instanceof MathMLElement;
const resolveTarget = (props, select) => {
  const targetSelector = props && props.to;
  if (isString$2(targetSelector)) {
    if (!select) {
      warn$1$1(
        `Current renderer does not support string target for Teleports. (missing querySelector renderer option)`
      );
      return null;
    } else {
      const target = select(targetSelector);
      if (!target) {
        warn$1$1(
          `Failed to locate Teleport target with selector "${targetSelector}". Note the target element must exist before the component is mounted - i.e. the target cannot be rendered by the component itself, and ideally should be outside of the entire Vue component tree.`
        );
      }
      return target;
    }
  } else {
    if (!targetSelector && !isTeleportDisabled(props)) {
      warn$1$1(`Invalid Teleport target: ${targetSelector}`);
    }
    return targetSelector;
  }
};
const TeleportImpl = {
  name: "Teleport",
  __isTeleport: true,
  process(n1, n2, container, anchor, parentComponent, parentSuspense, namespace, slotScopeIds, optimized, internals) {
    const {
      mc: mountChildren,
      pc: patchChildren,
      pbc: patchBlockChildren,
      o: { insert, querySelector, createText, createComment }
    } = internals;
    const disabled = isTeleportDisabled(n2.props);
    let { shapeFlag, children, dynamicChildren } = n2;
    if (isHmrUpdating) {
      optimized = false;
      dynamicChildren = null;
    }
    if (n1 == null) {
      const placeholder = n2.el = createComment("teleport start");
      const mainAnchor = n2.anchor = createComment("teleport end");
      insert(placeholder, container, anchor);
      insert(mainAnchor, container, anchor);
      const target = n2.target = resolveTarget(n2.props, querySelector);
      const targetAnchor = n2.targetAnchor = createText("");
      if (target) {
        insert(targetAnchor, target);
        if (namespace === "svg" || isTargetSVG(target)) {
          namespace = "svg";
        } else if (namespace === "mathml" || isTargetMathML(target)) {
          namespace = "mathml";
        }
      } else if (!disabled) {
        warn$1$1("Invalid Teleport target on mount:", target, `(${typeof target})`);
      }
      const mount = (container2, anchor2) => {
        if (shapeFlag & 16) {
          mountChildren(
            children,
            container2,
            anchor2,
            parentComponent,
            parentSuspense,
            namespace,
            slotScopeIds,
            optimized
          );
        }
      };
      if (disabled) {
        mount(container, mainAnchor);
      } else if (target) {
        mount(target, targetAnchor);
      }
    } else {
      n2.el = n1.el;
      const mainAnchor = n2.anchor = n1.anchor;
      const target = n2.target = n1.target;
      const targetAnchor = n2.targetAnchor = n1.targetAnchor;
      const wasDisabled = isTeleportDisabled(n1.props);
      const currentContainer = wasDisabled ? container : target;
      const currentAnchor = wasDisabled ? mainAnchor : targetAnchor;
      if (namespace === "svg" || isTargetSVG(target)) {
        namespace = "svg";
      } else if (namespace === "mathml" || isTargetMathML(target)) {
        namespace = "mathml";
      }
      if (dynamicChildren) {
        patchBlockChildren(
          n1.dynamicChildren,
          dynamicChildren,
          currentContainer,
          parentComponent,
          parentSuspense,
          namespace,
          slotScopeIds
        );
        traverseStaticChildren(n1, n2, true);
      } else if (!optimized) {
        patchChildren(
          n1,
          n2,
          currentContainer,
          currentAnchor,
          parentComponent,
          parentSuspense,
          namespace,
          slotScopeIds,
          false
        );
      }
      if (disabled) {
        if (!wasDisabled) {
          moveTeleport(
            n2,
            container,
            mainAnchor,
            internals,
            1
          );
        } else {
          if (n2.props && n1.props && n2.props.to !== n1.props.to) {
            n2.props.to = n1.props.to;
          }
        }
      } else {
        if ((n2.props && n2.props.to) !== (n1.props && n1.props.to)) {
          const nextTarget = n2.target = resolveTarget(
            n2.props,
            querySelector
          );
          if (nextTarget) {
            moveTeleport(
              n2,
              nextTarget,
              null,
              internals,
              0
            );
          } else {
            warn$1$1(
              "Invalid Teleport target on update:",
              target,
              `(${typeof target})`
            );
          }
        } else if (wasDisabled) {
          moveTeleport(
            n2,
            target,
            targetAnchor,
            internals,
            1
          );
        }
      }
    }
    updateCssVars(n2);
  },
  remove(vnode, parentComponent, parentSuspense, optimized, { um: unmount, o: { remove: hostRemove } }, doRemove) {
    const { shapeFlag, children, anchor, targetAnchor, target, props } = vnode;
    if (target) {
      hostRemove(targetAnchor);
    }
    doRemove && hostRemove(anchor);
    if (shapeFlag & 16) {
      const shouldRemove = doRemove || !isTeleportDisabled(props);
      for (let i3 = 0; i3 < children.length; i3++) {
        const child = children[i3];
        unmount(
          child,
          parentComponent,
          parentSuspense,
          shouldRemove,
          !!child.dynamicChildren
        );
      }
    }
  },
  move: moveTeleport,
  hydrate: hydrateTeleport
};
function moveTeleport(vnode, container, parentAnchor, { o: { insert }, m: move }, moveType = 2) {
  if (moveType === 0) {
    insert(vnode.targetAnchor, container, parentAnchor);
  }
  const { el: el3, anchor, shapeFlag, children, props } = vnode;
  const isReorder = moveType === 2;
  if (isReorder) {
    insert(el3, container, parentAnchor);
  }
  if (!isReorder || isTeleportDisabled(props)) {
    if (shapeFlag & 16) {
      for (let i3 = 0; i3 < children.length; i3++) {
        move(
          children[i3],
          container,
          parentAnchor,
          2
        );
      }
    }
  }
  if (isReorder) {
    insert(anchor, container, parentAnchor);
  }
}
function hydrateTeleport(node, vnode, parentComponent, parentSuspense, slotScopeIds, optimized, {
  o: { nextSibling, parentNode, querySelector }
}, hydrateChildren) {
  const target = vnode.target = resolveTarget(
    vnode.props,
    querySelector
  );
  if (target) {
    const targetNode = target._lpa || target.firstChild;
    if (vnode.shapeFlag & 16) {
      if (isTeleportDisabled(vnode.props)) {
        vnode.anchor = hydrateChildren(
          nextSibling(node),
          vnode,
          parentNode(node),
          parentComponent,
          parentSuspense,
          slotScopeIds,
          optimized
        );
        vnode.targetAnchor = targetNode;
      } else {
        vnode.anchor = nextSibling(node);
        let targetAnchor = targetNode;
        while (targetAnchor) {
          targetAnchor = nextSibling(targetAnchor);
          if (targetAnchor && targetAnchor.nodeType === 8 && targetAnchor.data === "teleport anchor") {
            vnode.targetAnchor = targetAnchor;
            target._lpa = vnode.targetAnchor && nextSibling(vnode.targetAnchor);
            break;
          }
        }
        hydrateChildren(
          targetNode,
          vnode,
          target,
          parentComponent,
          parentSuspense,
          slotScopeIds,
          optimized
        );
      }
    }
    updateCssVars(vnode);
  }
  return vnode.anchor && nextSibling(vnode.anchor);
}
const Teleport = TeleportImpl;
function updateCssVars(vnode) {
  const ctx = vnode.ctx;
  if (ctx && ctx.ut) {
    let node = vnode.children[0].el;
    while (node && node !== vnode.targetAnchor) {
      if (node.nodeType === 1)
        node.setAttribute("data-v-owner", ctx.uid);
      node = node.nextSibling;
    }
    ctx.ut();
  }
}
const Fragment = Symbol.for("v-fgt");
const Text = Symbol.for("v-txt");
const Comment$1 = Symbol.for("v-cmt");
const Static = Symbol.for("v-stc");
const blockStack = [];
let currentBlock = null;
function openBlock(disableTracking = false) {
  blockStack.push(currentBlock = disableTracking ? null : []);
}
function closeBlock() {
  blockStack.pop();
  currentBlock = blockStack[blockStack.length - 1] || null;
}
let isBlockTreeEnabled = 1;
function setBlockTracking(value) {
  isBlockTreeEnabled += value;
}
function setupBlock(vnode) {
  vnode.dynamicChildren = isBlockTreeEnabled > 0 ? currentBlock || EMPTY_ARR : null;
  closeBlock();
  if (isBlockTreeEnabled > 0 && currentBlock) {
    currentBlock.push(vnode);
  }
  return vnode;
}
function createElementBlock(type, props, children, patchFlag, dynamicProps, shapeFlag) {
  return setupBlock(
    createBaseVNode(
      type,
      props,
      children,
      patchFlag,
      dynamicProps,
      shapeFlag,
      true
    )
  );
}
function createBlock(type, props, children, patchFlag, dynamicProps) {
  return setupBlock(
    createVNode(
      type,
      props,
      children,
      patchFlag,
      dynamicProps,
      true
    )
  );
}
function isVNode$1(value) {
  return value ? value.__v_isVNode === true : false;
}
function isSameVNodeType(n1, n2) {
  if (n2.shapeFlag & 6 && hmrDirtyComponents.has(n2.type)) {
    n1.shapeFlag &= ~256;
    n2.shapeFlag &= ~512;
    return false;
  }
  return n1.type === n2.type && n1.key === n2.key;
}
const createVNodeWithArgsTransform = (...args) => {
  return _createVNode(
    ...args
  );
};
const InternalObjectKey = `__vInternal`;
const normalizeKey = ({ key }) => key != null ? key : null;
const normalizeRef = ({
  ref: ref3,
  ref_key,
  ref_for
}) => {
  if (typeof ref3 === "number") {
    ref3 = "" + ref3;
  }
  return ref3 != null ? isString$2(ref3) || isRef(ref3) || isFunction$2(ref3) ? { i: currentRenderingInstance, r: ref3, k: ref_key, f: !!ref_for } : ref3 : null;
};
function createBaseVNode(type, props = null, children = null, patchFlag = 0, dynamicProps = null, shapeFlag = type === Fragment ? 0 : 1, isBlockNode = false, needFullChildrenNormalization = false) {
  const vnode = {
    __v_isVNode: true,
    __v_skip: true,
    type,
    props,
    key: props && normalizeKey(props),
    ref: props && normalizeRef(props),
    scopeId: currentScopeId,
    slotScopeIds: null,
    children,
    component: null,
    suspense: null,
    ssContent: null,
    ssFallback: null,
    dirs: null,
    transition: null,
    el: null,
    anchor: null,
    target: null,
    targetAnchor: null,
    staticCount: 0,
    shapeFlag,
    patchFlag,
    dynamicProps,
    dynamicChildren: null,
    appContext: null,
    ctx: currentRenderingInstance
  };
  if (needFullChildrenNormalization) {
    normalizeChildren(vnode, children);
    if (shapeFlag & 128) {
      type.normalize(vnode);
    }
  } else if (children) {
    vnode.shapeFlag |= isString$2(children) ? 8 : 16;
  }
  if (vnode.key !== vnode.key) {
    warn$1$1(`VNode created with invalid key (NaN). VNode type:`, vnode.type);
  }
  if (isBlockTreeEnabled > 0 && // avoid a block node from tracking itself
  !isBlockNode && // has current parent block
  currentBlock && // presence of a patch flag indicates this node needs patching on updates.
  // component nodes also should always be patched, because even if the
  // component doesn't need to update, it needs to persist the instance on to
  // the next vnode so that it can be properly unmounted later.
  (vnode.patchFlag > 0 || shapeFlag & 6) && // the EVENTS flag is only for hydration and if it is the only flag, the
  // vnode should not be considered dynamic due to handler caching.
  vnode.patchFlag !== 32) {
    currentBlock.push(vnode);
  }
  return vnode;
}
const createVNode = createVNodeWithArgsTransform;
function _createVNode(type, props = null, children = null, patchFlag = 0, dynamicProps = null, isBlockNode = false) {
  if (!type || type === NULL_DYNAMIC_COMPONENT) {
    if (!type) {
      warn$1$1(`Invalid vnode type when creating vnode: ${type}.`);
    }
    type = Comment$1;
  }
  if (isVNode$1(type)) {
    const cloned = cloneVNode(
      type,
      props,
      true
      /* mergeRef: true */
    );
    if (children) {
      normalizeChildren(cloned, children);
    }
    if (isBlockTreeEnabled > 0 && !isBlockNode && currentBlock) {
      if (cloned.shapeFlag & 6) {
        currentBlock[currentBlock.indexOf(type)] = cloned;
      } else {
        currentBlock.push(cloned);
      }
    }
    cloned.patchFlag |= -2;
    return cloned;
  }
  if (isClassComponent(type)) {
    type = type.__vccOpts;
  }
  if (props) {
    props = guardReactiveProps(props);
    let { class: klass, style } = props;
    if (klass && !isString$2(klass)) {
      props.class = normalizeClass(klass);
    }
    if (isObject$3(style)) {
      if (isProxy(style) && !isArray$3(style)) {
        style = extend({}, style);
      }
      props.style = normalizeStyle(style);
    }
  }
  const shapeFlag = isString$2(type) ? 1 : isSuspense(type) ? 128 : isTeleport(type) ? 64 : isObject$3(type) ? 4 : isFunction$2(type) ? 2 : 0;
  if (shapeFlag & 4 && isProxy(type)) {
    type = toRaw(type);
    warn$1$1(
      `Vue received a Component that was made a reactive object. This can lead to unnecessary performance overhead and should be avoided by marking the component with \`markRaw\` or using \`shallowRef\` instead of \`ref\`.`,
      `
Component that was made reactive: `,
      type
    );
  }
  return createBaseVNode(
    type,
    props,
    children,
    patchFlag,
    dynamicProps,
    shapeFlag,
    isBlockNode,
    true
  );
}
function guardReactiveProps(props) {
  if (!props)
    return null;
  return isProxy(props) || InternalObjectKey in props ? extend({}, props) : props;
}
function cloneVNode(vnode, extraProps, mergeRef = false) {
  const { props, ref: ref3, patchFlag, children } = vnode;
  const mergedProps = extraProps ? mergeProps(props || {}, extraProps) : props;
  const cloned = {
    __v_isVNode: true,
    __v_skip: true,
    type: vnode.type,
    props: mergedProps,
    key: mergedProps && normalizeKey(mergedProps),
    ref: extraProps && extraProps.ref ? (
      // #2078 in the case of <component :is="vnode" ref="extra"/>
      // if the vnode itself already has a ref, cloneVNode will need to merge
      // the refs so the single vnode can be set on multiple refs
      mergeRef && ref3 ? isArray$3(ref3) ? ref3.concat(normalizeRef(extraProps)) : [ref3, normalizeRef(extraProps)] : normalizeRef(extraProps)
    ) : ref3,
    scopeId: vnode.scopeId,
    slotScopeIds: vnode.slotScopeIds,
    children: patchFlag === -1 && isArray$3(children) ? children.map(deepCloneVNode) : children,
    target: vnode.target,
    targetAnchor: vnode.targetAnchor,
    staticCount: vnode.staticCount,
    shapeFlag: vnode.shapeFlag,
    // if the vnode is cloned with extra props, we can no longer assume its
    // existing patch flag to be reliable and need to add the FULL_PROPS flag.
    // note: preserve flag for fragments since they use the flag for children
    // fast paths only.
    patchFlag: extraProps && vnode.type !== Fragment ? patchFlag === -1 ? 16 : patchFlag | 16 : patchFlag,
    dynamicProps: vnode.dynamicProps,
    dynamicChildren: vnode.dynamicChildren,
    appContext: vnode.appContext,
    dirs: vnode.dirs,
    transition: vnode.transition,
    // These should technically only be non-null on mounted VNodes. However,
    // they *should* be copied for kept-alive vnodes. So we just always copy
    // them since them being non-null during a mount doesn't affect the logic as
    // they will simply be overwritten.
    component: vnode.component,
    suspense: vnode.suspense,
    ssContent: vnode.ssContent && cloneVNode(vnode.ssContent),
    ssFallback: vnode.ssFallback && cloneVNode(vnode.ssFallback),
    el: vnode.el,
    anchor: vnode.anchor,
    ctx: vnode.ctx,
    ce: vnode.ce
  };
  return cloned;
}
function deepCloneVNode(vnode) {
  const cloned = cloneVNode(vnode);
  if (isArray$3(vnode.children)) {
    cloned.children = vnode.children.map(deepCloneVNode);
  }
  return cloned;
}
function createTextVNode(text = " ", flag = 0) {
  return createVNode(Text, null, text, flag);
}
function createCommentVNode(text = "", asBlock = false) {
  return asBlock ? (openBlock(), createBlock(Comment$1, null, text)) : createVNode(Comment$1, null, text);
}
function normalizeVNode(child) {
  if (child == null || typeof child === "boolean") {
    return createVNode(Comment$1);
  } else if (isArray$3(child)) {
    return createVNode(
      Fragment,
      null,
      // #3666, avoid reference pollution when reusing vnode
      child.slice()
    );
  } else if (typeof child === "object") {
    return cloneIfMounted(child);
  } else {
    return createVNode(Text, null, String(child));
  }
}
function cloneIfMounted(child) {
  return child.el === null && child.patchFlag !== -1 || child.memo ? child : cloneVNode(child);
}
function normalizeChildren(vnode, children) {
  let type = 0;
  const { shapeFlag } = vnode;
  if (children == null) {
    children = null;
  } else if (isArray$3(children)) {
    type = 16;
  } else if (typeof children === "object") {
    if (shapeFlag & (1 | 64)) {
      const slot = children.default;
      if (slot) {
        slot._c && (slot._d = false);
        normalizeChildren(vnode, slot());
        slot._c && (slot._d = true);
      }
      return;
    } else {
      type = 32;
      const slotFlag = children._;
      if (!slotFlag && !(InternalObjectKey in children)) {
        children._ctx = currentRenderingInstance;
      } else if (slotFlag === 3 && currentRenderingInstance) {
        if (currentRenderingInstance.slots._ === 1) {
          children._ = 1;
        } else {
          children._ = 2;
          vnode.patchFlag |= 1024;
        }
      }
    }
  } else if (isFunction$2(children)) {
    children = { default: children, _ctx: currentRenderingInstance };
    type = 32;
  } else {
    children = String(children);
    if (shapeFlag & 64) {
      type = 16;
      children = [createTextVNode(children)];
    } else {
      type = 8;
    }
  }
  vnode.children = children;
  vnode.shapeFlag |= type;
}
function mergeProps(...args) {
  const ret = {};
  for (let i3 = 0; i3 < args.length; i3++) {
    const toMerge = args[i3];
    for (const key in toMerge) {
      if (key === "class") {
        if (ret.class !== toMerge.class) {
          ret.class = normalizeClass([ret.class, toMerge.class]);
        }
      } else if (key === "style") {
        ret.style = normalizeStyle([ret.style, toMerge.style]);
      } else if (isOn(key)) {
        const existing = ret[key];
        const incoming = toMerge[key];
        if (incoming && existing !== incoming && !(isArray$3(existing) && existing.includes(incoming))) {
          ret[key] = existing ? [].concat(existing, incoming) : incoming;
        }
      } else if (key !== "") {
        ret[key] = toMerge[key];
      }
    }
  }
  return ret;
}
function invokeVNodeHook(hook, instance, vnode, prevVNode = null) {
  callWithAsyncErrorHandling(hook, instance, 7, [
    vnode,
    prevVNode
  ]);
}
const emptyAppContext = createAppContext();
let uid = 0;
function createComponentInstance(vnode, parent, suspense) {
  const type = vnode.type;
  const appContext = (parent ? parent.appContext : vnode.appContext) || emptyAppContext;
  const instance = {
    uid: uid++,
    vnode,
    type,
    parent,
    appContext,
    root: null,
    // to be immediately set
    next: null,
    subTree: null,
    // will be set synchronously right after creation
    effect: null,
    update: null,
    // will be set synchronously right after creation
    scope: new EffectScope(
      true
      /* detached */
    ),
    render: null,
    proxy: null,
    exposed: null,
    exposeProxy: null,
    withProxy: null,
    provides: parent ? parent.provides : Object.create(appContext.provides),
    accessCache: null,
    renderCache: [],
    // local resolved assets
    components: null,
    directives: null,
    // resolved props and emits options
    propsOptions: normalizePropsOptions(type, appContext),
    emitsOptions: normalizeEmitsOptions(type, appContext),
    // emit
    emit: null,
    // to be set immediately
    emitted: null,
    // props default value
    propsDefaults: EMPTY_OBJ,
    // inheritAttrs
    inheritAttrs: type.inheritAttrs,
    // state
    ctx: EMPTY_OBJ,
    data: EMPTY_OBJ,
    props: EMPTY_OBJ,
    attrs: EMPTY_OBJ,
    slots: EMPTY_OBJ,
    refs: EMPTY_OBJ,
    setupState: EMPTY_OBJ,
    setupContext: null,
    attrsProxy: null,
    slotsProxy: null,
    // suspense related
    suspense,
    suspenseId: suspense ? suspense.pendingId : 0,
    asyncDep: null,
    asyncResolved: false,
    // lifecycle hooks
    // not using enums here because it results in computed properties
    isMounted: false,
    isUnmounted: false,
    isDeactivated: false,
    bc: null,
    c: null,
    bm: null,
    m: null,
    bu: null,
    u: null,
    um: null,
    bum: null,
    da: null,
    a: null,
    rtg: null,
    rtc: null,
    ec: null,
    sp: null
  };
  {
    instance.ctx = createDevRenderContext(instance);
  }
  instance.root = parent ? parent.root : instance;
  instance.emit = emit.bind(null, instance);
  if (vnode.ce) {
    vnode.ce(instance);
  }
  return instance;
}
let currentInstance = null;
const getCurrentInstance = () => currentInstance || currentRenderingInstance;
let internalSetCurrentInstance;
let setInSSRSetupState;
{
  const g2 = getGlobalThis$1();
  const registerGlobalSetter = (key, setter) => {
    let setters;
    if (!(setters = g2[key]))
      setters = g2[key] = [];
    setters.push(setter);
    return (v2) => {
      if (setters.length > 1)
        setters.forEach((set2) => set2(v2));
      else
        setters[0](v2);
    };
  };
  internalSetCurrentInstance = registerGlobalSetter(
    `__VUE_INSTANCE_SETTERS__`,
    (v2) => currentInstance = v2
  );
  setInSSRSetupState = registerGlobalSetter(
    `__VUE_SSR_SETTERS__`,
    (v2) => isInSSRComponentSetup = v2
  );
}
const setCurrentInstance = (instance) => {
  const prev = currentInstance;
  internalSetCurrentInstance(instance);
  instance.scope.on();
  return () => {
    instance.scope.off();
    internalSetCurrentInstance(prev);
  };
};
const unsetCurrentInstance = () => {
  currentInstance && currentInstance.scope.off();
  internalSetCurrentInstance(null);
};
const isBuiltInTag = /* @__PURE__ */ makeMap("slot,component");
function validateComponentName(name, config2) {
  const appIsNativeTag = config2.isNativeTag || NO;
  if (isBuiltInTag(name) || appIsNativeTag(name)) {
    warn$1$1(
      "Do not use built-in or reserved HTML elements as component id: " + name
    );
  }
}
function isStatefulComponent(instance) {
  return instance.vnode.shapeFlag & 4;
}
let isInSSRComponentSetup = false;
function setupComponent(instance, isSSR = false) {
  isSSR && setInSSRSetupState(isSSR);
  const { props, children } = instance.vnode;
  const isStateful = isStatefulComponent(instance);
  initProps(instance, props, isStateful, isSSR);
  initSlots(instance, children);
  const setupResult = isStateful ? setupStatefulComponent(instance, isSSR) : void 0;
  isSSR && setInSSRSetupState(false);
  return setupResult;
}
function setupStatefulComponent(instance, isSSR) {
  var _a2;
  const Component = instance.type;
  {
    if (Component.name) {
      validateComponentName(Component.name, instance.appContext.config);
    }
    if (Component.components) {
      const names = Object.keys(Component.components);
      for (let i3 = 0; i3 < names.length; i3++) {
        validateComponentName(names[i3], instance.appContext.config);
      }
    }
    if (Component.directives) {
      const names = Object.keys(Component.directives);
      for (let i3 = 0; i3 < names.length; i3++) {
        validateDirectiveName(names[i3]);
      }
    }
    if (Component.compilerOptions && isRuntimeOnly()) {
      warn$1$1(
        `"compilerOptions" is only supported when using a build of Vue that includes the runtime compiler. Since you are using a runtime-only build, the options should be passed via your build tool config instead.`
      );
    }
  }
  instance.accessCache = /* @__PURE__ */ Object.create(null);
  instance.proxy = markRaw(new Proxy(instance.ctx, PublicInstanceProxyHandlers));
  {
    exposePropsOnRenderContext(instance);
  }
  const { setup } = Component;
  if (setup) {
    const setupContext = instance.setupContext = setup.length > 1 ? createSetupContext(instance) : null;
    const reset = setCurrentInstance(instance);
    pauseTracking();
    const setupResult = callWithErrorHandling(
      setup,
      instance,
      0,
      [
        shallowReadonly(instance.props),
        setupContext
      ]
    );
    resetTracking();
    reset();
    if (isPromise$1(setupResult)) {
      setupResult.then(unsetCurrentInstance, unsetCurrentInstance);
      if (isSSR) {
        return setupResult.then((resolvedResult) => {
          handleSetupResult(instance, resolvedResult, isSSR);
        }).catch((e3) => {
          handleError(e3, instance, 0);
        });
      } else {
        instance.asyncDep = setupResult;
        if (!instance.suspense) {
          const name = (_a2 = Component.name) != null ? _a2 : "Anonymous";
          warn$1$1(
            `Component <${name}>: setup function returned a promise, but no <Suspense> boundary was found in the parent component tree. A component with async setup() must be nested in a <Suspense> in order to be rendered.`
          );
        }
      }
    } else {
      handleSetupResult(instance, setupResult, isSSR);
    }
  } else {
    finishComponentSetup(instance, isSSR);
  }
}
function handleSetupResult(instance, setupResult, isSSR) {
  if (isFunction$2(setupResult)) {
    if (instance.type.__ssrInlineRender) {
      instance.ssrRender = setupResult;
    } else {
      instance.render = setupResult;
    }
  } else if (isObject$3(setupResult)) {
    if (isVNode$1(setupResult)) {
      warn$1$1(
        `setup() should not return VNodes directly - return a render function instead.`
      );
    }
    {
      instance.devtoolsRawSetupState = setupResult;
    }
    instance.setupState = proxyRefs(setupResult);
    {
      exposeSetupStateOnRenderContext(instance);
    }
  } else if (setupResult !== void 0) {
    warn$1$1(
      `setup() should return an object. Received: ${setupResult === null ? "null" : typeof setupResult}`
    );
  }
  finishComponentSetup(instance, isSSR);
}
let compile;
const isRuntimeOnly = () => !compile;
function finishComponentSetup(instance, isSSR, skipOptions) {
  const Component = instance.type;
  if (!instance.render) {
    if (!isSSR && compile && !Component.render) {
      const template = Component.template || resolveMergedOptions(instance).template;
      if (template) {
        {
          startMeasure(instance, `compile`);
        }
        const { isCustomElement, compilerOptions } = instance.appContext.config;
        const { delimiters, compilerOptions: componentCompilerOptions } = Component;
        const finalCompilerOptions = extend(
          extend(
            {
              isCustomElement,
              delimiters
            },
            compilerOptions
          ),
          componentCompilerOptions
        );
        Component.render = compile(template, finalCompilerOptions);
        {
          endMeasure(instance, `compile`);
        }
      }
    }
    instance.render = Component.render || NOOP;
  }
  {
    const reset = setCurrentInstance(instance);
    pauseTracking();
    try {
      applyOptions(instance);
    } finally {
      resetTracking();
      reset();
    }
  }
  if (!Component.render && instance.render === NOOP && !isSSR) {
    if (Component.template) {
      warn$1$1(
        `Component provided template option but runtime compilation is not supported in this build of Vue. Configure your bundler to alias "vue" to "vue/dist/vue.esm-bundler.js".`
      );
    } else {
      warn$1$1(`Component is missing template or render function.`);
    }
  }
}
function getAttrsProxy(instance) {
  return instance.attrsProxy || (instance.attrsProxy = new Proxy(
    instance.attrs,
    {
      get(target, key) {
        markAttrsAccessed();
        track(instance, "get", "$attrs");
        return target[key];
      },
      set() {
        warn$1$1(`setupContext.attrs is readonly.`);
        return false;
      },
      deleteProperty() {
        warn$1$1(`setupContext.attrs is readonly.`);
        return false;
      }
    }
  ));
}
function getSlotsProxy(instance) {
  return instance.slotsProxy || (instance.slotsProxy = new Proxy(instance.slots, {
    get(target, key) {
      track(instance, "get", "$slots");
      return target[key];
    }
  }));
}
function createSetupContext(instance) {
  const expose = (exposed) => {
    {
      if (instance.exposed) {
        warn$1$1(`expose() should be called only once per setup().`);
      }
      if (exposed != null) {
        let exposedType = typeof exposed;
        if (exposedType === "object") {
          if (isArray$3(exposed)) {
            exposedType = "array";
          } else if (isRef(exposed)) {
            exposedType = "ref";
          }
        }
        if (exposedType !== "object") {
          warn$1$1(
            `expose() should be passed a plain object, received ${exposedType}.`
          );
        }
      }
    }
    instance.exposed = exposed || {};
  };
  {
    return Object.freeze({
      get attrs() {
        return getAttrsProxy(instance);
      },
      get slots() {
        return getSlotsProxy(instance);
      },
      get emit() {
        return (event, ...args) => instance.emit(event, ...args);
      },
      expose
    });
  }
}
function getExposeProxy(instance) {
  if (instance.exposed) {
    return instance.exposeProxy || (instance.exposeProxy = new Proxy(proxyRefs(markRaw(instance.exposed)), {
      get(target, key) {
        if (key in target) {
          return target[key];
        } else if (key in publicPropertiesMap) {
          return publicPropertiesMap[key](instance);
        }
      },
      has(target, key) {
        return key in target || key in publicPropertiesMap;
      }
    }));
  }
}
const classifyRE = /(?:^|[-_])(\w)/g;
const classify = (str) => str.replace(classifyRE, (c3) => c3.toUpperCase()).replace(/[-_]/g, "");
function getComponentName(Component, includeInferred = true) {
  return isFunction$2(Component) ? Component.displayName || Component.name : Component.name || includeInferred && Component.__name;
}
function formatComponentName(instance, Component, isRoot = false) {
  let name = getComponentName(Component);
  if (!name && Component.__file) {
    const match2 = Component.__file.match(/([^/\\]+)\.\w+$/);
    if (match2) {
      name = match2[1];
    }
  }
  if (!name && instance && instance.parent) {
    const inferFromRegistry = (registry) => {
      for (const key in registry) {
        if (registry[key] === Component) {
          return key;
        }
      }
    };
    name = inferFromRegistry(
      instance.components || instance.parent.type.components
    ) || inferFromRegistry(instance.appContext.components);
  }
  return name ? classify(name) : isRoot ? `App` : `Anonymous`;
}
function isClassComponent(value) {
  return isFunction$2(value) && "__vccOpts" in value;
}
const computed = (getterOrOptions, debugOptions) => {
  return computed$1(getterOrOptions, debugOptions, isInSSRComponentSetup);
};
function h$3(type, propsOrChildren, children) {
  const l2 = arguments.length;
  if (l2 === 2) {
    if (isObject$3(propsOrChildren) && !isArray$3(propsOrChildren)) {
      if (isVNode$1(propsOrChildren)) {
        return createVNode(type, null, [propsOrChildren]);
      }
      return createVNode(type, propsOrChildren);
    } else {
      return createVNode(type, null, propsOrChildren);
    }
  } else {
    if (l2 > 3) {
      children = Array.prototype.slice.call(arguments, 2);
    } else if (l2 === 3 && isVNode$1(children)) {
      children = [children];
    }
    return createVNode(type, propsOrChildren, children);
  }
}
function isShallow2(value) {
  return !!(value && value["__v_isShallow"]);
}
function initCustomFormatter() {
  if (typeof window === "undefined") {
    return;
  }
  const vueStyle = { style: "color:#3ba776" };
  const numberStyle = { style: "color:#1677ff" };
  const stringStyle = { style: "color:#f5222d" };
  const keywordStyle = { style: "color:#eb2f96" };
  const formatter = {
    header(obj) {
      if (!isObject$3(obj)) {
        return null;
      }
      if (obj.__isVue) {
        return ["div", vueStyle, `VueInstance`];
      } else if (isRef(obj)) {
        return [
          "div",
          {},
          ["span", vueStyle, genRefFlag(obj)],
          "<",
          formatValue(obj.value),
          `>`
        ];
      } else if (isReactive(obj)) {
        return [
          "div",
          {},
          ["span", vueStyle, isShallow2(obj) ? "ShallowReactive" : "Reactive"],
          "<",
          formatValue(obj),
          `>${isReadonly(obj) ? ` (readonly)` : ``}`
        ];
      } else if (isReadonly(obj)) {
        return [
          "div",
          {},
          ["span", vueStyle, isShallow2(obj) ? "ShallowReadonly" : "Readonly"],
          "<",
          formatValue(obj),
          ">"
        ];
      }
      return null;
    },
    hasBody(obj) {
      return obj && obj.__isVue;
    },
    body(obj) {
      if (obj && obj.__isVue) {
        return [
          "div",
          {},
          ...formatInstance(obj.$)
        ];
      }
    }
  };
  function formatInstance(instance) {
    const blocks = [];
    if (instance.type.props && instance.props) {
      blocks.push(createInstanceBlock("props", toRaw(instance.props)));
    }
    if (instance.setupState !== EMPTY_OBJ) {
      blocks.push(createInstanceBlock("setup", instance.setupState));
    }
    if (instance.data !== EMPTY_OBJ) {
      blocks.push(createInstanceBlock("data", toRaw(instance.data)));
    }
    const computed2 = extractKeys(instance, "computed");
    if (computed2) {
      blocks.push(createInstanceBlock("computed", computed2));
    }
    const injected = extractKeys(instance, "inject");
    if (injected) {
      blocks.push(createInstanceBlock("injected", injected));
    }
    blocks.push([
      "div",
      {},
      [
        "span",
        {
          style: keywordStyle.style + ";opacity:0.66"
        },
        "$ (internal): "
      ],
      ["object", { object: instance }]
    ]);
    return blocks;
  }
  function createInstanceBlock(type, target) {
    target = extend({}, target);
    if (!Object.keys(target).length) {
      return ["span", {}];
    }
    return [
      "div",
      { style: "line-height:1.25em;margin-bottom:0.6em" },
      [
        "div",
        {
          style: "color:#476582"
        },
        type
      ],
      [
        "div",
        {
          style: "padding-left:1.25em"
        },
        ...Object.keys(target).map((key) => {
          return [
            "div",
            {},
            ["span", keywordStyle, key + ": "],
            formatValue(target[key], false)
          ];
        })
      ]
    ];
  }
  function formatValue(v2, asRaw = true) {
    if (typeof v2 === "number") {
      return ["span", numberStyle, v2];
    } else if (typeof v2 === "string") {
      return ["span", stringStyle, JSON.stringify(v2)];
    } else if (typeof v2 === "boolean") {
      return ["span", keywordStyle, v2];
    } else if (isObject$3(v2)) {
      return ["object", { object: asRaw ? toRaw(v2) : v2 }];
    } else {
      return ["span", stringStyle, String(v2)];
    }
  }
  function extractKeys(instance, type) {
    const Comp = instance.type;
    if (isFunction$2(Comp)) {
      return;
    }
    const extracted = {};
    for (const key in instance.ctx) {
      if (isKeyOfType(Comp, key, type)) {
        extracted[key] = instance.ctx[key];
      }
    }
    return extracted;
  }
  function isKeyOfType(Comp, key, type) {
    const opts = Comp[type];
    if (isArray$3(opts) && opts.includes(key) || isObject$3(opts) && key in opts) {
      return true;
    }
    if (Comp.extends && isKeyOfType(Comp.extends, key, type)) {
      return true;
    }
    if (Comp.mixins && Comp.mixins.some((m4) => isKeyOfType(m4, key, type))) {
      return true;
    }
  }
  function genRefFlag(v2) {
    if (isShallow2(v2)) {
      return `ShallowRef`;
    }
    if (v2.effect) {
      return `ComputedRef`;
    }
    return `Ref`;
  }
  if (window.devtoolsFormatters) {
    window.devtoolsFormatters.push(formatter);
  } else {
    window.devtoolsFormatters = [formatter];
  }
}
const version$1 = "3.4.7";
const warn$3 = warn$1$1;
const svgNS = "http://www.w3.org/2000/svg";
const mathmlNS = "http://www.w3.org/1998/Math/MathML";
const doc = typeof document !== "undefined" ? document : null;
const templateContainer = doc && /* @__PURE__ */ doc.createElement("template");
const nodeOps = {
  insert: (child, parent, anchor) => {
    parent.insertBefore(child, anchor || null);
  },
  remove: (child) => {
    const parent = child.parentNode;
    if (parent) {
      parent.removeChild(child);
    }
  },
  createElement: (tag, namespace, is2, props) => {
    const el3 = namespace === "svg" ? doc.createElementNS(svgNS, tag) : namespace === "mathml" ? doc.createElementNS(mathmlNS, tag) : doc.createElement(tag, is2 ? { is: is2 } : void 0);
    if (tag === "select" && props && props.multiple != null) {
      el3.setAttribute("multiple", props.multiple);
    }
    return el3;
  },
  createText: (text) => doc.createTextNode(text),
  createComment: (text) => doc.createComment(text),
  setText: (node, text) => {
    node.nodeValue = text;
  },
  setElementText: (el3, text) => {
    el3.textContent = text;
  },
  parentNode: (node) => node.parentNode,
  nextSibling: (node) => node.nextSibling,
  querySelector: (selector) => doc.querySelector(selector),
  setScopeId(el3, id2) {
    el3.setAttribute(id2, "");
  },
  // __UNSAFE__
  // Reason: innerHTML.
  // Static content here can only come from compiled templates.
  // As long as the user only uses trusted templates, this is safe.
  insertStaticContent(content, parent, anchor, namespace, start, end) {
    const before = anchor ? anchor.previousSibling : parent.lastChild;
    if (start && (start === end || start.nextSibling)) {
      while (true) {
        parent.insertBefore(start.cloneNode(true), anchor);
        if (start === end || !(start = start.nextSibling))
          break;
      }
    } else {
      templateContainer.innerHTML = namespace === "svg" ? `<svg>${content}</svg>` : namespace === "mathml" ? `<math>${content}</math>` : content;
      const template = templateContainer.content;
      if (namespace === "svg" || namespace === "mathml") {
        const wrapper = template.firstChild;
        while (wrapper.firstChild) {
          template.appendChild(wrapper.firstChild);
        }
        template.removeChild(wrapper);
      }
      parent.insertBefore(template, anchor);
    }
    return [
      // first
      before ? before.nextSibling : parent.firstChild,
      // last
      anchor ? anchor.previousSibling : parent.lastChild
    ];
  }
};
const TRANSITION = "transition";
const ANIMATION = "animation";
const vtcKey = Symbol("_vtc");
const Transition = (props, { slots }) => h$3(BaseTransition, resolveTransitionProps(props), slots);
Transition.displayName = "Transition";
const DOMTransitionPropsValidators = {
  name: String,
  type: String,
  css: {
    type: Boolean,
    default: true
  },
  duration: [String, Number, Object],
  enterFromClass: String,
  enterActiveClass: String,
  enterToClass: String,
  appearFromClass: String,
  appearActiveClass: String,
  appearToClass: String,
  leaveFromClass: String,
  leaveActiveClass: String,
  leaveToClass: String
};
Transition.props = /* @__PURE__ */ extend(
  {},
  BaseTransitionPropsValidators,
  DOMTransitionPropsValidators
);
const callHook = (hook, args = []) => {
  if (isArray$3(hook)) {
    hook.forEach((h22) => h22(...args));
  } else if (hook) {
    hook(...args);
  }
};
const hasExplicitCallback = (hook) => {
  return hook ? isArray$3(hook) ? hook.some((h22) => h22.length > 1) : hook.length > 1 : false;
};
function resolveTransitionProps(rawProps) {
  const baseProps = {};
  for (const key in rawProps) {
    if (!(key in DOMTransitionPropsValidators)) {
      baseProps[key] = rawProps[key];
    }
  }
  if (rawProps.css === false) {
    return baseProps;
  }
  const {
    name = "v",
    type,
    duration,
    enterFromClass = `${name}-enter-from`,
    enterActiveClass = `${name}-enter-active`,
    enterToClass = `${name}-enter-to`,
    appearFromClass = enterFromClass,
    appearActiveClass = enterActiveClass,
    appearToClass = enterToClass,
    leaveFromClass = `${name}-leave-from`,
    leaveActiveClass = `${name}-leave-active`,
    leaveToClass = `${name}-leave-to`
  } = rawProps;
  const durations = normalizeDuration(duration);
  const enterDuration = durations && durations[0];
  const leaveDuration = durations && durations[1];
  const {
    onBeforeEnter,
    onEnter,
    onEnterCancelled,
    onLeave,
    onLeaveCancelled,
    onBeforeAppear = onBeforeEnter,
    onAppear = onEnter,
    onAppearCancelled = onEnterCancelled
  } = baseProps;
  const finishEnter = (el3, isAppear, done) => {
    removeTransitionClass(el3, isAppear ? appearToClass : enterToClass);
    removeTransitionClass(el3, isAppear ? appearActiveClass : enterActiveClass);
    done && done();
  };
  const finishLeave = (el3, done) => {
    el3._isLeaving = false;
    removeTransitionClass(el3, leaveFromClass);
    removeTransitionClass(el3, leaveToClass);
    removeTransitionClass(el3, leaveActiveClass);
    done && done();
  };
  const makeEnterHook = (isAppear) => {
    return (el3, done) => {
      const hook = isAppear ? onAppear : onEnter;
      const resolve2 = () => finishEnter(el3, isAppear, done);
      callHook(hook, [el3, resolve2]);
      nextFrame(() => {
        removeTransitionClass(el3, isAppear ? appearFromClass : enterFromClass);
        addTransitionClass(el3, isAppear ? appearToClass : enterToClass);
        if (!hasExplicitCallback(hook)) {
          whenTransitionEnds(el3, type, enterDuration, resolve2);
        }
      });
    };
  };
  return extend(baseProps, {
    onBeforeEnter(el3) {
      callHook(onBeforeEnter, [el3]);
      addTransitionClass(el3, enterFromClass);
      addTransitionClass(el3, enterActiveClass);
    },
    onBeforeAppear(el3) {
      callHook(onBeforeAppear, [el3]);
      addTransitionClass(el3, appearFromClass);
      addTransitionClass(el3, appearActiveClass);
    },
    onEnter: makeEnterHook(false),
    onAppear: makeEnterHook(true),
    onLeave(el3, done) {
      el3._isLeaving = true;
      const resolve2 = () => finishLeave(el3, done);
      addTransitionClass(el3, leaveFromClass);
      forceReflow();
      addTransitionClass(el3, leaveActiveClass);
      nextFrame(() => {
        if (!el3._isLeaving) {
          return;
        }
        removeTransitionClass(el3, leaveFromClass);
        addTransitionClass(el3, leaveToClass);
        if (!hasExplicitCallback(onLeave)) {
          whenTransitionEnds(el3, type, leaveDuration, resolve2);
        }
      });
      callHook(onLeave, [el3, resolve2]);
    },
    onEnterCancelled(el3) {
      finishEnter(el3, false);
      callHook(onEnterCancelled, [el3]);
    },
    onAppearCancelled(el3) {
      finishEnter(el3, true);
      callHook(onAppearCancelled, [el3]);
    },
    onLeaveCancelled(el3) {
      finishLeave(el3);
      callHook(onLeaveCancelled, [el3]);
    }
  });
}
function normalizeDuration(duration) {
  if (duration == null) {
    return null;
  } else if (isObject$3(duration)) {
    return [NumberOf(duration.enter), NumberOf(duration.leave)];
  } else {
    const n2 = NumberOf(duration);
    return [n2, n2];
  }
}
function NumberOf(val) {
  const res = toNumber(val);
  {
    assertNumber(res, "<transition> explicit duration");
  }
  return res;
}
function addTransitionClass(el3, cls) {
  cls.split(/\s+/).forEach((c3) => c3 && el3.classList.add(c3));
  (el3[vtcKey] || (el3[vtcKey] = /* @__PURE__ */ new Set())).add(cls);
}
function removeTransitionClass(el3, cls) {
  cls.split(/\s+/).forEach((c3) => c3 && el3.classList.remove(c3));
  const _vtc = el3[vtcKey];
  if (_vtc) {
    _vtc.delete(cls);
    if (!_vtc.size) {
      el3[vtcKey] = void 0;
    }
  }
}
function nextFrame(cb) {
  requestAnimationFrame(() => {
    requestAnimationFrame(cb);
  });
}
let endId = 0;
function whenTransitionEnds(el3, expectedType, explicitTimeout, resolve2) {
  const id2 = el3._endId = ++endId;
  const resolveIfNotStale = () => {
    if (id2 === el3._endId) {
      resolve2();
    }
  };
  if (explicitTimeout) {
    return setTimeout(resolveIfNotStale, explicitTimeout);
  }
  const { type, timeout, propCount } = getTransitionInfo(el3, expectedType);
  if (!type) {
    return resolve2();
  }
  const endEvent = type + "end";
  let ended = 0;
  const end = () => {
    el3.removeEventListener(endEvent, onEnd);
    resolveIfNotStale();
  };
  const onEnd = (e3) => {
    if (e3.target === el3 && ++ended >= propCount) {
      end();
    }
  };
  setTimeout(() => {
    if (ended < propCount) {
      end();
    }
  }, timeout + 1);
  el3.addEventListener(endEvent, onEnd);
}
function getTransitionInfo(el3, expectedType) {
  const styles = window.getComputedStyle(el3);
  const getStyleProperties = (key) => (styles[key] || "").split(", ");
  const transitionDelays = getStyleProperties(`${TRANSITION}Delay`);
  const transitionDurations = getStyleProperties(`${TRANSITION}Duration`);
  const transitionTimeout = getTimeout(transitionDelays, transitionDurations);
  const animationDelays = getStyleProperties(`${ANIMATION}Delay`);
  const animationDurations = getStyleProperties(`${ANIMATION}Duration`);
  const animationTimeout = getTimeout(animationDelays, animationDurations);
  let type = null;
  let timeout = 0;
  let propCount = 0;
  if (expectedType === TRANSITION) {
    if (transitionTimeout > 0) {
      type = TRANSITION;
      timeout = transitionTimeout;
      propCount = transitionDurations.length;
    }
  } else if (expectedType === ANIMATION) {
    if (animationTimeout > 0) {
      type = ANIMATION;
      timeout = animationTimeout;
      propCount = animationDurations.length;
    }
  } else {
    timeout = Math.max(transitionTimeout, animationTimeout);
    type = timeout > 0 ? transitionTimeout > animationTimeout ? TRANSITION : ANIMATION : null;
    propCount = type ? type === TRANSITION ? transitionDurations.length : animationDurations.length : 0;
  }
  const hasTransform = type === TRANSITION && /\b(transform|all)(,|$)/.test(
    getStyleProperties(`${TRANSITION}Property`).toString()
  );
  return {
    type,
    timeout,
    propCount,
    hasTransform
  };
}
function getTimeout(delays, durations) {
  while (delays.length < durations.length) {
    delays = delays.concat(delays);
  }
  return Math.max(...durations.map((d4, i3) => toMs(d4) + toMs(delays[i3])));
}
function toMs(s5) {
  if (s5 === "auto")
    return 0;
  return Number(s5.slice(0, -1).replace(",", ".")) * 1e3;
}
function forceReflow() {
  return document.body.offsetHeight;
}
function patchClass(el3, value, isSVG) {
  const transitionClasses = el3[vtcKey];
  if (transitionClasses) {
    value = (value ? [value, ...transitionClasses] : [...transitionClasses]).join(" ");
  }
  if (value == null) {
    el3.removeAttribute("class");
  } else if (isSVG) {
    el3.setAttribute("class", value);
  } else {
    el3.className = value;
  }
}
const vShowOldKey = Symbol("_vod");
const vShow = {
  beforeMount(el3, { value }, { transition }) {
    el3[vShowOldKey] = el3.style.display === "none" ? "" : el3.style.display;
    if (transition && value) {
      transition.beforeEnter(el3);
    } else {
      setDisplay(el3, value);
    }
  },
  mounted(el3, { value }, { transition }) {
    if (transition && value) {
      transition.enter(el3);
    }
  },
  updated(el3, { value, oldValue }, { transition }) {
    if (!value === !oldValue)
      return;
    if (transition) {
      if (value) {
        transition.beforeEnter(el3);
        setDisplay(el3, true);
        transition.enter(el3);
      } else {
        transition.leave(el3, () => {
          setDisplay(el3, false);
        });
      }
    } else {
      setDisplay(el3, value);
    }
  },
  beforeUnmount(el3, { value }) {
    setDisplay(el3, value);
  }
};
{
  vShow.name = "show";
}
function setDisplay(el3, value) {
  el3.style.display = value ? el3[vShowOldKey] : "none";
}
const CSS_VAR_TEXT = Symbol("CSS_VAR_TEXT");
function useCssVars(getter) {
  const instance = getCurrentInstance();
  if (!instance) {
    warn$3(`useCssVars is called without current active component instance.`);
    return;
  }
  const updateTeleports = instance.ut = (vars = getter(instance.proxy)) => {
    Array.from(
      document.querySelectorAll(`[data-v-owner="${instance.uid}"]`)
    ).forEach((node) => setVarsOnNode(node, vars));
  };
  const setVars = () => {
    const vars = getter(instance.proxy);
    setVarsOnVNode(instance.subTree, vars);
    updateTeleports(vars);
  };
  watchPostEffect(setVars);
  onMounted(() => {
    const ob = new MutationObserver(setVars);
    ob.observe(instance.subTree.el.parentNode, { childList: true });
    onUnmounted(() => ob.disconnect());
  });
}
function setVarsOnVNode(vnode, vars) {
  if (vnode.shapeFlag & 128) {
    const suspense = vnode.suspense;
    vnode = suspense.activeBranch;
    if (suspense.pendingBranch && !suspense.isHydrating) {
      suspense.effects.push(() => {
        setVarsOnVNode(suspense.activeBranch, vars);
      });
    }
  }
  while (vnode.component) {
    vnode = vnode.component.subTree;
  }
  if (vnode.shapeFlag & 1 && vnode.el) {
    setVarsOnNode(vnode.el, vars);
  } else if (vnode.type === Fragment) {
    vnode.children.forEach((c3) => setVarsOnVNode(c3, vars));
  } else if (vnode.type === Static) {
    let { el: el3, anchor } = vnode;
    while (el3) {
      setVarsOnNode(el3, vars);
      if (el3 === anchor)
        break;
      el3 = el3.nextSibling;
    }
  }
}
function setVarsOnNode(el3, vars) {
  if (el3.nodeType === 1) {
    const style = el3.style;
    let cssText = "";
    for (const key in vars) {
      style.setProperty(`--${key}`, vars[key]);
      cssText += `--${key}: ${vars[key]};`;
    }
    style[CSS_VAR_TEXT] = cssText;
  }
}
function patchStyle(el3, prev, next) {
  const style = el3.style;
  const isCssString = isString$2(next);
  if (next && !isCssString) {
    if (prev && !isString$2(prev)) {
      for (const key in prev) {
        if (next[key] == null) {
          setStyle(style, key, "");
        }
      }
    }
    for (const key in next) {
      setStyle(style, key, next[key]);
    }
  } else {
    const currentDisplay = style.display;
    if (isCssString) {
      if (prev !== next) {
        const cssVarText = style[CSS_VAR_TEXT];
        if (cssVarText) {
          next += ";" + cssVarText;
        }
        style.cssText = next;
      }
    } else if (prev) {
      el3.removeAttribute("style");
    }
    if (vShowOldKey in el3) {
      style.display = currentDisplay;
    }
  }
}
const semicolonRE = /[^\\];\s*$/;
const importantRE = /\s*!important$/;
function setStyle(style, name, val) {
  if (isArray$3(val)) {
    val.forEach((v2) => setStyle(style, name, v2));
  } else {
    if (val == null)
      val = "";
    {
      if (semicolonRE.test(val)) {
        warn$3(
          `Unexpected semicolon at the end of '${name}' style value: '${val}'`
        );
      }
    }
    if (name.startsWith("--")) {
      style.setProperty(name, val);
    } else {
      const prefixed = autoPrefix(style, name);
      if (importantRE.test(val)) {
        style.setProperty(
          hyphenate(prefixed),
          val.replace(importantRE, ""),
          "important"
        );
      } else {
        style[prefixed] = val;
      }
    }
  }
}
const prefixes = ["Webkit", "Moz", "ms"];
const prefixCache = {};
function autoPrefix(style, rawName) {
  const cached = prefixCache[rawName];
  if (cached) {
    return cached;
  }
  let name = camelize(rawName);
  if (name !== "filter" && name in style) {
    return prefixCache[rawName] = name;
  }
  name = capitalize$1(name);
  for (let i3 = 0; i3 < prefixes.length; i3++) {
    const prefixed = prefixes[i3] + name;
    if (prefixed in style) {
      return prefixCache[rawName] = prefixed;
    }
  }
  return rawName;
}
const xlinkNS = "http://www.w3.org/1999/xlink";
function patchAttr(el3, key, value, isSVG, instance) {
  if (isSVG && key.startsWith("xlink:")) {
    if (value == null) {
      el3.removeAttributeNS(xlinkNS, key.slice(6, key.length));
    } else {
      el3.setAttributeNS(xlinkNS, key, value);
    }
  } else {
    const isBoolean2 = isSpecialBooleanAttr(key);
    if (value == null || isBoolean2 && !includeBooleanAttr(value)) {
      el3.removeAttribute(key);
    } else {
      el3.setAttribute(key, isBoolean2 ? "" : value);
    }
  }
}
function patchDOMProp(el3, key, value, prevChildren, parentComponent, parentSuspense, unmountChildren) {
  if (key === "innerHTML" || key === "textContent") {
    if (prevChildren) {
      unmountChildren(prevChildren, parentComponent, parentSuspense);
    }
    el3[key] = value == null ? "" : value;
    return;
  }
  const tag = el3.tagName;
  if (key === "value" && tag !== "PROGRESS" && // custom elements may use _value internally
  !tag.includes("-")) {
    el3._value = value;
    const oldValue = tag === "OPTION" ? el3.getAttribute("value") : el3.value;
    const newValue = value == null ? "" : value;
    if (oldValue !== newValue) {
      el3.value = newValue;
    }
    if (value == null) {
      el3.removeAttribute(key);
    }
    return;
  }
  let needRemove = false;
  if (value === "" || value == null) {
    const type = typeof el3[key];
    if (type === "boolean") {
      value = includeBooleanAttr(value);
    } else if (value == null && type === "string") {
      value = "";
      needRemove = true;
    } else if (type === "number") {
      value = 0;
      needRemove = true;
    }
  }
  try {
    el3[key] = value;
  } catch (e3) {
    if (!needRemove) {
      warn$3(
        `Failed setting prop "${key}" on <${tag.toLowerCase()}>: value ${value} is invalid.`,
        e3
      );
    }
  }
  needRemove && el3.removeAttribute(key);
}
function addEventListener(el3, event, handler, options) {
  el3.addEventListener(event, handler, options);
}
function removeEventListener(el3, event, handler, options) {
  el3.removeEventListener(event, handler, options);
}
const veiKey = Symbol("_vei");
function patchEvent(el3, rawName, prevValue, nextValue, instance = null) {
  const invokers = el3[veiKey] || (el3[veiKey] = {});
  const existingInvoker = invokers[rawName];
  if (nextValue && existingInvoker) {
    existingInvoker.value = nextValue;
  } else {
    const [name, options] = parseName(rawName);
    if (nextValue) {
      const invoker = invokers[rawName] = createInvoker(nextValue, instance);
      addEventListener(el3, name, invoker, options);
    } else if (existingInvoker) {
      removeEventListener(el3, name, existingInvoker, options);
      invokers[rawName] = void 0;
    }
  }
}
const optionsModifierRE = /(?:Once|Passive|Capture)$/;
function parseName(name) {
  let options;
  if (optionsModifierRE.test(name)) {
    options = {};
    let m4;
    while (m4 = name.match(optionsModifierRE)) {
      name = name.slice(0, name.length - m4[0].length);
      options[m4[0].toLowerCase()] = true;
    }
  }
  const event = name[2] === ":" ? name.slice(3) : hyphenate(name.slice(2));
  return [event, options];
}
let cachedNow = 0;
const p$2 = /* @__PURE__ */ Promise.resolve();
const getNow = () => cachedNow || (p$2.then(() => cachedNow = 0), cachedNow = Date.now());
function createInvoker(initialValue, instance) {
  const invoker = (e3) => {
    if (!e3._vts) {
      e3._vts = Date.now();
    } else if (e3._vts <= invoker.attached) {
      return;
    }
    callWithAsyncErrorHandling(
      patchStopImmediatePropagation(e3, invoker.value),
      instance,
      5,
      [e3]
    );
  };
  invoker.value = initialValue;
  invoker.attached = getNow();
  return invoker;
}
function patchStopImmediatePropagation(e3, value) {
  if (isArray$3(value)) {
    const originalStop = e3.stopImmediatePropagation;
    e3.stopImmediatePropagation = () => {
      originalStop.call(e3);
      e3._stopped = true;
    };
    return value.map((fn2) => (e22) => !e22._stopped && fn2 && fn2(e22));
  } else {
    return value;
  }
}
const isNativeOn = (key) => key.charCodeAt(0) === 111 && key.charCodeAt(1) === 110 && // lowercase letter
key.charCodeAt(2) > 96 && key.charCodeAt(2) < 123;
const patchProp = (el3, key, prevValue, nextValue, namespace, prevChildren, parentComponent, parentSuspense, unmountChildren) => {
  const isSVG = namespace === "svg";
  if (key === "class") {
    patchClass(el3, nextValue, isSVG);
  } else if (key === "style") {
    patchStyle(el3, prevValue, nextValue);
  } else if (isOn(key)) {
    if (!isModelListener(key)) {
      patchEvent(el3, key, prevValue, nextValue, parentComponent);
    }
  } else if (key[0] === "." ? (key = key.slice(1), true) : key[0] === "^" ? (key = key.slice(1), false) : shouldSetAsProp(el3, key, nextValue, isSVG)) {
    patchDOMProp(
      el3,
      key,
      nextValue,
      prevChildren,
      parentComponent,
      parentSuspense,
      unmountChildren
    );
  } else {
    if (key === "true-value") {
      el3._trueValue = nextValue;
    } else if (key === "false-value") {
      el3._falseValue = nextValue;
    }
    patchAttr(el3, key, nextValue, isSVG);
  }
};
function shouldSetAsProp(el3, key, value, isSVG) {
  if (isSVG) {
    if (key === "innerHTML" || key === "textContent") {
      return true;
    }
    if (key in el3 && isNativeOn(key) && isFunction$2(value)) {
      return true;
    }
    return false;
  }
  if (key === "spellcheck" || key === "draggable" || key === "translate") {
    return false;
  }
  if (key === "form") {
    return false;
  }
  if (key === "list" && el3.tagName === "INPUT") {
    return false;
  }
  if (key === "type" && el3.tagName === "TEXTAREA") {
    return false;
  }
  if (key === "width" || key === "height") {
    const tag = el3.tagName;
    if (tag === "IMG" || tag === "VIDEO" || tag === "CANVAS" || tag === "SOURCE") {
      return false;
    }
  }
  if (isNativeOn(key) && isString$2(value)) {
    return false;
  }
  return key in el3;
}
const getModelAssigner = (vnode) => {
  const fn2 = vnode.props["onUpdate:modelValue"] || false;
  return isArray$3(fn2) ? (value) => invokeArrayFns(fn2, value) : fn2;
};
function onCompositionStart(e3) {
  e3.target.composing = true;
}
function onCompositionEnd(e3) {
  const target = e3.target;
  if (target.composing) {
    target.composing = false;
    target.dispatchEvent(new Event("input"));
  }
}
const assignKey = Symbol("_assign");
const vModelText = {
  created(el3, { modifiers: { lazy, trim, number: number2 } }, vnode) {
    el3[assignKey] = getModelAssigner(vnode);
    const castToNumber = number2 || vnode.props && vnode.props.type === "number";
    addEventListener(el3, lazy ? "change" : "input", (e3) => {
      if (e3.target.composing)
        return;
      let domValue = el3.value;
      if (trim) {
        domValue = domValue.trim();
      }
      if (castToNumber) {
        domValue = looseToNumber(domValue);
      }
      el3[assignKey](domValue);
    });
    if (trim) {
      addEventListener(el3, "change", () => {
        el3.value = el3.value.trim();
      });
    }
    if (!lazy) {
      addEventListener(el3, "compositionstart", onCompositionStart);
      addEventListener(el3, "compositionend", onCompositionEnd);
      addEventListener(el3, "change", onCompositionEnd);
    }
  },
  // set value on mounted so it's after min/max for type="range"
  mounted(el3, { value }) {
    el3.value = value == null ? "" : value;
  },
  beforeUpdate(el3, { value, modifiers: { lazy, trim, number: number2 } }, vnode) {
    el3[assignKey] = getModelAssigner(vnode);
    if (el3.composing)
      return;
    const elValue = number2 || el3.type === "number" ? looseToNumber(el3.value) : el3.value;
    const newValue = value == null ? "" : value;
    if (elValue === newValue) {
      return;
    }
    if (document.activeElement === el3 && el3.type !== "range") {
      if (lazy) {
        return;
      }
      if (trim && el3.value.trim() === newValue) {
        return;
      }
    }
    el3.value = newValue;
  }
};
const vModelCheckbox = {
  // #4096 array checkboxes need to be deep traversed
  deep: true,
  created(el3, _2, vnode) {
    el3[assignKey] = getModelAssigner(vnode);
    addEventListener(el3, "change", () => {
      const modelValue = el3._modelValue;
      const elementValue = getValue(el3);
      const checked = el3.checked;
      const assign2 = el3[assignKey];
      if (isArray$3(modelValue)) {
        const index = looseIndexOf(modelValue, elementValue);
        const found = index !== -1;
        if (checked && !found) {
          assign2(modelValue.concat(elementValue));
        } else if (!checked && found) {
          const filtered = [...modelValue];
          filtered.splice(index, 1);
          assign2(filtered);
        }
      } else if (isSet(modelValue)) {
        const cloned = new Set(modelValue);
        if (checked) {
          cloned.add(elementValue);
        } else {
          cloned.delete(elementValue);
        }
        assign2(cloned);
      } else {
        assign2(getCheckboxValue(el3, checked));
      }
    });
  },
  // set initial checked on mount to wait for true-value/false-value
  mounted: setChecked,
  beforeUpdate(el3, binding, vnode) {
    el3[assignKey] = getModelAssigner(vnode);
    setChecked(el3, binding, vnode);
  }
};
function setChecked(el3, { value, oldValue }, vnode) {
  el3._modelValue = value;
  if (isArray$3(value)) {
    el3.checked = looseIndexOf(value, vnode.props.value) > -1;
  } else if (isSet(value)) {
    el3.checked = value.has(vnode.props.value);
  } else if (value !== oldValue) {
    el3.checked = looseEqual(value, getCheckboxValue(el3, true));
  }
}
const vModelRadio = {
  created(el3, { value }, vnode) {
    el3.checked = looseEqual(value, vnode.props.value);
    el3[assignKey] = getModelAssigner(vnode);
    addEventListener(el3, "change", () => {
      el3[assignKey](getValue(el3));
    });
  },
  beforeUpdate(el3, { value, oldValue }, vnode) {
    el3[assignKey] = getModelAssigner(vnode);
    if (value !== oldValue) {
      el3.checked = looseEqual(value, vnode.props.value);
    }
  }
};
const vModelSelect = {
  // <select multiple> value need to be deep traversed
  deep: true,
  created(el3, { value, modifiers: { number: number2 } }, vnode) {
    const isSetModel = isSet(value);
    addEventListener(el3, "change", () => {
      const selectedVal = Array.prototype.filter.call(el3.options, (o2) => o2.selected).map(
        (o2) => number2 ? looseToNumber(getValue(o2)) : getValue(o2)
      );
      el3[assignKey](
        el3.multiple ? isSetModel ? new Set(selectedVal) : selectedVal : selectedVal[0]
      );
    });
    el3[assignKey] = getModelAssigner(vnode);
  },
  // set value in mounted & updated because <select> relies on its children
  // <option>s.
  mounted(el3, { value }) {
    setSelected(el3, value);
  },
  beforeUpdate(el3, _binding, vnode) {
    el3[assignKey] = getModelAssigner(vnode);
  },
  updated(el3, { value }) {
    setSelected(el3, value);
  }
};
function setSelected(el3, value) {
  const isMultiple = el3.multiple;
  if (isMultiple && !isArray$3(value) && !isSet(value)) {
    warn$3(
      `<select multiple v-model> expects an Array or Set value for its binding, but got ${Object.prototype.toString.call(value).slice(8, -1)}.`
    );
    return;
  }
  for (let i3 = 0, l2 = el3.options.length; i3 < l2; i3++) {
    const option = el3.options[i3];
    const optionValue = getValue(option);
    if (isMultiple) {
      if (isArray$3(value)) {
        option.selected = looseIndexOf(value, optionValue) > -1;
      } else {
        option.selected = value.has(optionValue);
      }
    } else {
      if (looseEqual(getValue(option), value)) {
        if (el3.selectedIndex !== i3)
          el3.selectedIndex = i3;
        return;
      }
    }
  }
  if (!isMultiple && el3.selectedIndex !== -1) {
    el3.selectedIndex = -1;
  }
}
function getValue(el3) {
  return "_value" in el3 ? el3._value : el3.value;
}
function getCheckboxValue(el3, checked) {
  const key = checked ? "_trueValue" : "_falseValue";
  return key in el3 ? el3[key] : checked;
}
const vModelDynamic = {
  created(el3, binding, vnode) {
    callModelHook(el3, binding, vnode, null, "created");
  },
  mounted(el3, binding, vnode) {
    callModelHook(el3, binding, vnode, null, "mounted");
  },
  beforeUpdate(el3, binding, vnode, prevVNode) {
    callModelHook(el3, binding, vnode, prevVNode, "beforeUpdate");
  },
  updated(el3, binding, vnode, prevVNode) {
    callModelHook(el3, binding, vnode, prevVNode, "updated");
  }
};
function resolveDynamicModel(tagName, type) {
  switch (tagName) {
    case "SELECT":
      return vModelSelect;
    case "TEXTAREA":
      return vModelText;
    default:
      switch (type) {
        case "checkbox":
          return vModelCheckbox;
        case "radio":
          return vModelRadio;
        default:
          return vModelText;
      }
  }
}
function callModelHook(el3, binding, vnode, prevVNode, hook) {
  const modelToUse = resolveDynamicModel(
    el3.tagName,
    vnode.props && vnode.props.type
  );
  const fn2 = modelToUse[hook];
  fn2 && fn2(el3, binding, vnode, prevVNode);
}
const systemModifiers = ["ctrl", "shift", "alt", "meta"];
const modifierGuards = {
  stop: (e3) => e3.stopPropagation(),
  prevent: (e3) => e3.preventDefault(),
  self: (e3) => e3.target !== e3.currentTarget,
  ctrl: (e3) => !e3.ctrlKey,
  shift: (e3) => !e3.shiftKey,
  alt: (e3) => !e3.altKey,
  meta: (e3) => !e3.metaKey,
  left: (e3) => "button" in e3 && e3.button !== 0,
  middle: (e3) => "button" in e3 && e3.button !== 1,
  right: (e3) => "button" in e3 && e3.button !== 2,
  exact: (e3, modifiers) => systemModifiers.some((m4) => e3[`${m4}Key`] && !modifiers.includes(m4))
};
const withModifiers = (fn2, modifiers) => {
  const cache2 = fn2._withMods || (fn2._withMods = {});
  const cacheKey = modifiers.join(".");
  return cache2[cacheKey] || (cache2[cacheKey] = (event, ...args) => {
    for (let i3 = 0; i3 < modifiers.length; i3++) {
      const guard = modifierGuards[modifiers[i3]];
      if (guard && guard(event, modifiers))
        return;
    }
    return fn2(event, ...args);
  });
};
const keyNames = {
  esc: "escape",
  space: " ",
  up: "arrow-up",
  left: "arrow-left",
  right: "arrow-right",
  down: "arrow-down",
  delete: "backspace"
};
const withKeys = (fn2, modifiers) => {
  const cache2 = fn2._withKeys || (fn2._withKeys = {});
  const cacheKey = modifiers.join(".");
  return cache2[cacheKey] || (cache2[cacheKey] = (event) => {
    if (!("key" in event)) {
      return;
    }
    const eventKey = hyphenate(event.key);
    if (modifiers.some((k3) => k3 === eventKey || keyNames[k3] === eventKey)) {
      return fn2(event);
    }
  });
};
const rendererOptions = /* @__PURE__ */ extend({ patchProp }, nodeOps);
let renderer;
function ensureRenderer() {
  return renderer || (renderer = createRenderer(rendererOptions));
}
const render$1 = (...args) => {
  ensureRenderer().render(...args);
};
const createApp = (...args) => {
  const app = ensureRenderer().createApp(...args);
  {
    injectNativeTagCheck(app);
    injectCompilerOptionsCheck(app);
  }
  const { mount } = app;
  app.mount = (containerOrSelector) => {
    const container = normalizeContainer(containerOrSelector);
    if (!container)
      return;
    const component = app._component;
    if (!isFunction$2(component) && !component.render && !component.template) {
      component.template = container.innerHTML;
    }
    container.innerHTML = "";
    const proxy = mount(container, false, resolveRootNamespace(container));
    if (container instanceof Element) {
      container.removeAttribute("v-cloak");
      container.setAttribute("data-v-app", "");
    }
    return proxy;
  };
  return app;
};
function resolveRootNamespace(container) {
  if (container instanceof SVGElement) {
    return "svg";
  }
  if (typeof MathMLElement === "function" && container instanceof MathMLElement) {
    return "mathml";
  }
}
function injectNativeTagCheck(app) {
  Object.defineProperty(app.config, "isNativeTag", {
    value: (tag) => isHTMLTag(tag) || isSVGTag(tag) || isMathMLTag(tag),
    writable: false
  });
}
function injectCompilerOptionsCheck(app) {
  {
    const isCustomElement = app.config.isCustomElement;
    Object.defineProperty(app.config, "isCustomElement", {
      get() {
        return isCustomElement;
      },
      set() {
        warn$3(
          `The \`isCustomElement\` config option is deprecated. Use \`compilerOptions.isCustomElement\` instead.`
        );
      }
    });
    const compilerOptions = app.config.compilerOptions;
    const msg = `The \`compilerOptions\` config option is only respected when using a build of Vue.js that includes the runtime compiler (aka "full build"). Since you are using the runtime-only build, \`compilerOptions\` must be passed to \`@vue/compiler-dom\` in the build setup instead.
- For vue-loader: pass it via vue-loader's \`compilerOptions\` loader option.
- For vue-cli: see https://cli.vuejs.org/guide/webpack.html#modifying-options-of-a-loader
- For vite: pass it via @vitejs/plugin-vue options. See https://github.com/vitejs/vite-plugin-vue/tree/main/packages/plugin-vue#example-for-passing-options-to-vuecompiler-sfc`;
    Object.defineProperty(app.config, "compilerOptions", {
      get() {
        warn$3(msg);
        return compilerOptions;
      },
      set() {
        warn$3(msg);
      }
    });
  }
}
function normalizeContainer(container) {
  if (isString$2(container)) {
    const res = document.querySelector(container);
    if (!res) {
      warn$3(
        `Failed to mount app: mount target selector "${container}" returned null.`
      );
    }
    return res;
  }
  if (window.ShadowRoot && container instanceof window.ShadowRoot && container.mode === "closed") {
    warn$3(
      `mounting on a ShadowRoot with \`{mode: "closed"}\` may lead to unpredictable bugs`
    );
  }
  return container;
}
function initDev() {
  {
    initCustomFormatter();
  }
}
{
  initDev();
}
const matchName = /^[a-z0-9]+(-[a-z0-9]+)*$/;
const iconDefaults = Object.freeze({
  left: 0,
  top: 0,
  width: 16,
  height: 16,
  rotate: 0,
  vFlip: false,
  hFlip: false
});
function fullIcon(data) {
  return { ...iconDefaults, ...data };
}
const stringToIcon = (value, validate, allowSimpleName, provider = "") => {
  const colonSeparated = value.split(":");
  if (value.slice(0, 1) === "@") {
    if (colonSeparated.length < 2 || colonSeparated.length > 3) {
      return null;
    }
    provider = colonSeparated.shift().slice(1);
  }
  if (colonSeparated.length > 3 || !colonSeparated.length) {
    return null;
  }
  if (colonSeparated.length > 1) {
    const name2 = colonSeparated.pop();
    const prefix = colonSeparated.pop();
    const result = {
      provider: colonSeparated.length > 0 ? colonSeparated[0] : provider,
      prefix,
      name: name2
    };
    return validate && !validateIcon(result) ? null : result;
  }
  const name = colonSeparated[0];
  const dashSeparated = name.split("-");
  if (dashSeparated.length > 1) {
    const result = {
      provider,
      prefix: dashSeparated.shift(),
      name: dashSeparated.join("-")
    };
    return validate && !validateIcon(result) ? null : result;
  }
  if (allowSimpleName && provider === "") {
    const result = {
      provider,
      prefix: "",
      name
    };
    return validate && !validateIcon(result, allowSimpleName) ? null : result;
  }
  return null;
};
const validateIcon = (icon, allowSimpleName) => {
  if (!icon) {
    return false;
  }
  return !!((icon.provider === "" || icon.provider.match(matchName)) && (allowSimpleName && icon.prefix === "" || icon.prefix.match(matchName)) && icon.name.match(matchName));
};
function mergeIconData(icon, alias) {
  const result = { ...icon };
  for (const key in iconDefaults) {
    const prop = key;
    if (alias[prop] !== void 0) {
      const value = alias[prop];
      if (result[prop] === void 0) {
        result[prop] = value;
        continue;
      }
      switch (prop) {
        case "rotate":
          result[prop] = (result[prop] + value) % 4;
          break;
        case "hFlip":
        case "vFlip":
          result[prop] = value !== result[prop];
          break;
        default:
          result[prop] = value;
      }
    }
  }
  return result;
}
function getIconData$1(data, name, full = false) {
  function getIcon(name2, iteration) {
    if (data.icons[name2] !== void 0) {
      return Object.assign({}, data.icons[name2]);
    }
    if (iteration > 5) {
      return null;
    }
    const aliases = data.aliases;
    if (aliases && aliases[name2] !== void 0) {
      const item = aliases[name2];
      const result2 = getIcon(item.parent, iteration + 1);
      if (result2) {
        return mergeIconData(result2, item);
      }
      return result2;
    }
    const chars = data.chars;
    if (!iteration && chars && chars[name2] !== void 0) {
      return getIcon(chars[name2], iteration + 1);
    }
    return null;
  }
  const result = getIcon(name, 0);
  if (result) {
    for (const key in iconDefaults) {
      if (result[key] === void 0 && data[key] !== void 0) {
        result[key] = data[key];
      }
    }
  }
  return result && full ? fullIcon(result) : result;
}
function isVariation(item) {
  for (const key in iconDefaults) {
    if (item[key] !== void 0) {
      return true;
    }
  }
  return false;
}
function parseIconSet(data, callback, options) {
  options = options || {};
  const names = [];
  if (typeof data !== "object" || typeof data.icons !== "object") {
    return names;
  }
  if (data.not_found instanceof Array) {
    data.not_found.forEach((name) => {
      callback(name, null);
      names.push(name);
    });
  }
  const icons = data.icons;
  Object.keys(icons).forEach((name) => {
    const iconData = getIconData$1(data, name, true);
    if (iconData) {
      callback(name, iconData);
      names.push(name);
    }
  });
  const parseAliases = options.aliases || "all";
  if (parseAliases !== "none" && typeof data.aliases === "object") {
    const aliases = data.aliases;
    Object.keys(aliases).forEach((name) => {
      if (parseAliases === "variations" && isVariation(aliases[name])) {
        return;
      }
      const iconData = getIconData$1(data, name, true);
      if (iconData) {
        callback(name, iconData);
        names.push(name);
      }
    });
  }
  return names;
}
const optionalProperties = {
  provider: "string",
  aliases: "object",
  not_found: "object"
};
for (const prop in iconDefaults) {
  optionalProperties[prop] = typeof iconDefaults[prop];
}
function quicklyValidateIconSet(obj) {
  if (typeof obj !== "object" || obj === null) {
    return null;
  }
  const data = obj;
  if (typeof data.prefix !== "string" || !obj.icons || typeof obj.icons !== "object") {
    return null;
  }
  for (const prop in optionalProperties) {
    if (obj[prop] !== void 0 && typeof obj[prop] !== optionalProperties[prop]) {
      return null;
    }
  }
  const icons = data.icons;
  for (const name in icons) {
    const icon = icons[name];
    if (!name.match(matchName) || typeof icon.body !== "string") {
      return null;
    }
    for (const prop in iconDefaults) {
      if (icon[prop] !== void 0 && typeof icon[prop] !== typeof iconDefaults[prop]) {
        return null;
      }
    }
  }
  const aliases = data.aliases;
  if (aliases) {
    for (const name in aliases) {
      const icon = aliases[name];
      const parent = icon.parent;
      if (!name.match(matchName) || typeof parent !== "string" || !icons[parent] && !aliases[parent]) {
        return null;
      }
      for (const prop in iconDefaults) {
        if (icon[prop] !== void 0 && typeof icon[prop] !== typeof iconDefaults[prop]) {
          return null;
        }
      }
    }
  }
  return data;
}
const storageVersion = 1;
let storage$1 = /* @__PURE__ */ Object.create(null);
try {
  const w3 = window || self;
  if (w3 && w3._iconifyStorage.version === storageVersion) {
    storage$1 = w3._iconifyStorage.storage;
  }
} catch (err) {
}
function newStorage(provider, prefix) {
  return {
    provider,
    prefix,
    icons: /* @__PURE__ */ Object.create(null),
    missing: /* @__PURE__ */ Object.create(null)
  };
}
function getStorage(provider, prefix) {
  if (storage$1[provider] === void 0) {
    storage$1[provider] = /* @__PURE__ */ Object.create(null);
  }
  const providerStorage = storage$1[provider];
  if (providerStorage[prefix] === void 0) {
    providerStorage[prefix] = newStorage(provider, prefix);
  }
  return providerStorage[prefix];
}
function addIconSet(storage2, data) {
  if (!quicklyValidateIconSet(data)) {
    return [];
  }
  const t3 = Date.now();
  return parseIconSet(data, (name, icon) => {
    if (icon) {
      storage2.icons[name] = icon;
    } else {
      storage2.missing[name] = t3;
    }
  });
}
function addIconToStorage(storage2, name, icon) {
  try {
    if (typeof icon.body === "string") {
      storage2.icons[name] = Object.freeze(fullIcon(icon));
      return true;
    }
  } catch (err) {
  }
  return false;
}
function getIconFromStorage(storage2, name) {
  const value = storage2.icons[name];
  return value === void 0 ? null : value;
}
let simpleNames = false;
function allowSimpleNames(allow) {
  if (typeof allow === "boolean") {
    simpleNames = allow;
  }
  return simpleNames;
}
function getIconData(name) {
  const icon = typeof name === "string" ? stringToIcon(name, true, simpleNames) : name;
  return icon ? getIconFromStorage(getStorage(icon.provider, icon.prefix), icon.name) : null;
}
function addIcon(name, data) {
  const icon = stringToIcon(name, true, simpleNames);
  if (!icon) {
    return false;
  }
  const storage2 = getStorage(icon.provider, icon.prefix);
  return addIconToStorage(storage2, icon.name, data);
}
function addCollection(data, provider) {
  if (typeof data !== "object") {
    return false;
  }
  if (typeof provider !== "string") {
    provider = typeof data.provider === "string" ? data.provider : "";
  }
  if (simpleNames && provider === "" && (typeof data.prefix !== "string" || data.prefix === "")) {
    let added = false;
    if (quicklyValidateIconSet(data)) {
      data.prefix = "";
      parseIconSet(data, (name, icon) => {
        if (icon && addIcon(name, icon)) {
          added = true;
        }
      });
    }
    return added;
  }
  if (typeof data.prefix !== "string" || !validateIcon({
    provider,
    prefix: data.prefix,
    name: "a"
  })) {
    return false;
  }
  const storage2 = getStorage(provider, data.prefix);
  return !!addIconSet(storage2, data);
}
const defaults = Object.freeze({
  inline: false,
  width: null,
  height: null,
  hAlign: "center",
  vAlign: "middle",
  slice: false,
  hFlip: false,
  vFlip: false,
  rotate: 0
});
function mergeCustomisations(defaults2, item) {
  const result = {};
  for (const key in defaults2) {
    const attr = key;
    result[attr] = defaults2[attr];
    if (item[attr] === void 0) {
      continue;
    }
    const value = item[attr];
    switch (attr) {
      case "inline":
      case "slice":
        if (typeof value === "boolean") {
          result[attr] = value;
        }
        break;
      case "hFlip":
      case "vFlip":
        if (value === true) {
          result[attr] = !result[attr];
        }
        break;
      case "hAlign":
      case "vAlign":
        if (typeof value === "string" && value !== "") {
          result[attr] = value;
        }
        break;
      case "width":
      case "height":
        if (typeof value === "string" && value !== "" || typeof value === "number" && value || value === null) {
          result[attr] = value;
        }
        break;
      case "rotate":
        if (typeof value === "number") {
          result[attr] += value;
        }
        break;
    }
  }
  return result;
}
const unitsSplit = /(-?[0-9.]*[0-9]+[0-9.]*)/g;
const unitsTest = /^-?[0-9.]*[0-9]+[0-9.]*$/g;
function calculateSize(size2, ratio, precision) {
  if (ratio === 1) {
    return size2;
  }
  precision = precision === void 0 ? 100 : precision;
  if (typeof size2 === "number") {
    return Math.ceil(size2 * ratio * precision) / precision;
  }
  if (typeof size2 !== "string") {
    return size2;
  }
  const oldParts = size2.split(unitsSplit);
  if (oldParts === null || !oldParts.length) {
    return size2;
  }
  const newParts = [];
  let code2 = oldParts.shift();
  let isNumber2 = unitsTest.test(code2);
  while (true) {
    if (isNumber2) {
      const num = parseFloat(code2);
      if (isNaN(num)) {
        newParts.push(code2);
      } else {
        newParts.push(Math.ceil(num * ratio * precision) / precision);
      }
    } else {
      newParts.push(code2);
    }
    code2 = oldParts.shift();
    if (code2 === void 0) {
      return newParts.join("");
    }
    isNumber2 = !isNumber2;
  }
}
function preserveAspectRatio(props) {
  let result = "";
  switch (props.hAlign) {
    case "left":
      result += "xMin";
      break;
    case "right":
      result += "xMax";
      break;
    default:
      result += "xMid";
  }
  switch (props.vAlign) {
    case "top":
      result += "YMin";
      break;
    case "bottom":
      result += "YMax";
      break;
    default:
      result += "YMid";
  }
  result += props.slice ? " slice" : " meet";
  return result;
}
function iconToSVG(icon, customisations) {
  const box = {
    left: icon.left,
    top: icon.top,
    width: icon.width,
    height: icon.height
  };
  let body = icon.body;
  [icon, customisations].forEach((props) => {
    const transformations = [];
    const hFlip = props.hFlip;
    const vFlip = props.vFlip;
    let rotation = props.rotate;
    if (hFlip) {
      if (vFlip) {
        rotation += 2;
      } else {
        transformations.push("translate(" + (box.width + box.left).toString() + " " + (0 - box.top).toString() + ")");
        transformations.push("scale(-1 1)");
        box.top = box.left = 0;
      }
    } else if (vFlip) {
      transformations.push("translate(" + (0 - box.left).toString() + " " + (box.height + box.top).toString() + ")");
      transformations.push("scale(1 -1)");
      box.top = box.left = 0;
    }
    let tempValue;
    if (rotation < 0) {
      rotation -= Math.floor(rotation / 4) * 4;
    }
    rotation = rotation % 4;
    switch (rotation) {
      case 1:
        tempValue = box.height / 2 + box.top;
        transformations.unshift("rotate(90 " + tempValue.toString() + " " + tempValue.toString() + ")");
        break;
      case 2:
        transformations.unshift("rotate(180 " + (box.width / 2 + box.left).toString() + " " + (box.height / 2 + box.top).toString() + ")");
        break;
      case 3:
        tempValue = box.width / 2 + box.left;
        transformations.unshift("rotate(-90 " + tempValue.toString() + " " + tempValue.toString() + ")");
        break;
    }
    if (rotation % 2 === 1) {
      if (box.left !== 0 || box.top !== 0) {
        tempValue = box.left;
        box.left = box.top;
        box.top = tempValue;
      }
      if (box.width !== box.height) {
        tempValue = box.width;
        box.width = box.height;
        box.height = tempValue;
      }
    }
    if (transformations.length) {
      body = '<g transform="' + transformations.join(" ") + '">' + body + "</g>";
    }
  });
  let width, height;
  if (customisations.width === null && customisations.height === null) {
    height = "1em";
    width = calculateSize(height, box.width / box.height);
  } else if (customisations.width !== null && customisations.height !== null) {
    width = customisations.width;
    height = customisations.height;
  } else if (customisations.height !== null) {
    height = customisations.height;
    width = calculateSize(height, box.width / box.height);
  } else {
    width = customisations.width;
    height = calculateSize(width, box.height / box.width);
  }
  if (width === "auto") {
    width = box.width;
  }
  if (height === "auto") {
    height = box.height;
  }
  width = typeof width === "string" ? width : width.toString() + "";
  height = typeof height === "string" ? height : height.toString() + "";
  const result = {
    attributes: {
      width,
      height,
      preserveAspectRatio: preserveAspectRatio(customisations),
      viewBox: box.left.toString() + " " + box.top.toString() + " " + box.width.toString() + " " + box.height.toString()
    },
    body
  };
  if (customisations.inline) {
    result.inline = true;
  }
  return result;
}
const regex = /\sid="(\S+)"/g;
const randomPrefix = "IconifyId" + Date.now().toString(16) + (Math.random() * 16777216 | 0).toString(16);
let counter = 0;
function replaceIDs(body, prefix = randomPrefix) {
  const ids = [];
  let match2;
  while (match2 = regex.exec(body)) {
    ids.push(match2[1]);
  }
  if (!ids.length) {
    return body;
  }
  ids.forEach((id2) => {
    const newID = typeof prefix === "function" ? prefix(id2) : prefix + (counter++).toString();
    const escapedID = id2.replace(/[.*+?^${}()|[\]\\]/g, "\\$&");
    body = body.replace(new RegExp('([#;"])(' + escapedID + ')([")]|\\.[a-z])', "g"), "$1" + newID + "$3");
  });
  return body;
}
const storage = /* @__PURE__ */ Object.create(null);
function setAPIModule(provider, item) {
  storage[provider] = item;
}
function getAPIModule(provider) {
  return storage[provider] || storage[""];
}
function createAPIConfig(source) {
  let resources;
  if (typeof source.resources === "string") {
    resources = [source.resources];
  } else {
    resources = source.resources;
    if (!(resources instanceof Array) || !resources.length) {
      return null;
    }
  }
  const result = {
    resources,
    path: source.path === void 0 ? "/" : source.path,
    maxURL: source.maxURL ? source.maxURL : 500,
    rotate: source.rotate ? source.rotate : 750,
    timeout: source.timeout ? source.timeout : 5e3,
    random: source.random === true,
    index: source.index ? source.index : 0,
    dataAfterTimeout: source.dataAfterTimeout !== false
  };
  return result;
}
const configStorage = /* @__PURE__ */ Object.create(null);
const fallBackAPISources = [
  "https://api.simplesvg.com",
  "https://api.unisvg.com"
];
const fallBackAPI = [];
while (fallBackAPISources.length > 0) {
  if (fallBackAPISources.length === 1) {
    fallBackAPI.push(fallBackAPISources.shift());
  } else {
    if (Math.random() > 0.5) {
      fallBackAPI.push(fallBackAPISources.shift());
    } else {
      fallBackAPI.push(fallBackAPISources.pop());
    }
  }
}
configStorage[""] = createAPIConfig({
  resources: ["https://api.iconify.design"].concat(fallBackAPI)
});
function addAPIProvider(provider, customConfig) {
  const config2 = createAPIConfig(customConfig);
  if (config2 === null) {
    return false;
  }
  configStorage[provider] = config2;
  return true;
}
function getAPIConfig(provider) {
  return configStorage[provider];
}
const mergeParams = (base, params) => {
  let result = base, hasParams = result.indexOf("?") !== -1;
  function paramToString(value) {
    switch (typeof value) {
      case "boolean":
        return value ? "true" : "false";
      case "number":
        return encodeURIComponent(value);
      case "string":
        return encodeURIComponent(value);
      default:
        throw new Error("Invalid parameter");
    }
  }
  Object.keys(params).forEach((key) => {
    let value;
    try {
      value = paramToString(params[key]);
    } catch (err) {
      return;
    }
    result += (hasParams ? "&" : "?") + encodeURIComponent(key) + "=" + value;
    hasParams = true;
  });
  return result;
};
const maxLengthCache = {};
const pathCache = {};
const detectFetch = () => {
  let callback;
  try {
    callback = fetch;
    if (typeof callback === "function") {
      return callback;
    }
  } catch (err) {
  }
  return null;
};
let fetchModule = detectFetch();
function calculateMaxLength(provider, prefix) {
  const config2 = getAPIConfig(provider);
  if (!config2) {
    return 0;
  }
  let result;
  if (!config2.maxURL) {
    result = 0;
  } else {
    let maxHostLength = 0;
    config2.resources.forEach((item) => {
      const host = item;
      maxHostLength = Math.max(maxHostLength, host.length);
    });
    const url = mergeParams(prefix + ".json", {
      icons: ""
    });
    result = config2.maxURL - maxHostLength - config2.path.length - url.length;
  }
  const cacheKey = provider + ":" + prefix;
  pathCache[provider] = config2.path;
  maxLengthCache[cacheKey] = result;
  return result;
}
function shouldAbort(status) {
  return status === 404;
}
const prepare = (provider, prefix, icons) => {
  const results = [];
  let maxLength = maxLengthCache[prefix];
  if (maxLength === void 0) {
    maxLength = calculateMaxLength(provider, prefix);
  }
  const type = "icons";
  let item = {
    type,
    provider,
    prefix,
    icons: []
  };
  let length = 0;
  icons.forEach((name, index) => {
    length += name.length + 1;
    if (length >= maxLength && index > 0) {
      results.push(item);
      item = {
        type,
        provider,
        prefix,
        icons: []
      };
      length = name.length;
    }
    item.icons.push(name);
  });
  results.push(item);
  return results;
};
function getPath(provider) {
  if (typeof provider === "string") {
    if (pathCache[provider] === void 0) {
      const config2 = getAPIConfig(provider);
      if (!config2) {
        return "/";
      }
      pathCache[provider] = config2.path;
    }
    return pathCache[provider];
  }
  return "/";
}
const send = (host, params, callback) => {
  if (!fetchModule) {
    callback("abort", 424);
    return;
  }
  let path = getPath(params.provider);
  switch (params.type) {
    case "icons": {
      const prefix = params.prefix;
      const icons = params.icons;
      const iconsList = icons.join(",");
      path += mergeParams(prefix + ".json", {
        icons: iconsList
      });
      break;
    }
    case "custom": {
      const uri = params.uri;
      path += uri.slice(0, 1) === "/" ? uri.slice(1) : uri;
      break;
    }
    default:
      callback("abort", 400);
      return;
  }
  let defaultError = 503;
  fetchModule(host + path).then((response) => {
    const status = response.status;
    if (status !== 200) {
      setTimeout(() => {
        callback(shouldAbort(status) ? "abort" : "next", status);
      });
      return;
    }
    defaultError = 501;
    return response.json();
  }).then((data) => {
    if (typeof data !== "object" || data === null) {
      setTimeout(() => {
        callback("next", defaultError);
      });
      return;
    }
    setTimeout(() => {
      callback("success", data);
    });
  }).catch(() => {
    callback("next", defaultError);
  });
};
const fetchAPIModule = {
  prepare,
  send
};
function sortIcons(icons) {
  const result = {
    loaded: [],
    missing: [],
    pending: []
  };
  const storage2 = /* @__PURE__ */ Object.create(null);
  icons.sort((a4, b4) => {
    if (a4.provider !== b4.provider) {
      return a4.provider.localeCompare(b4.provider);
    }
    if (a4.prefix !== b4.prefix) {
      return a4.prefix.localeCompare(b4.prefix);
    }
    return a4.name.localeCompare(b4.name);
  });
  let lastIcon = {
    provider: "",
    prefix: "",
    name: ""
  };
  icons.forEach((icon) => {
    if (lastIcon.name === icon.name && lastIcon.prefix === icon.prefix && lastIcon.provider === icon.provider) {
      return;
    }
    lastIcon = icon;
    const provider = icon.provider;
    const prefix = icon.prefix;
    const name = icon.name;
    if (storage2[provider] === void 0) {
      storage2[provider] = /* @__PURE__ */ Object.create(null);
    }
    const providerStorage = storage2[provider];
    if (providerStorage[prefix] === void 0) {
      providerStorage[prefix] = getStorage(provider, prefix);
    }
    const localStorage2 = providerStorage[prefix];
    let list;
    if (localStorage2.icons[name] !== void 0) {
      list = result.loaded;
    } else if (prefix === "" || localStorage2.missing[name] !== void 0) {
      list = result.missing;
    } else {
      list = result.pending;
    }
    const item = {
      provider,
      prefix,
      name
    };
    list.push(item);
  });
  return result;
}
const callbacks = /* @__PURE__ */ Object.create(null);
const pendingUpdates = /* @__PURE__ */ Object.create(null);
function removeCallback(sources, id2) {
  sources.forEach((source) => {
    const provider = source.provider;
    if (callbacks[provider] === void 0) {
      return;
    }
    const providerCallbacks = callbacks[provider];
    const prefix = source.prefix;
    const items = providerCallbacks[prefix];
    if (items) {
      providerCallbacks[prefix] = items.filter((row) => row.id !== id2);
    }
  });
}
function updateCallbacks(provider, prefix) {
  if (pendingUpdates[provider] === void 0) {
    pendingUpdates[provider] = /* @__PURE__ */ Object.create(null);
  }
  const providerPendingUpdates = pendingUpdates[provider];
  if (!providerPendingUpdates[prefix]) {
    providerPendingUpdates[prefix] = true;
    setTimeout(() => {
      providerPendingUpdates[prefix] = false;
      if (callbacks[provider] === void 0 || callbacks[provider][prefix] === void 0) {
        return;
      }
      const items = callbacks[provider][prefix].slice(0);
      if (!items.length) {
        return;
      }
      const storage2 = getStorage(provider, prefix);
      let hasPending = false;
      items.forEach((item) => {
        const icons = item.icons;
        const oldLength = icons.pending.length;
        icons.pending = icons.pending.filter((icon) => {
          if (icon.prefix !== prefix) {
            return true;
          }
          const name = icon.name;
          if (storage2.icons[name] !== void 0) {
            icons.loaded.push({
              provider,
              prefix,
              name
            });
          } else if (storage2.missing[name] !== void 0) {
            icons.missing.push({
              provider,
              prefix,
              name
            });
          } else {
            hasPending = true;
            return true;
          }
          return false;
        });
        if (icons.pending.length !== oldLength) {
          if (!hasPending) {
            removeCallback([
              {
                provider,
                prefix
              }
            ], item.id);
          }
          item.callback(icons.loaded.slice(0), icons.missing.slice(0), icons.pending.slice(0), item.abort);
        }
      });
    });
  }
}
let idCounter = 0;
function storeCallback(callback, icons, pendingSources) {
  const id2 = idCounter++;
  const abort = removeCallback.bind(null, pendingSources, id2);
  if (!icons.pending.length) {
    return abort;
  }
  const item = {
    id: id2,
    icons,
    callback,
    abort
  };
  pendingSources.forEach((source) => {
    const provider = source.provider;
    const prefix = source.prefix;
    if (callbacks[provider] === void 0) {
      callbacks[provider] = /* @__PURE__ */ Object.create(null);
    }
    const providerCallbacks = callbacks[provider];
    if (providerCallbacks[prefix] === void 0) {
      providerCallbacks[prefix] = [];
    }
    providerCallbacks[prefix].push(item);
  });
  return abort;
}
function listToIcons(list, validate = true, simpleNames2 = false) {
  const result = [];
  list.forEach((item) => {
    const icon = typeof item === "string" ? stringToIcon(item, false, simpleNames2) : item;
    if (!validate || validateIcon(icon, simpleNames2)) {
      result.push({
        provider: icon.provider,
        prefix: icon.prefix,
        name: icon.name
      });
    }
  });
  return result;
}
var defaultConfig = {
  resources: [],
  index: 0,
  timeout: 2e3,
  rotate: 750,
  random: false,
  dataAfterTimeout: false
};
function sendQuery(config2, payload, query, done) {
  const resourcesCount = config2.resources.length;
  const startIndex = config2.random ? Math.floor(Math.random() * resourcesCount) : config2.index;
  let resources;
  if (config2.random) {
    let list = config2.resources.slice(0);
    resources = [];
    while (list.length > 1) {
      const nextIndex = Math.floor(Math.random() * list.length);
      resources.push(list[nextIndex]);
      list = list.slice(0, nextIndex).concat(list.slice(nextIndex + 1));
    }
    resources = resources.concat(list);
  } else {
    resources = config2.resources.slice(startIndex).concat(config2.resources.slice(0, startIndex));
  }
  const startTime = Date.now();
  let status = "pending";
  let queriesSent = 0;
  let lastError;
  let timer = null;
  let queue2 = [];
  let doneCallbacks = [];
  if (typeof done === "function") {
    doneCallbacks.push(done);
  }
  function resetTimer() {
    if (timer) {
      clearTimeout(timer);
      timer = null;
    }
  }
  function abort() {
    if (status === "pending") {
      status = "aborted";
    }
    resetTimer();
    queue2.forEach((item) => {
      if (item.status === "pending") {
        item.status = "aborted";
      }
    });
    queue2 = [];
  }
  function subscribe(callback, overwrite) {
    if (overwrite) {
      doneCallbacks = [];
    }
    if (typeof callback === "function") {
      doneCallbacks.push(callback);
    }
  }
  function getQueryStatus() {
    return {
      startTime,
      payload,
      status,
      queriesSent,
      queriesPending: queue2.length,
      subscribe,
      abort
    };
  }
  function failQuery() {
    status = "failed";
    doneCallbacks.forEach((callback) => {
      callback(void 0, lastError);
    });
  }
  function clearQueue() {
    queue2.forEach((item) => {
      if (item.status === "pending") {
        item.status = "aborted";
      }
    });
    queue2 = [];
  }
  function moduleResponse(item, response, data) {
    const isError = response !== "success";
    queue2 = queue2.filter((queued) => queued !== item);
    switch (status) {
      case "pending":
        break;
      case "failed":
        if (isError || !config2.dataAfterTimeout) {
          return;
        }
        break;
      default:
        return;
    }
    if (response === "abort") {
      lastError = data;
      failQuery();
      return;
    }
    if (isError) {
      lastError = data;
      if (!queue2.length) {
        if (!resources.length) {
          failQuery();
        } else {
          execNext();
        }
      }
      return;
    }
    resetTimer();
    clearQueue();
    if (!config2.random) {
      const index = config2.resources.indexOf(item.resource);
      if (index !== -1 && index !== config2.index) {
        config2.index = index;
      }
    }
    status = "completed";
    doneCallbacks.forEach((callback) => {
      callback(data);
    });
  }
  function execNext() {
    if (status !== "pending") {
      return;
    }
    resetTimer();
    const resource2 = resources.shift();
    if (resource2 === void 0) {
      if (queue2.length) {
        timer = setTimeout(() => {
          resetTimer();
          if (status === "pending") {
            clearQueue();
            failQuery();
          }
        }, config2.timeout);
        return;
      }
      failQuery();
      return;
    }
    const item = {
      status: "pending",
      resource: resource2,
      callback: (status2, data) => {
        moduleResponse(item, status2, data);
      }
    };
    queue2.push(item);
    queriesSent++;
    timer = setTimeout(execNext, config2.rotate);
    query(resource2, payload, item.callback);
  }
  setTimeout(execNext);
  return getQueryStatus;
}
function setConfig(config2) {
  if (typeof config2 !== "object" || typeof config2.resources !== "object" || !(config2.resources instanceof Array) || !config2.resources.length) {
    throw new Error("Invalid Reduncancy configuration");
  }
  const newConfig = /* @__PURE__ */ Object.create(null);
  let key;
  for (key in defaultConfig) {
    if (config2[key] !== void 0) {
      newConfig[key] = config2[key];
    } else {
      newConfig[key] = defaultConfig[key];
    }
  }
  return newConfig;
}
function initRedundancy(cfg) {
  const config2 = setConfig(cfg);
  let queries = [];
  function cleanup() {
    queries = queries.filter((item) => item().status === "pending");
  }
  function query(payload, queryCallback, doneCallback) {
    const query2 = sendQuery(config2, payload, queryCallback, (data, error) => {
      cleanup();
      if (doneCallback) {
        doneCallback(data, error);
      }
    });
    queries.push(query2);
    return query2;
  }
  function find(callback) {
    const result = queries.find((value) => {
      return callback(value);
    });
    return result !== void 0 ? result : null;
  }
  const instance = {
    query,
    find,
    setIndex: (index) => {
      config2.index = index;
    },
    getIndex: () => config2.index,
    cleanup
  };
  return instance;
}
function emptyCallback$1() {
}
const redundancyCache = /* @__PURE__ */ Object.create(null);
function getRedundancyCache(provider) {
  if (redundancyCache[provider] === void 0) {
    const config2 = getAPIConfig(provider);
    if (!config2) {
      return;
    }
    const redundancy = initRedundancy(config2);
    const cachedReundancy = {
      config: config2,
      redundancy
    };
    redundancyCache[provider] = cachedReundancy;
  }
  return redundancyCache[provider];
}
function sendAPIQuery(target, query, callback) {
  let redundancy;
  let send2;
  if (typeof target === "string") {
    const api = getAPIModule(target);
    if (!api) {
      callback(void 0, 424);
      return emptyCallback$1;
    }
    send2 = api.send;
    const cached = getRedundancyCache(target);
    if (cached) {
      redundancy = cached.redundancy;
    }
  } else {
    const config2 = createAPIConfig(target);
    if (config2) {
      redundancy = initRedundancy(config2);
      const moduleKey = target.resources ? target.resources[0] : "";
      const api = getAPIModule(moduleKey);
      if (api) {
        send2 = api.send;
      }
    }
  }
  if (!redundancy || !send2) {
    callback(void 0, 424);
    return emptyCallback$1;
  }
  return redundancy.query(query, send2, callback)().abort;
}
const cache$1 = {};
function emptyCallback() {
}
const pendingIcons = /* @__PURE__ */ Object.create(null);
const iconsToLoad = /* @__PURE__ */ Object.create(null);
const loaderFlags = /* @__PURE__ */ Object.create(null);
const queueFlags = /* @__PURE__ */ Object.create(null);
function loadedNewIcons(provider, prefix) {
  if (loaderFlags[provider] === void 0) {
    loaderFlags[provider] = /* @__PURE__ */ Object.create(null);
  }
  const providerLoaderFlags = loaderFlags[provider];
  if (!providerLoaderFlags[prefix]) {
    providerLoaderFlags[prefix] = true;
    setTimeout(() => {
      providerLoaderFlags[prefix] = false;
      updateCallbacks(provider, prefix);
    });
  }
}
const errorsCache = /* @__PURE__ */ Object.create(null);
function loadNewIcons(provider, prefix, icons) {
  function err() {
    const key = (provider === "" ? "" : "@" + provider + ":") + prefix;
    const time = Math.floor(Date.now() / 6e4);
    if (errorsCache[key] < time) {
      errorsCache[key] = time;
      console.error('Unable to retrieve icons for "' + key + '" because API is not configured properly.');
    }
  }
  if (iconsToLoad[provider] === void 0) {
    iconsToLoad[provider] = /* @__PURE__ */ Object.create(null);
  }
  const providerIconsToLoad = iconsToLoad[provider];
  if (queueFlags[provider] === void 0) {
    queueFlags[provider] = /* @__PURE__ */ Object.create(null);
  }
  const providerQueueFlags = queueFlags[provider];
  if (pendingIcons[provider] === void 0) {
    pendingIcons[provider] = /* @__PURE__ */ Object.create(null);
  }
  const providerPendingIcons = pendingIcons[provider];
  if (providerIconsToLoad[prefix] === void 0) {
    providerIconsToLoad[prefix] = icons;
  } else {
    providerIconsToLoad[prefix] = providerIconsToLoad[prefix].concat(icons).sort();
  }
  if (!providerQueueFlags[prefix]) {
    providerQueueFlags[prefix] = true;
    setTimeout(() => {
      providerQueueFlags[prefix] = false;
      const icons2 = providerIconsToLoad[prefix];
      delete providerIconsToLoad[prefix];
      const api = getAPIModule(provider);
      if (!api) {
        err();
        return;
      }
      const params = api.prepare(provider, prefix, icons2);
      params.forEach((item) => {
        sendAPIQuery(provider, item, (data, error) => {
          const storage2 = getStorage(provider, prefix);
          if (typeof data !== "object") {
            if (error !== 404) {
              return;
            }
            const t3 = Date.now();
            item.icons.forEach((name) => {
              storage2.missing[name] = t3;
            });
          } else {
            try {
              const parsed = addIconSet(storage2, data);
              if (!parsed.length) {
                return;
              }
              const pending = providerPendingIcons[prefix];
              parsed.forEach((name) => {
                delete pending[name];
              });
              if (cache$1.store) {
                cache$1.store(provider, data);
              }
            } catch (err2) {
              console.error(err2);
            }
          }
          loadedNewIcons(provider, prefix);
        });
      });
    });
  }
}
const loadIcons = (icons, callback) => {
  const cleanedIcons = listToIcons(icons, true, allowSimpleNames());
  const sortedIcons = sortIcons(cleanedIcons);
  if (!sortedIcons.pending.length) {
    let callCallback = true;
    if (callback) {
      setTimeout(() => {
        if (callCallback) {
          callback(sortedIcons.loaded, sortedIcons.missing, sortedIcons.pending, emptyCallback);
        }
      });
    }
    return () => {
      callCallback = false;
    };
  }
  const newIcons = /* @__PURE__ */ Object.create(null);
  const sources = [];
  let lastProvider, lastPrefix;
  sortedIcons.pending.forEach((icon) => {
    const provider = icon.provider;
    const prefix = icon.prefix;
    if (prefix === lastPrefix && provider === lastProvider) {
      return;
    }
    lastProvider = provider;
    lastPrefix = prefix;
    sources.push({
      provider,
      prefix
    });
    if (pendingIcons[provider] === void 0) {
      pendingIcons[provider] = /* @__PURE__ */ Object.create(null);
    }
    const providerPendingIcons = pendingIcons[provider];
    if (providerPendingIcons[prefix] === void 0) {
      providerPendingIcons[prefix] = /* @__PURE__ */ Object.create(null);
    }
    if (newIcons[provider] === void 0) {
      newIcons[provider] = /* @__PURE__ */ Object.create(null);
    }
    const providerNewIcons = newIcons[provider];
    if (providerNewIcons[prefix] === void 0) {
      providerNewIcons[prefix] = [];
    }
  });
  const time = Date.now();
  sortedIcons.pending.forEach((icon) => {
    const provider = icon.provider;
    const prefix = icon.prefix;
    const name = icon.name;
    const pendingQueue = pendingIcons[provider][prefix];
    if (pendingQueue[name] === void 0) {
      pendingQueue[name] = time;
      newIcons[provider][prefix].push(name);
    }
  });
  sources.forEach((source) => {
    const provider = source.provider;
    const prefix = source.prefix;
    if (newIcons[provider][prefix].length) {
      loadNewIcons(provider, prefix, newIcons[provider][prefix]);
    }
  });
  return callback ? storeCallback(callback, sortedIcons, sources) : emptyCallback;
};
const cacheVersion = "iconify2";
const cachePrefix = "iconify";
const countKey = cachePrefix + "-count";
const versionKey = cachePrefix + "-version";
const hour = 36e5;
const cacheExpiration = 168;
const config$1 = {
  local: true,
  session: true
};
let loaded = false;
const count = {
  local: 0,
  session: 0
};
const emptyList = {
  local: [],
  session: []
};
let _window = typeof window === "undefined" ? {} : window;
function getGlobal(key) {
  const attr = key + "Storage";
  try {
    if (_window && _window[attr] && typeof _window[attr].length === "number") {
      return _window[attr];
    }
  } catch (err) {
  }
  config$1[key] = false;
  return null;
}
function setCount(storage2, key, value) {
  try {
    storage2.setItem(countKey, value.toString());
    count[key] = value;
    return true;
  } catch (err) {
    return false;
  }
}
function getCount(storage2) {
  const count2 = storage2.getItem(countKey);
  if (count2) {
    const total = parseInt(count2);
    return total ? total : 0;
  }
  return 0;
}
function initCache(storage2, key) {
  try {
    storage2.setItem(versionKey, cacheVersion);
  } catch (err) {
  }
  setCount(storage2, key, 0);
}
function destroyCache(storage2) {
  try {
    const total = getCount(storage2);
    for (let i3 = 0; i3 < total; i3++) {
      storage2.removeItem(cachePrefix + i3.toString());
    }
  } catch (err) {
  }
}
const loadCache = () => {
  if (loaded) {
    return;
  }
  loaded = true;
  const minTime = Math.floor(Date.now() / hour) - cacheExpiration;
  function load(key) {
    const func = getGlobal(key);
    if (!func) {
      return;
    }
    const getItem = (index) => {
      const name = cachePrefix + index.toString();
      const item = func.getItem(name);
      if (typeof item !== "string") {
        return false;
      }
      let valid = true;
      try {
        const data = JSON.parse(item);
        if (typeof data !== "object" || typeof data.cached !== "number" || data.cached < minTime || typeof data.provider !== "string" || typeof data.data !== "object" || typeof data.data.prefix !== "string") {
          valid = false;
        } else {
          const provider = data.provider;
          const prefix = data.data.prefix;
          const storage2 = getStorage(provider, prefix);
          valid = addIconSet(storage2, data.data).length > 0;
        }
      } catch (err) {
        valid = false;
      }
      if (!valid) {
        func.removeItem(name);
      }
      return valid;
    };
    try {
      const version2 = func.getItem(versionKey);
      if (version2 !== cacheVersion) {
        if (version2) {
          destroyCache(func);
        }
        initCache(func, key);
        return;
      }
      let total = getCount(func);
      for (let i3 = total - 1; i3 >= 0; i3--) {
        if (!getItem(i3)) {
          if (i3 === total - 1) {
            total--;
          } else {
            emptyList[key].push(i3);
          }
        }
      }
      setCount(func, key, total);
    } catch (err) {
    }
  }
  for (const key in config$1) {
    load(key);
  }
};
const storeCache = (provider, data) => {
  if (!loaded) {
    loadCache();
  }
  function store(key) {
    if (!config$1[key]) {
      return false;
    }
    const func = getGlobal(key);
    if (!func) {
      return false;
    }
    let index = emptyList[key].shift();
    if (index === void 0) {
      index = count[key];
      if (!setCount(func, key, index + 1)) {
        return false;
      }
    }
    try {
      const item = {
        cached: Math.floor(Date.now() / hour),
        provider,
        data
      };
      func.setItem(cachePrefix + index.toString(), JSON.stringify(item));
    } catch (err) {
      return false;
    }
    return true;
  }
  if (!Object.keys(data.icons).length) {
    return;
  }
  if (data.not_found) {
    data = Object.assign({}, data);
    delete data.not_found;
  }
  if (!store("local")) {
    store("session");
  }
};
const separator = /[\s,]+/;
function flipFromString(custom, flip2) {
  flip2.split(separator).forEach((str) => {
    const value = str.trim();
    switch (value) {
      case "horizontal":
        custom.hFlip = true;
        break;
      case "vertical":
        custom.vFlip = true;
        break;
    }
  });
}
function alignmentFromString(custom, align) {
  align.split(separator).forEach((str) => {
    const value = str.trim();
    switch (value) {
      case "left":
      case "center":
      case "right":
        custom.hAlign = value;
        break;
      case "top":
      case "middle":
      case "bottom":
        custom.vAlign = value;
        break;
      case "slice":
      case "crop":
        custom.slice = true;
        break;
      case "meet":
        custom.slice = false;
    }
  });
}
function rotateFromString(value, defaultValue = 0) {
  const units = value.replace(/^-?[0-9.]*/, "");
  function cleanup(value2) {
    while (value2 < 0) {
      value2 += 4;
    }
    return value2 % 4;
  }
  if (units === "") {
    const num = parseInt(value);
    return isNaN(num) ? 0 : cleanup(num);
  } else if (units !== value) {
    let split = 0;
    switch (units) {
      case "%":
        split = 25;
        break;
      case "deg":
        split = 90;
    }
    if (split) {
      let num = parseFloat(value.slice(0, value.length - units.length));
      if (isNaN(num)) {
        return 0;
      }
      num = num / split;
      return num % 1 === 0 ? cleanup(num) : 0;
    }
  }
  return defaultValue;
}
const svgDefaults = {
  "xmlns": "http://www.w3.org/2000/svg",
  "xmlns:xlink": "http://www.w3.org/1999/xlink",
  "aria-hidden": true,
  "role": "img"
};
let customisationAliases = {};
["horizontal", "vertical"].forEach((prefix) => {
  ["Align", "Flip"].forEach((suffix) => {
    const attr = prefix.slice(0, 1) + suffix;
    const value = {
      attr,
      boolean: suffix === "Flip"
    };
    customisationAliases[prefix + "-" + suffix.toLowerCase()] = value;
    customisationAliases[prefix.slice(0, 1) + "-" + suffix.toLowerCase()] = value;
    customisationAliases[prefix + suffix] = value;
  });
});
const render = (icon, props) => {
  const customisations = mergeCustomisations(defaults, props);
  const componentProps = { ...svgDefaults };
  let style = typeof props.style === "object" && !(props.style instanceof Array) ? { ...props.style } : {};
  for (let key in props) {
    const value = props[key];
    if (value === void 0) {
      continue;
    }
    switch (key) {
      case "icon":
      case "style":
      case "onLoad":
        break;
      case "inline":
      case "hFlip":
      case "vFlip":
        customisations[key] = value === true || value === "true" || value === 1;
        break;
      case "flip":
        if (typeof value === "string") {
          flipFromString(customisations, value);
        }
        break;
      case "align":
        if (typeof value === "string") {
          alignmentFromString(customisations, value);
        }
        break;
      case "color":
        style.color = value;
        break;
      case "rotate":
        if (typeof value === "string") {
          customisations[key] = rotateFromString(value);
        } else if (typeof value === "number") {
          customisations[key] = value;
        }
        break;
      case "ariaHidden":
      case "aria-hidden":
        if (value !== true && value !== "true") {
          delete componentProps["aria-hidden"];
        }
        break;
      default:
        if (customisationAliases[key] !== void 0) {
          if (customisationAliases[key].boolean && (value === true || value === "true" || value === 1)) {
            customisations[customisationAliases[key].attr] = true;
          } else if (!customisationAliases[key].boolean && typeof value === "string" && value !== "") {
            customisations[customisationAliases[key].attr] = value;
          }
        } else if (defaults[key] === void 0) {
          componentProps[key] = value;
        }
    }
  }
  const item = iconToSVG(icon, customisations);
  for (let key in item.attributes) {
    componentProps[key] = item.attributes[key];
  }
  if (item.inline && style.verticalAlign === void 0 && style["vertical-align"] === void 0) {
    style.verticalAlign = "-0.125em";
  }
  let localCounter = 0;
  let id2 = props.id;
  if (typeof id2 === "string") {
    id2 = id2.replace(/-/g, "_");
  }
  componentProps["innerHTML"] = replaceIDs(item.body, id2 ? () => id2 + "ID" + localCounter++ : "iconifyVue");
  if (Object.keys(style).length > 0) {
    componentProps["style"] = style;
  }
  return h$4("svg", componentProps);
};
allowSimpleNames(true);
setAPIModule("", fetchAPIModule);
if (typeof document !== "undefined" && typeof window !== "undefined") {
  cache$1.store = storeCache;
  loadCache();
  const _window2 = window;
  if (_window2.IconifyPreload !== void 0) {
    const preload2 = _window2.IconifyPreload;
    const err = "Invalid IconifyPreload syntax.";
    if (typeof preload2 === "object" && preload2 !== null) {
      (preload2 instanceof Array ? preload2 : [preload2]).forEach((item) => {
        try {
          if (
            // Check if item is an object and not null/array
            typeof item !== "object" || item === null || item instanceof Array || // Check for 'icons' and 'prefix'
            typeof item.icons !== "object" || typeof item.prefix !== "string" || // Add icon set
            !addCollection(item)
          ) {
            console.error(err);
          }
        } catch (e3) {
          console.error(err);
        }
      });
    }
  }
  if (_window2.IconifyProviders !== void 0) {
    const providers = _window2.IconifyProviders;
    if (typeof providers === "object" && providers !== null) {
      for (let key in providers) {
        const err = "IconifyProviders[" + key + "] is invalid.";
        try {
          const value = providers[key];
          if (typeof value !== "object" || !value || value.resources === void 0) {
            continue;
          }
          if (!addAPIProvider(key, value)) {
            console.error(err);
          }
        } catch (e3) {
          console.error(err);
        }
      }
    }
  }
}
const emptyIcon = fullIcon({
  body: ""
});
const Icon = /* @__PURE__ */ defineComponent$1({
  // Do not inherit other attributes: it is handled by render()
  inheritAttrs: false,
  // Set initial data
  data() {
    return {
      // Mounted status
      iconMounted: false,
      // Callback counter to trigger re-render
      counter: 0
    };
  },
  mounted() {
    this._name = "";
    this._loadingIcon = null;
    this.iconMounted = true;
  },
  unmounted() {
    this.abortLoading();
  },
  methods: {
    abortLoading() {
      if (this._loadingIcon) {
        this._loadingIcon.abort();
        this._loadingIcon = null;
      }
    },
    // Get data for icon to render or null
    getIcon(icon, onload) {
      if (typeof icon === "object" && icon !== null && typeof icon.body === "string") {
        this._name = "";
        this.abortLoading();
        return {
          data: fullIcon(icon)
        };
      }
      let iconName;
      if (typeof icon !== "string" || (iconName = stringToIcon(icon, false, true)) === null) {
        this.abortLoading();
        return null;
      }
      const data = getIconData(iconName);
      if (data === null) {
        if (!this._loadingIcon || this._loadingIcon.name !== icon) {
          this.abortLoading();
          this._name = "";
          this._loadingIcon = {
            name: icon,
            abort: loadIcons([iconName], () => {
              this.counter++;
            })
          };
        }
        return null;
      }
      this.abortLoading();
      if (this._name !== icon) {
        this._name = icon;
        if (onload) {
          onload(icon);
        }
      }
      const classes = ["iconify"];
      if (iconName.prefix !== "") {
        classes.push("iconify--" + iconName.prefix);
      }
      if (iconName.provider !== "") {
        classes.push("iconify--" + iconName.provider);
      }
      return { data, classes };
    }
  },
  // Render icon
  render() {
    this.counter;
    const props = this.$attrs;
    const icon = this.iconMounted ? this.getIcon(props.icon, props.onLoad) : null;
    if (!icon) {
      return render(emptyIcon, props);
    }
    let newProps = props;
    if (icon.classes) {
      newProps = {
        ...props,
        class: (typeof props["class"] === "string" ? props["class"] + " " : "") + icon.classes.join(" ")
      };
    }
    return render(icon.data, newProps);
  }
});
var _a$2;
const isClient$1 = typeof window !== "undefined";
const isFunction$1 = (val) => typeof val === "function";
const isNumber$2 = (val) => typeof val === "number";
const isString$1 = (val) => typeof val === "string";
const clamp$1 = (n2, min2, max2) => Math.min(max2, Math.max(min2, n2));
const noop$3 = () => {
};
const isIOS = isClient$1 && ((_a$2 = window == null ? void 0 : window.navigator) == null ? void 0 : _a$2.userAgent) && /iP(ad|hone|od)/.test(window.navigator.userAgent);
function resolveUnref(r2) {
  return typeof r2 === "function" ? r2() : unref$1(r2);
}
function createFilterWrapper$1(filter, fn2) {
  function wrapper(...args) {
    return new Promise((resolve2, reject) => {
      Promise.resolve(filter(() => fn2.apply(this, args), { fn: fn2, thisArg: this, args })).then(resolve2).catch(reject);
    });
  }
  return wrapper;
}
const bypassFilter = (invoke) => {
  return invoke();
};
function debounceFilter$1(ms2, options = {}) {
  let timer;
  let maxTimer;
  let lastRejector = noop$3;
  const _clearTimeout = (timer2) => {
    clearTimeout(timer2);
    lastRejector();
    lastRejector = noop$3;
  };
  const filter = (invoke) => {
    const duration = resolveUnref(ms2);
    const maxDuration = resolveUnref(options.maxWait);
    if (timer)
      _clearTimeout(timer);
    if (duration <= 0 || maxDuration !== void 0 && maxDuration <= 0) {
      if (maxTimer) {
        _clearTimeout(maxTimer);
        maxTimer = null;
      }
      return Promise.resolve(invoke());
    }
    return new Promise((resolve2, reject) => {
      lastRejector = options.rejectOnCancel ? reject : resolve2;
      if (maxDuration && !maxTimer) {
        maxTimer = setTimeout(() => {
          if (timer)
            _clearTimeout(timer);
          maxTimer = null;
          resolve2(invoke());
        }, maxDuration);
      }
      timer = setTimeout(() => {
        if (maxTimer)
          _clearTimeout(maxTimer);
        maxTimer = null;
        resolve2(invoke());
      }, duration);
    });
  };
  return filter;
}
function pausableFilter(extendFilter = bypassFilter) {
  const isActive = ref$1(true);
  function pause() {
    isActive.value = false;
  }
  function resume() {
    isActive.value = true;
  }
  const eventFilter = (...args) => {
    if (isActive.value)
      extendFilter(...args);
  };
  return { isActive: readonly$1(isActive), pause, resume, eventFilter };
}
function identity(arg) {
  return arg;
}
function tryOnScopeDispose$1(fn2) {
  if (getCurrentScope$1()) {
    onScopeDispose$1(fn2);
    return true;
  }
  return false;
}
function useDebounceFn$1(fn2, ms2 = 200, options = {}) {
  return createFilterWrapper$1(debounceFilter$1(ms2, options), fn2);
}
function refDebounced$1(value, ms2 = 200, options = {}) {
  const debounced = ref$1(value.value);
  const updater = useDebounceFn$1(() => {
    debounced.value = value.value;
  }, ms2, options);
  watch$1(value, () => updater());
  return debounced;
}
function resolveRef(r2) {
  return typeof r2 === "function" ? computed$2(r2) : ref$1(r2);
}
function syncRefs(source, targets, options = {}) {
  const {
    flush = "sync",
    deep = false,
    immediate = true
  } = options;
  if (!Array.isArray(targets))
    targets = [targets];
  return watch$1(source, (newValue) => targets.forEach((target) => target.value = newValue), { flush, deep, immediate });
}
function tryOnMounted(fn2, sync = true) {
  if (getCurrentInstance$1())
    onMounted$1(fn2);
  else if (sync)
    fn2();
  else
    nextTick$1(fn2);
}
function useTimeoutFn(cb, interval, options = {}) {
  const {
    immediate = true
  } = options;
  const isPending = ref$1(false);
  let timer = null;
  function clear2() {
    if (timer) {
      clearTimeout(timer);
      timer = null;
    }
  }
  function stop() {
    isPending.value = false;
    clear2();
  }
  function start(...args) {
    clear2();
    isPending.value = true;
    timer = setTimeout(() => {
      isPending.value = false;
      timer = null;
      cb(...args);
    }, resolveUnref(interval));
  }
  if (immediate) {
    isPending.value = true;
    if (isClient$1)
      start();
  }
  tryOnScopeDispose$1(stop);
  return {
    isPending: readonly$1(isPending),
    start,
    stop
  };
}
function useToggle(initialValue = false, options = {}) {
  const {
    truthyValue = true,
    falsyValue = false
  } = options;
  const valueIsRef = isRef$1(initialValue);
  const _value = ref$1(initialValue);
  function toggle(value) {
    if (arguments.length) {
      _value.value = value;
      return _value.value;
    } else {
      const truthy = resolveUnref(truthyValue);
      _value.value = _value.value === truthy ? resolveUnref(falsyValue) : truthy;
      return _value.value;
    }
  }
  if (valueIsRef)
    return toggle;
  else
    return [_value, toggle];
}
var __getOwnPropSymbols$6$1 = Object.getOwnPropertySymbols;
var __hasOwnProp$6$1 = Object.prototype.hasOwnProperty;
var __propIsEnum$6$1 = Object.prototype.propertyIsEnumerable;
var __objRest$5 = (source, exclude) => {
  var target = {};
  for (var prop in source)
    if (__hasOwnProp$6$1.call(source, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source[prop];
  if (source != null && __getOwnPropSymbols$6$1)
    for (var prop of __getOwnPropSymbols$6$1(source)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum$6$1.call(source, prop))
        target[prop] = source[prop];
    }
  return target;
};
function watchWithFilter(source, cb, options = {}) {
  const _a2 = options, {
    eventFilter = bypassFilter
  } = _a2, watchOptions = __objRest$5(_a2, [
    "eventFilter"
  ]);
  return watch$1(source, createFilterWrapper$1(eventFilter, cb), watchOptions);
}
var __defProp$2$1 = Object.defineProperty;
var __defProps$2$1 = Object.defineProperties;
var __getOwnPropDescs$2$1 = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols$2$1 = Object.getOwnPropertySymbols;
var __hasOwnProp$2$1 = Object.prototype.hasOwnProperty;
var __propIsEnum$2$1 = Object.prototype.propertyIsEnumerable;
var __defNormalProp$2$1 = (obj, key, value) => key in obj ? __defProp$2$1(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues$2$1 = (a4, b4) => {
  for (var prop in b4 || (b4 = {}))
    if (__hasOwnProp$2$1.call(b4, prop))
      __defNormalProp$2$1(a4, prop, b4[prop]);
  if (__getOwnPropSymbols$2$1)
    for (var prop of __getOwnPropSymbols$2$1(b4)) {
      if (__propIsEnum$2$1.call(b4, prop))
        __defNormalProp$2$1(a4, prop, b4[prop]);
    }
  return a4;
};
var __spreadProps$2$1 = (a4, b4) => __defProps$2$1(a4, __getOwnPropDescs$2$1(b4));
var __objRest$1$1 = (source, exclude) => {
  var target = {};
  for (var prop in source)
    if (__hasOwnProp$2$1.call(source, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source[prop];
  if (source != null && __getOwnPropSymbols$2$1)
    for (var prop of __getOwnPropSymbols$2$1(source)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum$2$1.call(source, prop))
        target[prop] = source[prop];
    }
  return target;
};
function watchPausable(source, cb, options = {}) {
  const _a2 = options, {
    eventFilter: filter
  } = _a2, watchOptions = __objRest$1$1(_a2, [
    "eventFilter"
  ]);
  const { eventFilter, pause, resume, isActive } = pausableFilter(filter);
  const stop = watchWithFilter(source, cb, __spreadProps$2$1(__spreadValues$2$1({}, watchOptions), {
    eventFilter
  }));
  return { stop, pause, resume, isActive };
}
function unrefElement$1(elRef) {
  var _a2;
  const plain = resolveUnref(elRef);
  return (_a2 = plain == null ? void 0 : plain.$el) != null ? _a2 : plain;
}
const defaultWindow$1 = isClient$1 ? window : void 0;
const defaultDocument = isClient$1 ? window.document : void 0;
const defaultNavigator = isClient$1 ? window.navigator : void 0;
function useEventListener$1(...args) {
  let target;
  let events;
  let listeners;
  let options;
  if (isString$1(args[0]) || Array.isArray(args[0])) {
    [events, listeners, options] = args;
    target = defaultWindow$1;
  } else {
    [target, events, listeners, options] = args;
  }
  if (!target)
    return noop$3;
  if (!Array.isArray(events))
    events = [events];
  if (!Array.isArray(listeners))
    listeners = [listeners];
  const cleanups = [];
  const cleanup = () => {
    cleanups.forEach((fn2) => fn2());
    cleanups.length = 0;
  };
  const register = (el3, event, listener, options2) => {
    el3.addEventListener(event, listener, options2);
    return () => el3.removeEventListener(event, listener, options2);
  };
  const stopWatch = watch$1(() => [unrefElement$1(target), resolveUnref(options)], ([el3, options2]) => {
    cleanup();
    if (!el3)
      return;
    cleanups.push(...events.flatMap((event) => {
      return listeners.map((listener) => register(el3, event, listener, options2));
    }));
  }, { immediate: true, flush: "post" });
  const stop = () => {
    stopWatch();
    cleanup();
  };
  tryOnScopeDispose$1(stop);
  return stop;
}
let _iOSWorkaround = false;
function onClickOutside(target, handler, options = {}) {
  const { window: window2 = defaultWindow$1, ignore = [], capture = true, detectIframe = false } = options;
  if (!window2)
    return;
  if (isIOS && !_iOSWorkaround) {
    _iOSWorkaround = true;
    Array.from(window2.document.body.children).forEach((el3) => el3.addEventListener("click", noop$3));
  }
  let shouldListen = true;
  const shouldIgnore = (event) => {
    return ignore.some((target2) => {
      if (typeof target2 === "string") {
        return Array.from(window2.document.querySelectorAll(target2)).some((el3) => el3 === event.target || event.composedPath().includes(el3));
      } else {
        const el3 = unrefElement$1(target2);
        return el3 && (event.target === el3 || event.composedPath().includes(el3));
      }
    });
  };
  const listener = (event) => {
    const el3 = unrefElement$1(target);
    if (!el3 || el3 === event.target || event.composedPath().includes(el3))
      return;
    if (event.detail === 0)
      shouldListen = !shouldIgnore(event);
    if (!shouldListen) {
      shouldListen = true;
      return;
    }
    handler(event);
  };
  const cleanup = [
    useEventListener$1(window2, "click", listener, { passive: true, capture }),
    useEventListener$1(window2, "pointerdown", (e3) => {
      const el3 = unrefElement$1(target);
      if (el3)
        shouldListen = !e3.composedPath().includes(el3) && !shouldIgnore(e3);
    }, { passive: true }),
    detectIframe && useEventListener$1(window2, "blur", (event) => {
      var _a2;
      const el3 = unrefElement$1(target);
      if (((_a2 = window2.document.activeElement) == null ? void 0 : _a2.tagName) === "IFRAME" && !(el3 == null ? void 0 : el3.contains(window2.document.activeElement)))
        handler(event);
    })
  ].filter(Boolean);
  const stop = () => cleanup.forEach((fn2) => fn2());
  return stop;
}
function useSupported(callback, sync = false) {
  const isSupported2 = ref$1();
  const update = () => isSupported2.value = Boolean(callback());
  update();
  tryOnMounted(update, sync);
  return isSupported2;
}
function useMediaQuery(query, options = {}) {
  const { window: window2 = defaultWindow$1 } = options;
  const isSupported2 = useSupported(() => window2 && "matchMedia" in window2 && typeof window2.matchMedia === "function");
  let mediaQuery;
  const matches2 = ref$1(false);
  const cleanup = () => {
    if (!mediaQuery)
      return;
    if ("removeEventListener" in mediaQuery)
      mediaQuery.removeEventListener("change", update);
    else
      mediaQuery.removeListener(update);
  };
  const update = () => {
    if (!isSupported2.value)
      return;
    cleanup();
    mediaQuery = window2.matchMedia(resolveRef(query).value);
    matches2.value = mediaQuery.matches;
    if ("addEventListener" in mediaQuery)
      mediaQuery.addEventListener("change", update);
    else
      mediaQuery.addListener(update);
  };
  watchEffect$1(update);
  tryOnScopeDispose$1(() => cleanup());
  return matches2;
}
function useClipboard(options = {}) {
  const {
    navigator: navigator2 = defaultNavigator,
    read: read2 = false,
    source,
    copiedDuring = 1500,
    legacy = false
  } = options;
  const events = ["copy", "cut"];
  const isClipboardApiSupported = useSupported(() => navigator2 && "clipboard" in navigator2);
  const isSupported2 = computed$2(() => isClipboardApiSupported.value || legacy);
  const text = ref$1("");
  const copied = ref$1(false);
  const timeout = useTimeoutFn(() => copied.value = false, copiedDuring);
  function updateText() {
    if (isClipboardApiSupported.value) {
      navigator2.clipboard.readText().then((value) => {
        text.value = value;
      });
    } else {
      text.value = legacyRead();
    }
  }
  if (isSupported2.value && read2) {
    for (const event of events)
      useEventListener$1(event, updateText);
  }
  async function copy(value = resolveUnref(source)) {
    if (isSupported2.value && value != null) {
      if (isClipboardApiSupported.value)
        await navigator2.clipboard.writeText(value);
      else
        legacyCopy(value);
      text.value = value;
      copied.value = true;
      timeout.start();
    }
  }
  function legacyCopy(value) {
    const ta2 = document.createElement("textarea");
    ta2.value = value != null ? value : "";
    ta2.style.position = "absolute";
    ta2.style.opacity = "0";
    document.body.appendChild(ta2);
    ta2.select();
    document.execCommand("copy");
    ta2.remove();
  }
  function legacyRead() {
    var _a2, _b, _c2;
    return (_c2 = (_b = (_a2 = document == null ? void 0 : document.getSelection) == null ? void 0 : _a2.call(document)) == null ? void 0 : _b.toString()) != null ? _c2 : "";
  }
  return {
    isSupported: isSupported2,
    text,
    copied,
    copy
  };
}
const _global$1 = typeof globalThis !== "undefined" ? globalThis : typeof window !== "undefined" ? window : typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : {};
const globalKey = "__vueuse_ssr_handlers__";
_global$1[globalKey] = _global$1[globalKey] || {};
const handlers = _global$1[globalKey];
function getSSRHandler(key, fallback) {
  return handlers[key] || fallback;
}
function guessSerializerType(rawInit) {
  return rawInit == null ? "any" : rawInit instanceof Set ? "set" : rawInit instanceof Map ? "map" : rawInit instanceof Date ? "date" : typeof rawInit === "boolean" ? "boolean" : typeof rawInit === "string" ? "string" : typeof rawInit === "object" ? "object" : !Number.isNaN(rawInit) ? "number" : "any";
}
var __defProp$k = Object.defineProperty;
var __getOwnPropSymbols$m = Object.getOwnPropertySymbols;
var __hasOwnProp$m = Object.prototype.hasOwnProperty;
var __propIsEnum$m = Object.prototype.propertyIsEnumerable;
var __defNormalProp$k = (obj, key, value) => key in obj ? __defProp$k(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues$k = (a4, b4) => {
  for (var prop in b4 || (b4 = {}))
    if (__hasOwnProp$m.call(b4, prop))
      __defNormalProp$k(a4, prop, b4[prop]);
  if (__getOwnPropSymbols$m)
    for (var prop of __getOwnPropSymbols$m(b4)) {
      if (__propIsEnum$m.call(b4, prop))
        __defNormalProp$k(a4, prop, b4[prop]);
    }
  return a4;
};
const StorageSerializers = {
  boolean: {
    read: (v2) => v2 === "true",
    write: (v2) => String(v2)
  },
  object: {
    read: (v2) => JSON.parse(v2),
    write: (v2) => JSON.stringify(v2)
  },
  number: {
    read: (v2) => Number.parseFloat(v2),
    write: (v2) => String(v2)
  },
  any: {
    read: (v2) => v2,
    write: (v2) => String(v2)
  },
  string: {
    read: (v2) => v2,
    write: (v2) => String(v2)
  },
  map: {
    read: (v2) => new Map(JSON.parse(v2)),
    write: (v2) => JSON.stringify(Array.from(v2.entries()))
  },
  set: {
    read: (v2) => new Set(JSON.parse(v2)),
    write: (v2) => JSON.stringify(Array.from(v2))
  },
  date: {
    read: (v2) => new Date(v2),
    write: (v2) => v2.toISOString()
  }
};
const customStorageEventName = "vueuse-storage";
function useStorage(key, defaults2, storage2, options = {}) {
  var _a2;
  const {
    flush = "pre",
    deep = true,
    listenToStorageChanges = true,
    writeDefaults = true,
    mergeDefaults = false,
    shallow,
    window: window2 = defaultWindow$1,
    eventFilter,
    onError = (e3) => {
      console.error(e3);
    }
  } = options;
  const data = (shallow ? shallowRef$1 : ref$1)(defaults2);
  if (!storage2) {
    try {
      storage2 = getSSRHandler("getDefaultStorage", () => {
        var _a22;
        return (_a22 = defaultWindow$1) == null ? void 0 : _a22.localStorage;
      })();
    } catch (e3) {
      onError(e3);
    }
  }
  if (!storage2)
    return data;
  const rawInit = resolveUnref(defaults2);
  const type = guessSerializerType(rawInit);
  const serializer = (_a2 = options.serializer) != null ? _a2 : StorageSerializers[type];
  const { pause: pauseWatch, resume: resumeWatch } = watchPausable(data, () => write(data.value), { flush, deep, eventFilter });
  if (window2 && listenToStorageChanges) {
    useEventListener$1(window2, "storage", update);
    useEventListener$1(window2, customStorageEventName, updateFromCustomEvent);
  }
  update();
  return data;
  function write(v2) {
    try {
      if (v2 == null) {
        storage2.removeItem(key);
      } else {
        const serialized = serializer.write(v2);
        const oldValue = storage2.getItem(key);
        if (oldValue !== serialized) {
          storage2.setItem(key, serialized);
          if (window2) {
            window2.dispatchEvent(new CustomEvent(customStorageEventName, {
              detail: {
                key,
                oldValue,
                newValue: serialized,
                storageArea: storage2
              }
            }));
          }
        }
      }
    } catch (e3) {
      onError(e3);
    }
  }
  function read2(event) {
    const rawValue = event ? event.newValue : storage2.getItem(key);
    if (rawValue == null) {
      if (writeDefaults && rawInit !== null)
        storage2.setItem(key, serializer.write(rawInit));
      return rawInit;
    } else if (!event && mergeDefaults) {
      const value = serializer.read(rawValue);
      if (isFunction$1(mergeDefaults))
        return mergeDefaults(value, rawInit);
      else if (type === "object" && !Array.isArray(value))
        return __spreadValues$k(__spreadValues$k({}, rawInit), value);
      return value;
    } else if (typeof rawValue !== "string") {
      return rawValue;
    } else {
      return serializer.read(rawValue);
    }
  }
  function updateFromCustomEvent(event) {
    update(event.detail);
  }
  function update(event) {
    if (event && event.storageArea !== storage2)
      return;
    if (event && event.key == null) {
      data.value = rawInit;
      return;
    }
    if (event && event.key !== key)
      return;
    pauseWatch();
    try {
      data.value = read2(event);
    } catch (e3) {
      onError(e3);
    } finally {
      if (event)
        nextTick$1(resumeWatch);
      else
        resumeWatch();
    }
  }
}
function usePreferredDark(options) {
  return useMediaQuery("(prefers-color-scheme: dark)", options);
}
var __defProp$j = Object.defineProperty;
var __getOwnPropSymbols$l = Object.getOwnPropertySymbols;
var __hasOwnProp$l = Object.prototype.hasOwnProperty;
var __propIsEnum$l = Object.prototype.propertyIsEnumerable;
var __defNormalProp$j = (obj, key, value) => key in obj ? __defProp$j(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues$j = (a4, b4) => {
  for (var prop in b4 || (b4 = {}))
    if (__hasOwnProp$l.call(b4, prop))
      __defNormalProp$j(a4, prop, b4[prop]);
  if (__getOwnPropSymbols$l)
    for (var prop of __getOwnPropSymbols$l(b4)) {
      if (__propIsEnum$l.call(b4, prop))
        __defNormalProp$j(a4, prop, b4[prop]);
    }
  return a4;
};
function useColorMode(options = {}) {
  const {
    selector = "html",
    attribute = "class",
    initialValue = "auto",
    window: window2 = defaultWindow$1,
    storage: storage2,
    storageKey = "vueuse-color-scheme",
    listenToStorageChanges = true,
    storageRef,
    emitAuto
  } = options;
  const modes = __spreadValues$j({
    auto: "",
    light: "light",
    dark: "dark"
  }, options.modes || {});
  const preferredDark = usePreferredDark({ window: window2 });
  const preferredMode = computed$2(() => preferredDark.value ? "dark" : "light");
  const store = storageRef || (storageKey == null ? ref$1(initialValue) : useStorage(storageKey, initialValue, storage2, { window: window2, listenToStorageChanges }));
  const state = computed$2({
    get() {
      return store.value === "auto" && !emitAuto ? preferredMode.value : store.value;
    },
    set(v2) {
      store.value = v2;
    }
  });
  const updateHTMLAttrs = getSSRHandler("updateHTMLAttrs", (selector2, attribute2, value) => {
    const el3 = window2 == null ? void 0 : window2.document.querySelector(selector2);
    if (!el3)
      return;
    if (attribute2 === "class") {
      const current = value.split(/\s/g);
      Object.values(modes).flatMap((i3) => (i3 || "").split(/\s/g)).filter(Boolean).forEach((v2) => {
        if (current.includes(v2))
          el3.classList.add(v2);
        else
          el3.classList.remove(v2);
      });
    } else {
      el3.setAttribute(attribute2, value);
    }
  });
  function defaultOnChanged(mode) {
    var _a2;
    const resolvedMode = mode === "auto" ? preferredMode.value : mode;
    updateHTMLAttrs(selector, attribute, (_a2 = modes[resolvedMode]) != null ? _a2 : resolvedMode);
  }
  function onChanged(mode) {
    if (options.onChanged)
      options.onChanged(mode, defaultOnChanged);
    else
      defaultOnChanged(mode);
  }
  watch$1(state, onChanged, { flush: "post", immediate: true });
  if (emitAuto)
    watch$1(preferredMode, () => onChanged(state.value), { flush: "post" });
  tryOnMounted(() => onChanged(state.value));
  return state;
}
var __defProp$i = Object.defineProperty;
var __defProps$7 = Object.defineProperties;
var __getOwnPropDescs$7 = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols$k = Object.getOwnPropertySymbols;
var __hasOwnProp$k = Object.prototype.hasOwnProperty;
var __propIsEnum$k = Object.prototype.propertyIsEnumerable;
var __defNormalProp$i = (obj, key, value) => key in obj ? __defProp$i(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues$i = (a4, b4) => {
  for (var prop in b4 || (b4 = {}))
    if (__hasOwnProp$k.call(b4, prop))
      __defNormalProp$i(a4, prop, b4[prop]);
  if (__getOwnPropSymbols$k)
    for (var prop of __getOwnPropSymbols$k(b4)) {
      if (__propIsEnum$k.call(b4, prop))
        __defNormalProp$i(a4, prop, b4[prop]);
    }
  return a4;
};
var __spreadProps$7 = (a4, b4) => __defProps$7(a4, __getOwnPropDescs$7(b4));
function useDark(options = {}) {
  const {
    valueDark = "dark",
    valueLight = "",
    window: window2 = defaultWindow$1
  } = options;
  const mode = useColorMode(__spreadProps$7(__spreadValues$i({}, options), {
    onChanged: (mode2, defaultHandler) => {
      var _a2;
      if (options.onChanged)
        (_a2 = options.onChanged) == null ? void 0 : _a2.call(options, mode2 === "dark");
      else
        defaultHandler(mode2);
    },
    modes: {
      dark: valueDark,
      light: valueLight
    }
  }));
  const preferredDark = usePreferredDark({ window: window2 });
  const isDark = computed$2({
    get() {
      return mode.value === "dark";
    },
    set(v2) {
      if (v2 === preferredDark.value)
        mode.value = "auto";
      else
        mode.value = v2 ? "dark" : "light";
    }
  });
  return isDark;
}
var __getOwnPropSymbols$g = Object.getOwnPropertySymbols;
var __hasOwnProp$g = Object.prototype.hasOwnProperty;
var __propIsEnum$g = Object.prototype.propertyIsEnumerable;
var __objRest$2 = (source, exclude) => {
  var target = {};
  for (var prop in source)
    if (__hasOwnProp$g.call(source, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source[prop];
  if (source != null && __getOwnPropSymbols$g)
    for (var prop of __getOwnPropSymbols$g(source)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum$g.call(source, prop))
        target[prop] = source[prop];
    }
  return target;
};
function useResizeObserver(target, callback, options = {}) {
  const _a2 = options, { window: window2 = defaultWindow$1 } = _a2, observerOptions = __objRest$2(_a2, ["window"]);
  let observer;
  const isSupported2 = useSupported(() => window2 && "ResizeObserver" in window2);
  const cleanup = () => {
    if (observer) {
      observer.disconnect();
      observer = void 0;
    }
  };
  const stopWatch = watch$1(() => unrefElement$1(target), (el3) => {
    cleanup();
    if (isSupported2.value && window2 && el3) {
      observer = new ResizeObserver(callback);
      observer.observe(el3, observerOptions);
    }
  }, { immediate: true, flush: "post" });
  const stop = () => {
    cleanup();
    stopWatch();
  };
  tryOnScopeDispose$1(stop);
  return {
    isSupported: isSupported2,
    stop
  };
}
function useRafFn(fn2, options = {}) {
  const {
    immediate = true,
    window: window2 = defaultWindow$1
  } = options;
  const isActive = ref$1(false);
  let previousFrameTimestamp = 0;
  let rafId = null;
  function loop(timestamp) {
    if (!isActive.value || !window2)
      return;
    const delta = timestamp - previousFrameTimestamp;
    fn2({ delta, timestamp });
    previousFrameTimestamp = timestamp;
    rafId = window2.requestAnimationFrame(loop);
  }
  function resume() {
    if (!isActive.value && window2) {
      isActive.value = true;
      rafId = window2.requestAnimationFrame(loop);
    }
  }
  function pause() {
    isActive.value = false;
    if (rafId != null && window2) {
      window2.cancelAnimationFrame(rafId);
      rafId = null;
    }
  }
  if (immediate)
    resume();
  tryOnScopeDispose$1(pause);
  return {
    isActive: readonly$1(isActive),
    pause,
    resume
  };
}
function useFocus(target, options = {}) {
  const { initialValue = false } = options;
  const innerFocused = ref$1(false);
  const targetElement = computed$2(() => unrefElement$1(target));
  useEventListener$1(targetElement, "focus", () => innerFocused.value = true);
  useEventListener$1(targetElement, "blur", () => innerFocused.value = false);
  const focused = computed$2({
    get: () => innerFocused.value,
    set(value) {
      var _a2, _b;
      if (!value && innerFocused.value)
        (_a2 = targetElement.value) == null ? void 0 : _a2.blur();
      else if (value && !innerFocused.value)
        (_b = targetElement.value) == null ? void 0 : _b.focus();
    }
  });
  watch$1(targetElement, () => {
    focused.value = initialValue;
  }, { immediate: true, flush: "post" });
  return { focused };
}
var __getOwnPropSymbols$8 = Object.getOwnPropertySymbols;
var __hasOwnProp$8 = Object.prototype.hasOwnProperty;
var __propIsEnum$8 = Object.prototype.propertyIsEnumerable;
var __objRest$1 = (source, exclude) => {
  var target = {};
  for (var prop in source)
    if (__hasOwnProp$8.call(source, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source[prop];
  if (source != null && __getOwnPropSymbols$8)
    for (var prop of __getOwnPropSymbols$8(source)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum$8.call(source, prop))
        target[prop] = source[prop];
    }
  return target;
};
function useMutationObserver(target, callback, options = {}) {
  const _a2 = options, { window: window2 = defaultWindow$1 } = _a2, mutationOptions = __objRest$1(_a2, ["window"]);
  let observer;
  const isSupported2 = useSupported(() => window2 && "MutationObserver" in window2);
  const cleanup = () => {
    if (observer) {
      observer.disconnect();
      observer = void 0;
    }
  };
  const stopWatch = watch$1(() => unrefElement$1(target), (el3) => {
    cleanup();
    if (isSupported2.value && window2 && el3) {
      observer = new MutationObserver(callback);
      observer.observe(el3, mutationOptions);
    }
  }, { immediate: true });
  const stop = () => {
    cleanup();
    stopWatch();
  };
  tryOnScopeDispose$1(stop);
  return {
    isSupported: isSupported2,
    stop
  };
}
var SwipeDirection;
(function(SwipeDirection2) {
  SwipeDirection2["UP"] = "UP";
  SwipeDirection2["RIGHT"] = "RIGHT";
  SwipeDirection2["DOWN"] = "DOWN";
  SwipeDirection2["LEFT"] = "LEFT";
  SwipeDirection2["NONE"] = "NONE";
})(SwipeDirection || (SwipeDirection = {}));
function useTitle(newTitle = null, options = {}) {
  var _a2, _b;
  const {
    document: document2 = defaultDocument
  } = options;
  const title = resolveRef((_a2 = newTitle != null ? newTitle : document2 == null ? void 0 : document2.title) != null ? _a2 : null);
  const isReadonly2 = newTitle && isFunction$1(newTitle);
  function format2(t3) {
    if (!("titleTemplate" in options))
      return t3;
    const template = options.titleTemplate || "%s";
    return isFunction$1(template) ? template(t3) : unref$1(template).replace(/%s/g, t3);
  }
  watch$1(title, (t3, o2) => {
    if (t3 !== o2 && document2)
      document2.title = format2(isString$1(t3) ? t3 : "");
  }, { immediate: true });
  if (options.observe && !options.titleTemplate && document2 && !isReadonly2) {
    useMutationObserver((_b = document2.head) == null ? void 0 : _b.querySelector("title"), () => {
      if (document2 && document2.title !== title.value)
        title.value = format2(document2.title);
    }, { childList: true });
  }
  return title;
}
var __defProp = Object.defineProperty;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a4, b4) => {
  for (var prop in b4 || (b4 = {}))
    if (__hasOwnProp.call(b4, prop))
      __defNormalProp(a4, prop, b4[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b4)) {
      if (__propIsEnum.call(b4, prop))
        __defNormalProp(a4, prop, b4[prop]);
    }
  return a4;
};
const _TransitionPresets = {
  easeInSine: [0.12, 0, 0.39, 0],
  easeOutSine: [0.61, 1, 0.88, 1],
  easeInOutSine: [0.37, 0, 0.63, 1],
  easeInQuad: [0.11, 0, 0.5, 0],
  easeOutQuad: [0.5, 1, 0.89, 1],
  easeInOutQuad: [0.45, 0, 0.55, 1],
  easeInCubic: [0.32, 0, 0.67, 0],
  easeOutCubic: [0.33, 1, 0.68, 1],
  easeInOutCubic: [0.65, 0, 0.35, 1],
  easeInQuart: [0.5, 0, 0.75, 0],
  easeOutQuart: [0.25, 1, 0.5, 1],
  easeInOutQuart: [0.76, 0, 0.24, 1],
  easeInQuint: [0.64, 0, 0.78, 0],
  easeOutQuint: [0.22, 1, 0.36, 1],
  easeInOutQuint: [0.83, 0, 0.17, 1],
  easeInExpo: [0.7, 0, 0.84, 0],
  easeOutExpo: [0.16, 1, 0.3, 1],
  easeInOutExpo: [0.87, 0, 0.13, 1],
  easeInCirc: [0.55, 0, 1, 0.45],
  easeOutCirc: [0, 0.55, 0.45, 1],
  easeInOutCirc: [0.85, 0, 0.15, 1],
  easeInBack: [0.36, 0, 0.66, -0.56],
  easeOutBack: [0.34, 1.56, 0.64, 1],
  easeInOutBack: [0.68, -0.6, 0.32, 1.6]
};
__spreadValues({
  linear: identity
}, _TransitionPresets);
function createEasingFunction([p0, p1, p2, p3]) {
  const a4 = (a1, a22) => 1 - 3 * a22 + 3 * a1;
  const b4 = (a1, a22) => 3 * a22 - 6 * a1;
  const c3 = (a1) => 3 * a1;
  const calcBezier = (t3, a1, a22) => ((a4(a1, a22) * t3 + b4(a1, a22)) * t3 + c3(a1)) * t3;
  const getSlope = (t3, a1, a22) => 3 * a4(a1, a22) * t3 * t3 + 2 * b4(a1, a22) * t3 + c3(a1);
  const getTforX = (x3) => {
    let aGuessT = x3;
    for (let i3 = 0; i3 < 4; ++i3) {
      const currentSlope = getSlope(aGuessT, p0, p2);
      if (currentSlope === 0)
        return aGuessT;
      const currentX = calcBezier(aGuessT, p0, p2) - x3;
      aGuessT -= currentX / currentSlope;
    }
    return aGuessT;
  };
  return (x3) => p0 === p1 && p2 === p3 ? x3 : calcBezier(getTforX(x3), p1, p3);
}
function useTransition(source, options = {}) {
  const {
    delay = 0,
    disabled = false,
    duration = 1e3,
    onFinished = noop$3,
    onStarted = noop$3,
    transition = identity
  } = options;
  const currentTransition = computed$2(() => {
    const t3 = unref$1(transition);
    return isFunction$1(t3) ? t3 : createEasingFunction(t3);
  });
  const sourceValue = computed$2(() => {
    const s5 = unref$1(source);
    return isNumber$2(s5) ? s5 : s5.map(unref$1);
  });
  const sourceVector = computed$2(() => isNumber$2(sourceValue.value) ? [sourceValue.value] : sourceValue.value);
  const outputVector = ref$1(sourceVector.value.slice(0));
  let currentDuration;
  let diffVector;
  let endAt;
  let startAt;
  let startVector;
  const { resume, pause } = useRafFn(() => {
    const now2 = Date.now();
    const progress = clamp$1(1 - (endAt - now2) / currentDuration, 0, 1);
    outputVector.value = startVector.map((val, i3) => {
      var _a2;
      return val + ((_a2 = diffVector[i3]) != null ? _a2 : 0) * currentTransition.value(progress);
    });
    if (progress >= 1) {
      pause();
      onFinished();
    }
  }, { immediate: false });
  const start = () => {
    pause();
    currentDuration = unref$1(duration);
    diffVector = outputVector.value.map((n2, i3) => {
      var _a2, _b;
      return ((_a2 = sourceVector.value[i3]) != null ? _a2 : 0) - ((_b = outputVector.value[i3]) != null ? _b : 0);
    });
    startVector = outputVector.value.slice(0);
    startAt = Date.now();
    endAt = startAt + currentDuration;
    resume();
    onStarted();
  };
  const timeout = useTimeoutFn(start, delay, { immediate: false });
  watch$1(sourceVector, () => {
    if (unref$1(disabled))
      return;
    if (unref$1(delay) <= 0)
      start();
    else
      timeout.start();
  }, { deep: true });
  watch$1(() => unref$1(disabled), (v2) => {
    if (v2) {
      outputVector.value = sourceVector.value.slice(0);
      pause();
    }
  });
  return computed$2(() => {
    const targetVector = unref$1(disabled) ? sourceVector : outputVector;
    return isNumber$2(sourceValue.value) ? targetVector.value[0] : targetVector.value;
  });
}
var define_process_env_default$1 = {};
const va$1 = {
  name: "HstButton"
}, Zo = /* @__PURE__ */ defineComponent$1({
  ...va$1,
  props: {
    color: {}
  },
  setup(n2) {
    const t3 = {
      default: "htw-bg-gray-200 dark:htw-bg-gray-750 htw-text-gray-900 dark:htw-text-gray-100 hover:htw-bg-primary-200 dark:hover:htw-bg-primary-900",
      primary: "htw-bg-primary-500 hover:htw-bg-primary-600 htw-text-white dark:htw-text-black",
      flat: "htw-bg-transparent hover:htw-bg-gray-500/20 htw-text-gray-900 dark:htw-text-gray-100"
    };
    return (e3, i3) => (openBlock$1(), createElementBlock$1("button", {
      class: normalizeClass$1(["histoire-button htw-cursor-pointer htw-rounded-sm", t3[e3.color ?? "default"]])
    }, [
      renderSlot$1(e3.$slots, "default")
    ], 2));
  }
}), Sa$1 = { class: "htw-w-28 htw-whitespace-nowrap htw-text-ellipsis htw-overflow-hidden htw-shrink-0" }, Ca$1 = { class: "htw-grow htw-max-w-full htw-flex htw-items-center htw-gap-1" }, Aa$1 = { class: "htw-block htw-grow htw-max-w-full" }, Oa$1 = {
  name: "HstWrapper"
}, Vt = /* @__PURE__ */ defineComponent$1({
  ...Oa$1,
  props: {
    title: { default: void 0 },
    tag: { default: "label" }
  },
  setup(n2) {
    return (t3, e3) => (openBlock$1(), createBlock$1(resolveDynamicComponent$1(t3.tag), { class: "histoire-wrapper htw-p-2 hover:htw-bg-primary-100 dark:hover:htw-bg-primary-800 htw-flex htw-gap-2 htw-flex-wrap" }, {
      default: withCtx$1(() => [
        withDirectives$1((openBlock$1(), createElementBlock$1("span", Sa$1, [
          createTextVNode$1(toDisplayString$2(t3.title), 1)
        ])), [
          [unref$1(VTooltip), {
            content: t3.title,
            placement: "left",
            distance: 12
          }]
        ]),
        createBaseVNode$1("span", Ca$1, [
          createBaseVNode$1("span", Aa$1, [
            renderSlot$1(t3.$slots, "default")
          ]),
          renderSlot$1(t3.$slots, "actions")
        ])
      ]),
      _: 3
    }));
  }
}), Ma = { class: "htw-flex htw-gap-px htw-border htw-border-solid htw-border-black/25 dark:htw-border-white/25 htw-rounded-sm htw-p-px" }, Ta = {
  name: "HstButtonGroup"
}, Da = /* @__PURE__ */ defineComponent$1({
  ...Ta,
  props: {
    title: {},
    modelValue: {},
    options: {}
  },
  emits: ["update:modelValue"],
  setup(n2, { emit: t3 }) {
    const e3 = n2, i3 = computed$2(() => Array.isArray(e3.options) ? e3.options.map((o2) => typeof o2 == "string" || typeof o2 == "number" ? { value: o2, label: String(o2) } : o2) : Object.keys(e3.options).map((o2) => ({
      value: o2,
      label: e3.options[o2]
    }))), s5 = t3;
    function r2(o2) {
      s5("update:modelValue", o2);
    }
    return (o2, l2) => (openBlock$1(), createBlock$1(Vt, {
      tag: "div",
      role: "group",
      title: o2.title,
      class: "histoire-button-group htw-flex-nowrap htw-items-center"
    }, {
      actions: withCtx$1(() => [
        renderSlot$1(o2.$slots, "actions")
      ]),
      default: withCtx$1(() => [
        createBaseVNode$1("div", Ma, [
          (openBlock$1(true), createElementBlock$1(Fragment$1, null, renderList$1(i3.value, ({ label: h4, value: a4 }) => (openBlock$1(), createBlock$1(Zo, {
            key: a4,
            class: "htw-px-1 htw-h-[22px] htw-flex-1 !htw-rounded-[3px]",
            color: a4 === o2.modelValue ? "primary" : "flat",
            rounded: false,
            onClick: (c3) => r2(a4)
          }, {
            default: withCtx$1(() => [
              createTextVNode$1(toDisplayString$2(h4), 1)
            ]),
            _: 2
          }, 1032, ["color", "onClick"]))), 128))
        ])
      ]),
      _: 3
    }, 8, ["title"]));
  }
}), Pa$1 = {
  width: "16",
  height: "16",
  viewBox: "0 0 24 24",
  class: "htw-relative htw-z-10"
}, Ba$1 = ["stroke-dasharray", "stroke-dashoffset"], Ra$1 = {
  name: "HstSimpleCheckbox"
}, tl$1 = /* @__PURE__ */ defineComponent$1({
  ...Ra$1,
  props: {
    modelValue: { type: Boolean },
    withToggle: { type: Boolean }
  },
  emits: {
    "update:modelValue": (n2) => true
  },
  setup(n2, { emit: t3 }) {
    const e3 = n2, i3 = t3;
    function s5() {
      e3.withToggle && i3("update:modelValue", !e3.modelValue);
    }
    watch$1(() => e3.modelValue, () => {
      a4.value = true;
    });
    const r2 = ref$1(), o2 = ref$1(0), l2 = computed$2(() => e3.modelValue ? 1 : 0), h4 = computed$2(() => (1 - l2.value) * o2.value), a4 = ref$1(false);
    return watch$1(r2, () => {
      var c3, f2;
      o2.value = ((f2 = (c3 = r2.value).getTotalLength) == null ? void 0 : f2.call(c3)) ?? 21.21;
    }), (c3, f2) => (openBlock$1(), createElementBlock$1("div", {
      class: normalizeClass$1(["histoire-simple-checkbox htw-group htw-text-white htw-w-[16px] htw-h-[16px] htw-relative", { "htw-cursor-pointer": c3.withToggle }]),
      onClick: s5
    }, [
      createBaseVNode$1("div", {
        class: normalizeClass$1(["htw-border htw-border-solid group-active:htw-bg-gray-500/20 htw-rounded-sm htw-box-border htw-absolute htw-inset-0 htw-transition-border htw-duration-150 htw-ease-out group-hover:htw-border-primary-500 group-hover:dark:htw-border-primary-500", [
          c3.modelValue ? "htw-border-primary-500 htw-border-8" : "htw-border-black/25 dark:htw-border-white/25 htw-delay-150"
        ]])
      }, null, 2),
      (openBlock$1(), createElementBlock$1("svg", Pa$1, [
        createBaseVNode$1("path", {
          ref_key: "path",
          ref: r2,
          d: "m 4 12 l 5 5 l 10 -10",
          fill: "none",
          class: normalizeClass$1(["htw-stroke-white htw-stroke-2 htw-duration-200 htw-ease-in-out", [
            a4.value ? "htw-transition-all" : "htw-transition-none",
            {
              "htw-delay-150": c3.modelValue
            }
          ]]),
          "stroke-dasharray": o2.value,
          "stroke-dashoffset": h4.value
        }, null, 10, Ba$1)
      ]))
    ], 2));
  }
}), La$1 = {
  name: "HstCheckbox"
}, Ea$1 = /* @__PURE__ */ defineComponent$1({
  ...La$1,
  props: {
    modelValue: { type: [Boolean, String] },
    title: {}
  },
  emits: {
    "update:modelValue": (n2) => true
  },
  setup(n2, { emit: t3 }) {
    const e3 = n2, i3 = t3;
    function s5() {
      if (typeof e3.modelValue == "string") {
        i3("update:modelValue", e3.modelValue === "false" ? "true" : "false");
        return;
      }
      i3("update:modelValue", !e3.modelValue);
    }
    const r2 = computed$2(() => typeof e3.modelValue == "string" ? e3.modelValue !== "false" : e3.modelValue);
    return (o2, l2) => (openBlock$1(), createBlock$1(Vt, {
      role: "checkbox",
      tabindex: "0",
      class: "histoire-checkbox htw-cursor-pointer htw-items-center",
      title: o2.title,
      onClick: l2[0] || (l2[0] = (h4) => s5()),
      onKeydown: [
        l2[1] || (l2[1] = withKeys$1(withModifiers$1((h4) => s5(), ["prevent"]), ["enter"])),
        l2[2] || (l2[2] = withKeys$1(withModifiers$1((h4) => s5(), ["prevent"]), ["space"]))
      ]
    }, {
      actions: withCtx$1(() => [
        renderSlot$1(o2.$slots, "actions")
      ]),
      default: withCtx$1(() => [
        createVNode$1(tl$1, { "model-value": r2.value }, null, 8, ["model-value"])
      ]),
      _: 3
    }, 8, ["title"]));
  }
}), Na$1 = { class: "-htw-my-1" }, Ia$1 = ["for", "onKeydown", "onClick"], Va$1 = {
  name: "HstCheckboxList"
}, Ha$1 = /* @__PURE__ */ defineComponent$1({
  ...Va$1,
  props: {
    title: {},
    modelValue: {},
    options: {}
  },
  emits: ["update:modelValue"],
  setup(n2, { emit: t3 }) {
    const e3 = n2, i3 = computed$2(() => Array.isArray(e3.options) ? Object.fromEntries(e3.options.map((o2) => typeof o2 == "string" ? [o2, o2] : [o2.value, o2.label])) : e3.options), s5 = t3;
    function r2(o2) {
      e3.modelValue.includes(o2) ? s5("update:modelValue", e3.modelValue.filter((l2) => l2 !== o2)) : s5("update:modelValue", [...e3.modelValue, o2]);
    }
    return (o2, l2) => (openBlock$1(), createBlock$1(Vt, {
      role: "group",
      title: o2.title,
      class: normalizeClass$1(["histoire-checkbox-list htw-cursor-text", o2.$attrs.class]),
      style: normalizeStyle$1(o2.$attrs.style)
    }, {
      actions: withCtx$1(() => [
        renderSlot$1(o2.$slots, "actions")
      ]),
      default: withCtx$1(() => [
        createBaseVNode$1("div", Na$1, [
          (openBlock$1(true), createElementBlock$1(Fragment$1, null, renderList$1(i3.value, (h4, a4) => (openBlock$1(), createElementBlock$1("label", {
            key: a4,
            tabindex: "0",
            for: `${a4}-radio`,
            class: "htw-cursor-pointer htw-flex htw-items-center htw-relative htw-py-1 htw-group",
            onKeydown: [
              withKeys$1(withModifiers$1((c3) => r2(a4), ["prevent"]), ["enter"]),
              withKeys$1(withModifiers$1((c3) => r2(a4), ["prevent"]), ["space"])
            ],
            onClick: (c3) => r2(a4)
          }, [
            createVNode$1(tl$1, {
              "model-value": o2.modelValue.includes(a4),
              class: "htw-mr-2"
            }, null, 8, ["model-value"]),
            createTextVNode$1(" " + toDisplayString$2(h4), 1)
          ], 40, Ia$1))), 128))
        ])
      ]),
      _: 3
    }, 8, ["title", "class", "style"]));
  }
}), _a$1 = ["value"], $a = {
  name: "HstText"
}, Fa$1 = /* @__PURE__ */ defineComponent$1({
  ...$a,
  props: {
    title: {},
    modelValue: {}
  },
  emits: {
    "update:modelValue": (n2) => true
  },
  setup(n2, { emit: t3 }) {
    const e3 = t3, i3 = ref$1();
    return (s5, r2) => (openBlock$1(), createBlock$1(Vt, {
      title: s5.title,
      class: normalizeClass$1(["histoire-text htw-cursor-text htw-items-center", s5.$attrs.class]),
      style: normalizeStyle$1(s5.$attrs.style),
      onClick: r2[1] || (r2[1] = (o2) => i3.value.focus())
    }, {
      actions: withCtx$1(() => [
        renderSlot$1(s5.$slots, "actions")
      ]),
      default: withCtx$1(() => [
        createBaseVNode$1("input", mergeProps$1({
          ref_key: "input",
          ref: i3
        }, { ...s5.$attrs, class: null, style: null }, {
          type: "text",
          value: s5.modelValue,
          class: "htw-text-inherit htw-bg-transparent htw-w-full htw-outline-none htw-px-2 htw-py-1 -htw-my-1 htw-border htw-border-solid htw-border-black/25 dark:htw-border-white/25 focus:htw-border-primary-500 dark:focus:htw-border-primary-500 htw-rounded-sm",
          onInput: r2[0] || (r2[0] = (o2) => e3("update:modelValue", o2.target.value))
        }), null, 16, _a$1)
      ]),
      _: 3
    }, 8, ["title", "class", "style"]));
  }
}), za$1 = {
  name: "HstNumber",
  inheritAttrs: false
}, Wa$1 = /* @__PURE__ */ defineComponent$1({
  ...za$1,
  props: {
    title: {},
    modelValue: {}
  },
  emits: {
    "update:modelValue": (n2) => true
  },
  setup(n2, { emit: t3 }) {
    const e3 = n2, i3 = t3, s5 = computed$2({
      get: () => e3.modelValue,
      set: (d4) => {
        i3("update:modelValue", d4);
      }
    }), r2 = ref$1();
    function o2() {
      r2.value.focus(), r2.value.select();
    }
    const l2 = ref$1(false);
    let h4, a4;
    function c3(d4) {
      l2.value = true, h4 = d4.clientX, a4 = s5.value, window.addEventListener("mousemove", f2), window.addEventListener("mouseup", u3);
    }
    function f2(d4) {
      let p2 = parseFloat(r2.value.step);
      isNaN(p2) && (p2 = 1), s5.value = a4 + Math.round((d4.clientX - h4) / 10 / p2) * p2;
    }
    function u3() {
      l2.value = false, window.removeEventListener("mousemove", f2), window.removeEventListener("mouseup", u3);
    }
    return onUnmounted$1(() => {
      u3();
    }), (d4, p2) => (openBlock$1(), createBlock$1(Vt, {
      class: normalizeClass$1(["histoire-number htw-cursor-ew-resize htw-items-center", [
        d4.$attrs.class,
        { "htw-select-none": l2.value }
      ]]),
      title: d4.title,
      style: normalizeStyle$1(d4.$attrs.style),
      onClick: o2,
      onMousedown: c3
    }, {
      actions: withCtx$1(() => [
        renderSlot$1(d4.$slots, "actions")
      ]),
      default: withCtx$1(() => [
        withDirectives$1(createBaseVNode$1("input", mergeProps$1({
          ref_key: "input",
          ref: r2
        }, { ...d4.$attrs, class: null, style: null }, {
          "onUpdate:modelValue": p2[0] || (p2[0] = (m4) => s5.value = m4),
          type: "number",
          class: [{
            "htw-select-none": l2.value
          }, "htw-text-inherit htw-bg-transparent htw-w-full htw-outline-none htw-pl-2 htw-py-1 -htw-my-1 htw-border htw-border-solid htw-border-black/25 dark:htw-border-white/25 focus:htw-border-primary-500 dark:focus:htw-border-primary-500 htw-rounded-sm htw-cursor-ew-resize htw-box-border"]
        }), null, 16), [
          [
            vModelText$1,
            s5.value,
            void 0,
            { number: true }
          ]
        ])
      ]),
      _: 3
    }, 8, ["title", "class", "style"]));
  }
}), ja$1 = { class: "htw-relative htw-w-full htw-flex htw-items-center" }, Ka$1 = /* @__PURE__ */ createBaseVNode$1("div", { class: "htw-absolute htw-inset-0 htw-flex htw-items-center" }, [
  /* @__PURE__ */ createBaseVNode$1("div", { class: "htw-border htw-border-black/25 dark:htw-border-white/25 htw-h-1 htw-w-full htw-rounded-full" })
], -1), qa = {
  name: "HstSlider",
  inheritAttrs: false
}, Ga = /* @__PURE__ */ defineComponent$1({
  ...qa,
  props: {
    title: {},
    modelValue: {},
    min: {},
    max: {}
  },
  emits: {
    "update:modelValue": (n2) => true
  },
  setup(n2, { emit: t3 }) {
    const e3 = n2, i3 = t3, s5 = ref$1(false), r2 = ref$1(null), o2 = computed$2({
      get: () => e3.modelValue,
      set: (a4) => {
        i3("update:modelValue", a4);
      }
    }), l2 = computed$2(() => (e3.modelValue - e3.min) / (e3.max - e3.min)), h4 = computed$2(() => r2.value ? {
      left: 8 + (r2.value.clientWidth - 16) * l2.value + "px"
    } : {});
    return (a4, c3) => (openBlock$1(), createBlock$1(Vt, {
      class: normalizeClass$1(["histoire-slider htw-items-center", a4.$attrs.class]),
      title: a4.title,
      style: normalizeStyle$1(a4.$attrs.style)
    }, {
      default: withCtx$1(() => [
        createBaseVNode$1("div", ja$1, [
          Ka$1,
          withDirectives$1(createBaseVNode$1("input", mergeProps$1({
            ref_key: "input",
            ref: r2,
            "onUpdate:modelValue": c3[0] || (c3[0] = (f2) => o2.value = f2),
            class: "htw-range-input htw-appearance-none htw-border-0 htw-bg-transparent htw-cursor-pointer htw-relative htw-w-full htw-m-0 htw-text-gray-700",
            type: "range"
          }, { ...a4.$attrs, class: null, style: null, min: a4.min, max: a4.max }, {
            onMouseover: c3[1] || (c3[1] = (f2) => s5.value = true),
            onMouseleave: c3[2] || (c3[2] = (f2) => s5.value = false)
          }), null, 16), [
            [
              vModelText$1,
              o2.value,
              void 0,
              { number: true }
            ]
          ]),
          s5.value ? withDirectives$1((openBlock$1(), createElementBlock$1("div", {
            key: 0,
            class: "htw-absolute",
            style: normalizeStyle$1(h4.value)
          }, null, 4)), [
            [unref$1(VTooltip), { content: a4.modelValue.toString(), shown: true, distance: 16, delay: 0 }]
          ]) : createCommentVNode$1("", true)
        ])
      ]),
      _: 1
    }, 8, ["title", "class", "style"]));
  }
});
const Ua$1 = ["value"], Ya$1 = {
  name: "HstTextarea",
  inheritAttrs: false
}, Qa = /* @__PURE__ */ defineComponent$1({
  ...Ya$1,
  props: {
    title: {},
    modelValue: {}
  },
  emits: {
    "update:modelValue": (n2) => true
  },
  setup(n2, { emit: t3 }) {
    const e3 = t3, i3 = ref$1();
    return (s5, r2) => (openBlock$1(), createBlock$1(Vt, {
      title: s5.title,
      class: normalizeClass$1(["histoire-textarea htw-cursor-text", s5.$attrs.class]),
      style: normalizeStyle$1(s5.$attrs.style),
      onClick: r2[1] || (r2[1] = (o2) => i3.value.focus())
    }, {
      actions: withCtx$1(() => [
        renderSlot$1(s5.$slots, "actions")
      ]),
      default: withCtx$1(() => [
        createBaseVNode$1("textarea", mergeProps$1({
          ref_key: "input",
          ref: i3
        }, { ...s5.$attrs, class: null, style: null }, {
          value: s5.modelValue,
          class: "htw-text-inherit htw-bg-transparent htw-w-full htw-outline-none htw-px-2 htw-py-1 -htw-my-1 htw-border htw-border-solid htw-border-black/25 dark:htw-border-white/25 focus:htw-border-primary-500 dark:focus:htw-border-primary-500 htw-rounded-sm htw-box-border htw-resize-y htw-min-h-[26px]",
          onInput: r2[0] || (r2[0] = (o2) => e3("update:modelValue", o2.target.value))
        }), null, 16, Ua$1)
      ]),
      _: 3
    }, 8, ["title", "class", "style"]));
  }
}), Ja = { class: "htw-cursor-pointer htw-w-full htw-outline-none htw-px-2 htw-h-[27px] -htw-my-1 htw-border htw-border-solid htw-border-black/25 dark:htw-border-white/25 hover:htw-border-primary-500 dark:hover:htw-border-primary-500 htw-rounded-sm htw-flex htw-gap-2 htw-items-center htw-leading-normal" }, Xa = { class: "htw-flex-1 htw-truncate" }, Za = { class: "htw-flex htw-flex-col htw-bg-gray-50 dark:htw-bg-gray-700" }, tc = ["onClick"], ec = {
  name: "CustomSelect"
}, ic = /* @__PURE__ */ defineComponent$1({
  ...ec,
  props: {
    modelValue: {},
    options: {}
  },
  emits: ["update:modelValue"],
  setup(n2, { emit: t3 }) {
    const e3 = n2, i3 = t3, s5 = computed$2(() => Array.isArray(e3.options) ? e3.options.map((l2) => typeof l2 == "string" || typeof l2 == "number" ? [l2, String(l2)] : [l2.value, l2.label]) : Object.entries(e3.options)), r2 = computed$2(() => {
      var l2;
      return (l2 = s5.value.find(([h4]) => h4 === e3.modelValue)) == null ? void 0 : l2[1];
    });
    function o2(l2, h4) {
      i3("update:modelValue", l2), h4();
    }
    return (l2, h4) => (openBlock$1(), createBlock$1(unref$1(Dropdown), {
      "auto-size": "",
      "auto-boundary-max-size": ""
    }, {
      popper: withCtx$1(({ hide: a4 }) => [
        createBaseVNode$1("div", Za, [
          (openBlock$1(true), createElementBlock$1(Fragment$1, null, renderList$1(s5.value, ([c3, f2]) => (openBlock$1(), createElementBlock$1("div", mergeProps$1({ ...l2.$attrs, class: null, style: null }, {
            key: f2,
            class: ["htw-px-2 htw-py-1 htw-cursor-pointer hover:htw-bg-primary-100 dark:hover:htw-bg-primary-700", {
              "htw-bg-primary-200 dark:htw-bg-primary-800": e3.modelValue === c3
            }],
            onClick: (u3) => o2(c3, a4)
          }), toDisplayString$2(f2), 17, tc))), 128))
        ])
      ]),
      default: withCtx$1(() => [
        createBaseVNode$1("div", Ja, [
          createBaseVNode$1("div", Xa, [
            renderSlot$1(l2.$slots, "default", { label: r2.value }, () => [
              createTextVNode$1(toDisplayString$2(r2.value), 1)
            ])
          ]),
          createVNode$1(unref$1(Icon), {
            icon: "carbon:chevron-sort",
            class: "htw-w-4 htw-h-4 htw-flex-none htw-ml-auto"
          })
        ])
      ]),
      _: 3
    }));
  }
});
const sc = {
  name: "HstSelect"
}, nc = /* @__PURE__ */ defineComponent$1({
  ...sc,
  props: {
    title: {},
    modelValue: {},
    options: {}
  },
  emits: ["update:modelValue"],
  setup(n2, { emit: t3 }) {
    const e3 = t3;
    return (i3, s5) => (openBlock$1(), createBlock$1(Vt, {
      title: i3.title,
      class: normalizeClass$1(["histoire-select htw-cursor-text htw-items-center", i3.$attrs.class]),
      style: normalizeStyle$1(i3.$attrs.style)
    }, {
      actions: withCtx$1(() => [
        renderSlot$1(i3.$slots, "actions")
      ]),
      default: withCtx$1(() => [
        createVNode$1(ic, {
          options: i3.options,
          "model-value": i3.modelValue,
          "onUpdate:modelValue": s5[0] || (s5[0] = (r2) => e3("update:modelValue", r2))
        }, null, 8, ["options", "model-value"])
      ]),
      _: 3
    }, 8, ["title", "class", "style"]));
  }
}), rc = {
  name: "HstCopyIcon"
}, Le$1 = /* @__PURE__ */ defineComponent$1({
  ...rc,
  props: {
    content: { type: [String, Function] }
  },
  setup(n2) {
    const t3 = n2, { copy: e3, copied: i3 } = useClipboard(), s5 = async () => {
      const r2 = typeof t3.content == "function" ? await t3.content() : t3.content;
      e3(r2);
    };
    return (r2, o2) => withDirectives$1((openBlock$1(), createBlock$1(unref$1(Icon), {
      icon: "carbon:copy-file",
      class: "htw-w-4 htw-h-4 htw-opacity-50 hover:htw-opacity-100 hover:htw-text-primary-500 htw-cursor-pointer",
      onClick: o2[0] || (o2[0] = (l2) => s5())
    }, null, 512)), [
      [unref$1(VTooltip), {
        content: "Copied!",
        triggers: [],
        shown: unref$1(i3),
        distance: 12,
        delay: 0
      }]
    ]);
  }
}), oc = {
  key: 0,
  class: "histoire-color-shades htw-grid htw-gap-4 htw-grid-cols-[repeat(auto-fill,minmax(200px,1fr))] htw-m-4"
}, lc = ["onMouseenter"], hc = { class: "htw-flex htw-gap-1" }, ac = { class: "htw-my-0 htw-truncate htw-shrink" }, cc = { class: "htw-flex htw-gap-1" }, fc = { class: "htw-my-0 htw-opacity-50 htw-truncate htw-shrink" }, uc = {
  name: "HstColorShades"
}, dc = /* @__PURE__ */ defineComponent$1({
  ...uc,
  props: {
    shades: {},
    getName: { type: Function },
    search: {}
  },
  setup(n2) {
    const t3 = n2, e3 = (o2, l2 = "") => Object.entries(o2).reduce((h4, [a4, c3]) => {
      const f2 = l2 ? a4 === "DEFAULT" ? l2 : `${l2}-${a4}` : a4, u3 = typeof c3 == "object" ? e3(c3, f2) : { [f2]: c3 };
      return { ...h4, ...u3 };
    }, {}), i3 = computed$2(() => {
      const o2 = t3.shades, l2 = t3.getName, h4 = e3(o2);
      return Object.entries(h4).map(([a4, c3]) => {
        const f2 = l2 ? l2(a4, c3) : a4;
        return {
          key: a4,
          color: c3,
          name: f2
        };
      });
    }), s5 = computed$2(() => {
      let o2 = i3.value;
      if (t3.search) {
        const l2 = new RegExp(t3.search, "i");
        o2 = o2.filter(({ name: h4 }) => l2.test(h4));
      }
      return o2;
    }), r2 = ref$1(null);
    return (o2, l2) => s5.value.length ? (openBlock$1(), createElementBlock$1("div", oc, [
      (openBlock$1(true), createElementBlock$1(Fragment$1, null, renderList$1(s5.value, (h4) => (openBlock$1(), createElementBlock$1("div", {
        key: h4.key,
        class: "htw-flex htw-flex-col htw-gap-2",
        onMouseenter: (a4) => r2.value = h4.key,
        onMouseleave: l2[0] || (l2[0] = (a4) => r2.value = null)
      }, [
        renderSlot$1(o2.$slots, "default", {
          color: h4.color
        }, () => [
          createBaseVNode$1("div", {
            class: "htw-rounded-full htw-w-16 htw-h-16",
            style: normalizeStyle$1({
              backgroundColor: h4.color
            })
          }, null, 4)
        ]),
        createBaseVNode$1("div", null, [
          createBaseVNode$1("div", hc, [
            withDirectives$1((openBlock$1(), createElementBlock$1("pre", ac, [
              createTextVNode$1(toDisplayString$2(h4.name), 1)
            ])), [
              [unref$1(VTooltip), h4.name.length > 23 ? h4.name : ""]
            ]),
            r2.value === h4.key ? (openBlock$1(), createBlock$1(Le$1, {
              key: 0,
              content: h4.name,
              class: "htw-flex-none"
            }, null, 8, ["content"])) : createCommentVNode$1("", true)
          ]),
          createBaseVNode$1("div", cc, [
            withDirectives$1((openBlock$1(), createElementBlock$1("pre", fc, [
              createTextVNode$1(toDisplayString$2(h4.color), 1)
            ])), [
              [unref$1(VTooltip), h4.color.length > 23 ? h4.color : ""]
            ]),
            r2.value === h4.key ? (openBlock$1(), createBlock$1(Le$1, {
              key: 0,
              content: h4.color,
              class: "htw-flex-none"
            }, null, 8, ["content"])) : createCommentVNode$1("", true)
          ])
        ])
      ], 40, lc))), 128))
    ])) : createCommentVNode$1("", true);
  }
}), pc = ["onMouseenter"], gc = { class: "htw-mx-4" }, mc = { class: "htw-flex htw-gap-1" }, wc = { class: "htw-my-0 htw-truncate htw-shrink" }, yc = { class: "htw-flex htw-gap-1" }, bc = { class: "htw-my-0 htw-opacity-50 htw-truncate htw-shrink" }, kc = {
  name: "HstTokenList"
}, xc = /* @__PURE__ */ defineComponent$1({
  ...kc,
  props: {
    tokens: {},
    getName: { type: Function }
  },
  setup(n2) {
    const t3 = n2, e3 = computed$2(() => {
      const s5 = t3.tokens, r2 = t3.getName;
      return Object.entries(s5).map(([o2, l2]) => {
        const h4 = r2 ? r2(o2, l2) : o2;
        return {
          key: o2,
          name: h4,
          value: typeof l2 == "number" ? l2.toString() : l2
        };
      });
    }), i3 = ref$1(null);
    return (s5, r2) => (openBlock$1(true), createElementBlock$1(Fragment$1, null, renderList$1(e3.value, (o2) => (openBlock$1(), createElementBlock$1("div", {
      key: o2.key,
      class: "histoire-token-list htw-flex htw-flex-col htw-gap-2 htw-my-8",
      onMouseenter: (l2) => i3.value = o2.key,
      onMouseleave: r2[0] || (r2[0] = (l2) => i3.value = null)
    }, [
      renderSlot$1(s5.$slots, "default", { token: o2 }),
      createBaseVNode$1("div", gc, [
        createBaseVNode$1("div", mc, [
          createBaseVNode$1("pre", wc, toDisplayString$2(o2.name), 1),
          i3.value === o2.key ? (openBlock$1(), createBlock$1(Le$1, {
            key: 0,
            content: o2.name,
            class: "htw-flex-none"
          }, null, 8, ["content"])) : createCommentVNode$1("", true)
        ]),
        createBaseVNode$1("div", yc, [
          createBaseVNode$1("pre", bc, toDisplayString$2(o2.value), 1),
          i3.value === o2.key ? (openBlock$1(), createBlock$1(Le$1, {
            key: 0,
            content: typeof o2.value == "string" ? o2.value : JSON.stringify(o2.value),
            class: "htw-flex-none"
          }, null, 8, ["content"])) : createCommentVNode$1("", true)
        ])
      ])
    ], 40, pc))), 128));
  }
}), vc = ["onMouseenter"], Sc = { class: "htw-flex htw-gap-1" }, Cc = { class: "htw-my-0 htw-truncate htw-shrink" }, Ac = { class: "htw-flex htw-gap-1" }, Oc = { class: "htw-my-0 htw-opacity-50 htw-truncate htw-shrink" }, Mc = {
  name: "HstTokenGrid"
}, Tc = /* @__PURE__ */ defineComponent$1({
  ...Mc,
  props: {
    tokens: {},
    colSize: { default: 180 },
    getName: { type: Function, default: null }
  },
  setup(n2) {
    const t3 = n2, e3 = computed$2(() => {
      const r2 = t3.tokens, o2 = t3.getName;
      return Object.entries(r2).map(([l2, h4]) => {
        const a4 = o2 ? o2(l2, h4) : l2;
        return {
          key: l2,
          name: a4,
          value: typeof h4 == "number" ? h4.toString() : h4
        };
      });
    }), i3 = computed$2(() => `${t3.colSize}px`), s5 = ref$1(null);
    return (r2, o2) => (openBlock$1(), createElementBlock$1("div", {
      class: "histoire-token-grid htw-bind-col-size htw-grid htw-gap-4 htw-m-4",
      style: normalizeStyle$1({
        "--histoire-col-size": i3.value
      })
    }, [
      (openBlock$1(true), createElementBlock$1(Fragment$1, null, renderList$1(e3.value, (l2) => (openBlock$1(), createElementBlock$1("div", {
        key: l2.key,
        class: "htw-flex htw-flex-col htw-gap-2",
        onMouseenter: (h4) => s5.value = l2.key,
        onMouseleave: o2[0] || (o2[0] = (h4) => s5.value = null)
      }, [
        renderSlot$1(r2.$slots, "default", { token: l2 }),
        createBaseVNode$1("div", null, [
          createBaseVNode$1("div", Sc, [
            withDirectives$1((openBlock$1(), createElementBlock$1("pre", Cc, [
              createTextVNode$1(toDisplayString$2(l2.name), 1)
            ])), [
              [unref$1(VTooltip), l2.name.length > r2.colSize / 8 ? l2.name : ""]
            ]),
            s5.value === l2.key ? (openBlock$1(), createBlock$1(Le$1, {
              key: 0,
              content: l2.name,
              class: "htw-flex-none"
            }, null, 8, ["content"])) : createCommentVNode$1("", true)
          ]),
          createBaseVNode$1("div", Ac, [
            withDirectives$1((openBlock$1(), createElementBlock$1("pre", Oc, [
              createTextVNode$1(toDisplayString$2(l2.value), 1)
            ])), [
              [unref$1(VTooltip), l2.value.length > r2.colSize / 8 ? l2.value : ""]
            ]),
            s5.value === l2.key ? (openBlock$1(), createBlock$1(Le$1, {
              key: 0,
              content: typeof l2.value == "string" ? l2.value : JSON.stringify(l2.value),
              class: "htw-flex-none"
            }, null, 8, ["content"])) : createCommentVNode$1("", true)
          ])
        ])
      ], 40, vc))), 128))
    ], 4));
  }
});
const Dc = { class: "-htw-my-1" }, Pc = ["id", "name", "value", "checked", "onChange"], Bc = ["for", "onKeydown"], Rc = {
  name: "HstRadio"
}, Lc = /* @__PURE__ */ defineComponent$1({
  ...Rc,
  props: {
    title: {},
    modelValue: {},
    options: {}
  },
  emits: ["update:modelValue"],
  setup(n2, { emit: t3 }) {
    const e3 = n2, i3 = computed$2(() => Array.isArray(e3.options) ? Object.fromEntries(e3.options.map((l2) => typeof l2 == "string" ? [l2, l2] : [l2.value, l2.label])) : e3.options), s5 = t3;
    function r2(l2) {
      s5("update:modelValue", l2), o2.value = true;
    }
    const o2 = ref$1(false);
    return (l2, h4) => (openBlock$1(), createBlock$1(Vt, {
      role: "group",
      title: l2.title,
      class: normalizeClass$1(["histoire-radio htw-cursor-text", l2.$attrs.class]),
      style: normalizeStyle$1(l2.$attrs.style)
    }, {
      actions: withCtx$1(() => [
        renderSlot$1(l2.$slots, "actions")
      ]),
      default: withCtx$1(() => [
        createBaseVNode$1("div", Dc, [
          (openBlock$1(true), createElementBlock$1(Fragment$1, null, renderList$1(i3.value, (a4, c3) => (openBlock$1(), createElementBlock$1(Fragment$1, { key: c3 }, [
            createBaseVNode$1("input", {
              id: `${c3}-radio_${l2.title}`,
              type: "radio",
              name: `${c3}-radio_${l2.title}`,
              value: c3,
              checked: c3 === l2.modelValue,
              class: "!htw-hidden",
              onChange: (f2) => r2(c3)
            }, null, 40, Pc),
            createBaseVNode$1("label", {
              tabindex: "0",
              for: `${c3}-radio_${l2.title}`,
              class: "htw-cursor-pointer htw-flex htw-items-center htw-relative htw-py-1 htw-group",
              onKeydown: [
                withKeys$1(withModifiers$1((f2) => r2(c3), ["prevent"]), ["enter"]),
                withKeys$1(withModifiers$1((f2) => r2(c3), ["prevent"]), ["space"])
              ]
            }, [
              (openBlock$1(), createElementBlock$1("svg", {
                width: "16",
                height: "16",
                viewBox: "-12 -12 24 24",
                class: normalizeClass$1(["htw-relative htw-z-10 htw-border htw-border-solid htw-text-inherit htw-rounded-full htw-box-border htw-inset-0 htw-transition-border htw-duration-150 htw-ease-out htw-mr-2 group-hover:htw-border-primary-500", [
                  l2.modelValue === c3 ? "htw-border-primary-500" : "htw-border-black/25 dark:htw-border-white/25"
                ]])
              }, [
                createBaseVNode$1("circle", {
                  r: "7",
                  class: normalizeClass$1(["htw-will-change-transform", [
                    o2.value ? "htw-transition-all" : "htw-transition-none",
                    {
                      "htw-delay-150": l2.modelValue === c3
                    },
                    l2.modelValue === c3 ? "htw-fill-primary-500" : "htw-fill-transparent htw-scale-0"
                  ]])
                }, null, 2)
              ], 2)),
              createTextVNode$1(" " + toDisplayString$2(a4), 1)
            ], 40, Bc)
          ], 64))), 128))
        ])
      ]),
      _: 3
    }, 8, ["title", "class", "style"]));
  }
});
let V$2 = class V2 {
  /**
  Get the line description around the given position.
  */
  lineAt(t3) {
    if (t3 < 0 || t3 > this.length)
      throw new RangeError(`Invalid position ${t3} in document of length ${this.length}`);
    return this.lineInner(t3, false, 1, 0);
  }
  /**
  Get the description for the given (1-based) line number.
  */
  line(t3) {
    if (t3 < 1 || t3 > this.lines)
      throw new RangeError(`Invalid line number ${t3} in ${this.lines}-line document`);
    return this.lineInner(t3, true, 1, 0);
  }
  /**
  Replace a range of the text with the given content.
  */
  replace(t3, e3, i3) {
    let s5 = [];
    return this.decompose(
      0,
      t3,
      s5,
      2
      /* Open.To */
    ), i3.length && i3.decompose(
      0,
      i3.length,
      s5,
      3
      /* Open.To */
    ), this.decompose(
      e3,
      this.length,
      s5,
      1
      /* Open.From */
    ), qt$1.from(s5, this.length - (e3 - t3) + i3.length);
  }
  /**
  Append another document to this one.
  */
  append(t3) {
    return this.replace(this.length, this.length, t3);
  }
  /**
  Retrieve the text between the given points.
  */
  slice(t3, e3 = this.length) {
    let i3 = [];
    return this.decompose(t3, e3, i3, 0), qt$1.from(i3, e3 - t3);
  }
  /**
  Test whether this text is equal to another instance.
  */
  eq(t3) {
    if (t3 == this)
      return true;
    if (t3.length != this.length || t3.lines != this.lines)
      return false;
    let e3 = this.scanIdentical(t3, 1), i3 = this.length - this.scanIdentical(t3, -1), s5 = new ui(this), r2 = new ui(t3);
    for (let o2 = e3, l2 = e3; ; ) {
      if (s5.next(o2), r2.next(o2), o2 = 0, s5.lineBreak != r2.lineBreak || s5.done != r2.done || s5.value != r2.value)
        return false;
      if (l2 += s5.value.length, s5.done || l2 >= i3)
        return true;
    }
  }
  /**
  Iterate over the text. When `dir` is `-1`, iteration happens
  from end to start. This will return lines and the breaks between
  them as separate strings.
  */
  iter(t3 = 1) {
    return new ui(this, t3);
  }
  /**
  Iterate over a range of the text. When `from` > `to`, the
  iterator will run in reverse.
  */
  iterRange(t3, e3 = this.length) {
    return new el$1(this, t3, e3);
  }
  /**
  Return a cursor that iterates over the given range of lines,
  _without_ returning the line breaks between, and yielding empty
  strings for empty lines.
  
  When `from` and `to` are given, they should be 1-based line numbers.
  */
  iterLines(t3, e3) {
    let i3;
    if (t3 == null)
      i3 = this.iter();
    else {
      e3 == null && (e3 = this.lines + 1);
      let s5 = this.line(t3).from;
      i3 = this.iterRange(s5, Math.max(s5, e3 == this.lines + 1 ? this.length : e3 <= 1 ? 0 : this.line(e3 - 1).to));
    }
    return new il$1(i3);
  }
  /**
  Return the document as a string, using newline characters to
  separate lines.
  */
  toString() {
    return this.sliceString(0);
  }
  /**
  Convert the document to an array of lines (which can be
  deserialized again via [`Text.of`](https://codemirror.net/6/docs/ref/#state.Text^of)).
  */
  toJSON() {
    let t3 = [];
    return this.flatten(t3), t3;
  }
  /**
  @internal
  */
  constructor() {
  }
  /**
  Create a `Text` instance for the given array of lines.
  */
  static of(t3) {
    if (t3.length == 0)
      throw new RangeError("A document must have at least one line");
    return t3.length == 1 && !t3[0] ? V2.empty : t3.length <= 32 ? new J$2(t3) : qt$1.from(J$2.split(t3, []));
  }
};
let J$2 = class J2 extends V$2 {
  constructor(t3, e3 = Ec(t3)) {
    super(), this.text = t3, this.length = e3;
  }
  get lines() {
    return this.text.length;
  }
  get children() {
    return null;
  }
  lineInner(t3, e3, i3, s5) {
    for (let r2 = 0; ; r2++) {
      let o2 = this.text[r2], l2 = s5 + o2.length;
      if ((e3 ? i3 : l2) >= t3)
        return new Nc(s5, l2, i3, o2);
      s5 = l2 + 1, i3++;
    }
  }
  decompose(t3, e3, i3, s5) {
    let r2 = t3 <= 0 && e3 >= this.length ? this : new J2(br$1(this.text, t3, e3), Math.min(e3, this.length) - Math.max(0, t3));
    if (s5 & 1) {
      let o2 = i3.pop(), l2 = Xi(r2.text, o2.text.slice(), 0, r2.length);
      if (l2.length <= 32)
        i3.push(new J2(l2, o2.length + r2.length));
      else {
        let h4 = l2.length >> 1;
        i3.push(new J2(l2.slice(0, h4)), new J2(l2.slice(h4)));
      }
    } else
      i3.push(r2);
  }
  replace(t3, e3, i3) {
    if (!(i3 instanceof J2))
      return super.replace(t3, e3, i3);
    let s5 = Xi(this.text, Xi(i3.text, br$1(this.text, 0, t3)), e3), r2 = this.length + i3.length - (e3 - t3);
    return s5.length <= 32 ? new J2(s5, r2) : qt$1.from(J2.split(s5, []), r2);
  }
  sliceString(t3, e3 = this.length, i3 = `
`) {
    let s5 = "";
    for (let r2 = 0, o2 = 0; r2 <= e3 && o2 < this.text.length; o2++) {
      let l2 = this.text[o2], h4 = r2 + l2.length;
      r2 > t3 && o2 && (s5 += i3), t3 < h4 && e3 > r2 && (s5 += l2.slice(Math.max(0, t3 - r2), e3 - r2)), r2 = h4 + 1;
    }
    return s5;
  }
  flatten(t3) {
    for (let e3 of this.text)
      t3.push(e3);
  }
  scanIdentical() {
    return 0;
  }
  static split(t3, e3) {
    let i3 = [], s5 = -1;
    for (let r2 of t3)
      i3.push(r2), s5 += r2.length + 1, i3.length == 32 && (e3.push(new J2(i3, s5)), i3 = [], s5 = -1);
    return s5 > -1 && e3.push(new J2(i3, s5)), e3;
  }
};
let qt$1 = class qt2 extends V$2 {
  constructor(t3, e3) {
    super(), this.children = t3, this.length = e3, this.lines = 0;
    for (let i3 of t3)
      this.lines += i3.lines;
  }
  lineInner(t3, e3, i3, s5) {
    for (let r2 = 0; ; r2++) {
      let o2 = this.children[r2], l2 = s5 + o2.length, h4 = i3 + o2.lines - 1;
      if ((e3 ? h4 : l2) >= t3)
        return o2.lineInner(t3, e3, i3, s5);
      s5 = l2 + 1, i3 = h4 + 1;
    }
  }
  decompose(t3, e3, i3, s5) {
    for (let r2 = 0, o2 = 0; o2 <= e3 && r2 < this.children.length; r2++) {
      let l2 = this.children[r2], h4 = o2 + l2.length;
      if (t3 <= h4 && e3 >= o2) {
        let a4 = s5 & ((o2 <= t3 ? 1 : 0) | (h4 >= e3 ? 2 : 0));
        o2 >= t3 && h4 <= e3 && !a4 ? i3.push(l2) : l2.decompose(t3 - o2, e3 - o2, i3, a4);
      }
      o2 = h4 + 1;
    }
  }
  replace(t3, e3, i3) {
    if (i3.lines < this.lines)
      for (let s5 = 0, r2 = 0; s5 < this.children.length; s5++) {
        let o2 = this.children[s5], l2 = r2 + o2.length;
        if (t3 >= r2 && e3 <= l2) {
          let h4 = o2.replace(t3 - r2, e3 - r2, i3), a4 = this.lines - o2.lines + h4.lines;
          if (h4.lines < a4 >> 5 - 1 && h4.lines > a4 >> 5 + 1) {
            let c3 = this.children.slice();
            return c3[s5] = h4, new qt2(c3, this.length - (e3 - t3) + i3.length);
          }
          return super.replace(r2, l2, h4);
        }
        r2 = l2 + 1;
      }
    return super.replace(t3, e3, i3);
  }
  sliceString(t3, e3 = this.length, i3 = `
`) {
    let s5 = "";
    for (let r2 = 0, o2 = 0; r2 < this.children.length && o2 <= e3; r2++) {
      let l2 = this.children[r2], h4 = o2 + l2.length;
      o2 > t3 && r2 && (s5 += i3), t3 < h4 && e3 > o2 && (s5 += l2.sliceString(t3 - o2, e3 - o2, i3)), o2 = h4 + 1;
    }
    return s5;
  }
  flatten(t3) {
    for (let e3 of this.children)
      e3.flatten(t3);
  }
  scanIdentical(t3, e3) {
    if (!(t3 instanceof qt2))
      return 0;
    let i3 = 0, [s5, r2, o2, l2] = e3 > 0 ? [0, 0, this.children.length, t3.children.length] : [this.children.length - 1, t3.children.length - 1, -1, -1];
    for (; ; s5 += e3, r2 += e3) {
      if (s5 == o2 || r2 == l2)
        return i3;
      let h4 = this.children[s5], a4 = t3.children[r2];
      if (h4 != a4)
        return i3 + h4.scanIdentical(a4, e3);
      i3 += h4.length + 1;
    }
  }
  static from(t3, e3 = t3.reduce((i3, s5) => i3 + s5.length + 1, -1)) {
    let i3 = 0;
    for (let d4 of t3)
      i3 += d4.lines;
    if (i3 < 32) {
      let d4 = [];
      for (let p2 of t3)
        p2.flatten(d4);
      return new J$2(d4, e3);
    }
    let s5 = Math.max(
      32,
      i3 >> 5
      /* Tree.BranchShift */
    ), r2 = s5 << 1, o2 = s5 >> 1, l2 = [], h4 = 0, a4 = -1, c3 = [];
    function f2(d4) {
      let p2;
      if (d4.lines > r2 && d4 instanceof qt2)
        for (let m4 of d4.children)
          f2(m4);
      else
        d4.lines > o2 && (h4 > o2 || !h4) ? (u3(), l2.push(d4)) : d4 instanceof J$2 && h4 && (p2 = c3[c3.length - 1]) instanceof J$2 && d4.lines + p2.lines <= 32 ? (h4 += d4.lines, a4 += d4.length + 1, c3[c3.length - 1] = new J$2(p2.text.concat(d4.text), p2.length + 1 + d4.length)) : (h4 + d4.lines > s5 && u3(), h4 += d4.lines, a4 += d4.length + 1, c3.push(d4));
    }
    function u3() {
      h4 != 0 && (l2.push(c3.length == 1 ? c3[0] : qt2.from(c3, a4)), a4 = -1, h4 = c3.length = 0);
    }
    for (let d4 of t3)
      f2(d4);
    return u3(), l2.length == 1 ? l2[0] : new qt2(l2, e3);
  }
};
V$2.empty = /* @__PURE__ */ new J$2([""], 0);
function Ec(n2) {
  let t3 = -1;
  for (let e3 of n2)
    t3 += e3.length + 1;
  return t3;
}
function Xi(n2, t3, e3 = 0, i3 = 1e9) {
  for (let s5 = 0, r2 = 0, o2 = true; r2 < n2.length && s5 <= i3; r2++) {
    let l2 = n2[r2], h4 = s5 + l2.length;
    h4 >= e3 && (h4 > i3 && (l2 = l2.slice(0, i3 - s5)), s5 < e3 && (l2 = l2.slice(e3 - s5)), o2 ? (t3[t3.length - 1] += l2, o2 = false) : t3.push(l2)), s5 = h4 + 1;
  }
  return t3;
}
function br$1(n2, t3, e3) {
  return Xi(n2, [""], t3, e3);
}
class ui {
  constructor(t3, e3 = 1) {
    this.dir = e3, this.done = false, this.lineBreak = false, this.value = "", this.nodes = [t3], this.offsets = [e3 > 0 ? 1 : (t3 instanceof J$2 ? t3.text.length : t3.children.length) << 1];
  }
  nextInner(t3, e3) {
    for (this.done = this.lineBreak = false; ; ) {
      let i3 = this.nodes.length - 1, s5 = this.nodes[i3], r2 = this.offsets[i3], o2 = r2 >> 1, l2 = s5 instanceof J$2 ? s5.text.length : s5.children.length;
      if (o2 == (e3 > 0 ? l2 : 0)) {
        if (i3 == 0)
          return this.done = true, this.value = "", this;
        e3 > 0 && this.offsets[i3 - 1]++, this.nodes.pop(), this.offsets.pop();
      } else if ((r2 & 1) == (e3 > 0 ? 0 : 1)) {
        if (this.offsets[i3] += e3, t3 == 0)
          return this.lineBreak = true, this.value = `
`, this;
        t3--;
      } else if (s5 instanceof J$2) {
        let h4 = s5.text[o2 + (e3 < 0 ? -1 : 0)];
        if (this.offsets[i3] += e3, h4.length > Math.max(0, t3))
          return this.value = t3 == 0 ? h4 : e3 > 0 ? h4.slice(t3) : h4.slice(0, h4.length - t3), this;
        t3 -= h4.length;
      } else {
        let h4 = s5.children[o2 + (e3 < 0 ? -1 : 0)];
        t3 > h4.length ? (t3 -= h4.length, this.offsets[i3] += e3) : (e3 < 0 && this.offsets[i3]--, this.nodes.push(h4), this.offsets.push(e3 > 0 ? 1 : (h4 instanceof J$2 ? h4.text.length : h4.children.length) << 1));
      }
    }
  }
  next(t3 = 0) {
    return t3 < 0 && (this.nextInner(-t3, -this.dir), t3 = this.value.length), this.nextInner(t3, this.dir);
  }
}
let el$1 = class el2 {
  constructor(t3, e3, i3) {
    this.value = "", this.done = false, this.cursor = new ui(t3, e3 > i3 ? -1 : 1), this.pos = e3 > i3 ? t3.length : 0, this.from = Math.min(e3, i3), this.to = Math.max(e3, i3);
  }
  nextInner(t3, e3) {
    if (e3 < 0 ? this.pos <= this.from : this.pos >= this.to)
      return this.value = "", this.done = true, this;
    t3 += Math.max(0, e3 < 0 ? this.pos - this.to : this.from - this.pos);
    let i3 = e3 < 0 ? this.pos - this.from : this.to - this.pos;
    t3 > i3 && (t3 = i3), i3 -= t3;
    let { value: s5 } = this.cursor.next(t3);
    return this.pos += (s5.length + t3) * e3, this.value = s5.length <= i3 ? s5 : e3 < 0 ? s5.slice(s5.length - i3) : s5.slice(0, i3), this.done = !this.value, this;
  }
  next(t3 = 0) {
    return t3 < 0 ? t3 = Math.max(t3, this.from - this.pos) : t3 > 0 && (t3 = Math.min(t3, this.to - this.pos)), this.nextInner(t3, this.cursor.dir);
  }
  get lineBreak() {
    return this.cursor.lineBreak && this.value != "";
  }
};
let il$1 = class il2 {
  constructor(t3) {
    this.inner = t3, this.afterBreak = true, this.value = "", this.done = false;
  }
  next(t3 = 0) {
    let { done: e3, lineBreak: i3, value: s5 } = this.inner.next(t3);
    return e3 ? (this.done = true, this.value = "") : i3 ? this.afterBreak ? this.value = "" : (this.afterBreak = true, this.next()) : (this.value = s5, this.afterBreak = false), this;
  }
  get lineBreak() {
    return false;
  }
};
typeof Symbol < "u" && (V$2.prototype[Symbol.iterator] = function() {
  return this.iter();
}, ui.prototype[Symbol.iterator] = el$1.prototype[Symbol.iterator] = il$1.prototype[Symbol.iterator] = function() {
  return this;
});
class Nc {
  /**
  @internal
  */
  constructor(t3, e3, i3, s5) {
    this.from = t3, this.to = e3, this.number = i3, this.text = s5;
  }
  /**
  The length of the line (not including any line break after it).
  */
  get length() {
    return this.to - this.from;
  }
}
let We$2 = /* @__PURE__ */ "lc,34,7n,7,7b,19,,,,2,,2,,,20,b,1c,l,g,,2t,7,2,6,2,2,,4,z,,u,r,2j,b,1m,9,9,,o,4,,9,,3,,5,17,3,3b,f,,w,1j,,,,4,8,4,,3,7,a,2,t,,1m,,,,2,4,8,,9,,a,2,q,,2,2,1l,,4,2,4,2,2,3,3,,u,2,3,,b,2,1l,,4,5,,2,4,,k,2,m,6,,,1m,,,2,,4,8,,7,3,a,2,u,,1n,,,,c,,9,,14,,3,,1l,3,5,3,,4,7,2,b,2,t,,1m,,2,,2,,3,,5,2,7,2,b,2,s,2,1l,2,,,2,4,8,,9,,a,2,t,,20,,4,,2,3,,,8,,29,,2,7,c,8,2q,,2,9,b,6,22,2,r,,,,,,1j,e,,5,,2,5,b,,10,9,,2u,4,,6,,2,2,2,p,2,4,3,g,4,d,,2,2,6,,f,,jj,3,qa,3,t,3,t,2,u,2,1s,2,,7,8,,2,b,9,,19,3,3b,2,y,,3a,3,4,2,9,,6,3,63,2,2,,1m,,,7,,,,,2,8,6,a,2,,1c,h,1r,4,1c,7,,,5,,14,9,c,2,w,4,2,2,,3,1k,,,2,3,,,3,1m,8,2,2,48,3,,d,,7,4,,6,,3,2,5i,1m,,5,ek,,5f,x,2da,3,3x,,2o,w,fe,6,2x,2,n9w,4,,a,w,2,28,2,7k,,3,,4,,p,2,5,,47,2,q,i,d,,12,8,p,b,1a,3,1c,,2,4,2,2,13,,1v,6,2,2,2,2,c,,8,,1b,,1f,,,3,2,2,5,2,,,16,2,8,,6m,,2,,4,,fn4,,kh,g,g,g,a6,2,gt,,6a,,45,5,1ae,3,,2,5,4,14,3,4,,4l,2,fx,4,ar,2,49,b,4w,,1i,f,1k,3,1d,4,2,2,1x,3,10,5,,8,1q,,c,2,1g,9,a,4,2,,2n,3,2,,,2,6,,4g,,3,8,l,2,1l,2,,,,,m,,e,7,3,5,5f,8,2,3,,,n,,29,,2,6,,,2,,,2,,2,6j,,2,4,6,2,,2,r,2,2d,8,2,,,2,2y,,,,2,6,,,2t,3,2,4,,5,77,9,,2,6t,,a,2,,,4,,40,4,2,2,4,,w,a,14,6,2,4,8,,9,6,2,3,1a,d,,2,ba,7,,6,,,2a,m,2,7,,2,,2,3e,6,3,,,2,,7,,,20,2,3,,,,9n,2,f0b,5,1n,7,t4,,1r,4,29,,f5k,2,43q,,,3,4,5,8,8,2,7,u,4,44,3,1iz,1j,4,1e,8,,e,,m,5,,f,11s,7,,h,2,7,,2,,5,79,7,c5,4,15s,7,31,7,240,5,gx7k,2o,3k,6o".split(",").map((n2) => n2 ? parseInt(n2, 36) : 1);
for (let n2 = 1; n2 < We$2.length; n2++)
  We$2[n2] += We$2[n2 - 1];
function Ic(n2) {
  for (let t3 = 1; t3 < We$2.length; t3 += 2)
    if (We$2[t3] > n2)
      return We$2[t3 - 1] <= n2;
  return false;
}
function kr$1(n2) {
  return n2 >= 127462 && n2 <= 127487;
}
const xr$1 = 8205;
function wt$2(n2, t3, e3 = true, i3 = true) {
  return (e3 ? sl$1 : Vc)(n2, t3, i3);
}
function sl$1(n2, t3, e3) {
  if (t3 == n2.length)
    return t3;
  t3 && nl$1(n2.charCodeAt(t3)) && rl$1(n2.charCodeAt(t3 - 1)) && t3--;
  let i3 = di(n2, t3);
  for (t3 += nn$1(i3); t3 < n2.length; ) {
    let s5 = di(n2, t3);
    if (i3 == xr$1 || s5 == xr$1 || e3 && Ic(s5))
      t3 += nn$1(s5), i3 = s5;
    else if (kr$1(s5)) {
      let r2 = 0, o2 = t3 - 2;
      for (; o2 >= 0 && kr$1(di(n2, o2)); )
        r2++, o2 -= 2;
      if (r2 % 2 == 0)
        break;
      t3 += 2;
    } else
      break;
  }
  return t3;
}
function Vc(n2, t3, e3) {
  for (; t3 > 0; ) {
    let i3 = sl$1(n2, t3 - 2, e3);
    if (i3 < t3)
      return i3;
    t3--;
  }
  return 0;
}
function nl$1(n2) {
  return n2 >= 56320 && n2 < 57344;
}
function rl$1(n2) {
  return n2 >= 55296 && n2 < 56320;
}
function di(n2, t3) {
  let e3 = n2.charCodeAt(t3);
  if (!rl$1(e3) || t3 + 1 == n2.length)
    return e3;
  let i3 = n2.charCodeAt(t3 + 1);
  return nl$1(i3) ? (e3 - 55296 << 10) + (i3 - 56320) + 65536 : e3;
}
function nn$1(n2) {
  return n2 < 65536 ? 1 : 2;
}
const rn$1 = /\r\n?|\n/;
var mt$1 = /* @__PURE__ */ function(n2) {
  return n2[n2.Simple = 0] = "Simple", n2[n2.TrackDel = 1] = "TrackDel", n2[n2.TrackBefore = 2] = "TrackBefore", n2[n2.TrackAfter = 3] = "TrackAfter", n2;
}(mt$1 || (mt$1 = {}));
let ee$1 = class ee2 {
  // Sections are encoded as pairs of integers. The first is the
  // length in the current document, and the second is -1 for
  // unaffected sections, and the length of the replacement content
  // otherwise. So an insertion would be (0, n>0), a deletion (n>0,
  // 0), and a replacement two positive numbers.
  /**
  @internal
  */
  constructor(t3) {
    this.sections = t3;
  }
  /**
  The length of the document before the change.
  */
  get length() {
    let t3 = 0;
    for (let e3 = 0; e3 < this.sections.length; e3 += 2)
      t3 += this.sections[e3];
    return t3;
  }
  /**
  The length of the document after the change.
  */
  get newLength() {
    let t3 = 0;
    for (let e3 = 0; e3 < this.sections.length; e3 += 2) {
      let i3 = this.sections[e3 + 1];
      t3 += i3 < 0 ? this.sections[e3] : i3;
    }
    return t3;
  }
  /**
  False when there are actual changes in this set.
  */
  get empty() {
    return this.sections.length == 0 || this.sections.length == 2 && this.sections[1] < 0;
  }
  /**
  Iterate over the unchanged parts left by these changes. `posA`
  provides the position of the range in the old document, `posB`
  the new position in the changed document.
  */
  iterGaps(t3) {
    for (let e3 = 0, i3 = 0, s5 = 0; e3 < this.sections.length; ) {
      let r2 = this.sections[e3++], o2 = this.sections[e3++];
      o2 < 0 ? (t3(i3, s5, r2), s5 += r2) : s5 += o2, i3 += r2;
    }
  }
  /**
  Iterate over the ranges changed by these changes. (See
  [`ChangeSet.iterChanges`](https://codemirror.net/6/docs/ref/#state.ChangeSet.iterChanges) for a
  variant that also provides you with the inserted text.)
  `fromA`/`toA` provides the extent of the change in the starting
  document, `fromB`/`toB` the extent of the replacement in the
  changed document.
  
  When `individual` is true, adjacent changes (which are kept
  separate for [position mapping](https://codemirror.net/6/docs/ref/#state.ChangeDesc.mapPos)) are
  reported separately.
  */
  iterChangedRanges(t3, e3 = false) {
    on$1(this, t3, e3);
  }
  /**
  Get a description of the inverted form of these changes.
  */
  get invertedDesc() {
    let t3 = [];
    for (let e3 = 0; e3 < this.sections.length; ) {
      let i3 = this.sections[e3++], s5 = this.sections[e3++];
      s5 < 0 ? t3.push(i3, s5) : t3.push(s5, i3);
    }
    return new ee2(t3);
  }
  /**
  Compute the combined effect of applying another set of changes
  after this one. The length of the document after this set should
  match the length before `other`.
  */
  composeDesc(t3) {
    return this.empty ? t3 : t3.empty ? this : ol$1(this, t3);
  }
  /**
  Map this description, which should start with the same document
  as `other`, over another set of changes, so that it can be
  applied after it. When `before` is true, map as if the changes
  in `other` happened before the ones in `this`.
  */
  mapDesc(t3, e3 = false) {
    return t3.empty ? this : ln$1(this, t3, e3);
  }
  mapPos(t3, e3 = -1, i3 = mt$1.Simple) {
    let s5 = 0, r2 = 0;
    for (let o2 = 0; o2 < this.sections.length; ) {
      let l2 = this.sections[o2++], h4 = this.sections[o2++], a4 = s5 + l2;
      if (h4 < 0) {
        if (a4 > t3)
          return r2 + (t3 - s5);
        r2 += l2;
      } else {
        if (i3 != mt$1.Simple && a4 >= t3 && (i3 == mt$1.TrackDel && s5 < t3 && a4 > t3 || i3 == mt$1.TrackBefore && s5 < t3 || i3 == mt$1.TrackAfter && a4 > t3))
          return null;
        if (a4 > t3 || a4 == t3 && e3 < 0 && !l2)
          return t3 == s5 || e3 < 0 ? r2 : r2 + h4;
        r2 += h4;
      }
      s5 = a4;
    }
    if (t3 > s5)
      throw new RangeError(`Position ${t3} is out of range for changeset of length ${s5}`);
    return r2;
  }
  /**
  Check whether these changes touch a given range. When one of the
  changes entirely covers the range, the string `"cover"` is
  returned.
  */
  touchesRange(t3, e3 = t3) {
    for (let i3 = 0, s5 = 0; i3 < this.sections.length && s5 <= e3; ) {
      let r2 = this.sections[i3++], o2 = this.sections[i3++], l2 = s5 + r2;
      if (o2 >= 0 && s5 <= e3 && l2 >= t3)
        return s5 < t3 && l2 > e3 ? "cover" : true;
      s5 = l2;
    }
    return false;
  }
  /**
  @internal
  */
  toString() {
    let t3 = "";
    for (let e3 = 0; e3 < this.sections.length; ) {
      let i3 = this.sections[e3++], s5 = this.sections[e3++];
      t3 += (t3 ? " " : "") + i3 + (s5 >= 0 ? ":" + s5 : "");
    }
    return t3;
  }
  /**
  Serialize this change desc to a JSON-representable value.
  */
  toJSON() {
    return this.sections;
  }
  /**
  Create a change desc from its JSON representation (as produced
  by [`toJSON`](https://codemirror.net/6/docs/ref/#state.ChangeDesc.toJSON).
  */
  static fromJSON(t3) {
    if (!Array.isArray(t3) || t3.length % 2 || t3.some((e3) => typeof e3 != "number"))
      throw new RangeError("Invalid JSON representation of ChangeDesc");
    return new ee2(t3);
  }
  /**
  @internal
  */
  static create(t3) {
    return new ee2(t3);
  }
};
let it$1 = class it2 extends ee$1 {
  constructor(t3, e3) {
    super(t3), this.inserted = e3;
  }
  /**
  Apply the changes to a document, returning the modified
  document.
  */
  apply(t3) {
    if (this.length != t3.length)
      throw new RangeError("Applying change set to a document with the wrong length");
    return on$1(this, (e3, i3, s5, r2, o2) => t3 = t3.replace(s5, s5 + (i3 - e3), o2), false), t3;
  }
  mapDesc(t3, e3 = false) {
    return ln$1(this, t3, e3, true);
  }
  /**
  Given the document as it existed _before_ the changes, return a
  change set that represents the inverse of this set, which could
  be used to go from the document created by the changes back to
  the document as it existed before the changes.
  */
  invert(t3) {
    let e3 = this.sections.slice(), i3 = [];
    for (let s5 = 0, r2 = 0; s5 < e3.length; s5 += 2) {
      let o2 = e3[s5], l2 = e3[s5 + 1];
      if (l2 >= 0) {
        e3[s5] = l2, e3[s5 + 1] = o2;
        let h4 = s5 >> 1;
        for (; i3.length < h4; )
          i3.push(V$2.empty);
        i3.push(o2 ? t3.slice(r2, r2 + o2) : V$2.empty);
      }
      r2 += o2;
    }
    return new it2(e3, i3);
  }
  /**
  Combine two subsequent change sets into a single set. `other`
  must start in the document produced by `this`. If `this` goes
  `docA` → `docB` and `other` represents `docB` → `docC`, the
  returned value will represent the change `docA` → `docC`.
  */
  compose(t3) {
    return this.empty ? t3 : t3.empty ? this : ol$1(this, t3, true);
  }
  /**
  Given another change set starting in the same document, maps this
  change set over the other, producing a new change set that can be
  applied to the document produced by applying `other`. When
  `before` is `true`, order changes as if `this` comes before
  `other`, otherwise (the default) treat `other` as coming first.
  
  Given two changes `A` and `B`, `A.compose(B.map(A))` and
  `B.compose(A.map(B, true))` will produce the same document. This
  provides a basic form of [operational
  transformation](https://en.wikipedia.org/wiki/Operational_transformation),
  and can be used for collaborative editing.
  */
  map(t3, e3 = false) {
    return t3.empty ? this : ln$1(this, t3, e3, true);
  }
  /**
  Iterate over the changed ranges in the document, calling `f` for
  each, with the range in the original document (`fromA`-`toA`)
  and the range that replaces it in the new document
  (`fromB`-`toB`).
  
  When `individual` is true, adjacent changes are reported
  separately.
  */
  iterChanges(t3, e3 = false) {
    on$1(this, t3, e3);
  }
  /**
  Get a [change description](https://codemirror.net/6/docs/ref/#state.ChangeDesc) for this change
  set.
  */
  get desc() {
    return ee$1.create(this.sections);
  }
  /**
  @internal
  */
  filter(t3) {
    let e3 = [], i3 = [], s5 = [], r2 = new mi(this);
    t:
      for (let o2 = 0, l2 = 0; ; ) {
        let h4 = o2 == t3.length ? 1e9 : t3[o2++];
        for (; l2 < h4 || l2 == h4 && r2.len == 0; ) {
          if (r2.done)
            break t;
          let c3 = Math.min(r2.len, h4 - l2);
          at$2(s5, c3, -1);
          let f2 = r2.ins == -1 ? -1 : r2.off == 0 ? r2.ins : 0;
          at$2(e3, c3, f2), f2 > 0 && ce$2(i3, e3, r2.text), r2.forward(c3), l2 += c3;
        }
        let a4 = t3[o2++];
        for (; l2 < a4; ) {
          if (r2.done)
            break t;
          let c3 = Math.min(r2.len, a4 - l2);
          at$2(e3, c3, -1), at$2(s5, c3, r2.ins == -1 ? -1 : r2.off == 0 ? r2.ins : 0), r2.forward(c3), l2 += c3;
        }
      }
    return {
      changes: new it2(e3, i3),
      filtered: ee$1.create(s5)
    };
  }
  /**
  Serialize this change set to a JSON-representable value.
  */
  toJSON() {
    let t3 = [];
    for (let e3 = 0; e3 < this.sections.length; e3 += 2) {
      let i3 = this.sections[e3], s5 = this.sections[e3 + 1];
      s5 < 0 ? t3.push(i3) : s5 == 0 ? t3.push([i3]) : t3.push([i3].concat(this.inserted[e3 >> 1].toJSON()));
    }
    return t3;
  }
  /**
  Create a change set for the given changes, for a document of the
  given length, using `lineSep` as line separator.
  */
  static of(t3, e3, i3) {
    let s5 = [], r2 = [], o2 = 0, l2 = null;
    function h4(c3 = false) {
      if (!c3 && !s5.length)
        return;
      o2 < e3 && at$2(s5, e3 - o2, -1);
      let f2 = new it2(s5, r2);
      l2 = l2 ? l2.compose(f2.map(l2)) : f2, s5 = [], r2 = [], o2 = 0;
    }
    function a4(c3) {
      if (Array.isArray(c3))
        for (let f2 of c3)
          a4(f2);
      else if (c3 instanceof it2) {
        if (c3.length != e3)
          throw new RangeError(`Mismatched change set length (got ${c3.length}, expected ${e3})`);
        h4(), l2 = l2 ? l2.compose(c3.map(l2)) : c3;
      } else {
        let { from: f2, to: u3 = f2, insert: d4 } = c3;
        if (f2 > u3 || f2 < 0 || u3 > e3)
          throw new RangeError(`Invalid change range ${f2} to ${u3} (in doc of length ${e3})`);
        let p2 = d4 ? typeof d4 == "string" ? V$2.of(d4.split(i3 || rn$1)) : d4 : V$2.empty, m4 = p2.length;
        if (f2 == u3 && m4 == 0)
          return;
        f2 < o2 && h4(), f2 > o2 && at$2(s5, f2 - o2, -1), at$2(s5, u3 - f2, m4), ce$2(r2, s5, p2), o2 = u3;
      }
    }
    return a4(t3), h4(!l2), l2;
  }
  /**
  Create an empty changeset of the given length.
  */
  static empty(t3) {
    return new it2(t3 ? [t3, -1] : [], []);
  }
  /**
  Create a changeset from its JSON representation (as produced by
  [`toJSON`](https://codemirror.net/6/docs/ref/#state.ChangeSet.toJSON).
  */
  static fromJSON(t3) {
    if (!Array.isArray(t3))
      throw new RangeError("Invalid JSON representation of ChangeSet");
    let e3 = [], i3 = [];
    for (let s5 = 0; s5 < t3.length; s5++) {
      let r2 = t3[s5];
      if (typeof r2 == "number")
        e3.push(r2, -1);
      else {
        if (!Array.isArray(r2) || typeof r2[0] != "number" || r2.some((o2, l2) => l2 && typeof o2 != "string"))
          throw new RangeError("Invalid JSON representation of ChangeSet");
        if (r2.length == 1)
          e3.push(r2[0], 0);
        else {
          for (; i3.length < s5; )
            i3.push(V$2.empty);
          i3[s5] = V$2.of(r2.slice(1)), e3.push(r2[0], i3[s5].length);
        }
      }
    }
    return new it2(e3, i3);
  }
  /**
  @internal
  */
  static createSet(t3, e3) {
    return new it2(t3, e3);
  }
};
function at$2(n2, t3, e3, i3 = false) {
  if (t3 == 0 && e3 <= 0)
    return;
  let s5 = n2.length - 2;
  s5 >= 0 && e3 <= 0 && e3 == n2[s5 + 1] ? n2[s5] += t3 : t3 == 0 && n2[s5] == 0 ? n2[s5 + 1] += e3 : i3 ? (n2[s5] += t3, n2[s5 + 1] += e3) : n2.push(t3, e3);
}
function ce$2(n2, t3, e3) {
  if (e3.length == 0)
    return;
  let i3 = t3.length - 2 >> 1;
  if (i3 < n2.length)
    n2[n2.length - 1] = n2[n2.length - 1].append(e3);
  else {
    for (; n2.length < i3; )
      n2.push(V$2.empty);
    n2.push(e3);
  }
}
function on$1(n2, t3, e3) {
  let i3 = n2.inserted;
  for (let s5 = 0, r2 = 0, o2 = 0; o2 < n2.sections.length; ) {
    let l2 = n2.sections[o2++], h4 = n2.sections[o2++];
    if (h4 < 0)
      s5 += l2, r2 += l2;
    else {
      let a4 = s5, c3 = r2, f2 = V$2.empty;
      for (; a4 += l2, c3 += h4, h4 && i3 && (f2 = f2.append(i3[o2 - 2 >> 1])), !(e3 || o2 == n2.sections.length || n2.sections[o2 + 1] < 0); )
        l2 = n2.sections[o2++], h4 = n2.sections[o2++];
      t3(s5, a4, r2, c3, f2), s5 = a4, r2 = c3;
    }
  }
}
function ln$1(n2, t3, e3, i3 = false) {
  let s5 = [], r2 = i3 ? [] : null, o2 = new mi(n2), l2 = new mi(t3);
  for (let h4 = -1; ; )
    if (o2.ins == -1 && l2.ins == -1) {
      let a4 = Math.min(o2.len, l2.len);
      at$2(s5, a4, -1), o2.forward(a4), l2.forward(a4);
    } else if (l2.ins >= 0 && (o2.ins < 0 || h4 == o2.i || o2.off == 0 && (l2.len < o2.len || l2.len == o2.len && !e3))) {
      let a4 = l2.len;
      for (at$2(s5, l2.ins, -1); a4; ) {
        let c3 = Math.min(o2.len, a4);
        o2.ins >= 0 && h4 < o2.i && o2.len <= c3 && (at$2(s5, 0, o2.ins), r2 && ce$2(r2, s5, o2.text), h4 = o2.i), o2.forward(c3), a4 -= c3;
      }
      l2.next();
    } else if (o2.ins >= 0) {
      let a4 = 0, c3 = o2.len;
      for (; c3; )
        if (l2.ins == -1) {
          let f2 = Math.min(c3, l2.len);
          a4 += f2, c3 -= f2, l2.forward(f2);
        } else if (l2.ins == 0 && l2.len < c3)
          c3 -= l2.len, l2.next();
        else
          break;
      at$2(s5, a4, h4 < o2.i ? o2.ins : 0), r2 && h4 < o2.i && ce$2(r2, s5, o2.text), h4 = o2.i, o2.forward(o2.len - c3);
    } else {
      if (o2.done && l2.done)
        return r2 ? it$1.createSet(s5, r2) : ee$1.create(s5);
      throw new Error("Mismatched change set lengths");
    }
}
function ol$1(n2, t3, e3 = false) {
  let i3 = [], s5 = e3 ? [] : null, r2 = new mi(n2), o2 = new mi(t3);
  for (let l2 = false; ; ) {
    if (r2.done && o2.done)
      return s5 ? it$1.createSet(i3, s5) : ee$1.create(i3);
    if (r2.ins == 0)
      at$2(i3, r2.len, 0, l2), r2.next();
    else if (o2.len == 0 && !o2.done)
      at$2(i3, 0, o2.ins, l2), s5 && ce$2(s5, i3, o2.text), o2.next();
    else {
      if (r2.done || o2.done)
        throw new Error("Mismatched change set lengths");
      {
        let h4 = Math.min(r2.len2, o2.len), a4 = i3.length;
        if (r2.ins == -1) {
          let c3 = o2.ins == -1 ? -1 : o2.off ? 0 : o2.ins;
          at$2(i3, h4, c3, l2), s5 && c3 && ce$2(s5, i3, o2.text);
        } else
          o2.ins == -1 ? (at$2(i3, r2.off ? 0 : r2.len, h4, l2), s5 && ce$2(s5, i3, r2.textBit(h4))) : (at$2(i3, r2.off ? 0 : r2.len, o2.off ? 0 : o2.ins, l2), s5 && !o2.off && ce$2(s5, i3, o2.text));
        l2 = (r2.ins > h4 || o2.ins >= 0 && o2.len > h4) && (l2 || i3.length > a4), r2.forward2(h4), o2.forward(h4);
      }
    }
  }
}
class mi {
  constructor(t3) {
    this.set = t3, this.i = 0, this.next();
  }
  next() {
    let { sections: t3 } = this.set;
    this.i < t3.length ? (this.len = t3[this.i++], this.ins = t3[this.i++]) : (this.len = 0, this.ins = -2), this.off = 0;
  }
  get done() {
    return this.ins == -2;
  }
  get len2() {
    return this.ins < 0 ? this.len : this.ins;
  }
  get text() {
    let { inserted: t3 } = this.set, e3 = this.i - 2 >> 1;
    return e3 >= t3.length ? V$2.empty : t3[e3];
  }
  textBit(t3) {
    let { inserted: e3 } = this.set, i3 = this.i - 2 >> 1;
    return i3 >= e3.length && !t3 ? V$2.empty : e3[i3].slice(this.off, t3 == null ? void 0 : this.off + t3);
  }
  forward(t3) {
    t3 == this.len ? this.next() : (this.len -= t3, this.off += t3);
  }
  forward2(t3) {
    this.ins == -1 ? this.forward(t3) : t3 == this.ins ? this.next() : (this.ins -= t3, this.off += t3);
  }
}
let Be$1 = class Be2 {
  constructor(t3, e3, i3) {
    this.from = t3, this.to = e3, this.flags = i3;
  }
  /**
  The anchor of the range—the side that doesn't move when you
  extend it.
  */
  get anchor() {
    return this.flags & 32 ? this.to : this.from;
  }
  /**
  The head of the range, which is moved when the range is
  [extended](https://codemirror.net/6/docs/ref/#state.SelectionRange.extend).
  */
  get head() {
    return this.flags & 32 ? this.from : this.to;
  }
  /**
  True when `anchor` and `head` are at the same position.
  */
  get empty() {
    return this.from == this.to;
  }
  /**
  If this is a cursor that is explicitly associated with the
  character on one of its sides, this returns the side. -1 means
  the character before its position, 1 the character after, and 0
  means no association.
  */
  get assoc() {
    return this.flags & 8 ? -1 : this.flags & 16 ? 1 : 0;
  }
  /**
  The bidirectional text level associated with this cursor, if
  any.
  */
  get bidiLevel() {
    let t3 = this.flags & 7;
    return t3 == 7 ? null : t3;
  }
  /**
  The goal column (stored vertical offset) associated with a
  cursor. This is used to preserve the vertical position when
  [moving](https://codemirror.net/6/docs/ref/#view.EditorView.moveVertically) across
  lines of different length.
  */
  get goalColumn() {
    let t3 = this.flags >> 6;
    return t3 == 16777215 ? void 0 : t3;
  }
  /**
  Map this range through a change, producing a valid range in the
  updated document.
  */
  map(t3, e3 = -1) {
    let i3, s5;
    return this.empty ? i3 = s5 = t3.mapPos(this.from, e3) : (i3 = t3.mapPos(this.from, 1), s5 = t3.mapPos(this.to, -1)), i3 == this.from && s5 == this.to ? this : new Be2(i3, s5, this.flags);
  }
  /**
  Extend this range to cover at least `from` to `to`.
  */
  extend(t3, e3 = t3) {
    if (t3 <= this.anchor && e3 >= this.anchor)
      return b$1.range(t3, e3);
    let i3 = Math.abs(t3 - this.anchor) > Math.abs(e3 - this.anchor) ? t3 : e3;
    return b$1.range(this.anchor, i3);
  }
  /**
  Compare this range to another range.
  */
  eq(t3) {
    return this.anchor == t3.anchor && this.head == t3.head;
  }
  /**
  Return a JSON-serializable object representing the range.
  */
  toJSON() {
    return { anchor: this.anchor, head: this.head };
  }
  /**
  Convert a JSON representation of a range to a `SelectionRange`
  instance.
  */
  static fromJSON(t3) {
    if (!t3 || typeof t3.anchor != "number" || typeof t3.head != "number")
      throw new RangeError("Invalid JSON representation for SelectionRange");
    return b$1.range(t3.anchor, t3.head);
  }
  /**
  @internal
  */
  static create(t3, e3, i3) {
    return new Be2(t3, e3, i3);
  }
};
let b$1 = class b2 {
  constructor(t3, e3) {
    this.ranges = t3, this.mainIndex = e3;
  }
  /**
  Map a selection through a change. Used to adjust the selection
  position for changes.
  */
  map(t3, e3 = -1) {
    return t3.empty ? this : b2.create(this.ranges.map((i3) => i3.map(t3, e3)), this.mainIndex);
  }
  /**
  Compare this selection to another selection.
  */
  eq(t3) {
    if (this.ranges.length != t3.ranges.length || this.mainIndex != t3.mainIndex)
      return false;
    for (let e3 = 0; e3 < this.ranges.length; e3++)
      if (!this.ranges[e3].eq(t3.ranges[e3]))
        return false;
    return true;
  }
  /**
  Get the primary selection range. Usually, you should make sure
  your code applies to _all_ ranges, by using methods like
  [`changeByRange`](https://codemirror.net/6/docs/ref/#state.EditorState.changeByRange).
  */
  get main() {
    return this.ranges[this.mainIndex];
  }
  /**
  Make sure the selection only has one range. Returns a selection
  holding only the main range from this selection.
  */
  asSingle() {
    return this.ranges.length == 1 ? this : new b2([this.main], 0);
  }
  /**
  Extend this selection with an extra range.
  */
  addRange(t3, e3 = true) {
    return b2.create([t3].concat(this.ranges), e3 ? 0 : this.mainIndex + 1);
  }
  /**
  Replace a given range with another range, and then normalize the
  selection to merge and sort ranges if necessary.
  */
  replaceRange(t3, e3 = this.mainIndex) {
    let i3 = this.ranges.slice();
    return i3[e3] = t3, b2.create(i3, this.mainIndex);
  }
  /**
  Convert this selection to an object that can be serialized to
  JSON.
  */
  toJSON() {
    return { ranges: this.ranges.map((t3) => t3.toJSON()), main: this.mainIndex };
  }
  /**
  Create a selection from a JSON representation.
  */
  static fromJSON(t3) {
    if (!t3 || !Array.isArray(t3.ranges) || typeof t3.main != "number" || t3.main >= t3.ranges.length)
      throw new RangeError("Invalid JSON representation for EditorSelection");
    return new b2(t3.ranges.map((e3) => Be$1.fromJSON(e3)), t3.main);
  }
  /**
  Create a selection holding a single range.
  */
  static single(t3, e3 = t3) {
    return new b2([b2.range(t3, e3)], 0);
  }
  /**
  Sort and merge the given set of ranges, creating a valid
  selection.
  */
  static create(t3, e3 = 0) {
    if (t3.length == 0)
      throw new RangeError("A selection needs at least one range");
    for (let i3 = 0, s5 = 0; s5 < t3.length; s5++) {
      let r2 = t3[s5];
      if (r2.empty ? r2.from <= i3 : r2.from < i3)
        return b2.normalized(t3.slice(), e3);
      i3 = r2.to;
    }
    return new b2(t3, e3);
  }
  /**
  Create a cursor selection range at the given position. You can
  safely ignore the optional arguments in most situations.
  */
  static cursor(t3, e3 = 0, i3, s5) {
    return Be$1.create(t3, t3, (e3 == 0 ? 0 : e3 < 0 ? 8 : 16) | (i3 == null ? 7 : Math.min(6, i3)) | (s5 ?? 16777215) << 6);
  }
  /**
  Create a selection range.
  */
  static range(t3, e3, i3, s5) {
    let r2 = (i3 ?? 16777215) << 6 | (s5 == null ? 7 : Math.min(6, s5));
    return e3 < t3 ? Be$1.create(e3, t3, 48 | r2) : Be$1.create(t3, e3, (e3 > t3 ? 8 : 0) | r2);
  }
  /**
  @internal
  */
  static normalized(t3, e3 = 0) {
    let i3 = t3[e3];
    t3.sort((s5, r2) => s5.from - r2.from), e3 = t3.indexOf(i3);
    for (let s5 = 1; s5 < t3.length; s5++) {
      let r2 = t3[s5], o2 = t3[s5 - 1];
      if (r2.empty ? r2.from <= o2.to : r2.from < o2.to) {
        let l2 = o2.from, h4 = Math.max(r2.to, o2.to);
        s5 <= e3 && e3--, t3.splice(--s5, 2, r2.anchor > r2.head ? b2.range(h4, l2) : b2.range(l2, h4));
      }
    }
    return new b2(t3, e3);
  }
};
function ll$1(n2, t3) {
  for (let e3 of n2.ranges)
    if (e3.to > t3)
      throw new RangeError("Selection points outside of document");
}
let Un$1 = 0;
let O$2 = class O2 {
  constructor(t3, e3, i3, s5, r2) {
    this.combine = t3, this.compareInput = e3, this.compare = i3, this.isStatic = s5, this.id = Un$1++, this.default = t3([]), this.extensions = typeof r2 == "function" ? r2(this) : r2;
  }
  /**
  Returns a facet reader for this facet, which can be used to
  [read](https://codemirror.net/6/docs/ref/#state.EditorState.facet) it but not to define values for it.
  */
  get reader() {
    return this;
  }
  /**
  Define a new facet.
  */
  static define(t3 = {}) {
    return new O2(t3.combine || ((e3) => e3), t3.compareInput || ((e3, i3) => e3 === i3), t3.compare || (t3.combine ? (e3, i3) => e3 === i3 : Yn), !!t3.static, t3.enables);
  }
  /**
  Returns an extension that adds the given value to this facet.
  */
  of(t3) {
    return new Zi([], this, 0, t3);
  }
  /**
  Create an extension that computes a value for the facet from a
  state. You must take care to declare the parts of the state that
  this value depends on, since your function is only called again
  for a new state when one of those parts changed.
  
  In cases where your value depends only on a single field, you'll
  want to use the [`from`](https://codemirror.net/6/docs/ref/#state.Facet.from) method instead.
  */
  compute(t3, e3) {
    if (this.isStatic)
      throw new Error("Can't compute a static facet");
    return new Zi(t3, this, 1, e3);
  }
  /**
  Create an extension that computes zero or more values for this
  facet from a state.
  */
  computeN(t3, e3) {
    if (this.isStatic)
      throw new Error("Can't compute a static facet");
    return new Zi(t3, this, 2, e3);
  }
  from(t3, e3) {
    return e3 || (e3 = (i3) => i3), this.compute([t3], (i3) => e3(i3.field(t3)));
  }
};
function Yn(n2, t3) {
  return n2 == t3 || n2.length == t3.length && n2.every((e3, i3) => e3 === t3[i3]);
}
class Zi {
  constructor(t3, e3, i3, s5) {
    this.dependencies = t3, this.facet = e3, this.type = i3, this.value = s5, this.id = Un$1++;
  }
  dynamicSlot(t3) {
    var e3;
    let i3 = this.value, s5 = this.facet.compareInput, r2 = this.id, o2 = t3[r2] >> 1, l2 = this.type == 2, h4 = false, a4 = false, c3 = [];
    for (let f2 of this.dependencies)
      f2 == "doc" ? h4 = true : f2 == "selection" ? a4 = true : ((e3 = t3[f2.id]) !== null && e3 !== void 0 ? e3 : 1) & 1 || c3.push(t3[f2.id]);
    return {
      create(f2) {
        return f2.values[o2] = i3(f2), 1;
      },
      update(f2, u3) {
        if (h4 && u3.docChanged || a4 && (u3.docChanged || u3.selection) || hn$1(f2, c3)) {
          let d4 = i3(f2);
          if (l2 ? !vr$1(d4, f2.values[o2], s5) : !s5(d4, f2.values[o2]))
            return f2.values[o2] = d4, 1;
        }
        return 0;
      },
      reconfigure: (f2, u3) => {
        let d4, p2 = u3.config.address[r2];
        if (p2 != null) {
          let m4 = fs(u3, p2);
          if (this.dependencies.every((g2) => g2 instanceof O$2 ? u3.facet(g2) === f2.facet(g2) : g2 instanceof Ht$1 ? u3.field(g2, false) == f2.field(g2, false) : true) || (l2 ? vr$1(d4 = i3(f2), m4, s5) : s5(d4 = i3(f2), m4)))
            return f2.values[o2] = m4, 0;
        } else
          d4 = i3(f2);
        return f2.values[o2] = d4, 1;
      }
    };
  }
}
function vr$1(n2, t3, e3) {
  if (n2.length != t3.length)
    return false;
  for (let i3 = 0; i3 < n2.length; i3++)
    if (!e3(n2[i3], t3[i3]))
      return false;
  return true;
}
function hn$1(n2, t3) {
  let e3 = false;
  for (let i3 of t3)
    pi(n2, i3) & 1 && (e3 = true);
  return e3;
}
function Hc(n2, t3, e3) {
  let i3 = e3.map((h4) => n2[h4.id]), s5 = e3.map((h4) => h4.type), r2 = i3.filter((h4) => !(h4 & 1)), o2 = n2[t3.id] >> 1;
  function l2(h4) {
    let a4 = [];
    for (let c3 = 0; c3 < i3.length; c3++) {
      let f2 = fs(h4, i3[c3]);
      if (s5[c3] == 2)
        for (let u3 of f2)
          a4.push(u3);
      else
        a4.push(f2);
    }
    return t3.combine(a4);
  }
  return {
    create(h4) {
      for (let a4 of i3)
        pi(h4, a4);
      return h4.values[o2] = l2(h4), 1;
    },
    update(h4, a4) {
      if (!hn$1(h4, r2))
        return 0;
      let c3 = l2(h4);
      return t3.compare(c3, h4.values[o2]) ? 0 : (h4.values[o2] = c3, 1);
    },
    reconfigure(h4, a4) {
      let c3 = hn$1(h4, i3), f2 = a4.config.facets[t3.id], u3 = a4.facet(t3);
      if (f2 && !c3 && Yn(e3, f2))
        return h4.values[o2] = u3, 0;
      let d4 = l2(h4);
      return t3.compare(d4, u3) ? (h4.values[o2] = u3, 0) : (h4.values[o2] = d4, 1);
    }
  };
}
const Sr$1 = /* @__PURE__ */ O$2.define({ static: true });
let Ht$1 = class Ht2 {
  constructor(t3, e3, i3, s5, r2) {
    this.id = t3, this.createF = e3, this.updateF = i3, this.compareF = s5, this.spec = r2, this.provides = void 0;
  }
  /**
  Define a state field.
  */
  static define(t3) {
    let e3 = new Ht2(Un$1++, t3.create, t3.update, t3.compare || ((i3, s5) => i3 === s5), t3);
    return t3.provide && (e3.provides = t3.provide(e3)), e3;
  }
  create(t3) {
    let e3 = t3.facet(Sr$1).find((i3) => i3.field == this);
    return ((e3 == null ? void 0 : e3.create) || this.createF)(t3);
  }
  /**
  @internal
  */
  slot(t3) {
    let e3 = t3[this.id] >> 1;
    return {
      create: (i3) => (i3.values[e3] = this.create(i3), 1),
      update: (i3, s5) => {
        let r2 = i3.values[e3], o2 = this.updateF(r2, s5);
        return this.compareF(r2, o2) ? 0 : (i3.values[e3] = o2, 1);
      },
      reconfigure: (i3, s5) => s5.config.address[this.id] != null ? (i3.values[e3] = s5.field(this), 0) : (i3.values[e3] = this.create(i3), 1)
    };
  }
  /**
  Returns an extension that enables this field and overrides the
  way it is initialized. Can be useful when you need to provide a
  non-default starting value for the field.
  */
  init(t3) {
    return [this, Sr$1.of({ field: this, create: t3 })];
  }
  /**
  State field instances can be used as
  [`Extension`](https://codemirror.net/6/docs/ref/#state.Extension) values to enable the field in a
  given state.
  */
  get extension() {
    return this;
  }
};
const De$1 = { lowest: 4, low: 3, default: 2, high: 1, highest: 0 };
function ii(n2) {
  return (t3) => new hl$1(t3, n2);
}
const Qn = {
  /**
  The highest precedence level, for extensions that should end up
  near the start of the precedence ordering.
  */
  highest: /* @__PURE__ */ ii(De$1.highest),
  /**
  A higher-than-default precedence, for extensions that should
  come before those with default precedence.
  */
  high: /* @__PURE__ */ ii(De$1.high),
  /**
  The default precedence, which is also used for extensions
  without an explicit precedence.
  */
  default: /* @__PURE__ */ ii(De$1.default),
  /**
  A lower-than-default precedence.
  */
  low: /* @__PURE__ */ ii(De$1.low),
  /**
  The lowest precedence level. Meant for things that should end up
  near the end of the extension order.
  */
  lowest: /* @__PURE__ */ ii(De$1.lowest)
};
let hl$1 = class hl2 {
  constructor(t3, e3) {
    this.inner = t3, this.prec = e3;
  }
};
class Ai {
  /**
  Create an instance of this compartment to add to your [state
  configuration](https://codemirror.net/6/docs/ref/#state.EditorStateConfig.extensions).
  */
  of(t3) {
    return new an$1(this, t3);
  }
  /**
  Create an [effect](https://codemirror.net/6/docs/ref/#state.TransactionSpec.effects) that
  reconfigures this compartment.
  */
  reconfigure(t3) {
    return Ai.reconfigure.of({ compartment: this, extension: t3 });
  }
  /**
  Get the current content of the compartment in the state, or
  `undefined` if it isn't present.
  */
  get(t3) {
    return t3.config.compartments.get(this);
  }
}
let an$1 = class an2 {
  constructor(t3, e3) {
    this.compartment = t3, this.inner = e3;
  }
};
class cs {
  constructor(t3, e3, i3, s5, r2, o2) {
    for (this.base = t3, this.compartments = e3, this.dynamicSlots = i3, this.address = s5, this.staticValues = r2, this.facets = o2, this.statusTemplate = []; this.statusTemplate.length < i3.length; )
      this.statusTemplate.push(
        0
        /* SlotStatus.Unresolved */
      );
  }
  staticFacet(t3) {
    let e3 = this.address[t3.id];
    return e3 == null ? t3.default : this.staticValues[e3 >> 1];
  }
  static resolve(t3, e3, i3) {
    let s5 = [], r2 = /* @__PURE__ */ Object.create(null), o2 = /* @__PURE__ */ new Map();
    for (let u3 of _c(t3, e3, o2))
      u3 instanceof Ht$1 ? s5.push(u3) : (r2[u3.facet.id] || (r2[u3.facet.id] = [])).push(u3);
    let l2 = /* @__PURE__ */ Object.create(null), h4 = [], a4 = [];
    for (let u3 of s5)
      l2[u3.id] = a4.length << 1, a4.push((d4) => u3.slot(d4));
    let c3 = i3 == null ? void 0 : i3.config.facets;
    for (let u3 in r2) {
      let d4 = r2[u3], p2 = d4[0].facet, m4 = c3 && c3[u3] || [];
      if (d4.every(
        (g2) => g2.type == 0
        /* Provider.Static */
      ))
        if (l2[p2.id] = h4.length << 1 | 1, Yn(m4, d4))
          h4.push(i3.facet(p2));
        else {
          let g2 = p2.combine(d4.map((y4) => y4.value));
          h4.push(i3 && p2.compare(g2, i3.facet(p2)) ? i3.facet(p2) : g2);
        }
      else {
        for (let g2 of d4)
          g2.type == 0 ? (l2[g2.id] = h4.length << 1 | 1, h4.push(g2.value)) : (l2[g2.id] = a4.length << 1, a4.push((y4) => g2.dynamicSlot(y4)));
        l2[p2.id] = a4.length << 1, a4.push((g2) => Hc(g2, p2, d4));
      }
    }
    let f2 = a4.map((u3) => u3(l2));
    return new cs(t3, o2, f2, l2, h4, r2);
  }
}
function _c(n2, t3, e3) {
  let i3 = [[], [], [], [], []], s5 = /* @__PURE__ */ new Map();
  function r2(o2, l2) {
    let h4 = s5.get(o2);
    if (h4 != null) {
      if (h4 <= l2)
        return;
      let a4 = i3[h4].indexOf(o2);
      a4 > -1 && i3[h4].splice(a4, 1), o2 instanceof an$1 && e3.delete(o2.compartment);
    }
    if (s5.set(o2, l2), Array.isArray(o2))
      for (let a4 of o2)
        r2(a4, l2);
    else if (o2 instanceof an$1) {
      if (e3.has(o2.compartment))
        throw new RangeError("Duplicate use of compartment in extensions");
      let a4 = t3.get(o2.compartment) || o2.inner;
      e3.set(o2.compartment, a4), r2(a4, l2);
    } else if (o2 instanceof hl$1)
      r2(o2.inner, o2.prec);
    else if (o2 instanceof Ht$1)
      i3[l2].push(o2), o2.provides && r2(o2.provides, l2);
    else if (o2 instanceof Zi)
      i3[l2].push(o2), o2.facet.extensions && r2(o2.facet.extensions, De$1.default);
    else {
      let a4 = o2.extension;
      if (!a4)
        throw new Error(`Unrecognized extension value in extension set (${o2}). This sometimes happens because multiple instances of @codemirror/state are loaded, breaking instanceof checks.`);
      r2(a4, l2);
    }
  }
  return r2(n2, De$1.default), i3.reduce((o2, l2) => o2.concat(l2));
}
function pi(n2, t3) {
  if (t3 & 1)
    return 2;
  let e3 = t3 >> 1, i3 = n2.status[e3];
  if (i3 == 4)
    throw new Error("Cyclic dependency between fields and/or facets");
  if (i3 & 2)
    return i3;
  n2.status[e3] = 4;
  let s5 = n2.computeSlot(n2, n2.config.dynamicSlots[e3]);
  return n2.status[e3] = 2 | s5;
}
function fs(n2, t3) {
  return t3 & 1 ? n2.config.staticValues[t3 >> 1] : n2.values[t3 >> 1];
}
const al$1 = /* @__PURE__ */ O$2.define(), cl$1 = /* @__PURE__ */ O$2.define({
  combine: (n2) => n2.some((t3) => t3),
  static: true
}), fl$1 = /* @__PURE__ */ O$2.define({
  combine: (n2) => n2.length ? n2[0] : void 0,
  static: true
}), ul$1 = /* @__PURE__ */ O$2.define(), dl$1 = /* @__PURE__ */ O$2.define(), pl$1 = /* @__PURE__ */ O$2.define(), gl$1 = /* @__PURE__ */ O$2.define({
  combine: (n2) => n2.length ? n2[0] : false
});
class ti {
  /**
  @internal
  */
  constructor(t3, e3) {
    this.type = t3, this.value = e3;
  }
  /**
  Define a new type of annotation.
  */
  static define() {
    return new $c();
  }
}
class $c {
  /**
  Create an instance of this annotation.
  */
  of(t3) {
    return new ti(this, t3);
  }
}
class Fc {
  /**
  @internal
  */
  constructor(t3) {
    this.map = t3;
  }
  /**
  Create a [state effect](https://codemirror.net/6/docs/ref/#state.StateEffect) instance of this
  type.
  */
  of(t3) {
    return new z$4(this, t3);
  }
}
let z$4 = class z2 {
  /**
  @internal
  */
  constructor(t3, e3) {
    this.type = t3, this.value = e3;
  }
  /**
  Map this effect through a position mapping. Will return
  `undefined` when that ends up deleting the effect.
  */
  map(t3) {
    let e3 = this.type.map(this.value, t3);
    return e3 === void 0 ? void 0 : e3 == this.value ? this : new z2(this.type, e3);
  }
  /**
  Tells you whether this effect object is of a given
  [type](https://codemirror.net/6/docs/ref/#state.StateEffectType).
  */
  is(t3) {
    return this.type == t3;
  }
  /**
  Define a new effect type. The type parameter indicates the type
  of values that his effect holds. It should be a type that
  doesn't include `undefined`, since that is used in
  [mapping](https://codemirror.net/6/docs/ref/#state.StateEffect.map) to indicate that an effect is
  removed.
  */
  static define(t3 = {}) {
    return new Fc(t3.map || ((e3) => e3));
  }
  /**
  Map an array of effects through a change set.
  */
  static mapEffects(t3, e3) {
    if (!t3.length)
      return t3;
    let i3 = [];
    for (let s5 of t3) {
      let r2 = s5.map(e3);
      r2 && i3.push(r2);
    }
    return i3;
  }
};
z$4.reconfigure = /* @__PURE__ */ z$4.define();
z$4.appendConfig = /* @__PURE__ */ z$4.define();
let ft$2 = class ft2 {
  constructor(t3, e3, i3, s5, r2, o2) {
    this.startState = t3, this.changes = e3, this.selection = i3, this.effects = s5, this.annotations = r2, this.scrollIntoView = o2, this._doc = null, this._state = null, i3 && ll$1(i3, e3.newLength), r2.some((l2) => l2.type == ft2.time) || (this.annotations = r2.concat(ft2.time.of(Date.now())));
  }
  /**
  @internal
  */
  static create(t3, e3, i3, s5, r2, o2) {
    return new ft2(t3, e3, i3, s5, r2, o2);
  }
  /**
  The new document produced by the transaction. Contrary to
  [`.state`](https://codemirror.net/6/docs/ref/#state.Transaction.state)`.doc`, accessing this won't
  force the entire new state to be computed right away, so it is
  recommended that [transaction
  filters](https://codemirror.net/6/docs/ref/#state.EditorState^transactionFilter) use this getter
  when they need to look at the new document.
  */
  get newDoc() {
    return this._doc || (this._doc = this.changes.apply(this.startState.doc));
  }
  /**
  The new selection produced by the transaction. If
  [`this.selection`](https://codemirror.net/6/docs/ref/#state.Transaction.selection) is undefined,
  this will [map](https://codemirror.net/6/docs/ref/#state.EditorSelection.map) the start state's
  current selection through the changes made by the transaction.
  */
  get newSelection() {
    return this.selection || this.startState.selection.map(this.changes);
  }
  /**
  The new state created by the transaction. Computed on demand
  (but retained for subsequent access), so it is recommended not to
  access it in [transaction
  filters](https://codemirror.net/6/docs/ref/#state.EditorState^transactionFilter) when possible.
  */
  get state() {
    return this._state || this.startState.applyTransaction(this), this._state;
  }
  /**
  Get the value of the given annotation type, if any.
  */
  annotation(t3) {
    for (let e3 of this.annotations)
      if (e3.type == t3)
        return e3.value;
  }
  /**
  Indicates whether the transaction changed the document.
  */
  get docChanged() {
    return !this.changes.empty;
  }
  /**
  Indicates whether this transaction reconfigures the state
  (through a [configuration compartment](https://codemirror.net/6/docs/ref/#state.Compartment) or
  with a top-level configuration
  [effect](https://codemirror.net/6/docs/ref/#state.StateEffect^reconfigure).
  */
  get reconfigured() {
    return this.startState.config != this.state.config;
  }
  /**
  Returns true if the transaction has a [user
  event](https://codemirror.net/6/docs/ref/#state.Transaction^userEvent) annotation that is equal to
  or more specific than `event`. For example, if the transaction
  has `"select.pointer"` as user event, `"select"` and
  `"select.pointer"` will match it.
  */
  isUserEvent(t3) {
    let e3 = this.annotation(ft2.userEvent);
    return !!(e3 && (e3 == t3 || e3.length > t3.length && e3.slice(0, t3.length) == t3 && e3[t3.length] == "."));
  }
};
ft$2.time = /* @__PURE__ */ ti.define();
ft$2.userEvent = /* @__PURE__ */ ti.define();
ft$2.addToHistory = /* @__PURE__ */ ti.define();
ft$2.remote = /* @__PURE__ */ ti.define();
function zc(n2, t3) {
  let e3 = [];
  for (let i3 = 0, s5 = 0; ; ) {
    let r2, o2;
    if (i3 < n2.length && (s5 == t3.length || t3[s5] >= n2[i3]))
      r2 = n2[i3++], o2 = n2[i3++];
    else if (s5 < t3.length)
      r2 = t3[s5++], o2 = t3[s5++];
    else
      return e3;
    !e3.length || e3[e3.length - 1] < r2 ? e3.push(r2, o2) : e3[e3.length - 1] < o2 && (e3[e3.length - 1] = o2);
  }
}
function ml$1(n2, t3, e3) {
  var i3;
  let s5, r2, o2;
  return e3 ? (s5 = t3.changes, r2 = it$1.empty(t3.changes.length), o2 = n2.changes.compose(t3.changes)) : (s5 = t3.changes.map(n2.changes), r2 = n2.changes.mapDesc(t3.changes, true), o2 = n2.changes.compose(s5)), {
    changes: o2,
    selection: t3.selection ? t3.selection.map(r2) : (i3 = n2.selection) === null || i3 === void 0 ? void 0 : i3.map(s5),
    effects: z$4.mapEffects(n2.effects, s5).concat(z$4.mapEffects(t3.effects, r2)),
    annotations: n2.annotations.length ? n2.annotations.concat(t3.annotations) : t3.annotations,
    scrollIntoView: n2.scrollIntoView || t3.scrollIntoView
  };
}
function cn(n2, t3, e3) {
  let i3 = t3.selection, s5 = je$4(t3.annotations);
  return t3.userEvent && (s5 = s5.concat(ft$2.userEvent.of(t3.userEvent))), {
    changes: t3.changes instanceof it$1 ? t3.changes : it$1.of(t3.changes || [], e3, n2.facet(fl$1)),
    selection: i3 && (i3 instanceof b$1 ? i3 : b$1.single(i3.anchor, i3.head)),
    effects: je$4(t3.effects),
    annotations: s5,
    scrollIntoView: !!t3.scrollIntoView
  };
}
function wl$1(n2, t3, e3) {
  let i3 = cn(n2, t3.length ? t3[0] : {}, n2.doc.length);
  t3.length && t3[0].filter === false && (e3 = false);
  for (let r2 = 1; r2 < t3.length; r2++) {
    t3[r2].filter === false && (e3 = false);
    let o2 = !!t3[r2].sequential;
    i3 = ml$1(i3, cn(n2, t3[r2], o2 ? i3.changes.newLength : n2.doc.length), o2);
  }
  let s5 = ft$2.create(n2, i3.changes, i3.selection, i3.effects, i3.annotations, i3.scrollIntoView);
  return jc(e3 ? Wc(s5) : s5);
}
function Wc(n2) {
  let t3 = n2.startState, e3 = true;
  for (let s5 of t3.facet(ul$1)) {
    let r2 = s5(n2);
    if (r2 === false) {
      e3 = false;
      break;
    }
    Array.isArray(r2) && (e3 = e3 === true ? r2 : zc(e3, r2));
  }
  if (e3 !== true) {
    let s5, r2;
    if (e3 === false)
      r2 = n2.changes.invertedDesc, s5 = it$1.empty(t3.doc.length);
    else {
      let o2 = n2.changes.filter(e3);
      s5 = o2.changes, r2 = o2.filtered.mapDesc(o2.changes).invertedDesc;
    }
    n2 = ft$2.create(t3, s5, n2.selection && n2.selection.map(r2), z$4.mapEffects(n2.effects, r2), n2.annotations, n2.scrollIntoView);
  }
  let i3 = t3.facet(dl$1);
  for (let s5 = i3.length - 1; s5 >= 0; s5--) {
    let r2 = i3[s5](n2);
    r2 instanceof ft$2 ? n2 = r2 : Array.isArray(r2) && r2.length == 1 && r2[0] instanceof ft$2 ? n2 = r2[0] : n2 = wl$1(t3, je$4(r2), false);
  }
  return n2;
}
function jc(n2) {
  let t3 = n2.startState, e3 = t3.facet(pl$1), i3 = n2;
  for (let s5 = e3.length - 1; s5 >= 0; s5--) {
    let r2 = e3[s5](n2);
    r2 && Object.keys(r2).length && (i3 = ml$1(i3, cn(t3, r2, n2.changes.newLength), true));
  }
  return i3 == n2 ? n2 : ft$2.create(t3, n2.changes, n2.selection, i3.effects, i3.annotations, i3.scrollIntoView);
}
const Kc = [];
function je$4(n2) {
  return n2 == null ? Kc : Array.isArray(n2) ? n2 : [n2];
}
var Zt$1 = /* @__PURE__ */ function(n2) {
  return n2[n2.Word = 0] = "Word", n2[n2.Space = 1] = "Space", n2[n2.Other = 2] = "Other", n2;
}(Zt$1 || (Zt$1 = {}));
const qc = /[\u00df\u0587\u0590-\u05f4\u0600-\u06ff\u3040-\u309f\u30a0-\u30ff\u3400-\u4db5\u4e00-\u9fcc\uac00-\ud7af]/;
let fn$1;
try {
  fn$1 = /* @__PURE__ */ new RegExp("[\\p{Alphabetic}\\p{Number}_]", "u");
} catch {
}
function Gc(n2) {
  if (fn$1)
    return fn$1.test(n2);
  for (let t3 = 0; t3 < n2.length; t3++) {
    let e3 = n2[t3];
    if (/\w/.test(e3) || e3 > "" && (e3.toUpperCase() != e3.toLowerCase() || qc.test(e3)))
      return true;
  }
  return false;
}
function Uc(n2) {
  return (t3) => {
    if (!/\S/.test(t3))
      return Zt$1.Space;
    if (Gc(t3))
      return Zt$1.Word;
    for (let e3 = 0; e3 < n2.length; e3++)
      if (t3.indexOf(n2[e3]) > -1)
        return Zt$1.Word;
    return Zt$1.Other;
  };
}
let H$2 = class H2 {
  constructor(t3, e3, i3, s5, r2, o2) {
    this.config = t3, this.doc = e3, this.selection = i3, this.values = s5, this.status = t3.statusTemplate.slice(), this.computeSlot = r2, o2 && (o2._state = this);
    for (let l2 = 0; l2 < this.config.dynamicSlots.length; l2++)
      pi(this, l2 << 1);
    this.computeSlot = null;
  }
  field(t3, e3 = true) {
    let i3 = this.config.address[t3.id];
    if (i3 == null) {
      if (e3)
        throw new RangeError("Field is not present in this state");
      return;
    }
    return pi(this, i3), fs(this, i3);
  }
  /**
  Create a [transaction](https://codemirror.net/6/docs/ref/#state.Transaction) that updates this
  state. Any number of [transaction specs](https://codemirror.net/6/docs/ref/#state.TransactionSpec)
  can be passed. Unless
  [`sequential`](https://codemirror.net/6/docs/ref/#state.TransactionSpec.sequential) is set, the
  [changes](https://codemirror.net/6/docs/ref/#state.TransactionSpec.changes) (if any) of each spec
  are assumed to start in the _current_ document (not the document
  produced by previous specs), and its
  [selection](https://codemirror.net/6/docs/ref/#state.TransactionSpec.selection) and
  [effects](https://codemirror.net/6/docs/ref/#state.TransactionSpec.effects) are assumed to refer
  to the document created by its _own_ changes. The resulting
  transaction contains the combined effect of all the different
  specs. For [selection](https://codemirror.net/6/docs/ref/#state.TransactionSpec.selection), later
  specs take precedence over earlier ones.
  */
  update(...t3) {
    return wl$1(this, t3, true);
  }
  /**
  @internal
  */
  applyTransaction(t3) {
    let e3 = this.config, { base: i3, compartments: s5 } = e3;
    for (let o2 of t3.effects)
      o2.is(Ai.reconfigure) ? (e3 && (s5 = /* @__PURE__ */ new Map(), e3.compartments.forEach((l2, h4) => s5.set(h4, l2)), e3 = null), s5.set(o2.value.compartment, o2.value.extension)) : o2.is(z$4.reconfigure) ? (e3 = null, i3 = o2.value) : o2.is(z$4.appendConfig) && (e3 = null, i3 = je$4(i3).concat(o2.value));
    let r2;
    e3 ? r2 = t3.startState.values.slice() : (e3 = cs.resolve(i3, s5, this), r2 = new H2(e3, this.doc, this.selection, e3.dynamicSlots.map(() => null), (l2, h4) => h4.reconfigure(l2, this), null).values), new H2(e3, t3.newDoc, t3.newSelection, r2, (o2, l2) => l2.update(o2, t3), t3);
  }
  /**
  Create a [transaction spec](https://codemirror.net/6/docs/ref/#state.TransactionSpec) that
  replaces every selection range with the given content.
  */
  replaceSelection(t3) {
    return typeof t3 == "string" && (t3 = this.toText(t3)), this.changeByRange((e3) => ({
      changes: { from: e3.from, to: e3.to, insert: t3 },
      range: b$1.cursor(e3.from + t3.length)
    }));
  }
  /**
  Create a set of changes and a new selection by running the given
  function for each range in the active selection. The function
  can return an optional set of changes (in the coordinate space
  of the start document), plus an updated range (in the coordinate
  space of the document produced by the call's own changes). This
  method will merge all the changes and ranges into a single
  changeset and selection, and return it as a [transaction
  spec](https://codemirror.net/6/docs/ref/#state.TransactionSpec), which can be passed to
  [`update`](https://codemirror.net/6/docs/ref/#state.EditorState.update).
  */
  changeByRange(t3) {
    let e3 = this.selection, i3 = t3(e3.ranges[0]), s5 = this.changes(i3.changes), r2 = [i3.range], o2 = je$4(i3.effects);
    for (let l2 = 1; l2 < e3.ranges.length; l2++) {
      let h4 = t3(e3.ranges[l2]), a4 = this.changes(h4.changes), c3 = a4.map(s5);
      for (let u3 = 0; u3 < l2; u3++)
        r2[u3] = r2[u3].map(c3);
      let f2 = s5.mapDesc(a4, true);
      r2.push(h4.range.map(f2)), s5 = s5.compose(c3), o2 = z$4.mapEffects(o2, c3).concat(z$4.mapEffects(je$4(h4.effects), f2));
    }
    return {
      changes: s5,
      selection: b$1.create(r2, e3.mainIndex),
      effects: o2
    };
  }
  /**
  Create a [change set](https://codemirror.net/6/docs/ref/#state.ChangeSet) from the given change
  description, taking the state's document length and line
  separator into account.
  */
  changes(t3 = []) {
    return t3 instanceof it$1 ? t3 : it$1.of(t3, this.doc.length, this.facet(H2.lineSeparator));
  }
  /**
  Using the state's [line
  separator](https://codemirror.net/6/docs/ref/#state.EditorState^lineSeparator), create a
  [`Text`](https://codemirror.net/6/docs/ref/#state.Text) instance from the given string.
  */
  toText(t3) {
    return V$2.of(t3.split(this.facet(H2.lineSeparator) || rn$1));
  }
  /**
  Return the given range of the document as a string.
  */
  sliceDoc(t3 = 0, e3 = this.doc.length) {
    return this.doc.sliceString(t3, e3, this.lineBreak);
  }
  /**
  Get the value of a state [facet](https://codemirror.net/6/docs/ref/#state.Facet).
  */
  facet(t3) {
    let e3 = this.config.address[t3.id];
    return e3 == null ? t3.default : (pi(this, e3), fs(this, e3));
  }
  /**
  Convert this state to a JSON-serializable object. When custom
  fields should be serialized, you can pass them in as an object
  mapping property names (in the resulting object, which should
  not use `doc` or `selection`) to fields.
  */
  toJSON(t3) {
    let e3 = {
      doc: this.sliceDoc(),
      selection: this.selection.toJSON()
    };
    if (t3)
      for (let i3 in t3) {
        let s5 = t3[i3];
        s5 instanceof Ht$1 && this.config.address[s5.id] != null && (e3[i3] = s5.spec.toJSON(this.field(t3[i3]), this));
      }
    return e3;
  }
  /**
  Deserialize a state from its JSON representation. When custom
  fields should be deserialized, pass the same object you passed
  to [`toJSON`](https://codemirror.net/6/docs/ref/#state.EditorState.toJSON) when serializing as
  third argument.
  */
  static fromJSON(t3, e3 = {}, i3) {
    if (!t3 || typeof t3.doc != "string")
      throw new RangeError("Invalid JSON representation for EditorState");
    let s5 = [];
    if (i3) {
      for (let r2 in i3)
        if (Object.prototype.hasOwnProperty.call(t3, r2)) {
          let o2 = i3[r2], l2 = t3[r2];
          s5.push(o2.init((h4) => o2.spec.fromJSON(l2, h4)));
        }
    }
    return H2.create({
      doc: t3.doc,
      selection: b$1.fromJSON(t3.selection),
      extensions: e3.extensions ? s5.concat([e3.extensions]) : s5
    });
  }
  /**
  Create a new state. You'll usually only need this when
  initializing an editor—updated states are created by applying
  transactions.
  */
  static create(t3 = {}) {
    let e3 = cs.resolve(t3.extensions || [], /* @__PURE__ */ new Map()), i3 = t3.doc instanceof V$2 ? t3.doc : V$2.of((t3.doc || "").split(e3.staticFacet(H2.lineSeparator) || rn$1)), s5 = t3.selection ? t3.selection instanceof b$1 ? t3.selection : b$1.single(t3.selection.anchor, t3.selection.head) : b$1.single(0);
    return ll$1(s5, i3.length), e3.staticFacet(cl$1) || (s5 = s5.asSingle()), new H2(e3, i3, s5, e3.dynamicSlots.map(() => null), (r2, o2) => o2.create(r2), null);
  }
  /**
  The size (in columns) of a tab in the document, determined by
  the [`tabSize`](https://codemirror.net/6/docs/ref/#state.EditorState^tabSize) facet.
  */
  get tabSize() {
    return this.facet(H2.tabSize);
  }
  /**
  Get the proper [line-break](https://codemirror.net/6/docs/ref/#state.EditorState^lineSeparator)
  string for this state.
  */
  get lineBreak() {
    return this.facet(H2.lineSeparator) || `
`;
  }
  /**
  Returns true when the editor is
  [configured](https://codemirror.net/6/docs/ref/#state.EditorState^readOnly) to be read-only.
  */
  get readOnly() {
    return this.facet(gl$1);
  }
  /**
  Look up a translation for the given phrase (via the
  [`phrases`](https://codemirror.net/6/docs/ref/#state.EditorState^phrases) facet), or return the
  original string if no translation is found.
  
  If additional arguments are passed, they will be inserted in
  place of markers like `$1` (for the first value) and `$2`, etc.
  A single `$` is equivalent to `$1`, and `$$` will produce a
  literal dollar sign.
  */
  phrase(t3, ...e3) {
    for (let i3 of this.facet(H2.phrases))
      if (Object.prototype.hasOwnProperty.call(i3, t3)) {
        t3 = i3[t3];
        break;
      }
    return e3.length && (t3 = t3.replace(/\$(\$|\d*)/g, (i3, s5) => {
      if (s5 == "$")
        return "$";
      let r2 = +(s5 || 1);
      return !r2 || r2 > e3.length ? i3 : e3[r2 - 1];
    })), t3;
  }
  /**
  Find the values for a given language data field, provided by the
  the [`languageData`](https://codemirror.net/6/docs/ref/#state.EditorState^languageData) facet.
  
  Examples of language data fields are...
  
  - [`"commentTokens"`](https://codemirror.net/6/docs/ref/#commands.CommentTokens) for specifying
    comment syntax.
  - [`"autocomplete"`](https://codemirror.net/6/docs/ref/#autocomplete.autocompletion^config.override)
    for providing language-specific completion sources.
  - [`"wordChars"`](https://codemirror.net/6/docs/ref/#state.EditorState.charCategorizer) for adding
    characters that should be considered part of words in this
    language.
  - [`"closeBrackets"`](https://codemirror.net/6/docs/ref/#autocomplete.CloseBracketConfig) controls
    bracket closing behavior.
  */
  languageDataAt(t3, e3, i3 = -1) {
    let s5 = [];
    for (let r2 of this.facet(al$1))
      for (let o2 of r2(this, e3, i3))
        Object.prototype.hasOwnProperty.call(o2, t3) && s5.push(o2[t3]);
    return s5;
  }
  /**
  Return a function that can categorize strings (expected to
  represent a single [grapheme cluster](https://codemirror.net/6/docs/ref/#state.findClusterBreak))
  into one of:
  
   - Word (contains an alphanumeric character or a character
     explicitly listed in the local language's `"wordChars"`
     language data, which should be a string)
   - Space (contains only whitespace)
   - Other (anything else)
  */
  charCategorizer(t3) {
    return Uc(this.languageDataAt("wordChars", t3).join(""));
  }
  /**
  Find the word at the given position, meaning the range
  containing all [word](https://codemirror.net/6/docs/ref/#state.CharCategory.Word) characters
  around it. If no word characters are adjacent to the position,
  this returns null.
  */
  wordAt(t3) {
    let { text: e3, from: i3, length: s5 } = this.doc.lineAt(t3), r2 = this.charCategorizer(t3), o2 = t3 - i3, l2 = t3 - i3;
    for (; o2 > 0; ) {
      let h4 = wt$2(e3, o2, false);
      if (r2(e3.slice(h4, o2)) != Zt$1.Word)
        break;
      o2 = h4;
    }
    for (; l2 < s5; ) {
      let h4 = wt$2(e3, l2);
      if (r2(e3.slice(l2, h4)) != Zt$1.Word)
        break;
      l2 = h4;
    }
    return o2 == l2 ? null : b$1.range(o2 + i3, l2 + i3);
  }
};
H$2.allowMultipleSelections = cl$1;
H$2.tabSize = /* @__PURE__ */ O$2.define({
  combine: (n2) => n2.length ? n2[0] : 4
});
H$2.lineSeparator = fl$1;
H$2.readOnly = gl$1;
H$2.phrases = /* @__PURE__ */ O$2.define({
  compare(n2, t3) {
    let e3 = Object.keys(n2), i3 = Object.keys(t3);
    return e3.length == i3.length && e3.every((s5) => n2[s5] == t3[s5]);
  }
});
H$2.languageData = al$1;
H$2.changeFilter = ul$1;
H$2.transactionFilter = dl$1;
H$2.transactionExtender = pl$1;
Ai.reconfigure = /* @__PURE__ */ z$4.define();
function Ds(n2, t3, e3 = {}) {
  let i3 = {};
  for (let s5 of n2)
    for (let r2 of Object.keys(s5)) {
      let o2 = s5[r2], l2 = i3[r2];
      if (l2 === void 0)
        i3[r2] = o2;
      else if (!(l2 === o2 || o2 === void 0))
        if (Object.hasOwnProperty.call(e3, r2))
          i3[r2] = e3[r2](l2, o2);
        else
          throw new Error("Config merge conflict for field " + r2);
    }
  for (let s5 in t3)
    i3[s5] === void 0 && (i3[s5] = t3[s5]);
  return i3;
}
let Qe$2 = class Qe2 {
  /**
  Compare this value with another value. Used when comparing
  rangesets. The default implementation compares by identity.
  Unless you are only creating a fixed number of unique instances
  of your value type, it is a good idea to implement this
  properly.
  */
  eq(t3) {
    return this == t3;
  }
  /**
  Create a [range](https://codemirror.net/6/docs/ref/#state.Range) with this value.
  */
  range(t3, e3 = t3) {
    return un.create(t3, e3, this);
  }
};
Qe$2.prototype.startSide = Qe$2.prototype.endSide = 0;
Qe$2.prototype.point = false;
Qe$2.prototype.mapMode = mt$1.TrackDel;
let un = class yl2 {
  constructor(t3, e3, i3) {
    this.from = t3, this.to = e3, this.value = i3;
  }
  /**
  @internal
  */
  static create(t3, e3, i3) {
    return new yl2(t3, e3, i3);
  }
};
function dn(n2, t3) {
  return n2.from - t3.from || n2.value.startSide - t3.value.startSide;
}
class Jn {
  constructor(t3, e3, i3, s5) {
    this.from = t3, this.to = e3, this.value = i3, this.maxPoint = s5;
  }
  get length() {
    return this.to[this.to.length - 1];
  }
  // Find the index of the given position and side. Use the ranges'
  // `from` pos when `end == false`, `to` when `end == true`.
  findIndex(t3, e3, i3, s5 = 0) {
    let r2 = i3 ? this.to : this.from;
    for (let o2 = s5, l2 = r2.length; ; ) {
      if (o2 == l2)
        return o2;
      let h4 = o2 + l2 >> 1, a4 = r2[h4] - t3 || (i3 ? this.value[h4].endSide : this.value[h4].startSide) - e3;
      if (h4 == o2)
        return a4 >= 0 ? o2 : l2;
      a4 >= 0 ? l2 = h4 : o2 = h4 + 1;
    }
  }
  between(t3, e3, i3, s5) {
    for (let r2 = this.findIndex(e3, -1e9, true), o2 = this.findIndex(i3, 1e9, false, r2); r2 < o2; r2++)
      if (s5(this.from[r2] + t3, this.to[r2] + t3, this.value[r2]) === false)
        return false;
  }
  map(t3, e3) {
    let i3 = [], s5 = [], r2 = [], o2 = -1, l2 = -1;
    for (let h4 = 0; h4 < this.value.length; h4++) {
      let a4 = this.value[h4], c3 = this.from[h4] + t3, f2 = this.to[h4] + t3, u3, d4;
      if (c3 == f2) {
        let p2 = e3.mapPos(c3, a4.startSide, a4.mapMode);
        if (p2 == null || (u3 = d4 = p2, a4.startSide != a4.endSide && (d4 = e3.mapPos(c3, a4.endSide), d4 < u3)))
          continue;
      } else if (u3 = e3.mapPos(c3, a4.startSide), d4 = e3.mapPos(f2, a4.endSide), u3 > d4 || u3 == d4 && a4.startSide > 0 && a4.endSide <= 0)
        continue;
      (d4 - u3 || a4.endSide - a4.startSide) < 0 || (o2 < 0 && (o2 = u3), a4.point && (l2 = Math.max(l2, d4 - u3)), i3.push(a4), s5.push(u3 - o2), r2.push(d4 - o2));
    }
    return { mapped: i3.length ? new Jn(s5, r2, i3, l2) : null, pos: o2 };
  }
}
let $$3 = class $2 {
  constructor(t3, e3, i3, s5) {
    this.chunkPos = t3, this.chunk = e3, this.nextLayer = i3, this.maxPoint = s5;
  }
  /**
  @internal
  */
  static create(t3, e3, i3, s5) {
    return new $2(t3, e3, i3, s5);
  }
  /**
  @internal
  */
  get length() {
    let t3 = this.chunk.length - 1;
    return t3 < 0 ? 0 : Math.max(this.chunkEnd(t3), this.nextLayer.length);
  }
  /**
  The number of ranges in the set.
  */
  get size() {
    if (this.isEmpty)
      return 0;
    let t3 = this.nextLayer.size;
    for (let e3 of this.chunk)
      t3 += e3.value.length;
    return t3;
  }
  /**
  @internal
  */
  chunkEnd(t3) {
    return this.chunkPos[t3] + this.chunk[t3].length;
  }
  /**
  Update the range set, optionally adding new ranges or filtering
  out existing ones.
  
  (Note: The type parameter is just there as a kludge to work
  around TypeScript variance issues that prevented `RangeSet<X>`
  from being a subtype of `RangeSet<Y>` when `X` is a subtype of
  `Y`.)
  */
  update(t3) {
    let { add: e3 = [], sort: i3 = false, filterFrom: s5 = 0, filterTo: r2 = this.length } = t3, o2 = t3.filter;
    if (e3.length == 0 && !o2)
      return this;
    if (i3 && (e3 = e3.slice().sort(dn)), this.isEmpty)
      return e3.length ? $2.of(e3) : this;
    let l2 = new bl$1(this, null, -1).goto(0), h4 = 0, a4 = [], c3 = new Ee$2();
    for (; l2.value || h4 < e3.length; )
      if (h4 < e3.length && (l2.from - e3[h4].from || l2.startSide - e3[h4].value.startSide) >= 0) {
        let f2 = e3[h4++];
        c3.addInner(f2.from, f2.to, f2.value) || a4.push(f2);
      } else
        l2.rangeIndex == 1 && l2.chunkIndex < this.chunk.length && (h4 == e3.length || this.chunkEnd(l2.chunkIndex) < e3[h4].from) && (!o2 || s5 > this.chunkEnd(l2.chunkIndex) || r2 < this.chunkPos[l2.chunkIndex]) && c3.addChunk(this.chunkPos[l2.chunkIndex], this.chunk[l2.chunkIndex]) ? l2.nextChunk() : ((!o2 || s5 > l2.to || r2 < l2.from || o2(l2.from, l2.to, l2.value)) && (c3.addInner(l2.from, l2.to, l2.value) || a4.push(un.create(l2.from, l2.to, l2.value))), l2.next());
    return c3.finishInner(this.nextLayer.isEmpty && !a4.length ? $2.empty : this.nextLayer.update({ add: a4, filter: o2, filterFrom: s5, filterTo: r2 }));
  }
  /**
  Map this range set through a set of changes, return the new set.
  */
  map(t3) {
    if (t3.empty || this.isEmpty)
      return this;
    let e3 = [], i3 = [], s5 = -1;
    for (let o2 = 0; o2 < this.chunk.length; o2++) {
      let l2 = this.chunkPos[o2], h4 = this.chunk[o2], a4 = t3.touchesRange(l2, l2 + h4.length);
      if (a4 === false)
        s5 = Math.max(s5, h4.maxPoint), e3.push(h4), i3.push(t3.mapPos(l2));
      else if (a4 === true) {
        let { mapped: c3, pos: f2 } = h4.map(l2, t3);
        c3 && (s5 = Math.max(s5, c3.maxPoint), e3.push(c3), i3.push(f2));
      }
    }
    let r2 = this.nextLayer.map(t3);
    return e3.length == 0 ? r2 : new $2(i3, e3, r2 || $2.empty, s5);
  }
  /**
  Iterate over the ranges that touch the region `from` to `to`,
  calling `f` for each. There is no guarantee that the ranges will
  be reported in any specific order. When the callback returns
  `false`, iteration stops.
  */
  between(t3, e3, i3) {
    if (!this.isEmpty) {
      for (let s5 = 0; s5 < this.chunk.length; s5++) {
        let r2 = this.chunkPos[s5], o2 = this.chunk[s5];
        if (e3 >= r2 && t3 <= r2 + o2.length && o2.between(r2, t3 - r2, e3 - r2, i3) === false)
          return;
      }
      this.nextLayer.between(t3, e3, i3);
    }
  }
  /**
  Iterate over the ranges in this set, in order, including all
  ranges that end at or after `from`.
  */
  iter(t3 = 0) {
    return wi.from([this]).goto(t3);
  }
  /**
  @internal
  */
  get isEmpty() {
    return this.nextLayer == this;
  }
  /**
  Iterate over the ranges in a collection of sets, in order,
  starting from `from`.
  */
  static iter(t3, e3 = 0) {
    return wi.from(t3).goto(e3);
  }
  /**
  Iterate over two groups of sets, calling methods on `comparator`
  to notify it of possible differences.
  */
  static compare(t3, e3, i3, s5, r2 = -1) {
    let o2 = t3.filter((f2) => f2.maxPoint > 0 || !f2.isEmpty && f2.maxPoint >= r2), l2 = e3.filter((f2) => f2.maxPoint > 0 || !f2.isEmpty && f2.maxPoint >= r2), h4 = Cr$1(o2, l2, i3), a4 = new si(o2, h4, r2), c3 = new si(l2, h4, r2);
    i3.iterGaps((f2, u3, d4) => Ar$1(a4, f2, c3, u3, d4, s5)), i3.empty && i3.length == 0 && Ar$1(a4, 0, c3, 0, 0, s5);
  }
  /**
  Compare the contents of two groups of range sets, returning true
  if they are equivalent in the given range.
  */
  static eq(t3, e3, i3 = 0, s5) {
    s5 == null && (s5 = 1e9 - 1);
    let r2 = t3.filter((c3) => !c3.isEmpty && e3.indexOf(c3) < 0), o2 = e3.filter((c3) => !c3.isEmpty && t3.indexOf(c3) < 0);
    if (r2.length != o2.length)
      return false;
    if (!r2.length)
      return true;
    let l2 = Cr$1(r2, o2), h4 = new si(r2, l2, 0).goto(i3), a4 = new si(o2, l2, 0).goto(i3);
    for (; ; ) {
      if (h4.to != a4.to || !pn$1(h4.active, a4.active) || h4.point && (!a4.point || !h4.point.eq(a4.point)))
        return false;
      if (h4.to > s5)
        return true;
      h4.next(), a4.next();
    }
  }
  /**
  Iterate over a group of range sets at the same time, notifying
  the iterator about the ranges covering every given piece of
  content. Returns the open count (see
  [`SpanIterator.span`](https://codemirror.net/6/docs/ref/#state.SpanIterator.span)) at the end
  of the iteration.
  */
  static spans(t3, e3, i3, s5, r2 = -1) {
    let o2 = new si(t3, null, r2).goto(e3), l2 = e3, h4 = o2.openStart;
    for (; ; ) {
      let a4 = Math.min(o2.to, i3);
      if (o2.point) {
        let c3 = o2.activeForPoint(o2.to), f2 = o2.pointFrom < e3 ? c3.length + 1 : Math.min(c3.length, h4);
        s5.point(l2, a4, o2.point, c3, f2, o2.pointRank), h4 = Math.min(o2.openEnd(a4), c3.length);
      } else
        a4 > l2 && (s5.span(l2, a4, o2.active, h4), h4 = o2.openEnd(a4));
      if (o2.to > i3)
        return h4 + (o2.point && o2.to > i3 ? 1 : 0);
      l2 = o2.to, o2.next();
    }
  }
  /**
  Create a range set for the given range or array of ranges. By
  default, this expects the ranges to be _sorted_ (by start
  position and, if two start at the same position,
  `value.startSide`). You can pass `true` as second argument to
  cause the method to sort them.
  */
  static of(t3, e3 = false) {
    let i3 = new Ee$2();
    for (let s5 of t3 instanceof un ? [t3] : e3 ? Yc(t3) : t3)
      i3.add(s5.from, s5.to, s5.value);
    return i3.finish();
  }
};
$$3.empty = /* @__PURE__ */ new $$3([], [], null, -1);
function Yc(n2) {
  if (n2.length > 1)
    for (let t3 = n2[0], e3 = 1; e3 < n2.length; e3++) {
      let i3 = n2[e3];
      if (dn(t3, i3) > 0)
        return n2.slice().sort(dn);
      t3 = i3;
    }
  return n2;
}
$$3.empty.nextLayer = $$3.empty;
let Ee$2 = class Ee2 {
  finishChunk(t3) {
    this.chunks.push(new Jn(this.from, this.to, this.value, this.maxPoint)), this.chunkPos.push(this.chunkStart), this.chunkStart = -1, this.setMaxPoint = Math.max(this.setMaxPoint, this.maxPoint), this.maxPoint = -1, t3 && (this.from = [], this.to = [], this.value = []);
  }
  /**
  Create an empty builder.
  */
  constructor() {
    this.chunks = [], this.chunkPos = [], this.chunkStart = -1, this.last = null, this.lastFrom = -1e9, this.lastTo = -1e9, this.from = [], this.to = [], this.value = [], this.maxPoint = -1, this.setMaxPoint = -1, this.nextLayer = null;
  }
  /**
  Add a range. Ranges should be added in sorted (by `from` and
  `value.startSide`) order.
  */
  add(t3, e3, i3) {
    this.addInner(t3, e3, i3) || (this.nextLayer || (this.nextLayer = new Ee2())).add(t3, e3, i3);
  }
  /**
  @internal
  */
  addInner(t3, e3, i3) {
    let s5 = t3 - this.lastTo || i3.startSide - this.last.endSide;
    if (s5 <= 0 && (t3 - this.lastFrom || i3.startSide - this.last.startSide) < 0)
      throw new Error("Ranges must be added sorted by `from` position and `startSide`");
    return s5 < 0 ? false : (this.from.length == 250 && this.finishChunk(true), this.chunkStart < 0 && (this.chunkStart = t3), this.from.push(t3 - this.chunkStart), this.to.push(e3 - this.chunkStart), this.last = i3, this.lastFrom = t3, this.lastTo = e3, this.value.push(i3), i3.point && (this.maxPoint = Math.max(this.maxPoint, e3 - t3)), true);
  }
  /**
  @internal
  */
  addChunk(t3, e3) {
    if ((t3 - this.lastTo || e3.value[0].startSide - this.last.endSide) < 0)
      return false;
    this.from.length && this.finishChunk(true), this.setMaxPoint = Math.max(this.setMaxPoint, e3.maxPoint), this.chunks.push(e3), this.chunkPos.push(t3);
    let i3 = e3.value.length - 1;
    return this.last = e3.value[i3], this.lastFrom = e3.from[i3] + t3, this.lastTo = e3.to[i3] + t3, true;
  }
  /**
  Finish the range set. Returns the new set. The builder can't be
  used anymore after this has been called.
  */
  finish() {
    return this.finishInner($$3.empty);
  }
  /**
  @internal
  */
  finishInner(t3) {
    if (this.from.length && this.finishChunk(false), this.chunks.length == 0)
      return t3;
    let e3 = $$3.create(this.chunkPos, this.chunks, this.nextLayer ? this.nextLayer.finishInner(t3) : t3, this.setMaxPoint);
    return this.from = null, e3;
  }
};
function Cr$1(n2, t3, e3) {
  let i3 = /* @__PURE__ */ new Map();
  for (let r2 of n2)
    for (let o2 = 0; o2 < r2.chunk.length; o2++)
      r2.chunk[o2].maxPoint <= 0 && i3.set(r2.chunk[o2], r2.chunkPos[o2]);
  let s5 = /* @__PURE__ */ new Set();
  for (let r2 of t3)
    for (let o2 = 0; o2 < r2.chunk.length; o2++) {
      let l2 = i3.get(r2.chunk[o2]);
      l2 != null && (e3 ? e3.mapPos(l2) : l2) == r2.chunkPos[o2] && !(e3 != null && e3.touchesRange(l2, l2 + r2.chunk[o2].length)) && s5.add(r2.chunk[o2]);
    }
  return s5;
}
let bl$1 = class bl2 {
  constructor(t3, e3, i3, s5 = 0) {
    this.layer = t3, this.skip = e3, this.minPoint = i3, this.rank = s5;
  }
  get startSide() {
    return this.value ? this.value.startSide : 0;
  }
  get endSide() {
    return this.value ? this.value.endSide : 0;
  }
  goto(t3, e3 = -1e9) {
    return this.chunkIndex = this.rangeIndex = 0, this.gotoInner(t3, e3, false), this;
  }
  gotoInner(t3, e3, i3) {
    for (; this.chunkIndex < this.layer.chunk.length; ) {
      let s5 = this.layer.chunk[this.chunkIndex];
      if (!(this.skip && this.skip.has(s5) || this.layer.chunkEnd(this.chunkIndex) < t3 || s5.maxPoint < this.minPoint))
        break;
      this.chunkIndex++, i3 = false;
    }
    if (this.chunkIndex < this.layer.chunk.length) {
      let s5 = this.layer.chunk[this.chunkIndex].findIndex(t3 - this.layer.chunkPos[this.chunkIndex], e3, true);
      (!i3 || this.rangeIndex < s5) && this.setRangeIndex(s5);
    }
    this.next();
  }
  forward(t3, e3) {
    (this.to - t3 || this.endSide - e3) < 0 && this.gotoInner(t3, e3, true);
  }
  next() {
    for (; ; )
      if (this.chunkIndex == this.layer.chunk.length) {
        this.from = this.to = 1e9, this.value = null;
        break;
      } else {
        let t3 = this.layer.chunkPos[this.chunkIndex], e3 = this.layer.chunk[this.chunkIndex], i3 = t3 + e3.from[this.rangeIndex];
        if (this.from = i3, this.to = t3 + e3.to[this.rangeIndex], this.value = e3.value[this.rangeIndex], this.setRangeIndex(this.rangeIndex + 1), this.minPoint < 0 || this.value.point && this.to - this.from >= this.minPoint)
          break;
      }
  }
  setRangeIndex(t3) {
    if (t3 == this.layer.chunk[this.chunkIndex].value.length) {
      if (this.chunkIndex++, this.skip)
        for (; this.chunkIndex < this.layer.chunk.length && this.skip.has(this.layer.chunk[this.chunkIndex]); )
          this.chunkIndex++;
      this.rangeIndex = 0;
    } else
      this.rangeIndex = t3;
  }
  nextChunk() {
    this.chunkIndex++, this.rangeIndex = 0, this.next();
  }
  compare(t3) {
    return this.from - t3.from || this.startSide - t3.startSide || this.rank - t3.rank || this.to - t3.to || this.endSide - t3.endSide;
  }
};
class wi {
  constructor(t3) {
    this.heap = t3;
  }
  static from(t3, e3 = null, i3 = -1) {
    let s5 = [];
    for (let r2 = 0; r2 < t3.length; r2++)
      for (let o2 = t3[r2]; !o2.isEmpty; o2 = o2.nextLayer)
        o2.maxPoint >= i3 && s5.push(new bl$1(o2, e3, i3, r2));
    return s5.length == 1 ? s5[0] : new wi(s5);
  }
  get startSide() {
    return this.value ? this.value.startSide : 0;
  }
  goto(t3, e3 = -1e9) {
    for (let i3 of this.heap)
      i3.goto(t3, e3);
    for (let i3 = this.heap.length >> 1; i3 >= 0; i3--)
      Hs(this.heap, i3);
    return this.next(), this;
  }
  forward(t3, e3) {
    for (let i3 of this.heap)
      i3.forward(t3, e3);
    for (let i3 = this.heap.length >> 1; i3 >= 0; i3--)
      Hs(this.heap, i3);
    (this.to - t3 || this.value.endSide - e3) < 0 && this.next();
  }
  next() {
    if (this.heap.length == 0)
      this.from = this.to = 1e9, this.value = null, this.rank = -1;
    else {
      let t3 = this.heap[0];
      this.from = t3.from, this.to = t3.to, this.value = t3.value, this.rank = t3.rank, t3.value && t3.next(), Hs(this.heap, 0);
    }
  }
}
function Hs(n2, t3) {
  for (let e3 = n2[t3]; ; ) {
    let i3 = (t3 << 1) + 1;
    if (i3 >= n2.length)
      break;
    let s5 = n2[i3];
    if (i3 + 1 < n2.length && s5.compare(n2[i3 + 1]) >= 0 && (s5 = n2[i3 + 1], i3++), e3.compare(s5) < 0)
      break;
    n2[i3] = e3, n2[t3] = s5, t3 = i3;
  }
}
class si {
  constructor(t3, e3, i3) {
    this.minPoint = i3, this.active = [], this.activeTo = [], this.activeRank = [], this.minActive = -1, this.point = null, this.pointFrom = 0, this.pointRank = 0, this.to = -1e9, this.endSide = 0, this.openStart = -1, this.cursor = wi.from(t3, e3, i3);
  }
  goto(t3, e3 = -1e9) {
    return this.cursor.goto(t3, e3), this.active.length = this.activeTo.length = this.activeRank.length = 0, this.minActive = -1, this.to = t3, this.endSide = e3, this.openStart = -1, this.next(), this;
  }
  forward(t3, e3) {
    for (; this.minActive > -1 && (this.activeTo[this.minActive] - t3 || this.active[this.minActive].endSide - e3) < 0; )
      this.removeActive(this.minActive);
    this.cursor.forward(t3, e3);
  }
  removeActive(t3) {
    Li(this.active, t3), Li(this.activeTo, t3), Li(this.activeRank, t3), this.minActive = Or$1(this.active, this.activeTo);
  }
  addActive(t3) {
    let e3 = 0, { value: i3, to: s5, rank: r2 } = this.cursor;
    for (; e3 < this.activeRank.length && this.activeRank[e3] <= r2; )
      e3++;
    Ei(this.active, e3, i3), Ei(this.activeTo, e3, s5), Ei(this.activeRank, e3, r2), t3 && Ei(t3, e3, this.cursor.from), this.minActive = Or$1(this.active, this.activeTo);
  }
  // After calling this, if `this.point` != null, the next range is a
  // point. Otherwise, it's a regular range, covered by `this.active`.
  next() {
    let t3 = this.to, e3 = this.point;
    this.point = null;
    let i3 = this.openStart < 0 ? [] : null;
    for (; ; ) {
      let s5 = this.minActive;
      if (s5 > -1 && (this.activeTo[s5] - this.cursor.from || this.active[s5].endSide - this.cursor.startSide) < 0) {
        if (this.activeTo[s5] > t3) {
          this.to = this.activeTo[s5], this.endSide = this.active[s5].endSide;
          break;
        }
        this.removeActive(s5), i3 && Li(i3, s5);
      } else if (this.cursor.value)
        if (this.cursor.from > t3) {
          this.to = this.cursor.from, this.endSide = this.cursor.startSide;
          break;
        } else {
          let r2 = this.cursor.value;
          if (!r2.point)
            this.addActive(i3), this.cursor.next();
          else if (e3 && this.cursor.to == this.to && this.cursor.from < this.cursor.to)
            this.cursor.next();
          else {
            this.point = r2, this.pointFrom = this.cursor.from, this.pointRank = this.cursor.rank, this.to = this.cursor.to, this.endSide = r2.endSide, this.cursor.next(), this.forward(this.to, this.endSide);
            break;
          }
        }
      else {
        this.to = this.endSide = 1e9;
        break;
      }
    }
    if (i3) {
      this.openStart = 0;
      for (let s5 = i3.length - 1; s5 >= 0 && i3[s5] < t3; s5--)
        this.openStart++;
    }
  }
  activeForPoint(t3) {
    if (!this.active.length)
      return this.active;
    let e3 = [];
    for (let i3 = this.active.length - 1; i3 >= 0 && !(this.activeRank[i3] < this.pointRank); i3--)
      (this.activeTo[i3] > t3 || this.activeTo[i3] == t3 && this.active[i3].endSide >= this.point.endSide) && e3.push(this.active[i3]);
    return e3.reverse();
  }
  openEnd(t3) {
    let e3 = 0;
    for (let i3 = this.activeTo.length - 1; i3 >= 0 && this.activeTo[i3] > t3; i3--)
      e3++;
    return e3;
  }
}
function Ar$1(n2, t3, e3, i3, s5, r2) {
  n2.goto(t3), e3.goto(i3);
  let o2 = i3 + s5, l2 = i3, h4 = i3 - t3;
  for (; ; ) {
    let a4 = n2.to + h4 - e3.to || n2.endSide - e3.endSide, c3 = a4 < 0 ? n2.to + h4 : e3.to, f2 = Math.min(c3, o2);
    if (n2.point || e3.point ? n2.point && e3.point && (n2.point == e3.point || n2.point.eq(e3.point)) && pn$1(n2.activeForPoint(n2.to), e3.activeForPoint(e3.to)) || r2.comparePoint(l2, f2, n2.point, e3.point) : f2 > l2 && !pn$1(n2.active, e3.active) && r2.compareRange(l2, f2, n2.active, e3.active), c3 > o2)
      break;
    l2 = c3, a4 <= 0 && n2.next(), a4 >= 0 && e3.next();
  }
}
function pn$1(n2, t3) {
  if (n2.length != t3.length)
    return false;
  for (let e3 = 0; e3 < n2.length; e3++)
    if (n2[e3] != t3[e3] && !n2[e3].eq(t3[e3]))
      return false;
  return true;
}
function Li(n2, t3) {
  for (let e3 = t3, i3 = n2.length - 1; e3 < i3; e3++)
    n2[e3] = n2[e3 + 1];
  n2.pop();
}
function Ei(n2, t3, e3) {
  for (let i3 = n2.length - 1; i3 >= t3; i3--)
    n2[i3 + 1] = n2[i3];
  n2[t3] = e3;
}
function Or$1(n2, t3) {
  let e3 = -1, i3 = 1e9;
  for (let s5 = 0; s5 < t3.length; s5++)
    (t3[s5] - i3 || n2[s5].endSide - n2[e3].endSide) < 0 && (e3 = s5, i3 = t3[s5]);
  return e3;
}
function Oi(n2, t3, e3 = n2.length) {
  let i3 = 0;
  for (let s5 = 0; s5 < e3; )
    n2.charCodeAt(s5) == 9 ? (i3 += t3 - i3 % t3, s5++) : (i3++, s5 = wt$2(n2, s5));
  return i3;
}
function Qc(n2, t3, e3, i3) {
  for (let s5 = 0, r2 = 0; ; ) {
    if (r2 >= t3)
      return s5;
    if (s5 == n2.length)
      break;
    r2 += n2.charCodeAt(s5) == 9 ? e3 - r2 % e3 : 1, s5 = wt$2(n2, s5);
  }
  return i3 === true ? -1 : n2.length;
}
const gn$1 = "ͼ", Mr$1 = typeof Symbol > "u" ? "__" + gn$1 : Symbol.for(gn$1), mn$1 = typeof Symbol > "u" ? "__styleSet" + Math.floor(Math.random() * 1e8) : Symbol("styleSet"), Tr$1 = typeof globalThis < "u" ? globalThis : typeof window < "u" ? window : {};
class we {
  // :: (Object<Style>, ?{finish: ?(string) → string})
  // Create a style module from the given spec.
  //
  // When `finish` is given, it is called on regular (non-`@`)
  // selectors (after `&` expansion) to compute the final selector.
  constructor(t3, e3) {
    this.rules = [];
    let { finish: i3 } = e3 || {};
    function s5(o2) {
      return /^@/.test(o2) ? [o2] : o2.split(/,\s*/);
    }
    function r2(o2, l2, h4, a4) {
      let c3 = [], f2 = /^@(\w+)\b/.exec(o2[0]), u3 = f2 && f2[1] == "keyframes";
      if (f2 && l2 == null)
        return h4.push(o2[0] + ";");
      for (let d4 in l2) {
        let p2 = l2[d4];
        if (/&/.test(d4))
          r2(
            d4.split(/,\s*/).map((m4) => o2.map((g2) => m4.replace(/&/, g2))).reduce((m4, g2) => m4.concat(g2)),
            p2,
            h4
          );
        else if (p2 && typeof p2 == "object") {
          if (!f2)
            throw new RangeError("The value of a property (" + d4 + ") should be a primitive value.");
          r2(s5(d4), p2, c3, u3);
        } else
          p2 != null && c3.push(d4.replace(/_.*/, "").replace(/[A-Z]/g, (m4) => "-" + m4.toLowerCase()) + ": " + p2 + ";");
      }
      (c3.length || u3) && h4.push((i3 && !f2 && !a4 ? o2.map(i3) : o2).join(", ") + " {" + c3.join(" ") + "}");
    }
    for (let o2 in t3)
      r2(s5(o2), t3[o2], this.rules);
  }
  // :: () → string
  // Returns a string containing the module's CSS rules.
  getRules() {
    return this.rules.join(`
`);
  }
  // :: () → string
  // Generate a new unique CSS class name.
  static newName() {
    let t3 = Tr$1[Mr$1] || 1;
    return Tr$1[Mr$1] = t3 + 1, gn$1 + t3.toString(36);
  }
  // :: (union<Document, ShadowRoot>, union<[StyleModule], StyleModule>, ?{nonce: ?string})
  //
  // Mount the given set of modules in the given DOM root, which ensures
  // that the CSS rules defined by the module are available in that
  // context.
  //
  // Rules are only added to the document once per root.
  //
  // Rule order will follow the order of the modules, so that rules from
  // modules later in the array take precedence of those from earlier
  // modules. If you call this function multiple times for the same root
  // in a way that changes the order of already mounted modules, the old
  // order will be changed.
  //
  // If a Content Security Policy nonce is provided, it is added to
  // the `<style>` tag generated by the library.
  static mount(t3, e3, i3) {
    let s5 = t3[mn$1], r2 = i3 && i3.nonce;
    s5 ? r2 && s5.setNonce(r2) : s5 = new Jc(t3, r2), s5.mount(Array.isArray(e3) ? e3 : [e3]);
  }
}
let Dr$1 = /* @__PURE__ */ new Map();
class Jc {
  constructor(t3, e3) {
    let i3 = t3.ownerDocument || t3, s5 = i3.defaultView;
    if (!t3.head && t3.adoptedStyleSheets && s5.CSSStyleSheet) {
      let r2 = Dr$1.get(i3);
      if (r2)
        return t3.adoptedStyleSheets = [r2.sheet, ...t3.adoptedStyleSheets], t3[mn$1] = r2;
      this.sheet = new s5.CSSStyleSheet(), t3.adoptedStyleSheets = [this.sheet, ...t3.adoptedStyleSheets], Dr$1.set(i3, this);
    } else {
      this.styleTag = i3.createElement("style"), e3 && this.styleTag.setAttribute("nonce", e3);
      let r2 = t3.head || t3;
      r2.insertBefore(this.styleTag, r2.firstChild);
    }
    this.modules = [], t3[mn$1] = this;
  }
  mount(t3) {
    let e3 = this.sheet, i3 = 0, s5 = 0;
    for (let r2 = 0; r2 < t3.length; r2++) {
      let o2 = t3[r2], l2 = this.modules.indexOf(o2);
      if (l2 < s5 && l2 > -1 && (this.modules.splice(l2, 1), s5--, l2 = -1), l2 == -1) {
        if (this.modules.splice(s5++, 0, o2), e3)
          for (let h4 = 0; h4 < o2.rules.length; h4++)
            e3.insertRule(o2.rules[h4], i3++);
      } else {
        for (; s5 < l2; )
          i3 += this.modules[s5++].rules.length;
        i3 += o2.rules.length, s5++;
      }
    }
    if (!e3) {
      let r2 = "";
      for (let o2 = 0; o2 < this.modules.length; o2++)
        r2 += this.modules[o2].getRules() + `
`;
      this.styleTag.textContent = r2;
    }
  }
  setNonce(t3) {
    this.styleTag && this.styleTag.getAttribute("nonce") != t3 && this.styleTag.setAttribute("nonce", t3);
  }
}
var ye$2 = {
  8: "Backspace",
  9: "Tab",
  10: "Enter",
  12: "NumLock",
  13: "Enter",
  16: "Shift",
  17: "Control",
  18: "Alt",
  20: "CapsLock",
  27: "Escape",
  32: " ",
  33: "PageUp",
  34: "PageDown",
  35: "End",
  36: "Home",
  37: "ArrowLeft",
  38: "ArrowUp",
  39: "ArrowRight",
  40: "ArrowDown",
  44: "PrintScreen",
  45: "Insert",
  46: "Delete",
  59: ";",
  61: "=",
  91: "Meta",
  92: "Meta",
  106: "*",
  107: "+",
  108: ",",
  109: "-",
  110: ".",
  111: "/",
  144: "NumLock",
  145: "ScrollLock",
  160: "Shift",
  161: "Shift",
  162: "Control",
  163: "Control",
  164: "Alt",
  165: "Alt",
  173: "-",
  186: ";",
  187: "=",
  188: ",",
  189: "-",
  190: ".",
  191: "/",
  192: "`",
  219: "[",
  220: "\\",
  221: "]",
  222: "'"
}, yi = {
  48: ")",
  49: "!",
  50: "@",
  51: "#",
  52: "$",
  53: "%",
  54: "^",
  55: "&",
  56: "*",
  57: "(",
  59: ":",
  61: "+",
  173: "_",
  186: ":",
  187: "+",
  188: "<",
  189: "_",
  190: ">",
  191: "?",
  192: "~",
  219: "{",
  220: "|",
  221: "}",
  222: '"'
}, Xc = typeof navigator < "u" && /Mac/.test(navigator.platform), Zc = typeof navigator < "u" && /MSIE \d|Trident\/(?:[7-9]|\d{2,})\..*rv:(\d+)/.exec(navigator.userAgent);
for (var lt$1 = 0; lt$1 < 10; lt$1++)
  ye$2[48 + lt$1] = ye$2[96 + lt$1] = String(lt$1);
for (var lt$1 = 1; lt$1 <= 24; lt$1++)
  ye$2[lt$1 + 111] = "F" + lt$1;
for (var lt$1 = 65; lt$1 <= 90; lt$1++)
  ye$2[lt$1] = String.fromCharCode(lt$1 + 32), yi[lt$1] = String.fromCharCode(lt$1);
for (var _s in ye$2)
  yi.hasOwnProperty(_s) || (yi[_s] = ye$2[_s]);
function tf(n2) {
  var t3 = Xc && n2.metaKey && n2.shiftKey && !n2.ctrlKey && !n2.altKey || Zc && n2.shiftKey && n2.key && n2.key.length == 1 || n2.key == "Unidentified", e3 = !t3 && n2.key || (n2.shiftKey ? yi : ye$2)[n2.keyCode] || n2.key || "Unidentified";
  return e3 == "Esc" && (e3 = "Escape"), e3 == "Del" && (e3 = "Delete"), e3 == "Left" && (e3 = "ArrowLeft"), e3 == "Up" && (e3 = "ArrowUp"), e3 == "Right" && (e3 = "ArrowRight"), e3 == "Down" && (e3 = "ArrowDown"), e3;
}
function us(n2) {
  let t3;
  return n2.nodeType == 11 ? t3 = n2.getSelection ? n2 : n2.ownerDocument : t3 = n2, t3.getSelection();
}
function wn$1(n2, t3) {
  return t3 ? n2 == t3 || n2.contains(t3.nodeType != 1 ? t3.parentNode : t3) : false;
}
function ef(n2) {
  let t3 = n2.activeElement;
  for (; t3 && t3.shadowRoot; )
    t3 = t3.shadowRoot.activeElement;
  return t3;
}
function ts(n2, t3) {
  if (!t3.anchorNode)
    return false;
  try {
    return wn$1(n2, t3.anchorNode);
  } catch {
    return false;
  }
}
function bi(n2) {
  return n2.nodeType == 3 ? Ne$1(n2, 0, n2.nodeValue.length).getClientRects() : n2.nodeType == 1 ? n2.getClientRects() : [];
}
function ds(n2, t3, e3, i3) {
  return e3 ? Pr$1(n2, t3, e3, i3, -1) || Pr$1(n2, t3, e3, i3, 1) : false;
}
function ki(n2) {
  for (var t3 = 0; ; t3++)
    if (n2 = n2.previousSibling, !n2)
      return t3;
}
function Pr$1(n2, t3, e3, i3, s5) {
  for (; ; ) {
    if (n2 == e3 && t3 == i3)
      return true;
    if (t3 == (s5 < 0 ? 0 : ne$1(n2))) {
      if (n2.nodeName == "DIV")
        return false;
      let r2 = n2.parentNode;
      if (!r2 || r2.nodeType != 1)
        return false;
      t3 = ki(n2) + (s5 < 0 ? 0 : 1), n2 = r2;
    } else if (n2.nodeType == 1) {
      if (n2 = n2.childNodes[t3 + (s5 < 0 ? -1 : 0)], n2.nodeType == 1 && n2.contentEditable == "false")
        return false;
      t3 = s5 < 0 ? ne$1(n2) : 0;
    } else
      return false;
  }
}
function ne$1(n2) {
  return n2.nodeType == 3 ? n2.nodeValue.length : n2.childNodes.length;
}
function Xn(n2, t3) {
  let e3 = t3 ? n2.left : n2.right;
  return { left: e3, right: e3, top: n2.top, bottom: n2.bottom };
}
function sf(n2) {
  return {
    left: 0,
    right: n2.innerWidth,
    top: 0,
    bottom: n2.innerHeight
  };
}
function nf(n2, t3, e3, i3, s5, r2, o2, l2) {
  let h4 = n2.ownerDocument, a4 = h4.defaultView || window;
  for (let c3 = n2, f2 = false; c3 && !f2; )
    if (c3.nodeType == 1) {
      let u3, d4 = c3 == h4.body, p2 = 1, m4 = 1;
      if (d4)
        u3 = sf(a4);
      else {
        if (/^(fixed|sticky)$/.test(getComputedStyle(c3).position) && (f2 = true), c3.scrollHeight <= c3.clientHeight && c3.scrollWidth <= c3.clientWidth) {
          c3 = c3.assignedSlot || c3.parentNode;
          continue;
        }
        let x3 = c3.getBoundingClientRect();
        p2 = x3.width / c3.offsetWidth, m4 = x3.height / c3.offsetHeight, u3 = {
          left: x3.left,
          right: x3.left + c3.clientWidth * p2,
          top: x3.top,
          bottom: x3.top + c3.clientHeight * m4
        };
      }
      let g2 = 0, y4 = 0;
      if (s5 == "nearest")
        t3.top < u3.top ? (y4 = -(u3.top - t3.top + o2), e3 > 0 && t3.bottom > u3.bottom + y4 && (y4 = t3.bottom - u3.bottom + y4 + o2)) : t3.bottom > u3.bottom && (y4 = t3.bottom - u3.bottom + o2, e3 < 0 && t3.top - y4 < u3.top && (y4 = -(u3.top + y4 - t3.top + o2)));
      else {
        let x3 = t3.bottom - t3.top, S4 = u3.bottom - u3.top;
        y4 = (s5 == "center" && x3 <= S4 ? t3.top + x3 / 2 - S4 / 2 : s5 == "start" || s5 == "center" && e3 < 0 ? t3.top - o2 : t3.bottom - S4 + o2) - u3.top;
      }
      if (i3 == "nearest" ? t3.left < u3.left ? (g2 = -(u3.left - t3.left + r2), e3 > 0 && t3.right > u3.right + g2 && (g2 = t3.right - u3.right + g2 + r2)) : t3.right > u3.right && (g2 = t3.right - u3.right + r2, e3 < 0 && t3.left < u3.left + g2 && (g2 = -(u3.left + g2 - t3.left + r2))) : g2 = (i3 == "center" ? t3.left + (t3.right - t3.left) / 2 - (u3.right - u3.left) / 2 : i3 == "start" == l2 ? t3.left - r2 : t3.right - (u3.right - u3.left) + r2) - u3.left, g2 || y4)
        if (d4)
          a4.scrollBy(g2, y4);
        else {
          let x3 = 0, S4 = 0;
          if (y4) {
            let v2 = c3.scrollTop;
            c3.scrollTop += y4 / m4, S4 = (c3.scrollTop - v2) * m4;
          }
          if (g2) {
            let v2 = c3.scrollLeft;
            c3.scrollLeft += g2 / p2, x3 = (c3.scrollLeft - v2) * p2;
          }
          t3 = {
            left: t3.left - x3,
            top: t3.top - S4,
            right: t3.right - x3,
            bottom: t3.bottom - S4
          }, x3 && Math.abs(x3 - g2) < 1 && (i3 = "nearest"), S4 && Math.abs(S4 - y4) < 1 && (s5 = "nearest");
        }
      if (d4)
        break;
      c3 = c3.assignedSlot || c3.parentNode;
    } else if (c3.nodeType == 11)
      c3 = c3.host;
    else
      break;
}
function rf(n2) {
  let t3 = n2.ownerDocument;
  for (let e3 = n2.parentNode; e3 && e3 != t3.body; )
    if (e3.nodeType == 1) {
      if (e3.scrollHeight > e3.clientHeight || e3.scrollWidth > e3.clientWidth)
        return e3;
      e3 = e3.assignedSlot || e3.parentNode;
    } else if (e3.nodeType == 11)
      e3 = e3.host;
    else
      break;
  return null;
}
class of {
  constructor() {
    this.anchorNode = null, this.anchorOffset = 0, this.focusNode = null, this.focusOffset = 0;
  }
  eq(t3) {
    return this.anchorNode == t3.anchorNode && this.anchorOffset == t3.anchorOffset && this.focusNode == t3.focusNode && this.focusOffset == t3.focusOffset;
  }
  setRange(t3) {
    let { anchorNode: e3, focusNode: i3 } = t3;
    this.set(e3, Math.min(t3.anchorOffset, e3 ? ne$1(e3) : 0), i3, Math.min(t3.focusOffset, i3 ? ne$1(i3) : 0));
  }
  set(t3, e3, i3, s5) {
    this.anchorNode = t3, this.anchorOffset = e3, this.focusNode = i3, this.focusOffset = s5;
  }
}
let Fe$3 = null;
function kl$1(n2) {
  if (n2.setActive)
    return n2.setActive();
  if (Fe$3)
    return n2.focus(Fe$3);
  let t3 = [];
  for (let e3 = n2; e3 && (t3.push(e3, e3.scrollTop, e3.scrollLeft), e3 != e3.ownerDocument); e3 = e3.parentNode)
    ;
  if (n2.focus(Fe$3 == null ? {
    get preventScroll() {
      return Fe$3 = { preventScroll: true }, true;
    }
  } : void 0), !Fe$3) {
    Fe$3 = false;
    for (let e3 = 0; e3 < t3.length; ) {
      let i3 = t3[e3++], s5 = t3[e3++], r2 = t3[e3++];
      i3.scrollTop != s5 && (i3.scrollTop = s5), i3.scrollLeft != r2 && (i3.scrollLeft = r2);
    }
  }
}
let Br$1;
function Ne$1(n2, t3, e3 = t3) {
  let i3 = Br$1 || (Br$1 = document.createRange());
  return i3.setEnd(n2, e3), i3.setStart(n2, t3), i3;
}
function Ke$1(n2, t3, e3) {
  let i3 = { key: t3, code: t3, keyCode: e3, which: e3, cancelable: true }, s5 = new KeyboardEvent("keydown", i3);
  s5.synthetic = true, n2.dispatchEvent(s5);
  let r2 = new KeyboardEvent("keyup", i3);
  return r2.synthetic = true, n2.dispatchEvent(r2), s5.defaultPrevented || r2.defaultPrevented;
}
function lf(n2) {
  for (; n2; ) {
    if (n2 && (n2.nodeType == 9 || n2.nodeType == 11 && n2.host))
      return n2;
    n2 = n2.assignedSlot || n2.parentNode;
  }
  return null;
}
function xl$1(n2) {
  for (; n2.attributes.length; )
    n2.removeAttributeNode(n2.attributes[0]);
}
function hf(n2, t3) {
  let e3 = t3.focusNode, i3 = t3.focusOffset;
  if (!e3 || t3.anchorNode != e3 || t3.anchorOffset != i3)
    return false;
  for (i3 = Math.min(i3, ne$1(e3)); ; )
    if (i3) {
      if (e3.nodeType != 1)
        return false;
      let s5 = e3.childNodes[i3 - 1];
      s5.contentEditable == "false" ? i3-- : (e3 = s5, i3 = ne$1(e3));
    } else {
      if (e3 == n2)
        return true;
      i3 = ki(e3), e3 = e3.parentNode;
    }
}
function vl$1(n2) {
  return n2.scrollTop > Math.max(1, n2.scrollHeight - n2.clientHeight - 4);
}
let ct$1 = class ct2 {
  constructor(t3, e3, i3 = true) {
    this.node = t3, this.offset = e3, this.precise = i3;
  }
  static before(t3, e3) {
    return new ct2(t3.parentNode, ki(t3), e3);
  }
  static after(t3, e3) {
    return new ct2(t3.parentNode, ki(t3) + 1, e3);
  }
};
const Zn = [];
class q {
  constructor() {
    this.parent = null, this.dom = null, this.flags = 2;
  }
  get overrideDOMText() {
    return null;
  }
  get posAtStart() {
    return this.parent ? this.parent.posBefore(this) : 0;
  }
  get posAtEnd() {
    return this.posAtStart + this.length;
  }
  posBefore(t3) {
    let e3 = this.posAtStart;
    for (let i3 of this.children) {
      if (i3 == t3)
        return e3;
      e3 += i3.length + i3.breakAfter;
    }
    throw new RangeError("Invalid child in posBefore");
  }
  posAfter(t3) {
    return this.posBefore(t3) + t3.length;
  }
  sync(t3, e3) {
    if (this.flags & 2) {
      let i3 = this.dom, s5 = null, r2;
      for (let o2 of this.children) {
        if (o2.flags & 7) {
          if (!o2.dom && (r2 = s5 ? s5.nextSibling : i3.firstChild)) {
            let l2 = q.get(r2);
            (!l2 || !l2.parent && l2.canReuseDOM(o2)) && o2.reuseDOM(r2);
          }
          o2.sync(t3, e3), o2.flags &= -8;
        }
        if (r2 = s5 ? s5.nextSibling : i3.firstChild, e3 && !e3.written && e3.node == i3 && r2 != o2.dom && (e3.written = true), o2.dom.parentNode == i3)
          for (; r2 && r2 != o2.dom; )
            r2 = Rr$1(r2);
        else
          i3.insertBefore(o2.dom, r2);
        s5 = o2.dom;
      }
      for (r2 = s5 ? s5.nextSibling : i3.firstChild, r2 && e3 && e3.node == i3 && (e3.written = true); r2; )
        r2 = Rr$1(r2);
    } else if (this.flags & 1)
      for (let i3 of this.children)
        i3.flags & 7 && (i3.sync(t3, e3), i3.flags &= -8);
  }
  reuseDOM(t3) {
  }
  localPosFromDOM(t3, e3) {
    let i3;
    if (t3 == this.dom)
      i3 = this.dom.childNodes[e3];
    else {
      let s5 = ne$1(t3) == 0 ? 0 : e3 == 0 ? -1 : 1;
      for (; ; ) {
        let r2 = t3.parentNode;
        if (r2 == this.dom)
          break;
        s5 == 0 && r2.firstChild != r2.lastChild && (t3 == r2.firstChild ? s5 = -1 : s5 = 1), t3 = r2;
      }
      s5 < 0 ? i3 = t3 : i3 = t3.nextSibling;
    }
    if (i3 == this.dom.firstChild)
      return 0;
    for (; i3 && !q.get(i3); )
      i3 = i3.nextSibling;
    if (!i3)
      return this.length;
    for (let s5 = 0, r2 = 0; ; s5++) {
      let o2 = this.children[s5];
      if (o2.dom == i3)
        return r2;
      r2 += o2.length + o2.breakAfter;
    }
  }
  domBoundsAround(t3, e3, i3 = 0) {
    let s5 = -1, r2 = -1, o2 = -1, l2 = -1;
    for (let h4 = 0, a4 = i3, c3 = i3; h4 < this.children.length; h4++) {
      let f2 = this.children[h4], u3 = a4 + f2.length;
      if (a4 < t3 && u3 > e3)
        return f2.domBoundsAround(t3, e3, a4);
      if (u3 >= t3 && s5 == -1 && (s5 = h4, r2 = a4), a4 > e3 && f2.dom.parentNode == this.dom) {
        o2 = h4, l2 = c3;
        break;
      }
      c3 = u3, a4 = u3 + f2.breakAfter;
    }
    return {
      from: r2,
      to: l2 < 0 ? i3 + this.length : l2,
      startDOM: (s5 ? this.children[s5 - 1].dom.nextSibling : null) || this.dom.firstChild,
      endDOM: o2 < this.children.length && o2 >= 0 ? this.children[o2].dom : null
    };
  }
  markDirty(t3 = false) {
    this.flags |= 2, this.markParentsDirty(t3);
  }
  markParentsDirty(t3) {
    for (let e3 = this.parent; e3; e3 = e3.parent) {
      if (t3 && (e3.flags |= 2), e3.flags & 1)
        return;
      e3.flags |= 1, t3 = false;
    }
  }
  setParent(t3) {
    this.parent != t3 && (this.parent = t3, this.flags & 7 && this.markParentsDirty(true));
  }
  setDOM(t3) {
    this.dom != t3 && (this.dom && (this.dom.cmView = null), this.dom = t3, t3.cmView = this);
  }
  get rootView() {
    for (let t3 = this; ; ) {
      let e3 = t3.parent;
      if (!e3)
        return t3;
      t3 = e3;
    }
  }
  replaceChildren(t3, e3, i3 = Zn) {
    this.markDirty();
    for (let s5 = t3; s5 < e3; s5++) {
      let r2 = this.children[s5];
      r2.parent == this && r2.destroy();
    }
    this.children.splice(t3, e3 - t3, ...i3);
    for (let s5 = 0; s5 < i3.length; s5++)
      i3[s5].setParent(this);
  }
  ignoreMutation(t3) {
    return false;
  }
  ignoreEvent(t3) {
    return false;
  }
  childCursor(t3 = this.length) {
    return new Sl$1(this.children, t3, this.children.length);
  }
  childPos(t3, e3 = 1) {
    return this.childCursor().findPos(t3, e3);
  }
  toString() {
    let t3 = this.constructor.name.replace("View", "");
    return t3 + (this.children.length ? "(" + this.children.join() + ")" : this.length ? "[" + (t3 == "Text" ? this.text : this.length) + "]" : "") + (this.breakAfter ? "#" : "");
  }
  static get(t3) {
    return t3.cmView;
  }
  get isEditable() {
    return true;
  }
  get isWidget() {
    return false;
  }
  get isHidden() {
    return false;
  }
  merge(t3, e3, i3, s5, r2, o2) {
    return false;
  }
  become(t3) {
    return false;
  }
  canReuseDOM(t3) {
    return t3.constructor == this.constructor && !((this.flags | t3.flags) & 8);
  }
  // When this is a zero-length view with a side, this should return a
  // number <= 0 to indicate it is before its position, or a
  // number > 0 when after its position.
  getSide() {
    return 0;
  }
  destroy() {
    this.parent = null;
  }
}
q.prototype.breakAfter = 0;
function Rr$1(n2) {
  let t3 = n2.nextSibling;
  return n2.parentNode.removeChild(n2), t3;
}
let Sl$1 = class Sl2 {
  constructor(t3, e3, i3) {
    this.children = t3, this.pos = e3, this.i = i3, this.off = 0;
  }
  findPos(t3, e3 = 1) {
    for (; ; ) {
      if (t3 > this.pos || t3 == this.pos && (e3 > 0 || this.i == 0 || this.children[this.i - 1].breakAfter))
        return this.off = t3 - this.pos, this;
      let i3 = this.children[--this.i];
      this.pos -= i3.length + i3.breakAfter;
    }
  }
};
function Cl$1(n2, t3, e3, i3, s5, r2, o2, l2, h4) {
  let { children: a4 } = n2, c3 = a4.length ? a4[t3] : null, f2 = r2.length ? r2[r2.length - 1] : null, u3 = f2 ? f2.breakAfter : o2;
  if (!(t3 == i3 && c3 && !o2 && !u3 && r2.length < 2 && c3.merge(e3, s5, r2.length ? f2 : null, e3 == 0, l2, h4))) {
    if (i3 < a4.length) {
      let d4 = a4[i3];
      d4 && (s5 < d4.length || d4.breakAfter && (f2 != null && f2.breakAfter)) ? (t3 == i3 && (d4 = d4.split(s5), s5 = 0), !u3 && f2 && d4.merge(0, s5, f2, true, 0, h4) ? r2[r2.length - 1] = d4 : ((s5 || d4.children.length && !d4.children[0].length) && d4.merge(0, s5, null, false, 0, h4), r2.push(d4))) : d4 != null && d4.breakAfter && (f2 ? f2.breakAfter = 1 : o2 = 1), i3++;
    }
    for (c3 && (c3.breakAfter = o2, e3 > 0 && (!o2 && r2.length && c3.merge(e3, c3.length, r2[0], false, l2, 0) ? c3.breakAfter = r2.shift().breakAfter : (e3 < c3.length || c3.children.length && c3.children[c3.children.length - 1].length == 0) && c3.merge(e3, c3.length, null, false, l2, 0), t3++)); t3 < i3 && r2.length; )
      if (a4[i3 - 1].become(r2[r2.length - 1]))
        i3--, r2.pop(), h4 = r2.length ? 0 : l2;
      else if (a4[t3].become(r2[0]))
        t3++, r2.shift(), l2 = r2.length ? 0 : h4;
      else
        break;
    !r2.length && t3 && i3 < a4.length && !a4[t3 - 1].breakAfter && a4[i3].merge(0, 0, a4[t3 - 1], false, l2, h4) && t3--, (t3 < i3 || r2.length) && n2.replaceChildren(t3, i3, r2);
  }
}
function Al$1(n2, t3, e3, i3, s5, r2) {
  let o2 = n2.childCursor(), { i: l2, off: h4 } = o2.findPos(e3, 1), { i: a4, off: c3 } = o2.findPos(t3, -1), f2 = t3 - e3;
  for (let u3 of i3)
    f2 += u3.length;
  n2.length += f2, Cl$1(n2, a4, c3, l2, h4, i3, 0, s5, r2);
}
let vt$2 = typeof navigator < "u" ? navigator : { userAgent: "", vendor: "", platform: "" }, yn$1 = typeof document < "u" ? document : { documentElement: { style: {} } };
const bn$1 = /* @__PURE__ */ /Edge\/(\d+)/.exec(vt$2.userAgent), Ol$1 = /* @__PURE__ */ /MSIE \d/.test(vt$2.userAgent), kn$1 = /* @__PURE__ */ /Trident\/(?:[7-9]|\d{2,})\..*rv:(\d+)/.exec(vt$2.userAgent), Ps = !!(Ol$1 || kn$1 || bn$1), Lr$1 = !Ps && /* @__PURE__ */ /gecko\/(\d+)/i.test(vt$2.userAgent), $s = !Ps && /* @__PURE__ */ /Chrome\/(\d+)/.exec(vt$2.userAgent), Er$1 = "webkitFontSmoothing" in yn$1.documentElement.style, Ml$1 = !Ps && /* @__PURE__ */ /Apple Computer/.test(vt$2.vendor), Nr$1 = Ml$1 && (/* @__PURE__ */ /Mobile\/\w+/.test(vt$2.userAgent) || vt$2.maxTouchPoints > 2);
var C$2 = {
  mac: Nr$1 || /* @__PURE__ */ /Mac/.test(vt$2.platform),
  windows: /* @__PURE__ */ /Win/.test(vt$2.platform),
  linux: /* @__PURE__ */ /Linux|X11/.test(vt$2.platform),
  ie: Ps,
  ie_version: Ol$1 ? yn$1.documentMode || 6 : kn$1 ? +kn$1[1] : bn$1 ? +bn$1[1] : 0,
  gecko: Lr$1,
  gecko_version: Lr$1 ? +(/* @__PURE__ */ /Firefox\/(\d+)/.exec(vt$2.userAgent) || [0, 0])[1] : 0,
  chrome: !!$s,
  chrome_version: $s ? +$s[1] : 0,
  ios: Nr$1,
  android: /* @__PURE__ */ /Android\b/.test(vt$2.userAgent),
  webkit: Er$1,
  safari: Ml$1,
  webkit_version: Er$1 ? +(/* @__PURE__ */ /\bAppleWebKit\/(\d+)/.exec(navigator.userAgent) || [0, 0])[1] : 0,
  tabSize: yn$1.documentElement.style.tabSize != null ? "tab-size" : "-moz-tab-size"
};
const af = 256;
let re$2 = class re2 extends q {
  constructor(t3) {
    super(), this.text = t3;
  }
  get length() {
    return this.text.length;
  }
  createDOM(t3) {
    this.setDOM(t3 || document.createTextNode(this.text));
  }
  sync(t3, e3) {
    this.dom || this.createDOM(), this.dom.nodeValue != this.text && (e3 && e3.node == this.dom && (e3.written = true), this.dom.nodeValue = this.text);
  }
  reuseDOM(t3) {
    t3.nodeType == 3 && this.createDOM(t3);
  }
  merge(t3, e3, i3) {
    return this.flags & 8 || i3 && (!(i3 instanceof re2) || this.length - (e3 - t3) + i3.length > af || i3.flags & 8) ? false : (this.text = this.text.slice(0, t3) + (i3 ? i3.text : "") + this.text.slice(e3), this.markDirty(), true);
  }
  split(t3) {
    let e3 = new re2(this.text.slice(t3));
    return this.text = this.text.slice(0, t3), this.markDirty(), e3.flags |= this.flags & 8, e3;
  }
  localPosFromDOM(t3, e3) {
    return t3 == this.dom ? e3 : e3 ? this.text.length : 0;
  }
  domAtPos(t3) {
    return new ct$1(this.dom, t3);
  }
  domBoundsAround(t3, e3, i3) {
    return { from: i3, to: i3 + this.length, startDOM: this.dom, endDOM: this.dom.nextSibling };
  }
  coordsAt(t3, e3) {
    return cf(this.dom, t3, e3);
  }
};
let oe$1 = class oe2 extends q {
  constructor(t3, e3 = [], i3 = 0) {
    super(), this.mark = t3, this.children = e3, this.length = i3;
    for (let s5 of e3)
      s5.setParent(this);
  }
  setAttrs(t3) {
    if (xl$1(t3), this.mark.class && (t3.className = this.mark.class), this.mark.attrs)
      for (let e3 in this.mark.attrs)
        t3.setAttribute(e3, this.mark.attrs[e3]);
    return t3;
  }
  canReuseDOM(t3) {
    return super.canReuseDOM(t3) && !((this.flags | t3.flags) & 8);
  }
  reuseDOM(t3) {
    t3.nodeName == this.mark.tagName.toUpperCase() && (this.setDOM(t3), this.flags |= 6);
  }
  sync(t3, e3) {
    this.dom ? this.flags & 4 && this.setAttrs(this.dom) : this.setDOM(this.setAttrs(document.createElement(this.mark.tagName))), super.sync(t3, e3);
  }
  merge(t3, e3, i3, s5, r2, o2) {
    return i3 && (!(i3 instanceof oe2 && i3.mark.eq(this.mark)) || t3 && r2 <= 0 || e3 < this.length && o2 <= 0) ? false : (Al$1(this, t3, e3, i3 ? i3.children : [], r2 - 1, o2 - 1), this.markDirty(), true);
  }
  split(t3) {
    let e3 = [], i3 = 0, s5 = -1, r2 = 0;
    for (let l2 of this.children) {
      let h4 = i3 + l2.length;
      h4 > t3 && e3.push(i3 < t3 ? l2.split(t3 - i3) : l2), s5 < 0 && i3 >= t3 && (s5 = r2), i3 = h4, r2++;
    }
    let o2 = this.length - t3;
    return this.length = t3, s5 > -1 && (this.children.length = s5, this.markDirty()), new oe2(this.mark, e3, o2);
  }
  domAtPos(t3) {
    return Tl$1(this, t3);
  }
  coordsAt(t3, e3) {
    return Pl$1(this, t3, e3);
  }
};
function cf(n2, t3, e3) {
  let i3 = n2.nodeValue.length;
  t3 > i3 && (t3 = i3);
  let s5 = t3, r2 = t3, o2 = 0;
  t3 == 0 && e3 < 0 || t3 == i3 && e3 >= 0 ? C$2.chrome || C$2.gecko || (t3 ? (s5--, o2 = 1) : r2 < i3 && (r2++, o2 = -1)) : e3 < 0 ? s5-- : r2 < i3 && r2++;
  let l2 = Ne$1(n2, s5, r2).getClientRects();
  if (!l2.length)
    return null;
  let h4 = l2[(o2 ? o2 < 0 : e3 >= 0) ? 0 : l2.length - 1];
  return C$2.safari && !o2 && h4.width == 0 && (h4 = Array.prototype.find.call(l2, (a4) => a4.width) || h4), o2 ? Xn(h4, o2 < 0) : h4 || null;
}
let fe$1 = class fe2 extends q {
  static create(t3, e3, i3) {
    return new fe2(t3, e3, i3);
  }
  constructor(t3, e3, i3) {
    super(), this.widget = t3, this.length = e3, this.side = i3, this.prevWidget = null;
  }
  split(t3) {
    let e3 = fe2.create(this.widget, this.length - t3, this.side);
    return this.length -= t3, e3;
  }
  sync(t3) {
    (!this.dom || !this.widget.updateDOM(this.dom, t3)) && (this.dom && this.prevWidget && this.prevWidget.destroy(this.dom), this.prevWidget = null, this.setDOM(this.widget.toDOM(t3)), this.dom.contentEditable = "false");
  }
  getSide() {
    return this.side;
  }
  merge(t3, e3, i3, s5, r2, o2) {
    return i3 && (!(i3 instanceof fe2) || !this.widget.compare(i3.widget) || t3 > 0 && r2 <= 0 || e3 < this.length && o2 <= 0) ? false : (this.length = t3 + (i3 ? i3.length : 0) + (this.length - e3), true);
  }
  become(t3) {
    return t3 instanceof fe2 && t3.side == this.side && this.widget.constructor == t3.widget.constructor ? (this.widget.compare(t3.widget) || this.markDirty(true), this.dom && !this.prevWidget && (this.prevWidget = this.widget), this.widget = t3.widget, this.length = t3.length, true) : false;
  }
  ignoreMutation() {
    return true;
  }
  ignoreEvent(t3) {
    return this.widget.ignoreEvent(t3);
  }
  get overrideDOMText() {
    if (this.length == 0)
      return V$2.empty;
    let t3 = this;
    for (; t3.parent; )
      t3 = t3.parent;
    let { view: e3 } = t3, i3 = e3 && e3.state.doc, s5 = this.posAtStart;
    return i3 ? i3.slice(s5, s5 + this.length) : V$2.empty;
  }
  domAtPos(t3) {
    return (this.length ? t3 == 0 : this.side > 0) ? ct$1.before(this.dom) : ct$1.after(this.dom, t3 == this.length);
  }
  domBoundsAround() {
    return null;
  }
  coordsAt(t3, e3) {
    let i3 = this.widget.coordsAt(this.dom, t3, e3);
    if (i3)
      return i3;
    let s5 = this.dom.getClientRects(), r2 = null;
    if (!s5.length)
      return null;
    let o2 = this.side ? this.side < 0 : t3 > 0;
    for (let l2 = o2 ? s5.length - 1 : 0; r2 = s5[l2], !(t3 > 0 ? l2 == 0 : l2 == s5.length - 1 || r2.top < r2.bottom); l2 += o2 ? -1 : 1)
      ;
    return Xn(r2, !o2);
  }
  get isEditable() {
    return false;
  }
  get isWidget() {
    return true;
  }
  get isHidden() {
    return this.widget.isHidden;
  }
  destroy() {
    super.destroy(), this.dom && this.widget.destroy(this.dom);
  }
};
let Je$2 = class Je2 extends q {
  constructor(t3) {
    super(), this.side = t3;
  }
  get length() {
    return 0;
  }
  merge() {
    return false;
  }
  become(t3) {
    return t3 instanceof Je2 && t3.side == this.side;
  }
  split() {
    return new Je2(this.side);
  }
  sync() {
    if (!this.dom) {
      let t3 = document.createElement("img");
      t3.className = "cm-widgetBuffer", t3.setAttribute("aria-hidden", "true"), this.setDOM(t3);
    }
  }
  getSide() {
    return this.side;
  }
  domAtPos(t3) {
    return this.side > 0 ? ct$1.before(this.dom) : ct$1.after(this.dom);
  }
  localPosFromDOM() {
    return 0;
  }
  domBoundsAround() {
    return null;
  }
  coordsAt(t3) {
    return this.dom.getBoundingClientRect();
  }
  get overrideDOMText() {
    return V$2.empty;
  }
  get isHidden() {
    return true;
  }
};
re$2.prototype.children = fe$1.prototype.children = Je$2.prototype.children = Zn;
function Tl$1(n2, t3) {
  let e3 = n2.dom, { children: i3 } = n2, s5 = 0;
  for (let r2 = 0; s5 < i3.length; s5++) {
    let o2 = i3[s5], l2 = r2 + o2.length;
    if (!(l2 == r2 && o2.getSide() <= 0)) {
      if (t3 > r2 && t3 < l2 && o2.dom.parentNode == e3)
        return o2.domAtPos(t3 - r2);
      if (t3 <= r2)
        break;
      r2 = l2;
    }
  }
  for (let r2 = s5; r2 > 0; r2--) {
    let o2 = i3[r2 - 1];
    if (o2.dom.parentNode == e3)
      return o2.domAtPos(o2.length);
  }
  for (let r2 = s5; r2 < i3.length; r2++) {
    let o2 = i3[r2];
    if (o2.dom.parentNode == e3)
      return o2.domAtPos(0);
  }
  return new ct$1(e3, 0);
}
function Dl$1(n2, t3, e3) {
  let i3, { children: s5 } = n2;
  e3 > 0 && t3 instanceof oe$1 && s5.length && (i3 = s5[s5.length - 1]) instanceof oe$1 && i3.mark.eq(t3.mark) ? Dl$1(i3, t3.children[0], e3 - 1) : (s5.push(t3), t3.setParent(n2)), n2.length += t3.length;
}
function Pl$1(n2, t3, e3) {
  let i3 = null, s5 = -1, r2 = null, o2 = -1;
  function l2(a4, c3) {
    for (let f2 = 0, u3 = 0; f2 < a4.children.length && u3 <= c3; f2++) {
      let d4 = a4.children[f2], p2 = u3 + d4.length;
      p2 >= c3 && (d4.children.length ? l2(d4, c3 - u3) : (!r2 || r2.isHidden && e3 > 0) && (p2 > c3 || u3 == p2 && d4.getSide() > 0) ? (r2 = d4, o2 = c3 - u3) : (u3 < c3 || u3 == p2 && d4.getSide() < 0 && !d4.isHidden) && (i3 = d4, s5 = c3 - u3)), u3 = p2;
    }
  }
  l2(n2, t3);
  let h4 = (e3 < 0 ? i3 : r2) || i3 || r2;
  return h4 ? h4.coordsAt(Math.max(0, h4 == i3 ? s5 : o2), e3) : ff(n2);
}
function ff(n2) {
  let t3 = n2.dom.lastChild;
  if (!t3)
    return n2.dom.getBoundingClientRect();
  let e3 = bi(t3);
  return e3[e3.length - 1] || null;
}
function xn(n2, t3) {
  for (let e3 in n2)
    e3 == "class" && t3.class ? t3.class += " " + n2.class : e3 == "style" && t3.style ? t3.style += ";" + n2.style : t3[e3] = n2[e3];
  return t3;
}
const Ir$1 = /* @__PURE__ */ Object.create(null);
function tr(n2, t3, e3) {
  if (n2 == t3)
    return true;
  n2 || (n2 = Ir$1), t3 || (t3 = Ir$1);
  let i3 = Object.keys(n2), s5 = Object.keys(t3);
  if (i3.length - (e3 && i3.indexOf(e3) > -1 ? 1 : 0) != s5.length - (e3 && s5.indexOf(e3) > -1 ? 1 : 0))
    return false;
  for (let r2 of i3)
    if (r2 != e3 && (s5.indexOf(r2) == -1 || n2[r2] !== t3[r2]))
      return false;
  return true;
}
function vn$1(n2, t3, e3) {
  let i3 = false;
  if (t3)
    for (let s5 in t3)
      e3 && s5 in e3 || (i3 = true, s5 == "style" ? n2.style.cssText = "" : n2.removeAttribute(s5));
  if (e3)
    for (let s5 in e3)
      t3 && t3[s5] == e3[s5] || (i3 = true, s5 == "style" ? n2.style.cssText = e3[s5] : n2.setAttribute(s5, e3[s5]));
  return i3;
}
function uf(n2) {
  let t3 = /* @__PURE__ */ Object.create(null);
  for (let e3 = 0; e3 < n2.attributes.length; e3++) {
    let i3 = n2.attributes[e3];
    t3[i3.name] = i3.value;
  }
  return t3;
}
let Z$2 = class Z2 extends q {
  constructor() {
    super(...arguments), this.children = [], this.length = 0, this.prevAttrs = void 0, this.attrs = null, this.breakAfter = 0;
  }
  // Consumes source
  merge(t3, e3, i3, s5, r2, o2) {
    if (i3) {
      if (!(i3 instanceof Z2))
        return false;
      this.dom || i3.transferDOM(this);
    }
    return s5 && this.setDeco(i3 ? i3.attrs : null), Al$1(this, t3, e3, i3 ? i3.children : [], r2, o2), true;
  }
  split(t3) {
    let e3 = new Z2();
    if (e3.breakAfter = this.breakAfter, this.length == 0)
      return e3;
    let { i: i3, off: s5 } = this.childPos(t3);
    s5 && (e3.append(this.children[i3].split(s5), 0), this.children[i3].merge(s5, this.children[i3].length, null, false, 0, 0), i3++);
    for (let r2 = i3; r2 < this.children.length; r2++)
      e3.append(this.children[r2], 0);
    for (; i3 > 0 && this.children[i3 - 1].length == 0; )
      this.children[--i3].destroy();
    return this.children.length = i3, this.markDirty(), this.length = t3, e3;
  }
  transferDOM(t3) {
    this.dom && (this.markDirty(), t3.setDOM(this.dom), t3.prevAttrs = this.prevAttrs === void 0 ? this.attrs : this.prevAttrs, this.prevAttrs = void 0, this.dom = null);
  }
  setDeco(t3) {
    tr(this.attrs, t3) || (this.dom && (this.prevAttrs = this.attrs, this.markDirty()), this.attrs = t3);
  }
  append(t3, e3) {
    Dl$1(this, t3, e3);
  }
  // Only called when building a line view in ContentBuilder
  addLineDeco(t3) {
    let e3 = t3.spec.attributes, i3 = t3.spec.class;
    e3 && (this.attrs = xn(e3, this.attrs || {})), i3 && (this.attrs = xn({ class: i3 }, this.attrs || {}));
  }
  domAtPos(t3) {
    return Tl$1(this, t3);
  }
  reuseDOM(t3) {
    t3.nodeName == "DIV" && (this.setDOM(t3), this.flags |= 6);
  }
  sync(t3, e3) {
    var i3;
    this.dom ? this.flags & 4 && (xl$1(this.dom), this.dom.className = "cm-line", this.prevAttrs = this.attrs ? null : void 0) : (this.setDOM(document.createElement("div")), this.dom.className = "cm-line", this.prevAttrs = this.attrs ? null : void 0), this.prevAttrs !== void 0 && (vn$1(this.dom, this.prevAttrs, this.attrs), this.dom.classList.add("cm-line"), this.prevAttrs = void 0), super.sync(t3, e3);
    let s5 = this.dom.lastChild;
    for (; s5 && q.get(s5) instanceof oe$1; )
      s5 = s5.lastChild;
    if (!s5 || !this.length || s5.nodeName != "BR" && ((i3 = q.get(s5)) === null || i3 === void 0 ? void 0 : i3.isEditable) == false && (!C$2.ios || !this.children.some((r2) => r2 instanceof re$2))) {
      let r2 = document.createElement("BR");
      r2.cmIgnore = true, this.dom.appendChild(r2);
    }
  }
  measureTextSize() {
    if (this.children.length == 0 || this.length > 20)
      return null;
    let t3 = 0, e3;
    for (let i3 of this.children) {
      if (!(i3 instanceof re$2) || /[^ -~]/.test(i3.text))
        return null;
      let s5 = bi(i3.dom);
      if (s5.length != 1)
        return null;
      t3 += s5[0].width, e3 = s5[0].height;
    }
    return t3 ? {
      lineHeight: this.dom.getBoundingClientRect().height,
      charWidth: t3 / this.length,
      textHeight: e3
    } : null;
  }
  coordsAt(t3, e3) {
    let i3 = Pl$1(this, t3, e3);
    if (!this.children.length && i3 && this.parent) {
      let { heightOracle: s5 } = this.parent.view.viewState, r2 = i3.bottom - i3.top;
      if (Math.abs(r2 - s5.lineHeight) < 2 && s5.textHeight < r2) {
        let o2 = (r2 - s5.textHeight) / 2;
        return { top: i3.top + o2, bottom: i3.bottom - o2, left: i3.left, right: i3.left };
      }
    }
    return i3;
  }
  become(t3) {
    return false;
  }
  covers() {
    return true;
  }
  static find(t3, e3) {
    for (let i3 = 0, s5 = 0; i3 < t3.children.length; i3++) {
      let r2 = t3.children[i3], o2 = s5 + r2.length;
      if (o2 >= e3) {
        if (r2 instanceof Z2)
          return r2;
        if (o2 > e3)
          break;
      }
      s5 = o2 + r2.breakAfter;
    }
    return null;
  }
};
let pe$4 = class pe2 extends q {
  constructor(t3, e3, i3) {
    super(), this.widget = t3, this.length = e3, this.deco = i3, this.breakAfter = 0, this.prevWidget = null;
  }
  merge(t3, e3, i3, s5, r2, o2) {
    return i3 && (!(i3 instanceof pe2) || !this.widget.compare(i3.widget) || t3 > 0 && r2 <= 0 || e3 < this.length && o2 <= 0) ? false : (this.length = t3 + (i3 ? i3.length : 0) + (this.length - e3), true);
  }
  domAtPos(t3) {
    return t3 == 0 ? ct$1.before(this.dom) : ct$1.after(this.dom, t3 == this.length);
  }
  split(t3) {
    let e3 = this.length - t3;
    this.length = t3;
    let i3 = new pe2(this.widget, e3, this.deco);
    return i3.breakAfter = this.breakAfter, i3;
  }
  get children() {
    return Zn;
  }
  sync(t3) {
    (!this.dom || !this.widget.updateDOM(this.dom, t3)) && (this.dom && this.prevWidget && this.prevWidget.destroy(this.dom), this.prevWidget = null, this.setDOM(this.widget.toDOM(t3)), this.dom.contentEditable = "false");
  }
  get overrideDOMText() {
    return this.parent ? this.parent.view.state.doc.slice(this.posAtStart, this.posAtEnd) : V$2.empty;
  }
  domBoundsAround() {
    return null;
  }
  become(t3) {
    return t3 instanceof pe2 && t3.widget.constructor == this.widget.constructor ? (t3.widget.compare(this.widget) || this.markDirty(true), this.dom && !this.prevWidget && (this.prevWidget = this.widget), this.widget = t3.widget, this.length = t3.length, this.deco = t3.deco, this.breakAfter = t3.breakAfter, true) : false;
  }
  ignoreMutation() {
    return true;
  }
  ignoreEvent(t3) {
    return this.widget.ignoreEvent(t3);
  }
  get isEditable() {
    return false;
  }
  get isWidget() {
    return true;
  }
  coordsAt(t3, e3) {
    return this.widget.coordsAt(this.dom, t3, e3);
  }
  destroy() {
    super.destroy(), this.dom && this.widget.destroy(this.dom);
  }
  covers(t3) {
    let { startSide: e3, endSide: i3 } = this.deco;
    return e3 == i3 ? false : t3 < 0 ? e3 < 0 : i3 > 0;
  }
};
let Se$5 = class Se2 {
  /**
  Compare this instance to another instance of the same type.
  (TypeScript can't express this, but only instances of the same
  specific class will be passed to this method.) This is used to
  avoid redrawing widgets when they are replaced by a new
  decoration of the same type. The default implementation just
  returns `false`, which will cause new instances of the widget to
  always be redrawn.
  */
  eq(t3) {
    return false;
  }
  /**
  Update a DOM element created by a widget of the same type (but
  different, non-`eq` content) to reflect this widget. May return
  true to indicate that it could update, false to indicate it
  couldn't (in which case the widget will be redrawn). The default
  implementation just returns false.
  */
  updateDOM(t3, e3) {
    return false;
  }
  /**
  @internal
  */
  compare(t3) {
    return this == t3 || this.constructor == t3.constructor && this.eq(t3);
  }
  /**
  The estimated height this widget will have, to be used when
  estimating the height of content that hasn't been drawn. May
  return -1 to indicate you don't know. The default implementation
  returns -1.
  */
  get estimatedHeight() {
    return -1;
  }
  /**
  For inline widgets that are displayed inline (as opposed to
  `inline-block`) and introduce line breaks (through `<br>` tags
  or textual newlines), this must indicate the amount of line
  breaks they introduce. Defaults to 0.
  */
  get lineBreaks() {
    return 0;
  }
  /**
  Can be used to configure which kinds of events inside the widget
  should be ignored by the editor. The default is to ignore all
  events.
  */
  ignoreEvent(t3) {
    return true;
  }
  /**
  Override the way screen coordinates for positions at/in the
  widget are found. `pos` will be the offset into the widget, and
  `side` the side of the position that is being queried—less than
  zero for before, greater than zero for after, and zero for
  directly at that position.
  */
  coordsAt(t3, e3, i3) {
    return null;
  }
  /**
  @internal
  */
  get isHidden() {
    return false;
  }
  /**
  This is called when the an instance of the widget is removed
  from the editor view.
  */
  destroy(t3) {
  }
};
var Lt$1 = /* @__PURE__ */ function(n2) {
  return n2[n2.Text = 0] = "Text", n2[n2.WidgetBefore = 1] = "WidgetBefore", n2[n2.WidgetAfter = 2] = "WidgetAfter", n2[n2.WidgetRange = 3] = "WidgetRange", n2;
}(Lt$1 || (Lt$1 = {}));
let N$5 = class N2 extends Qe$2 {
  constructor(t3, e3, i3, s5) {
    super(), this.startSide = t3, this.endSide = e3, this.widget = i3, this.spec = s5;
  }
  /**
  @internal
  */
  get heightRelevant() {
    return false;
  }
  /**
  Create a mark decoration, which influences the styling of the
  content in its range. Nested mark decorations will cause nested
  DOM elements to be created. Nesting order is determined by
  precedence of the [facet](https://codemirror.net/6/docs/ref/#view.EditorView^decorations), with
  the higher-precedence decorations creating the inner DOM nodes.
  Such elements are split on line boundaries and on the boundaries
  of lower-precedence decorations.
  */
  static mark(t3) {
    return new Mi(t3);
  }
  /**
  Create a widget decoration, which displays a DOM element at the
  given position.
  */
  static widget(t3) {
    let e3 = Math.max(-1e4, Math.min(1e4, t3.side || 0)), i3 = !!t3.block;
    return e3 += i3 && !t3.inlineOrder ? e3 > 0 ? 3e8 : -4e8 : e3 > 0 ? 1e8 : -1e8, new be$3(t3, e3, e3, i3, t3.widget || null, false);
  }
  /**
  Create a replace decoration which replaces the given range with
  a widget, or simply hides it.
  */
  static replace(t3) {
    let e3 = !!t3.block, i3, s5;
    if (t3.isBlockGap)
      i3 = -5e8, s5 = 4e8;
    else {
      let { start: r2, end: o2 } = Bl$1(t3, e3);
      i3 = (r2 ? e3 ? -3e8 : -1 : 5e8) - 1, s5 = (o2 ? e3 ? 2e8 : 1 : -6e8) + 1;
    }
    return new be$3(t3, i3, s5, e3, t3.widget || null, true);
  }
  /**
  Create a line decoration, which can add DOM attributes to the
  line starting at the given position.
  */
  static line(t3) {
    return new Ti(t3);
  }
  /**
  Build a [`DecorationSet`](https://codemirror.net/6/docs/ref/#view.DecorationSet) from the given
  decorated range or ranges. If the ranges aren't already sorted,
  pass `true` for `sort` to make the library sort them for you.
  */
  static set(t3, e3 = false) {
    return $$3.of(t3, e3);
  }
  /**
  @internal
  */
  hasHeight() {
    return this.widget ? this.widget.estimatedHeight > -1 : false;
  }
};
N$5.none = $$3.empty;
class Mi extends N$5 {
  constructor(t3) {
    let { start: e3, end: i3 } = Bl$1(t3);
    super(e3 ? -1 : 5e8, i3 ? 1 : -6e8, null, t3), this.tagName = t3.tagName || "span", this.class = t3.class || "", this.attrs = t3.attributes || null;
  }
  eq(t3) {
    var e3, i3;
    return this == t3 || t3 instanceof Mi && this.tagName == t3.tagName && (this.class || ((e3 = this.attrs) === null || e3 === void 0 ? void 0 : e3.class)) == (t3.class || ((i3 = t3.attrs) === null || i3 === void 0 ? void 0 : i3.class)) && tr(this.attrs, t3.attrs, "class");
  }
  range(t3, e3 = t3) {
    if (t3 >= e3)
      throw new RangeError("Mark decorations may not be empty");
    return super.range(t3, e3);
  }
}
Mi.prototype.point = false;
class Ti extends N$5 {
  constructor(t3) {
    super(-2e8, -2e8, null, t3);
  }
  eq(t3) {
    return t3 instanceof Ti && this.spec.class == t3.spec.class && tr(this.spec.attributes, t3.spec.attributes);
  }
  range(t3, e3 = t3) {
    if (e3 != t3)
      throw new RangeError("Line decoration ranges must be zero-length");
    return super.range(t3, e3);
  }
}
Ti.prototype.mapMode = mt$1.TrackBefore;
Ti.prototype.point = true;
let be$3 = class be2 extends N$5 {
  constructor(t3, e3, i3, s5, r2, o2) {
    super(e3, i3, r2, t3), this.block = s5, this.isReplace = o2, this.mapMode = s5 ? e3 <= 0 ? mt$1.TrackBefore : mt$1.TrackAfter : mt$1.TrackDel;
  }
  // Only relevant when this.block == true
  get type() {
    return this.startSide != this.endSide ? Lt$1.WidgetRange : this.startSide <= 0 ? Lt$1.WidgetBefore : Lt$1.WidgetAfter;
  }
  get heightRelevant() {
    return this.block || !!this.widget && (this.widget.estimatedHeight >= 5 || this.widget.lineBreaks > 0);
  }
  eq(t3) {
    return t3 instanceof be2 && df(this.widget, t3.widget) && this.block == t3.block && this.startSide == t3.startSide && this.endSide == t3.endSide;
  }
  range(t3, e3 = t3) {
    if (this.isReplace && (t3 > e3 || t3 == e3 && this.startSide > 0 && this.endSide <= 0))
      throw new RangeError("Invalid range for replacement decoration");
    if (!this.isReplace && e3 != t3)
      throw new RangeError("Widget decorations can only have zero-length ranges");
    return super.range(t3, e3);
  }
};
be$3.prototype.point = true;
function Bl$1(n2, t3 = false) {
  let { inclusiveStart: e3, inclusiveEnd: i3 } = n2;
  return e3 == null && (e3 = n2.inclusive), i3 == null && (i3 = n2.inclusive), { start: e3 ?? t3, end: i3 ?? t3 };
}
function df(n2, t3) {
  return n2 == t3 || !!(n2 && t3 && n2.compare(t3));
}
function Sn$1(n2, t3, e3, i3 = 0) {
  let s5 = e3.length - 1;
  s5 >= 0 && e3[s5] + i3 >= n2 ? e3[s5] = Math.max(e3[s5], t3) : e3.push(n2, t3);
}
class gi {
  constructor(t3, e3, i3, s5) {
    this.doc = t3, this.pos = e3, this.end = i3, this.disallowBlockEffectsFor = s5, this.content = [], this.curLine = null, this.breakAtStart = 0, this.pendingBuffer = 0, this.bufferMarks = [], this.atCursorPos = true, this.openStart = -1, this.openEnd = -1, this.text = "", this.textOff = 0, this.cursor = t3.iter(), this.skip = e3;
  }
  posCovered() {
    if (this.content.length == 0)
      return !this.breakAtStart && this.doc.lineAt(this.pos).from != this.pos;
    let t3 = this.content[this.content.length - 1];
    return !(t3.breakAfter || t3 instanceof pe$4 && t3.deco.endSide < 0);
  }
  getLine() {
    return this.curLine || (this.content.push(this.curLine = new Z$2()), this.atCursorPos = true), this.curLine;
  }
  flushBuffer(t3 = this.bufferMarks) {
    this.pendingBuffer && (this.curLine.append(Ni(new Je$2(-1), t3), t3.length), this.pendingBuffer = 0);
  }
  addBlockWidget(t3) {
    this.flushBuffer(), this.curLine = null, this.content.push(t3);
  }
  finish(t3) {
    this.pendingBuffer && t3 <= this.bufferMarks.length ? this.flushBuffer() : this.pendingBuffer = 0, !this.posCovered() && !(t3 && this.content.length && this.content[this.content.length - 1] instanceof pe$4) && this.getLine();
  }
  buildText(t3, e3, i3) {
    for (; t3 > 0; ) {
      if (this.textOff == this.text.length) {
        let { value: r2, lineBreak: o2, done: l2 } = this.cursor.next(this.skip);
        if (this.skip = 0, l2)
          throw new Error("Ran out of text content when drawing inline views");
        if (o2) {
          this.posCovered() || this.getLine(), this.content.length ? this.content[this.content.length - 1].breakAfter = 1 : this.breakAtStart = 1, this.flushBuffer(), this.curLine = null, this.atCursorPos = true, t3--;
          continue;
        } else
          this.text = r2, this.textOff = 0;
      }
      let s5 = Math.min(
        this.text.length - this.textOff,
        t3,
        512
        /* T.Chunk */
      );
      this.flushBuffer(e3.slice(e3.length - i3)), this.getLine().append(Ni(new re$2(this.text.slice(this.textOff, this.textOff + s5)), e3), i3), this.atCursorPos = true, this.textOff += s5, t3 -= s5, i3 = 0;
    }
  }
  span(t3, e3, i3, s5) {
    this.buildText(e3 - t3, i3, s5), this.pos = e3, this.openStart < 0 && (this.openStart = s5);
  }
  point(t3, e3, i3, s5, r2, o2) {
    if (this.disallowBlockEffectsFor[o2] && i3 instanceof be$3) {
      if (i3.block)
        throw new RangeError("Block decorations may not be specified via plugins");
      if (e3 > this.doc.lineAt(this.pos).to)
        throw new RangeError("Decorations that replace line breaks may not be specified via plugins");
    }
    let l2 = e3 - t3;
    if (i3 instanceof be$3)
      if (i3.block)
        i3.startSide > 0 && !this.posCovered() && this.getLine(), this.addBlockWidget(new pe$4(i3.widget || new Vr$1("div"), l2, i3));
      else {
        let h4 = fe$1.create(i3.widget || new Vr$1("span"), l2, l2 ? 0 : i3.startSide), a4 = this.atCursorPos && !h4.isEditable && r2 <= s5.length && (t3 < e3 || i3.startSide > 0), c3 = !h4.isEditable && (t3 < e3 || r2 > s5.length || i3.startSide <= 0), f2 = this.getLine();
        this.pendingBuffer == 2 && !a4 && !h4.isEditable && (this.pendingBuffer = 0), this.flushBuffer(s5), a4 && (f2.append(Ni(new Je$2(1), s5), r2), r2 = s5.length + Math.max(0, r2 - s5.length)), f2.append(Ni(h4, s5), r2), this.atCursorPos = c3, this.pendingBuffer = c3 ? t3 < e3 || r2 > s5.length ? 1 : 2 : 0, this.pendingBuffer && (this.bufferMarks = s5.slice());
      }
    else
      this.doc.lineAt(this.pos).from == this.pos && this.getLine().addLineDeco(i3);
    l2 && (this.textOff + l2 <= this.text.length ? this.textOff += l2 : (this.skip += l2 - (this.text.length - this.textOff), this.text = "", this.textOff = 0), this.pos = e3), this.openStart < 0 && (this.openStart = r2);
  }
  static build(t3, e3, i3, s5, r2) {
    let o2 = new gi(t3, e3, i3, r2);
    return o2.openEnd = $$3.spans(s5, e3, i3, o2), o2.openStart < 0 && (o2.openStart = o2.openEnd), o2.finish(o2.openEnd), o2;
  }
}
function Ni(n2, t3) {
  for (let e3 of t3)
    n2 = new oe$1(e3, [n2], n2.length);
  return n2;
}
let Vr$1 = class Vr2 extends Se$5 {
  constructor(t3) {
    super(), this.tag = t3;
  }
  eq(t3) {
    return t3.tag == this.tag;
  }
  toDOM() {
    return document.createElement(this.tag);
  }
  updateDOM(t3) {
    return t3.nodeName.toLowerCase() == this.tag;
  }
  get isHidden() {
    return true;
  }
};
const Rl$1 = /* @__PURE__ */ O$2.define(), Ll$1 = /* @__PURE__ */ O$2.define(), El$1 = /* @__PURE__ */ O$2.define(), Nl$1 = /* @__PURE__ */ O$2.define(), Cn$1 = /* @__PURE__ */ O$2.define(), Il$1 = /* @__PURE__ */ O$2.define(), Vl$1 = /* @__PURE__ */ O$2.define(), Hl$1 = /* @__PURE__ */ O$2.define({
  combine: (n2) => n2.some((t3) => t3)
}), pf = /* @__PURE__ */ O$2.define({
  combine: (n2) => n2.some((t3) => t3)
});
let qe$2 = class qe2 {
  constructor(t3, e3 = "nearest", i3 = "nearest", s5 = 5, r2 = 5, o2 = false) {
    this.range = t3, this.y = e3, this.x = i3, this.yMargin = s5, this.xMargin = r2, this.isSnapshot = o2;
  }
  map(t3) {
    return t3.empty ? this : new qe2(this.range.map(t3), this.y, this.x, this.yMargin, this.xMargin, this.isSnapshot);
  }
  clip(t3) {
    return this.range.to <= t3.doc.length ? this : new qe2(b$1.cursor(t3.doc.length), this.y, this.x, this.yMargin, this.xMargin, this.isSnapshot);
  }
};
const Ii = /* @__PURE__ */ z$4.define({ map: (n2, t3) => n2.map(t3) });
function ie$2(n2, t3, e3) {
  let i3 = n2.facet(Nl$1);
  i3.length ? i3[0](t3) : window.onerror ? window.onerror(String(t3), e3, void 0, void 0, t3) : e3 ? console.error(e3 + ":", t3) : console.error(t3);
}
const Bs = /* @__PURE__ */ O$2.define({ combine: (n2) => n2.length ? n2[0] : true });
let gf = 0;
const hi = /* @__PURE__ */ O$2.define();
let yt$2 = class yt2 {
  constructor(t3, e3, i3, s5, r2) {
    this.id = t3, this.create = e3, this.domEventHandlers = i3, this.domEventObservers = s5, this.extension = r2(this);
  }
  /**
  Define a plugin from a constructor function that creates the
  plugin's value, given an editor view.
  */
  static define(t3, e3) {
    const { eventHandlers: i3, eventObservers: s5, provide: r2, decorations: o2 } = e3 || {};
    return new yt2(gf++, t3, i3, s5, (l2) => {
      let h4 = [hi.of(l2)];
      return o2 && h4.push(xi.of((a4) => {
        let c3 = a4.plugin(l2);
        return c3 ? o2(c3) : N$5.none;
      })), r2 && h4.push(r2(l2)), h4;
    });
  }
  /**
  Create a plugin for a class whose constructor takes a single
  editor view as argument.
  */
  static fromClass(t3, e3) {
    return yt2.define((i3) => new t3(i3), e3);
  }
};
class Fs {
  constructor(t3) {
    this.spec = t3, this.mustUpdate = null, this.value = null;
  }
  update(t3) {
    if (this.value) {
      if (this.mustUpdate) {
        let e3 = this.mustUpdate;
        if (this.mustUpdate = null, this.value.update)
          try {
            this.value.update(e3);
          } catch (i3) {
            if (ie$2(e3.state, i3, "CodeMirror plugin crashed"), this.value.destroy)
              try {
                this.value.destroy();
              } catch {
              }
            this.deactivate();
          }
      }
    } else if (this.spec)
      try {
        this.value = this.spec.create(t3);
      } catch (e3) {
        ie$2(t3.state, e3, "CodeMirror plugin crashed"), this.deactivate();
      }
    return this;
  }
  destroy(t3) {
    var e3;
    if (!((e3 = this.value) === null || e3 === void 0) && e3.destroy)
      try {
        this.value.destroy();
      } catch (i3) {
        ie$2(t3.state, i3, "CodeMirror plugin crashed");
      }
  }
  deactivate() {
    this.spec = this.value = null;
  }
}
const _l$1 = /* @__PURE__ */ O$2.define(), er = /* @__PURE__ */ O$2.define(), xi = /* @__PURE__ */ O$2.define(), ir = /* @__PURE__ */ O$2.define(), $l$1 = /* @__PURE__ */ O$2.define();
function Hr$1(n2, t3, e3) {
  let i3 = n2.state.facet($l$1);
  if (!i3.length)
    return i3;
  let s5 = i3.map((o2) => o2 instanceof Function ? o2(n2) : o2), r2 = [];
  return $$3.spans(s5, t3, e3, {
    point() {
    },
    span(o2, l2, h4, a4) {
      let c3 = r2;
      for (let f2 = h4.length - 1; f2 >= 0; f2--, a4--) {
        let u3 = h4[f2].spec.bidiIsolate, d4;
        if (u3 != null)
          if (a4 > 0 && c3.length && (d4 = c3[c3.length - 1]).to == o2 && d4.direction == u3)
            d4.to = l2, c3 = d4.inner;
          else {
            let p2 = { from: o2, to: l2, direction: u3, inner: [] };
            c3.push(p2), c3 = p2.inner;
          }
      }
    }
  }), r2;
}
const Fl$1 = /* @__PURE__ */ O$2.define();
function zl$1(n2) {
  let t3 = 0, e3 = 0, i3 = 0, s5 = 0;
  for (let r2 of n2.state.facet(Fl$1)) {
    let o2 = r2(n2);
    o2 && (o2.left != null && (t3 = Math.max(t3, o2.left)), o2.right != null && (e3 = Math.max(e3, o2.right)), o2.top != null && (i3 = Math.max(i3, o2.top)), o2.bottom != null && (s5 = Math.max(s5, o2.bottom)));
  }
  return { left: t3, right: e3, top: i3, bottom: s5 };
}
const ai = /* @__PURE__ */ O$2.define();
class Mt {
  constructor(t3, e3, i3, s5) {
    this.fromA = t3, this.toA = e3, this.fromB = i3, this.toB = s5;
  }
  join(t3) {
    return new Mt(Math.min(this.fromA, t3.fromA), Math.max(this.toA, t3.toA), Math.min(this.fromB, t3.fromB), Math.max(this.toB, t3.toB));
  }
  addToSet(t3) {
    let e3 = t3.length, i3 = this;
    for (; e3 > 0; e3--) {
      let s5 = t3[e3 - 1];
      if (!(s5.fromA > i3.toA)) {
        if (s5.toA < i3.fromA)
          break;
        i3 = i3.join(s5), t3.splice(e3 - 1, 1);
      }
    }
    return t3.splice(e3, 0, i3), t3;
  }
  static extendWithRanges(t3, e3) {
    if (e3.length == 0)
      return t3;
    let i3 = [];
    for (let s5 = 0, r2 = 0, o2 = 0, l2 = 0; ; s5++) {
      let h4 = s5 == t3.length ? null : t3[s5], a4 = o2 - l2, c3 = h4 ? h4.fromB : 1e9;
      for (; r2 < e3.length && e3[r2] < c3; ) {
        let f2 = e3[r2], u3 = e3[r2 + 1], d4 = Math.max(l2, f2), p2 = Math.min(c3, u3);
        if (d4 <= p2 && new Mt(d4 + a4, p2 + a4, d4, p2).addToSet(i3), u3 > c3)
          break;
        r2 += 2;
      }
      if (!h4)
        return i3;
      new Mt(h4.fromA, h4.toA, h4.fromB, h4.toB).addToSet(i3), o2 = h4.toA, l2 = h4.toB;
    }
  }
}
class ps {
  constructor(t3, e3, i3) {
    this.view = t3, this.state = e3, this.transactions = i3, this.flags = 0, this.startState = t3.state, this.changes = it$1.empty(this.startState.doc.length);
    for (let r2 of i3)
      this.changes = this.changes.compose(r2.changes);
    let s5 = [];
    this.changes.iterChangedRanges((r2, o2, l2, h4) => s5.push(new Mt(r2, o2, l2, h4))), this.changedRanges = s5;
  }
  /**
  @internal
  */
  static create(t3, e3, i3) {
    return new ps(t3, e3, i3);
  }
  /**
  Tells you whether the [viewport](https://codemirror.net/6/docs/ref/#view.EditorView.viewport) or
  [visible ranges](https://codemirror.net/6/docs/ref/#view.EditorView.visibleRanges) changed in this
  update.
  */
  get viewportChanged() {
    return (this.flags & 4) > 0;
  }
  /**
  Indicates whether the height of a block element in the editor
  changed in this update.
  */
  get heightChanged() {
    return (this.flags & 2) > 0;
  }
  /**
  Returns true when the document was modified or the size of the
  editor, or elements within the editor, changed.
  */
  get geometryChanged() {
    return this.docChanged || (this.flags & 10) > 0;
  }
  /**
  True when this update indicates a focus change.
  */
  get focusChanged() {
    return (this.flags & 1) > 0;
  }
  /**
  Whether the document changed in this update.
  */
  get docChanged() {
    return !this.changes.empty;
  }
  /**
  Whether the selection was explicitly set in this update.
  */
  get selectionSet() {
    return this.transactions.some((t3) => t3.selection);
  }
  /**
  @internal
  */
  get empty() {
    return this.flags == 0 && this.transactions.length == 0;
  }
}
var tt$2 = /* @__PURE__ */ function(n2) {
  return n2[n2.LTR = 0] = "LTR", n2[n2.RTL = 1] = "RTL", n2;
}(tt$2 || (tt$2 = {}));
const vi = tt$2.LTR, Wl$1 = tt$2.RTL;
function jl$1(n2) {
  let t3 = [];
  for (let e3 = 0; e3 < n2.length; e3++)
    t3.push(1 << +n2[e3]);
  return t3;
}
const mf = /* @__PURE__ */ jl$1("88888888888888888888888888888888888666888888787833333333337888888000000000000000000000000008888880000000000000000000000000088888888888888888888888888888888888887866668888088888663380888308888800000000000000000000000800000000000000000000000000000008"), wf = /* @__PURE__ */ jl$1("4444448826627288999999999992222222222222222222222222222222222222222222222229999999999999999999994444444444644222822222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222999999949999999229989999223333333333"), An$1 = /* @__PURE__ */ Object.create(null), Ft = [];
for (let n2 of ["()", "[]", "{}"]) {
  let t3 = /* @__PURE__ */ n2.charCodeAt(0), e3 = /* @__PURE__ */ n2.charCodeAt(1);
  An$1[t3] = e3, An$1[e3] = -t3;
}
function yf(n2) {
  return n2 <= 247 ? mf[n2] : 1424 <= n2 && n2 <= 1524 ? 2 : 1536 <= n2 && n2 <= 1785 ? wf[n2 - 1536] : 1774 <= n2 && n2 <= 2220 ? 4 : 8192 <= n2 && n2 <= 8203 ? 256 : 64336 <= n2 && n2 <= 65023 ? 4 : n2 == 8204 ? 256 : 1;
}
const bf = /[\u0590-\u05f4\u0600-\u06ff\u0700-\u08ac\ufb50-\ufdff]/;
let ue$3 = class ue2 {
  /**
  The direction of this span.
  */
  get dir() {
    return this.level % 2 ? Wl$1 : vi;
  }
  /**
  @internal
  */
  constructor(t3, e3, i3) {
    this.from = t3, this.to = e3, this.level = i3;
  }
  /**
  @internal
  */
  side(t3, e3) {
    return this.dir == e3 == t3 ? this.to : this.from;
  }
  /**
  @internal
  */
  static find(t3, e3, i3, s5) {
    let r2 = -1;
    for (let o2 = 0; o2 < t3.length; o2++) {
      let l2 = t3[o2];
      if (l2.from <= e3 && l2.to >= e3) {
        if (l2.level == i3)
          return o2;
        (r2 < 0 || (s5 != 0 ? s5 < 0 ? l2.from < e3 : l2.to > e3 : t3[r2].level > l2.level)) && (r2 = o2);
      }
    }
    if (r2 < 0)
      throw new RangeError("Index out of range");
    return r2;
  }
};
function Kl$1(n2, t3) {
  if (n2.length != t3.length)
    return false;
  for (let e3 = 0; e3 < n2.length; e3++) {
    let i3 = n2[e3], s5 = t3[e3];
    if (i3.from != s5.from || i3.to != s5.to || i3.direction != s5.direction || !Kl$1(i3.inner, s5.inner))
      return false;
  }
  return true;
}
const F$2 = [];
function kf(n2, t3, e3, i3, s5) {
  for (let r2 = 0; r2 <= i3.length; r2++) {
    let o2 = r2 ? i3[r2 - 1].to : t3, l2 = r2 < i3.length ? i3[r2].from : e3, h4 = r2 ? 256 : s5;
    for (let a4 = o2, c3 = h4, f2 = h4; a4 < l2; a4++) {
      let u3 = yf(n2.charCodeAt(a4));
      u3 == 512 ? u3 = c3 : u3 == 8 && f2 == 4 && (u3 = 16), F$2[a4] = u3 == 4 ? 2 : u3, u3 & 7 && (f2 = u3), c3 = u3;
    }
    for (let a4 = o2, c3 = h4, f2 = h4; a4 < l2; a4++) {
      let u3 = F$2[a4];
      if (u3 == 128)
        a4 < l2 - 1 && c3 == F$2[a4 + 1] && c3 & 24 ? u3 = F$2[a4] = c3 : F$2[a4] = 256;
      else if (u3 == 64) {
        let d4 = a4 + 1;
        for (; d4 < l2 && F$2[d4] == 64; )
          d4++;
        let p2 = a4 && c3 == 8 || d4 < e3 && F$2[d4] == 8 ? f2 == 1 ? 1 : 8 : 256;
        for (let m4 = a4; m4 < d4; m4++)
          F$2[m4] = p2;
        a4 = d4 - 1;
      } else
        u3 == 8 && f2 == 1 && (F$2[a4] = 1);
      c3 = u3, u3 & 7 && (f2 = u3);
    }
  }
}
function xf(n2, t3, e3, i3, s5) {
  let r2 = s5 == 1 ? 2 : 1;
  for (let o2 = 0, l2 = 0, h4 = 0; o2 <= i3.length; o2++) {
    let a4 = o2 ? i3[o2 - 1].to : t3, c3 = o2 < i3.length ? i3[o2].from : e3;
    for (let f2 = a4, u3, d4, p2; f2 < c3; f2++)
      if (d4 = An$1[u3 = n2.charCodeAt(f2)])
        if (d4 < 0) {
          for (let m4 = l2 - 3; m4 >= 0; m4 -= 3)
            if (Ft[m4 + 1] == -d4) {
              let g2 = Ft[m4 + 2], y4 = g2 & 2 ? s5 : g2 & 4 ? g2 & 1 ? r2 : s5 : 0;
              y4 && (F$2[f2] = F$2[Ft[m4]] = y4), l2 = m4;
              break;
            }
        } else {
          if (Ft.length == 189)
            break;
          Ft[l2++] = f2, Ft[l2++] = u3, Ft[l2++] = h4;
        }
      else if ((p2 = F$2[f2]) == 2 || p2 == 1) {
        let m4 = p2 == s5;
        h4 = m4 ? 0 : 1;
        for (let g2 = l2 - 3; g2 >= 0; g2 -= 3) {
          let y4 = Ft[g2 + 2];
          if (y4 & 2)
            break;
          if (m4)
            Ft[g2 + 2] |= 2;
          else {
            if (y4 & 4)
              break;
            Ft[g2 + 2] |= 4;
          }
        }
      }
  }
}
function vf(n2, t3, e3, i3) {
  for (let s5 = 0, r2 = i3; s5 <= e3.length; s5++) {
    let o2 = s5 ? e3[s5 - 1].to : n2, l2 = s5 < e3.length ? e3[s5].from : t3;
    for (let h4 = o2; h4 < l2; ) {
      let a4 = F$2[h4];
      if (a4 == 256) {
        let c3 = h4 + 1;
        for (; ; )
          if (c3 == l2) {
            if (s5 == e3.length)
              break;
            c3 = e3[s5++].to, l2 = s5 < e3.length ? e3[s5].from : t3;
          } else if (F$2[c3] == 256)
            c3++;
          else
            break;
        let f2 = r2 == 1, u3 = (c3 < t3 ? F$2[c3] : i3) == 1, d4 = f2 == u3 ? f2 ? 1 : 2 : i3;
        for (let p2 = c3, m4 = s5, g2 = m4 ? e3[m4 - 1].to : n2; p2 > h4; )
          p2 == g2 && (p2 = e3[--m4].from, g2 = m4 ? e3[m4 - 1].to : n2), F$2[--p2] = d4;
        h4 = c3;
      } else
        r2 = a4, h4++;
    }
  }
}
function On$1(n2, t3, e3, i3, s5, r2, o2) {
  let l2 = i3 % 2 ? 2 : 1;
  if (i3 % 2 == s5 % 2)
    for (let h4 = t3, a4 = 0; h4 < e3; ) {
      let c3 = true, f2 = false;
      if (a4 == r2.length || h4 < r2[a4].from) {
        let m4 = F$2[h4];
        m4 != l2 && (c3 = false, f2 = m4 == 16);
      }
      let u3 = !c3 && l2 == 1 ? [] : null, d4 = c3 ? i3 : i3 + 1, p2 = h4;
      t:
        for (; ; )
          if (a4 < r2.length && p2 == r2[a4].from) {
            if (f2)
              break t;
            let m4 = r2[a4];
            if (!c3)
              for (let g2 = m4.to, y4 = a4 + 1; ; ) {
                if (g2 == e3)
                  break t;
                if (y4 < r2.length && r2[y4].from == g2)
                  g2 = r2[y4++].to;
                else {
                  if (F$2[g2] == l2)
                    break t;
                  break;
                }
              }
            if (a4++, u3)
              u3.push(m4);
            else {
              m4.from > h4 && o2.push(new ue$3(h4, m4.from, d4));
              let g2 = m4.direction == vi != !(d4 % 2);
              Mn$1(n2, g2 ? i3 + 1 : i3, s5, m4.inner, m4.from, m4.to, o2), h4 = m4.to;
            }
            p2 = m4.to;
          } else {
            if (p2 == e3 || (c3 ? F$2[p2] != l2 : F$2[p2] == l2))
              break;
            p2++;
          }
      u3 ? On$1(n2, h4, p2, i3 + 1, s5, u3, o2) : h4 < p2 && o2.push(new ue$3(h4, p2, d4)), h4 = p2;
    }
  else
    for (let h4 = e3, a4 = r2.length; h4 > t3; ) {
      let c3 = true, f2 = false;
      if (!a4 || h4 > r2[a4 - 1].to) {
        let m4 = F$2[h4 - 1];
        m4 != l2 && (c3 = false, f2 = m4 == 16);
      }
      let u3 = !c3 && l2 == 1 ? [] : null, d4 = c3 ? i3 : i3 + 1, p2 = h4;
      t:
        for (; ; )
          if (a4 && p2 == r2[a4 - 1].to) {
            if (f2)
              break t;
            let m4 = r2[--a4];
            if (!c3)
              for (let g2 = m4.from, y4 = a4; ; ) {
                if (g2 == t3)
                  break t;
                if (y4 && r2[y4 - 1].to == g2)
                  g2 = r2[--y4].from;
                else {
                  if (F$2[g2 - 1] == l2)
                    break t;
                  break;
                }
              }
            if (u3)
              u3.push(m4);
            else {
              m4.to < h4 && o2.push(new ue$3(m4.to, h4, d4));
              let g2 = m4.direction == vi != !(d4 % 2);
              Mn$1(n2, g2 ? i3 + 1 : i3, s5, m4.inner, m4.from, m4.to, o2), h4 = m4.from;
            }
            p2 = m4.from;
          } else {
            if (p2 == t3 || (c3 ? F$2[p2 - 1] != l2 : F$2[p2 - 1] == l2))
              break;
            p2--;
          }
      u3 ? On$1(n2, p2, h4, i3 + 1, s5, u3, o2) : p2 < h4 && o2.push(new ue$3(p2, h4, d4)), h4 = p2;
    }
}
function Mn$1(n2, t3, e3, i3, s5, r2, o2) {
  let l2 = t3 % 2 ? 2 : 1;
  kf(n2, s5, r2, i3, l2), xf(n2, s5, r2, i3, l2), vf(s5, r2, i3, l2), On$1(n2, s5, r2, t3, e3, i3, o2);
}
function Sf(n2, t3, e3) {
  if (!n2)
    return [new ue$3(0, 0, t3 == Wl$1 ? 1 : 0)];
  if (t3 == vi && !e3.length && !bf.test(n2))
    return ql$1(n2.length);
  if (e3.length)
    for (; n2.length > F$2.length; )
      F$2[F$2.length] = 256;
  let i3 = [], s5 = t3 == vi ? 0 : 1;
  return Mn$1(n2, s5, s5, e3, 0, n2.length, i3), i3;
}
function ql$1(n2) {
  return [new ue$3(0, n2, 0)];
}
let Gl$1 = "";
function Cf(n2, t3, e3, i3, s5) {
  var r2;
  let o2 = i3.head - n2.from, l2 = -1;
  if (o2 == 0) {
    if (!s5 || !n2.length)
      return null;
    t3[0].level != e3 && (o2 = t3[0].side(false, e3), l2 = 0);
  } else if (o2 == n2.length) {
    if (s5)
      return null;
    let u3 = t3[t3.length - 1];
    u3.level != e3 && (o2 = u3.side(true, e3), l2 = t3.length - 1);
  }
  l2 < 0 && (l2 = ue$3.find(t3, o2, (r2 = i3.bidiLevel) !== null && r2 !== void 0 ? r2 : -1, i3.assoc));
  let h4 = t3[l2];
  o2 == h4.side(s5, e3) && (h4 = t3[l2 += s5 ? 1 : -1], o2 = h4.side(!s5, e3));
  let a4 = s5 == (h4.dir == e3), c3 = wt$2(n2.text, o2, a4);
  if (Gl$1 = n2.text.slice(Math.min(o2, c3), Math.max(o2, c3)), c3 != h4.side(s5, e3))
    return b$1.cursor(c3 + n2.from, a4 ? -1 : 1, h4.level);
  let f2 = l2 == (s5 ? t3.length - 1 : 0) ? null : t3[l2 + (s5 ? 1 : -1)];
  return !f2 && h4.level != e3 ? b$1.cursor(s5 ? n2.to : n2.from, s5 ? -1 : 1, e3) : f2 && f2.level < h4.level ? b$1.cursor(f2.side(!s5, e3) + n2.from, s5 ? 1 : -1, f2.level) : b$1.cursor(c3 + n2.from, s5 ? -1 : 1, h4.level);
}
let _r$1 = class _r2 extends q {
  get length() {
    return this.view.state.doc.length;
  }
  constructor(t3) {
    super(), this.view = t3, this.decorations = [], this.dynamicDecorationMap = [], this.domChanged = null, this.hasComposition = null, this.markedForComposition = /* @__PURE__ */ new Set(), this.minWidth = 0, this.minWidthFrom = 0, this.minWidthTo = 0, this.impreciseAnchor = null, this.impreciseHead = null, this.forceSelection = false, this.lastUpdate = Date.now(), this.setDOM(t3.contentDOM), this.children = [new Z$2()], this.children[0].setParent(this), this.updateDeco(), this.updateInner([new Mt(0, 0, 0, t3.state.doc.length)], 0, null);
  }
  // Update the document view to a given state.
  update(t3) {
    var e3;
    let i3 = t3.changedRanges;
    this.minWidth > 0 && i3.length && (i3.every(({ fromA: a4, toA: c3 }) => c3 < this.minWidthFrom || a4 > this.minWidthTo) ? (this.minWidthFrom = t3.changes.mapPos(this.minWidthFrom, 1), this.minWidthTo = t3.changes.mapPos(this.minWidthTo, 1)) : this.minWidth = this.minWidthFrom = this.minWidthTo = 0);
    let s5 = -1;
    this.view.inputState.composing >= 0 && (!((e3 = this.domChanged) === null || e3 === void 0) && e3.newSel ? s5 = this.domChanged.newSel.head : !Bf(t3.changes, this.hasComposition) && !t3.selectionSet && (s5 = t3.state.selection.main.head));
    let r2 = s5 > -1 ? Of(this.view, t3.changes, s5) : null;
    if (this.domChanged = null, this.hasComposition) {
      this.markedForComposition.clear();
      let { from: a4, to: c3 } = this.hasComposition;
      i3 = new Mt(a4, c3, t3.changes.mapPos(a4, -1), t3.changes.mapPos(c3, 1)).addToSet(i3.slice());
    }
    this.hasComposition = r2 ? { from: r2.range.fromB, to: r2.range.toB } : null, (C$2.ie || C$2.chrome) && !r2 && t3 && t3.state.doc.lines != t3.startState.doc.lines && (this.forceSelection = true);
    let o2 = this.decorations, l2 = this.updateDeco(), h4 = Df(o2, l2, t3.changes);
    return i3 = Mt.extendWithRanges(i3, h4), !(this.flags & 7) && i3.length == 0 ? false : (this.updateInner(i3, t3.startState.doc.length, r2), t3.transactions.length && (this.lastUpdate = Date.now()), true);
  }
  // Used by update and the constructor do perform the actual DOM
  // update
  updateInner(t3, e3, i3) {
    this.view.viewState.mustMeasureContent = true, this.updateChildren(t3, e3, i3);
    let { observer: s5 } = this.view;
    s5.ignore(() => {
      this.dom.style.height = this.view.viewState.contentHeight / this.view.scaleY + "px", this.dom.style.flexBasis = this.minWidth ? this.minWidth + "px" : "";
      let o2 = C$2.chrome || C$2.ios ? { node: s5.selectionRange.focusNode, written: false } : void 0;
      this.sync(this.view, o2), this.flags &= -8, o2 && (o2.written || s5.selectionRange.focusNode != o2.node) && (this.forceSelection = true), this.dom.style.height = "";
    }), this.markedForComposition.forEach(
      (o2) => o2.flags &= -9
      /* ViewFlag.Composition */
    );
    let r2 = [];
    if (this.view.viewport.from || this.view.viewport.to < this.view.state.doc.length)
      for (let o2 of this.children)
        o2 instanceof pe$4 && o2.widget instanceof $r$1 && r2.push(o2.dom);
    s5.updateGaps(r2);
  }
  updateChildren(t3, e3, i3) {
    let s5 = i3 ? i3.range.addToSet(t3.slice()) : t3, r2 = this.childCursor(e3);
    for (let o2 = s5.length - 1; ; o2--) {
      let l2 = o2 >= 0 ? s5[o2] : null;
      if (!l2)
        break;
      let { fromA: h4, toA: a4, fromB: c3, toB: f2 } = l2, u3, d4, p2, m4;
      if (i3 && i3.range.fromB < f2 && i3.range.toB > c3) {
        let v2 = gi.build(this.view.state.doc, c3, i3.range.fromB, this.decorations, this.dynamicDecorationMap), A2 = gi.build(this.view.state.doc, i3.range.toB, f2, this.decorations, this.dynamicDecorationMap);
        d4 = v2.breakAtStart, p2 = v2.openStart, m4 = A2.openEnd;
        let P2 = this.compositionView(i3);
        A2.breakAtStart ? P2.breakAfter = 1 : A2.content.length && P2.merge(P2.length, P2.length, A2.content[0], false, A2.openStart, 0) && (P2.breakAfter = A2.content[0].breakAfter, A2.content.shift()), v2.content.length && P2.merge(0, 0, v2.content[v2.content.length - 1], true, 0, v2.openEnd) && v2.content.pop(), u3 = v2.content.concat(P2).concat(A2.content);
      } else
        ({ content: u3, breakAtStart: d4, openStart: p2, openEnd: m4 } = gi.build(this.view.state.doc, c3, f2, this.decorations, this.dynamicDecorationMap));
      let { i: g2, off: y4 } = r2.findPos(a4, 1), { i: x3, off: S4 } = r2.findPos(h4, -1);
      Cl$1(this, x3, S4, g2, y4, u3, d4, p2, m4);
    }
    i3 && this.fixCompositionDOM(i3);
  }
  compositionView(t3) {
    let e3 = new re$2(t3.text.nodeValue);
    e3.flags |= 8;
    for (let { deco: s5 } of t3.marks)
      e3 = new oe$1(s5, [e3], e3.length);
    let i3 = new Z$2();
    return i3.append(e3, 0), i3;
  }
  fixCompositionDOM(t3) {
    let e3 = (r2, o2) => {
      o2.flags |= 8 | (o2.children.some(
        (h4) => h4.flags & 7
        /* ViewFlag.Dirty */
      ) ? 1 : 0), this.markedForComposition.add(o2);
      let l2 = q.get(r2);
      l2 && l2 != o2 && (l2.dom = null), o2.setDOM(r2);
    }, i3 = this.childPos(t3.range.fromB, 1), s5 = this.children[i3.i];
    e3(t3.line, s5);
    for (let r2 = t3.marks.length - 1; r2 >= -1; r2--)
      i3 = s5.childPos(i3.off, 1), s5 = s5.children[i3.i], e3(r2 >= 0 ? t3.marks[r2].node : t3.text, s5);
  }
  // Sync the DOM selection to this.state.selection
  updateSelection(t3 = false, e3 = false) {
    (t3 || !this.view.observer.selectionRange.focusNode) && this.view.observer.readSelectionRange();
    let i3 = this.view.root.activeElement, s5 = i3 == this.dom, r2 = !s5 && ts(this.dom, this.view.observer.selectionRange) && !(i3 && this.dom.contains(i3));
    if (!(s5 || e3 || r2))
      return;
    let o2 = this.forceSelection;
    this.forceSelection = false;
    let l2 = this.view.state.selection.main, h4 = this.moveToLine(this.domAtPos(l2.anchor)), a4 = l2.empty ? h4 : this.moveToLine(this.domAtPos(l2.head));
    if (C$2.gecko && l2.empty && !this.hasComposition && Af(h4)) {
      let f2 = document.createTextNode("");
      this.view.observer.ignore(() => h4.node.insertBefore(f2, h4.node.childNodes[h4.offset] || null)), h4 = a4 = new ct$1(f2, 0), o2 = true;
    }
    let c3 = this.view.observer.selectionRange;
    (o2 || !c3.focusNode || !ds(h4.node, h4.offset, c3.anchorNode, c3.anchorOffset) || !ds(a4.node, a4.offset, c3.focusNode, c3.focusOffset)) && (this.view.observer.ignore(() => {
      C$2.android && C$2.chrome && this.dom.contains(c3.focusNode) && Pf(c3.focusNode, this.dom) && (this.dom.blur(), this.dom.focus({ preventScroll: true }));
      let f2 = us(this.view.root);
      if (f2)
        if (l2.empty) {
          if (C$2.gecko) {
            let u3 = Mf(h4.node, h4.offset);
            if (u3 && u3 != 3) {
              let d4 = Yl$1(h4.node, h4.offset, u3 == 1 ? 1 : -1);
              d4 && (h4 = new ct$1(d4.node, d4.offset));
            }
          }
          f2.collapse(h4.node, h4.offset), l2.bidiLevel != null && f2.caretBidiLevel !== void 0 && (f2.caretBidiLevel = l2.bidiLevel);
        } else if (f2.extend) {
          f2.collapse(h4.node, h4.offset);
          try {
            f2.extend(a4.node, a4.offset);
          } catch {
          }
        } else {
          let u3 = document.createRange();
          l2.anchor > l2.head && ([h4, a4] = [a4, h4]), u3.setEnd(a4.node, a4.offset), u3.setStart(h4.node, h4.offset), f2.removeAllRanges(), f2.addRange(u3);
        }
      r2 && this.view.root.activeElement == this.dom && (this.dom.blur(), i3 && i3.focus());
    }), this.view.observer.setSelectionRange(h4, a4)), this.impreciseAnchor = h4.precise ? null : new ct$1(c3.anchorNode, c3.anchorOffset), this.impreciseHead = a4.precise ? null : new ct$1(c3.focusNode, c3.focusOffset);
  }
  enforceCursorAssoc() {
    if (this.hasComposition)
      return;
    let { view: t3 } = this, e3 = t3.state.selection.main, i3 = us(t3.root), { anchorNode: s5, anchorOffset: r2 } = t3.observer.selectionRange;
    if (!i3 || !e3.empty || !e3.assoc || !i3.modify)
      return;
    let o2 = Z$2.find(this, e3.head);
    if (!o2)
      return;
    let l2 = o2.posAtStart;
    if (e3.head == l2 || e3.head == l2 + o2.length)
      return;
    let h4 = this.coordsAt(e3.head, -1), a4 = this.coordsAt(e3.head, 1);
    if (!h4 || !a4 || h4.bottom > a4.top)
      return;
    let c3 = this.domAtPos(e3.head + e3.assoc);
    i3.collapse(c3.node, c3.offset), i3.modify("move", e3.assoc < 0 ? "forward" : "backward", "lineboundary"), t3.observer.readSelectionRange();
    let f2 = t3.observer.selectionRange;
    t3.docView.posFromDOM(f2.anchorNode, f2.anchorOffset) != e3.from && i3.collapse(s5, r2);
  }
  // If a position is in/near a block widget, move it to a nearby text
  // line, since we don't want the cursor inside a block widget.
  moveToLine(t3) {
    let e3 = this.dom, i3;
    if (t3.node != e3)
      return t3;
    for (let s5 = t3.offset; !i3 && s5 < e3.childNodes.length; s5++) {
      let r2 = q.get(e3.childNodes[s5]);
      r2 instanceof Z$2 && (i3 = r2.domAtPos(0));
    }
    for (let s5 = t3.offset - 1; !i3 && s5 >= 0; s5--) {
      let r2 = q.get(e3.childNodes[s5]);
      r2 instanceof Z$2 && (i3 = r2.domAtPos(r2.length));
    }
    return i3 ? new ct$1(i3.node, i3.offset, true) : t3;
  }
  nearest(t3) {
    for (let e3 = t3; e3; ) {
      let i3 = q.get(e3);
      if (i3 && i3.rootView == this)
        return i3;
      e3 = e3.parentNode;
    }
    return null;
  }
  posFromDOM(t3, e3) {
    let i3 = this.nearest(t3);
    if (!i3)
      throw new RangeError("Trying to find position for a DOM position outside of the document");
    return i3.localPosFromDOM(t3, e3) + i3.posAtStart;
  }
  domAtPos(t3) {
    let { i: e3, off: i3 } = this.childCursor().findPos(t3, -1);
    for (; e3 < this.children.length - 1; ) {
      let s5 = this.children[e3];
      if (i3 < s5.length || s5 instanceof Z$2)
        break;
      e3++, i3 = 0;
    }
    return this.children[e3].domAtPos(i3);
  }
  coordsAt(t3, e3) {
    let i3 = null, s5 = 0;
    for (let r2 = this.length, o2 = this.children.length - 1; o2 >= 0; o2--) {
      let l2 = this.children[o2], h4 = r2 - l2.breakAfter, a4 = h4 - l2.length;
      if (h4 < t3)
        break;
      a4 <= t3 && (a4 < t3 || l2.covers(-1)) && (h4 > t3 || l2.covers(1)) && (!i3 || l2 instanceof Z$2 && !(i3 instanceof Z$2 && e3 >= 0)) && (i3 = l2, s5 = a4), r2 = a4;
    }
    return i3 ? i3.coordsAt(t3 - s5, e3) : null;
  }
  coordsForChar(t3) {
    let { i: e3, off: i3 } = this.childPos(t3, 1), s5 = this.children[e3];
    if (!(s5 instanceof Z$2))
      return null;
    for (; s5.children.length; ) {
      let { i: l2, off: h4 } = s5.childPos(i3, 1);
      for (; ; l2++) {
        if (l2 == s5.children.length)
          return null;
        if ((s5 = s5.children[l2]).length)
          break;
      }
      i3 = h4;
    }
    if (!(s5 instanceof re$2))
      return null;
    let r2 = wt$2(s5.text, i3);
    if (r2 == i3)
      return null;
    let o2 = Ne$1(s5.dom, i3, r2).getClientRects();
    for (let l2 = 0; l2 < o2.length; l2++) {
      let h4 = o2[l2];
      if (l2 == o2.length - 1 || h4.top < h4.bottom && h4.left < h4.right)
        return h4;
    }
    return null;
  }
  measureVisibleLineHeights(t3) {
    let e3 = [], { from: i3, to: s5 } = t3, r2 = this.view.contentDOM.clientWidth, o2 = r2 > Math.max(this.view.scrollDOM.clientWidth, this.minWidth) + 1, l2 = -1, h4 = this.view.textDirection == tt$2.LTR;
    for (let a4 = 0, c3 = 0; c3 < this.children.length; c3++) {
      let f2 = this.children[c3], u3 = a4 + f2.length;
      if (u3 > s5)
        break;
      if (a4 >= i3) {
        let d4 = f2.dom.getBoundingClientRect();
        if (e3.push(d4.height), o2) {
          let p2 = f2.dom.lastChild, m4 = p2 ? bi(p2) : [];
          if (m4.length) {
            let g2 = m4[m4.length - 1], y4 = h4 ? g2.right - d4.left : d4.right - g2.left;
            y4 > l2 && (l2 = y4, this.minWidth = r2, this.minWidthFrom = a4, this.minWidthTo = u3);
          }
        }
      }
      a4 = u3 + f2.breakAfter;
    }
    return e3;
  }
  textDirectionAt(t3) {
    let { i: e3 } = this.childPos(t3, 1);
    return getComputedStyle(this.children[e3].dom).direction == "rtl" ? tt$2.RTL : tt$2.LTR;
  }
  measureTextSize() {
    for (let r2 of this.children)
      if (r2 instanceof Z$2) {
        let o2 = r2.measureTextSize();
        if (o2)
          return o2;
      }
    let t3 = document.createElement("div"), e3, i3, s5;
    return t3.className = "cm-line", t3.style.width = "99999px", t3.style.position = "absolute", t3.textContent = "abc def ghi jkl mno pqr stu", this.view.observer.ignore(() => {
      this.dom.appendChild(t3);
      let r2 = bi(t3.firstChild)[0];
      e3 = t3.getBoundingClientRect().height, i3 = r2 ? r2.width / 27 : 7, s5 = r2 ? r2.height : e3, t3.remove();
    }), { lineHeight: e3, charWidth: i3, textHeight: s5 };
  }
  childCursor(t3 = this.length) {
    let e3 = this.children.length;
    return e3 && (t3 -= this.children[--e3].length), new Sl$1(this.children, t3, e3);
  }
  computeBlockGapDeco() {
    let t3 = [], e3 = this.view.viewState;
    for (let i3 = 0, s5 = 0; ; s5++) {
      let r2 = s5 == e3.viewports.length ? null : e3.viewports[s5], o2 = r2 ? r2.from - 1 : this.length;
      if (o2 > i3) {
        let l2 = (e3.lineBlockAt(o2).bottom - e3.lineBlockAt(i3).top) / this.view.scaleY;
        t3.push(N$5.replace({
          widget: new $r$1(l2),
          block: true,
          inclusive: true,
          isBlockGap: true
        }).range(i3, o2));
      }
      if (!r2)
        break;
      i3 = r2.to + 1;
    }
    return N$5.set(t3);
  }
  updateDeco() {
    let t3 = this.view.state.facet(xi).map((e3, i3) => (this.dynamicDecorationMap[i3] = typeof e3 == "function") ? e3(this.view) : e3);
    for (let e3 = t3.length; e3 < t3.length + 3; e3++)
      this.dynamicDecorationMap[e3] = false;
    return this.decorations = [
      ...t3,
      this.computeBlockGapDeco(),
      this.view.viewState.lineGapDeco
    ];
  }
  scrollIntoView(t3) {
    if (t3.isSnapshot) {
      let a4 = this.view.viewState.lineBlockAt(t3.range.head);
      this.view.scrollDOM.scrollTop = a4.top - t3.yMargin, this.view.scrollDOM.scrollLeft = t3.xMargin;
      return;
    }
    let { range: e3 } = t3, i3 = this.coordsAt(e3.head, e3.empty ? e3.assoc : e3.head > e3.anchor ? -1 : 1), s5;
    if (!i3)
      return;
    !e3.empty && (s5 = this.coordsAt(e3.anchor, e3.anchor > e3.head ? -1 : 1)) && (i3 = {
      left: Math.min(i3.left, s5.left),
      top: Math.min(i3.top, s5.top),
      right: Math.max(i3.right, s5.right),
      bottom: Math.max(i3.bottom, s5.bottom)
    });
    let r2 = zl$1(this.view), o2 = {
      left: i3.left - r2.left,
      top: i3.top - r2.top,
      right: i3.right + r2.right,
      bottom: i3.bottom + r2.bottom
    }, { offsetWidth: l2, offsetHeight: h4 } = this.view.scrollDOM;
    nf(this.view.scrollDOM, o2, e3.head < e3.anchor ? -1 : 1, t3.x, t3.y, Math.max(Math.min(t3.xMargin, l2), -l2), Math.max(Math.min(t3.yMargin, h4), -h4), this.view.textDirection == tt$2.LTR);
  }
};
function Af(n2) {
  return n2.node.nodeType == 1 && n2.node.firstChild && (n2.offset == 0 || n2.node.childNodes[n2.offset - 1].contentEditable == "false") && (n2.offset == n2.node.childNodes.length || n2.node.childNodes[n2.offset].contentEditable == "false");
}
let $r$1 = class $r2 extends Se$5 {
  constructor(t3) {
    super(), this.height = t3;
  }
  toDOM() {
    let t3 = document.createElement("div");
    return this.updateDOM(t3), t3;
  }
  eq(t3) {
    return t3.height == this.height;
  }
  updateDOM(t3) {
    return t3.style.height = this.height + "px", true;
  }
  get estimatedHeight() {
    return this.height;
  }
};
function Ul$1(n2, t3) {
  let e3 = n2.observer.selectionRange, i3 = e3.focusNode && Yl$1(e3.focusNode, e3.focusOffset, 0);
  if (!i3)
    return null;
  let s5 = t3 - i3.offset;
  return { from: s5, to: s5 + i3.node.nodeValue.length, node: i3.node };
}
function Of(n2, t3, e3) {
  let i3 = Ul$1(n2, e3);
  if (!i3)
    return null;
  let { node: s5, from: r2, to: o2 } = i3, l2 = s5.nodeValue;
  if (/[\n\r]/.test(l2) || n2.state.doc.sliceString(i3.from, i3.to) != l2)
    return null;
  let h4 = t3.invertedDesc, a4 = new Mt(h4.mapPos(r2), h4.mapPos(o2), r2, o2), c3 = [];
  for (let f2 = s5.parentNode; ; f2 = f2.parentNode) {
    let u3 = q.get(f2);
    if (u3 instanceof oe$1)
      c3.push({ node: f2, deco: u3.mark });
    else {
      if (u3 instanceof Z$2 || f2.nodeName == "DIV" && f2.parentNode == n2.contentDOM)
        return { range: a4, text: s5, marks: c3, line: f2 };
      if (f2 != n2.contentDOM)
        c3.push({ node: f2, deco: new Mi({
          inclusive: true,
          attributes: uf(f2),
          tagName: f2.tagName.toLowerCase()
        }) });
      else
        return null;
    }
  }
}
function Yl$1(n2, t3, e3) {
  if (e3 <= 0)
    for (let i3 = n2, s5 = t3; ; ) {
      if (i3.nodeType == 3)
        return { node: i3, offset: s5 };
      if (i3.nodeType == 1 && s5 > 0)
        i3 = i3.childNodes[s5 - 1], s5 = ne$1(i3);
      else
        break;
    }
  if (e3 >= 0)
    for (let i3 = n2, s5 = t3; ; ) {
      if (i3.nodeType == 3)
        return { node: i3, offset: s5 };
      if (i3.nodeType == 1 && s5 < i3.childNodes.length && e3 >= 0)
        i3 = i3.childNodes[s5], s5 = 0;
      else
        break;
    }
  return null;
}
function Mf(n2, t3) {
  return n2.nodeType != 1 ? 0 : (t3 && n2.childNodes[t3 - 1].contentEditable == "false" ? 1 : 0) | (t3 < n2.childNodes.length && n2.childNodes[t3].contentEditable == "false" ? 2 : 0);
}
let Tf = class {
  constructor() {
    this.changes = [];
  }
  compareRange(t3, e3) {
    Sn$1(t3, e3, this.changes);
  }
  comparePoint(t3, e3) {
    Sn$1(t3, e3, this.changes);
  }
};
function Df(n2, t3, e3) {
  let i3 = new Tf();
  return $$3.compare(n2, t3, e3, i3), i3.changes;
}
function Pf(n2, t3) {
  for (let e3 = n2; e3 && e3 != t3; e3 = e3.assignedSlot || e3.parentNode)
    if (e3.nodeType == 1 && e3.contentEditable == "false")
      return true;
  return false;
}
function Bf(n2, t3) {
  let e3 = false;
  return t3 && n2.iterChangedRanges((i3, s5) => {
    i3 < t3.to && s5 > t3.from && (e3 = true);
  }), e3;
}
function Rf(n2, t3, e3 = 1) {
  let i3 = n2.charCategorizer(t3), s5 = n2.doc.lineAt(t3), r2 = t3 - s5.from;
  if (s5.length == 0)
    return b$1.cursor(t3);
  r2 == 0 ? e3 = 1 : r2 == s5.length && (e3 = -1);
  let o2 = r2, l2 = r2;
  e3 < 0 ? o2 = wt$2(s5.text, r2, false) : l2 = wt$2(s5.text, r2);
  let h4 = i3(s5.text.slice(o2, l2));
  for (; o2 > 0; ) {
    let a4 = wt$2(s5.text, o2, false);
    if (i3(s5.text.slice(a4, o2)) != h4)
      break;
    o2 = a4;
  }
  for (; l2 < s5.length; ) {
    let a4 = wt$2(s5.text, l2);
    if (i3(s5.text.slice(l2, a4)) != h4)
      break;
    l2 = a4;
  }
  return b$1.range(o2 + s5.from, l2 + s5.from);
}
function Lf(n2, t3) {
  return t3.left > n2 ? t3.left - n2 : Math.max(0, n2 - t3.right);
}
function Ef(n2, t3) {
  return t3.top > n2 ? t3.top - n2 : Math.max(0, n2 - t3.bottom);
}
function zs(n2, t3) {
  return n2.top < t3.bottom - 1 && n2.bottom > t3.top + 1;
}
function Fr$1(n2, t3) {
  return t3 < n2.top ? { top: t3, left: n2.left, right: n2.right, bottom: n2.bottom } : n2;
}
function zr$1(n2, t3) {
  return t3 > n2.bottom ? { top: n2.top, left: n2.left, right: n2.right, bottom: t3 } : n2;
}
function Tn(n2, t3, e3) {
  let i3, s5, r2, o2, l2 = false, h4, a4, c3, f2;
  for (let p2 = n2.firstChild; p2; p2 = p2.nextSibling) {
    let m4 = bi(p2);
    for (let g2 = 0; g2 < m4.length; g2++) {
      let y4 = m4[g2];
      s5 && zs(s5, y4) && (y4 = Fr$1(zr$1(y4, s5.bottom), s5.top));
      let x3 = Lf(t3, y4), S4 = Ef(e3, y4);
      if (x3 == 0 && S4 == 0)
        return p2.nodeType == 3 ? Wr$1(p2, t3, e3) : Tn(p2, t3, e3);
      if (!i3 || o2 > S4 || o2 == S4 && r2 > x3) {
        i3 = p2, s5 = y4, r2 = x3, o2 = S4;
        let v2 = S4 ? e3 < y4.top ? -1 : 1 : x3 ? t3 < y4.left ? -1 : 1 : 0;
        l2 = !v2 || (v2 > 0 ? g2 < m4.length - 1 : g2 > 0);
      }
      x3 == 0 ? e3 > y4.bottom && (!c3 || c3.bottom < y4.bottom) ? (h4 = p2, c3 = y4) : e3 < y4.top && (!f2 || f2.top > y4.top) && (a4 = p2, f2 = y4) : c3 && zs(c3, y4) ? c3 = zr$1(c3, y4.bottom) : f2 && zs(f2, y4) && (f2 = Fr$1(f2, y4.top));
    }
  }
  if (c3 && c3.bottom >= e3 ? (i3 = h4, s5 = c3) : f2 && f2.top <= e3 && (i3 = a4, s5 = f2), !i3)
    return { node: n2, offset: 0 };
  let u3 = Math.max(s5.left, Math.min(s5.right, t3));
  if (i3.nodeType == 3)
    return Wr$1(i3, u3, e3);
  if (l2 && i3.contentEditable != "false")
    return Tn(i3, u3, e3);
  let d4 = Array.prototype.indexOf.call(n2.childNodes, i3) + (t3 >= (s5.left + s5.right) / 2 ? 1 : 0);
  return { node: n2, offset: d4 };
}
function Wr$1(n2, t3, e3) {
  let i3 = n2.nodeValue.length, s5 = -1, r2 = 1e9, o2 = 0;
  for (let l2 = 0; l2 < i3; l2++) {
    let h4 = Ne$1(n2, l2, l2 + 1).getClientRects();
    for (let a4 = 0; a4 < h4.length; a4++) {
      let c3 = h4[a4];
      if (c3.top == c3.bottom)
        continue;
      o2 || (o2 = t3 - c3.left);
      let f2 = (c3.top > e3 ? c3.top - e3 : e3 - c3.bottom) - 1;
      if (c3.left - 1 <= t3 && c3.right + 1 >= t3 && f2 < r2) {
        let u3 = t3 >= (c3.left + c3.right) / 2, d4 = u3;
        if ((C$2.chrome || C$2.gecko) && Ne$1(n2, l2).getBoundingClientRect().left == c3.right && (d4 = !u3), f2 <= 0)
          return { node: n2, offset: l2 + (d4 ? 1 : 0) };
        s5 = l2 + (d4 ? 1 : 0), r2 = f2;
      }
    }
  }
  return { node: n2, offset: s5 > -1 ? s5 : o2 > 0 ? n2.nodeValue.length : 0 };
}
function Ql$1(n2, t3, e3, i3 = -1) {
  var s5, r2;
  let o2 = n2.contentDOM.getBoundingClientRect(), l2 = o2.top + n2.viewState.paddingTop, h4, { docHeight: a4 } = n2.viewState, { x: c3, y: f2 } = t3, u3 = f2 - l2;
  if (u3 < 0)
    return 0;
  if (u3 > a4)
    return n2.state.doc.length;
  for (let v2 = n2.viewState.heightOracle.textHeight / 2, A2 = false; h4 = n2.elementAtHeight(u3), h4.type != Lt$1.Text; )
    for (; u3 = i3 > 0 ? h4.bottom + v2 : h4.top - v2, !(u3 >= 0 && u3 <= a4); ) {
      if (A2)
        return e3 ? null : 0;
      A2 = true, i3 = -i3;
    }
  f2 = l2 + u3;
  let d4 = h4.from;
  if (d4 < n2.viewport.from)
    return n2.viewport.from == 0 ? 0 : e3 ? null : jr$1(n2, o2, h4, c3, f2);
  if (d4 > n2.viewport.to)
    return n2.viewport.to == n2.state.doc.length ? n2.state.doc.length : e3 ? null : jr$1(n2, o2, h4, c3, f2);
  let p2 = n2.dom.ownerDocument, m4 = n2.root.elementFromPoint ? n2.root : p2, g2 = m4.elementFromPoint(c3, f2);
  g2 && !n2.contentDOM.contains(g2) && (g2 = null), g2 || (c3 = Math.max(o2.left + 1, Math.min(o2.right - 1, c3)), g2 = m4.elementFromPoint(c3, f2), g2 && !n2.contentDOM.contains(g2) && (g2 = null));
  let y4, x3 = -1;
  if (g2 && ((s5 = n2.docView.nearest(g2)) === null || s5 === void 0 ? void 0 : s5.isEditable) != false) {
    if (p2.caretPositionFromPoint) {
      let v2 = p2.caretPositionFromPoint(c3, f2);
      v2 && ({ offsetNode: y4, offset: x3 } = v2);
    } else if (p2.caretRangeFromPoint) {
      let v2 = p2.caretRangeFromPoint(c3, f2);
      v2 && ({ startContainer: y4, startOffset: x3 } = v2, (!n2.contentDOM.contains(y4) || C$2.safari && Nf(y4, x3, c3) || C$2.chrome && If(y4, x3, c3)) && (y4 = void 0));
    }
  }
  if (!y4 || !n2.docView.dom.contains(y4)) {
    let v2 = Z$2.find(n2.docView, d4);
    if (!v2)
      return u3 > h4.top + h4.height / 2 ? h4.to : h4.from;
    ({ node: y4, offset: x3 } = Tn(v2.dom, c3, f2));
  }
  let S4 = n2.docView.nearest(y4);
  if (!S4)
    return null;
  if (S4.isWidget && ((r2 = S4.dom) === null || r2 === void 0 ? void 0 : r2.nodeType) == 1) {
    let v2 = S4.dom.getBoundingClientRect();
    return t3.y < v2.top || t3.y <= v2.bottom && t3.x <= (v2.left + v2.right) / 2 ? S4.posAtStart : S4.posAtEnd;
  } else
    return S4.localPosFromDOM(y4, x3) + S4.posAtStart;
}
function jr$1(n2, t3, e3, i3, s5) {
  let r2 = Math.round((i3 - t3.left) * n2.defaultCharacterWidth);
  if (n2.lineWrapping && e3.height > n2.defaultLineHeight * 1.5) {
    let l2 = n2.viewState.heightOracle.textHeight, h4 = Math.floor((s5 - e3.top - (n2.defaultLineHeight - l2) * 0.5) / l2);
    r2 += h4 * n2.viewState.heightOracle.lineLength;
  }
  let o2 = n2.state.sliceDoc(e3.from, e3.to);
  return e3.from + Qc(o2, r2, n2.state.tabSize);
}
function Nf(n2, t3, e3) {
  let i3;
  if (n2.nodeType != 3 || t3 != (i3 = n2.nodeValue.length))
    return false;
  for (let s5 = n2.nextSibling; s5; s5 = s5.nextSibling)
    if (s5.nodeType != 1 || s5.nodeName != "BR")
      return false;
  return Ne$1(n2, i3 - 1, i3).getBoundingClientRect().left > e3;
}
function If(n2, t3, e3) {
  if (t3 != 0)
    return false;
  for (let s5 = n2; ; ) {
    let r2 = s5.parentNode;
    if (!r2 || r2.nodeType != 1 || r2.firstChild != s5)
      return false;
    if (r2.classList.contains("cm-line"))
      break;
    s5 = r2;
  }
  let i3 = n2.nodeType == 1 ? n2.getBoundingClientRect() : Ne$1(n2, 0, Math.max(n2.nodeValue.length, 1)).getBoundingClientRect();
  return e3 - i3.left > 5;
}
function Vf(n2, t3) {
  let e3 = n2.lineBlockAt(t3);
  if (Array.isArray(e3.type)) {
    for (let i3 of e3.type)
      if (i3.to > t3 || i3.to == t3 && (i3.to == e3.to || i3.type == Lt$1.Text))
        return i3;
  }
  return e3;
}
function Hf(n2, t3, e3, i3) {
  let s5 = Vf(n2, t3.head), r2 = !i3 || s5.type != Lt$1.Text || !(n2.lineWrapping || s5.widgetLineBreaks) ? null : n2.coordsAtPos(t3.assoc < 0 && t3.head > s5.from ? t3.head - 1 : t3.head);
  if (r2) {
    let o2 = n2.dom.getBoundingClientRect(), l2 = n2.textDirectionAt(s5.from), h4 = n2.posAtCoords({
      x: e3 == (l2 == tt$2.LTR) ? o2.right - 1 : o2.left + 1,
      y: (r2.top + r2.bottom) / 2
    });
    if (h4 != null)
      return b$1.cursor(h4, e3 ? -1 : 1);
  }
  return b$1.cursor(e3 ? s5.to : s5.from, e3 ? -1 : 1);
}
function Kr$1(n2, t3, e3, i3) {
  let s5 = n2.state.doc.lineAt(t3.head), r2 = n2.bidiSpans(s5), o2 = n2.textDirectionAt(s5.from);
  for (let l2 = t3, h4 = null; ; ) {
    let a4 = Cf(s5, r2, o2, l2, e3), c3 = Gl$1;
    if (!a4) {
      if (s5.number == (e3 ? n2.state.doc.lines : 1))
        return l2;
      c3 = `
`, s5 = n2.state.doc.line(s5.number + (e3 ? 1 : -1)), r2 = n2.bidiSpans(s5), a4 = b$1.cursor(e3 ? s5.from : s5.to);
    }
    if (h4) {
      if (!h4(c3))
        return l2;
    } else {
      if (!i3)
        return a4;
      h4 = i3(c3);
    }
    l2 = a4;
  }
}
function _f(n2, t3, e3) {
  let i3 = n2.state.charCategorizer(t3), s5 = i3(e3);
  return (r2) => {
    let o2 = i3(r2);
    return s5 == Zt$1.Space && (s5 = o2), s5 == o2;
  };
}
function $f(n2, t3, e3, i3) {
  let s5 = t3.head, r2 = e3 ? 1 : -1;
  if (s5 == (e3 ? n2.state.doc.length : 0))
    return b$1.cursor(s5, t3.assoc);
  let o2 = t3.goalColumn, l2, h4 = n2.contentDOM.getBoundingClientRect(), a4 = n2.coordsAtPos(s5, t3.assoc || -1), c3 = n2.documentTop;
  if (a4)
    o2 == null && (o2 = a4.left - h4.left), l2 = r2 < 0 ? a4.top : a4.bottom;
  else {
    let d4 = n2.viewState.lineBlockAt(s5);
    o2 == null && (o2 = Math.min(h4.right - h4.left, n2.defaultCharacterWidth * (s5 - d4.from))), l2 = (r2 < 0 ? d4.top : d4.bottom) + c3;
  }
  let f2 = h4.left + o2, u3 = i3 ?? n2.viewState.heightOracle.textHeight >> 1;
  for (let d4 = 0; ; d4 += 10) {
    let p2 = l2 + (u3 + d4) * r2, m4 = Ql$1(n2, { x: f2, y: p2 }, false, r2);
    if (p2 < h4.top || p2 > h4.bottom || (r2 < 0 ? m4 < s5 : m4 > s5)) {
      let g2 = n2.docView.coordsForChar(m4), y4 = !g2 || p2 < g2.top ? -1 : 1;
      return b$1.cursor(m4, y4, void 0, o2);
    }
  }
}
function es(n2, t3, e3) {
  for (; ; ) {
    let i3 = 0;
    for (let s5 of n2)
      s5.between(t3 - 1, t3 + 1, (r2, o2, l2) => {
        if (t3 > r2 && t3 < o2) {
          let h4 = i3 || e3 || (t3 - r2 < o2 - t3 ? -1 : 1);
          t3 = h4 < 0 ? r2 : o2, i3 = h4;
        }
      });
    if (!i3)
      return t3;
  }
}
function Ws(n2, t3, e3) {
  let i3 = es(n2.state.facet(ir).map((s5) => s5(n2)), e3.from, t3.head > e3.from ? -1 : 1);
  return i3 == e3.from ? e3 : b$1.cursor(i3, i3 < e3.from ? 1 : -1);
}
class Ff {
  setSelectionOrigin(t3) {
    this.lastSelectionOrigin = t3, this.lastSelectionTime = Date.now();
  }
  constructor(t3) {
    this.view = t3, this.lastKeyCode = 0, this.lastKeyTime = 0, this.lastTouchTime = 0, this.lastFocusTime = 0, this.lastScrollTop = 0, this.lastScrollLeft = 0, this.pendingIOSKey = void 0, this.lastSelectionOrigin = null, this.lastSelectionTime = 0, this.lastEscPress = 0, this.lastContextMenu = 0, this.scrollHandlers = [], this.handlers = /* @__PURE__ */ Object.create(null), this.composing = -1, this.compositionFirstChange = null, this.compositionEndedAt = 0, this.compositionPendingKey = false, this.compositionPendingChange = false, this.mouseSelection = null, this.draggedContent = null, this.handleEvent = this.handleEvent.bind(this), this.notifiedFocused = t3.hasFocus, C$2.safari && t3.contentDOM.addEventListener("input", () => null), C$2.gecko && su(t3.contentDOM.ownerDocument);
  }
  handleEvent(t3) {
    !Yf(this.view, t3) || this.ignoreDuringComposition(t3) || t3.type == "keydown" && this.keydown(t3) || this.runHandlers(t3.type, t3);
  }
  runHandlers(t3, e3) {
    let i3 = this.handlers[t3];
    if (i3) {
      for (let s5 of i3.observers)
        s5(this.view, e3);
      for (let s5 of i3.handlers) {
        if (e3.defaultPrevented)
          break;
        if (s5(this.view, e3)) {
          e3.preventDefault();
          break;
        }
      }
    }
  }
  ensureHandlers(t3) {
    let e3 = zf(t3), i3 = this.handlers, s5 = this.view.contentDOM;
    for (let r2 in e3)
      if (r2 != "scroll") {
        let o2 = !e3[r2].handlers.length, l2 = i3[r2];
        l2 && o2 != !l2.handlers.length && (s5.removeEventListener(r2, this.handleEvent), l2 = null), l2 || s5.addEventListener(r2, this.handleEvent, { passive: o2 });
      }
    for (let r2 in i3)
      r2 != "scroll" && !e3[r2] && s5.removeEventListener(r2, this.handleEvent);
    this.handlers = e3;
  }
  keydown(t3) {
    if (this.lastKeyCode = t3.keyCode, this.lastKeyTime = Date.now(), t3.keyCode == 9 && Date.now() < this.lastEscPress + 2e3)
      return true;
    if (t3.keyCode != 27 && Xl$1.indexOf(t3.keyCode) < 0 && (this.view.inputState.lastEscPress = 0), C$2.android && C$2.chrome && !t3.synthetic && (t3.keyCode == 13 || t3.keyCode == 8))
      return this.view.observer.delayAndroidKey(t3.key, t3.keyCode), true;
    let e3;
    return C$2.ios && !t3.synthetic && !t3.altKey && !t3.metaKey && ((e3 = Jl$1.find((i3) => i3.keyCode == t3.keyCode)) && !t3.ctrlKey || Wf.indexOf(t3.key) > -1 && t3.ctrlKey && !t3.shiftKey) ? (this.pendingIOSKey = e3 || t3, setTimeout(() => this.flushIOSKey(), 250), true) : (t3.keyCode != 229 && this.view.observer.forceFlush(), false);
  }
  flushIOSKey() {
    let t3 = this.pendingIOSKey;
    return t3 ? (this.pendingIOSKey = void 0, Ke$1(this.view.contentDOM, t3.key, t3.keyCode)) : false;
  }
  ignoreDuringComposition(t3) {
    return /^key/.test(t3.type) ? this.composing > 0 ? true : C$2.safari && !C$2.ios && this.compositionPendingKey && Date.now() - this.compositionEndedAt < 100 ? (this.compositionPendingKey = false, true) : false : false;
  }
  startMouseSelection(t3) {
    this.mouseSelection && this.mouseSelection.destroy(), this.mouseSelection = t3;
  }
  update(t3) {
    this.mouseSelection && this.mouseSelection.update(t3), this.draggedContent && t3.docChanged && (this.draggedContent = this.draggedContent.map(t3.changes)), t3.transactions.length && (this.lastKeyCode = this.lastSelectionTime = 0);
  }
  destroy() {
    this.mouseSelection && this.mouseSelection.destroy();
  }
}
function qr$1(n2, t3) {
  return (e3, i3) => {
    try {
      return t3.call(n2, i3, e3);
    } catch (s5) {
      ie$2(e3.state, s5);
    }
  };
}
function zf(n2) {
  let t3 = /* @__PURE__ */ Object.create(null);
  function e3(i3) {
    return t3[i3] || (t3[i3] = { observers: [], handlers: [] });
  }
  for (let i3 of n2) {
    let s5 = i3.spec;
    if (s5 && s5.domEventHandlers)
      for (let r2 in s5.domEventHandlers) {
        let o2 = s5.domEventHandlers[r2];
        o2 && e3(r2).handlers.push(qr$1(i3.value, o2));
      }
    if (s5 && s5.domEventObservers)
      for (let r2 in s5.domEventObservers) {
        let o2 = s5.domEventObservers[r2];
        o2 && e3(r2).observers.push(qr$1(i3.value, o2));
      }
  }
  for (let i3 in Nt$1)
    e3(i3).handlers.push(Nt$1[i3]);
  for (let i3 in It$1)
    e3(i3).observers.push(It$1[i3]);
  return t3;
}
const Jl$1 = [
  { key: "Backspace", keyCode: 8, inputType: "deleteContentBackward" },
  { key: "Enter", keyCode: 13, inputType: "insertParagraph" },
  { key: "Enter", keyCode: 13, inputType: "insertLineBreak" },
  { key: "Delete", keyCode: 46, inputType: "deleteContentForward" }
], Wf = "dthko", Xl$1 = [16, 17, 18, 20, 91, 92, 224, 225], Vi = 6;
function Hi(n2) {
  return Math.max(0, n2) * 0.7 + 8;
}
function jf(n2, t3) {
  return Math.max(Math.abs(n2.clientX - t3.clientX), Math.abs(n2.clientY - t3.clientY));
}
class Kf {
  constructor(t3, e3, i3, s5) {
    this.view = t3, this.startEvent = e3, this.style = i3, this.mustSelect = s5, this.scrollSpeed = { x: 0, y: 0 }, this.scrolling = -1, this.lastEvent = e3, this.scrollParent = rf(t3.contentDOM), this.atoms = t3.state.facet(ir).map((o2) => o2(t3));
    let r2 = t3.contentDOM.ownerDocument;
    r2.addEventListener("mousemove", this.move = this.move.bind(this)), r2.addEventListener("mouseup", this.up = this.up.bind(this)), this.extend = e3.shiftKey, this.multiple = t3.state.facet(H$2.allowMultipleSelections) && qf(t3, e3), this.dragging = Uf(t3, e3) && ih(e3) == 1 ? null : false;
  }
  start(t3) {
    this.dragging === false && this.select(t3);
  }
  move(t3) {
    var e3;
    if (t3.buttons == 0)
      return this.destroy();
    if (this.dragging || this.dragging == null && jf(this.startEvent, t3) < 10)
      return;
    this.select(this.lastEvent = t3);
    let i3 = 0, s5 = 0, r2 = ((e3 = this.scrollParent) === null || e3 === void 0 ? void 0 : e3.getBoundingClientRect()) || { left: 0, top: 0, right: this.view.win.innerWidth, bottom: this.view.win.innerHeight }, o2 = zl$1(this.view);
    t3.clientX - o2.left <= r2.left + Vi ? i3 = -Hi(r2.left - t3.clientX) : t3.clientX + o2.right >= r2.right - Vi && (i3 = Hi(t3.clientX - r2.right)), t3.clientY - o2.top <= r2.top + Vi ? s5 = -Hi(r2.top - t3.clientY) : t3.clientY + o2.bottom >= r2.bottom - Vi && (s5 = Hi(t3.clientY - r2.bottom)), this.setScrollSpeed(i3, s5);
  }
  up(t3) {
    this.dragging == null && this.select(this.lastEvent), this.dragging || t3.preventDefault(), this.destroy();
  }
  destroy() {
    this.setScrollSpeed(0, 0);
    let t3 = this.view.contentDOM.ownerDocument;
    t3.removeEventListener("mousemove", this.move), t3.removeEventListener("mouseup", this.up), this.view.inputState.mouseSelection = this.view.inputState.draggedContent = null;
  }
  setScrollSpeed(t3, e3) {
    this.scrollSpeed = { x: t3, y: e3 }, t3 || e3 ? this.scrolling < 0 && (this.scrolling = setInterval(() => this.scroll(), 50)) : this.scrolling > -1 && (clearInterval(this.scrolling), this.scrolling = -1);
  }
  scroll() {
    this.scrollParent ? (this.scrollParent.scrollLeft += this.scrollSpeed.x, this.scrollParent.scrollTop += this.scrollSpeed.y) : this.view.win.scrollBy(this.scrollSpeed.x, this.scrollSpeed.y), this.dragging === false && this.select(this.lastEvent);
  }
  skipAtoms(t3) {
    let e3 = null;
    for (let i3 = 0; i3 < t3.ranges.length; i3++) {
      let s5 = t3.ranges[i3], r2 = null;
      if (s5.empty) {
        let o2 = es(this.atoms, s5.from, 0);
        o2 != s5.from && (r2 = b$1.cursor(o2, -1));
      } else {
        let o2 = es(this.atoms, s5.from, -1), l2 = es(this.atoms, s5.to, 1);
        (o2 != s5.from || l2 != s5.to) && (r2 = b$1.range(s5.from == s5.anchor ? o2 : l2, s5.from == s5.head ? o2 : l2));
      }
      r2 && (e3 || (e3 = t3.ranges.slice()), e3[i3] = r2);
    }
    return e3 ? b$1.create(e3, t3.mainIndex) : t3;
  }
  select(t3) {
    let { view: e3 } = this, i3 = this.skipAtoms(this.style.get(t3, this.extend, this.multiple));
    (this.mustSelect || !i3.eq(e3.state.selection) || i3.main.assoc != e3.state.selection.main.assoc && this.dragging === false) && this.view.dispatch({
      selection: i3,
      userEvent: "select.pointer"
    }), this.mustSelect = false;
  }
  update(t3) {
    this.style.update(t3) && setTimeout(() => this.select(this.lastEvent), 20);
  }
}
function qf(n2, t3) {
  let e3 = n2.state.facet(Rl$1);
  return e3.length ? e3[0](t3) : C$2.mac ? t3.metaKey : t3.ctrlKey;
}
function Gf(n2, t3) {
  let e3 = n2.state.facet(Ll$1);
  return e3.length ? e3[0](t3) : C$2.mac ? !t3.altKey : !t3.ctrlKey;
}
function Uf(n2, t3) {
  let { main: e3 } = n2.state.selection;
  if (e3.empty)
    return false;
  let i3 = us(n2.root);
  if (!i3 || i3.rangeCount == 0)
    return true;
  let s5 = i3.getRangeAt(0).getClientRects();
  for (let r2 = 0; r2 < s5.length; r2++) {
    let o2 = s5[r2];
    if (o2.left <= t3.clientX && o2.right >= t3.clientX && o2.top <= t3.clientY && o2.bottom >= t3.clientY)
      return true;
  }
  return false;
}
function Yf(n2, t3) {
  if (!t3.bubbles)
    return true;
  if (t3.defaultPrevented)
    return false;
  for (let e3 = t3.target, i3; e3 != n2.contentDOM; e3 = e3.parentNode)
    if (!e3 || e3.nodeType == 11 || (i3 = q.get(e3)) && i3.ignoreEvent(t3))
      return false;
  return true;
}
const Nt$1 = /* @__PURE__ */ Object.create(null), It$1 = /* @__PURE__ */ Object.create(null), Zl$1 = C$2.ie && C$2.ie_version < 15 || C$2.ios && C$2.webkit_version < 604;
function Qf(n2) {
  let t3 = n2.dom.parentNode;
  if (!t3)
    return;
  let e3 = t3.appendChild(document.createElement("textarea"));
  e3.style.cssText = "position: fixed; left: -10000px; top: 10px", e3.focus(), setTimeout(() => {
    n2.focus(), e3.remove(), th(n2, e3.value);
  }, 50);
}
function th(n2, t3) {
  let { state: e3 } = n2, i3, s5 = 1, r2 = e3.toText(t3), o2 = r2.lines == e3.selection.ranges.length;
  if (Dn$1 != null && e3.selection.ranges.every((h4) => h4.empty) && Dn$1 == r2.toString()) {
    let h4 = -1;
    i3 = e3.changeByRange((a4) => {
      let c3 = e3.doc.lineAt(a4.from);
      if (c3.from == h4)
        return { range: a4 };
      h4 = c3.from;
      let f2 = e3.toText((o2 ? r2.line(s5++).text : t3) + e3.lineBreak);
      return {
        changes: { from: c3.from, insert: f2 },
        range: b$1.cursor(a4.from + f2.length)
      };
    });
  } else
    o2 ? i3 = e3.changeByRange((h4) => {
      let a4 = r2.line(s5++);
      return {
        changes: { from: h4.from, to: h4.to, insert: a4.text },
        range: b$1.cursor(h4.from + a4.length)
      };
    }) : i3 = e3.replaceSelection(r2);
  n2.dispatch(i3, {
    userEvent: "input.paste",
    scrollIntoView: true
  });
}
It$1.scroll = (n2) => {
  n2.inputState.lastScrollTop = n2.scrollDOM.scrollTop, n2.inputState.lastScrollLeft = n2.scrollDOM.scrollLeft;
};
Nt$1.keydown = (n2, t3) => (n2.inputState.setSelectionOrigin("select"), t3.keyCode == 27 && (n2.inputState.lastEscPress = Date.now()), false);
It$1.touchstart = (n2, t3) => {
  n2.inputState.lastTouchTime = Date.now(), n2.inputState.setSelectionOrigin("select.pointer");
};
It$1.touchmove = (n2) => {
  n2.inputState.setSelectionOrigin("select.pointer");
};
Nt$1.mousedown = (n2, t3) => {
  if (n2.observer.flush(), n2.inputState.lastTouchTime > Date.now() - 2e3)
    return false;
  let e3 = null;
  for (let i3 of n2.state.facet(El$1))
    if (e3 = i3(n2, t3), e3)
      break;
  if (!e3 && t3.button == 0 && (e3 = Zf(n2, t3)), e3) {
    let i3 = !n2.hasFocus;
    n2.inputState.startMouseSelection(new Kf(n2, t3, e3, i3)), i3 && n2.observer.ignore(() => kl$1(n2.contentDOM));
    let s5 = n2.inputState.mouseSelection;
    if (s5)
      return s5.start(t3), s5.dragging === false;
  }
  return false;
};
function Gr$1(n2, t3, e3, i3) {
  if (i3 == 1)
    return b$1.cursor(t3, e3);
  if (i3 == 2)
    return Rf(n2.state, t3, e3);
  {
    let s5 = Z$2.find(n2.docView, t3), r2 = n2.state.doc.lineAt(s5 ? s5.posAtEnd : t3), o2 = s5 ? s5.posAtStart : r2.from, l2 = s5 ? s5.posAtEnd : r2.to;
    return l2 < n2.state.doc.length && l2 == r2.to && l2++, b$1.range(o2, l2);
  }
}
let eh = (n2, t3) => n2 >= t3.top && n2 <= t3.bottom, Ur$1 = (n2, t3, e3) => eh(t3, e3) && n2 >= e3.left && n2 <= e3.right;
function Jf(n2, t3, e3, i3) {
  let s5 = Z$2.find(n2.docView, t3);
  if (!s5)
    return 1;
  let r2 = t3 - s5.posAtStart;
  if (r2 == 0)
    return 1;
  if (r2 == s5.length)
    return -1;
  let o2 = s5.coordsAt(r2, -1);
  if (o2 && Ur$1(e3, i3, o2))
    return -1;
  let l2 = s5.coordsAt(r2, 1);
  return l2 && Ur$1(e3, i3, l2) ? 1 : o2 && eh(i3, o2) ? -1 : 1;
}
function Yr$1(n2, t3) {
  let e3 = n2.posAtCoords({ x: t3.clientX, y: t3.clientY }, false);
  return { pos: e3, bias: Jf(n2, e3, t3.clientX, t3.clientY) };
}
const Xf = C$2.ie && C$2.ie_version <= 11;
let Qr$1 = null, Jr$1 = 0, Xr$1 = 0;
function ih(n2) {
  if (!Xf)
    return n2.detail;
  let t3 = Qr$1, e3 = Xr$1;
  return Qr$1 = n2, Xr$1 = Date.now(), Jr$1 = !t3 || e3 > Date.now() - 400 && Math.abs(t3.clientX - n2.clientX) < 2 && Math.abs(t3.clientY - n2.clientY) < 2 ? (Jr$1 + 1) % 3 : 1;
}
function Zf(n2, t3) {
  let e3 = Yr$1(n2, t3), i3 = ih(t3), s5 = n2.state.selection;
  return {
    update(r2) {
      r2.docChanged && (e3.pos = r2.changes.mapPos(e3.pos), s5 = s5.map(r2.changes));
    },
    get(r2, o2, l2) {
      let h4 = Yr$1(n2, r2), a4, c3 = Gr$1(n2, h4.pos, h4.bias, i3);
      if (e3.pos != h4.pos && !o2) {
        let f2 = Gr$1(n2, e3.pos, e3.bias, i3), u3 = Math.min(f2.from, c3.from), d4 = Math.max(f2.to, c3.to);
        c3 = u3 < c3.from ? b$1.range(u3, d4) : b$1.range(d4, u3);
      }
      return o2 ? s5.replaceRange(s5.main.extend(c3.from, c3.to)) : l2 && i3 == 1 && s5.ranges.length > 1 && (a4 = tu(s5, h4.pos)) ? a4 : l2 ? s5.addRange(c3) : b$1.create([c3]);
    }
  };
}
function tu(n2, t3) {
  for (let e3 = 0; e3 < n2.ranges.length; e3++) {
    let { from: i3, to: s5 } = n2.ranges[e3];
    if (i3 <= t3 && s5 >= t3)
      return b$1.create(n2.ranges.slice(0, e3).concat(n2.ranges.slice(e3 + 1)), n2.mainIndex == e3 ? 0 : n2.mainIndex - (n2.mainIndex > e3 ? 1 : 0));
  }
  return null;
}
Nt$1.dragstart = (n2, t3) => {
  let { selection: { main: e3 } } = n2.state;
  if (t3.target.draggable) {
    let s5 = n2.docView.nearest(t3.target);
    if (s5 && s5.isWidget) {
      let r2 = s5.posAtStart, o2 = r2 + s5.length;
      (r2 >= e3.to || o2 <= e3.from) && (e3 = b$1.range(r2, o2));
    }
  }
  let { inputState: i3 } = n2;
  return i3.mouseSelection && (i3.mouseSelection.dragging = true), i3.draggedContent = e3, t3.dataTransfer && (t3.dataTransfer.setData("Text", n2.state.sliceDoc(e3.from, e3.to)), t3.dataTransfer.effectAllowed = "copyMove"), false;
};
Nt$1.dragend = (n2) => (n2.inputState.draggedContent = null, false);
function Zr$1(n2, t3, e3, i3) {
  if (!e3)
    return;
  let s5 = n2.posAtCoords({ x: t3.clientX, y: t3.clientY }, false), { draggedContent: r2 } = n2.inputState, o2 = i3 && r2 && Gf(n2, t3) ? { from: r2.from, to: r2.to } : null, l2 = { from: s5, insert: e3 }, h4 = n2.state.changes(o2 ? [o2, l2] : l2);
  n2.focus(), n2.dispatch({
    changes: h4,
    selection: { anchor: h4.mapPos(s5, -1), head: h4.mapPos(s5, 1) },
    userEvent: o2 ? "move.drop" : "input.drop"
  }), n2.inputState.draggedContent = null;
}
Nt$1.drop = (n2, t3) => {
  if (!t3.dataTransfer)
    return false;
  if (n2.state.readOnly)
    return true;
  let e3 = t3.dataTransfer.files;
  if (e3 && e3.length) {
    let i3 = Array(e3.length), s5 = 0, r2 = () => {
      ++s5 == e3.length && Zr$1(n2, t3, i3.filter((o2) => o2 != null).join(n2.state.lineBreak), false);
    };
    for (let o2 = 0; o2 < e3.length; o2++) {
      let l2 = new FileReader();
      l2.onerror = r2, l2.onload = () => {
        /[\x00-\x08\x0e-\x1f]{2}/.test(l2.result) || (i3[o2] = l2.result), r2();
      }, l2.readAsText(e3[o2]);
    }
    return true;
  } else {
    let i3 = t3.dataTransfer.getData("Text");
    if (i3)
      return Zr$1(n2, t3, i3, true), true;
  }
  return false;
};
Nt$1.paste = (n2, t3) => {
  if (n2.state.readOnly)
    return true;
  n2.observer.flush();
  let e3 = Zl$1 ? null : t3.clipboardData;
  return e3 ? (th(n2, e3.getData("text/plain") || e3.getData("text/uri-text")), true) : (Qf(n2), false);
};
function eu(n2, t3) {
  let e3 = n2.dom.parentNode;
  if (!e3)
    return;
  let i3 = e3.appendChild(document.createElement("textarea"));
  i3.style.cssText = "position: fixed; left: -10000px; top: 10px", i3.value = t3, i3.focus(), i3.selectionEnd = t3.length, i3.selectionStart = 0, setTimeout(() => {
    i3.remove(), n2.focus();
  }, 50);
}
function iu(n2) {
  let t3 = [], e3 = [], i3 = false;
  for (let s5 of n2.selection.ranges)
    s5.empty || (t3.push(n2.sliceDoc(s5.from, s5.to)), e3.push(s5));
  if (!t3.length) {
    let s5 = -1;
    for (let { from: r2 } of n2.selection.ranges) {
      let o2 = n2.doc.lineAt(r2);
      o2.number > s5 && (t3.push(o2.text), e3.push({ from: o2.from, to: Math.min(n2.doc.length, o2.to + 1) })), s5 = o2.number;
    }
    i3 = true;
  }
  return { text: t3.join(n2.lineBreak), ranges: e3, linewise: i3 };
}
let Dn$1 = null;
Nt$1.copy = Nt$1.cut = (n2, t3) => {
  let { text: e3, ranges: i3, linewise: s5 } = iu(n2.state);
  if (!e3 && !s5)
    return false;
  Dn$1 = s5 ? e3 : null, t3.type == "cut" && !n2.state.readOnly && n2.dispatch({
    changes: i3,
    scrollIntoView: true,
    userEvent: "delete.cut"
  });
  let r2 = Zl$1 ? null : t3.clipboardData;
  return r2 ? (r2.clearData(), r2.setData("text/plain", e3), true) : (eu(n2, e3), false);
};
const sh = /* @__PURE__ */ ti.define();
function nh(n2, t3) {
  let e3 = [];
  for (let i3 of n2.facet(Vl$1)) {
    let s5 = i3(n2, t3);
    s5 && e3.push(s5);
  }
  return e3 ? n2.update({ effects: e3, annotations: sh.of(true) }) : null;
}
function rh(n2) {
  setTimeout(() => {
    let t3 = n2.hasFocus;
    if (t3 != n2.inputState.notifiedFocused) {
      let e3 = nh(n2.state, t3);
      e3 ? n2.dispatch(e3) : n2.update([]);
    }
  }, 10);
}
It$1.focus = (n2) => {
  n2.inputState.lastFocusTime = Date.now(), !n2.scrollDOM.scrollTop && (n2.inputState.lastScrollTop || n2.inputState.lastScrollLeft) && (n2.scrollDOM.scrollTop = n2.inputState.lastScrollTop, n2.scrollDOM.scrollLeft = n2.inputState.lastScrollLeft), rh(n2);
};
It$1.blur = (n2) => {
  n2.observer.clearSelectionRange(), rh(n2);
};
It$1.compositionstart = It$1.compositionupdate = (n2) => {
  n2.inputState.compositionFirstChange == null && (n2.inputState.compositionFirstChange = true), n2.inputState.composing < 0 && (n2.inputState.composing = 0);
};
It$1.compositionend = (n2) => {
  n2.inputState.composing = -1, n2.inputState.compositionEndedAt = Date.now(), n2.inputState.compositionPendingKey = true, n2.inputState.compositionPendingChange = n2.observer.pendingRecords().length > 0, n2.inputState.compositionFirstChange = null, C$2.chrome && C$2.android ? n2.observer.flushSoon() : n2.inputState.compositionPendingChange ? Promise.resolve().then(() => n2.observer.flush()) : setTimeout(() => {
    n2.inputState.composing < 0 && n2.docView.hasComposition && n2.update([]);
  }, 50);
};
It$1.contextmenu = (n2) => {
  n2.inputState.lastContextMenu = Date.now();
};
Nt$1.beforeinput = (n2, t3) => {
  var e3;
  let i3;
  if (C$2.chrome && C$2.android && (i3 = Jl$1.find((s5) => s5.inputType == t3.inputType)) && (n2.observer.delayAndroidKey(i3.key, i3.keyCode), i3.key == "Backspace" || i3.key == "Delete")) {
    let s5 = ((e3 = window.visualViewport) === null || e3 === void 0 ? void 0 : e3.height) || 0;
    setTimeout(() => {
      var r2;
      (((r2 = window.visualViewport) === null || r2 === void 0 ? void 0 : r2.height) || 0) > s5 + 10 && n2.hasFocus && (n2.contentDOM.blur(), n2.focus());
    }, 100);
  }
  return false;
};
const to$1 = /* @__PURE__ */ new Set();
function su(n2) {
  to$1.has(n2) || (to$1.add(n2), n2.addEventListener("copy", () => {
  }), n2.addEventListener("cut", () => {
  }));
}
const eo$1 = ["pre-wrap", "normal", "pre-line", "break-spaces"];
class nu {
  constructor(t3) {
    this.lineWrapping = t3, this.doc = V$2.empty, this.heightSamples = {}, this.lineHeight = 14, this.charWidth = 7, this.textHeight = 14, this.lineLength = 30, this.heightChanged = false;
  }
  heightForGap(t3, e3) {
    let i3 = this.doc.lineAt(e3).number - this.doc.lineAt(t3).number + 1;
    return this.lineWrapping && (i3 += Math.max(0, Math.ceil((e3 - t3 - i3 * this.lineLength * 0.5) / this.lineLength))), this.lineHeight * i3;
  }
  heightForLine(t3) {
    return this.lineWrapping ? (1 + Math.max(0, Math.ceil((t3 - this.lineLength) / (this.lineLength - 5)))) * this.lineHeight : this.lineHeight;
  }
  setDoc(t3) {
    return this.doc = t3, this;
  }
  mustRefreshForWrapping(t3) {
    return eo$1.indexOf(t3) > -1 != this.lineWrapping;
  }
  mustRefreshForHeights(t3) {
    let e3 = false;
    for (let i3 = 0; i3 < t3.length; i3++) {
      let s5 = t3[i3];
      s5 < 0 ? i3++ : this.heightSamples[Math.floor(s5 * 10)] || (e3 = true, this.heightSamples[Math.floor(s5 * 10)] = true);
    }
    return e3;
  }
  refresh(t3, e3, i3, s5, r2, o2) {
    let l2 = eo$1.indexOf(t3) > -1, h4 = Math.round(e3) != Math.round(this.lineHeight) || this.lineWrapping != l2;
    if (this.lineWrapping = l2, this.lineHeight = e3, this.charWidth = i3, this.textHeight = s5, this.lineLength = r2, h4) {
      this.heightSamples = {};
      for (let a4 = 0; a4 < o2.length; a4++) {
        let c3 = o2[a4];
        c3 < 0 ? a4++ : this.heightSamples[Math.floor(c3 * 10)] = true;
      }
    }
    return h4;
  }
}
class ru {
  constructor(t3, e3) {
    this.from = t3, this.heights = e3, this.index = 0;
  }
  get more() {
    return this.index < this.heights.length;
  }
}
class Gt {
  /**
  @internal
  */
  constructor(t3, e3, i3, s5, r2) {
    this.from = t3, this.length = e3, this.top = i3, this.height = s5, this._content = r2;
  }
  /**
  The type of element this is. When querying lines, this may be
  an array of all the blocks that make up the line.
  */
  get type() {
    return typeof this._content == "number" ? Lt$1.Text : Array.isArray(this._content) ? this._content : this._content.type;
  }
  /**
  The end of the element as a document position.
  */
  get to() {
    return this.from + this.length;
  }
  /**
  The bottom position of the element.
  */
  get bottom() {
    return this.top + this.height;
  }
  /**
  If this is a widget block, this will return the widget
  associated with it.
  */
  get widget() {
    return this._content instanceof be$3 ? this._content.widget : null;
  }
  /**
  If this is a textblock, this holds the number of line breaks
  that appear in widgets inside the block.
  */
  get widgetLineBreaks() {
    return typeof this._content == "number" ? this._content : 0;
  }
  /**
  @internal
  */
  join(t3) {
    let e3 = (Array.isArray(this._content) ? this._content : [this]).concat(Array.isArray(t3._content) ? t3._content : [t3]);
    return new Gt(this.from, this.length + t3.length, this.top, this.height + t3.height, e3);
  }
}
var j$3 = /* @__PURE__ */ function(n2) {
  return n2[n2.ByPos = 0] = "ByPos", n2[n2.ByHeight = 1] = "ByHeight", n2[n2.ByPosNoHeight = 2] = "ByPosNoHeight", n2;
}(j$3 || (j$3 = {}));
const is = 1e-3;
let pt$2 = class pt2 {
  constructor(t3, e3, i3 = 2) {
    this.length = t3, this.height = e3, this.flags = i3;
  }
  get outdated() {
    return (this.flags & 2) > 0;
  }
  set outdated(t3) {
    this.flags = (t3 ? 2 : 0) | this.flags & -3;
  }
  setHeight(t3, e3) {
    this.height != e3 && (Math.abs(this.height - e3) > is && (t3.heightChanged = true), this.height = e3);
  }
  // Base case is to replace a leaf node, which simply builds a tree
  // from the new nodes and returns that (HeightMapBranch and
  // HeightMapGap override this to actually use from/to)
  replace(t3, e3, i3) {
    return pt2.of(i3);
  }
  // Again, these are base cases, and are overridden for branch and gap nodes.
  decomposeLeft(t3, e3) {
    e3.push(this);
  }
  decomposeRight(t3, e3) {
    e3.push(this);
  }
  applyChanges(t3, e3, i3, s5) {
    let r2 = this, o2 = i3.doc;
    for (let l2 = s5.length - 1; l2 >= 0; l2--) {
      let { fromA: h4, toA: a4, fromB: c3, toB: f2 } = s5[l2], u3 = r2.lineAt(h4, j$3.ByPosNoHeight, i3.setDoc(e3), 0, 0), d4 = u3.to >= a4 ? u3 : r2.lineAt(a4, j$3.ByPosNoHeight, i3, 0, 0);
      for (f2 += d4.to - a4, a4 = d4.to; l2 > 0 && u3.from <= s5[l2 - 1].toA; )
        h4 = s5[l2 - 1].fromA, c3 = s5[l2 - 1].fromB, l2--, h4 < u3.from && (u3 = r2.lineAt(h4, j$3.ByPosNoHeight, i3, 0, 0));
      c3 += u3.from - h4, h4 = u3.from;
      let p2 = sr.build(i3.setDoc(o2), t3, c3, f2);
      r2 = r2.replace(h4, a4, p2);
    }
    return r2.updateHeight(i3, 0);
  }
  static empty() {
    return new xt$1(0, 0);
  }
  // nodes uses null values to indicate the position of line breaks.
  // There are never line breaks at the start or end of the array, or
  // two line breaks next to each other, and the array isn't allowed
  // to be empty (same restrictions as return value from the builder).
  static of(t3) {
    if (t3.length == 1)
      return t3[0];
    let e3 = 0, i3 = t3.length, s5 = 0, r2 = 0;
    for (; ; )
      if (e3 == i3)
        if (s5 > r2 * 2) {
          let l2 = t3[e3 - 1];
          l2.break ? t3.splice(--e3, 1, l2.left, null, l2.right) : t3.splice(--e3, 1, l2.left, l2.right), i3 += 1 + l2.break, s5 -= l2.size;
        } else if (r2 > s5 * 2) {
          let l2 = t3[i3];
          l2.break ? t3.splice(i3, 1, l2.left, null, l2.right) : t3.splice(i3, 1, l2.left, l2.right), i3 += 2 + l2.break, r2 -= l2.size;
        } else
          break;
      else if (s5 < r2) {
        let l2 = t3[e3++];
        l2 && (s5 += l2.size);
      } else {
        let l2 = t3[--i3];
        l2 && (r2 += l2.size);
      }
    let o2 = 0;
    return t3[e3 - 1] == null ? (o2 = 1, e3--) : t3[e3] == null && (o2 = 1, i3++), new ou(pt2.of(t3.slice(0, e3)), o2, pt2.of(t3.slice(i3)));
  }
};
pt$2.prototype.size = 1;
class oh extends pt$2 {
  constructor(t3, e3, i3) {
    super(t3, e3), this.deco = i3;
  }
  blockAt(t3, e3, i3, s5) {
    return new Gt(s5, this.length, i3, this.height, this.deco || 0);
  }
  lineAt(t3, e3, i3, s5, r2) {
    return this.blockAt(0, i3, s5, r2);
  }
  forEachLine(t3, e3, i3, s5, r2, o2) {
    t3 <= r2 + this.length && e3 >= r2 && o2(this.blockAt(0, i3, s5, r2));
  }
  updateHeight(t3, e3 = 0, i3 = false, s5) {
    return s5 && s5.from <= e3 && s5.more && this.setHeight(t3, s5.heights[s5.index++]), this.outdated = false, this;
  }
  toString() {
    return `block(${this.length})`;
  }
}
let xt$1 = class xt2 extends oh {
  constructor(t3, e3) {
    super(t3, e3, null), this.collapsed = 0, this.widgetHeight = 0, this.breaks = 0;
  }
  blockAt(t3, e3, i3, s5) {
    return new Gt(s5, this.length, i3, this.height, this.breaks);
  }
  replace(t3, e3, i3) {
    let s5 = i3[0];
    return i3.length == 1 && (s5 instanceof xt2 || s5 instanceof ot$2 && s5.flags & 4) && Math.abs(this.length - s5.length) < 10 ? (s5 instanceof ot$2 ? s5 = new xt2(s5.length, this.height) : s5.height = this.height, this.outdated || (s5.outdated = false), s5) : pt$2.of(i3);
  }
  updateHeight(t3, e3 = 0, i3 = false, s5) {
    return s5 && s5.from <= e3 && s5.more ? this.setHeight(t3, s5.heights[s5.index++]) : (i3 || this.outdated) && this.setHeight(t3, Math.max(this.widgetHeight, t3.heightForLine(this.length - this.collapsed)) + this.breaks * t3.lineHeight), this.outdated = false, this;
  }
  toString() {
    return `line(${this.length}${this.collapsed ? -this.collapsed : ""}${this.widgetHeight ? ":" + this.widgetHeight : ""})`;
  }
};
let ot$2 = class ot2 extends pt$2 {
  constructor(t3) {
    super(t3, 0);
  }
  heightMetrics(t3, e3) {
    let i3 = t3.doc.lineAt(e3).number, s5 = t3.doc.lineAt(e3 + this.length).number, r2 = s5 - i3 + 1, o2, l2 = 0;
    if (t3.lineWrapping) {
      let h4 = Math.min(this.height, t3.lineHeight * r2);
      o2 = h4 / r2, this.length > r2 + 1 && (l2 = (this.height - h4) / (this.length - r2 - 1));
    } else
      o2 = this.height / r2;
    return { firstLine: i3, lastLine: s5, perLine: o2, perChar: l2 };
  }
  blockAt(t3, e3, i3, s5) {
    let { firstLine: r2, lastLine: o2, perLine: l2, perChar: h4 } = this.heightMetrics(e3, s5);
    if (e3.lineWrapping) {
      let a4 = s5 + Math.round(Math.max(0, Math.min(1, (t3 - i3) / this.height)) * this.length), c3 = e3.doc.lineAt(a4), f2 = l2 + c3.length * h4, u3 = Math.max(i3, t3 - f2 / 2);
      return new Gt(c3.from, c3.length, u3, f2, 0);
    } else {
      let a4 = Math.max(0, Math.min(o2 - r2, Math.floor((t3 - i3) / l2))), { from: c3, length: f2 } = e3.doc.line(r2 + a4);
      return new Gt(c3, f2, i3 + l2 * a4, l2, 0);
    }
  }
  lineAt(t3, e3, i3, s5, r2) {
    if (e3 == j$3.ByHeight)
      return this.blockAt(t3, i3, s5, r2);
    if (e3 == j$3.ByPosNoHeight) {
      let { from: d4, to: p2 } = i3.doc.lineAt(t3);
      return new Gt(d4, p2 - d4, 0, 0, 0);
    }
    let { firstLine: o2, perLine: l2, perChar: h4 } = this.heightMetrics(i3, r2), a4 = i3.doc.lineAt(t3), c3 = l2 + a4.length * h4, f2 = a4.number - o2, u3 = s5 + l2 * f2 + h4 * (a4.from - r2 - f2);
    return new Gt(a4.from, a4.length, Math.max(s5, Math.min(u3, s5 + this.height - c3)), c3, 0);
  }
  forEachLine(t3, e3, i3, s5, r2, o2) {
    t3 = Math.max(t3, r2), e3 = Math.min(e3, r2 + this.length);
    let { firstLine: l2, perLine: h4, perChar: a4 } = this.heightMetrics(i3, r2);
    for (let c3 = t3, f2 = s5; c3 <= e3; ) {
      let u3 = i3.doc.lineAt(c3);
      if (c3 == t3) {
        let p2 = u3.number - l2;
        f2 += h4 * p2 + a4 * (t3 - r2 - p2);
      }
      let d4 = h4 + a4 * u3.length;
      o2(new Gt(u3.from, u3.length, f2, d4, 0)), f2 += d4, c3 = u3.to + 1;
    }
  }
  replace(t3, e3, i3) {
    let s5 = this.length - e3;
    if (s5 > 0) {
      let r2 = i3[i3.length - 1];
      r2 instanceof ot2 ? i3[i3.length - 1] = new ot2(r2.length + s5) : i3.push(null, new ot2(s5 - 1));
    }
    if (t3 > 0) {
      let r2 = i3[0];
      r2 instanceof ot2 ? i3[0] = new ot2(t3 + r2.length) : i3.unshift(new ot2(t3 - 1), null);
    }
    return pt$2.of(i3);
  }
  decomposeLeft(t3, e3) {
    e3.push(new ot2(t3 - 1), null);
  }
  decomposeRight(t3, e3) {
    e3.push(null, new ot2(this.length - t3 - 1));
  }
  updateHeight(t3, e3 = 0, i3 = false, s5) {
    let r2 = e3 + this.length;
    if (s5 && s5.from <= e3 + this.length && s5.more) {
      let o2 = [], l2 = Math.max(e3, s5.from), h4 = -1;
      for (s5.from > e3 && o2.push(new ot2(s5.from - e3 - 1).updateHeight(t3, e3)); l2 <= r2 && s5.more; ) {
        let c3 = t3.doc.lineAt(l2).length;
        o2.length && o2.push(null);
        let f2 = s5.heights[s5.index++];
        h4 == -1 ? h4 = f2 : Math.abs(f2 - h4) >= is && (h4 = -2);
        let u3 = new xt$1(c3, f2);
        u3.outdated = false, o2.push(u3), l2 += c3 + 1;
      }
      l2 <= r2 && o2.push(null, new ot2(r2 - l2).updateHeight(t3, l2));
      let a4 = pt$2.of(o2);
      return (h4 < 0 || Math.abs(a4.height - this.height) >= is || Math.abs(h4 - this.heightMetrics(t3, e3).perLine) >= is) && (t3.heightChanged = true), a4;
    } else
      (i3 || this.outdated) && (this.setHeight(t3, t3.heightForGap(e3, e3 + this.length)), this.outdated = false);
    return this;
  }
  toString() {
    return `gap(${this.length})`;
  }
};
class ou extends pt$2 {
  constructor(t3, e3, i3) {
    super(t3.length + e3 + i3.length, t3.height + i3.height, e3 | (t3.outdated || i3.outdated ? 2 : 0)), this.left = t3, this.right = i3, this.size = t3.size + i3.size;
  }
  get break() {
    return this.flags & 1;
  }
  blockAt(t3, e3, i3, s5) {
    let r2 = i3 + this.left.height;
    return t3 < r2 ? this.left.blockAt(t3, e3, i3, s5) : this.right.blockAt(t3, e3, r2, s5 + this.left.length + this.break);
  }
  lineAt(t3, e3, i3, s5, r2) {
    let o2 = s5 + this.left.height, l2 = r2 + this.left.length + this.break, h4 = e3 == j$3.ByHeight ? t3 < o2 : t3 < l2, a4 = h4 ? this.left.lineAt(t3, e3, i3, s5, r2) : this.right.lineAt(t3, e3, i3, o2, l2);
    if (this.break || (h4 ? a4.to < l2 : a4.from > l2))
      return a4;
    let c3 = e3 == j$3.ByPosNoHeight ? j$3.ByPosNoHeight : j$3.ByPos;
    return h4 ? a4.join(this.right.lineAt(l2, c3, i3, o2, l2)) : this.left.lineAt(l2, c3, i3, s5, r2).join(a4);
  }
  forEachLine(t3, e3, i3, s5, r2, o2) {
    let l2 = s5 + this.left.height, h4 = r2 + this.left.length + this.break;
    if (this.break)
      t3 < h4 && this.left.forEachLine(t3, e3, i3, s5, r2, o2), e3 >= h4 && this.right.forEachLine(t3, e3, i3, l2, h4, o2);
    else {
      let a4 = this.lineAt(h4, j$3.ByPos, i3, s5, r2);
      t3 < a4.from && this.left.forEachLine(t3, a4.from - 1, i3, s5, r2, o2), a4.to >= t3 && a4.from <= e3 && o2(a4), e3 > a4.to && this.right.forEachLine(a4.to + 1, e3, i3, l2, h4, o2);
    }
  }
  replace(t3, e3, i3) {
    let s5 = this.left.length + this.break;
    if (e3 < s5)
      return this.balanced(this.left.replace(t3, e3, i3), this.right);
    if (t3 > this.left.length)
      return this.balanced(this.left, this.right.replace(t3 - s5, e3 - s5, i3));
    let r2 = [];
    t3 > 0 && this.decomposeLeft(t3, r2);
    let o2 = r2.length;
    for (let l2 of i3)
      r2.push(l2);
    if (t3 > 0 && io$1(r2, o2 - 1), e3 < this.length) {
      let l2 = r2.length;
      this.decomposeRight(e3, r2), io$1(r2, l2);
    }
    return pt$2.of(r2);
  }
  decomposeLeft(t3, e3) {
    let i3 = this.left.length;
    if (t3 <= i3)
      return this.left.decomposeLeft(t3, e3);
    e3.push(this.left), this.break && (i3++, t3 >= i3 && e3.push(null)), t3 > i3 && this.right.decomposeLeft(t3 - i3, e3);
  }
  decomposeRight(t3, e3) {
    let i3 = this.left.length, s5 = i3 + this.break;
    if (t3 >= s5)
      return this.right.decomposeRight(t3 - s5, e3);
    t3 < i3 && this.left.decomposeRight(t3, e3), this.break && t3 < s5 && e3.push(null), e3.push(this.right);
  }
  balanced(t3, e3) {
    return t3.size > 2 * e3.size || e3.size > 2 * t3.size ? pt$2.of(this.break ? [t3, null, e3] : [t3, e3]) : (this.left = t3, this.right = e3, this.height = t3.height + e3.height, this.outdated = t3.outdated || e3.outdated, this.size = t3.size + e3.size, this.length = t3.length + this.break + e3.length, this);
  }
  updateHeight(t3, e3 = 0, i3 = false, s5) {
    let { left: r2, right: o2 } = this, l2 = e3 + r2.length + this.break, h4 = null;
    return s5 && s5.from <= e3 + r2.length && s5.more ? h4 = r2 = r2.updateHeight(t3, e3, i3, s5) : r2.updateHeight(t3, e3, i3), s5 && s5.from <= l2 + o2.length && s5.more ? h4 = o2 = o2.updateHeight(t3, l2, i3, s5) : o2.updateHeight(t3, l2, i3), h4 ? this.balanced(r2, o2) : (this.height = this.left.height + this.right.height, this.outdated = false, this);
  }
  toString() {
    return this.left + (this.break ? " " : "-") + this.right;
  }
}
function io$1(n2, t3) {
  let e3, i3;
  n2[t3] == null && (e3 = n2[t3 - 1]) instanceof ot$2 && (i3 = n2[t3 + 1]) instanceof ot$2 && n2.splice(t3 - 1, 3, new ot$2(e3.length + 1 + i3.length));
}
const lu = 5;
class sr {
  constructor(t3, e3) {
    this.pos = t3, this.oracle = e3, this.nodes = [], this.lineStart = -1, this.lineEnd = -1, this.covering = null, this.writtenTo = t3;
  }
  get isCovered() {
    return this.covering && this.nodes[this.nodes.length - 1] == this.covering;
  }
  span(t3, e3) {
    if (this.lineStart > -1) {
      let i3 = Math.min(e3, this.lineEnd), s5 = this.nodes[this.nodes.length - 1];
      s5 instanceof xt$1 ? s5.length += i3 - this.pos : (i3 > this.pos || !this.isCovered) && this.nodes.push(new xt$1(i3 - this.pos, -1)), this.writtenTo = i3, e3 > i3 && (this.nodes.push(null), this.writtenTo++, this.lineStart = -1);
    }
    this.pos = e3;
  }
  point(t3, e3, i3) {
    if (t3 < e3 || i3.heightRelevant) {
      let s5 = i3.widget ? i3.widget.estimatedHeight : 0, r2 = i3.widget ? i3.widget.lineBreaks : 0;
      s5 < 0 && (s5 = this.oracle.lineHeight);
      let o2 = e3 - t3;
      i3.block ? this.addBlock(new oh(o2, s5, i3)) : (o2 || r2 || s5 >= lu) && this.addLineDeco(s5, r2, o2);
    } else
      e3 > t3 && this.span(t3, e3);
    this.lineEnd > -1 && this.lineEnd < this.pos && (this.lineEnd = this.oracle.doc.lineAt(this.pos).to);
  }
  enterLine() {
    if (this.lineStart > -1)
      return;
    let { from: t3, to: e3 } = this.oracle.doc.lineAt(this.pos);
    this.lineStart = t3, this.lineEnd = e3, this.writtenTo < t3 && ((this.writtenTo < t3 - 1 || this.nodes[this.nodes.length - 1] == null) && this.nodes.push(this.blankContent(this.writtenTo, t3 - 1)), this.nodes.push(null)), this.pos > t3 && this.nodes.push(new xt$1(this.pos - t3, -1)), this.writtenTo = this.pos;
  }
  blankContent(t3, e3) {
    let i3 = new ot$2(e3 - t3);
    return this.oracle.doc.lineAt(t3).to == e3 && (i3.flags |= 4), i3;
  }
  ensureLine() {
    this.enterLine();
    let t3 = this.nodes.length ? this.nodes[this.nodes.length - 1] : null;
    if (t3 instanceof xt$1)
      return t3;
    let e3 = new xt$1(0, -1);
    return this.nodes.push(e3), e3;
  }
  addBlock(t3) {
    this.enterLine();
    let e3 = t3.deco;
    e3 && e3.startSide > 0 && !this.isCovered && this.ensureLine(), this.nodes.push(t3), this.writtenTo = this.pos = this.pos + t3.length, e3 && e3.endSide > 0 && (this.covering = t3);
  }
  addLineDeco(t3, e3, i3) {
    let s5 = this.ensureLine();
    s5.length += i3, s5.collapsed += i3, s5.widgetHeight = Math.max(s5.widgetHeight, t3), s5.breaks += e3, this.writtenTo = this.pos = this.pos + i3;
  }
  finish(t3) {
    let e3 = this.nodes.length == 0 ? null : this.nodes[this.nodes.length - 1];
    this.lineStart > -1 && !(e3 instanceof xt$1) && !this.isCovered ? this.nodes.push(new xt$1(0, -1)) : (this.writtenTo < this.pos || e3 == null) && this.nodes.push(this.blankContent(this.writtenTo, this.pos));
    let i3 = t3;
    for (let s5 of this.nodes)
      s5 instanceof xt$1 && s5.updateHeight(this.oracle, i3), i3 += s5 ? s5.length : 1;
    return this.nodes;
  }
  // Always called with a region that on both sides either stretches
  // to a line break or the end of the document.
  // The returned array uses null to indicate line breaks, but never
  // starts or ends in a line break, or has multiple line breaks next
  // to each other.
  static build(t3, e3, i3, s5) {
    let r2 = new sr(i3, t3);
    return $$3.spans(e3, i3, s5, r2, 0), r2.finish(i3);
  }
}
function hu(n2, t3, e3) {
  let i3 = new au();
  return $$3.compare(n2, t3, e3, i3, 0), i3.changes;
}
class au {
  constructor() {
    this.changes = [];
  }
  compareRange() {
  }
  comparePoint(t3, e3, i3, s5) {
    (t3 < e3 || i3 && i3.heightRelevant || s5 && s5.heightRelevant) && Sn$1(t3, e3, this.changes, 5);
  }
}
function cu(n2, t3) {
  let e3 = n2.getBoundingClientRect(), i3 = n2.ownerDocument, s5 = i3.defaultView || window, r2 = Math.max(0, e3.left), o2 = Math.min(s5.innerWidth, e3.right), l2 = Math.max(0, e3.top), h4 = Math.min(s5.innerHeight, e3.bottom);
  for (let a4 = n2.parentNode; a4 && a4 != i3.body; )
    if (a4.nodeType == 1) {
      let c3 = a4, f2 = window.getComputedStyle(c3);
      if ((c3.scrollHeight > c3.clientHeight || c3.scrollWidth > c3.clientWidth) && f2.overflow != "visible") {
        let u3 = c3.getBoundingClientRect();
        r2 = Math.max(r2, u3.left), o2 = Math.min(o2, u3.right), l2 = Math.max(l2, u3.top), h4 = a4 == n2.parentNode ? u3.bottom : Math.min(h4, u3.bottom);
      }
      a4 = f2.position == "absolute" || f2.position == "fixed" ? c3.offsetParent : c3.parentNode;
    } else if (a4.nodeType == 11)
      a4 = a4.host;
    else
      break;
  return {
    left: r2 - e3.left,
    right: Math.max(r2, o2) - e3.left,
    top: l2 - (e3.top + t3),
    bottom: Math.max(l2, h4) - (e3.top + t3)
  };
}
function fu(n2, t3) {
  let e3 = n2.getBoundingClientRect();
  return {
    left: 0,
    right: e3.right - e3.left,
    top: t3,
    bottom: e3.bottom - (e3.top + t3)
  };
}
class js {
  constructor(t3, e3, i3) {
    this.from = t3, this.to = e3, this.size = i3;
  }
  static same(t3, e3) {
    if (t3.length != e3.length)
      return false;
    for (let i3 = 0; i3 < t3.length; i3++) {
      let s5 = t3[i3], r2 = e3[i3];
      if (s5.from != r2.from || s5.to != r2.to || s5.size != r2.size)
        return false;
    }
    return true;
  }
  draw(t3, e3) {
    return N$5.replace({
      widget: new uu(this.size * (e3 ? t3.scaleY : t3.scaleX), e3)
    }).range(this.from, this.to);
  }
}
class uu extends Se$5 {
  constructor(t3, e3) {
    super(), this.size = t3, this.vertical = e3;
  }
  eq(t3) {
    return t3.size == this.size && t3.vertical == this.vertical;
  }
  toDOM() {
    let t3 = document.createElement("div");
    return this.vertical ? t3.style.height = this.size + "px" : (t3.style.width = this.size + "px", t3.style.height = "2px", t3.style.display = "inline-block"), t3;
  }
  get estimatedHeight() {
    return this.vertical ? this.size : -1;
  }
}
let so$1 = class so2 {
  constructor(t3) {
    this.state = t3, this.pixelViewport = { left: 0, right: window.innerWidth, top: 0, bottom: 0 }, this.inView = true, this.paddingTop = 0, this.paddingBottom = 0, this.contentDOMWidth = 0, this.contentDOMHeight = 0, this.editorHeight = 0, this.editorWidth = 0, this.scrollTop = 0, this.scrolledToBottom = true, this.scaleX = 1, this.scaleY = 1, this.scrollAnchorPos = 0, this.scrollAnchorHeight = -1, this.scaler = no$1, this.scrollTarget = null, this.printing = false, this.mustMeasureContent = true, this.defaultTextDirection = tt$2.LTR, this.visibleRanges = [], this.mustEnforceCursorAssoc = false;
    let e3 = t3.facet(er).some((i3) => typeof i3 != "function" && i3.class == "cm-lineWrapping");
    this.heightOracle = new nu(e3), this.stateDeco = t3.facet(xi).filter((i3) => typeof i3 != "function"), this.heightMap = pt$2.empty().applyChanges(this.stateDeco, V$2.empty, this.heightOracle.setDoc(t3.doc), [new Mt(0, 0, 0, t3.doc.length)]), this.viewport = this.getViewport(0, null), this.updateViewportLines(), this.updateForViewport(), this.lineGaps = this.ensureLineGaps([]), this.lineGapDeco = N$5.set(this.lineGaps.map((i3) => i3.draw(this, false))), this.computeVisibleRanges();
  }
  updateForViewport() {
    let t3 = [this.viewport], { main: e3 } = this.state.selection;
    for (let i3 = 0; i3 <= 1; i3++) {
      let s5 = i3 ? e3.head : e3.anchor;
      if (!t3.some(({ from: r2, to: o2 }) => s5 >= r2 && s5 <= o2)) {
        let { from: r2, to: o2 } = this.lineBlockAt(s5);
        t3.push(new _i(r2, o2));
      }
    }
    this.viewports = t3.sort((i3, s5) => i3.from - s5.from), this.scaler = this.heightMap.height <= 7e6 ? no$1 : new gu(this.heightOracle, this.heightMap, this.viewports);
  }
  updateViewportLines() {
    this.viewportLines = [], this.heightMap.forEachLine(this.viewport.from, this.viewport.to, this.heightOracle.setDoc(this.state.doc), 0, 0, (t3) => {
      this.viewportLines.push(this.scaler.scale == 1 ? t3 : ci(t3, this.scaler));
    });
  }
  update(t3, e3 = null) {
    this.state = t3.state;
    let i3 = this.stateDeco;
    this.stateDeco = this.state.facet(xi).filter((c3) => typeof c3 != "function");
    let s5 = t3.changedRanges, r2 = Mt.extendWithRanges(s5, hu(i3, this.stateDeco, t3 ? t3.changes : it$1.empty(this.state.doc.length))), o2 = this.heightMap.height, l2 = this.scrolledToBottom ? null : this.scrollAnchorAt(this.scrollTop);
    this.heightMap = this.heightMap.applyChanges(this.stateDeco, t3.startState.doc, this.heightOracle.setDoc(this.state.doc), r2), this.heightMap.height != o2 && (t3.flags |= 2), l2 ? (this.scrollAnchorPos = t3.changes.mapPos(l2.from, -1), this.scrollAnchorHeight = l2.top) : (this.scrollAnchorPos = -1, this.scrollAnchorHeight = this.heightMap.height);
    let h4 = r2.length ? this.mapViewport(this.viewport, t3.changes) : this.viewport;
    (e3 && (e3.range.head < h4.from || e3.range.head > h4.to) || !this.viewportIsAppropriate(h4)) && (h4 = this.getViewport(0, e3));
    let a4 = !t3.changes.empty || t3.flags & 2 || h4.from != this.viewport.from || h4.to != this.viewport.to;
    this.viewport = h4, this.updateForViewport(), a4 && this.updateViewportLines(), (this.lineGaps.length || this.viewport.to - this.viewport.from > 4e3) && this.updateLineGaps(this.ensureLineGaps(this.mapLineGaps(this.lineGaps, t3.changes))), t3.flags |= this.computeVisibleRanges(), e3 && (this.scrollTarget = e3), !this.mustEnforceCursorAssoc && t3.selectionSet && t3.view.lineWrapping && t3.state.selection.main.empty && t3.state.selection.main.assoc && !t3.state.facet(pf) && (this.mustEnforceCursorAssoc = true);
  }
  measure(t3) {
    let e3 = t3.contentDOM, i3 = window.getComputedStyle(e3), s5 = this.heightOracle, r2 = i3.whiteSpace;
    this.defaultTextDirection = i3.direction == "rtl" ? tt$2.RTL : tt$2.LTR;
    let o2 = this.heightOracle.mustRefreshForWrapping(r2), l2 = e3.getBoundingClientRect(), h4 = o2 || this.mustMeasureContent || this.contentDOMHeight != l2.height;
    this.contentDOMHeight = l2.height, this.mustMeasureContent = false;
    let a4 = 0, c3 = 0;
    if (l2.width && l2.height) {
      let v2 = l2.width / e3.offsetWidth, A2 = l2.height / e3.offsetHeight;
      (v2 > 0.995 && v2 < 1.005 || !isFinite(v2) || Math.abs(l2.width - e3.offsetWidth) < 1) && (v2 = 1), (A2 > 0.995 && A2 < 1.005 || !isFinite(A2) || Math.abs(l2.height - e3.offsetHeight) < 1) && (A2 = 1), (this.scaleX != v2 || this.scaleY != A2) && (this.scaleX = v2, this.scaleY = A2, a4 |= 8, o2 = h4 = true);
    }
    let f2 = (parseInt(i3.paddingTop) || 0) * this.scaleY, u3 = (parseInt(i3.paddingBottom) || 0) * this.scaleY;
    (this.paddingTop != f2 || this.paddingBottom != u3) && (this.paddingTop = f2, this.paddingBottom = u3, a4 |= 10), this.editorWidth != t3.scrollDOM.clientWidth && (s5.lineWrapping && (h4 = true), this.editorWidth = t3.scrollDOM.clientWidth, a4 |= 8);
    let d4 = t3.scrollDOM.scrollTop * this.scaleY;
    this.scrollTop != d4 && (this.scrollAnchorHeight = -1, this.scrollTop = d4), this.scrolledToBottom = vl$1(t3.scrollDOM);
    let p2 = (this.printing ? fu : cu)(e3, this.paddingTop), m4 = p2.top - this.pixelViewport.top, g2 = p2.bottom - this.pixelViewport.bottom;
    this.pixelViewport = p2;
    let y4 = this.pixelViewport.bottom > this.pixelViewport.top && this.pixelViewport.right > this.pixelViewport.left;
    if (y4 != this.inView && (this.inView = y4, y4 && (h4 = true)), !this.inView && !this.scrollTarget)
      return 0;
    let x3 = l2.width;
    if ((this.contentDOMWidth != x3 || this.editorHeight != t3.scrollDOM.clientHeight) && (this.contentDOMWidth = l2.width, this.editorHeight = t3.scrollDOM.clientHeight, a4 |= 8), h4) {
      let v2 = t3.docView.measureVisibleLineHeights(this.viewport);
      if (s5.mustRefreshForHeights(v2) && (o2 = true), o2 || s5.lineWrapping && Math.abs(x3 - this.contentDOMWidth) > s5.charWidth) {
        let { lineHeight: A2, charWidth: P2, textHeight: M4 } = t3.docView.measureTextSize();
        o2 = A2 > 0 && s5.refresh(r2, A2, P2, M4, x3 / P2, v2), o2 && (t3.docView.minWidth = 0, a4 |= 8);
      }
      m4 > 0 && g2 > 0 ? c3 = Math.max(m4, g2) : m4 < 0 && g2 < 0 && (c3 = Math.min(m4, g2)), s5.heightChanged = false;
      for (let A2 of this.viewports) {
        let P2 = A2.from == this.viewport.from ? v2 : t3.docView.measureVisibleLineHeights(A2);
        this.heightMap = (o2 ? pt$2.empty().applyChanges(this.stateDeco, V$2.empty, this.heightOracle, [new Mt(0, 0, 0, t3.state.doc.length)]) : this.heightMap).updateHeight(s5, 0, o2, new ru(A2.from, P2));
      }
      s5.heightChanged && (a4 |= 2);
    }
    let S4 = !this.viewportIsAppropriate(this.viewport, c3) || this.scrollTarget && (this.scrollTarget.range.head < this.viewport.from || this.scrollTarget.range.head > this.viewport.to);
    return S4 && (this.viewport = this.getViewport(c3, this.scrollTarget)), this.updateForViewport(), (a4 & 2 || S4) && this.updateViewportLines(), (this.lineGaps.length || this.viewport.to - this.viewport.from > 4e3) && this.updateLineGaps(this.ensureLineGaps(o2 ? [] : this.lineGaps, t3)), a4 |= this.computeVisibleRanges(), this.mustEnforceCursorAssoc && (this.mustEnforceCursorAssoc = false, t3.docView.enforceCursorAssoc()), a4;
  }
  get visibleTop() {
    return this.scaler.fromDOM(this.pixelViewport.top);
  }
  get visibleBottom() {
    return this.scaler.fromDOM(this.pixelViewport.bottom);
  }
  getViewport(t3, e3) {
    let i3 = 0.5 - Math.max(-0.5, Math.min(0.5, t3 / 1e3 / 2)), s5 = this.heightMap, r2 = this.heightOracle, { visibleTop: o2, visibleBottom: l2 } = this, h4 = new _i(s5.lineAt(o2 - i3 * 1e3, j$3.ByHeight, r2, 0, 0).from, s5.lineAt(l2 + (1 - i3) * 1e3, j$3.ByHeight, r2, 0, 0).to);
    if (e3) {
      let { head: a4 } = e3.range;
      if (a4 < h4.from || a4 > h4.to) {
        let c3 = Math.min(this.editorHeight, this.pixelViewport.bottom - this.pixelViewport.top), f2 = s5.lineAt(a4, j$3.ByPos, r2, 0, 0), u3;
        e3.y == "center" ? u3 = (f2.top + f2.bottom) / 2 - c3 / 2 : e3.y == "start" || e3.y == "nearest" && a4 < h4.from ? u3 = f2.top : u3 = f2.bottom - c3, h4 = new _i(s5.lineAt(u3 - 1e3 / 2, j$3.ByHeight, r2, 0, 0).from, s5.lineAt(u3 + c3 + 1e3 / 2, j$3.ByHeight, r2, 0, 0).to);
      }
    }
    return h4;
  }
  mapViewport(t3, e3) {
    let i3 = e3.mapPos(t3.from, -1), s5 = e3.mapPos(t3.to, 1);
    return new _i(this.heightMap.lineAt(i3, j$3.ByPos, this.heightOracle, 0, 0).from, this.heightMap.lineAt(s5, j$3.ByPos, this.heightOracle, 0, 0).to);
  }
  // Checks if a given viewport covers the visible part of the
  // document and not too much beyond that.
  viewportIsAppropriate({ from: t3, to: e3 }, i3 = 0) {
    if (!this.inView)
      return true;
    let { top: s5 } = this.heightMap.lineAt(t3, j$3.ByPos, this.heightOracle, 0, 0), { bottom: r2 } = this.heightMap.lineAt(e3, j$3.ByPos, this.heightOracle, 0, 0), { visibleTop: o2, visibleBottom: l2 } = this;
    return (t3 == 0 || s5 <= o2 - Math.max(10, Math.min(
      -i3,
      250
      /* VP.MaxCoverMargin */
    ))) && (e3 == this.state.doc.length || r2 >= l2 + Math.max(10, Math.min(
      i3,
      250
      /* VP.MaxCoverMargin */
    ))) && s5 > o2 - 2 * 1e3 && r2 < l2 + 2 * 1e3;
  }
  mapLineGaps(t3, e3) {
    if (!t3.length || e3.empty)
      return t3;
    let i3 = [];
    for (let s5 of t3)
      e3.touchesRange(s5.from, s5.to) || i3.push(new js(e3.mapPos(s5.from), e3.mapPos(s5.to), s5.size));
    return i3;
  }
  // Computes positions in the viewport where the start or end of a
  // line should be hidden, trying to reuse existing line gaps when
  // appropriate to avoid unneccesary redraws.
  // Uses crude character-counting for the positioning and sizing,
  // since actual DOM coordinates aren't always available and
  // predictable. Relies on generous margins (see LG.Margin) to hide
  // the artifacts this might produce from the user.
  ensureLineGaps(t3, e3) {
    let i3 = this.heightOracle.lineWrapping, s5 = i3 ? 1e4 : 2e3, r2 = s5 >> 1, o2 = s5 << 1;
    if (this.defaultTextDirection != tt$2.LTR && !i3)
      return [];
    let l2 = [], h4 = (a4, c3, f2, u3) => {
      if (c3 - a4 < r2)
        return;
      let d4 = this.state.selection.main, p2 = [d4.from];
      d4.empty || p2.push(d4.to);
      for (let g2 of p2)
        if (g2 > a4 && g2 < c3) {
          h4(a4, g2 - 10, f2, u3), h4(g2 + 10, c3, f2, u3);
          return;
        }
      let m4 = pu(t3, (g2) => g2.from >= f2.from && g2.to <= f2.to && Math.abs(g2.from - a4) < r2 && Math.abs(g2.to - c3) < r2 && !p2.some((y4) => g2.from < y4 && g2.to > y4));
      if (!m4) {
        if (c3 < f2.to && e3 && i3 && e3.visibleRanges.some((g2) => g2.from <= c3 && g2.to >= c3)) {
          let g2 = e3.moveToLineBoundary(b$1.cursor(c3), false, true).head;
          g2 > a4 && (c3 = g2);
        }
        m4 = new js(a4, c3, this.gapSize(f2, a4, c3, u3));
      }
      l2.push(m4);
    };
    for (let a4 of this.viewportLines) {
      if (a4.length < o2)
        continue;
      let c3 = du(a4.from, a4.to, this.stateDeco);
      if (c3.total < o2)
        continue;
      let f2 = this.scrollTarget ? this.scrollTarget.range.head : null, u3, d4;
      if (i3) {
        let p2 = s5 / this.heightOracle.lineLength * this.heightOracle.lineHeight, m4, g2;
        if (f2 != null) {
          let y4 = Fi(c3, f2), x3 = ((this.visibleBottom - this.visibleTop) / 2 + p2) / a4.height;
          m4 = y4 - x3, g2 = y4 + x3;
        } else
          m4 = (this.visibleTop - a4.top - p2) / a4.height, g2 = (this.visibleBottom - a4.top + p2) / a4.height;
        u3 = $i(c3, m4), d4 = $i(c3, g2);
      } else {
        let p2 = c3.total * this.heightOracle.charWidth, m4 = s5 * this.heightOracle.charWidth, g2, y4;
        if (f2 != null) {
          let x3 = Fi(c3, f2), S4 = ((this.pixelViewport.right - this.pixelViewport.left) / 2 + m4) / p2;
          g2 = x3 - S4, y4 = x3 + S4;
        } else
          g2 = (this.pixelViewport.left - m4) / p2, y4 = (this.pixelViewport.right + m4) / p2;
        u3 = $i(c3, g2), d4 = $i(c3, y4);
      }
      u3 > a4.from && h4(a4.from, u3, a4, c3), d4 < a4.to && h4(d4, a4.to, a4, c3);
    }
    return l2;
  }
  gapSize(t3, e3, i3, s5) {
    let r2 = Fi(s5, i3) - Fi(s5, e3);
    return this.heightOracle.lineWrapping ? t3.height * r2 : s5.total * this.heightOracle.charWidth * r2;
  }
  updateLineGaps(t3) {
    js.same(t3, this.lineGaps) || (this.lineGaps = t3, this.lineGapDeco = N$5.set(t3.map((e3) => e3.draw(this, this.heightOracle.lineWrapping))));
  }
  computeVisibleRanges() {
    let t3 = this.stateDeco;
    this.lineGaps.length && (t3 = t3.concat(this.lineGapDeco));
    let e3 = [];
    $$3.spans(t3, this.viewport.from, this.viewport.to, {
      span(s5, r2) {
        e3.push({ from: s5, to: r2 });
      },
      point() {
      }
    }, 20);
    let i3 = e3.length != this.visibleRanges.length || this.visibleRanges.some((s5, r2) => s5.from != e3[r2].from || s5.to != e3[r2].to);
    return this.visibleRanges = e3, i3 ? 4 : 0;
  }
  lineBlockAt(t3) {
    return t3 >= this.viewport.from && t3 <= this.viewport.to && this.viewportLines.find((e3) => e3.from <= t3 && e3.to >= t3) || ci(this.heightMap.lineAt(t3, j$3.ByPos, this.heightOracle, 0, 0), this.scaler);
  }
  lineBlockAtHeight(t3) {
    return ci(this.heightMap.lineAt(this.scaler.fromDOM(t3), j$3.ByHeight, this.heightOracle, 0, 0), this.scaler);
  }
  scrollAnchorAt(t3) {
    let e3 = this.lineBlockAtHeight(t3 + 8);
    return e3.from >= this.viewport.from || this.viewportLines[0].top - t3 > 200 ? e3 : this.viewportLines[0];
  }
  elementAtHeight(t3) {
    return ci(this.heightMap.blockAt(this.scaler.fromDOM(t3), this.heightOracle, 0, 0), this.scaler);
  }
  get docHeight() {
    return this.scaler.toDOM(this.heightMap.height);
  }
  get contentHeight() {
    return this.docHeight + this.paddingTop + this.paddingBottom;
  }
};
class _i {
  constructor(t3, e3) {
    this.from = t3, this.to = e3;
  }
}
function du(n2, t3, e3) {
  let i3 = [], s5 = n2, r2 = 0;
  return $$3.spans(e3, n2, t3, {
    span() {
    },
    point(o2, l2) {
      o2 > s5 && (i3.push({ from: s5, to: o2 }), r2 += o2 - s5), s5 = l2;
    }
  }, 20), s5 < t3 && (i3.push({ from: s5, to: t3 }), r2 += t3 - s5), { total: r2, ranges: i3 };
}
function $i({ total: n2, ranges: t3 }, e3) {
  if (e3 <= 0)
    return t3[0].from;
  if (e3 >= 1)
    return t3[t3.length - 1].to;
  let i3 = Math.floor(n2 * e3);
  for (let s5 = 0; ; s5++) {
    let { from: r2, to: o2 } = t3[s5], l2 = o2 - r2;
    if (i3 <= l2)
      return r2 + i3;
    i3 -= l2;
  }
}
function Fi(n2, t3) {
  let e3 = 0;
  for (let { from: i3, to: s5 } of n2.ranges) {
    if (t3 <= s5) {
      e3 += t3 - i3;
      break;
    }
    e3 += s5 - i3;
  }
  return e3 / n2.total;
}
function pu(n2, t3) {
  for (let e3 of n2)
    if (t3(e3))
      return e3;
}
const no$1 = {
  toDOM(n2) {
    return n2;
  },
  fromDOM(n2) {
    return n2;
  },
  scale: 1
};
class gu {
  constructor(t3, e3, i3) {
    let s5 = 0, r2 = 0, o2 = 0;
    this.viewports = i3.map(({ from: l2, to: h4 }) => {
      let a4 = e3.lineAt(l2, j$3.ByPos, t3, 0, 0).top, c3 = e3.lineAt(h4, j$3.ByPos, t3, 0, 0).bottom;
      return s5 += c3 - a4, { from: l2, to: h4, top: a4, bottom: c3, domTop: 0, domBottom: 0 };
    }), this.scale = (7e6 - s5) / (e3.height - s5);
    for (let l2 of this.viewports)
      l2.domTop = o2 + (l2.top - r2) * this.scale, o2 = l2.domBottom = l2.domTop + (l2.bottom - l2.top), r2 = l2.bottom;
  }
  toDOM(t3) {
    for (let e3 = 0, i3 = 0, s5 = 0; ; e3++) {
      let r2 = e3 < this.viewports.length ? this.viewports[e3] : null;
      if (!r2 || t3 < r2.top)
        return s5 + (t3 - i3) * this.scale;
      if (t3 <= r2.bottom)
        return r2.domTop + (t3 - r2.top);
      i3 = r2.bottom, s5 = r2.domBottom;
    }
  }
  fromDOM(t3) {
    for (let e3 = 0, i3 = 0, s5 = 0; ; e3++) {
      let r2 = e3 < this.viewports.length ? this.viewports[e3] : null;
      if (!r2 || t3 < r2.domTop)
        return i3 + (t3 - s5) / this.scale;
      if (t3 <= r2.domBottom)
        return r2.top + (t3 - r2.domTop);
      i3 = r2.bottom, s5 = r2.domBottom;
    }
  }
}
function ci(n2, t3) {
  if (t3.scale == 1)
    return n2;
  let e3 = t3.toDOM(n2.top), i3 = t3.toDOM(n2.bottom);
  return new Gt(n2.from, n2.length, e3, i3 - e3, Array.isArray(n2._content) ? n2._content.map((s5) => ci(s5, t3)) : n2._content);
}
const zi = /* @__PURE__ */ O$2.define({ combine: (n2) => n2.join(" ") }), Pn$1 = /* @__PURE__ */ O$2.define({ combine: (n2) => n2.indexOf(true) > -1 }), Bn = /* @__PURE__ */ we.newName(), lh = /* @__PURE__ */ we.newName(), hh = /* @__PURE__ */ we.newName(), ah = { "&light": "." + lh, "&dark": "." + hh };
function Rn$1(n2, t3, e3) {
  return new we(t3, {
    finish(i3) {
      return /&/.test(i3) ? i3.replace(/&\w*/, (s5) => {
        if (s5 == "&")
          return n2;
        if (!e3 || !e3[s5])
          throw new RangeError(`Unsupported selector: ${s5}`);
        return e3[s5];
      }) : n2 + " " + i3;
    }
  });
}
const mu = /* @__PURE__ */ Rn$1("." + Bn, {
  "&": {
    position: "relative !important",
    boxSizing: "border-box",
    "&.cm-focused": {
      // Provide a simple default outline to make sure a focused
      // editor is visually distinct. Can't leave the default behavior
      // because that will apply to the content element, which is
      // inside the scrollable container and doesn't include the
      // gutters. We also can't use an 'auto' outline, since those
      // are, for some reason, drawn behind the element content, which
      // will cause things like the active line background to cover
      // the outline (#297).
      outline: "1px dotted #212121"
    },
    display: "flex !important",
    flexDirection: "column"
  },
  ".cm-scroller": {
    display: "flex !important",
    alignItems: "flex-start !important",
    fontFamily: "monospace",
    lineHeight: 1.4,
    height: "100%",
    overflowX: "auto",
    position: "relative",
    zIndex: 0
  },
  ".cm-content": {
    margin: 0,
    flexGrow: 2,
    flexShrink: 0,
    display: "block",
    whiteSpace: "pre",
    wordWrap: "normal",
    boxSizing: "border-box",
    minHeight: "100%",
    padding: "4px 0",
    outline: "none",
    "&[contenteditable=true]": {
      WebkitUserModify: "read-write-plaintext-only"
    }
  },
  ".cm-lineWrapping": {
    whiteSpace_fallback: "pre-wrap",
    whiteSpace: "break-spaces",
    wordBreak: "break-word",
    overflowWrap: "anywhere",
    flexShrink: 1
  },
  "&light .cm-content": { caretColor: "black" },
  "&dark .cm-content": { caretColor: "white" },
  ".cm-line": {
    display: "block",
    padding: "0 2px 0 6px"
  },
  ".cm-layer": {
    position: "absolute",
    left: 0,
    top: 0,
    contain: "size style",
    "& > *": {
      position: "absolute"
    }
  },
  "&light .cm-selectionBackground": {
    background: "#d9d9d9"
  },
  "&dark .cm-selectionBackground": {
    background: "#222"
  },
  "&light.cm-focused > .cm-scroller > .cm-selectionLayer .cm-selectionBackground": {
    background: "#d7d4f0"
  },
  "&dark.cm-focused > .cm-scroller > .cm-selectionLayer .cm-selectionBackground": {
    background: "#233"
  },
  ".cm-cursorLayer": {
    pointerEvents: "none"
  },
  "&.cm-focused > .cm-scroller > .cm-cursorLayer": {
    animation: "steps(1) cm-blink 1.2s infinite"
  },
  // Two animations defined so that we can switch between them to
  // restart the animation without forcing another style
  // recomputation.
  "@keyframes cm-blink": { "0%": {}, "50%": { opacity: 0 }, "100%": {} },
  "@keyframes cm-blink2": { "0%": {}, "50%": { opacity: 0 }, "100%": {} },
  ".cm-cursor, .cm-dropCursor": {
    borderLeft: "1.2px solid black",
    marginLeft: "-0.6px",
    pointerEvents: "none"
  },
  ".cm-cursor": {
    display: "none"
  },
  "&dark .cm-cursor": {
    borderLeftColor: "#444"
  },
  ".cm-dropCursor": {
    position: "absolute"
  },
  "&.cm-focused > .cm-scroller > .cm-cursorLayer .cm-cursor": {
    display: "block"
  },
  "&light .cm-activeLine": { backgroundColor: "#cceeff44" },
  "&dark .cm-activeLine": { backgroundColor: "#99eeff33" },
  "&light .cm-specialChar": { color: "red" },
  "&dark .cm-specialChar": { color: "#f78" },
  ".cm-gutters": {
    flexShrink: 0,
    display: "flex",
    height: "100%",
    boxSizing: "border-box",
    insetInlineStart: 0,
    zIndex: 200
  },
  "&light .cm-gutters": {
    backgroundColor: "#f5f5f5",
    color: "#6c6c6c",
    borderRight: "1px solid #ddd"
  },
  "&dark .cm-gutters": {
    backgroundColor: "#333338",
    color: "#ccc"
  },
  ".cm-gutter": {
    display: "flex !important",
    flexDirection: "column",
    flexShrink: 0,
    boxSizing: "border-box",
    minHeight: "100%",
    overflow: "hidden"
  },
  ".cm-gutterElement": {
    boxSizing: "border-box"
  },
  ".cm-lineNumbers .cm-gutterElement": {
    padding: "0 3px 0 5px",
    minWidth: "20px",
    textAlign: "right",
    whiteSpace: "nowrap"
  },
  "&light .cm-activeLineGutter": {
    backgroundColor: "#e2f2ff"
  },
  "&dark .cm-activeLineGutter": {
    backgroundColor: "#222227"
  },
  ".cm-panels": {
    boxSizing: "border-box",
    position: "sticky",
    left: 0,
    right: 0
  },
  "&light .cm-panels": {
    backgroundColor: "#f5f5f5",
    color: "black"
  },
  "&light .cm-panels-top": {
    borderBottom: "1px solid #ddd"
  },
  "&light .cm-panels-bottom": {
    borderTop: "1px solid #ddd"
  },
  "&dark .cm-panels": {
    backgroundColor: "#333338",
    color: "white"
  },
  ".cm-tab": {
    display: "inline-block",
    overflow: "hidden",
    verticalAlign: "bottom"
  },
  ".cm-widgetBuffer": {
    verticalAlign: "text-top",
    height: "1em",
    width: 0,
    display: "inline"
  },
  ".cm-placeholder": {
    color: "#888",
    display: "inline-block",
    verticalAlign: "top"
  },
  ".cm-highlightSpace:before": {
    content: "attr(data-display)",
    position: "absolute",
    pointerEvents: "none",
    color: "#888"
  },
  ".cm-highlightTab": {
    backgroundImage: `url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" width="200" height="20"><path stroke="%23888" stroke-width="1" fill="none" d="M1 10H196L190 5M190 15L196 10M197 4L197 16"/></svg>')`,
    backgroundSize: "auto 100%",
    backgroundPosition: "right 90%",
    backgroundRepeat: "no-repeat"
  },
  ".cm-trailingSpace": {
    backgroundColor: "#ff332255"
  },
  ".cm-button": {
    verticalAlign: "middle",
    color: "inherit",
    fontSize: "70%",
    padding: ".2em 1em",
    borderRadius: "1px"
  },
  "&light .cm-button": {
    backgroundImage: "linear-gradient(#eff1f5, #d9d9df)",
    border: "1px solid #888",
    "&:active": {
      backgroundImage: "linear-gradient(#b4b4b4, #d0d3d6)"
    }
  },
  "&dark .cm-button": {
    backgroundImage: "linear-gradient(#393939, #111)",
    border: "1px solid #888",
    "&:active": {
      backgroundImage: "linear-gradient(#111, #333)"
    }
  },
  ".cm-textfield": {
    verticalAlign: "middle",
    color: "inherit",
    fontSize: "70%",
    border: "1px solid silver",
    padding: ".2em .5em"
  },
  "&light .cm-textfield": {
    backgroundColor: "white"
  },
  "&dark .cm-textfield": {
    border: "1px solid #555",
    backgroundColor: "inherit"
  }
}, ah), fi = "￿";
class wu {
  constructor(t3, e3) {
    this.points = t3, this.text = "", this.lineSeparator = e3.facet(H$2.lineSeparator);
  }
  append(t3) {
    this.text += t3;
  }
  lineBreak() {
    this.text += fi;
  }
  readRange(t3, e3) {
    if (!t3)
      return this;
    let i3 = t3.parentNode;
    for (let s5 = t3; ; ) {
      this.findPointBefore(i3, s5);
      let r2 = this.text.length;
      this.readNode(s5);
      let o2 = s5.nextSibling;
      if (o2 == e3)
        break;
      let l2 = q.get(s5), h4 = q.get(o2);
      (l2 && h4 ? l2.breakAfter : (l2 ? l2.breakAfter : ro$1(s5)) || ro$1(o2) && (s5.nodeName != "BR" || s5.cmIgnore) && this.text.length > r2) && this.lineBreak(), s5 = o2;
    }
    return this.findPointBefore(i3, e3), this;
  }
  readTextNode(t3) {
    let e3 = t3.nodeValue;
    for (let i3 of this.points)
      i3.node == t3 && (i3.pos = this.text.length + Math.min(i3.offset, e3.length));
    for (let i3 = 0, s5 = this.lineSeparator ? null : /\r\n?|\n/g; ; ) {
      let r2 = -1, o2 = 1, l2;
      if (this.lineSeparator ? (r2 = e3.indexOf(this.lineSeparator, i3), o2 = this.lineSeparator.length) : (l2 = s5.exec(e3)) && (r2 = l2.index, o2 = l2[0].length), this.append(e3.slice(i3, r2 < 0 ? e3.length : r2)), r2 < 0)
        break;
      if (this.lineBreak(), o2 > 1)
        for (let h4 of this.points)
          h4.node == t3 && h4.pos > this.text.length && (h4.pos -= o2 - 1);
      i3 = r2 + o2;
    }
  }
  readNode(t3) {
    if (t3.cmIgnore)
      return;
    let e3 = q.get(t3), i3 = e3 && e3.overrideDOMText;
    if (i3 != null) {
      this.findPointInside(t3, i3.length);
      for (let s5 = i3.iter(); !s5.next().done; )
        s5.lineBreak ? this.lineBreak() : this.append(s5.value);
    } else
      t3.nodeType == 3 ? this.readTextNode(t3) : t3.nodeName == "BR" ? t3.nextSibling && this.lineBreak() : t3.nodeType == 1 && this.readRange(t3.firstChild, null);
  }
  findPointBefore(t3, e3) {
    for (let i3 of this.points)
      i3.node == t3 && t3.childNodes[i3.offset] == e3 && (i3.pos = this.text.length);
  }
  findPointInside(t3, e3) {
    for (let i3 of this.points)
      (t3.nodeType == 3 ? i3.node == t3 : t3.contains(i3.node)) && (i3.pos = this.text.length + (yu(t3, i3.node, i3.offset) ? e3 : 0));
  }
}
function yu(n2, t3, e3) {
  for (; ; ) {
    if (!t3 || e3 < ne$1(t3))
      return false;
    if (t3 == n2)
      return true;
    e3 = ki(t3) + 1, t3 = t3.parentNode;
  }
}
function ro$1(n2) {
  return n2.nodeType == 1 && /^(DIV|P|LI|UL|OL|BLOCKQUOTE|DD|DT|H\d|SECTION|PRE)$/.test(n2.nodeName);
}
let oo$1 = class oo2 {
  constructor(t3, e3) {
    this.node = t3, this.offset = e3, this.pos = -1;
  }
};
class bu {
  constructor(t3, e3, i3, s5) {
    this.typeOver = s5, this.bounds = null, this.text = "";
    let { impreciseHead: r2, impreciseAnchor: o2 } = t3.docView;
    if (t3.state.readOnly && e3 > -1)
      this.newSel = null;
    else if (e3 > -1 && (this.bounds = t3.docView.domBoundsAround(e3, i3, 0))) {
      let l2 = r2 || o2 ? [] : vu(t3), h4 = new wu(l2, t3.state);
      h4.readRange(this.bounds.startDOM, this.bounds.endDOM), this.text = h4.text, this.newSel = Su(l2, this.bounds.from);
    } else {
      let l2 = t3.observer.selectionRange, h4 = r2 && r2.node == l2.focusNode && r2.offset == l2.focusOffset || !wn$1(t3.contentDOM, l2.focusNode) ? t3.state.selection.main.head : t3.docView.posFromDOM(l2.focusNode, l2.focusOffset), a4 = o2 && o2.node == l2.anchorNode && o2.offset == l2.anchorOffset || !wn$1(t3.contentDOM, l2.anchorNode) ? t3.state.selection.main.anchor : t3.docView.posFromDOM(l2.anchorNode, l2.anchorOffset);
      this.newSel = b$1.single(a4, h4);
    }
  }
}
function ch(n2, t3) {
  let e3, { newSel: i3 } = t3, s5 = n2.state.selection.main, r2 = n2.inputState.lastKeyTime > Date.now() - 100 ? n2.inputState.lastKeyCode : -1;
  if (t3.bounds) {
    let { from: o2, to: l2 } = t3.bounds, h4 = s5.from, a4 = null;
    (r2 === 8 || C$2.android && t3.text.length < l2 - o2) && (h4 = s5.to, a4 = "end");
    let c3 = xu(n2.state.doc.sliceString(o2, l2, fi), t3.text, h4 - o2, a4);
    c3 && (C$2.chrome && r2 == 13 && c3.toB == c3.from + 2 && t3.text.slice(c3.from, c3.toB) == fi + fi && c3.toB--, e3 = {
      from: o2 + c3.from,
      to: o2 + c3.toA,
      insert: V$2.of(t3.text.slice(c3.from, c3.toB).split(fi))
    });
  } else
    i3 && (!n2.hasFocus && n2.state.facet(Bs) || i3.main.eq(s5)) && (i3 = null);
  if (!e3 && !i3)
    return false;
  if (!e3 && t3.typeOver && !s5.empty && i3 && i3.main.empty ? e3 = { from: s5.from, to: s5.to, insert: n2.state.doc.slice(s5.from, s5.to) } : e3 && e3.from >= s5.from && e3.to <= s5.to && (e3.from != s5.from || e3.to != s5.to) && s5.to - s5.from - (e3.to - e3.from) <= 4 ? e3 = {
    from: s5.from,
    to: s5.to,
    insert: n2.state.doc.slice(s5.from, e3.from).append(e3.insert).append(n2.state.doc.slice(e3.to, s5.to))
  } : (C$2.mac || C$2.android) && e3 && e3.from == e3.to && e3.from == s5.head - 1 && /^\. ?$/.test(e3.insert.toString()) && n2.contentDOM.getAttribute("autocorrect") == "off" ? (i3 && e3.insert.length == 2 && (i3 = b$1.single(i3.main.anchor - 1, i3.main.head - 1)), e3 = { from: s5.from, to: s5.to, insert: V$2.of([" "]) }) : C$2.chrome && e3 && e3.from == e3.to && e3.from == s5.head && e3.insert.toString() == `
 ` && n2.lineWrapping && (i3 && (i3 = b$1.single(i3.main.anchor - 1, i3.main.head - 1)), e3 = { from: s5.from, to: s5.to, insert: V$2.of([" "]) }), e3) {
    if (C$2.ios && n2.inputState.flushIOSKey() || C$2.android && (e3.from == s5.from && e3.to == s5.to && e3.insert.length == 1 && e3.insert.lines == 2 && Ke$1(n2.contentDOM, "Enter", 13) || (e3.from == s5.from - 1 && e3.to == s5.to && e3.insert.length == 0 || r2 == 8 && e3.insert.length < e3.to - e3.from && e3.to > s5.head) && Ke$1(n2.contentDOM, "Backspace", 8) || e3.from == s5.from && e3.to == s5.to + 1 && e3.insert.length == 0 && Ke$1(n2.contentDOM, "Delete", 46)))
      return true;
    let o2 = e3.insert.toString();
    n2.inputState.composing >= 0 && n2.inputState.composing++;
    let l2, h4 = () => l2 || (l2 = ku(n2, e3, i3));
    return n2.state.facet(Il$1).some((a4) => a4(n2, e3.from, e3.to, o2, h4)) || n2.dispatch(h4()), true;
  } else if (i3 && !i3.main.eq(s5)) {
    let o2 = false, l2 = "select";
    return n2.inputState.lastSelectionTime > Date.now() - 50 && (n2.inputState.lastSelectionOrigin == "select" && (o2 = true), l2 = n2.inputState.lastSelectionOrigin), n2.dispatch({ selection: i3, scrollIntoView: o2, userEvent: l2 }), true;
  } else
    return false;
}
function ku(n2, t3, e3) {
  let i3, s5 = n2.state, r2 = s5.selection.main;
  if (t3.from >= r2.from && t3.to <= r2.to && t3.to - t3.from >= (r2.to - r2.from) / 3 && (!e3 || e3.main.empty && e3.main.from == t3.from + t3.insert.length) && n2.inputState.composing < 0) {
    let l2 = r2.from < t3.from ? s5.sliceDoc(r2.from, t3.from) : "", h4 = r2.to > t3.to ? s5.sliceDoc(t3.to, r2.to) : "";
    i3 = s5.replaceSelection(n2.state.toText(l2 + t3.insert.sliceString(0, void 0, n2.state.lineBreak) + h4));
  } else {
    let l2 = s5.changes(t3), h4 = e3 && e3.main.to <= l2.newLength ? e3.main : void 0;
    if (s5.selection.ranges.length > 1 && n2.inputState.composing >= 0 && t3.to <= r2.to && t3.to >= r2.to - 10) {
      let a4 = n2.state.sliceDoc(t3.from, t3.to), c3, f2 = e3 && Ul$1(n2, e3.main.head);
      if (f2) {
        let p2 = t3.insert.length - (t3.to - t3.from);
        c3 = { from: f2.from, to: f2.to - p2 };
      } else
        c3 = n2.state.doc.lineAt(r2.head);
      let u3 = r2.to - t3.to, d4 = r2.to - r2.from;
      i3 = s5.changeByRange((p2) => {
        if (p2.from == r2.from && p2.to == r2.to)
          return { changes: l2, range: h4 || p2.map(l2) };
        let m4 = p2.to - u3, g2 = m4 - a4.length;
        if (p2.to - p2.from != d4 || n2.state.sliceDoc(g2, m4) != a4 || // Unfortunately, there's no way to make multiple
        // changes in the same node work without aborting
        // composition, so cursors in the composition range are
        // ignored.
        p2.to >= c3.from && p2.from <= c3.to)
          return { range: p2 };
        let y4 = s5.changes({ from: g2, to: m4, insert: t3.insert }), x3 = p2.to - r2.to;
        return {
          changes: y4,
          range: h4 ? b$1.range(Math.max(0, h4.anchor + x3), Math.max(0, h4.head + x3)) : p2.map(y4)
        };
      });
    } else
      i3 = {
        changes: l2,
        selection: h4 && s5.selection.replaceRange(h4)
      };
  }
  let o2 = "input.type";
  return (n2.composing || n2.inputState.compositionPendingChange && n2.inputState.compositionEndedAt > Date.now() - 50) && (n2.inputState.compositionPendingChange = false, o2 += ".compose", n2.inputState.compositionFirstChange && (o2 += ".start", n2.inputState.compositionFirstChange = false)), s5.update(i3, { userEvent: o2, scrollIntoView: true });
}
function xu(n2, t3, e3, i3) {
  let s5 = Math.min(n2.length, t3.length), r2 = 0;
  for (; r2 < s5 && n2.charCodeAt(r2) == t3.charCodeAt(r2); )
    r2++;
  if (r2 == s5 && n2.length == t3.length)
    return null;
  let o2 = n2.length, l2 = t3.length;
  for (; o2 > 0 && l2 > 0 && n2.charCodeAt(o2 - 1) == t3.charCodeAt(l2 - 1); )
    o2--, l2--;
  if (i3 == "end") {
    let h4 = Math.max(0, r2 - Math.min(o2, l2));
    e3 -= o2 + h4 - r2;
  }
  if (o2 < r2 && n2.length < t3.length) {
    let h4 = e3 <= r2 && e3 >= o2 ? r2 - e3 : 0;
    r2 -= h4, l2 = r2 + (l2 - o2), o2 = r2;
  } else if (l2 < r2) {
    let h4 = e3 <= r2 && e3 >= l2 ? r2 - e3 : 0;
    r2 -= h4, o2 = r2 + (o2 - l2), l2 = r2;
  }
  return { from: r2, toA: o2, toB: l2 };
}
function vu(n2) {
  let t3 = [];
  if (n2.root.activeElement != n2.contentDOM)
    return t3;
  let { anchorNode: e3, anchorOffset: i3, focusNode: s5, focusOffset: r2 } = n2.observer.selectionRange;
  return e3 && (t3.push(new oo$1(e3, i3)), (s5 != e3 || r2 != i3) && t3.push(new oo$1(s5, r2))), t3;
}
function Su(n2, t3) {
  if (n2.length == 0)
    return null;
  let e3 = n2[0].pos, i3 = n2.length == 2 ? n2[1].pos : e3;
  return e3 > -1 && i3 > -1 ? b$1.single(e3 + t3, i3 + t3) : null;
}
const Cu = {
  childList: true,
  characterData: true,
  subtree: true,
  attributes: true,
  characterDataOldValue: true
}, Ks = C$2.ie && C$2.ie_version <= 11;
class Au {
  constructor(t3) {
    this.view = t3, this.active = false, this.selectionRange = new of(), this.selectionChanged = false, this.delayedFlush = -1, this.resizeTimeout = -1, this.queue = [], this.delayedAndroidKey = null, this.flushingAndroidKey = -1, this.lastChange = 0, this.scrollTargets = [], this.intersection = null, this.resizeScroll = null, this.intersecting = false, this.gapIntersection = null, this.gaps = [], this.parentCheck = -1, this.dom = t3.contentDOM, this.observer = new MutationObserver((e3) => {
      for (let i3 of e3)
        this.queue.push(i3);
      (C$2.ie && C$2.ie_version <= 11 || C$2.ios && t3.composing) && e3.some((i3) => i3.type == "childList" && i3.removedNodes.length || i3.type == "characterData" && i3.oldValue.length > i3.target.nodeValue.length) ? this.flushSoon() : this.flush();
    }), Ks && (this.onCharData = (e3) => {
      this.queue.push({
        target: e3.target,
        type: "characterData",
        oldValue: e3.prevValue
      }), this.flushSoon();
    }), this.onSelectionChange = this.onSelectionChange.bind(this), this.onResize = this.onResize.bind(this), this.onPrint = this.onPrint.bind(this), this.onScroll = this.onScroll.bind(this), typeof ResizeObserver == "function" && (this.resizeScroll = new ResizeObserver(() => {
      var e3;
      ((e3 = this.view.docView) === null || e3 === void 0 ? void 0 : e3.lastUpdate) < Date.now() - 75 && this.onResize();
    }), this.resizeScroll.observe(t3.scrollDOM)), this.addWindowListeners(this.win = t3.win), this.start(), typeof IntersectionObserver == "function" && (this.intersection = new IntersectionObserver((e3) => {
      this.parentCheck < 0 && (this.parentCheck = setTimeout(this.listenForScroll.bind(this), 1e3)), e3.length > 0 && e3[e3.length - 1].intersectionRatio > 0 != this.intersecting && (this.intersecting = !this.intersecting, this.intersecting != this.view.inView && this.onScrollChanged(document.createEvent("Event")));
    }, { threshold: [0, 1e-3] }), this.intersection.observe(this.dom), this.gapIntersection = new IntersectionObserver((e3) => {
      e3.length > 0 && e3[e3.length - 1].intersectionRatio > 0 && this.onScrollChanged(document.createEvent("Event"));
    }, {})), this.listenForScroll(), this.readSelectionRange();
  }
  onScrollChanged(t3) {
    this.view.inputState.runHandlers("scroll", t3), this.intersecting && this.view.measure();
  }
  onScroll(t3) {
    this.intersecting && this.flush(false), this.onScrollChanged(t3);
  }
  onResize() {
    this.resizeTimeout < 0 && (this.resizeTimeout = setTimeout(() => {
      this.resizeTimeout = -1, this.view.requestMeasure();
    }, 50));
  }
  onPrint() {
    this.view.viewState.printing = true, this.view.measure(), setTimeout(() => {
      this.view.viewState.printing = false, this.view.requestMeasure();
    }, 500);
  }
  updateGaps(t3) {
    if (this.gapIntersection && (t3.length != this.gaps.length || this.gaps.some((e3, i3) => e3 != t3[i3]))) {
      this.gapIntersection.disconnect();
      for (let e3 of t3)
        this.gapIntersection.observe(e3);
      this.gaps = t3;
    }
  }
  onSelectionChange(t3) {
    let e3 = this.selectionChanged;
    if (!this.readSelectionRange() || this.delayedAndroidKey)
      return;
    let { view: i3 } = this, s5 = this.selectionRange;
    if (i3.state.facet(Bs) ? i3.root.activeElement != this.dom : !ts(i3.dom, s5))
      return;
    let r2 = s5.anchorNode && i3.docView.nearest(s5.anchorNode);
    if (r2 && r2.ignoreEvent(t3)) {
      e3 || (this.selectionChanged = false);
      return;
    }
    (C$2.ie && C$2.ie_version <= 11 || C$2.android && C$2.chrome) && !i3.state.selection.main.empty && // (Selection.isCollapsed isn't reliable on IE)
    s5.focusNode && ds(s5.focusNode, s5.focusOffset, s5.anchorNode, s5.anchorOffset) ? this.flushSoon() : this.flush(false);
  }
  readSelectionRange() {
    let { view: t3 } = this, e3 = C$2.safari && t3.root.nodeType == 11 && ef(this.dom.ownerDocument) == this.dom && Ou(this.view) || us(t3.root);
    if (!e3 || this.selectionRange.eq(e3))
      return false;
    let i3 = ts(this.dom, e3);
    return i3 && !this.selectionChanged && t3.inputState.lastFocusTime > Date.now() - 200 && t3.inputState.lastTouchTime < Date.now() - 300 && hf(this.dom, e3) ? (this.view.inputState.lastFocusTime = 0, t3.docView.updateSelection(), false) : (this.selectionRange.setRange(e3), i3 && (this.selectionChanged = true), true);
  }
  setSelectionRange(t3, e3) {
    this.selectionRange.set(t3.node, t3.offset, e3.node, e3.offset), this.selectionChanged = false;
  }
  clearSelectionRange() {
    this.selectionRange.set(null, 0, null, 0);
  }
  listenForScroll() {
    this.parentCheck = -1;
    let t3 = 0, e3 = null;
    for (let i3 = this.dom; i3; )
      if (i3.nodeType == 1)
        !e3 && t3 < this.scrollTargets.length && this.scrollTargets[t3] == i3 ? t3++ : e3 || (e3 = this.scrollTargets.slice(0, t3)), e3 && e3.push(i3), i3 = i3.assignedSlot || i3.parentNode;
      else if (i3.nodeType == 11)
        i3 = i3.host;
      else
        break;
    if (t3 < this.scrollTargets.length && !e3 && (e3 = this.scrollTargets.slice(0, t3)), e3) {
      for (let i3 of this.scrollTargets)
        i3.removeEventListener("scroll", this.onScroll);
      for (let i3 of this.scrollTargets = e3)
        i3.addEventListener("scroll", this.onScroll);
    }
  }
  ignore(t3) {
    if (!this.active)
      return t3();
    try {
      return this.stop(), t3();
    } finally {
      this.start(), this.clear();
    }
  }
  start() {
    this.active || (this.observer.observe(this.dom, Cu), Ks && this.dom.addEventListener("DOMCharacterDataModified", this.onCharData), this.active = true);
  }
  stop() {
    this.active && (this.active = false, this.observer.disconnect(), Ks && this.dom.removeEventListener("DOMCharacterDataModified", this.onCharData));
  }
  // Throw away any pending changes
  clear() {
    this.processRecords(), this.queue.length = 0, this.selectionChanged = false;
  }
  // Chrome Android, especially in combination with GBoard, not only
  // doesn't reliably fire regular key events, but also often
  // surrounds the effect of enter or backspace with a bunch of
  // composition events that, when interrupted, cause text duplication
  // or other kinds of corruption. This hack makes the editor back off
  // from handling DOM changes for a moment when such a key is
  // detected (via beforeinput or keydown), and then tries to flush
  // them or, if that has no effect, dispatches the given key.
  delayAndroidKey(t3, e3) {
    var i3;
    if (!this.delayedAndroidKey) {
      let s5 = () => {
        let r2 = this.delayedAndroidKey;
        r2 && (this.clearDelayedAndroidKey(), this.view.inputState.lastKeyCode = r2.keyCode, this.view.inputState.lastKeyTime = Date.now(), !this.flush() && r2.force && Ke$1(this.dom, r2.key, r2.keyCode));
      };
      this.flushingAndroidKey = this.view.win.requestAnimationFrame(s5);
    }
    (!this.delayedAndroidKey || t3 == "Enter") && (this.delayedAndroidKey = {
      key: t3,
      keyCode: e3,
      // Only run the key handler when no changes are detected if
      // this isn't coming right after another change, in which case
      // it is probably part of a weird chain of updates, and should
      // be ignored if it returns the DOM to its previous state.
      force: this.lastChange < Date.now() - 50 || !!(!((i3 = this.delayedAndroidKey) === null || i3 === void 0) && i3.force)
    });
  }
  clearDelayedAndroidKey() {
    this.win.cancelAnimationFrame(this.flushingAndroidKey), this.delayedAndroidKey = null, this.flushingAndroidKey = -1;
  }
  flushSoon() {
    this.delayedFlush < 0 && (this.delayedFlush = this.view.win.requestAnimationFrame(() => {
      this.delayedFlush = -1, this.flush();
    }));
  }
  forceFlush() {
    this.delayedFlush >= 0 && (this.view.win.cancelAnimationFrame(this.delayedFlush), this.delayedFlush = -1), this.flush();
  }
  pendingRecords() {
    for (let t3 of this.observer.takeRecords())
      this.queue.push(t3);
    return this.queue;
  }
  processRecords() {
    let t3 = this.pendingRecords();
    t3.length && (this.queue = []);
    let e3 = -1, i3 = -1, s5 = false;
    for (let r2 of t3) {
      let o2 = this.readMutation(r2);
      o2 && (o2.typeOver && (s5 = true), e3 == -1 ? { from: e3, to: i3 } = o2 : (e3 = Math.min(o2.from, e3), i3 = Math.max(o2.to, i3)));
    }
    return { from: e3, to: i3, typeOver: s5 };
  }
  readChange() {
    let { from: t3, to: e3, typeOver: i3 } = this.processRecords(), s5 = this.selectionChanged && ts(this.dom, this.selectionRange);
    if (t3 < 0 && !s5)
      return null;
    t3 > -1 && (this.lastChange = Date.now()), this.view.inputState.lastFocusTime = 0, this.selectionChanged = false;
    let r2 = new bu(this.view, t3, e3, i3);
    return this.view.docView.domChanged = { newSel: r2.newSel ? r2.newSel.main : null }, r2;
  }
  // Apply pending changes, if any
  flush(t3 = true) {
    if (this.delayedFlush >= 0 || this.delayedAndroidKey)
      return false;
    t3 && this.readSelectionRange();
    let e3 = this.readChange();
    if (!e3)
      return this.view.requestMeasure(), false;
    let i3 = this.view.state, s5 = ch(this.view, e3);
    return this.view.state == i3 && this.view.update([]), s5;
  }
  readMutation(t3) {
    let e3 = this.view.docView.nearest(t3.target);
    if (!e3 || e3.ignoreMutation(t3))
      return null;
    if (e3.markDirty(t3.type == "attributes"), t3.type == "attributes" && (e3.flags |= 4), t3.type == "childList") {
      let i3 = lo$1(e3, t3.previousSibling || t3.target.previousSibling, -1), s5 = lo$1(e3, t3.nextSibling || t3.target.nextSibling, 1);
      return {
        from: i3 ? e3.posAfter(i3) : e3.posAtStart,
        to: s5 ? e3.posBefore(s5) : e3.posAtEnd,
        typeOver: false
      };
    } else
      return t3.type == "characterData" ? { from: e3.posAtStart, to: e3.posAtEnd, typeOver: t3.target.nodeValue == t3.oldValue } : null;
  }
  setWindow(t3) {
    t3 != this.win && (this.removeWindowListeners(this.win), this.win = t3, this.addWindowListeners(this.win));
  }
  addWindowListeners(t3) {
    t3.addEventListener("resize", this.onResize), t3.addEventListener("beforeprint", this.onPrint), t3.addEventListener("scroll", this.onScroll), t3.document.addEventListener("selectionchange", this.onSelectionChange);
  }
  removeWindowListeners(t3) {
    t3.removeEventListener("scroll", this.onScroll), t3.removeEventListener("resize", this.onResize), t3.removeEventListener("beforeprint", this.onPrint), t3.document.removeEventListener("selectionchange", this.onSelectionChange);
  }
  destroy() {
    var t3, e3, i3;
    this.stop(), (t3 = this.intersection) === null || t3 === void 0 || t3.disconnect(), (e3 = this.gapIntersection) === null || e3 === void 0 || e3.disconnect(), (i3 = this.resizeScroll) === null || i3 === void 0 || i3.disconnect();
    for (let s5 of this.scrollTargets)
      s5.removeEventListener("scroll", this.onScroll);
    this.removeWindowListeners(this.win), clearTimeout(this.parentCheck), clearTimeout(this.resizeTimeout), this.win.cancelAnimationFrame(this.delayedFlush), this.win.cancelAnimationFrame(this.flushingAndroidKey);
  }
}
function lo$1(n2, t3, e3) {
  for (; t3; ) {
    let i3 = q.get(t3);
    if (i3 && i3.parent == n2)
      return i3;
    let s5 = t3.parentNode;
    t3 = s5 != n2.dom ? s5 : e3 > 0 ? t3.nextSibling : t3.previousSibling;
  }
  return null;
}
function Ou(n2) {
  let t3 = null;
  function e3(h4) {
    h4.preventDefault(), h4.stopImmediatePropagation(), t3 = h4.getTargetRanges()[0];
  }
  if (n2.contentDOM.addEventListener("beforeinput", e3, true), n2.dom.ownerDocument.execCommand("indent"), n2.contentDOM.removeEventListener("beforeinput", e3, true), !t3)
    return null;
  let i3 = t3.startContainer, s5 = t3.startOffset, r2 = t3.endContainer, o2 = t3.endOffset, l2 = n2.docView.domAtPos(n2.state.selection.main.anchor);
  return ds(l2.node, l2.offset, r2, o2) && ([i3, s5, r2, o2] = [r2, o2, i3, s5]), { anchorNode: i3, anchorOffset: s5, focusNode: r2, focusOffset: o2 };
}
let T$4 = class T2 {
  /**
  The current editor state.
  */
  get state() {
    return this.viewState.state;
  }
  /**
  To be able to display large documents without consuming too much
  memory or overloading the browser, CodeMirror only draws the
  code that is visible (plus a margin around it) to the DOM. This
  property tells you the extent of the current drawn viewport, in
  document positions.
  */
  get viewport() {
    return this.viewState.viewport;
  }
  /**
  When there are, for example, large collapsed ranges in the
  viewport, its size can be a lot bigger than the actual visible
  content. Thus, if you are doing something like styling the
  content in the viewport, it is preferable to only do so for
  these ranges, which are the subset of the viewport that is
  actually drawn.
  */
  get visibleRanges() {
    return this.viewState.visibleRanges;
  }
  /**
  Returns false when the editor is entirely scrolled out of view
  or otherwise hidden.
  */
  get inView() {
    return this.viewState.inView;
  }
  /**
  Indicates whether the user is currently composing text via
  [IME](https://en.wikipedia.org/wiki/Input_method), and at least
  one change has been made in the current composition.
  */
  get composing() {
    return this.inputState.composing > 0;
  }
  /**
  Indicates whether the user is currently in composing state. Note
  that on some platforms, like Android, this will be the case a
  lot, since just putting the cursor on a word starts a
  composition there.
  */
  get compositionStarted() {
    return this.inputState.composing >= 0;
  }
  /**
  The document or shadow root that the view lives in.
  */
  get root() {
    return this._root;
  }
  /**
  @internal
  */
  get win() {
    return this.dom.ownerDocument.defaultView || window;
  }
  /**
  Construct a new view. You'll want to either provide a `parent`
  option, or put `view.dom` into your document after creating a
  view, so that the user can see the editor.
  */
  constructor(t3 = {}) {
    this.plugins = [], this.pluginMap = /* @__PURE__ */ new Map(), this.editorAttrs = {}, this.contentAttrs = {}, this.bidiCache = [], this.destroyed = false, this.updateState = 2, this.measureScheduled = -1, this.measureRequests = [], this.contentDOM = document.createElement("div"), this.scrollDOM = document.createElement("div"), this.scrollDOM.tabIndex = -1, this.scrollDOM.className = "cm-scroller", this.scrollDOM.appendChild(this.contentDOM), this.announceDOM = document.createElement("div"), this.announceDOM.style.cssText = "position: fixed; top: -10000px", this.announceDOM.setAttribute("aria-live", "polite"), this.dom = document.createElement("div"), this.dom.appendChild(this.announceDOM), this.dom.appendChild(this.scrollDOM);
    let { dispatch: e3 } = t3;
    this.dispatchTransactions = t3.dispatchTransactions || e3 && ((i3) => i3.forEach((s5) => e3(s5, this))) || ((i3) => this.update(i3)), this.dispatch = this.dispatch.bind(this), this._root = t3.root || lf(t3.parent) || document, this.viewState = new so$1(t3.state || H$2.create(t3)), t3.scrollTo && t3.scrollTo.is(Ii) && (this.viewState.scrollTarget = t3.scrollTo.value.clip(this.viewState.state)), this.plugins = this.state.facet(hi).map((i3) => new Fs(i3));
    for (let i3 of this.plugins)
      i3.update(this);
    this.observer = new Au(this), this.inputState = new Ff(this), this.inputState.ensureHandlers(this.plugins), this.docView = new _r$1(this), this.mountStyles(), this.updateAttrs(), this.updateState = 0, this.requestMeasure(), t3.parent && t3.parent.appendChild(this.dom);
  }
  dispatch(...t3) {
    let e3 = t3.length == 1 && t3[0] instanceof ft$2 ? t3 : t3.length == 1 && Array.isArray(t3[0]) ? t3[0] : [this.state.update(...t3)];
    this.dispatchTransactions(e3, this);
  }
  /**
  Update the view for the given array of transactions. This will
  update the visible document and selection to match the state
  produced by the transactions, and notify view plugins of the
  change. You should usually call
  [`dispatch`](https://codemirror.net/6/docs/ref/#view.EditorView.dispatch) instead, which uses this
  as a primitive.
  */
  update(t3) {
    if (this.updateState != 0)
      throw new Error("Calls to EditorView.update are not allowed while an update is in progress");
    let e3 = false, i3 = false, s5, r2 = this.state;
    for (let u3 of t3) {
      if (u3.startState != r2)
        throw new RangeError("Trying to update state with a transaction that doesn't start from the previous state.");
      r2 = u3.state;
    }
    if (this.destroyed) {
      this.viewState.state = r2;
      return;
    }
    let o2 = this.hasFocus, l2 = 0, h4 = null;
    t3.some((u3) => u3.annotation(sh)) ? (this.inputState.notifiedFocused = o2, l2 = 1) : o2 != this.inputState.notifiedFocused && (this.inputState.notifiedFocused = o2, h4 = nh(r2, o2), h4 || (l2 = 1));
    let a4 = this.observer.delayedAndroidKey, c3 = null;
    if (a4 ? (this.observer.clearDelayedAndroidKey(), c3 = this.observer.readChange(), (c3 && !this.state.doc.eq(r2.doc) || !this.state.selection.eq(r2.selection)) && (c3 = null)) : this.observer.clear(), r2.facet(H$2.phrases) != this.state.facet(H$2.phrases))
      return this.setState(r2);
    s5 = ps.create(this, r2, t3), s5.flags |= l2;
    let f2 = this.viewState.scrollTarget;
    try {
      this.updateState = 2;
      for (let u3 of t3) {
        if (f2 && (f2 = f2.map(u3.changes)), u3.scrollIntoView) {
          let { main: d4 } = u3.state.selection;
          f2 = new qe$2(d4.empty ? d4 : b$1.cursor(d4.head, d4.head > d4.anchor ? -1 : 1));
        }
        for (let d4 of u3.effects)
          d4.is(Ii) && (f2 = d4.value.clip(this.state));
      }
      this.viewState.update(s5, f2), this.bidiCache = gs.update(this.bidiCache, s5.changes), s5.empty || (this.updatePlugins(s5), this.inputState.update(s5)), e3 = this.docView.update(s5), this.state.facet(ai) != this.styleModules && this.mountStyles(), i3 = this.updateAttrs(), this.showAnnouncements(t3), this.docView.updateSelection(e3, t3.some((u3) => u3.isUserEvent("select.pointer")));
    } finally {
      this.updateState = 0;
    }
    if (s5.startState.facet(zi) != s5.state.facet(zi) && (this.viewState.mustMeasureContent = true), (e3 || i3 || f2 || this.viewState.mustEnforceCursorAssoc || this.viewState.mustMeasureContent) && this.requestMeasure(), !s5.empty)
      for (let u3 of this.state.facet(Cn$1))
        try {
          u3(s5);
        } catch (d4) {
          ie$2(this.state, d4, "update listener");
        }
    (h4 || c3) && Promise.resolve().then(() => {
      h4 && this.state == h4.startState && this.dispatch(h4), c3 && !ch(this, c3) && a4.force && Ke$1(this.contentDOM, a4.key, a4.keyCode);
    });
  }
  /**
  Reset the view to the given state. (This will cause the entire
  document to be redrawn and all view plugins to be reinitialized,
  so you should probably only use it when the new state isn't
  derived from the old state. Otherwise, use
  [`dispatch`](https://codemirror.net/6/docs/ref/#view.EditorView.dispatch) instead.)
  */
  setState(t3) {
    if (this.updateState != 0)
      throw new Error("Calls to EditorView.setState are not allowed while an update is in progress");
    if (this.destroyed) {
      this.viewState.state = t3;
      return;
    }
    this.updateState = 2;
    let e3 = this.hasFocus;
    try {
      for (let i3 of this.plugins)
        i3.destroy(this);
      this.viewState = new so$1(t3), this.plugins = t3.facet(hi).map((i3) => new Fs(i3)), this.pluginMap.clear();
      for (let i3 of this.plugins)
        i3.update(this);
      this.docView = new _r$1(this), this.inputState.ensureHandlers(this.plugins), this.mountStyles(), this.updateAttrs(), this.bidiCache = [];
    } finally {
      this.updateState = 0;
    }
    e3 && this.focus(), this.requestMeasure();
  }
  updatePlugins(t3) {
    let e3 = t3.startState.facet(hi), i3 = t3.state.facet(hi);
    if (e3 != i3) {
      let s5 = [];
      for (let r2 of i3) {
        let o2 = e3.indexOf(r2);
        if (o2 < 0)
          s5.push(new Fs(r2));
        else {
          let l2 = this.plugins[o2];
          l2.mustUpdate = t3, s5.push(l2);
        }
      }
      for (let r2 of this.plugins)
        r2.mustUpdate != t3 && r2.destroy(this);
      this.plugins = s5, this.pluginMap.clear();
    } else
      for (let s5 of this.plugins)
        s5.mustUpdate = t3;
    for (let s5 = 0; s5 < this.plugins.length; s5++)
      this.plugins[s5].update(this);
    e3 != i3 && this.inputState.ensureHandlers(this.plugins);
  }
  /**
  @internal
  */
  measure(t3 = true) {
    if (this.destroyed)
      return;
    if (this.measureScheduled > -1 && this.win.cancelAnimationFrame(this.measureScheduled), this.observer.delayedAndroidKey) {
      this.measureScheduled = -1, this.requestMeasure();
      return;
    }
    this.measureScheduled = 0, t3 && this.observer.forceFlush();
    let e3 = null, i3 = this.scrollDOM, s5 = i3.scrollTop * this.scaleY, { scrollAnchorPos: r2, scrollAnchorHeight: o2 } = this.viewState;
    Math.abs(s5 - this.viewState.scrollTop) > 1 && (o2 = -1), this.viewState.scrollAnchorHeight = -1;
    try {
      for (let l2 = 0; ; l2++) {
        if (o2 < 0)
          if (vl$1(i3))
            r2 = -1, o2 = this.viewState.heightMap.height;
          else {
            let d4 = this.viewState.scrollAnchorAt(s5);
            r2 = d4.from, o2 = d4.top;
          }
        this.updateState = 1;
        let h4 = this.viewState.measure(this);
        if (!h4 && !this.measureRequests.length && this.viewState.scrollTarget == null)
          break;
        if (l2 > 5) {
          console.warn(this.measureRequests.length ? "Measure loop restarted more than 5 times" : "Viewport failed to stabilize");
          break;
        }
        let a4 = [];
        h4 & 4 || ([this.measureRequests, a4] = [a4, this.measureRequests]);
        let c3 = a4.map((d4) => {
          try {
            return d4.read(this);
          } catch (p2) {
            return ie$2(this.state, p2), ho$1;
          }
        }), f2 = ps.create(this, this.state, []), u3 = false;
        f2.flags |= h4, e3 ? e3.flags |= h4 : e3 = f2, this.updateState = 2, f2.empty || (this.updatePlugins(f2), this.inputState.update(f2), this.updateAttrs(), u3 = this.docView.update(f2));
        for (let d4 = 0; d4 < a4.length; d4++)
          if (c3[d4] != ho$1)
            try {
              let p2 = a4[d4];
              p2.write && p2.write(c3[d4], this);
            } catch (p2) {
              ie$2(this.state, p2);
            }
        if (u3 && this.docView.updateSelection(true), !f2.viewportChanged && this.measureRequests.length == 0) {
          if (this.viewState.editorHeight)
            if (this.viewState.scrollTarget) {
              this.docView.scrollIntoView(this.viewState.scrollTarget), this.viewState.scrollTarget = null;
              continue;
            } else {
              let p2 = (r2 < 0 ? this.viewState.heightMap.height : this.viewState.lineBlockAt(r2).top) - o2;
              if (p2 > 1 || p2 < -1) {
                s5 = s5 + p2, i3.scrollTop = s5 / this.scaleY, o2 = -1;
                continue;
              }
            }
          break;
        }
      }
    } finally {
      this.updateState = 0, this.measureScheduled = -1;
    }
    if (e3 && !e3.empty)
      for (let l2 of this.state.facet(Cn$1))
        l2(e3);
  }
  /**
  Get the CSS classes for the currently active editor themes.
  */
  get themeClasses() {
    return Bn + " " + (this.state.facet(Pn$1) ? hh : lh) + " " + this.state.facet(zi);
  }
  updateAttrs() {
    let t3 = ao$1(this, _l$1, {
      class: "cm-editor" + (this.hasFocus ? " cm-focused " : " ") + this.themeClasses
    }), e3 = {
      spellcheck: "false",
      autocorrect: "off",
      autocapitalize: "off",
      translate: "no",
      contenteditable: this.state.facet(Bs) ? "true" : "false",
      class: "cm-content",
      style: `${C$2.tabSize}: ${this.state.tabSize}`,
      role: "textbox",
      "aria-multiline": "true"
    };
    this.state.readOnly && (e3["aria-readonly"] = "true"), ao$1(this, er, e3);
    let i3 = this.observer.ignore(() => {
      let s5 = vn$1(this.contentDOM, this.contentAttrs, e3), r2 = vn$1(this.dom, this.editorAttrs, t3);
      return s5 || r2;
    });
    return this.editorAttrs = t3, this.contentAttrs = e3, i3;
  }
  showAnnouncements(t3) {
    let e3 = true;
    for (let i3 of t3)
      for (let s5 of i3.effects)
        if (s5.is(T2.announce)) {
          e3 && (this.announceDOM.textContent = ""), e3 = false;
          let r2 = this.announceDOM.appendChild(document.createElement("div"));
          r2.textContent = s5.value;
        }
  }
  mountStyles() {
    this.styleModules = this.state.facet(ai);
    let t3 = this.state.facet(T2.cspNonce);
    we.mount(this.root, this.styleModules.concat(mu).reverse(), t3 ? { nonce: t3 } : void 0);
  }
  readMeasured() {
    if (this.updateState == 2)
      throw new Error("Reading the editor layout isn't allowed during an update");
    this.updateState == 0 && this.measureScheduled > -1 && this.measure(false);
  }
  /**
  Schedule a layout measurement, optionally providing callbacks to
  do custom DOM measuring followed by a DOM write phase. Using
  this is preferable reading DOM layout directly from, for
  example, an event handler, because it'll make sure measuring and
  drawing done by other components is synchronized, avoiding
  unnecessary DOM layout computations.
  */
  requestMeasure(t3) {
    if (this.measureScheduled < 0 && (this.measureScheduled = this.win.requestAnimationFrame(() => this.measure())), t3) {
      if (this.measureRequests.indexOf(t3) > -1)
        return;
      if (t3.key != null) {
        for (let e3 = 0; e3 < this.measureRequests.length; e3++)
          if (this.measureRequests[e3].key === t3.key) {
            this.measureRequests[e3] = t3;
            return;
          }
      }
      this.measureRequests.push(t3);
    }
  }
  /**
  Get the value of a specific plugin, if present. Note that
  plugins that crash can be dropped from a view, so even when you
  know you registered a given plugin, it is recommended to check
  the return value of this method.
  */
  plugin(t3) {
    let e3 = this.pluginMap.get(t3);
    return (e3 === void 0 || e3 && e3.spec != t3) && this.pluginMap.set(t3, e3 = this.plugins.find((i3) => i3.spec == t3) || null), e3 && e3.update(this).value;
  }
  /**
  The top position of the document, in screen coordinates. This
  may be negative when the editor is scrolled down. Points
  directly to the top of the first line, not above the padding.
  */
  get documentTop() {
    return this.contentDOM.getBoundingClientRect().top + this.viewState.paddingTop;
  }
  /**
  Reports the padding above and below the document.
  */
  get documentPadding() {
    return { top: this.viewState.paddingTop, bottom: this.viewState.paddingBottom };
  }
  /**
  If the editor is transformed with CSS, this provides the scale
  along the X axis. Otherwise, it will just be 1. Note that
  transforms other than translation and scaling are not supported.
  */
  get scaleX() {
    return this.viewState.scaleX;
  }
  /**
  Provide the CSS transformed scale along the Y axis.
  */
  get scaleY() {
    return this.viewState.scaleY;
  }
  /**
  Find the text line or block widget at the given vertical
  position (which is interpreted as relative to the [top of the
  document](https://codemirror.net/6/docs/ref/#view.EditorView.documentTop)).
  */
  elementAtHeight(t3) {
    return this.readMeasured(), this.viewState.elementAtHeight(t3);
  }
  /**
  Find the line block (see
  [`lineBlockAt`](https://codemirror.net/6/docs/ref/#view.EditorView.lineBlockAt) at the given
  height, again interpreted relative to the [top of the
  document](https://codemirror.net/6/docs/ref/#view.EditorView.documentTop).
  */
  lineBlockAtHeight(t3) {
    return this.readMeasured(), this.viewState.lineBlockAtHeight(t3);
  }
  /**
  Get the extent and vertical position of all [line
  blocks](https://codemirror.net/6/docs/ref/#view.EditorView.lineBlockAt) in the viewport. Positions
  are relative to the [top of the
  document](https://codemirror.net/6/docs/ref/#view.EditorView.documentTop);
  */
  get viewportLineBlocks() {
    return this.viewState.viewportLines;
  }
  /**
  Find the line block around the given document position. A line
  block is a range delimited on both sides by either a
  non-[hidden](https://codemirror.net/6/docs/ref/#view.Decoration^replace) line breaks, or the
  start/end of the document. It will usually just hold a line of
  text, but may be broken into multiple textblocks by block
  widgets.
  */
  lineBlockAt(t3) {
    return this.viewState.lineBlockAt(t3);
  }
  /**
  The editor's total content height.
  */
  get contentHeight() {
    return this.viewState.contentHeight;
  }
  /**
  Move a cursor position by [grapheme
  cluster](https://codemirror.net/6/docs/ref/#state.findClusterBreak). `forward` determines whether
  the motion is away from the line start, or towards it. In
  bidirectional text, the line is traversed in visual order, using
  the editor's [text direction](https://codemirror.net/6/docs/ref/#view.EditorView.textDirection).
  When the start position was the last one on the line, the
  returned position will be across the line break. If there is no
  further line, the original position is returned.
  
  By default, this method moves over a single cluster. The
  optional `by` argument can be used to move across more. It will
  be called with the first cluster as argument, and should return
  a predicate that determines, for each subsequent cluster,
  whether it should also be moved over.
  */
  moveByChar(t3, e3, i3) {
    return Ws(this, t3, Kr$1(this, t3, e3, i3));
  }
  /**
  Move a cursor position across the next group of either
  [letters](https://codemirror.net/6/docs/ref/#state.EditorState.charCategorizer) or non-letter
  non-whitespace characters.
  */
  moveByGroup(t3, e3) {
    return Ws(this, t3, Kr$1(this, t3, e3, (i3) => _f(this, t3.head, i3)));
  }
  /**
  Move to the next line boundary in the given direction. If
  `includeWrap` is true, line wrapping is on, and there is a
  further wrap point on the current line, the wrap point will be
  returned. Otherwise this function will return the start or end
  of the line.
  */
  moveToLineBoundary(t3, e3, i3 = true) {
    return Hf(this, t3, e3, i3);
  }
  /**
  Move a cursor position vertically. When `distance` isn't given,
  it defaults to moving to the next line (including wrapped
  lines). Otherwise, `distance` should provide a positive distance
  in pixels.
  
  When `start` has a
  [`goalColumn`](https://codemirror.net/6/docs/ref/#state.SelectionRange.goalColumn), the vertical
  motion will use that as a target horizontal position. Otherwise,
  the cursor's own horizontal position is used. The returned
  cursor will have its goal column set to whichever column was
  used.
  */
  moveVertically(t3, e3, i3) {
    return Ws(this, t3, $f(this, t3, e3, i3));
  }
  /**
  Find the DOM parent node and offset (child offset if `node` is
  an element, character offset when it is a text node) at the
  given document position.
  
  Note that for positions that aren't currently in
  `visibleRanges`, the resulting DOM position isn't necessarily
  meaningful (it may just point before or after a placeholder
  element).
  */
  domAtPos(t3) {
    return this.docView.domAtPos(t3);
  }
  /**
  Find the document position at the given DOM node. Can be useful
  for associating positions with DOM events. Will raise an error
  when `node` isn't part of the editor content.
  */
  posAtDOM(t3, e3 = 0) {
    return this.docView.posFromDOM(t3, e3);
  }
  posAtCoords(t3, e3 = true) {
    return this.readMeasured(), Ql$1(this, t3, e3);
  }
  /**
  Get the screen coordinates at the given document position.
  `side` determines whether the coordinates are based on the
  element before (-1) or after (1) the position (if no element is
  available on the given side, the method will transparently use
  another strategy to get reasonable coordinates).
  */
  coordsAtPos(t3, e3 = 1) {
    this.readMeasured();
    let i3 = this.docView.coordsAt(t3, e3);
    if (!i3 || i3.left == i3.right)
      return i3;
    let s5 = this.state.doc.lineAt(t3), r2 = this.bidiSpans(s5), o2 = r2[ue$3.find(r2, t3 - s5.from, -1, e3)];
    return Xn(i3, o2.dir == tt$2.LTR == e3 > 0);
  }
  /**
  Return the rectangle around a given character. If `pos` does not
  point in front of a character that is in the viewport and
  rendered (i.e. not replaced, not a line break), this will return
  null. For space characters that are a line wrap point, this will
  return the position before the line break.
  */
  coordsForChar(t3) {
    return this.readMeasured(), this.docView.coordsForChar(t3);
  }
  /**
  The default width of a character in the editor. May not
  accurately reflect the width of all characters (given variable
  width fonts or styling of invididual ranges).
  */
  get defaultCharacterWidth() {
    return this.viewState.heightOracle.charWidth;
  }
  /**
  The default height of a line in the editor. May not be accurate
  for all lines.
  */
  get defaultLineHeight() {
    return this.viewState.heightOracle.lineHeight;
  }
  /**
  The text direction
  ([`direction`](https://developer.mozilla.org/en-US/docs/Web/CSS/direction)
  CSS property) of the editor's content element.
  */
  get textDirection() {
    return this.viewState.defaultTextDirection;
  }
  /**
  Find the text direction of the block at the given position, as
  assigned by CSS. If
  [`perLineTextDirection`](https://codemirror.net/6/docs/ref/#view.EditorView^perLineTextDirection)
  isn't enabled, or the given position is outside of the viewport,
  this will always return the same as
  [`textDirection`](https://codemirror.net/6/docs/ref/#view.EditorView.textDirection). Note that
  this may trigger a DOM layout.
  */
  textDirectionAt(t3) {
    return !this.state.facet(Hl$1) || t3 < this.viewport.from || t3 > this.viewport.to ? this.textDirection : (this.readMeasured(), this.docView.textDirectionAt(t3));
  }
  /**
  Whether this editor [wraps lines](https://codemirror.net/6/docs/ref/#view.EditorView.lineWrapping)
  (as determined by the
  [`white-space`](https://developer.mozilla.org/en-US/docs/Web/CSS/white-space)
  CSS property of its content element).
  */
  get lineWrapping() {
    return this.viewState.heightOracle.lineWrapping;
  }
  /**
  Returns the bidirectional text structure of the given line
  (which should be in the current document) as an array of span
  objects. The order of these spans matches the [text
  direction](https://codemirror.net/6/docs/ref/#view.EditorView.textDirection)—if that is
  left-to-right, the leftmost spans come first, otherwise the
  rightmost spans come first.
  */
  bidiSpans(t3) {
    if (t3.length > Mu)
      return ql$1(t3.length);
    let e3 = this.textDirectionAt(t3.from), i3;
    for (let r2 of this.bidiCache)
      if (r2.from == t3.from && r2.dir == e3 && (r2.fresh || Kl$1(r2.isolates, i3 = Hr$1(this, t3.from, t3.to))))
        return r2.order;
    i3 || (i3 = Hr$1(this, t3.from, t3.to));
    let s5 = Sf(t3.text, e3, i3);
    return this.bidiCache.push(new gs(t3.from, t3.to, e3, i3, true, s5)), s5;
  }
  /**
  Check whether the editor has focus.
  */
  get hasFocus() {
    var t3;
    return (this.dom.ownerDocument.hasFocus() || C$2.safari && ((t3 = this.inputState) === null || t3 === void 0 ? void 0 : t3.lastContextMenu) > Date.now() - 3e4) && this.root.activeElement == this.contentDOM;
  }
  /**
  Put focus on the editor.
  */
  focus() {
    this.observer.ignore(() => {
      kl$1(this.contentDOM), this.docView.updateSelection();
    });
  }
  /**
  Update the [root](https://codemirror.net/6/docs/ref/##view.EditorViewConfig.root) in which the editor lives. This is only
  necessary when moving the editor's existing DOM to a new window or shadow root.
  */
  setRoot(t3) {
    this._root != t3 && (this._root = t3, this.observer.setWindow((t3.nodeType == 9 ? t3 : t3.ownerDocument).defaultView || window), this.mountStyles());
  }
  /**
  Clean up this editor view, removing its element from the
  document, unregistering event handlers, and notifying
  plugins. The view instance can no longer be used after
  calling this.
  */
  destroy() {
    for (let t3 of this.plugins)
      t3.destroy(this);
    this.plugins = [], this.inputState.destroy(), this.dom.remove(), this.observer.destroy(), this.measureScheduled > -1 && this.win.cancelAnimationFrame(this.measureScheduled), this.destroyed = true;
  }
  /**
  Returns an effect that can be
  [added](https://codemirror.net/6/docs/ref/#state.TransactionSpec.effects) to a transaction to
  cause it to scroll the given position or range into view.
  */
  static scrollIntoView(t3, e3 = {}) {
    return Ii.of(new qe$2(typeof t3 == "number" ? b$1.cursor(t3) : t3, e3.y, e3.x, e3.yMargin, e3.xMargin));
  }
  /**
  Return an effect that resets the editor to its current (at the
  time this method was called) scroll position. Note that this
  only affects the editor's own scrollable element, not parents.
  See also
  [`EditorViewConfig.scrollTo`](https://codemirror.net/6/docs/ref/#view.EditorViewConfig.scrollTo).
  
  The effect should be used with a document identical to the one
  it was created for. Failing to do so is not an error, but may
  not scroll to the expected position. You can
  [map](https://codemirror.net/6/docs/ref/#state.StateEffect.map) the effect to account for changes.
  */
  scrollSnapshot() {
    let { scrollTop: t3, scrollLeft: e3 } = this.scrollDOM, i3 = this.viewState.scrollAnchorAt(t3);
    return Ii.of(new qe$2(b$1.cursor(i3.from), "start", "start", i3.top - t3, e3, true));
  }
  /**
  Returns an extension that can be used to add DOM event handlers.
  The value should be an object mapping event names to handler
  functions. For any given event, such functions are ordered by
  extension precedence, and the first handler to return true will
  be assumed to have handled that event, and no other handlers or
  built-in behavior will be activated for it. These are registered
  on the [content element](https://codemirror.net/6/docs/ref/#view.EditorView.contentDOM), except
  for `scroll` handlers, which will be called any time the
  editor's [scroll element](https://codemirror.net/6/docs/ref/#view.EditorView.scrollDOM) or one of
  its parent nodes is scrolled.
  */
  static domEventHandlers(t3) {
    return yt$2.define(() => ({}), { eventHandlers: t3 });
  }
  /**
  Create an extension that registers DOM event observers. Contrary
  to event [handlers](https://codemirror.net/6/docs/ref/#view.EditorView^domEventHandlers),
  observers can't be prevented from running by a higher-precedence
  handler returning true. They also don't prevent other handlers
  and observers from running when they return true, and should not
  call `preventDefault`.
  */
  static domEventObservers(t3) {
    return yt$2.define(() => ({}), { eventObservers: t3 });
  }
  /**
  Create a theme extension. The first argument can be a
  [`style-mod`](https://github.com/marijnh/style-mod#documentation)
  style spec providing the styles for the theme. These will be
  prefixed with a generated class for the style.
  
  Because the selectors will be prefixed with a scope class, rule
  that directly match the editor's [wrapper
  element](https://codemirror.net/6/docs/ref/#view.EditorView.dom)—to which the scope class will be
  added—need to be explicitly differentiated by adding an `&` to
  the selector for that element—for example
  `&.cm-focused`.
  
  When `dark` is set to true, the theme will be marked as dark,
  which will cause the `&dark` rules from [base
  themes](https://codemirror.net/6/docs/ref/#view.EditorView^baseTheme) to be used (as opposed to
  `&light` when a light theme is active).
  */
  static theme(t3, e3) {
    let i3 = we.newName(), s5 = [zi.of(i3), ai.of(Rn$1(`.${i3}`, t3))];
    return e3 && e3.dark && s5.push(Pn$1.of(true)), s5;
  }
  /**
  Create an extension that adds styles to the base theme. Like
  with [`theme`](https://codemirror.net/6/docs/ref/#view.EditorView^theme), use `&` to indicate the
  place of the editor wrapper element when directly targeting
  that. You can also use `&dark` or `&light` instead to only
  target editors with a dark or light theme.
  */
  static baseTheme(t3) {
    return Qn.lowest(ai.of(Rn$1("." + Bn, t3, ah)));
  }
  /**
  Retrieve an editor view instance from the view's DOM
  representation.
  */
  static findFromDOM(t3) {
    var e3;
    let i3 = t3.querySelector(".cm-content"), s5 = i3 && q.get(i3) || q.get(t3);
    return ((e3 = s5 == null ? void 0 : s5.rootView) === null || e3 === void 0 ? void 0 : e3.view) || null;
  }
};
T$4.styleModule = ai;
T$4.inputHandler = Il$1;
T$4.focusChangeEffect = Vl$1;
T$4.perLineTextDirection = Hl$1;
T$4.exceptionSink = Nl$1;
T$4.updateListener = Cn$1;
T$4.editable = Bs;
T$4.mouseSelectionStyle = El$1;
T$4.dragMovesSelection = Ll$1;
T$4.clickAddsSelectionRange = Rl$1;
T$4.decorations = xi;
T$4.atomicRanges = ir;
T$4.bidiIsolatedRanges = $l$1;
T$4.scrollMargins = Fl$1;
T$4.darkTheme = Pn$1;
T$4.cspNonce = /* @__PURE__ */ O$2.define({ combine: (n2) => n2.length ? n2[0] : "" });
T$4.contentAttributes = er;
T$4.editorAttributes = _l$1;
T$4.lineWrapping = /* @__PURE__ */ T$4.contentAttributes.of({ class: "cm-lineWrapping" });
T$4.announce = /* @__PURE__ */ z$4.define();
const Mu = 4096, ho$1 = {};
class gs {
  constructor(t3, e3, i3, s5, r2, o2) {
    this.from = t3, this.to = e3, this.dir = i3, this.isolates = s5, this.fresh = r2, this.order = o2;
  }
  static update(t3, e3) {
    if (e3.empty && !t3.some((r2) => r2.fresh))
      return t3;
    let i3 = [], s5 = t3.length ? t3[t3.length - 1].dir : tt$2.LTR;
    for (let r2 = Math.max(0, t3.length - 10); r2 < t3.length; r2++) {
      let o2 = t3[r2];
      o2.dir == s5 && !e3.touchesRange(o2.from, o2.to) && i3.push(new gs(e3.mapPos(o2.from, 1), e3.mapPos(o2.to, -1), o2.dir, o2.isolates, false, o2.order));
    }
    return i3;
  }
}
function ao$1(n2, t3, e3) {
  for (let i3 = n2.state.facet(t3), s5 = i3.length - 1; s5 >= 0; s5--) {
    let r2 = i3[s5], o2 = typeof r2 == "function" ? r2(n2) : r2;
    o2 && xn(o2, e3);
  }
  return e3;
}
const Tu = C$2.mac ? "mac" : C$2.windows ? "win" : C$2.linux ? "linux" : "key";
function Du(n2, t3) {
  const e3 = n2.split(/-(?!$)/);
  let i3 = e3[e3.length - 1];
  i3 == "Space" && (i3 = " ");
  let s5, r2, o2, l2;
  for (let h4 = 0; h4 < e3.length - 1; ++h4) {
    const a4 = e3[h4];
    if (/^(cmd|meta|m)$/i.test(a4))
      l2 = true;
    else if (/^a(lt)?$/i.test(a4))
      s5 = true;
    else if (/^(c|ctrl|control)$/i.test(a4))
      r2 = true;
    else if (/^s(hift)?$/i.test(a4))
      o2 = true;
    else if (/^mod$/i.test(a4))
      t3 == "mac" ? l2 = true : r2 = true;
    else
      throw new Error("Unrecognized modifier name: " + a4);
  }
  return s5 && (i3 = "Alt-" + i3), r2 && (i3 = "Ctrl-" + i3), l2 && (i3 = "Meta-" + i3), o2 && (i3 = "Shift-" + i3), i3;
}
function Wi(n2, t3, e3) {
  return t3.altKey && (n2 = "Alt-" + n2), t3.ctrlKey && (n2 = "Ctrl-" + n2), t3.metaKey && (n2 = "Meta-" + n2), e3 !== false && t3.shiftKey && (n2 = "Shift-" + n2), n2;
}
const Pu = /* @__PURE__ */ Qn.default(/* @__PURE__ */ T$4.domEventHandlers({
  keydown(n2, t3) {
    return Eu(Bu(t3.state), n2, t3, "editor");
  }
})), fh = /* @__PURE__ */ O$2.define({ enables: Pu }), co$1 = /* @__PURE__ */ new WeakMap();
function Bu(n2) {
  let t3 = n2.facet(fh), e3 = co$1.get(t3);
  return e3 || co$1.set(t3, e3 = Lu(t3.reduce((i3, s5) => i3.concat(s5), []))), e3;
}
let ae$2 = null;
const Ru = 4e3;
function Lu(n2, t3 = Tu) {
  let e3 = /* @__PURE__ */ Object.create(null), i3 = /* @__PURE__ */ Object.create(null), s5 = (o2, l2) => {
    let h4 = i3[o2];
    if (h4 == null)
      i3[o2] = l2;
    else if (h4 != l2)
      throw new Error("Key binding " + o2 + " is used both as a regular binding and as a multi-stroke prefix");
  }, r2 = (o2, l2, h4, a4, c3) => {
    var f2, u3;
    let d4 = e3[o2] || (e3[o2] = /* @__PURE__ */ Object.create(null)), p2 = l2.split(/ (?!$)/).map((y4) => Du(y4, t3));
    for (let y4 = 1; y4 < p2.length; y4++) {
      let x3 = p2.slice(0, y4).join(" ");
      s5(x3, true), d4[x3] || (d4[x3] = {
        preventDefault: true,
        stopPropagation: false,
        run: [(S4) => {
          let v2 = ae$2 = { view: S4, prefix: x3, scope: o2 };
          return setTimeout(() => {
            ae$2 == v2 && (ae$2 = null);
          }, Ru), true;
        }]
      });
    }
    let m4 = p2.join(" ");
    s5(m4, false);
    let g2 = d4[m4] || (d4[m4] = {
      preventDefault: false,
      stopPropagation: false,
      run: ((u3 = (f2 = d4._any) === null || f2 === void 0 ? void 0 : f2.run) === null || u3 === void 0 ? void 0 : u3.slice()) || []
    });
    h4 && g2.run.push(h4), a4 && (g2.preventDefault = true), c3 && (g2.stopPropagation = true);
  };
  for (let o2 of n2) {
    let l2 = o2.scope ? o2.scope.split(" ") : ["editor"];
    if (o2.any)
      for (let a4 of l2) {
        let c3 = e3[a4] || (e3[a4] = /* @__PURE__ */ Object.create(null));
        c3._any || (c3._any = { preventDefault: false, stopPropagation: false, run: [] });
        for (let f2 in c3)
          c3[f2].run.push(o2.any);
      }
    let h4 = o2[t3] || o2.key;
    if (h4)
      for (let a4 of l2)
        r2(a4, h4, o2.run, o2.preventDefault, o2.stopPropagation), o2.shift && r2(a4, "Shift-" + h4, o2.shift, o2.preventDefault, o2.stopPropagation);
  }
  return e3;
}
function Eu(n2, t3, e3, i3) {
  let s5 = tf(t3), r2 = di(s5, 0), o2 = nn$1(r2) == s5.length && s5 != " ", l2 = "", h4 = false, a4 = false, c3 = false;
  ae$2 && ae$2.view == e3 && ae$2.scope == i3 && (l2 = ae$2.prefix + " ", Xl$1.indexOf(t3.keyCode) < 0 && (a4 = true, ae$2 = null));
  let f2 = /* @__PURE__ */ new Set(), u3 = (g2) => {
    if (g2) {
      for (let y4 of g2.run)
        if (!f2.has(y4) && (f2.add(y4), y4(e3, t3)))
          return g2.stopPropagation && (c3 = true), true;
      g2.preventDefault && (g2.stopPropagation && (c3 = true), a4 = true);
    }
    return false;
  }, d4 = n2[i3], p2, m4;
  return d4 && (u3(d4[l2 + Wi(s5, t3, !o2)]) ? h4 = true : o2 && (t3.altKey || t3.metaKey || t3.ctrlKey) && // Ctrl-Alt may be used for AltGr on Windows
  !(C$2.windows && t3.ctrlKey && t3.altKey) && (p2 = ye$2[t3.keyCode]) && p2 != s5 ? (u3(d4[l2 + Wi(p2, t3, true)]) || t3.shiftKey && (m4 = yi[t3.keyCode]) != s5 && m4 != p2 && u3(d4[l2 + Wi(m4, t3, false)])) && (h4 = true) : o2 && t3.shiftKey && u3(d4[l2 + Wi(s5, t3, true)]) && (h4 = true), !h4 && u3(d4._any) && (h4 = true)), a4 && (h4 = true), h4 && c3 && t3.stopPropagation(), h4;
}
function fo$1(n2, t3, e3, i3, s5) {
  t3.lastIndex = 0;
  for (let r2 = n2.iterRange(e3, i3), o2 = e3, l2; !r2.next().done; o2 += r2.value.length)
    if (!r2.lineBreak)
      for (; l2 = t3.exec(r2.value); )
        s5(o2 + l2.index, l2);
}
function Vu(n2, t3) {
  let e3 = n2.visibleRanges;
  if (e3.length == 1 && e3[0].from == n2.viewport.from && e3[0].to == n2.viewport.to)
    return e3;
  let i3 = [];
  for (let { from: s5, to: r2 } of e3)
    s5 = Math.max(n2.state.doc.lineAt(s5).from, s5 - t3), r2 = Math.min(n2.state.doc.lineAt(r2).to, r2 + t3), i3.length && i3[i3.length - 1].to >= s5 ? i3[i3.length - 1].to = r2 : i3.push({ from: s5, to: r2 });
  return i3;
}
class Hu {
  /**
  Create a decorator.
  */
  constructor(t3) {
    const { regexp: e3, decoration: i3, decorate: s5, boundary: r2, maxLength: o2 = 1e3 } = t3;
    if (!e3.global)
      throw new RangeError("The regular expression given to MatchDecorator should have its 'g' flag set");
    if (this.regexp = e3, s5)
      this.addMatch = (l2, h4, a4, c3) => s5(c3, a4, a4 + l2[0].length, l2, h4);
    else if (typeof i3 == "function")
      this.addMatch = (l2, h4, a4, c3) => {
        let f2 = i3(l2, h4, a4);
        f2 && c3(a4, a4 + l2[0].length, f2);
      };
    else if (i3)
      this.addMatch = (l2, h4, a4, c3) => c3(a4, a4 + l2[0].length, i3);
    else
      throw new RangeError("Either 'decorate' or 'decoration' should be provided to MatchDecorator");
    this.boundary = r2, this.maxLength = o2;
  }
  /**
  Compute the full set of decorations for matches in the given
  view's viewport. You'll want to call this when initializing your
  plugin.
  */
  createDeco(t3) {
    let e3 = new Ee$2(), i3 = e3.add.bind(e3);
    for (let { from: s5, to: r2 } of Vu(t3, this.maxLength))
      fo$1(t3.state.doc, this.regexp, s5, r2, (o2, l2) => this.addMatch(l2, t3, o2, i3));
    return e3.finish();
  }
  /**
  Update a set of decorations for a view update. `deco` _must_ be
  the set of decorations produced by _this_ `MatchDecorator` for
  the view state before the update.
  */
  updateDeco(t3, e3) {
    let i3 = 1e9, s5 = -1;
    return t3.docChanged && t3.changes.iterChanges((r2, o2, l2, h4) => {
      h4 > t3.view.viewport.from && l2 < t3.view.viewport.to && (i3 = Math.min(l2, i3), s5 = Math.max(h4, s5));
    }), t3.viewportChanged || s5 - i3 > 1e3 ? this.createDeco(t3.view) : s5 > -1 ? this.updateRange(t3.view, e3.map(t3.changes), i3, s5) : e3;
  }
  updateRange(t3, e3, i3, s5) {
    for (let r2 of t3.visibleRanges) {
      let o2 = Math.max(r2.from, i3), l2 = Math.min(r2.to, s5);
      if (l2 > o2) {
        let h4 = t3.state.doc.lineAt(o2), a4 = h4.to < l2 ? t3.state.doc.lineAt(l2) : h4, c3 = Math.max(r2.from, h4.from), f2 = Math.min(r2.to, a4.to);
        if (this.boundary) {
          for (; o2 > h4.from; o2--)
            if (this.boundary.test(h4.text[o2 - 1 - h4.from])) {
              c3 = o2;
              break;
            }
          for (; l2 < a4.to; l2++)
            if (this.boundary.test(a4.text[l2 - a4.from])) {
              f2 = l2;
              break;
            }
        }
        let u3 = [], d4, p2 = (m4, g2, y4) => u3.push(y4.range(m4, g2));
        if (h4 == a4)
          for (this.regexp.lastIndex = c3 - h4.from; (d4 = this.regexp.exec(h4.text)) && d4.index < f2 - h4.from; )
            this.addMatch(d4, t3, d4.index + h4.from, p2);
        else
          fo$1(t3.state.doc, this.regexp, c3, f2, (m4, g2) => this.addMatch(g2, t3, m4, p2));
        e3 = e3.update({ filterFrom: c3, filterTo: f2, filter: (m4, g2) => m4 < c3 || g2 > f2, add: u3 });
      }
    }
    return e3;
  }
}
const Ln$1 = /x/.unicode != null ? "gu" : "g", _u = /* @__PURE__ */ new RegExp(`[\0-\b
--­؜​‎‏\u2028\u2029‭‮⁦⁧⁩\uFEFF￹-￼]`, Ln$1), $u = {
  0: "null",
  7: "bell",
  8: "backspace",
  10: "newline",
  11: "vertical tab",
  13: "carriage return",
  27: "escape",
  8203: "zero width space",
  8204: "zero width non-joiner",
  8205: "zero width joiner",
  8206: "left-to-right mark",
  8207: "right-to-left mark",
  8232: "line separator",
  8237: "left-to-right override",
  8238: "right-to-left override",
  8294: "left-to-right isolate",
  8295: "right-to-left isolate",
  8297: "pop directional isolate",
  8233: "paragraph separator",
  65279: "zero width no-break space",
  65532: "object replacement"
};
let qs = null;
function Fu() {
  var n2;
  if (qs == null && typeof document < "u" && document.body) {
    let t3 = document.body.style;
    qs = ((n2 = t3.tabSize) !== null && n2 !== void 0 ? n2 : t3.MozTabSize) != null;
  }
  return qs || false;
}
const ss = /* @__PURE__ */ O$2.define({
  combine(n2) {
    let t3 = Ds(n2, {
      render: null,
      specialChars: _u,
      addSpecialChars: null
    });
    return (t3.replaceTabs = !Fu()) && (t3.specialChars = new RegExp("	|" + t3.specialChars.source, Ln$1)), t3.addSpecialChars && (t3.specialChars = new RegExp(t3.specialChars.source + "|" + t3.addSpecialChars.source, Ln$1)), t3;
  }
});
function zu(n2 = {}) {
  return [ss.of(n2), Wu()];
}
let uo$1 = null;
function Wu() {
  return uo$1 || (uo$1 = yt$2.fromClass(class {
    constructor(n2) {
      this.view = n2, this.decorations = N$5.none, this.decorationCache = /* @__PURE__ */ Object.create(null), this.decorator = this.makeDecorator(n2.state.facet(ss)), this.decorations = this.decorator.createDeco(n2);
    }
    makeDecorator(n2) {
      return new Hu({
        regexp: n2.specialChars,
        decoration: (t3, e3, i3) => {
          let { doc: s5 } = e3.state, r2 = di(t3[0], 0);
          if (r2 == 9) {
            let o2 = s5.lineAt(i3), l2 = e3.state.tabSize, h4 = Oi(o2.text, l2, i3 - o2.from);
            return N$5.replace({
              widget: new Gu((l2 - h4 % l2) * this.view.defaultCharacterWidth / this.view.scaleX)
            });
          }
          return this.decorationCache[r2] || (this.decorationCache[r2] = N$5.replace({ widget: new qu(n2, r2) }));
        },
        boundary: n2.replaceTabs ? void 0 : /[^]/
      });
    }
    update(n2) {
      let t3 = n2.state.facet(ss);
      n2.startState.facet(ss) != t3 ? (this.decorator = this.makeDecorator(t3), this.decorations = this.decorator.createDeco(n2.view)) : this.decorations = this.decorator.updateDeco(n2, this.decorations);
    }
  }, {
    decorations: (n2) => n2.decorations
  }));
}
const ju = "•";
function Ku(n2) {
  return n2 >= 32 ? ju : n2 == 10 ? "␤" : String.fromCharCode(9216 + n2);
}
class qu extends Se$5 {
  constructor(t3, e3) {
    super(), this.options = t3, this.code = e3;
  }
  eq(t3) {
    return t3.code == this.code;
  }
  toDOM(t3) {
    let e3 = Ku(this.code), i3 = t3.state.phrase("Control character") + " " + ($u[this.code] || "0x" + this.code.toString(16)), s5 = this.options.render && this.options.render(this.code, i3, e3);
    if (s5)
      return s5;
    let r2 = document.createElement("span");
    return r2.textContent = e3, r2.title = i3, r2.setAttribute("aria-label", i3), r2.className = "cm-specialChar", r2;
  }
  ignoreEvent() {
    return false;
  }
}
class Gu extends Se$5 {
  constructor(t3) {
    super(), this.width = t3;
  }
  eq(t3) {
    return t3.width == this.width;
  }
  toDOM() {
    let t3 = document.createElement("span");
    return t3.textContent = "	", t3.className = "cm-tab", t3.style.width = this.width + "px", t3;
  }
  ignoreEvent() {
    return false;
  }
}
function Uu() {
  return Qu;
}
const Yu = /* @__PURE__ */ N$5.line({ class: "cm-activeLine" }), Qu = /* @__PURE__ */ yt$2.fromClass(class {
  constructor(n2) {
    this.decorations = this.getDeco(n2);
  }
  update(n2) {
    (n2.docChanged || n2.selectionSet) && (this.decorations = this.getDeco(n2.view));
  }
  getDeco(n2) {
    let t3 = -1, e3 = [];
    for (let i3 of n2.state.selection.ranges) {
      let s5 = n2.lineBlockAt(i3.head);
      s5.from > t3 && (e3.push(Yu.range(s5.from)), t3 = s5.from);
    }
    return N$5.set(e3);
  }
}, {
  decorations: (n2) => n2.decorations
}), ni = "-10000px";
class uh {
  constructor(t3, e3, i3) {
    this.facet = e3, this.createTooltipView = i3, this.input = t3.state.facet(e3), this.tooltips = this.input.filter((s5) => s5), this.tooltipViews = this.tooltips.map(i3);
  }
  update(t3, e3) {
    var i3;
    let s5 = t3.state.facet(this.facet), r2 = s5.filter((h4) => h4);
    if (s5 === this.input) {
      for (let h4 of this.tooltipViews)
        h4.update && h4.update(t3);
      return false;
    }
    let o2 = [], l2 = e3 ? [] : null;
    for (let h4 = 0; h4 < r2.length; h4++) {
      let a4 = r2[h4], c3 = -1;
      if (a4) {
        for (let f2 = 0; f2 < this.tooltips.length; f2++) {
          let u3 = this.tooltips[f2];
          u3 && u3.create == a4.create && (c3 = f2);
        }
        if (c3 < 0)
          o2[h4] = this.createTooltipView(a4), l2 && (l2[h4] = !!a4.above);
        else {
          let f2 = o2[h4] = this.tooltipViews[c3];
          l2 && (l2[h4] = e3[c3]), f2.update && f2.update(t3);
        }
      }
    }
    for (let h4 of this.tooltipViews)
      o2.indexOf(h4) < 0 && (h4.dom.remove(), (i3 = h4.destroy) === null || i3 === void 0 || i3.call(h4));
    return e3 && (l2.forEach((h4, a4) => e3[a4] = h4), e3.length = l2.length), this.input = s5, this.tooltips = r2, this.tooltipViews = o2, true;
  }
}
function Ju(n2) {
  let { win: t3 } = n2;
  return { top: 0, left: 0, bottom: t3.innerHeight, right: t3.innerWidth };
}
const Gs = /* @__PURE__ */ O$2.define({
  combine: (n2) => {
    var t3, e3, i3;
    return {
      position: C$2.ios ? "absolute" : ((t3 = n2.find((s5) => s5.position)) === null || t3 === void 0 ? void 0 : t3.position) || "fixed",
      parent: ((e3 = n2.find((s5) => s5.parent)) === null || e3 === void 0 ? void 0 : e3.parent) || null,
      tooltipSpace: ((i3 = n2.find((s5) => s5.tooltipSpace)) === null || i3 === void 0 ? void 0 : i3.tooltipSpace) || Ju
    };
  }
}), po$1 = /* @__PURE__ */ new WeakMap(), Xu = /* @__PURE__ */ yt$2.fromClass(class {
  constructor(n2) {
    this.view = n2, this.above = [], this.inView = true, this.madeAbsolute = false, this.lastTransaction = 0, this.measureTimeout = -1;
    let t3 = n2.state.facet(Gs);
    this.position = t3.position, this.parent = t3.parent, this.classes = n2.themeClasses, this.createContainer(), this.measureReq = { read: this.readMeasure.bind(this), write: this.writeMeasure.bind(this), key: this }, this.manager = new uh(n2, dh, (e3) => this.createTooltip(e3)), this.intersectionObserver = typeof IntersectionObserver == "function" ? new IntersectionObserver((e3) => {
      Date.now() > this.lastTransaction - 50 && e3.length > 0 && e3[e3.length - 1].intersectionRatio < 1 && this.measureSoon();
    }, { threshold: [1] }) : null, this.observeIntersection(), n2.win.addEventListener("resize", this.measureSoon = this.measureSoon.bind(this)), this.maybeMeasure();
  }
  createContainer() {
    this.parent ? (this.container = document.createElement("div"), this.container.style.position = "relative", this.container.className = this.view.themeClasses, this.parent.appendChild(this.container)) : this.container = this.view.dom;
  }
  observeIntersection() {
    if (this.intersectionObserver) {
      this.intersectionObserver.disconnect();
      for (let n2 of this.manager.tooltipViews)
        this.intersectionObserver.observe(n2.dom);
    }
  }
  measureSoon() {
    this.measureTimeout < 0 && (this.measureTimeout = setTimeout(() => {
      this.measureTimeout = -1, this.maybeMeasure();
    }, 50));
  }
  update(n2) {
    n2.transactions.length && (this.lastTransaction = Date.now());
    let t3 = this.manager.update(n2, this.above);
    t3 && this.observeIntersection();
    let e3 = t3 || n2.geometryChanged, i3 = n2.state.facet(Gs);
    if (i3.position != this.position && !this.madeAbsolute) {
      this.position = i3.position;
      for (let s5 of this.manager.tooltipViews)
        s5.dom.style.position = this.position;
      e3 = true;
    }
    if (i3.parent != this.parent) {
      this.parent && this.container.remove(), this.parent = i3.parent, this.createContainer();
      for (let s5 of this.manager.tooltipViews)
        this.container.appendChild(s5.dom);
      e3 = true;
    } else
      this.parent && this.view.themeClasses != this.classes && (this.classes = this.container.className = this.view.themeClasses);
    e3 && this.maybeMeasure();
  }
  createTooltip(n2) {
    let t3 = n2.create(this.view);
    if (t3.dom.classList.add("cm-tooltip"), n2.arrow && !t3.dom.querySelector(".cm-tooltip > .cm-tooltip-arrow")) {
      let e3 = document.createElement("div");
      e3.className = "cm-tooltip-arrow", t3.dom.appendChild(e3);
    }
    return t3.dom.style.position = this.position, t3.dom.style.top = ni, t3.dom.style.left = "0px", this.container.appendChild(t3.dom), t3.mount && t3.mount(this.view), t3;
  }
  destroy() {
    var n2, t3;
    this.view.win.removeEventListener("resize", this.measureSoon);
    for (let e3 of this.manager.tooltipViews)
      e3.dom.remove(), (n2 = e3.destroy) === null || n2 === void 0 || n2.call(e3);
    this.parent && this.container.remove(), (t3 = this.intersectionObserver) === null || t3 === void 0 || t3.disconnect(), clearTimeout(this.measureTimeout);
  }
  readMeasure() {
    let n2 = this.view.dom.getBoundingClientRect(), t3 = 1, e3 = 1, i3 = false;
    if (this.position == "fixed" && this.manager.tooltipViews.length) {
      let { dom: s5 } = this.manager.tooltipViews[0];
      if (C$2.gecko)
        i3 = s5.offsetParent != this.container.ownerDocument.body;
      else if (this.view.scaleX != 1 || this.view.scaleY != 1)
        i3 = true;
      else if (s5.style.top == ni && s5.style.left == "0px") {
        let r2 = s5.getBoundingClientRect();
        i3 = Math.abs(r2.top + 1e4) > 1 || Math.abs(r2.left) > 1;
      }
    }
    if (i3 || this.position == "absolute")
      if (this.parent) {
        let s5 = this.parent.getBoundingClientRect();
        s5.width && s5.height && (t3 = s5.width / this.parent.offsetWidth, e3 = s5.height / this.parent.offsetHeight);
      } else
        ({ scaleX: t3, scaleY: e3 } = this.view.viewState);
    return {
      editor: n2,
      parent: this.parent ? this.container.getBoundingClientRect() : n2,
      pos: this.manager.tooltips.map((s5, r2) => {
        let o2 = this.manager.tooltipViews[r2];
        return o2.getCoords ? o2.getCoords(s5.pos) : this.view.coordsAtPos(s5.pos);
      }),
      size: this.manager.tooltipViews.map(({ dom: s5 }) => s5.getBoundingClientRect()),
      space: this.view.state.facet(Gs).tooltipSpace(this.view),
      scaleX: t3,
      scaleY: e3,
      makeAbsolute: i3
    };
  }
  writeMeasure(n2) {
    var t3;
    if (n2.makeAbsolute) {
      this.madeAbsolute = true, this.position = "absolute";
      for (let l2 of this.manager.tooltipViews)
        l2.dom.style.position = "absolute";
    }
    let { editor: e3, space: i3, scaleX: s5, scaleY: r2 } = n2, o2 = [];
    for (let l2 = 0; l2 < this.manager.tooltips.length; l2++) {
      let h4 = this.manager.tooltips[l2], a4 = this.manager.tooltipViews[l2], { dom: c3 } = a4, f2 = n2.pos[l2], u3 = n2.size[l2];
      if (!f2 || f2.bottom <= Math.max(e3.top, i3.top) || f2.top >= Math.min(e3.bottom, i3.bottom) || f2.right < Math.max(e3.left, i3.left) - 0.1 || f2.left > Math.min(e3.right, i3.right) + 0.1) {
        c3.style.top = ni;
        continue;
      }
      let d4 = h4.arrow ? a4.dom.querySelector(".cm-tooltip-arrow") : null, p2 = d4 ? 7 : 0, m4 = u3.right - u3.left, g2 = (t3 = po$1.get(a4)) !== null && t3 !== void 0 ? t3 : u3.bottom - u3.top, y4 = a4.offset || td, x3 = this.view.textDirection == tt$2.LTR, S4 = u3.width > i3.right - i3.left ? x3 ? i3.left : i3.right - u3.width : x3 ? Math.min(f2.left - (d4 ? 14 : 0) + y4.x, i3.right - m4) : Math.max(i3.left, f2.left - m4 + (d4 ? 14 : 0) - y4.x), v2 = this.above[l2];
      !h4.strictSide && (v2 ? f2.top - (u3.bottom - u3.top) - y4.y < i3.top : f2.bottom + (u3.bottom - u3.top) + y4.y > i3.bottom) && v2 == i3.bottom - f2.bottom > f2.top - i3.top && (v2 = this.above[l2] = !v2);
      let A2 = (v2 ? f2.top - i3.top : i3.bottom - f2.bottom) - p2;
      if (A2 < g2 && a4.resize !== false) {
        if (A2 < this.view.defaultLineHeight) {
          c3.style.top = ni;
          continue;
        }
        po$1.set(a4, g2), c3.style.height = (g2 = A2) / r2 + "px";
      } else
        c3.style.height && (c3.style.height = "");
      let P2 = v2 ? f2.top - g2 - p2 - y4.y : f2.bottom + p2 + y4.y, M4 = S4 + m4;
      if (a4.overlap !== true)
        for (let I3 of o2)
          I3.left < M4 && I3.right > S4 && I3.top < P2 + g2 && I3.bottom > P2 && (P2 = v2 ? I3.top - g2 - 2 - p2 : I3.bottom + p2 + 2);
      if (this.position == "absolute" ? (c3.style.top = (P2 - n2.parent.top) / r2 + "px", c3.style.left = (S4 - n2.parent.left) / s5 + "px") : (c3.style.top = P2 / r2 + "px", c3.style.left = S4 / s5 + "px"), d4) {
        let I3 = f2.left + (x3 ? y4.x : -y4.x) - (S4 + 14 - 7);
        d4.style.left = I3 / s5 + "px";
      }
      a4.overlap !== true && o2.push({ left: S4, top: P2, right: M4, bottom: P2 + g2 }), c3.classList.toggle("cm-tooltip-above", v2), c3.classList.toggle("cm-tooltip-below", !v2), a4.positioned && a4.positioned(n2.space);
    }
  }
  maybeMeasure() {
    if (this.manager.tooltips.length && (this.view.inView && this.view.requestMeasure(this.measureReq), this.inView != this.view.inView && (this.inView = this.view.inView, !this.inView)))
      for (let n2 of this.manager.tooltipViews)
        n2.dom.style.top = ni;
  }
}, {
  eventObservers: {
    scroll() {
      this.maybeMeasure();
    }
  }
}), Zu = /* @__PURE__ */ T$4.baseTheme({
  ".cm-tooltip": {
    zIndex: 100,
    boxSizing: "border-box"
  },
  "&light .cm-tooltip": {
    border: "1px solid #bbb",
    backgroundColor: "#f5f5f5"
  },
  "&light .cm-tooltip-section:not(:first-child)": {
    borderTop: "1px solid #bbb"
  },
  "&dark .cm-tooltip": {
    backgroundColor: "#333338",
    color: "white"
  },
  ".cm-tooltip-arrow": {
    height: "7px",
    width: `${7 * 2}px`,
    position: "absolute",
    zIndex: -1,
    overflow: "hidden",
    "&:before, &:after": {
      content: "''",
      position: "absolute",
      width: 0,
      height: 0,
      borderLeft: "7px solid transparent",
      borderRight: "7px solid transparent"
    },
    ".cm-tooltip-above &": {
      bottom: "-7px",
      "&:before": {
        borderTop: "7px solid #bbb"
      },
      "&:after": {
        borderTop: "7px solid #f5f5f5",
        bottom: "1px"
      }
    },
    ".cm-tooltip-below &": {
      top: "-7px",
      "&:before": {
        borderBottom: "7px solid #bbb"
      },
      "&:after": {
        borderBottom: "7px solid #f5f5f5",
        top: "1px"
      }
    }
  },
  "&dark .cm-tooltip .cm-tooltip-arrow": {
    "&:before": {
      borderTopColor: "#333338",
      borderBottomColor: "#333338"
    },
    "&:after": {
      borderTopColor: "transparent",
      borderBottomColor: "transparent"
    }
  }
}), td = { x: 0, y: 0 }, dh = /* @__PURE__ */ O$2.define({
  enables: [Xu, Zu]
}), ms = /* @__PURE__ */ O$2.define();
class nr {
  // Needs to be static so that host tooltip instances always match
  static create(t3) {
    return new nr(t3);
  }
  constructor(t3) {
    this.view = t3, this.mounted = false, this.dom = document.createElement("div"), this.dom.classList.add("cm-tooltip-hover"), this.manager = new uh(t3, ms, (e3) => this.createHostedView(e3));
  }
  createHostedView(t3) {
    let e3 = t3.create(this.view);
    return e3.dom.classList.add("cm-tooltip-section"), this.dom.appendChild(e3.dom), this.mounted && e3.mount && e3.mount(this.view), e3;
  }
  mount(t3) {
    for (let e3 of this.manager.tooltipViews)
      e3.mount && e3.mount(t3);
    this.mounted = true;
  }
  positioned(t3) {
    for (let e3 of this.manager.tooltipViews)
      e3.positioned && e3.positioned(t3);
  }
  update(t3) {
    this.manager.update(t3);
  }
  destroy() {
    var t3;
    for (let e3 of this.manager.tooltipViews)
      (t3 = e3.destroy) === null || t3 === void 0 || t3.call(e3);
  }
  passProp(t3) {
    let e3;
    for (let i3 of this.manager.tooltipViews) {
      let s5 = i3[t3];
      if (s5 !== void 0) {
        if (e3 === void 0)
          e3 = s5;
        else if (e3 !== s5)
          return;
      }
    }
    return e3;
  }
  get offset() {
    return this.passProp("offset");
  }
  get getCoords() {
    return this.passProp("getCoords");
  }
  get overlap() {
    return this.passProp("overlap");
  }
  get resize() {
    return this.passProp("resize");
  }
}
const ed = /* @__PURE__ */ dh.compute([ms], (n2) => {
  let t3 = n2.facet(ms).filter((e3) => e3);
  return t3.length === 0 ? null : {
    pos: Math.min(...t3.map((e3) => e3.pos)),
    end: Math.max(...t3.filter((e3) => e3.end != null).map((e3) => e3.end)),
    create: nr.create,
    above: t3[0].above,
    arrow: t3.some((e3) => e3.arrow)
  };
});
class id {
  constructor(t3, e3, i3, s5, r2) {
    this.view = t3, this.source = e3, this.field = i3, this.setHover = s5, this.hoverTime = r2, this.hoverTimeout = -1, this.restartTimeout = -1, this.pending = null, this.lastMove = { x: 0, y: 0, target: t3.dom, time: 0 }, this.checkHover = this.checkHover.bind(this), t3.dom.addEventListener("mouseleave", this.mouseleave = this.mouseleave.bind(this)), t3.dom.addEventListener("mousemove", this.mousemove = this.mousemove.bind(this));
  }
  update() {
    this.pending && (this.pending = null, clearTimeout(this.restartTimeout), this.restartTimeout = setTimeout(() => this.startHover(), 20));
  }
  get active() {
    return this.view.state.field(this.field);
  }
  checkHover() {
    if (this.hoverTimeout = -1, this.active)
      return;
    let t3 = Date.now() - this.lastMove.time;
    t3 < this.hoverTime ? this.hoverTimeout = setTimeout(this.checkHover, this.hoverTime - t3) : this.startHover();
  }
  startHover() {
    clearTimeout(this.restartTimeout);
    let { view: t3, lastMove: e3 } = this, i3 = t3.docView.nearest(e3.target);
    if (!i3)
      return;
    let s5, r2 = 1;
    if (i3 instanceof fe$1)
      s5 = i3.posAtStart;
    else {
      if (s5 = t3.posAtCoords(e3), s5 == null)
        return;
      let l2 = t3.coordsAtPos(s5);
      if (!l2 || e3.y < l2.top || e3.y > l2.bottom || e3.x < l2.left - t3.defaultCharacterWidth || e3.x > l2.right + t3.defaultCharacterWidth)
        return;
      let h4 = t3.bidiSpans(t3.state.doc.lineAt(s5)).find((c3) => c3.from <= s5 && c3.to >= s5), a4 = h4 && h4.dir == tt$2.RTL ? -1 : 1;
      r2 = e3.x < l2.left ? -a4 : a4;
    }
    let o2 = this.source(t3, s5, r2);
    if (o2 != null && o2.then) {
      let l2 = this.pending = { pos: s5 };
      o2.then((h4) => {
        this.pending == l2 && (this.pending = null, h4 && t3.dispatch({ effects: this.setHover.of(h4) }));
      }, (h4) => ie$2(t3.state, h4, "hover tooltip"));
    } else
      o2 && t3.dispatch({ effects: this.setHover.of(o2) });
  }
  mousemove(t3) {
    var e3;
    this.lastMove = { x: t3.clientX, y: t3.clientY, target: t3.target, time: Date.now() }, this.hoverTimeout < 0 && (this.hoverTimeout = setTimeout(this.checkHover, this.hoverTime));
    let i3 = this.active;
    if (i3 && !go$1(this.lastMove.target) || this.pending) {
      let { pos: s5 } = i3 || this.pending, r2 = (e3 = i3 == null ? void 0 : i3.end) !== null && e3 !== void 0 ? e3 : s5;
      (s5 == r2 ? this.view.posAtCoords(this.lastMove) != s5 : !sd(this.view, s5, r2, t3.clientX, t3.clientY)) && (this.view.dispatch({ effects: this.setHover.of(null) }), this.pending = null);
    }
  }
  mouseleave(t3) {
    clearTimeout(this.hoverTimeout), this.hoverTimeout = -1, this.active && !go$1(t3.relatedTarget) && this.view.dispatch({ effects: this.setHover.of(null) });
  }
  destroy() {
    clearTimeout(this.hoverTimeout), this.view.dom.removeEventListener("mouseleave", this.mouseleave), this.view.dom.removeEventListener("mousemove", this.mousemove);
  }
}
function go$1(n2) {
  for (let t3 = n2; t3; t3 = t3.parentNode)
    if (t3.nodeType == 1 && t3.classList.contains("cm-tooltip"))
      return true;
  return false;
}
function sd(n2, t3, e3, i3, s5, r2) {
  let o2 = n2.scrollDOM.getBoundingClientRect(), l2 = n2.documentTop + n2.documentPadding.top + n2.contentHeight;
  if (o2.left > i3 || o2.right < i3 || o2.top > s5 || Math.min(o2.bottom, l2) < s5)
    return false;
  let h4 = n2.posAtCoords({ x: i3, y: s5 }, false);
  return h4 >= t3 && h4 <= e3;
}
function nd(n2, t3 = {}) {
  let e3 = z$4.define(), i3 = Ht$1.define({
    create() {
      return null;
    },
    update(s5, r2) {
      if (s5 && (t3.hideOnChange && (r2.docChanged || r2.selection) || t3.hideOn && t3.hideOn(r2, s5)))
        return null;
      if (s5 && r2.docChanged) {
        let o2 = r2.changes.mapPos(s5.pos, -1, mt$1.TrackDel);
        if (o2 == null)
          return null;
        let l2 = Object.assign(/* @__PURE__ */ Object.create(null), s5);
        l2.pos = o2, s5.end != null && (l2.end = r2.changes.mapPos(s5.end)), s5 = l2;
      }
      for (let o2 of r2.effects)
        o2.is(e3) && (s5 = o2.value), o2.is(rd) && (s5 = null);
      return s5;
    },
    provide: (s5) => ms.from(s5)
  });
  return [
    i3,
    yt$2.define((s5) => new id(
      s5,
      n2,
      i3,
      e3,
      t3.hoverTime || 300
      /* Hover.Time */
    )),
    ed
  ];
}
const rd = /* @__PURE__ */ z$4.define(), mo$1 = /* @__PURE__ */ O$2.define({
  combine(n2) {
    let t3, e3;
    for (let i3 of n2)
      t3 = t3 || i3.topContainer, e3 = e3 || i3.bottomContainer;
    return { topContainer: t3, bottomContainer: e3 };
  }
});
function od(n2, t3) {
  let e3 = n2.plugin(ph), i3 = e3 ? e3.specs.indexOf(t3) : -1;
  return i3 > -1 ? e3.panels[i3] : null;
}
const ph = /* @__PURE__ */ yt$2.fromClass(class {
  constructor(n2) {
    this.input = n2.state.facet(En$1), this.specs = this.input.filter((e3) => e3), this.panels = this.specs.map((e3) => e3(n2));
    let t3 = n2.state.facet(mo$1);
    this.top = new ji(n2, true, t3.topContainer), this.bottom = new ji(n2, false, t3.bottomContainer), this.top.sync(this.panels.filter((e3) => e3.top)), this.bottom.sync(this.panels.filter((e3) => !e3.top));
    for (let e3 of this.panels)
      e3.dom.classList.add("cm-panel"), e3.mount && e3.mount();
  }
  update(n2) {
    let t3 = n2.state.facet(mo$1);
    this.top.container != t3.topContainer && (this.top.sync([]), this.top = new ji(n2.view, true, t3.topContainer)), this.bottom.container != t3.bottomContainer && (this.bottom.sync([]), this.bottom = new ji(n2.view, false, t3.bottomContainer)), this.top.syncClasses(), this.bottom.syncClasses();
    let e3 = n2.state.facet(En$1);
    if (e3 != this.input) {
      let i3 = e3.filter((h4) => h4), s5 = [], r2 = [], o2 = [], l2 = [];
      for (let h4 of i3) {
        let a4 = this.specs.indexOf(h4), c3;
        a4 < 0 ? (c3 = h4(n2.view), l2.push(c3)) : (c3 = this.panels[a4], c3.update && c3.update(n2)), s5.push(c3), (c3.top ? r2 : o2).push(c3);
      }
      this.specs = i3, this.panels = s5, this.top.sync(r2), this.bottom.sync(o2);
      for (let h4 of l2)
        h4.dom.classList.add("cm-panel"), h4.mount && h4.mount();
    } else
      for (let i3 of this.panels)
        i3.update && i3.update(n2);
  }
  destroy() {
    this.top.sync([]), this.bottom.sync([]);
  }
}, {
  provide: (n2) => T$4.scrollMargins.of((t3) => {
    let e3 = t3.plugin(n2);
    return e3 && { top: e3.top.scrollMargin(), bottom: e3.bottom.scrollMargin() };
  })
});
class ji {
  constructor(t3, e3, i3) {
    this.view = t3, this.top = e3, this.container = i3, this.dom = void 0, this.classes = "", this.panels = [], this.syncClasses();
  }
  sync(t3) {
    for (let e3 of this.panels)
      e3.destroy && t3.indexOf(e3) < 0 && e3.destroy();
    this.panels = t3, this.syncDOM();
  }
  syncDOM() {
    if (this.panels.length == 0) {
      this.dom && (this.dom.remove(), this.dom = void 0);
      return;
    }
    if (!this.dom) {
      this.dom = document.createElement("div"), this.dom.className = this.top ? "cm-panels cm-panels-top" : "cm-panels cm-panels-bottom", this.dom.style[this.top ? "top" : "bottom"] = "0";
      let e3 = this.container || this.view.dom;
      e3.insertBefore(this.dom, this.top ? e3.firstChild : null);
    }
    let t3 = this.dom.firstChild;
    for (let e3 of this.panels)
      if (e3.dom.parentNode == this.dom) {
        for (; t3 != e3.dom; )
          t3 = wo$1(t3);
        t3 = t3.nextSibling;
      } else
        this.dom.insertBefore(e3.dom, t3);
    for (; t3; )
      t3 = wo$1(t3);
  }
  scrollMargin() {
    return !this.dom || this.container ? 0 : Math.max(0, this.top ? this.dom.getBoundingClientRect().bottom - Math.max(0, this.view.scrollDOM.getBoundingClientRect().top) : Math.min(innerHeight, this.view.scrollDOM.getBoundingClientRect().bottom) - this.dom.getBoundingClientRect().top);
  }
  syncClasses() {
    if (!(!this.container || this.classes == this.view.themeClasses)) {
      for (let t3 of this.classes.split(" "))
        t3 && this.container.classList.remove(t3);
      for (let t3 of (this.classes = this.view.themeClasses).split(" "))
        t3 && this.container.classList.add(t3);
    }
  }
}
function wo$1(n2) {
  let t3 = n2.nextSibling;
  return n2.remove(), t3;
}
const En$1 = /* @__PURE__ */ O$2.define({
  enables: ph
});
let ke$2 = class ke2 extends Qe$2 {
  /**
  @internal
  */
  compare(t3) {
    return this == t3 || this.constructor == t3.constructor && this.eq(t3);
  }
  /**
  Compare this marker to another marker of the same type.
  */
  eq(t3) {
    return false;
  }
  /**
  Called if the marker has a `toDOM` method and its representation
  was removed from a gutter.
  */
  destroy(t3) {
  }
};
ke$2.prototype.elementClass = "";
ke$2.prototype.toDOM = void 0;
ke$2.prototype.mapMode = mt$1.TrackBefore;
ke$2.prototype.startSide = ke$2.prototype.endSide = -1;
ke$2.prototype.point = true;
const ns = /* @__PURE__ */ O$2.define(), ld = {
  class: "",
  renderEmptyElements: false,
  elementStyle: "",
  markers: () => $$3.empty,
  lineMarker: () => null,
  widgetMarker: () => null,
  lineMarkerChange: null,
  initialSpacer: null,
  updateSpacer: null,
  domEventHandlers: {}
}, rs = /* @__PURE__ */ O$2.define();
function hd(n2) {
  return [ad(), rs.of(Object.assign(Object.assign({}, ld), n2))];
}
const Nn = /* @__PURE__ */ O$2.define({
  combine: (n2) => n2.some((t3) => t3)
});
function ad(n2) {
  let t3 = [
    cd
  ];
  return n2 && n2.fixed === false && t3.push(Nn.of(true)), t3;
}
const cd = /* @__PURE__ */ yt$2.fromClass(class {
  constructor(n2) {
    this.view = n2, this.prevViewport = n2.viewport, this.dom = document.createElement("div"), this.dom.className = "cm-gutters", this.dom.setAttribute("aria-hidden", "true"), this.dom.style.minHeight = this.view.contentHeight / this.view.scaleY + "px", this.gutters = n2.state.facet(rs).map((t3) => new bo$1(n2, t3));
    for (let t3 of this.gutters)
      this.dom.appendChild(t3.dom);
    this.fixed = !n2.state.facet(Nn), this.fixed && (this.dom.style.position = "sticky"), this.syncGutters(false), n2.scrollDOM.insertBefore(this.dom, n2.contentDOM);
  }
  update(n2) {
    if (this.updateGutters(n2)) {
      let t3 = this.prevViewport, e3 = n2.view.viewport, i3 = Math.min(t3.to, e3.to) - Math.max(t3.from, e3.from);
      this.syncGutters(i3 < (e3.to - e3.from) * 0.8);
    }
    n2.geometryChanged && (this.dom.style.minHeight = this.view.contentHeight + "px"), this.view.state.facet(Nn) != !this.fixed && (this.fixed = !this.fixed, this.dom.style.position = this.fixed ? "sticky" : ""), this.prevViewport = n2.view.viewport;
  }
  syncGutters(n2) {
    let t3 = this.dom.nextSibling;
    n2 && this.dom.remove();
    let e3 = $$3.iter(this.view.state.facet(ns), this.view.viewport.from), i3 = [], s5 = this.gutters.map((r2) => new fd(r2, this.view.viewport, -this.view.documentPadding.top));
    for (let r2 of this.view.viewportLineBlocks)
      if (i3.length && (i3 = []), Array.isArray(r2.type)) {
        let o2 = true;
        for (let l2 of r2.type)
          if (l2.type == Lt$1.Text && o2) {
            In(e3, i3, l2.from);
            for (let h4 of s5)
              h4.line(this.view, l2, i3);
            o2 = false;
          } else if (l2.widget)
            for (let h4 of s5)
              h4.widget(this.view, l2);
      } else if (r2.type == Lt$1.Text) {
        In(e3, i3, r2.from);
        for (let o2 of s5)
          o2.line(this.view, r2, i3);
      } else if (r2.widget)
        for (let o2 of s5)
          o2.widget(this.view, r2);
    for (let r2 of s5)
      r2.finish();
    n2 && this.view.scrollDOM.insertBefore(this.dom, t3);
  }
  updateGutters(n2) {
    let t3 = n2.startState.facet(rs), e3 = n2.state.facet(rs), i3 = n2.docChanged || n2.heightChanged || n2.viewportChanged || !$$3.eq(n2.startState.facet(ns), n2.state.facet(ns), n2.view.viewport.from, n2.view.viewport.to);
    if (t3 == e3)
      for (let s5 of this.gutters)
        s5.update(n2) && (i3 = true);
    else {
      i3 = true;
      let s5 = [];
      for (let r2 of e3) {
        let o2 = t3.indexOf(r2);
        o2 < 0 ? s5.push(new bo$1(this.view, r2)) : (this.gutters[o2].update(n2), s5.push(this.gutters[o2]));
      }
      for (let r2 of this.gutters)
        r2.dom.remove(), s5.indexOf(r2) < 0 && r2.destroy();
      for (let r2 of s5)
        this.dom.appendChild(r2.dom);
      this.gutters = s5;
    }
    return i3;
  }
  destroy() {
    for (let n2 of this.gutters)
      n2.destroy();
    this.dom.remove();
  }
}, {
  provide: (n2) => T$4.scrollMargins.of((t3) => {
    let e3 = t3.plugin(n2);
    return !e3 || e3.gutters.length == 0 || !e3.fixed ? null : t3.textDirection == tt$2.LTR ? { left: e3.dom.offsetWidth * t3.scaleX } : { right: e3.dom.offsetWidth * t3.scaleX };
  })
});
function yo$1(n2) {
  return Array.isArray(n2) ? n2 : [n2];
}
function In(n2, t3, e3) {
  for (; n2.value && n2.from <= e3; )
    n2.from == e3 && t3.push(n2.value), n2.next();
}
class fd {
  constructor(t3, e3, i3) {
    this.gutter = t3, this.height = i3, this.i = 0, this.cursor = $$3.iter(t3.markers, e3.from);
  }
  addElement(t3, e3, i3) {
    let { gutter: s5 } = this, r2 = (e3.top - this.height) / t3.scaleY, o2 = e3.height / t3.scaleY;
    if (this.i == s5.elements.length) {
      let l2 = new gh(t3, o2, r2, i3);
      s5.elements.push(l2), s5.dom.appendChild(l2.dom);
    } else
      s5.elements[this.i].update(t3, o2, r2, i3);
    this.height = e3.bottom, this.i++;
  }
  line(t3, e3, i3) {
    let s5 = [];
    In(this.cursor, s5, e3.from), i3.length && (s5 = s5.concat(i3));
    let r2 = this.gutter.config.lineMarker(t3, e3, s5);
    r2 && s5.unshift(r2);
    let o2 = this.gutter;
    s5.length == 0 && !o2.config.renderEmptyElements || this.addElement(t3, e3, s5);
  }
  widget(t3, e3) {
    let i3 = this.gutter.config.widgetMarker(t3, e3.widget, e3);
    i3 && this.addElement(t3, e3, [i3]);
  }
  finish() {
    let t3 = this.gutter;
    for (; t3.elements.length > this.i; ) {
      let e3 = t3.elements.pop();
      t3.dom.removeChild(e3.dom), e3.destroy();
    }
  }
}
let bo$1 = class bo2 {
  constructor(t3, e3) {
    this.view = t3, this.config = e3, this.elements = [], this.spacer = null, this.dom = document.createElement("div"), this.dom.className = "cm-gutter" + (this.config.class ? " " + this.config.class : "");
    for (let i3 in e3.domEventHandlers)
      this.dom.addEventListener(i3, (s5) => {
        let r2 = s5.target, o2;
        if (r2 != this.dom && this.dom.contains(r2)) {
          for (; r2.parentNode != this.dom; )
            r2 = r2.parentNode;
          let h4 = r2.getBoundingClientRect();
          o2 = (h4.top + h4.bottom) / 2;
        } else
          o2 = s5.clientY;
        let l2 = t3.lineBlockAtHeight(o2 - t3.documentTop);
        e3.domEventHandlers[i3](t3, l2, s5) && s5.preventDefault();
      });
    this.markers = yo$1(e3.markers(t3)), e3.initialSpacer && (this.spacer = new gh(t3, 0, 0, [e3.initialSpacer(t3)]), this.dom.appendChild(this.spacer.dom), this.spacer.dom.style.cssText += "visibility: hidden; pointer-events: none");
  }
  update(t3) {
    let e3 = this.markers;
    if (this.markers = yo$1(this.config.markers(t3.view)), this.spacer && this.config.updateSpacer) {
      let s5 = this.config.updateSpacer(this.spacer.markers[0], t3);
      s5 != this.spacer.markers[0] && this.spacer.update(t3.view, 0, 0, [s5]);
    }
    let i3 = t3.view.viewport;
    return !$$3.eq(this.markers, e3, i3.from, i3.to) || (this.config.lineMarkerChange ? this.config.lineMarkerChange(t3) : false);
  }
  destroy() {
    for (let t3 of this.elements)
      t3.destroy();
  }
};
class gh {
  constructor(t3, e3, i3, s5) {
    this.height = -1, this.above = 0, this.markers = [], this.dom = document.createElement("div"), this.dom.className = "cm-gutterElement", this.update(t3, e3, i3, s5);
  }
  update(t3, e3, i3, s5) {
    this.height != e3 && (this.height = e3, this.dom.style.height = e3 + "px"), this.above != i3 && (this.dom.style.marginTop = (this.above = i3) ? i3 + "px" : ""), ud(this.markers, s5) || this.setMarkers(t3, s5);
  }
  setMarkers(t3, e3) {
    let i3 = "cm-gutterElement", s5 = this.dom.firstChild;
    for (let r2 = 0, o2 = 0; ; ) {
      let l2 = o2, h4 = r2 < e3.length ? e3[r2++] : null, a4 = false;
      if (h4) {
        let c3 = h4.elementClass;
        c3 && (i3 += " " + c3);
        for (let f2 = o2; f2 < this.markers.length; f2++)
          if (this.markers[f2].compare(h4)) {
            l2 = f2, a4 = true;
            break;
          }
      } else
        l2 = this.markers.length;
      for (; o2 < l2; ) {
        let c3 = this.markers[o2++];
        if (c3.toDOM) {
          c3.destroy(s5);
          let f2 = s5.nextSibling;
          s5.remove(), s5 = f2;
        }
      }
      if (!h4)
        break;
      h4.toDOM && (a4 ? s5 = s5.nextSibling : this.dom.insertBefore(h4.toDOM(t3), s5)), a4 && o2++;
    }
    this.dom.className = i3, this.markers = e3;
  }
  destroy() {
    this.setMarkers(null, []);
  }
}
function ud(n2, t3) {
  if (n2.length != t3.length)
    return false;
  for (let e3 = 0; e3 < n2.length; e3++)
    if (!n2[e3].compare(t3[e3]))
      return false;
  return true;
}
const dd = /* @__PURE__ */ new class extends ke$2 {
  constructor() {
    super(...arguments), this.elementClass = "cm-activeLineGutter";
  }
}(), pd = /* @__PURE__ */ ns.compute(["selection"], (n2) => {
  let t3 = [], e3 = -1;
  for (let i3 of n2.selection.ranges) {
    let s5 = n2.doc.lineAt(i3.head).from;
    s5 > e3 && (e3 = s5, t3.push(dd.range(s5)));
  }
  return $$3.of(t3);
});
function gd() {
  return pd;
}
const mh = 1024;
let md = 0;
class Us {
  constructor(t3, e3) {
    this.from = t3, this.to = e3;
  }
}
let R$5 = class R2 {
  /**
  Create a new node prop type.
  */
  constructor(t3 = {}) {
    this.id = md++, this.perNode = !!t3.perNode, this.deserialize = t3.deserialize || (() => {
      throw new Error("This node type doesn't define a deserialize function");
    });
  }
  /**
  This is meant to be used with
  [`NodeSet.extend`](#common.NodeSet.extend) or
  [`LRParser.configure`](#lr.ParserConfig.props) to compute
  prop values for each node type in the set. Takes a [match
  object](#common.NodeType^match) or function that returns undefined
  if the node type doesn't get this prop, and the prop's value if
  it does.
  */
  add(t3) {
    if (this.perNode)
      throw new RangeError("Can't add per-node props to node types");
    return typeof t3 != "function" && (t3 = bt$1.match(t3)), (e3) => {
      let i3 = t3(e3);
      return i3 === void 0 ? null : [this, i3];
    };
  }
};
R$5.closedBy = new R$5({ deserialize: (n2) => n2.split(" ") });
R$5.openedBy = new R$5({ deserialize: (n2) => n2.split(" ") });
R$5.group = new R$5({ deserialize: (n2) => n2.split(" ") });
R$5.contextHash = new R$5({ perNode: true });
R$5.lookAhead = new R$5({ perNode: true });
R$5.mounted = new R$5({ perNode: true });
class ws {
  constructor(t3, e3, i3) {
    this.tree = t3, this.overlay = e3, this.parser = i3;
  }
  /**
  @internal
  */
  static get(t3) {
    return t3 && t3.props && t3.props[R$5.mounted.id];
  }
}
const wd = /* @__PURE__ */ Object.create(null);
let bt$1 = class bt2 {
  /**
  @internal
  */
  constructor(t3, e3, i3, s5 = 0) {
    this.name = t3, this.props = e3, this.id = i3, this.flags = s5;
  }
  /**
  Define a node type.
  */
  static define(t3) {
    let e3 = t3.props && t3.props.length ? /* @__PURE__ */ Object.create(null) : wd, i3 = (t3.top ? 1 : 0) | (t3.skipped ? 2 : 0) | (t3.error ? 4 : 0) | (t3.name == null ? 8 : 0), s5 = new bt2(t3.name || "", e3, t3.id, i3);
    if (t3.props) {
      for (let r2 of t3.props)
        if (Array.isArray(r2) || (r2 = r2(s5)), r2) {
          if (r2[0].perNode)
            throw new RangeError("Can't store a per-node prop on a node type");
          e3[r2[0].id] = r2[1];
        }
    }
    return s5;
  }
  /**
  Retrieves a node prop for this type. Will return `undefined` if
  the prop isn't present on this node.
  */
  prop(t3) {
    return this.props[t3.id];
  }
  /**
  True when this is the top node of a grammar.
  */
  get isTop() {
    return (this.flags & 1) > 0;
  }
  /**
  True when this node is produced by a skip rule.
  */
  get isSkipped() {
    return (this.flags & 2) > 0;
  }
  /**
  Indicates whether this is an error node.
  */
  get isError() {
    return (this.flags & 4) > 0;
  }
  /**
  When true, this node type doesn't correspond to a user-declared
  named node, for example because it is used to cache repetition.
  */
  get isAnonymous() {
    return (this.flags & 8) > 0;
  }
  /**
  Returns true when this node's name or one of its
  [groups](#common.NodeProp^group) matches the given string.
  */
  is(t3) {
    if (typeof t3 == "string") {
      if (this.name == t3)
        return true;
      let e3 = this.prop(R$5.group);
      return e3 ? e3.indexOf(t3) > -1 : false;
    }
    return this.id == t3;
  }
  /**
  Create a function from node types to arbitrary values by
  specifying an object whose property names are node or
  [group](#common.NodeProp^group) names. Often useful with
  [`NodeProp.add`](#common.NodeProp.add). You can put multiple
  names, separated by spaces, in a single property name to map
  multiple node names to a single value.
  */
  static match(t3) {
    let e3 = /* @__PURE__ */ Object.create(null);
    for (let i3 in t3)
      for (let s5 of i3.split(" "))
        e3[s5] = t3[i3];
    return (i3) => {
      for (let s5 = i3.prop(R$5.group), r2 = -1; r2 < (s5 ? s5.length : 0); r2++) {
        let o2 = e3[r2 < 0 ? i3.name : s5[r2]];
        if (o2)
          return o2;
      }
    };
  }
};
bt$1.none = new bt$1(
  "",
  /* @__PURE__ */ Object.create(null),
  0,
  8
  /* NodeFlag.Anonymous */
);
class rr {
  /**
  Create a set with the given types. The `id` property of each
  type should correspond to its position within the array.
  */
  constructor(t3) {
    this.types = t3;
    for (let e3 = 0; e3 < t3.length; e3++)
      if (t3[e3].id != e3)
        throw new RangeError("Node type ids should correspond to array positions when creating a node set");
  }
  /**
  Create a copy of this set with some node properties added. The
  arguments to this method can be created with
  [`NodeProp.add`](#common.NodeProp.add).
  */
  extend(...t3) {
    let e3 = [];
    for (let i3 of this.types) {
      let s5 = null;
      for (let r2 of t3) {
        let o2 = r2(i3);
        o2 && (s5 || (s5 = Object.assign({}, i3.props)), s5[o2[0].id] = o2[1]);
      }
      e3.push(s5 ? new bt$1(i3.name, s5, i3.id, i3.flags) : i3);
    }
    return new rr(e3);
  }
}
const Ki = /* @__PURE__ */ new WeakMap(), ko$1 = /* @__PURE__ */ new WeakMap();
var st$1;
(function(n2) {
  n2[n2.ExcludeBuffers = 1] = "ExcludeBuffers", n2[n2.IncludeAnonymous = 2] = "IncludeAnonymous", n2[n2.IgnoreMounts = 4] = "IgnoreMounts", n2[n2.IgnoreOverlays = 8] = "IgnoreOverlays";
})(st$1 || (st$1 = {}));
let X$1 = class X2 {
  /**
  Construct a new tree. See also [`Tree.build`](#common.Tree^build).
  */
  constructor(t3, e3, i3, s5, r2) {
    if (this.type = t3, this.children = e3, this.positions = i3, this.length = s5, this.props = null, r2 && r2.length) {
      this.props = /* @__PURE__ */ Object.create(null);
      for (let [o2, l2] of r2)
        this.props[typeof o2 == "number" ? o2 : o2.id] = l2;
    }
  }
  /**
  @internal
  */
  toString() {
    let t3 = ws.get(this);
    if (t3 && !t3.overlay)
      return t3.tree.toString();
    let e3 = "";
    for (let i3 of this.children) {
      let s5 = i3.toString();
      s5 && (e3 && (e3 += ","), e3 += s5);
    }
    return this.type.name ? (/\W/.test(this.type.name) && !this.type.isError ? JSON.stringify(this.type.name) : this.type.name) + (e3.length ? "(" + e3 + ")" : "") : e3;
  }
  /**
  Get a [tree cursor](#common.TreeCursor) positioned at the top of
  the tree. Mode can be used to [control](#common.IterMode) which
  nodes the cursor visits.
  */
  cursor(t3 = 0) {
    return new Hn$1(this.topNode, t3);
  }
  /**
  Get a [tree cursor](#common.TreeCursor) pointing into this tree
  at the given position and side (see
  [`moveTo`](#common.TreeCursor.moveTo).
  */
  cursorAt(t3, e3 = 0, i3 = 0) {
    let s5 = Ki.get(this) || this.topNode, r2 = new Hn$1(s5);
    return r2.moveTo(t3, e3), Ki.set(this, r2._tree), r2;
  }
  /**
  Get a [syntax node](#common.SyntaxNode) object for the top of the
  tree.
  */
  get topNode() {
    return new Tt$1(this, 0, 0, null);
  }
  /**
  Get the [syntax node](#common.SyntaxNode) at the given position.
  If `side` is -1, this will move into nodes that end at the
  position. If 1, it'll move into nodes that start at the
  position. With 0, it'll only enter nodes that cover the position
  from both sides.
  
  Note that this will not enter
  [overlays](#common.MountedTree.overlay), and you often want
  [`resolveInner`](#common.Tree.resolveInner) instead.
  */
  resolve(t3, e3 = 0) {
    let i3 = Si(Ki.get(this) || this.topNode, t3, e3, false);
    return Ki.set(this, i3), i3;
  }
  /**
  Like [`resolve`](#common.Tree.resolve), but will enter
  [overlaid](#common.MountedTree.overlay) nodes, producing a syntax node
  pointing into the innermost overlaid tree at the given position
  (with parent links going through all parent structure, including
  the host trees).
  */
  resolveInner(t3, e3 = 0) {
    let i3 = Si(ko$1.get(this) || this.topNode, t3, e3, true);
    return ko$1.set(this, i3), i3;
  }
  /**
  In some situations, it can be useful to iterate through all
  nodes around a position, including those in overlays that don't
  directly cover the position. This method gives you an iterator
  that will produce all nodes, from small to big, around the given
  position.
  */
  resolveStack(t3, e3 = 0) {
    return kd(this, t3, e3);
  }
  /**
  Iterate over the tree and its children, calling `enter` for any
  node that touches the `from`/`to` region (if given) before
  running over such a node's children, and `leave` (if given) when
  leaving the node. When `enter` returns `false`, that node will
  not have its children iterated over (or `leave` called).
  */
  iterate(t3) {
    let { enter: e3, leave: i3, from: s5 = 0, to: r2 = this.length } = t3, o2 = t3.mode || 0, l2 = (o2 & st$1.IncludeAnonymous) > 0;
    for (let h4 = this.cursor(o2 | st$1.IncludeAnonymous); ; ) {
      let a4 = false;
      if (h4.from <= r2 && h4.to >= s5 && (!l2 && h4.type.isAnonymous || e3(h4) !== false)) {
        if (h4.firstChild())
          continue;
        a4 = true;
      }
      for (; a4 && i3 && (l2 || !h4.type.isAnonymous) && i3(h4), !h4.nextSibling(); ) {
        if (!h4.parent())
          return;
        a4 = true;
      }
    }
  }
  /**
  Get the value of the given [node prop](#common.NodeProp) for this
  node. Works with both per-node and per-type props.
  */
  prop(t3) {
    return t3.perNode ? this.props ? this.props[t3.id] : void 0 : this.type.prop(t3);
  }
  /**
  Returns the node's [per-node props](#common.NodeProp.perNode) in a
  format that can be passed to the [`Tree`](#common.Tree)
  constructor.
  */
  get propValues() {
    let t3 = [];
    if (this.props)
      for (let e3 in this.props)
        t3.push([+e3, this.props[e3]]);
    return t3;
  }
  /**
  Balance the direct children of this tree, producing a copy of
  which may have children grouped into subtrees with type
  [`NodeType.none`](#common.NodeType^none).
  */
  balance(t3 = {}) {
    return this.children.length <= 8 ? this : hr$1(bt$1.none, this.children, this.positions, 0, this.children.length, 0, this.length, (e3, i3, s5) => new X2(this.type, e3, i3, s5, this.propValues), t3.makeTree || ((e3, i3, s5) => new X2(bt$1.none, e3, i3, s5)));
  }
  /**
  Build a tree from a postfix-ordered buffer of node information,
  or a cursor over such a buffer.
  */
  static build(t3) {
    return xd(t3);
  }
};
X$1.empty = new X$1(bt$1.none, [], [], 0);
class or {
  constructor(t3, e3) {
    this.buffer = t3, this.index = e3;
  }
  get id() {
    return this.buffer[this.index - 4];
  }
  get start() {
    return this.buffer[this.index - 3];
  }
  get end() {
    return this.buffer[this.index - 2];
  }
  get size() {
    return this.buffer[this.index - 1];
  }
  get pos() {
    return this.index;
  }
  next() {
    this.index -= 4;
  }
  fork() {
    return new or(this.buffer, this.index);
  }
}
let xe$2 = class xe2 {
  /**
  Create a tree buffer.
  */
  constructor(t3, e3, i3) {
    this.buffer = t3, this.length = e3, this.set = i3;
  }
  /**
  @internal
  */
  get type() {
    return bt$1.none;
  }
  /**
  @internal
  */
  toString() {
    let t3 = [];
    for (let e3 = 0; e3 < this.buffer.length; )
      t3.push(this.childString(e3)), e3 = this.buffer[e3 + 3];
    return t3.join(",");
  }
  /**
  @internal
  */
  childString(t3) {
    let e3 = this.buffer[t3], i3 = this.buffer[t3 + 3], s5 = this.set.types[e3], r2 = s5.name;
    if (/\W/.test(r2) && !s5.isError && (r2 = JSON.stringify(r2)), t3 += 4, i3 == t3)
      return r2;
    let o2 = [];
    for (; t3 < i3; )
      o2.push(this.childString(t3)), t3 = this.buffer[t3 + 3];
    return r2 + "(" + o2.join(",") + ")";
  }
  /**
  @internal
  */
  findChild(t3, e3, i3, s5, r2) {
    let { buffer: o2 } = this, l2 = -1;
    for (let h4 = t3; h4 != e3 && !(wh(r2, s5, o2[h4 + 1], o2[h4 + 2]) && (l2 = h4, i3 > 0)); h4 = o2[h4 + 3])
      ;
    return l2;
  }
  /**
  @internal
  */
  slice(t3, e3, i3) {
    let s5 = this.buffer, r2 = new Uint16Array(e3 - t3), o2 = 0;
    for (let l2 = t3, h4 = 0; l2 < e3; ) {
      r2[h4++] = s5[l2++], r2[h4++] = s5[l2++] - i3;
      let a4 = r2[h4++] = s5[l2++] - i3;
      r2[h4++] = s5[l2++] - t3, o2 = Math.max(o2, a4);
    }
    return new xe2(r2, o2, this.set);
  }
};
function wh(n2, t3, e3, i3) {
  switch (n2) {
    case -2:
      return e3 < t3;
    case -1:
      return i3 >= t3 && e3 < t3;
    case 0:
      return e3 < t3 && i3 > t3;
    case 1:
      return e3 <= t3 && i3 > t3;
    case 2:
      return i3 > t3;
    case 4:
      return true;
  }
}
function Si(n2, t3, e3, i3) {
  for (var s5; n2.from == n2.to || (e3 < 1 ? n2.from >= t3 : n2.from > t3) || (e3 > -1 ? n2.to <= t3 : n2.to < t3); ) {
    let o2 = !i3 && n2 instanceof Tt$1 && n2.index < 0 ? null : n2.parent;
    if (!o2)
      return n2;
    n2 = o2;
  }
  let r2 = i3 ? 0 : st$1.IgnoreOverlays;
  if (i3)
    for (let o2 = n2, l2 = o2.parent; l2; o2 = l2, l2 = o2.parent)
      o2 instanceof Tt$1 && o2.index < 0 && ((s5 = l2.enter(t3, e3, r2)) === null || s5 === void 0 ? void 0 : s5.from) != o2.from && (n2 = l2);
  for (; ; ) {
    let o2 = n2.enter(t3, e3, r2);
    if (!o2)
      return n2;
    n2 = o2;
  }
}
class yh {
  cursor(t3 = 0) {
    return new Hn$1(this, t3);
  }
  getChild(t3, e3 = null, i3 = null) {
    let s5 = xo(this, t3, e3, i3);
    return s5.length ? s5[0] : null;
  }
  getChildren(t3, e3 = null, i3 = null) {
    return xo(this, t3, e3, i3);
  }
  resolve(t3, e3 = 0) {
    return Si(this, t3, e3, false);
  }
  resolveInner(t3, e3 = 0) {
    return Si(this, t3, e3, true);
  }
  matchContext(t3) {
    return Vn$1(this, t3);
  }
  enterUnfinishedNodesBefore(t3) {
    let e3 = this.childBefore(t3), i3 = this;
    for (; e3; ) {
      let s5 = e3.lastChild;
      if (!s5 || s5.to != e3.to)
        break;
      s5.type.isError && s5.from == s5.to ? (i3 = e3, e3 = s5.prevSibling) : e3 = s5;
    }
    return i3;
  }
  get node() {
    return this;
  }
  get next() {
    return this.parent;
  }
}
let Tt$1 = class Tt2 extends yh {
  constructor(t3, e3, i3, s5) {
    super(), this._tree = t3, this.from = e3, this.index = i3, this._parent = s5;
  }
  get type() {
    return this._tree.type;
  }
  get name() {
    return this._tree.type.name;
  }
  get to() {
    return this.from + this._tree.length;
  }
  nextChild(t3, e3, i3, s5, r2 = 0) {
    for (let o2 = this; ; ) {
      for (let { children: l2, positions: h4 } = o2._tree, a4 = e3 > 0 ? l2.length : -1; t3 != a4; t3 += e3) {
        let c3 = l2[t3], f2 = h4[t3] + o2.from;
        if (wh(s5, i3, f2, f2 + c3.length)) {
          if (c3 instanceof xe$2) {
            if (r2 & st$1.ExcludeBuffers)
              continue;
            let u3 = c3.findChild(0, c3.buffer.length, e3, i3 - f2, s5);
            if (u3 > -1)
              return new de(new yd(o2, c3, t3, f2), null, u3);
          } else if (r2 & st$1.IncludeAnonymous || !c3.type.isAnonymous || lr(c3)) {
            let u3;
            if (!(r2 & st$1.IgnoreMounts) && (u3 = ws.get(c3)) && !u3.overlay)
              return new Tt2(u3.tree, f2, t3, o2);
            let d4 = new Tt2(c3, f2, t3, o2);
            return r2 & st$1.IncludeAnonymous || !d4.type.isAnonymous ? d4 : d4.nextChild(e3 < 0 ? c3.children.length - 1 : 0, e3, i3, s5);
          }
        }
      }
      if (r2 & st$1.IncludeAnonymous || !o2.type.isAnonymous || (o2.index >= 0 ? t3 = o2.index + e3 : t3 = e3 < 0 ? -1 : o2._parent._tree.children.length, o2 = o2._parent, !o2))
        return null;
    }
  }
  get firstChild() {
    return this.nextChild(
      0,
      1,
      0,
      4
      /* Side.DontCare */
    );
  }
  get lastChild() {
    return this.nextChild(
      this._tree.children.length - 1,
      -1,
      0,
      4
      /* Side.DontCare */
    );
  }
  childAfter(t3) {
    return this.nextChild(
      0,
      1,
      t3,
      2
      /* Side.After */
    );
  }
  childBefore(t3) {
    return this.nextChild(
      this._tree.children.length - 1,
      -1,
      t3,
      -2
      /* Side.Before */
    );
  }
  enter(t3, e3, i3 = 0) {
    let s5;
    if (!(i3 & st$1.IgnoreOverlays) && (s5 = ws.get(this._tree)) && s5.overlay) {
      let r2 = t3 - this.from;
      for (let { from: o2, to: l2 } of s5.overlay)
        if ((e3 > 0 ? o2 <= r2 : o2 < r2) && (e3 < 0 ? l2 >= r2 : l2 > r2))
          return new Tt2(s5.tree, s5.overlay[0].from + this.from, -1, this);
    }
    return this.nextChild(0, 1, t3, e3, i3);
  }
  nextSignificantParent() {
    let t3 = this;
    for (; t3.type.isAnonymous && t3._parent; )
      t3 = t3._parent;
    return t3;
  }
  get parent() {
    return this._parent ? this._parent.nextSignificantParent() : null;
  }
  get nextSibling() {
    return this._parent && this.index >= 0 ? this._parent.nextChild(
      this.index + 1,
      1,
      0,
      4
      /* Side.DontCare */
    ) : null;
  }
  get prevSibling() {
    return this._parent && this.index >= 0 ? this._parent.nextChild(
      this.index - 1,
      -1,
      0,
      4
      /* Side.DontCare */
    ) : null;
  }
  get tree() {
    return this._tree;
  }
  toTree() {
    return this._tree;
  }
  /**
  @internal
  */
  toString() {
    return this._tree.toString();
  }
};
function xo(n2, t3, e3, i3) {
  let s5 = n2.cursor(), r2 = [];
  if (!s5.firstChild())
    return r2;
  if (e3 != null) {
    for (; !s5.type.is(e3); )
      if (!s5.nextSibling())
        return r2;
  }
  for (; ; ) {
    if (i3 != null && s5.type.is(i3))
      return r2;
    if (s5.type.is(t3) && r2.push(s5.node), !s5.nextSibling())
      return i3 == null ? r2 : [];
  }
}
function Vn$1(n2, t3, e3 = t3.length - 1) {
  for (let i3 = n2.parent; e3 >= 0; i3 = i3.parent) {
    if (!i3)
      return false;
    if (!i3.type.isAnonymous) {
      if (t3[e3] && t3[e3] != i3.name)
        return false;
      e3--;
    }
  }
  return true;
}
class yd {
  constructor(t3, e3, i3, s5) {
    this.parent = t3, this.buffer = e3, this.index = i3, this.start = s5;
  }
}
class de extends yh {
  get name() {
    return this.type.name;
  }
  get from() {
    return this.context.start + this.context.buffer.buffer[this.index + 1];
  }
  get to() {
    return this.context.start + this.context.buffer.buffer[this.index + 2];
  }
  constructor(t3, e3, i3) {
    super(), this.context = t3, this._parent = e3, this.index = i3, this.type = t3.buffer.set.types[t3.buffer.buffer[i3]];
  }
  child(t3, e3, i3) {
    let { buffer: s5 } = this.context, r2 = s5.findChild(this.index + 4, s5.buffer[this.index + 3], t3, e3 - this.context.start, i3);
    return r2 < 0 ? null : new de(this.context, this, r2);
  }
  get firstChild() {
    return this.child(
      1,
      0,
      4
      /* Side.DontCare */
    );
  }
  get lastChild() {
    return this.child(
      -1,
      0,
      4
      /* Side.DontCare */
    );
  }
  childAfter(t3) {
    return this.child(
      1,
      t3,
      2
      /* Side.After */
    );
  }
  childBefore(t3) {
    return this.child(
      -1,
      t3,
      -2
      /* Side.Before */
    );
  }
  enter(t3, e3, i3 = 0) {
    if (i3 & st$1.ExcludeBuffers)
      return null;
    let { buffer: s5 } = this.context, r2 = s5.findChild(this.index + 4, s5.buffer[this.index + 3], e3 > 0 ? 1 : -1, t3 - this.context.start, e3);
    return r2 < 0 ? null : new de(this.context, this, r2);
  }
  get parent() {
    return this._parent || this.context.parent.nextSignificantParent();
  }
  externalSibling(t3) {
    return this._parent ? null : this.context.parent.nextChild(
      this.context.index + t3,
      t3,
      0,
      4
      /* Side.DontCare */
    );
  }
  get nextSibling() {
    let { buffer: t3 } = this.context, e3 = t3.buffer[this.index + 3];
    return e3 < (this._parent ? t3.buffer[this._parent.index + 3] : t3.buffer.length) ? new de(this.context, this._parent, e3) : this.externalSibling(1);
  }
  get prevSibling() {
    let { buffer: t3 } = this.context, e3 = this._parent ? this._parent.index + 4 : 0;
    return this.index == e3 ? this.externalSibling(-1) : new de(this.context, this._parent, t3.findChild(
      e3,
      this.index,
      -1,
      0,
      4
      /* Side.DontCare */
    ));
  }
  get tree() {
    return null;
  }
  toTree() {
    let t3 = [], e3 = [], { buffer: i3 } = this.context, s5 = this.index + 4, r2 = i3.buffer[this.index + 3];
    if (r2 > s5) {
      let o2 = i3.buffer[this.index + 1];
      t3.push(i3.slice(s5, r2, o2)), e3.push(0);
    }
    return new X$1(this.type, t3, e3, this.to - this.from);
  }
  /**
  @internal
  */
  toString() {
    return this.context.buffer.childString(this.index);
  }
}
function bh(n2) {
  if (!n2.length)
    return null;
  let t3 = 0, e3 = n2[0];
  for (let r2 = 1; r2 < n2.length; r2++) {
    let o2 = n2[r2];
    (o2.from > e3.from || o2.to < e3.to) && (e3 = o2, t3 = r2);
  }
  let i3 = e3 instanceof Tt$1 && e3.index < 0 ? null : e3.parent, s5 = n2.slice();
  return i3 ? s5[t3] = i3 : s5.splice(t3, 1), new bd(s5, e3);
}
class bd {
  constructor(t3, e3) {
    this.heads = t3, this.node = e3;
  }
  get next() {
    return bh(this.heads);
  }
}
function kd(n2, t3, e3) {
  let i3 = n2.resolveInner(t3, e3), s5 = null;
  for (let r2 = i3 instanceof Tt$1 ? i3 : i3.context.parent; r2; r2 = r2.parent)
    if (r2.index < 0) {
      let o2 = r2.parent;
      (s5 || (s5 = [i3])).push(o2.resolve(t3, e3)), r2 = o2;
    } else {
      let o2 = ws.get(r2.tree);
      if (o2 && o2.overlay && o2.overlay[0].from <= t3 && o2.overlay[o2.overlay.length - 1].to >= t3) {
        let l2 = new Tt$1(o2.tree, o2.overlay[0].from + r2.from, -1, r2);
        (s5 || (s5 = [i3])).push(Si(l2, t3, e3, false));
      }
    }
  return s5 ? bh(s5) : i3;
}
let Hn$1 = class Hn2 {
  /**
  Shorthand for `.type.name`.
  */
  get name() {
    return this.type.name;
  }
  /**
  @internal
  */
  constructor(t3, e3 = 0) {
    if (this.mode = e3, this.buffer = null, this.stack = [], this.index = 0, this.bufferNode = null, t3 instanceof Tt$1)
      this.yieldNode(t3);
    else {
      this._tree = t3.context.parent, this.buffer = t3.context;
      for (let i3 = t3._parent; i3; i3 = i3._parent)
        this.stack.unshift(i3.index);
      this.bufferNode = t3, this.yieldBuf(t3.index);
    }
  }
  yieldNode(t3) {
    return t3 ? (this._tree = t3, this.type = t3.type, this.from = t3.from, this.to = t3.to, true) : false;
  }
  yieldBuf(t3, e3) {
    this.index = t3;
    let { start: i3, buffer: s5 } = this.buffer;
    return this.type = e3 || s5.set.types[s5.buffer[t3]], this.from = i3 + s5.buffer[t3 + 1], this.to = i3 + s5.buffer[t3 + 2], true;
  }
  /**
  @internal
  */
  yield(t3) {
    return t3 ? t3 instanceof Tt$1 ? (this.buffer = null, this.yieldNode(t3)) : (this.buffer = t3.context, this.yieldBuf(t3.index, t3.type)) : false;
  }
  /**
  @internal
  */
  toString() {
    return this.buffer ? this.buffer.buffer.childString(this.index) : this._tree.toString();
  }
  /**
  @internal
  */
  enterChild(t3, e3, i3) {
    if (!this.buffer)
      return this.yield(this._tree.nextChild(t3 < 0 ? this._tree._tree.children.length - 1 : 0, t3, e3, i3, this.mode));
    let { buffer: s5 } = this.buffer, r2 = s5.findChild(this.index + 4, s5.buffer[this.index + 3], t3, e3 - this.buffer.start, i3);
    return r2 < 0 ? false : (this.stack.push(this.index), this.yieldBuf(r2));
  }
  /**
  Move the cursor to this node's first child. When this returns
  false, the node has no child, and the cursor has not been moved.
  */
  firstChild() {
    return this.enterChild(
      1,
      0,
      4
      /* Side.DontCare */
    );
  }
  /**
  Move the cursor to this node's last child.
  */
  lastChild() {
    return this.enterChild(
      -1,
      0,
      4
      /* Side.DontCare */
    );
  }
  /**
  Move the cursor to the first child that ends after `pos`.
  */
  childAfter(t3) {
    return this.enterChild(
      1,
      t3,
      2
      /* Side.After */
    );
  }
  /**
  Move to the last child that starts before `pos`.
  */
  childBefore(t3) {
    return this.enterChild(
      -1,
      t3,
      -2
      /* Side.Before */
    );
  }
  /**
  Move the cursor to the child around `pos`. If side is -1 the
  child may end at that position, when 1 it may start there. This
  will also enter [overlaid](#common.MountedTree.overlay)
  [mounted](#common.NodeProp^mounted) trees unless `overlays` is
  set to false.
  */
  enter(t3, e3, i3 = this.mode) {
    return this.buffer ? i3 & st$1.ExcludeBuffers ? false : this.enterChild(1, t3, e3) : this.yield(this._tree.enter(t3, e3, i3));
  }
  /**
  Move to the node's parent node, if this isn't the top node.
  */
  parent() {
    if (!this.buffer)
      return this.yieldNode(this.mode & st$1.IncludeAnonymous ? this._tree._parent : this._tree.parent);
    if (this.stack.length)
      return this.yieldBuf(this.stack.pop());
    let t3 = this.mode & st$1.IncludeAnonymous ? this.buffer.parent : this.buffer.parent.nextSignificantParent();
    return this.buffer = null, this.yieldNode(t3);
  }
  /**
  @internal
  */
  sibling(t3) {
    if (!this.buffer)
      return this._tree._parent ? this.yield(this._tree.index < 0 ? null : this._tree._parent.nextChild(this._tree.index + t3, t3, 0, 4, this.mode)) : false;
    let { buffer: e3 } = this.buffer, i3 = this.stack.length - 1;
    if (t3 < 0) {
      let s5 = i3 < 0 ? 0 : this.stack[i3] + 4;
      if (this.index != s5)
        return this.yieldBuf(e3.findChild(
          s5,
          this.index,
          -1,
          0,
          4
          /* Side.DontCare */
        ));
    } else {
      let s5 = e3.buffer[this.index + 3];
      if (s5 < (i3 < 0 ? e3.buffer.length : e3.buffer[this.stack[i3] + 3]))
        return this.yieldBuf(s5);
    }
    return i3 < 0 ? this.yield(this.buffer.parent.nextChild(this.buffer.index + t3, t3, 0, 4, this.mode)) : false;
  }
  /**
  Move to this node's next sibling, if any.
  */
  nextSibling() {
    return this.sibling(1);
  }
  /**
  Move to this node's previous sibling, if any.
  */
  prevSibling() {
    return this.sibling(-1);
  }
  atLastNode(t3) {
    let e3, i3, { buffer: s5 } = this;
    if (s5) {
      if (t3 > 0) {
        if (this.index < s5.buffer.buffer.length)
          return false;
      } else
        for (let r2 = 0; r2 < this.index; r2++)
          if (s5.buffer.buffer[r2 + 3] < this.index)
            return false;
      ({ index: e3, parent: i3 } = s5);
    } else
      ({ index: e3, _parent: i3 } = this._tree);
    for (; i3; { index: e3, _parent: i3 } = i3)
      if (e3 > -1)
        for (let r2 = e3 + t3, o2 = t3 < 0 ? -1 : i3._tree.children.length; r2 != o2; r2 += t3) {
          let l2 = i3._tree.children[r2];
          if (this.mode & st$1.IncludeAnonymous || l2 instanceof xe$2 || !l2.type.isAnonymous || lr(l2))
            return false;
        }
    return true;
  }
  move(t3, e3) {
    if (e3 && this.enterChild(
      t3,
      0,
      4
      /* Side.DontCare */
    ))
      return true;
    for (; ; ) {
      if (this.sibling(t3))
        return true;
      if (this.atLastNode(t3) || !this.parent())
        return false;
    }
  }
  /**
  Move to the next node in a
  [pre-order](https://en.wikipedia.org/wiki/Tree_traversal#Pre-order,_NLR)
  traversal, going from a node to its first child or, if the
  current node is empty or `enter` is false, its next sibling or
  the next sibling of the first parent node that has one.
  */
  next(t3 = true) {
    return this.move(1, t3);
  }
  /**
  Move to the next node in a last-to-first pre-order traveral. A
  node is followed by its last child or, if it has none, its
  previous sibling or the previous sibling of the first parent
  node that has one.
  */
  prev(t3 = true) {
    return this.move(-1, t3);
  }
  /**
  Move the cursor to the innermost node that covers `pos`. If
  `side` is -1, it will enter nodes that end at `pos`. If it is 1,
  it will enter nodes that start at `pos`.
  */
  moveTo(t3, e3 = 0) {
    for (; (this.from == this.to || (e3 < 1 ? this.from >= t3 : this.from > t3) || (e3 > -1 ? this.to <= t3 : this.to < t3)) && this.parent(); )
      ;
    for (; this.enterChild(1, t3, e3); )
      ;
    return this;
  }
  /**
  Get a [syntax node](#common.SyntaxNode) at the cursor's current
  position.
  */
  get node() {
    if (!this.buffer)
      return this._tree;
    let t3 = this.bufferNode, e3 = null, i3 = 0;
    if (t3 && t3.context == this.buffer)
      t:
        for (let s5 = this.index, r2 = this.stack.length; r2 >= 0; ) {
          for (let o2 = t3; o2; o2 = o2._parent)
            if (o2.index == s5) {
              if (s5 == this.index)
                return o2;
              e3 = o2, i3 = r2 + 1;
              break t;
            }
          s5 = this.stack[--r2];
        }
    for (let s5 = i3; s5 < this.stack.length; s5++)
      e3 = new de(this.buffer, e3, this.stack[s5]);
    return this.bufferNode = new de(this.buffer, e3, this.index);
  }
  /**
  Get the [tree](#common.Tree) that represents the current node, if
  any. Will return null when the node is in a [tree
  buffer](#common.TreeBuffer).
  */
  get tree() {
    return this.buffer ? null : this._tree._tree;
  }
  /**
  Iterate over the current node and all its descendants, calling
  `enter` when entering a node and `leave`, if given, when leaving
  one. When `enter` returns `false`, any children of that node are
  skipped, and `leave` isn't called for it.
  */
  iterate(t3, e3) {
    for (let i3 = 0; ; ) {
      let s5 = false;
      if (this.type.isAnonymous || t3(this) !== false) {
        if (this.firstChild()) {
          i3++;
          continue;
        }
        this.type.isAnonymous || (s5 = true);
      }
      for (; s5 && e3 && e3(this), s5 = this.type.isAnonymous, !this.nextSibling(); ) {
        if (!i3)
          return;
        this.parent(), i3--, s5 = true;
      }
    }
  }
  /**
  Test whether the current node matches a given context—a sequence
  of direct parent node names. Empty strings in the context array
  are treated as wildcards.
  */
  matchContext(t3) {
    if (!this.buffer)
      return Vn$1(this.node, t3);
    let { buffer: e3 } = this.buffer, { types: i3 } = e3.set;
    for (let s5 = t3.length - 1, r2 = this.stack.length - 1; s5 >= 0; r2--) {
      if (r2 < 0)
        return Vn$1(this.node, t3, s5);
      let o2 = i3[e3.buffer[this.stack[r2]]];
      if (!o2.isAnonymous) {
        if (t3[s5] && t3[s5] != o2.name)
          return false;
        s5--;
      }
    }
    return true;
  }
};
function lr(n2) {
  return n2.children.some((t3) => t3 instanceof xe$2 || !t3.type.isAnonymous || lr(t3));
}
function xd(n2) {
  var t3;
  let { buffer: e3, nodeSet: i3, maxBufferLength: s5 = mh, reused: r2 = [], minRepeatType: o2 = i3.types.length } = n2, l2 = Array.isArray(e3) ? new or(e3, e3.length) : e3, h4 = i3.types, a4 = 0, c3 = 0;
  function f2(A2, P2, M4, I3, W2, _2) {
    let { id: L3, start: E3, end: Y3, size: U2 } = l2, gt2 = c3;
    for (; U2 < 0; )
      if (l2.next(), U2 == -1) {
        let Jt = r2[L3];
        M4.push(Jt), I3.push(E3 - A2);
        return;
      } else if (U2 == -3) {
        a4 = L3;
        return;
      } else if (U2 == -4) {
        c3 = L3;
        return;
      } else
        throw new RangeError(`Unrecognized record size: ${U2}`);
    let Ae2 = h4[L3], _e2, Oe2, wr2 = E3 - A2;
    if (Y3 - E3 <= s5 && (Oe2 = g2(l2.pos - P2, W2))) {
      let Jt = new Uint16Array(Oe2.size - Oe2.skip), Ot2 = l2.pos - Oe2.size, $t2 = Jt.length;
      for (; l2.pos > Ot2; )
        $t2 = y4(Oe2.start, Jt, $t2);
      _e2 = new xe$2(Jt, Y3 - Oe2.start, i3), wr2 = Oe2.start - A2;
    } else {
      let Jt = l2.pos - U2;
      l2.next();
      let Ot2 = [], $t2 = [], Me2 = L3 >= o2 ? L3 : -1, $e2 = 0, Ri = Y3;
      for (; l2.pos > Jt; )
        Me2 >= 0 && l2.id == Me2 && l2.size >= 0 ? (l2.end <= Ri - s5 && (p2(Ot2, $t2, E3, $e2, l2.end, Ri, Me2, gt2), $e2 = Ot2.length, Ri = l2.end), l2.next()) : _2 > 2500 ? u3(E3, Jt, Ot2, $t2) : f2(E3, Jt, Ot2, $t2, Me2, _2 + 1);
      if (Me2 >= 0 && $e2 > 0 && $e2 < Ot2.length && p2(Ot2, $t2, E3, $e2, E3, Ri, Me2, gt2), Ot2.reverse(), $t2.reverse(), Me2 > -1 && $e2 > 0) {
        let yr2 = d4(Ae2);
        _e2 = hr$1(Ae2, Ot2, $t2, 0, Ot2.length, 0, Y3 - E3, yr2, yr2);
      } else
        _e2 = m4(Ae2, Ot2, $t2, Y3 - E3, gt2 - Y3);
    }
    M4.push(_e2), I3.push(wr2);
  }
  function u3(A2, P2, M4, I3) {
    let W2 = [], _2 = 0, L3 = -1;
    for (; l2.pos > P2; ) {
      let { id: E3, start: Y3, end: U2, size: gt2 } = l2;
      if (gt2 > 4)
        l2.next();
      else {
        if (L3 > -1 && Y3 < L3)
          break;
        L3 < 0 && (L3 = U2 - s5), W2.push(E3, Y3, U2), _2++, l2.next();
      }
    }
    if (_2) {
      let E3 = new Uint16Array(_2 * 4), Y3 = W2[W2.length - 2];
      for (let U2 = W2.length - 3, gt2 = 0; U2 >= 0; U2 -= 3)
        E3[gt2++] = W2[U2], E3[gt2++] = W2[U2 + 1] - Y3, E3[gt2++] = W2[U2 + 2] - Y3, E3[gt2++] = gt2;
      M4.push(new xe$2(E3, W2[2] - Y3, i3)), I3.push(Y3 - A2);
    }
  }
  function d4(A2) {
    return (P2, M4, I3) => {
      let W2 = 0, _2 = P2.length - 1, L3, E3;
      if (_2 >= 0 && (L3 = P2[_2]) instanceof X$1) {
        if (!_2 && L3.type == A2 && L3.length == I3)
          return L3;
        (E3 = L3.prop(R$5.lookAhead)) && (W2 = M4[_2] + L3.length + E3);
      }
      return m4(A2, P2, M4, I3, W2);
    };
  }
  function p2(A2, P2, M4, I3, W2, _2, L3, E3) {
    let Y3 = [], U2 = [];
    for (; A2.length > I3; )
      Y3.push(A2.pop()), U2.push(P2.pop() + M4 - W2);
    A2.push(m4(i3.types[L3], Y3, U2, _2 - W2, E3 - _2)), P2.push(W2 - M4);
  }
  function m4(A2, P2, M4, I3, W2 = 0, _2) {
    if (a4) {
      let L3 = [R$5.contextHash, a4];
      _2 = _2 ? [L3].concat(_2) : [L3];
    }
    if (W2 > 25) {
      let L3 = [R$5.lookAhead, W2];
      _2 = _2 ? [L3].concat(_2) : [L3];
    }
    return new X$1(A2, P2, M4, I3, _2);
  }
  function g2(A2, P2) {
    let M4 = l2.fork(), I3 = 0, W2 = 0, _2 = 0, L3 = M4.end - s5, E3 = { size: 0, start: 0, skip: 0 };
    t:
      for (let Y3 = M4.pos - A2; M4.pos > Y3; ) {
        let U2 = M4.size;
        if (M4.id == P2 && U2 >= 0) {
          E3.size = I3, E3.start = W2, E3.skip = _2, _2 += 4, I3 += 4, M4.next();
          continue;
        }
        let gt2 = M4.pos - U2;
        if (U2 < 0 || gt2 < Y3 || M4.start < L3)
          break;
        let Ae2 = M4.id >= o2 ? 4 : 0, _e2 = M4.start;
        for (M4.next(); M4.pos > gt2; ) {
          if (M4.size < 0)
            if (M4.size == -3)
              Ae2 += 4;
            else
              break t;
          else
            M4.id >= o2 && (Ae2 += 4);
          M4.next();
        }
        W2 = _e2, I3 += U2, _2 += Ae2;
      }
    return (P2 < 0 || I3 == A2) && (E3.size = I3, E3.start = W2, E3.skip = _2), E3.size > 4 ? E3 : void 0;
  }
  function y4(A2, P2, M4) {
    let { id: I3, start: W2, end: _2, size: L3 } = l2;
    if (l2.next(), L3 >= 0 && I3 < o2) {
      let E3 = M4;
      if (L3 > 4) {
        let Y3 = l2.pos - (L3 - 4);
        for (; l2.pos > Y3; )
          M4 = y4(A2, P2, M4);
      }
      P2[--M4] = E3, P2[--M4] = _2 - A2, P2[--M4] = W2 - A2, P2[--M4] = I3;
    } else
      L3 == -3 ? a4 = I3 : L3 == -4 && (c3 = I3);
    return M4;
  }
  let x3 = [], S4 = [];
  for (; l2.pos > 0; )
    f2(n2.start || 0, n2.bufferStart || 0, x3, S4, -1, 0);
  let v2 = (t3 = n2.length) !== null && t3 !== void 0 ? t3 : x3.length ? S4[0] + x3[0].length : 0;
  return new X$1(h4[n2.topID], x3.reverse(), S4.reverse(), v2);
}
const vo$1 = /* @__PURE__ */ new WeakMap();
function os(n2, t3) {
  if (!n2.isAnonymous || t3 instanceof xe$2 || t3.type != n2)
    return 1;
  let e3 = vo$1.get(t3);
  if (e3 == null) {
    e3 = 1;
    for (let i3 of t3.children) {
      if (i3.type != n2 || !(i3 instanceof X$1)) {
        e3 = 1;
        break;
      }
      e3 += os(n2, i3);
    }
    vo$1.set(t3, e3);
  }
  return e3;
}
function hr$1(n2, t3, e3, i3, s5, r2, o2, l2, h4) {
  let a4 = 0;
  for (let p2 = i3; p2 < s5; p2++)
    a4 += os(n2, t3[p2]);
  let c3 = Math.ceil(
    a4 * 1.5 / 8
    /* Balance.BranchFactor */
  ), f2 = [], u3 = [];
  function d4(p2, m4, g2, y4, x3) {
    for (let S4 = g2; S4 < y4; ) {
      let v2 = S4, A2 = m4[S4], P2 = os(n2, p2[S4]);
      for (S4++; S4 < y4; S4++) {
        let M4 = os(n2, p2[S4]);
        if (P2 + M4 >= c3)
          break;
        P2 += M4;
      }
      if (S4 == v2 + 1) {
        if (P2 > c3) {
          let M4 = p2[v2];
          d4(M4.children, M4.positions, 0, M4.children.length, m4[v2] + x3);
          continue;
        }
        f2.push(p2[v2]);
      } else {
        let M4 = m4[S4 - 1] + p2[S4 - 1].length - A2;
        f2.push(hr$1(n2, p2, m4, v2, S4, A2, M4, null, h4));
      }
      u3.push(A2 + x3 - r2);
    }
  }
  return d4(t3, e3, i3, s5, 0), (l2 || h4)(f2, u3, o2);
}
let Re$3 = class Re2 {
  /**
  Construct a tree fragment. You'll usually want to use
  [`addTree`](#common.TreeFragment^addTree) and
  [`applyChanges`](#common.TreeFragment^applyChanges) instead of
  calling this directly.
  */
  constructor(t3, e3, i3, s5, r2 = false, o2 = false) {
    this.from = t3, this.to = e3, this.tree = i3, this.offset = s5, this.open = (r2 ? 1 : 0) | (o2 ? 2 : 0);
  }
  /**
  Whether the start of the fragment represents the start of a
  parse, or the end of a change. (In the second case, it may not
  be safe to reuse some nodes at the start, depending on the
  parsing algorithm.)
  */
  get openStart() {
    return (this.open & 1) > 0;
  }
  /**
  Whether the end of the fragment represents the end of a
  full-document parse, or the start of a change.
  */
  get openEnd() {
    return (this.open & 2) > 0;
  }
  /**
  Create a set of fragments from a freshly parsed tree, or update
  an existing set of fragments by replacing the ones that overlap
  with a tree with content from the new tree. When `partial` is
  true, the parse is treated as incomplete, and the resulting
  fragment has [`openEnd`](#common.TreeFragment.openEnd) set to
  true.
  */
  static addTree(t3, e3 = [], i3 = false) {
    let s5 = [new Re2(0, t3.length, t3, 0, false, i3)];
    for (let r2 of e3)
      r2.to > t3.length && s5.push(r2);
    return s5;
  }
  /**
  Apply a set of edits to an array of fragments, removing or
  splitting fragments as necessary to remove edited ranges, and
  adjusting offsets for fragments that moved.
  */
  static applyChanges(t3, e3, i3 = 128) {
    if (!e3.length)
      return t3;
    let s5 = [], r2 = 1, o2 = t3.length ? t3[0] : null;
    for (let l2 = 0, h4 = 0, a4 = 0; ; l2++) {
      let c3 = l2 < e3.length ? e3[l2] : null, f2 = c3 ? c3.fromA : 1e9;
      if (f2 - h4 >= i3)
        for (; o2 && o2.from < f2; ) {
          let u3 = o2;
          if (h4 >= u3.from || f2 <= u3.to || a4) {
            let d4 = Math.max(u3.from, h4) - a4, p2 = Math.min(u3.to, f2) - a4;
            u3 = d4 >= p2 ? null : new Re2(d4, p2, u3.tree, u3.offset + a4, l2 > 0, !!c3);
          }
          if (u3 && s5.push(u3), o2.to > f2)
            break;
          o2 = r2 < t3.length ? t3[r2++] : null;
        }
      if (!c3)
        break;
      h4 = c3.toA, a4 = c3.toA - c3.toB;
    }
    return s5;
  }
};
class kh {
  /**
  Start a parse, returning a [partial parse](#common.PartialParse)
  object. [`fragments`](#common.TreeFragment) can be passed in to
  make the parse incremental.
  
  By default, the entire input is parsed. You can pass `ranges`,
  which should be a sorted array of non-empty, non-overlapping
  ranges, to parse only those ranges. The tree returned in that
  case will start at `ranges[0].from`.
  */
  startParse(t3, e3, i3) {
    return typeof t3 == "string" && (t3 = new vd(t3)), i3 = i3 ? i3.length ? i3.map((s5) => new Us(s5.from, s5.to)) : [new Us(0, 0)] : [new Us(0, t3.length)], this.createParse(t3, e3 || [], i3);
  }
  /**
  Run a full parse, returning the resulting tree.
  */
  parse(t3, e3, i3) {
    let s5 = this.startParse(t3, e3, i3);
    for (; ; ) {
      let r2 = s5.advance();
      if (r2)
        return r2;
    }
  }
}
class vd {
  constructor(t3) {
    this.string = t3;
  }
  get length() {
    return this.string.length;
  }
  chunk(t3) {
    return this.string.slice(t3);
  }
  get lineChunks() {
    return false;
  }
  read(t3, e3) {
    return this.string.slice(t3, e3);
  }
}
new R$5({ perNode: true });
let Sd = 0;
class Kt {
  /**
  @internal
  */
  constructor(t3, e3, i3) {
    this.set = t3, this.base = e3, this.modified = i3, this.id = Sd++;
  }
  /**
  Define a new tag. If `parent` is given, the tag is treated as a
  sub-tag of that parent, and
  [highlighters](#highlight.tagHighlighter) that don't mention
  this tag will try to fall back to the parent tag (or grandparent
  tag, etc).
  */
  static define(t3) {
    if (t3 != null && t3.base)
      throw new Error("Can not derive from a modified tag");
    let e3 = new Kt([], null, []);
    if (e3.set.push(e3), t3)
      for (let i3 of t3.set)
        e3.set.push(i3);
    return e3;
  }
  /**
  Define a tag _modifier_, which is a function that, given a tag,
  will return a tag that is a subtag of the original. Applying the
  same modifier to a twice tag will return the same value (`m1(t1)
  == m1(t1)`) and applying multiple modifiers will, regardless or
  order, produce the same tag (`m1(m2(t1)) == m2(m1(t1))`).
  
  When multiple modifiers are applied to a given base tag, each
  smaller set of modifiers is registered as a parent, so that for
  example `m1(m2(m3(t1)))` is a subtype of `m1(m2(t1))`,
  `m1(m3(t1)`, and so on.
  */
  static defineModifier() {
    let t3 = new ys();
    return (e3) => e3.modified.indexOf(t3) > -1 ? e3 : ys.get(e3.base || e3, e3.modified.concat(t3).sort((i3, s5) => i3.id - s5.id));
  }
}
let Cd = 0;
class ys {
  constructor() {
    this.instances = [], this.id = Cd++;
  }
  static get(t3, e3) {
    if (!e3.length)
      return t3;
    let i3 = e3[0].instances.find((l2) => l2.base == t3 && Ad(e3, l2.modified));
    if (i3)
      return i3;
    let s5 = [], r2 = new Kt(s5, t3, e3);
    for (let l2 of e3)
      l2.instances.push(r2);
    let o2 = Od(e3);
    for (let l2 of t3.set)
      if (!l2.modified.length)
        for (let h4 of o2)
          s5.push(ys.get(l2, h4));
    return r2;
  }
}
function Ad(n2, t3) {
  return n2.length == t3.length && n2.every((e3, i3) => e3 == t3[i3]);
}
function Od(n2) {
  let t3 = [[]];
  for (let e3 = 0; e3 < n2.length; e3++)
    for (let i3 = 0, s5 = t3.length; i3 < s5; i3++)
      t3.push(t3[i3].concat(n2[e3]));
  return t3.sort((e3, i3) => i3.length - e3.length);
}
function xh(n2) {
  let t3 = /* @__PURE__ */ Object.create(null);
  for (let e3 in n2) {
    let i3 = n2[e3];
    Array.isArray(i3) || (i3 = [i3]);
    for (let s5 of e3.split(" "))
      if (s5) {
        let r2 = [], o2 = 2, l2 = s5;
        for (let f2 = 0; ; ) {
          if (l2 == "..." && f2 > 0 && f2 + 3 == s5.length) {
            o2 = 1;
            break;
          }
          let u3 = /^"(?:[^"\\]|\\.)*?"|[^\/!]+/.exec(l2);
          if (!u3)
            throw new RangeError("Invalid path: " + s5);
          if (r2.push(u3[0] == "*" ? "" : u3[0][0] == '"' ? JSON.parse(u3[0]) : u3[0]), f2 += u3[0].length, f2 == s5.length)
            break;
          let d4 = s5[f2++];
          if (f2 == s5.length && d4 == "!") {
            o2 = 0;
            break;
          }
          if (d4 != "/")
            throw new RangeError("Invalid path: " + s5);
          l2 = s5.slice(f2);
        }
        let h4 = r2.length - 1, a4 = r2[h4];
        if (!a4)
          throw new RangeError("Invalid path: " + s5);
        let c3 = new bs(i3, o2, h4 > 0 ? r2.slice(0, h4) : null);
        t3[a4] = c3.sort(t3[a4]);
      }
  }
  return vh.add(t3);
}
const vh = new R$5();
class bs {
  constructor(t3, e3, i3, s5) {
    this.tags = t3, this.mode = e3, this.context = i3, this.next = s5;
  }
  get opaque() {
    return this.mode == 0;
  }
  get inherit() {
    return this.mode == 1;
  }
  sort(t3) {
    return !t3 || t3.depth < this.depth ? (this.next = t3, this) : (t3.next = this.sort(t3.next), t3);
  }
  get depth() {
    return this.context ? this.context.length : 0;
  }
}
bs.empty = new bs([], 2, null);
function Sh(n2, t3) {
  let e3 = /* @__PURE__ */ Object.create(null);
  for (let r2 of n2)
    if (!Array.isArray(r2.tag))
      e3[r2.tag.id] = r2.class;
    else
      for (let o2 of r2.tag)
        e3[o2.id] = r2.class;
  let { scope: i3, all: s5 = null } = t3 || {};
  return {
    style: (r2) => {
      let o2 = s5;
      for (let l2 of r2)
        for (let h4 of l2.set) {
          let a4 = e3[h4.id];
          if (a4) {
            o2 = o2 ? o2 + " " + a4 : a4;
            break;
          }
        }
      return o2;
    },
    scope: i3
  };
}
function Md(n2, t3) {
  let e3 = null;
  for (let i3 of n2) {
    let s5 = i3.style(t3);
    s5 && (e3 = e3 ? e3 + " " + s5 : s5);
  }
  return e3;
}
function Td(n2, t3, e3, i3 = 0, s5 = n2.length) {
  let r2 = new Dd(i3, Array.isArray(t3) ? t3 : [t3], e3);
  r2.highlightRange(n2.cursor(), i3, s5, "", r2.highlighters), r2.flush(s5);
}
class Dd {
  constructor(t3, e3, i3) {
    this.at = t3, this.highlighters = e3, this.span = i3, this.class = "";
  }
  startSpan(t3, e3) {
    e3 != this.class && (this.flush(t3), t3 > this.at && (this.at = t3), this.class = e3);
  }
  flush(t3) {
    t3 > this.at && this.class && this.span(this.at, t3, this.class);
  }
  highlightRange(t3, e3, i3, s5, r2) {
    let { type: o2, from: l2, to: h4 } = t3;
    if (l2 >= i3 || h4 <= e3)
      return;
    o2.isTop && (r2 = this.highlighters.filter((d4) => !d4.scope || d4.scope(o2)));
    let a4 = s5, c3 = Pd(t3) || bs.empty, f2 = Md(r2, c3.tags);
    if (f2 && (a4 && (a4 += " "), a4 += f2, c3.mode == 1 && (s5 += (s5 ? " " : "") + f2)), this.startSpan(Math.max(e3, l2), a4), c3.opaque)
      return;
    let u3 = t3.tree && t3.tree.prop(R$5.mounted);
    if (u3 && u3.overlay) {
      let d4 = t3.node.enter(u3.overlay[0].from + l2, 1), p2 = this.highlighters.filter((g2) => !g2.scope || g2.scope(u3.tree.type)), m4 = t3.firstChild();
      for (let g2 = 0, y4 = l2; ; g2++) {
        let x3 = g2 < u3.overlay.length ? u3.overlay[g2] : null, S4 = x3 ? x3.from + l2 : h4, v2 = Math.max(e3, y4), A2 = Math.min(i3, S4);
        if (v2 < A2 && m4)
          for (; t3.from < A2 && (this.highlightRange(t3, v2, A2, s5, r2), this.startSpan(Math.min(A2, t3.to), a4), !(t3.to >= S4 || !t3.nextSibling())); )
            ;
        if (!x3 || S4 > i3)
          break;
        y4 = x3.to + l2, y4 > e3 && (this.highlightRange(d4.cursor(), Math.max(e3, x3.from + l2), Math.min(i3, y4), "", p2), this.startSpan(Math.min(i3, y4), a4));
      }
      m4 && t3.parent();
    } else if (t3.firstChild()) {
      u3 && (s5 = "");
      do
        if (!(t3.to <= e3)) {
          if (t3.from >= i3)
            break;
          this.highlightRange(t3, e3, i3, s5, r2), this.startSpan(Math.min(i3, t3.to), a4);
        }
      while (t3.nextSibling());
      t3.parent();
    }
  }
}
function Pd(n2) {
  let t3 = n2.type.prop(vh);
  for (; t3 && t3.context && !n2.matchContext(t3.context); )
    t3 = t3.next;
  return t3 || null;
}
const k$3 = Kt.define, qi = k$3(), le$2 = k$3(), So$1 = k$3(le$2), Co$1 = k$3(le$2), he$1 = k$3(), Gi = k$3(he$1), Ys = k$3(he$1), jt = k$3(), Te$1 = k$3(jt), zt$1 = k$3(), Wt = k$3(), _n$1 = k$3(), ri = k$3(_n$1), Ui = k$3(), w$4 = {
  /**
  A comment.
  */
  comment: qi,
  /**
  A line [comment](#highlight.tags.comment).
  */
  lineComment: k$3(qi),
  /**
  A block [comment](#highlight.tags.comment).
  */
  blockComment: k$3(qi),
  /**
  A documentation [comment](#highlight.tags.comment).
  */
  docComment: k$3(qi),
  /**
  Any kind of identifier.
  */
  name: le$2,
  /**
  The [name](#highlight.tags.name) of a variable.
  */
  variableName: k$3(le$2),
  /**
  A type [name](#highlight.tags.name).
  */
  typeName: So$1,
  /**
  A tag name (subtag of [`typeName`](#highlight.tags.typeName)).
  */
  tagName: k$3(So$1),
  /**
  A property or field [name](#highlight.tags.name).
  */
  propertyName: Co$1,
  /**
  An attribute name (subtag of [`propertyName`](#highlight.tags.propertyName)).
  */
  attributeName: k$3(Co$1),
  /**
  The [name](#highlight.tags.name) of a class.
  */
  className: k$3(le$2),
  /**
  A label [name](#highlight.tags.name).
  */
  labelName: k$3(le$2),
  /**
  A namespace [name](#highlight.tags.name).
  */
  namespace: k$3(le$2),
  /**
  The [name](#highlight.tags.name) of a macro.
  */
  macroName: k$3(le$2),
  /**
  A literal value.
  */
  literal: he$1,
  /**
  A string [literal](#highlight.tags.literal).
  */
  string: Gi,
  /**
  A documentation [string](#highlight.tags.string).
  */
  docString: k$3(Gi),
  /**
  A character literal (subtag of [string](#highlight.tags.string)).
  */
  character: k$3(Gi),
  /**
  An attribute value (subtag of [string](#highlight.tags.string)).
  */
  attributeValue: k$3(Gi),
  /**
  A number [literal](#highlight.tags.literal).
  */
  number: Ys,
  /**
  An integer [number](#highlight.tags.number) literal.
  */
  integer: k$3(Ys),
  /**
  A floating-point [number](#highlight.tags.number) literal.
  */
  float: k$3(Ys),
  /**
  A boolean [literal](#highlight.tags.literal).
  */
  bool: k$3(he$1),
  /**
  Regular expression [literal](#highlight.tags.literal).
  */
  regexp: k$3(he$1),
  /**
  An escape [literal](#highlight.tags.literal), for example a
  backslash escape in a string.
  */
  escape: k$3(he$1),
  /**
  A color [literal](#highlight.tags.literal).
  */
  color: k$3(he$1),
  /**
  A URL [literal](#highlight.tags.literal).
  */
  url: k$3(he$1),
  /**
  A language keyword.
  */
  keyword: zt$1,
  /**
  The [keyword](#highlight.tags.keyword) for the self or this
  object.
  */
  self: k$3(zt$1),
  /**
  The [keyword](#highlight.tags.keyword) for null.
  */
  null: k$3(zt$1),
  /**
  A [keyword](#highlight.tags.keyword) denoting some atomic value.
  */
  atom: k$3(zt$1),
  /**
  A [keyword](#highlight.tags.keyword) that represents a unit.
  */
  unit: k$3(zt$1),
  /**
  A modifier [keyword](#highlight.tags.keyword).
  */
  modifier: k$3(zt$1),
  /**
  A [keyword](#highlight.tags.keyword) that acts as an operator.
  */
  operatorKeyword: k$3(zt$1),
  /**
  A control-flow related [keyword](#highlight.tags.keyword).
  */
  controlKeyword: k$3(zt$1),
  /**
  A [keyword](#highlight.tags.keyword) that defines something.
  */
  definitionKeyword: k$3(zt$1),
  /**
  A [keyword](#highlight.tags.keyword) related to defining or
  interfacing with modules.
  */
  moduleKeyword: k$3(zt$1),
  /**
  An operator.
  */
  operator: Wt,
  /**
  An [operator](#highlight.tags.operator) that dereferences something.
  */
  derefOperator: k$3(Wt),
  /**
  Arithmetic-related [operator](#highlight.tags.operator).
  */
  arithmeticOperator: k$3(Wt),
  /**
  Logical [operator](#highlight.tags.operator).
  */
  logicOperator: k$3(Wt),
  /**
  Bit [operator](#highlight.tags.operator).
  */
  bitwiseOperator: k$3(Wt),
  /**
  Comparison [operator](#highlight.tags.operator).
  */
  compareOperator: k$3(Wt),
  /**
  [Operator](#highlight.tags.operator) that updates its operand.
  */
  updateOperator: k$3(Wt),
  /**
  [Operator](#highlight.tags.operator) that defines something.
  */
  definitionOperator: k$3(Wt),
  /**
  Type-related [operator](#highlight.tags.operator).
  */
  typeOperator: k$3(Wt),
  /**
  Control-flow [operator](#highlight.tags.operator).
  */
  controlOperator: k$3(Wt),
  /**
  Program or markup punctuation.
  */
  punctuation: _n$1,
  /**
  [Punctuation](#highlight.tags.punctuation) that separates
  things.
  */
  separator: k$3(_n$1),
  /**
  Bracket-style [punctuation](#highlight.tags.punctuation).
  */
  bracket: ri,
  /**
  Angle [brackets](#highlight.tags.bracket) (usually `<` and `>`
  tokens).
  */
  angleBracket: k$3(ri),
  /**
  Square [brackets](#highlight.tags.bracket) (usually `[` and `]`
  tokens).
  */
  squareBracket: k$3(ri),
  /**
  Parentheses (usually `(` and `)` tokens). Subtag of
  [bracket](#highlight.tags.bracket).
  */
  paren: k$3(ri),
  /**
  Braces (usually `{` and `}` tokens). Subtag of
  [bracket](#highlight.tags.bracket).
  */
  brace: k$3(ri),
  /**
  Content, for example plain text in XML or markup documents.
  */
  content: jt,
  /**
  [Content](#highlight.tags.content) that represents a heading.
  */
  heading: Te$1,
  /**
  A level 1 [heading](#highlight.tags.heading).
  */
  heading1: k$3(Te$1),
  /**
  A level 2 [heading](#highlight.tags.heading).
  */
  heading2: k$3(Te$1),
  /**
  A level 3 [heading](#highlight.tags.heading).
  */
  heading3: k$3(Te$1),
  /**
  A level 4 [heading](#highlight.tags.heading).
  */
  heading4: k$3(Te$1),
  /**
  A level 5 [heading](#highlight.tags.heading).
  */
  heading5: k$3(Te$1),
  /**
  A level 6 [heading](#highlight.tags.heading).
  */
  heading6: k$3(Te$1),
  /**
  A prose separator (such as a horizontal rule).
  */
  contentSeparator: k$3(jt),
  /**
  [Content](#highlight.tags.content) that represents a list.
  */
  list: k$3(jt),
  /**
  [Content](#highlight.tags.content) that represents a quote.
  */
  quote: k$3(jt),
  /**
  [Content](#highlight.tags.content) that is emphasized.
  */
  emphasis: k$3(jt),
  /**
  [Content](#highlight.tags.content) that is styled strong.
  */
  strong: k$3(jt),
  /**
  [Content](#highlight.tags.content) that is part of a link.
  */
  link: k$3(jt),
  /**
  [Content](#highlight.tags.content) that is styled as code or
  monospace.
  */
  monospace: k$3(jt),
  /**
  [Content](#highlight.tags.content) that has a strike-through
  style.
  */
  strikethrough: k$3(jt),
  /**
  Inserted text in a change-tracking format.
  */
  inserted: k$3(),
  /**
  Deleted text.
  */
  deleted: k$3(),
  /**
  Changed text.
  */
  changed: k$3(),
  /**
  An invalid or unsyntactic element.
  */
  invalid: k$3(),
  /**
  Metadata or meta-instruction.
  */
  meta: Ui,
  /**
  [Metadata](#highlight.tags.meta) that applies to the entire
  document.
  */
  documentMeta: k$3(Ui),
  /**
  [Metadata](#highlight.tags.meta) that annotates or adds
  attributes to a given syntactic element.
  */
  annotation: k$3(Ui),
  /**
  Processing instruction or preprocessor directive. Subtag of
  [meta](#highlight.tags.meta).
  */
  processingInstruction: k$3(Ui),
  /**
  [Modifier](#highlight.Tag^defineModifier) that indicates that a
  given element is being defined. Expected to be used with the
  various [name](#highlight.tags.name) tags.
  */
  definition: Kt.defineModifier(),
  /**
  [Modifier](#highlight.Tag^defineModifier) that indicates that
  something is constant. Mostly expected to be used with
  [variable names](#highlight.tags.variableName).
  */
  constant: Kt.defineModifier(),
  /**
  [Modifier](#highlight.Tag^defineModifier) used to indicate that
  a [variable](#highlight.tags.variableName) or [property
  name](#highlight.tags.propertyName) is being called or defined
  as a function.
  */
  function: Kt.defineModifier(),
  /**
  [Modifier](#highlight.Tag^defineModifier) that can be applied to
  [names](#highlight.tags.name) to indicate that they belong to
  the language's standard environment.
  */
  standard: Kt.defineModifier(),
  /**
  [Modifier](#highlight.Tag^defineModifier) that indicates a given
  [names](#highlight.tags.name) is local to some scope.
  */
  local: Kt.defineModifier(),
  /**
  A generic variant [modifier](#highlight.Tag^defineModifier) that
  can be used to tag language-specific alternative variants of
  some common tag. It is recommended for themes to define special
  forms of at least the [string](#highlight.tags.string) and
  [variable name](#highlight.tags.variableName) tags, since those
  come up a lot.
  */
  special: Kt.defineModifier()
};
Sh([
  { tag: w$4.link, class: "tok-link" },
  { tag: w$4.heading, class: "tok-heading" },
  { tag: w$4.emphasis, class: "tok-emphasis" },
  { tag: w$4.strong, class: "tok-strong" },
  { tag: w$4.keyword, class: "tok-keyword" },
  { tag: w$4.atom, class: "tok-atom" },
  { tag: w$4.bool, class: "tok-bool" },
  { tag: w$4.url, class: "tok-url" },
  { tag: w$4.labelName, class: "tok-labelName" },
  { tag: w$4.inserted, class: "tok-inserted" },
  { tag: w$4.deleted, class: "tok-deleted" },
  { tag: w$4.literal, class: "tok-literal" },
  { tag: w$4.string, class: "tok-string" },
  { tag: w$4.number, class: "tok-number" },
  { tag: [w$4.regexp, w$4.escape, w$4.special(w$4.string)], class: "tok-string2" },
  { tag: w$4.variableName, class: "tok-variableName" },
  { tag: w$4.local(w$4.variableName), class: "tok-variableName tok-local" },
  { tag: w$4.definition(w$4.variableName), class: "tok-variableName tok-definition" },
  { tag: w$4.special(w$4.variableName), class: "tok-variableName2" },
  { tag: w$4.definition(w$4.propertyName), class: "tok-propertyName tok-definition" },
  { tag: w$4.typeName, class: "tok-typeName" },
  { tag: w$4.namespace, class: "tok-namespace" },
  { tag: w$4.className, class: "tok-className" },
  { tag: w$4.macroName, class: "tok-macroName" },
  { tag: w$4.propertyName, class: "tok-propertyName" },
  { tag: w$4.operator, class: "tok-operator" },
  { tag: w$4.comment, class: "tok-comment" },
  { tag: w$4.meta, class: "tok-meta" },
  { tag: w$4.invalid, class: "tok-invalid" },
  { tag: w$4.punctuation, class: "tok-punctuation" }
]);
var Qs;
const ze$3 = /* @__PURE__ */ new R$5();
function Bd(n2) {
  return O$2.define({
    combine: n2 ? (t3) => t3.concat(n2) : void 0
  });
}
const Rd = /* @__PURE__ */ new R$5();
class Rt {
  /**
  Construct a language object. If you need to invoke this
  directly, first define a data facet with
  [`defineLanguageFacet`](https://codemirror.net/6/docs/ref/#language.defineLanguageFacet), and then
  configure your parser to [attach](https://codemirror.net/6/docs/ref/#language.languageDataProp) it
  to the language's outer syntax node.
  */
  constructor(t3, e3, i3 = [], s5 = "") {
    this.data = t3, this.name = s5, H$2.prototype.hasOwnProperty("tree") || Object.defineProperty(H$2.prototype, "tree", { get() {
      return At$1(this);
    } }), this.parser = e3, this.extension = [
      ve$2.of(this),
      H$2.languageData.of((r2, o2, l2) => {
        let h4 = Ao$1(r2, o2, l2), a4 = h4.type.prop(ze$3);
        if (!a4)
          return [];
        let c3 = r2.facet(a4), f2 = h4.type.prop(Rd);
        if (f2) {
          let u3 = h4.resolve(o2 - h4.from, l2);
          for (let d4 of f2)
            if (d4.test(u3, r2)) {
              let p2 = r2.facet(d4.facet);
              return d4.type == "replace" ? p2 : p2.concat(c3);
            }
        }
        return c3;
      })
    ].concat(i3);
  }
  /**
  Query whether this language is active at the given position.
  */
  isActiveAt(t3, e3, i3 = -1) {
    return Ao$1(t3, e3, i3).type.prop(ze$3) == this.data;
  }
  /**
  Find the document regions that were parsed using this language.
  The returned regions will _include_ any nested languages rooted
  in this language, when those exist.
  */
  findRegions(t3) {
    let e3 = t3.facet(ve$2);
    if ((e3 == null ? void 0 : e3.data) == this.data)
      return [{ from: 0, to: t3.doc.length }];
    if (!e3 || !e3.allowsNesting)
      return [];
    let i3 = [], s5 = (r2, o2) => {
      if (r2.prop(ze$3) == this.data) {
        i3.push({ from: o2, to: o2 + r2.length });
        return;
      }
      let l2 = r2.prop(R$5.mounted);
      if (l2) {
        if (l2.tree.prop(ze$3) == this.data) {
          if (l2.overlay)
            for (let h4 of l2.overlay)
              i3.push({ from: h4.from + o2, to: h4.to + o2 });
          else
            i3.push({ from: o2, to: o2 + r2.length });
          return;
        } else if (l2.overlay) {
          let h4 = i3.length;
          if (s5(l2.tree, l2.overlay[0].from + o2), i3.length > h4)
            return;
        }
      }
      for (let h4 = 0; h4 < r2.children.length; h4++) {
        let a4 = r2.children[h4];
        a4 instanceof X$1 && s5(a4, r2.positions[h4] + o2);
      }
    };
    return s5(At$1(t3), 0), i3;
  }
  /**
  Indicates whether this language allows nested languages. The
  default implementation returns true.
  */
  get allowsNesting() {
    return true;
  }
}
Rt.setState = /* @__PURE__ */ z$4.define();
function Ao$1(n2, t3, e3) {
  let i3 = n2.facet(ve$2), s5 = At$1(n2).topNode;
  if (!i3 || i3.allowsNesting)
    for (let r2 = s5; r2; r2 = r2.enter(t3, e3, st$1.ExcludeBuffers))
      r2.type.isTop && (s5 = r2);
  return s5;
}
class ks extends Rt {
  constructor(t3, e3, i3) {
    super(t3, e3, [], i3), this.parser = e3;
  }
  /**
  Define a language from a parser.
  */
  static define(t3) {
    let e3 = Bd(t3.languageData);
    return new ks(e3, t3.parser.configure({
      props: [ze$3.add((i3) => i3.isTop ? e3 : void 0)]
    }), t3.name);
  }
  /**
  Create a new instance of this language with a reconfigured
  version of its parser and optionally a new name.
  */
  configure(t3, e3) {
    return new ks(this.data, this.parser.configure(t3), e3 || this.name);
  }
  get allowsNesting() {
    return this.parser.hasWrappers();
  }
}
function At$1(n2) {
  let t3 = n2.field(Rt.state, false);
  return t3 ? t3.tree : X$1.empty;
}
class Ld {
  /**
  Create an input object for the given document.
  */
  constructor(t3) {
    this.doc = t3, this.cursorPos = 0, this.string = "", this.cursor = t3.iter();
  }
  get length() {
    return this.doc.length;
  }
  syncTo(t3) {
    return this.string = this.cursor.next(t3 - this.cursorPos).value, this.cursorPos = t3 + this.string.length, this.cursorPos - this.string.length;
  }
  chunk(t3) {
    return this.syncTo(t3), this.string;
  }
  get lineChunks() {
    return true;
  }
  read(t3, e3) {
    let i3 = this.cursorPos - this.string.length;
    return t3 < i3 || e3 >= this.cursorPos ? this.doc.sliceString(t3, e3) : this.string.slice(t3 - i3, e3 - i3);
  }
}
let oi = null;
class xs {
  constructor(t3, e3, i3 = [], s5, r2, o2, l2, h4) {
    this.parser = t3, this.state = e3, this.fragments = i3, this.tree = s5, this.treeLen = r2, this.viewport = o2, this.skipped = l2, this.scheduleOn = h4, this.parse = null, this.tempSkipped = [];
  }
  /**
  @internal
  */
  static create(t3, e3, i3) {
    return new xs(t3, e3, [], X$1.empty, 0, i3, [], null);
  }
  startParse() {
    return this.parser.startParse(new Ld(this.state.doc), this.fragments);
  }
  /**
  @internal
  */
  work(t3, e3) {
    return e3 != null && e3 >= this.state.doc.length && (e3 = void 0), this.tree != X$1.empty && this.isDone(e3 ?? this.state.doc.length) ? (this.takeTree(), true) : this.withContext(() => {
      var i3;
      if (typeof t3 == "number") {
        let s5 = Date.now() + t3;
        t3 = () => Date.now() > s5;
      }
      for (this.parse || (this.parse = this.startParse()), e3 != null && (this.parse.stoppedAt == null || this.parse.stoppedAt > e3) && e3 < this.state.doc.length && this.parse.stopAt(e3); ; ) {
        let s5 = this.parse.advance();
        if (s5)
          if (this.fragments = this.withoutTempSkipped(Re$3.addTree(s5, this.fragments, this.parse.stoppedAt != null)), this.treeLen = (i3 = this.parse.stoppedAt) !== null && i3 !== void 0 ? i3 : this.state.doc.length, this.tree = s5, this.parse = null, this.treeLen < (e3 ?? this.state.doc.length))
            this.parse = this.startParse();
          else
            return true;
        if (t3())
          return false;
      }
    });
  }
  /**
  @internal
  */
  takeTree() {
    let t3, e3;
    this.parse && (t3 = this.parse.parsedPos) >= this.treeLen && ((this.parse.stoppedAt == null || this.parse.stoppedAt > t3) && this.parse.stopAt(t3), this.withContext(() => {
      for (; !(e3 = this.parse.advance()); )
        ;
    }), this.treeLen = t3, this.tree = e3, this.fragments = this.withoutTempSkipped(Re$3.addTree(this.tree, this.fragments, true)), this.parse = null);
  }
  withContext(t3) {
    let e3 = oi;
    oi = this;
    try {
      return t3();
    } finally {
      oi = e3;
    }
  }
  withoutTempSkipped(t3) {
    for (let e3; e3 = this.tempSkipped.pop(); )
      t3 = Oo$1(t3, e3.from, e3.to);
    return t3;
  }
  /**
  @internal
  */
  changes(t3, e3) {
    let { fragments: i3, tree: s5, treeLen: r2, viewport: o2, skipped: l2 } = this;
    if (this.takeTree(), !t3.empty) {
      let h4 = [];
      if (t3.iterChangedRanges((a4, c3, f2, u3) => h4.push({ fromA: a4, toA: c3, fromB: f2, toB: u3 })), i3 = Re$3.applyChanges(i3, h4), s5 = X$1.empty, r2 = 0, o2 = { from: t3.mapPos(o2.from, -1), to: t3.mapPos(o2.to, 1) }, this.skipped.length) {
        l2 = [];
        for (let a4 of this.skipped) {
          let c3 = t3.mapPos(a4.from, 1), f2 = t3.mapPos(a4.to, -1);
          c3 < f2 && l2.push({ from: c3, to: f2 });
        }
      }
    }
    return new xs(this.parser, e3, i3, s5, r2, o2, l2, this.scheduleOn);
  }
  /**
  @internal
  */
  updateViewport(t3) {
    if (this.viewport.from == t3.from && this.viewport.to == t3.to)
      return false;
    this.viewport = t3;
    let e3 = this.skipped.length;
    for (let i3 = 0; i3 < this.skipped.length; i3++) {
      let { from: s5, to: r2 } = this.skipped[i3];
      s5 < t3.to && r2 > t3.from && (this.fragments = Oo$1(this.fragments, s5, r2), this.skipped.splice(i3--, 1));
    }
    return this.skipped.length >= e3 ? false : (this.reset(), true);
  }
  /**
  @internal
  */
  reset() {
    this.parse && (this.takeTree(), this.parse = null);
  }
  /**
  Notify the parse scheduler that the given region was skipped
  because it wasn't in view, and the parse should be restarted
  when it comes into view.
  */
  skipUntilInView(t3, e3) {
    this.skipped.push({ from: t3, to: e3 });
  }
  /**
  Returns a parser intended to be used as placeholder when
  asynchronously loading a nested parser. It'll skip its input and
  mark it as not-really-parsed, so that the next update will parse
  it again.
  
  When `until` is given, a reparse will be scheduled when that
  promise resolves.
  */
  static getSkippingParser(t3) {
    return new class extends kh {
      createParse(e3, i3, s5) {
        let r2 = s5[0].from, o2 = s5[s5.length - 1].to;
        return {
          parsedPos: r2,
          advance() {
            let h4 = oi;
            if (h4) {
              for (let a4 of s5)
                h4.tempSkipped.push(a4);
              t3 && (h4.scheduleOn = h4.scheduleOn ? Promise.all([h4.scheduleOn, t3]) : t3);
            }
            return this.parsedPos = o2, new X$1(bt$1.none, [], [], o2 - r2);
          },
          stoppedAt: null,
          stopAt() {
          }
        };
      }
    }();
  }
  /**
  @internal
  */
  isDone(t3) {
    t3 = Math.min(t3, this.state.doc.length);
    let e3 = this.fragments;
    return this.treeLen >= t3 && e3.length && e3[0].from == 0 && e3[0].to >= t3;
  }
  /**
  Get the context for the current parse, or `null` if no editor
  parse is in progress.
  */
  static get() {
    return oi;
  }
}
function Oo$1(n2, t3, e3) {
  return Re$3.applyChanges(n2, [{ fromA: t3, toA: e3, fromB: t3, toB: e3 }]);
}
let Xe$2 = class Xe2 {
  constructor(t3) {
    this.context = t3, this.tree = t3.tree;
  }
  apply(t3) {
    if (!t3.docChanged && this.tree == this.context.tree)
      return this;
    let e3 = this.context.changes(t3.changes, t3.state), i3 = this.context.treeLen == t3.startState.doc.length ? void 0 : Math.max(t3.changes.mapPos(this.context.treeLen), e3.viewport.to);
    return e3.work(20, i3) || e3.takeTree(), new Xe2(e3);
  }
  static init(t3) {
    let e3 = Math.min(3e3, t3.doc.length), i3 = xs.create(t3.facet(ve$2).parser, t3, { from: 0, to: e3 });
    return i3.work(20, e3) || i3.takeTree(), new Xe2(i3);
  }
};
Rt.state = /* @__PURE__ */ Ht$1.define({
  create: Xe$2.init,
  update(n2, t3) {
    for (let e3 of t3.effects)
      if (e3.is(Rt.setState))
        return e3.value;
    return t3.startState.facet(ve$2) != t3.state.facet(ve$2) ? Xe$2.init(t3.state) : n2.apply(t3);
  }
});
let Ch = (n2) => {
  let t3 = setTimeout(
    () => n2(),
    500
    /* Work.MaxPause */
  );
  return () => clearTimeout(t3);
};
typeof requestIdleCallback < "u" && (Ch = (n2) => {
  let t3 = -1, e3 = setTimeout(
    () => {
      t3 = requestIdleCallback(n2, {
        timeout: 500 - 100
        /* Work.MinPause */
      });
    },
    100
    /* Work.MinPause */
  );
  return () => t3 < 0 ? clearTimeout(e3) : cancelIdleCallback(t3);
});
const Js = typeof navigator < "u" && (!((Qs = navigator.scheduling) === null || Qs === void 0) && Qs.isInputPending) ? () => navigator.scheduling.isInputPending() : null, Ed = /* @__PURE__ */ yt$2.fromClass(class {
  constructor(t3) {
    this.view = t3, this.working = null, this.workScheduled = 0, this.chunkEnd = -1, this.chunkBudget = -1, this.work = this.work.bind(this), this.scheduleWork();
  }
  update(t3) {
    let e3 = this.view.state.field(Rt.state).context;
    (e3.updateViewport(t3.view.viewport) || this.view.viewport.to > e3.treeLen) && this.scheduleWork(), (t3.docChanged || t3.selectionSet) && (this.view.hasFocus && (this.chunkBudget += 50), this.scheduleWork()), this.checkAsyncSchedule(e3);
  }
  scheduleWork() {
    if (this.working)
      return;
    let { state: t3 } = this.view, e3 = t3.field(Rt.state);
    (e3.tree != e3.context.tree || !e3.context.isDone(t3.doc.length)) && (this.working = Ch(this.work));
  }
  work(t3) {
    this.working = null;
    let e3 = Date.now();
    if (this.chunkEnd < e3 && (this.chunkEnd < 0 || this.view.hasFocus) && (this.chunkEnd = e3 + 3e4, this.chunkBudget = 3e3), this.chunkBudget <= 0)
      return;
    let { state: i3, viewport: { to: s5 } } = this.view, r2 = i3.field(Rt.state);
    if (r2.tree == r2.context.tree && r2.context.isDone(
      s5 + 1e5
      /* Work.MaxParseAhead */
    ))
      return;
    let o2 = Date.now() + Math.min(this.chunkBudget, 100, t3 && !Js ? Math.max(25, t3.timeRemaining() - 5) : 1e9), l2 = r2.context.treeLen < s5 && i3.doc.length > s5 + 1e3, h4 = r2.context.work(() => Js && Js() || Date.now() > o2, s5 + (l2 ? 0 : 1e5));
    this.chunkBudget -= Date.now() - e3, (h4 || this.chunkBudget <= 0) && (r2.context.takeTree(), this.view.dispatch({ effects: Rt.setState.of(new Xe$2(r2.context)) })), this.chunkBudget > 0 && !(h4 && !l2) && this.scheduleWork(), this.checkAsyncSchedule(r2.context);
  }
  checkAsyncSchedule(t3) {
    t3.scheduleOn && (this.workScheduled++, t3.scheduleOn.then(() => this.scheduleWork()).catch((e3) => ie$2(this.view.state, e3)).then(() => this.workScheduled--), t3.scheduleOn = null);
  }
  destroy() {
    this.working && this.working();
  }
  isWorking() {
    return !!(this.working || this.workScheduled > 0);
  }
}, {
  eventHandlers: { focus() {
    this.scheduleWork();
  } }
}), ve$2 = /* @__PURE__ */ O$2.define({
  combine(n2) {
    return n2.length ? n2[0] : null;
  },
  enables: (n2) => [
    Rt.state,
    Ed,
    T$4.contentAttributes.compute([n2], (t3) => {
      let e3 = t3.facet(n2);
      return e3 && e3.name ? { "data-language": e3.name } : {};
    })
  ]
});
class Nd {
  /**
  Create a language support object.
  */
  constructor(t3, e3 = []) {
    this.language = t3, this.support = e3, this.extension = [t3, e3];
  }
}
const Id = /* @__PURE__ */ O$2.define(), ar = /* @__PURE__ */ O$2.define({
  combine: (n2) => {
    if (!n2.length)
      return "  ";
    let t3 = n2[0];
    if (!t3 || /\S/.test(t3) || Array.from(t3).some((e3) => e3 != t3[0]))
      throw new Error("Invalid indent unit: " + JSON.stringify(n2[0]));
    return t3;
  }
});
function vs(n2) {
  let t3 = n2.facet(ar);
  return t3.charCodeAt(0) == 9 ? n2.tabSize * t3.length : t3.length;
}
function Ci(n2, t3) {
  let e3 = "", i3 = n2.tabSize, s5 = n2.facet(ar)[0];
  if (s5 == "	") {
    for (; t3 >= i3; )
      e3 += "	", t3 -= i3;
    s5 = " ";
  }
  for (let r2 = 0; r2 < t3; r2++)
    e3 += s5;
  return e3;
}
function cr(n2, t3) {
  n2 instanceof H$2 && (n2 = new Rs(n2));
  for (let i3 of n2.state.facet(Id)) {
    let s5 = i3(n2, t3);
    if (s5 !== void 0)
      return s5;
  }
  let e3 = At$1(n2.state);
  return e3.length >= t3 ? Vd(n2, e3, t3) : null;
}
class Rs {
  /**
  Create an indent context.
  */
  constructor(t3, e3 = {}) {
    this.state = t3, this.options = e3, this.unit = vs(t3);
  }
  /**
  Get a description of the line at the given position, taking
  [simulated line
  breaks](https://codemirror.net/6/docs/ref/#language.IndentContext.constructor^options.simulateBreak)
  into account. If there is such a break at `pos`, the `bias`
  argument determines whether the part of the line line before or
  after the break is used.
  */
  lineAt(t3, e3 = 1) {
    let i3 = this.state.doc.lineAt(t3), { simulateBreak: s5, simulateDoubleBreak: r2 } = this.options;
    return s5 != null && s5 >= i3.from && s5 <= i3.to ? r2 && s5 == t3 ? { text: "", from: t3 } : (e3 < 0 ? s5 < t3 : s5 <= t3) ? { text: i3.text.slice(s5 - i3.from), from: s5 } : { text: i3.text.slice(0, s5 - i3.from), from: i3.from } : i3;
  }
  /**
  Get the text directly after `pos`, either the entire line
  or the next 100 characters, whichever is shorter.
  */
  textAfterPos(t3, e3 = 1) {
    if (this.options.simulateDoubleBreak && t3 == this.options.simulateBreak)
      return "";
    let { text: i3, from: s5 } = this.lineAt(t3, e3);
    return i3.slice(t3 - s5, Math.min(i3.length, t3 + 100 - s5));
  }
  /**
  Find the column for the given position.
  */
  column(t3, e3 = 1) {
    let { text: i3, from: s5 } = this.lineAt(t3, e3), r2 = this.countColumn(i3, t3 - s5), o2 = this.options.overrideIndentation ? this.options.overrideIndentation(s5) : -1;
    return o2 > -1 && (r2 += o2 - this.countColumn(i3, i3.search(/\S|$/))), r2;
  }
  /**
  Find the column position (taking tabs into account) of the given
  position in the given string.
  */
  countColumn(t3, e3 = t3.length) {
    return Oi(t3, this.state.tabSize, e3);
  }
  /**
  Find the indentation column of the line at the given point.
  */
  lineIndent(t3, e3 = 1) {
    let { text: i3, from: s5 } = this.lineAt(t3, e3), r2 = this.options.overrideIndentation;
    if (r2) {
      let o2 = r2(s5);
      if (o2 > -1)
        return o2;
    }
    return this.countColumn(i3, i3.search(/\S|$/));
  }
  /**
  Returns the [simulated line
  break](https://codemirror.net/6/docs/ref/#language.IndentContext.constructor^options.simulateBreak)
  for this context, if any.
  */
  get simulatedBreak() {
    return this.options.simulateBreak || null;
  }
}
const Ah = /* @__PURE__ */ new R$5();
function Vd(n2, t3, e3) {
  let i3 = t3.resolveStack(e3), s5 = i3.node.enterUnfinishedNodesBefore(e3);
  if (s5 != i3.node) {
    let r2 = [];
    for (let o2 = s5; o2 != i3.node; o2 = o2.parent)
      r2.push(o2);
    for (let o2 = r2.length - 1; o2 >= 0; o2--)
      i3 = { node: r2[o2], next: i3 };
  }
  return Oh(i3, n2, e3);
}
function Oh(n2, t3, e3) {
  for (let i3 = n2; i3; i3 = i3.next) {
    let s5 = _d(i3.node);
    if (s5)
      return s5(fr$1.create(t3, e3, i3));
  }
  return 0;
}
function Hd(n2) {
  return n2.pos == n2.options.simulateBreak && n2.options.simulateDoubleBreak;
}
function _d(n2) {
  let t3 = n2.type.prop(Ah);
  if (t3)
    return t3;
  let e3 = n2.firstChild, i3;
  if (e3 && (i3 = e3.type.prop(R$5.closedBy))) {
    let s5 = n2.lastChild, r2 = s5 && i3.indexOf(s5.name) > -1;
    return (o2) => Wd(o2, true, 1, void 0, r2 && !Hd(o2) ? s5.from : void 0);
  }
  return n2.parent == null ? $d : null;
}
function $d() {
  return 0;
}
let fr$1 = class fr2 extends Rs {
  constructor(t3, e3, i3) {
    super(t3.state, t3.options), this.base = t3, this.pos = e3, this.context = i3;
  }
  /**
  The syntax tree node to which the indentation strategy
  applies.
  */
  get node() {
    return this.context.node;
  }
  /**
  @internal
  */
  static create(t3, e3, i3) {
    return new fr2(t3, e3, i3);
  }
  /**
  Get the text directly after `this.pos`, either the entire line
  or the next 100 characters, whichever is shorter.
  */
  get textAfter() {
    return this.textAfterPos(this.pos);
  }
  /**
  Get the indentation at the reference line for `this.node`, which
  is the line on which it starts, unless there is a node that is
  _not_ a parent of this node covering the start of that line. If
  so, the line at the start of that node is tried, again skipping
  on if it is covered by another such node.
  */
  get baseIndent() {
    return this.baseIndentFor(this.node);
  }
  /**
  Get the indentation for the reference line of the given node
  (see [`baseIndent`](https://codemirror.net/6/docs/ref/#language.TreeIndentContext.baseIndent)).
  */
  baseIndentFor(t3) {
    let e3 = this.state.doc.lineAt(t3.from);
    for (; ; ) {
      let i3 = t3.resolve(e3.from);
      for (; i3.parent && i3.parent.from == i3.from; )
        i3 = i3.parent;
      if (Fd(i3, t3))
        break;
      e3 = this.state.doc.lineAt(i3.from);
    }
    return this.lineIndent(e3.from);
  }
  /**
  Continue looking for indentations in the node's parent nodes,
  and return the result of that.
  */
  continue() {
    return Oh(this.context.next, this.base, this.pos);
  }
};
function Fd(n2, t3) {
  for (let e3 = t3; e3; e3 = e3.parent)
    if (n2 == e3)
      return true;
  return false;
}
function zd(n2) {
  let t3 = n2.node, e3 = t3.childAfter(t3.from), i3 = t3.lastChild;
  if (!e3)
    return null;
  let s5 = n2.options.simulateBreak, r2 = n2.state.doc.lineAt(e3.from), o2 = s5 == null || s5 <= r2.from ? r2.to : Math.min(r2.to, s5);
  for (let l2 = e3.to; ; ) {
    let h4 = t3.childAfter(l2);
    if (!h4 || h4 == i3)
      return null;
    if (!h4.type.isSkipped)
      return h4.from < o2 ? e3 : null;
    l2 = h4.to;
  }
}
function Wd(n2, t3, e3, i3, s5) {
  let r2 = n2.textAfter, o2 = r2.match(/^\s*/)[0].length, l2 = i3 && r2.slice(o2, o2 + i3.length) == i3 || s5 == n2.pos + o2, h4 = t3 ? zd(n2) : null;
  return h4 ? l2 ? n2.column(h4.from) : n2.column(h4.to) : n2.baseIndent + (l2 ? 0 : n2.unit * e3);
}
function Mo$1({ except: n2, units: t3 = 1 } = {}) {
  return (e3) => {
    let i3 = n2 && n2.test(e3.textAfter);
    return e3.baseIndent + (i3 ? 0 : t3 * e3.unit);
  };
}
const jd = 200;
function Kd() {
  return H$2.transactionFilter.of((n2) => {
    if (!n2.docChanged || !n2.isUserEvent("input.type") && !n2.isUserEvent("input.complete"))
      return n2;
    let t3 = n2.startState.languageDataAt("indentOnInput", n2.startState.selection.main.head);
    if (!t3.length)
      return n2;
    let e3 = n2.newDoc, { head: i3 } = n2.newSelection.main, s5 = e3.lineAt(i3);
    if (i3 > s5.from + jd)
      return n2;
    let r2 = e3.sliceString(s5.from, i3);
    if (!t3.some((a4) => a4.test(r2)))
      return n2;
    let { state: o2 } = n2, l2 = -1, h4 = [];
    for (let { head: a4 } of o2.selection.ranges) {
      let c3 = o2.doc.lineAt(a4);
      if (c3.from == l2)
        continue;
      l2 = c3.from;
      let f2 = cr(o2, c3.from);
      if (f2 == null)
        continue;
      let u3 = /^\s*/.exec(c3.text)[0], d4 = Ci(o2, f2);
      u3 != d4 && h4.push({ from: c3.from, to: c3.from + u3.length, insert: d4 });
    }
    return h4.length ? [n2, { changes: h4, sequential: true }] : n2;
  });
}
const qd = /* @__PURE__ */ O$2.define(), Mh = /* @__PURE__ */ new R$5();
function Gd(n2) {
  let t3 = n2.firstChild, e3 = n2.lastChild;
  return t3 && t3.to < e3.from ? { from: t3.to, to: e3.type.isError ? n2.to : e3.from } : null;
}
function Ud(n2, t3, e3) {
  let i3 = At$1(n2);
  if (i3.length < e3)
    return null;
  let s5 = i3.resolveStack(e3, 1), r2 = null;
  for (let o2 = s5; o2; o2 = o2.next) {
    let l2 = o2.node;
    if (l2.to <= e3 || l2.from > e3)
      continue;
    if (r2 && l2.from < t3)
      break;
    let h4 = l2.type.prop(Mh);
    if (h4 && (l2.to < i3.length - 50 || i3.length == n2.doc.length || !Yd(l2))) {
      let a4 = h4(l2, n2);
      a4 && a4.from <= e3 && a4.from >= t3 && a4.to > e3 && (r2 = a4);
    }
  }
  return r2;
}
function Yd(n2) {
  let t3 = n2.lastChild;
  return t3 && t3.to == n2.to && t3.type.isError;
}
function Ss(n2, t3, e3) {
  for (let i3 of n2.facet(qd)) {
    let s5 = i3(n2, t3, e3);
    if (s5)
      return s5;
  }
  return Ud(n2, t3, e3);
}
function Th(n2, t3) {
  let e3 = t3.mapPos(n2.from, 1), i3 = t3.mapPos(n2.to, -1);
  return e3 >= i3 ? void 0 : { from: e3, to: i3 };
}
const Ls = /* @__PURE__ */ z$4.define({ map: Th }), Di = /* @__PURE__ */ z$4.define({ map: Th });
function Dh(n2) {
  let t3 = [];
  for (let { head: e3 } of n2.state.selection.ranges)
    t3.some((i3) => i3.from <= e3 && i3.to >= e3) || t3.push(n2.lineBlockAt(e3));
  return t3;
}
const Ie$5 = /* @__PURE__ */ Ht$1.define({
  create() {
    return N$5.none;
  },
  update(n2, t3) {
    n2 = n2.map(t3.changes);
    for (let e3 of t3.effects)
      if (e3.is(Ls) && !Qd(n2, e3.value.from, e3.value.to)) {
        let { preparePlaceholder: i3 } = t3.state.facet(ur), s5 = i3 ? N$5.replace({ widget: new sp(i3(t3.state, e3.value)) }) : To$1;
        n2 = n2.update({ add: [s5.range(e3.value.from, e3.value.to)] });
      } else
        e3.is(Di) && (n2 = n2.update({
          filter: (i3, s5) => e3.value.from != i3 || e3.value.to != s5,
          filterFrom: e3.value.from,
          filterTo: e3.value.to
        }));
    if (t3.selection) {
      let e3 = false, { head: i3 } = t3.selection.main;
      n2.between(i3, i3, (s5, r2) => {
        s5 < i3 && r2 > i3 && (e3 = true);
      }), e3 && (n2 = n2.update({
        filterFrom: i3,
        filterTo: i3,
        filter: (s5, r2) => r2 <= i3 || s5 >= i3
      }));
    }
    return n2;
  },
  provide: (n2) => T$4.decorations.from(n2),
  toJSON(n2, t3) {
    let e3 = [];
    return n2.between(0, t3.doc.length, (i3, s5) => {
      e3.push(i3, s5);
    }), e3;
  },
  fromJSON(n2) {
    if (!Array.isArray(n2) || n2.length % 2)
      throw new RangeError("Invalid JSON for fold state");
    let t3 = [];
    for (let e3 = 0; e3 < n2.length; ) {
      let i3 = n2[e3++], s5 = n2[e3++];
      if (typeof i3 != "number" || typeof s5 != "number")
        throw new RangeError("Invalid JSON for fold state");
      t3.push(To$1.range(i3, s5));
    }
    return N$5.set(t3, true);
  }
});
function Cs(n2, t3, e3) {
  var i3;
  let s5 = null;
  return (i3 = n2.field(Ie$5, false)) === null || i3 === void 0 || i3.between(t3, e3, (r2, o2) => {
    (!s5 || s5.from > r2) && (s5 = { from: r2, to: o2 });
  }), s5;
}
function Qd(n2, t3, e3) {
  let i3 = false;
  return n2.between(t3, t3, (s5, r2) => {
    s5 == t3 && r2 == e3 && (i3 = true);
  }), i3;
}
function Ph(n2, t3) {
  return n2.field(Ie$5, false) ? t3 : t3.concat(z$4.appendConfig.of(Rh()));
}
const Jd = (n2) => {
  for (let t3 of Dh(n2)) {
    let e3 = Ss(n2.state, t3.from, t3.to);
    if (e3)
      return n2.dispatch({ effects: Ph(n2.state, [Ls.of(e3), Bh(n2, e3)]) }), true;
  }
  return false;
}, Xd = (n2) => {
  if (!n2.state.field(Ie$5, false))
    return false;
  let t3 = [];
  for (let e3 of Dh(n2)) {
    let i3 = Cs(n2.state, e3.from, e3.to);
    i3 && t3.push(Di.of(i3), Bh(n2, i3, false));
  }
  return t3.length && n2.dispatch({ effects: t3 }), t3.length > 0;
};
function Bh(n2, t3, e3 = true) {
  let i3 = n2.state.doc.lineAt(t3.from).number, s5 = n2.state.doc.lineAt(t3.to).number;
  return T$4.announce.of(`${n2.state.phrase(e3 ? "Folded lines" : "Unfolded lines")} ${i3} ${n2.state.phrase("to")} ${s5}.`);
}
const Zd = (n2) => {
  let { state: t3 } = n2, e3 = [];
  for (let i3 = 0; i3 < t3.doc.length; ) {
    let s5 = n2.lineBlockAt(i3), r2 = Ss(t3, s5.from, s5.to);
    r2 && e3.push(Ls.of(r2)), i3 = (r2 ? n2.lineBlockAt(r2.to) : s5).to + 1;
  }
  return e3.length && n2.dispatch({ effects: Ph(n2.state, e3) }), !!e3.length;
}, tp = (n2) => {
  let t3 = n2.state.field(Ie$5, false);
  if (!t3 || !t3.size)
    return false;
  let e3 = [];
  return t3.between(0, n2.state.doc.length, (i3, s5) => {
    e3.push(Di.of({ from: i3, to: s5 }));
  }), n2.dispatch({ effects: e3 }), true;
}, ep = [
  { key: "Ctrl-Shift-[", mac: "Cmd-Alt-[", run: Jd },
  { key: "Ctrl-Shift-]", mac: "Cmd-Alt-]", run: Xd },
  { key: "Ctrl-Alt-[", run: Zd },
  { key: "Ctrl-Alt-]", run: tp }
], ip = {
  placeholderDOM: null,
  preparePlaceholder: null,
  placeholderText: "…"
}, ur = /* @__PURE__ */ O$2.define({
  combine(n2) {
    return Ds(n2, ip);
  }
});
function Rh(n2) {
  let t3 = [Ie$5, op];
  return n2 && t3.push(ur.of(n2)), t3;
}
function Lh(n2, t3) {
  let { state: e3 } = n2, i3 = e3.facet(ur), s5 = (o2) => {
    let l2 = n2.lineBlockAt(n2.posAtDOM(o2.target)), h4 = Cs(n2.state, l2.from, l2.to);
    h4 && n2.dispatch({ effects: Di.of(h4) }), o2.preventDefault();
  };
  if (i3.placeholderDOM)
    return i3.placeholderDOM(n2, s5, t3);
  let r2 = document.createElement("span");
  return r2.textContent = i3.placeholderText, r2.setAttribute("aria-label", e3.phrase("folded code")), r2.title = e3.phrase("unfold"), r2.className = "cm-foldPlaceholder", r2.onclick = s5, r2;
}
const To$1 = /* @__PURE__ */ N$5.replace({ widget: /* @__PURE__ */ new class extends Se$5 {
  toDOM(n2) {
    return Lh(n2, null);
  }
}() });
class sp extends Se$5 {
  constructor(t3) {
    super(), this.value = t3;
  }
  eq(t3) {
    return this.value == t3.value;
  }
  toDOM(t3) {
    return Lh(t3, this.value);
  }
}
const np = {
  openText: "⌄",
  closedText: "›",
  markerDOM: null,
  domEventHandlers: {},
  foldingChanged: () => false
};
class Xs extends ke$2 {
  constructor(t3, e3) {
    super(), this.config = t3, this.open = e3;
  }
  eq(t3) {
    return this.config == t3.config && this.open == t3.open;
  }
  toDOM(t3) {
    if (this.config.markerDOM)
      return this.config.markerDOM(this.open);
    let e3 = document.createElement("span");
    return e3.textContent = this.open ? this.config.openText : this.config.closedText, e3.title = t3.state.phrase(this.open ? "Fold line" : "Unfold line"), e3;
  }
}
function rp(n2 = {}) {
  let t3 = Object.assign(Object.assign({}, np), n2), e3 = new Xs(t3, true), i3 = new Xs(t3, false), s5 = yt$2.fromClass(class {
    constructor(o2) {
      this.from = o2.viewport.from, this.markers = this.buildMarkers(o2);
    }
    update(o2) {
      (o2.docChanged || o2.viewportChanged || o2.startState.facet(ve$2) != o2.state.facet(ve$2) || o2.startState.field(Ie$5, false) != o2.state.field(Ie$5, false) || At$1(o2.startState) != At$1(o2.state) || t3.foldingChanged(o2)) && (this.markers = this.buildMarkers(o2.view));
    }
    buildMarkers(o2) {
      let l2 = new Ee$2();
      for (let h4 of o2.viewportLineBlocks) {
        let a4 = Cs(o2.state, h4.from, h4.to) ? i3 : Ss(o2.state, h4.from, h4.to) ? e3 : null;
        a4 && l2.add(h4.from, h4.from, a4);
      }
      return l2.finish();
    }
  }), { domEventHandlers: r2 } = t3;
  return [
    s5,
    hd({
      class: "cm-foldGutter",
      markers(o2) {
        var l2;
        return ((l2 = o2.plugin(s5)) === null || l2 === void 0 ? void 0 : l2.markers) || $$3.empty;
      },
      initialSpacer() {
        return new Xs(t3, false);
      },
      domEventHandlers: Object.assign(Object.assign({}, r2), { click: (o2, l2, h4) => {
        if (r2.click && r2.click(o2, l2, h4))
          return true;
        let a4 = Cs(o2.state, l2.from, l2.to);
        if (a4)
          return o2.dispatch({ effects: Di.of(a4) }), true;
        let c3 = Ss(o2.state, l2.from, l2.to);
        return c3 ? (o2.dispatch({ effects: Ls.of(c3) }), true) : false;
      } })
    }),
    Rh()
  ];
}
const op = /* @__PURE__ */ T$4.baseTheme({
  ".cm-foldPlaceholder": {
    backgroundColor: "#eee",
    border: "1px solid #ddd",
    color: "#888",
    borderRadius: ".2em",
    margin: "0 1px",
    padding: "0 1px",
    cursor: "pointer"
  },
  ".cm-foldGutter span": {
    padding: "0 1px",
    cursor: "pointer"
  }
});
class Pi {
  constructor(t3, e3) {
    this.specs = t3;
    let i3;
    function s5(l2) {
      let h4 = we.newName();
      return (i3 || (i3 = /* @__PURE__ */ Object.create(null)))["." + h4] = l2, h4;
    }
    const r2 = typeof e3.all == "string" ? e3.all : e3.all ? s5(e3.all) : void 0, o2 = e3.scope;
    this.scope = o2 instanceof Rt ? (l2) => l2.prop(ze$3) == o2.data : o2 ? (l2) => l2 == o2 : void 0, this.style = Sh(t3.map((l2) => ({
      tag: l2.tag,
      class: l2.class || s5(Object.assign({}, l2, { tag: null }))
    })), {
      all: r2
    }).style, this.module = i3 ? new we(i3) : null, this.themeType = e3.themeType;
  }
  /**
  Create a highlighter style that associates the given styles to
  the given tags. The specs must be objects that hold a style tag
  or array of tags in their `tag` property, and either a single
  `class` property providing a static CSS class (for highlighter
  that rely on external styling), or a
  [`style-mod`](https://github.com/marijnh/style-mod#documentation)-style
  set of CSS properties (which define the styling for those tags).
  
  The CSS rules created for a highlighter will be emitted in the
  order of the spec's properties. That means that for elements that
  have multiple tags associated with them, styles defined further
  down in the list will have a higher CSS precedence than styles
  defined earlier.
  */
  static define(t3, e3) {
    return new Pi(t3, e3 || {});
  }
}
const $n$1 = /* @__PURE__ */ O$2.define(), Eh = /* @__PURE__ */ O$2.define({
  combine(n2) {
    return n2.length ? [n2[0]] : null;
  }
});
function Zs(n2) {
  let t3 = n2.facet($n$1);
  return t3.length ? t3 : n2.facet(Eh);
}
function Do$1(n2, t3) {
  let e3 = [hp], i3;
  return n2 instanceof Pi && (n2.module && e3.push(T$4.styleModule.of(n2.module)), i3 = n2.themeType), t3 != null && t3.fallback ? e3.push(Eh.of(n2)) : i3 ? e3.push($n$1.computeN([T$4.darkTheme], (s5) => s5.facet(T$4.darkTheme) == (i3 == "dark") ? [n2] : [])) : e3.push($n$1.of(n2)), e3;
}
class lp {
  constructor(t3) {
    this.markCache = /* @__PURE__ */ Object.create(null), this.tree = At$1(t3.state), this.decorations = this.buildDeco(t3, Zs(t3.state));
  }
  update(t3) {
    let e3 = At$1(t3.state), i3 = Zs(t3.state), s5 = i3 != Zs(t3.startState);
    e3.length < t3.view.viewport.to && !s5 && e3.type == this.tree.type ? this.decorations = this.decorations.map(t3.changes) : (e3 != this.tree || t3.viewportChanged || s5) && (this.tree = e3, this.decorations = this.buildDeco(t3.view, i3));
  }
  buildDeco(t3, e3) {
    if (!e3 || !this.tree.length)
      return N$5.none;
    let i3 = new Ee$2();
    for (let { from: s5, to: r2 } of t3.visibleRanges)
      Td(this.tree, e3, (o2, l2, h4) => {
        i3.add(o2, l2, this.markCache[h4] || (this.markCache[h4] = N$5.mark({ class: h4 })));
      }, s5, r2);
    return i3.finish();
  }
}
const hp = /* @__PURE__ */ Qn.high(/* @__PURE__ */ yt$2.fromClass(lp, {
  decorations: (n2) => n2.decorations
})), ap = /* @__PURE__ */ Pi.define([
  {
    tag: w$4.meta,
    color: "#404740"
  },
  {
    tag: w$4.link,
    textDecoration: "underline"
  },
  {
    tag: w$4.heading,
    textDecoration: "underline",
    fontWeight: "bold"
  },
  {
    tag: w$4.emphasis,
    fontStyle: "italic"
  },
  {
    tag: w$4.strong,
    fontWeight: "bold"
  },
  {
    tag: w$4.strikethrough,
    textDecoration: "line-through"
  },
  {
    tag: w$4.keyword,
    color: "#708"
  },
  {
    tag: [w$4.atom, w$4.bool, w$4.url, w$4.contentSeparator, w$4.labelName],
    color: "#219"
  },
  {
    tag: [w$4.literal, w$4.inserted],
    color: "#164"
  },
  {
    tag: [w$4.string, w$4.deleted],
    color: "#a11"
  },
  {
    tag: [w$4.regexp, w$4.escape, /* @__PURE__ */ w$4.special(w$4.string)],
    color: "#e40"
  },
  {
    tag: /* @__PURE__ */ w$4.definition(w$4.variableName),
    color: "#00f"
  },
  {
    tag: /* @__PURE__ */ w$4.local(w$4.variableName),
    color: "#30a"
  },
  {
    tag: [w$4.typeName, w$4.namespace],
    color: "#085"
  },
  {
    tag: w$4.className,
    color: "#167"
  },
  {
    tag: [/* @__PURE__ */ w$4.special(w$4.variableName), w$4.macroName],
    color: "#256"
  },
  {
    tag: /* @__PURE__ */ w$4.definition(w$4.propertyName),
    color: "#00c"
  },
  {
    tag: w$4.comment,
    color: "#940"
  },
  {
    tag: w$4.invalid,
    color: "#f00"
  }
]), cp = /* @__PURE__ */ T$4.baseTheme({
  "&.cm-focused .cm-matchingBracket": { backgroundColor: "#328c8252" },
  "&.cm-focused .cm-nonmatchingBracket": { backgroundColor: "#bb555544" }
}), Nh = 1e4, Ih = "()[]{}", Vh = /* @__PURE__ */ O$2.define({
  combine(n2) {
    return Ds(n2, {
      afterCursor: true,
      brackets: Ih,
      maxScanDistance: Nh,
      renderMatch: dp
    });
  }
}), fp = /* @__PURE__ */ N$5.mark({ class: "cm-matchingBracket" }), up = /* @__PURE__ */ N$5.mark({ class: "cm-nonmatchingBracket" });
function dp(n2) {
  let t3 = [], e3 = n2.matched ? fp : up;
  return t3.push(e3.range(n2.start.from, n2.start.to)), n2.end && t3.push(e3.range(n2.end.from, n2.end.to)), t3;
}
const pp = /* @__PURE__ */ Ht$1.define({
  create() {
    return N$5.none;
  },
  update(n2, t3) {
    if (!t3.docChanged && !t3.selection)
      return n2;
    let e3 = [], i3 = t3.state.facet(Vh);
    for (let s5 of t3.state.selection.ranges) {
      if (!s5.empty)
        continue;
      let r2 = Yt(t3.state, s5.head, -1, i3) || s5.head > 0 && Yt(t3.state, s5.head - 1, 1, i3) || i3.afterCursor && (Yt(t3.state, s5.head, 1, i3) || s5.head < t3.state.doc.length && Yt(t3.state, s5.head + 1, -1, i3));
      r2 && (e3 = e3.concat(i3.renderMatch(r2, t3.state)));
    }
    return N$5.set(e3, true);
  },
  provide: (n2) => T$4.decorations.from(n2)
}), gp = [
  pp,
  cp
];
function mp(n2 = {}) {
  return [Vh.of(n2), gp];
}
const wp = /* @__PURE__ */ new R$5();
function Fn$1(n2, t3, e3) {
  let i3 = n2.prop(t3 < 0 ? R$5.openedBy : R$5.closedBy);
  if (i3)
    return i3;
  if (n2.name.length == 1) {
    let s5 = e3.indexOf(n2.name);
    if (s5 > -1 && s5 % 2 == (t3 < 0 ? 1 : 0))
      return [e3[s5 + t3]];
  }
  return null;
}
function zn$1(n2) {
  let t3 = n2.type.prop(wp);
  return t3 ? t3(n2.node) : n2;
}
function Yt(n2, t3, e3, i3 = {}) {
  let s5 = i3.maxScanDistance || Nh, r2 = i3.brackets || Ih, o2 = At$1(n2), l2 = o2.resolveInner(t3, e3);
  for (let h4 = l2; h4; h4 = h4.parent) {
    let a4 = Fn$1(h4.type, e3, r2);
    if (a4 && h4.from < h4.to) {
      let c3 = zn$1(h4);
      if (c3 && (e3 > 0 ? t3 >= c3.from && t3 < c3.to : t3 > c3.from && t3 <= c3.to))
        return yp(n2, t3, e3, h4, c3, a4, r2);
    }
  }
  return bp(n2, t3, e3, o2, l2.type, s5, r2);
}
function yp(n2, t3, e3, i3, s5, r2, o2) {
  let l2 = i3.parent, h4 = { from: s5.from, to: s5.to }, a4 = 0, c3 = l2 == null ? void 0 : l2.cursor();
  if (c3 && (e3 < 0 ? c3.childBefore(i3.from) : c3.childAfter(i3.to)))
    do
      if (e3 < 0 ? c3.to <= i3.from : c3.from >= i3.to) {
        if (a4 == 0 && r2.indexOf(c3.type.name) > -1 && c3.from < c3.to) {
          let f2 = zn$1(c3);
          return { start: h4, end: f2 ? { from: f2.from, to: f2.to } : void 0, matched: true };
        } else if (Fn$1(c3.type, e3, o2))
          a4++;
        else if (Fn$1(c3.type, -e3, o2)) {
          if (a4 == 0) {
            let f2 = zn$1(c3);
            return {
              start: h4,
              end: f2 && f2.from < f2.to ? { from: f2.from, to: f2.to } : void 0,
              matched: false
            };
          }
          a4--;
        }
      }
    while (e3 < 0 ? c3.prevSibling() : c3.nextSibling());
  return { start: h4, matched: false };
}
function bp(n2, t3, e3, i3, s5, r2, o2) {
  let l2 = e3 < 0 ? n2.sliceDoc(t3 - 1, t3) : n2.sliceDoc(t3, t3 + 1), h4 = o2.indexOf(l2);
  if (h4 < 0 || h4 % 2 == 0 != e3 > 0)
    return null;
  let a4 = { from: e3 < 0 ? t3 - 1 : t3, to: e3 > 0 ? t3 + 1 : t3 }, c3 = n2.doc.iterRange(t3, e3 > 0 ? n2.doc.length : 0), f2 = 0;
  for (let u3 = 0; !c3.next().done && u3 <= r2; ) {
    let d4 = c3.value;
    e3 < 0 && (u3 += d4.length);
    let p2 = t3 + u3 * e3;
    for (let m4 = e3 > 0 ? 0 : d4.length - 1, g2 = e3 > 0 ? d4.length : -1; m4 != g2; m4 += e3) {
      let y4 = o2.indexOf(d4[m4]);
      if (!(y4 < 0 || i3.resolveInner(p2 + m4, 1).type != s5))
        if (y4 % 2 == 0 == e3 > 0)
          f2++;
        else {
          if (f2 == 1)
            return { start: a4, end: { from: p2 + m4, to: p2 + m4 + 1 }, matched: y4 >> 1 == h4 >> 1 };
          f2--;
        }
    }
    e3 > 0 && (u3 += d4.length);
  }
  return c3.done ? { start: a4, matched: false } : null;
}
const kp = /* @__PURE__ */ Object.create(null), Po$1 = [bt$1.none], Bo = [], xp = /* @__PURE__ */ Object.create(null);
for (let [n2, t3] of [
  ["variable", "variableName"],
  ["variable-2", "variableName.special"],
  ["string-2", "string.special"],
  ["def", "variableName.definition"],
  ["tag", "tagName"],
  ["attribute", "attributeName"],
  ["type", "typeName"],
  ["builtin", "variableName.standard"],
  ["qualifier", "modifier"],
  ["error", "invalid"],
  ["header", "heading"],
  ["property", "propertyName"]
])
  xp[n2] = /* @__PURE__ */ vp(kp, t3);
function tn$1(n2, t3) {
  Bo.indexOf(n2) > -1 || (Bo.push(n2), console.warn(t3));
}
function vp(n2, t3) {
  let e3 = [];
  for (let r2 of t3.split(" ")) {
    let o2 = [];
    for (let l2 of r2.split(".")) {
      let h4 = n2[l2] || w$4[l2];
      h4 ? typeof h4 == "function" ? o2.length ? o2 = o2.map(h4) : tn$1(l2, `Modifier ${l2} used at start of tag`) : o2.length ? tn$1(l2, `Tag ${l2} used as modifier`) : o2 = Array.isArray(h4) ? h4 : [h4] : tn$1(l2, `Unknown highlighting tag ${l2}`);
    }
    for (let l2 of o2)
      e3.push(l2);
  }
  if (!e3.length)
    return 0;
  let i3 = t3.replace(/ /g, "_"), s5 = bt$1.define({
    id: Po$1.length,
    name: i3,
    props: [xh({ [i3]: e3 })]
  });
  return Po$1.push(s5), s5.id;
}
const Sp = (n2) => {
  let { state: t3 } = n2, e3 = t3.doc.lineAt(t3.selection.main.from), i3 = pr$1(n2.state, e3.from);
  return i3.line ? Cp(n2) : i3.block ? Op(n2) : false;
};
function dr(n2, t3) {
  return ({ state: e3, dispatch: i3 }) => {
    if (e3.readOnly)
      return false;
    let s5 = n2(t3, e3);
    return s5 ? (i3(e3.update(s5)), true) : false;
  };
}
const Cp = /* @__PURE__ */ dr(
  Dp,
  0
  /* CommentOption.Toggle */
), Ap = /* @__PURE__ */ dr(
  Hh,
  0
  /* CommentOption.Toggle */
), Op = /* @__PURE__ */ dr(
  (n2, t3) => Hh(n2, t3, Tp(t3)),
  0
  /* CommentOption.Toggle */
);
function pr$1(n2, t3) {
  let e3 = n2.languageDataAt("commentTokens", t3);
  return e3.length ? e3[0] : {};
}
const li = 50;
function Mp(n2, { open: t3, close: e3 }, i3, s5) {
  let r2 = n2.sliceDoc(i3 - li, i3), o2 = n2.sliceDoc(s5, s5 + li), l2 = /\s*$/.exec(r2)[0].length, h4 = /^\s*/.exec(o2)[0].length, a4 = r2.length - l2;
  if (r2.slice(a4 - t3.length, a4) == t3 && o2.slice(h4, h4 + e3.length) == e3)
    return {
      open: { pos: i3 - l2, margin: l2 && 1 },
      close: { pos: s5 + h4, margin: h4 && 1 }
    };
  let c3, f2;
  s5 - i3 <= 2 * li ? c3 = f2 = n2.sliceDoc(i3, s5) : (c3 = n2.sliceDoc(i3, i3 + li), f2 = n2.sliceDoc(s5 - li, s5));
  let u3 = /^\s*/.exec(c3)[0].length, d4 = /\s*$/.exec(f2)[0].length, p2 = f2.length - d4 - e3.length;
  return c3.slice(u3, u3 + t3.length) == t3 && f2.slice(p2, p2 + e3.length) == e3 ? {
    open: {
      pos: i3 + u3 + t3.length,
      margin: /\s/.test(c3.charAt(u3 + t3.length)) ? 1 : 0
    },
    close: {
      pos: s5 - d4 - e3.length,
      margin: /\s/.test(f2.charAt(p2 - 1)) ? 1 : 0
    }
  } : null;
}
function Tp(n2) {
  let t3 = [];
  for (let e3 of n2.selection.ranges) {
    let i3 = n2.doc.lineAt(e3.from), s5 = e3.to <= i3.to ? i3 : n2.doc.lineAt(e3.to), r2 = t3.length - 1;
    r2 >= 0 && t3[r2].to > i3.from ? t3[r2].to = s5.to : t3.push({ from: i3.from + /^\s*/.exec(i3.text)[0].length, to: s5.to });
  }
  return t3;
}
function Hh(n2, t3, e3 = t3.selection.ranges) {
  let i3 = e3.map((r2) => pr$1(t3, r2.from).block);
  if (!i3.every((r2) => r2))
    return null;
  let s5 = e3.map((r2, o2) => Mp(t3, i3[o2], r2.from, r2.to));
  if (n2 != 2 && !s5.every((r2) => r2))
    return { changes: t3.changes(e3.map((r2, o2) => s5[o2] ? [] : [{ from: r2.from, insert: i3[o2].open + " " }, { from: r2.to, insert: " " + i3[o2].close }])) };
  if (n2 != 1 && s5.some((r2) => r2)) {
    let r2 = [];
    for (let o2 = 0, l2; o2 < s5.length; o2++)
      if (l2 = s5[o2]) {
        let h4 = i3[o2], { open: a4, close: c3 } = l2;
        r2.push({ from: a4.pos - h4.open.length, to: a4.pos + a4.margin }, { from: c3.pos - c3.margin, to: c3.pos + h4.close.length });
      }
    return { changes: r2 };
  }
  return null;
}
function Dp(n2, t3, e3 = t3.selection.ranges) {
  let i3 = [], s5 = -1;
  for (let { from: r2, to: o2 } of e3) {
    let l2 = i3.length, h4 = 1e9, a4 = pr$1(t3, r2).line;
    if (a4) {
      for (let c3 = r2; c3 <= o2; ) {
        let f2 = t3.doc.lineAt(c3);
        if (f2.from > s5 && (r2 == o2 || o2 > f2.from)) {
          s5 = f2.from;
          let u3 = /^\s*/.exec(f2.text)[0].length, d4 = u3 == f2.length, p2 = f2.text.slice(u3, u3 + a4.length) == a4 ? u3 : -1;
          u3 < f2.text.length && u3 < h4 && (h4 = u3), i3.push({ line: f2, comment: p2, token: a4, indent: u3, empty: d4, single: false });
        }
        c3 = f2.to + 1;
      }
      if (h4 < 1e9)
        for (let c3 = l2; c3 < i3.length; c3++)
          i3[c3].indent < i3[c3].line.text.length && (i3[c3].indent = h4);
      i3.length == l2 + 1 && (i3[l2].single = true);
    }
  }
  if (n2 != 2 && i3.some((r2) => r2.comment < 0 && (!r2.empty || r2.single))) {
    let r2 = [];
    for (let { line: l2, token: h4, indent: a4, empty: c3, single: f2 } of i3)
      (f2 || !c3) && r2.push({ from: l2.from + a4, insert: h4 + " " });
    let o2 = t3.changes(r2);
    return { changes: o2, selection: t3.selection.map(o2, 1) };
  } else if (n2 != 1 && i3.some((r2) => r2.comment >= 0)) {
    let r2 = [];
    for (let { line: o2, comment: l2, token: h4 } of i3)
      if (l2 >= 0) {
        let a4 = o2.from + l2, c3 = a4 + h4.length;
        o2.text[c3 - o2.from] == " " && c3++, r2.push({ from: a4, to: c3 });
      }
    return { changes: r2 };
  }
  return null;
}
function ei(n2, t3) {
  return b$1.create(n2.ranges.map(t3), n2.mainIndex);
}
function Qt(n2, t3) {
  return n2.update({ selection: t3, scrollIntoView: true, userEvent: "select" });
}
function _t$1({ state: n2, dispatch: t3 }, e3) {
  let i3 = ei(n2.selection, e3);
  return i3.eq(n2.selection) ? false : (t3(Qt(n2, i3)), true);
}
function Es(n2, t3) {
  return b$1.cursor(t3 ? n2.to : n2.from);
}
function _h(n2, t3) {
  return _t$1(n2, (e3) => e3.empty ? n2.moveByChar(e3, t3) : Es(e3, t3));
}
function ut$2(n2) {
  return n2.textDirectionAt(n2.state.selection.main.head) == tt$2.LTR;
}
const $h = (n2) => _h(n2, !ut$2(n2)), Fh = (n2) => _h(n2, ut$2(n2));
function zh(n2, t3) {
  return _t$1(n2, (e3) => e3.empty ? n2.moveByGroup(e3, t3) : Es(e3, t3));
}
const Pp = (n2) => zh(n2, !ut$2(n2)), Bp = (n2) => zh(n2, ut$2(n2));
function Rp(n2, t3, e3) {
  if (t3.type.prop(e3))
    return true;
  let i3 = t3.to - t3.from;
  return i3 && (i3 > 2 || /[^\s,.;:]/.test(n2.sliceDoc(t3.from, t3.to))) || t3.firstChild;
}
function Ns(n2, t3, e3) {
  let i3 = At$1(n2).resolveInner(t3.head), s5 = e3 ? R$5.closedBy : R$5.openedBy;
  for (let h4 = t3.head; ; ) {
    let a4 = e3 ? i3.childAfter(h4) : i3.childBefore(h4);
    if (!a4)
      break;
    Rp(n2, a4, s5) ? i3 = a4 : h4 = e3 ? a4.to : a4.from;
  }
  let r2 = i3.type.prop(s5), o2, l2;
  return r2 && (o2 = e3 ? Yt(n2, i3.from, 1) : Yt(n2, i3.to, -1)) && o2.matched ? l2 = e3 ? o2.end.to : o2.end.from : l2 = e3 ? i3.to : i3.from, b$1.cursor(l2, e3 ? -1 : 1);
}
const Lp = (n2) => _t$1(n2, (t3) => Ns(n2.state, t3, !ut$2(n2))), Ep = (n2) => _t$1(n2, (t3) => Ns(n2.state, t3, ut$2(n2)));
function Wh(n2, t3) {
  return _t$1(n2, (e3) => {
    if (!e3.empty)
      return Es(e3, t3);
    let i3 = n2.moveVertically(e3, t3);
    return i3.head != e3.head ? i3 : n2.moveToLineBoundary(e3, t3);
  });
}
const jh = (n2) => Wh(n2, false), Kh = (n2) => Wh(n2, true);
function qh(n2) {
  let t3 = n2.scrollDOM.clientHeight < n2.scrollDOM.scrollHeight - 2, e3 = 0, i3 = 0, s5;
  if (t3) {
    for (let r2 of n2.state.facet(T$4.scrollMargins)) {
      let o2 = r2(n2);
      o2 != null && o2.top && (e3 = Math.max(o2 == null ? void 0 : o2.top, e3)), o2 != null && o2.bottom && (i3 = Math.max(o2 == null ? void 0 : o2.bottom, i3));
    }
    s5 = n2.scrollDOM.clientHeight - e3 - i3;
  } else
    s5 = (n2.dom.ownerDocument.defaultView || window).innerHeight;
  return {
    marginTop: e3,
    marginBottom: i3,
    selfScroll: t3,
    height: Math.max(n2.defaultLineHeight, s5 - 5)
  };
}
function Gh(n2, t3) {
  let e3 = qh(n2), { state: i3 } = n2, s5 = ei(i3.selection, (o2) => o2.empty ? n2.moveVertically(o2, t3, e3.height) : Es(o2, t3));
  if (s5.eq(i3.selection))
    return false;
  let r2;
  if (e3.selfScroll) {
    let o2 = n2.coordsAtPos(i3.selection.main.head), l2 = n2.scrollDOM.getBoundingClientRect(), h4 = l2.top + e3.marginTop, a4 = l2.bottom - e3.marginBottom;
    o2 && o2.top > h4 && o2.bottom < a4 && (r2 = T$4.scrollIntoView(s5.main.head, { y: "start", yMargin: o2.top - h4 }));
  }
  return n2.dispatch(Qt(i3, s5), { effects: r2 }), true;
}
const Ro$1 = (n2) => Gh(n2, false), Wn$1 = (n2) => Gh(n2, true);
function Ce$3(n2, t3, e3) {
  let i3 = n2.lineBlockAt(t3.head), s5 = n2.moveToLineBoundary(t3, e3);
  if (s5.head == t3.head && s5.head != (e3 ? i3.to : i3.from) && (s5 = n2.moveToLineBoundary(t3, e3, false)), !e3 && s5.head == i3.from && i3.length) {
    let r2 = /^\s*/.exec(n2.state.sliceDoc(i3.from, Math.min(i3.from + 100, i3.to)))[0].length;
    r2 && t3.head != i3.from + r2 && (s5 = b$1.cursor(i3.from + r2));
  }
  return s5;
}
const Np = (n2) => _t$1(n2, (t3) => Ce$3(n2, t3, true)), Ip = (n2) => _t$1(n2, (t3) => Ce$3(n2, t3, false)), Vp = (n2) => _t$1(n2, (t3) => Ce$3(n2, t3, !ut$2(n2))), Hp = (n2) => _t$1(n2, (t3) => Ce$3(n2, t3, ut$2(n2))), _p = (n2) => _t$1(n2, (t3) => b$1.cursor(n2.lineBlockAt(t3.head).from, 1)), $p = (n2) => _t$1(n2, (t3) => b$1.cursor(n2.lineBlockAt(t3.head).to, -1));
function Fp(n2, t3, e3) {
  let i3 = false, s5 = ei(n2.selection, (r2) => {
    let o2 = Yt(n2, r2.head, -1) || Yt(n2, r2.head, 1) || r2.head > 0 && Yt(n2, r2.head - 1, 1) || r2.head < n2.doc.length && Yt(n2, r2.head + 1, -1);
    if (!o2 || !o2.end)
      return r2;
    i3 = true;
    let l2 = o2.start.from == r2.head ? o2.end.to : o2.end.from;
    return e3 ? b$1.range(r2.anchor, l2) : b$1.cursor(l2);
  });
  return i3 ? (t3(Qt(n2, s5)), true) : false;
}
const zp = ({ state: n2, dispatch: t3 }) => Fp(n2, t3, false);
function Bt(n2, t3) {
  let e3 = ei(n2.state.selection, (i3) => {
    let s5 = t3(i3);
    return b$1.range(i3.anchor, s5.head, s5.goalColumn, s5.bidiLevel || void 0);
  });
  return e3.eq(n2.state.selection) ? false : (n2.dispatch(Qt(n2.state, e3)), true);
}
function Uh(n2, t3) {
  return Bt(n2, (e3) => n2.moveByChar(e3, t3));
}
const Yh = (n2) => Uh(n2, !ut$2(n2)), Qh = (n2) => Uh(n2, ut$2(n2));
function Jh(n2, t3) {
  return Bt(n2, (e3) => n2.moveByGroup(e3, t3));
}
const Wp = (n2) => Jh(n2, !ut$2(n2)), jp = (n2) => Jh(n2, ut$2(n2)), Kp = (n2) => Bt(n2, (t3) => Ns(n2.state, t3, !ut$2(n2))), qp = (n2) => Bt(n2, (t3) => Ns(n2.state, t3, ut$2(n2)));
function Xh(n2, t3) {
  return Bt(n2, (e3) => n2.moveVertically(e3, t3));
}
const Zh = (n2) => Xh(n2, false), ta = (n2) => Xh(n2, true);
function ea(n2, t3) {
  return Bt(n2, (e3) => n2.moveVertically(e3, t3, qh(n2).height));
}
const Lo = (n2) => ea(n2, false), Eo = (n2) => ea(n2, true), Gp = (n2) => Bt(n2, (t3) => Ce$3(n2, t3, true)), Up = (n2) => Bt(n2, (t3) => Ce$3(n2, t3, false)), Yp = (n2) => Bt(n2, (t3) => Ce$3(n2, t3, !ut$2(n2))), Qp = (n2) => Bt(n2, (t3) => Ce$3(n2, t3, ut$2(n2))), Jp = (n2) => Bt(n2, (t3) => b$1.cursor(n2.lineBlockAt(t3.head).from)), Xp = (n2) => Bt(n2, (t3) => b$1.cursor(n2.lineBlockAt(t3.head).to)), No = ({ state: n2, dispatch: t3 }) => (t3(Qt(n2, { anchor: 0 })), true), Io = ({ state: n2, dispatch: t3 }) => (t3(Qt(n2, { anchor: n2.doc.length })), true), Vo = ({ state: n2, dispatch: t3 }) => (t3(Qt(n2, { anchor: n2.selection.main.anchor, head: 0 })), true), Ho = ({ state: n2, dispatch: t3 }) => (t3(Qt(n2, { anchor: n2.selection.main.anchor, head: n2.doc.length })), true), Zp = ({ state: n2, dispatch: t3 }) => (t3(n2.update({ selection: { anchor: 0, head: n2.doc.length }, userEvent: "select" })), true), tg = ({ state: n2, dispatch: t3 }) => {
  let e3 = Is(n2).map(({ from: i3, to: s5 }) => b$1.range(i3, Math.min(s5 + 1, n2.doc.length)));
  return t3(n2.update({ selection: b$1.create(e3), userEvent: "select" })), true;
}, eg = ({ state: n2, dispatch: t3 }) => {
  let e3 = ei(n2.selection, (i3) => {
    var s5;
    let r2 = At$1(n2).resolveStack(i3.from, 1);
    for (let o2 = r2; o2; o2 = o2.next) {
      let { node: l2 } = o2;
      if ((l2.from < i3.from && l2.to >= i3.to || l2.to > i3.to && l2.from <= i3.from) && (!((s5 = l2.parent) === null || s5 === void 0) && s5.parent))
        return b$1.range(l2.to, l2.from);
    }
    return i3;
  });
  return t3(Qt(n2, e3)), true;
}, ig = ({ state: n2, dispatch: t3 }) => {
  let e3 = n2.selection, i3 = null;
  return e3.ranges.length > 1 ? i3 = b$1.create([e3.main]) : e3.main.empty || (i3 = b$1.create([b$1.cursor(e3.main.head)])), i3 ? (t3(Qt(n2, i3)), true) : false;
};
function Bi(n2, t3) {
  if (n2.state.readOnly)
    return false;
  let e3 = "delete.selection", { state: i3 } = n2, s5 = i3.changeByRange((r2) => {
    let { from: o2, to: l2 } = r2;
    if (o2 == l2) {
      let h4 = t3(r2);
      h4 < o2 ? (e3 = "delete.backward", h4 = Yi(n2, h4, false)) : h4 > o2 && (e3 = "delete.forward", h4 = Yi(n2, h4, true)), o2 = Math.min(o2, h4), l2 = Math.max(l2, h4);
    } else
      o2 = Yi(n2, o2, false), l2 = Yi(n2, l2, true);
    return o2 == l2 ? { range: r2 } : { changes: { from: o2, to: l2 }, range: b$1.cursor(o2, o2 < r2.head ? -1 : 1) };
  });
  return s5.changes.empty ? false : (n2.dispatch(i3.update(s5, {
    scrollIntoView: true,
    userEvent: e3,
    effects: e3 == "delete.selection" ? T$4.announce.of(i3.phrase("Selection deleted")) : void 0
  })), true);
}
function Yi(n2, t3, e3) {
  if (n2 instanceof T$4)
    for (let i3 of n2.state.facet(T$4.atomicRanges).map((s5) => s5(n2)))
      i3.between(t3, t3, (s5, r2) => {
        s5 < t3 && r2 > t3 && (t3 = e3 ? r2 : s5);
      });
  return t3;
}
const ia$1 = (n2, t3) => Bi(n2, (e3) => {
  let i3 = e3.from, { state: s5 } = n2, r2 = s5.doc.lineAt(i3), o2, l2;
  if (!t3 && i3 > r2.from && i3 < r2.from + 200 && !/[^ \t]/.test(o2 = r2.text.slice(0, i3 - r2.from))) {
    if (o2[o2.length - 1] == "	")
      return i3 - 1;
    let h4 = Oi(o2, s5.tabSize), a4 = h4 % vs(s5) || vs(s5);
    for (let c3 = 0; c3 < a4 && o2[o2.length - 1 - c3] == " "; c3++)
      i3--;
    l2 = i3;
  } else
    l2 = wt$2(r2.text, i3 - r2.from, t3, t3) + r2.from, l2 == i3 && r2.number != (t3 ? s5.doc.lines : 1) && (l2 += t3 ? 1 : -1);
  return l2;
}), jn$1 = (n2) => ia$1(n2, false), sa$1 = (n2) => ia$1(n2, true), na$1 = (n2, t3) => Bi(n2, (e3) => {
  let i3 = e3.head, { state: s5 } = n2, r2 = s5.doc.lineAt(i3), o2 = s5.charCategorizer(i3);
  for (let l2 = null; ; ) {
    if (i3 == (t3 ? r2.to : r2.from)) {
      i3 == e3.head && r2.number != (t3 ? s5.doc.lines : 1) && (i3 += t3 ? 1 : -1);
      break;
    }
    let h4 = wt$2(r2.text, i3 - r2.from, t3) + r2.from, a4 = r2.text.slice(Math.min(i3, h4) - r2.from, Math.max(i3, h4) - r2.from), c3 = o2(a4);
    if (l2 != null && c3 != l2)
      break;
    (a4 != " " || i3 != e3.head) && (l2 = c3), i3 = h4;
  }
  return i3;
}), ra$1 = (n2) => na$1(n2, false), sg = (n2) => na$1(n2, true), ng = (n2) => Bi(n2, (t3) => {
  let e3 = n2.lineBlockAt(t3.head).to;
  return t3.head < e3 ? e3 : Math.min(n2.state.doc.length, t3.head + 1);
}), rg = (n2) => Bi(n2, (t3) => {
  let e3 = n2.moveToLineBoundary(t3, false).head;
  return t3.head > e3 ? e3 : Math.max(0, t3.head - 1);
}), og = (n2) => Bi(n2, (t3) => {
  let e3 = n2.moveToLineBoundary(t3, true).head;
  return t3.head < e3 ? e3 : Math.min(n2.state.doc.length, t3.head + 1);
}), lg = ({ state: n2, dispatch: t3 }) => {
  if (n2.readOnly)
    return false;
  let e3 = n2.changeByRange((i3) => ({
    changes: { from: i3.from, to: i3.to, insert: V$2.of(["", ""]) },
    range: b$1.cursor(i3.from)
  }));
  return t3(n2.update(e3, { scrollIntoView: true, userEvent: "input" })), true;
}, hg = ({ state: n2, dispatch: t3 }) => {
  if (n2.readOnly)
    return false;
  let e3 = n2.changeByRange((i3) => {
    if (!i3.empty || i3.from == 0 || i3.from == n2.doc.length)
      return { range: i3 };
    let s5 = i3.from, r2 = n2.doc.lineAt(s5), o2 = s5 == r2.from ? s5 - 1 : wt$2(r2.text, s5 - r2.from, false) + r2.from, l2 = s5 == r2.to ? s5 + 1 : wt$2(r2.text, s5 - r2.from, true) + r2.from;
    return {
      changes: { from: o2, to: l2, insert: n2.doc.slice(s5, l2).append(n2.doc.slice(o2, s5)) },
      range: b$1.cursor(l2)
    };
  });
  return e3.changes.empty ? false : (t3(n2.update(e3, { scrollIntoView: true, userEvent: "move.character" })), true);
};
function Is(n2) {
  let t3 = [], e3 = -1;
  for (let i3 of n2.selection.ranges) {
    let s5 = n2.doc.lineAt(i3.from), r2 = n2.doc.lineAt(i3.to);
    if (!i3.empty && i3.to == r2.from && (r2 = n2.doc.lineAt(i3.to - 1)), e3 >= s5.number) {
      let o2 = t3[t3.length - 1];
      o2.to = r2.to, o2.ranges.push(i3);
    } else
      t3.push({ from: s5.from, to: r2.to, ranges: [i3] });
    e3 = r2.number + 1;
  }
  return t3;
}
function oa$1(n2, t3, e3) {
  if (n2.readOnly)
    return false;
  let i3 = [], s5 = [];
  for (let r2 of Is(n2)) {
    if (e3 ? r2.to == n2.doc.length : r2.from == 0)
      continue;
    let o2 = n2.doc.lineAt(e3 ? r2.to + 1 : r2.from - 1), l2 = o2.length + 1;
    if (e3) {
      i3.push({ from: r2.to, to: o2.to }, { from: r2.from, insert: o2.text + n2.lineBreak });
      for (let h4 of r2.ranges)
        s5.push(b$1.range(Math.min(n2.doc.length, h4.anchor + l2), Math.min(n2.doc.length, h4.head + l2)));
    } else {
      i3.push({ from: o2.from, to: r2.from }, { from: r2.to, insert: n2.lineBreak + o2.text });
      for (let h4 of r2.ranges)
        s5.push(b$1.range(h4.anchor - l2, h4.head - l2));
    }
  }
  return i3.length ? (t3(n2.update({
    changes: i3,
    scrollIntoView: true,
    selection: b$1.create(s5, n2.selection.mainIndex),
    userEvent: "move.line"
  })), true) : false;
}
const ag = ({ state: n2, dispatch: t3 }) => oa$1(n2, t3, false), cg = ({ state: n2, dispatch: t3 }) => oa$1(n2, t3, true);
function la$1(n2, t3, e3) {
  if (n2.readOnly)
    return false;
  let i3 = [];
  for (let s5 of Is(n2))
    e3 ? i3.push({ from: s5.from, insert: n2.doc.slice(s5.from, s5.to) + n2.lineBreak }) : i3.push({ from: s5.to, insert: n2.lineBreak + n2.doc.slice(s5.from, s5.to) });
  return t3(n2.update({ changes: i3, scrollIntoView: true, userEvent: "input.copyline" })), true;
}
const fg = ({ state: n2, dispatch: t3 }) => la$1(n2, t3, false), ug = ({ state: n2, dispatch: t3 }) => la$1(n2, t3, true), dg = (n2) => {
  if (n2.state.readOnly)
    return false;
  let { state: t3 } = n2, e3 = t3.changes(Is(t3).map(({ from: s5, to: r2 }) => (s5 > 0 ? s5-- : r2 < t3.doc.length && r2++, { from: s5, to: r2 }))), i3 = ei(t3.selection, (s5) => n2.moveVertically(s5, true)).map(e3);
  return n2.dispatch({ changes: e3, selection: i3, scrollIntoView: true, userEvent: "delete.line" }), true;
};
function pg(n2, t3) {
  if (/\(\)|\[\]|\{\}/.test(n2.sliceDoc(t3 - 1, t3 + 1)))
    return { from: t3, to: t3 };
  let e3 = At$1(n2).resolveInner(t3), i3 = e3.childBefore(t3), s5 = e3.childAfter(t3), r2;
  return i3 && s5 && i3.to <= t3 && s5.from >= t3 && (r2 = i3.type.prop(R$5.closedBy)) && r2.indexOf(s5.name) > -1 && n2.doc.lineAt(i3.to).from == n2.doc.lineAt(s5.from).from && !/\S/.test(n2.sliceDoc(i3.to, s5.from)) ? { from: i3.to, to: s5.from } : null;
}
const gg = /* @__PURE__ */ ha$1(false), mg = /* @__PURE__ */ ha$1(true);
function ha$1(n2) {
  return ({ state: t3, dispatch: e3 }) => {
    if (t3.readOnly)
      return false;
    let i3 = t3.changeByRange((s5) => {
      let { from: r2, to: o2 } = s5, l2 = t3.doc.lineAt(r2), h4 = !n2 && r2 == o2 && pg(t3, r2);
      n2 && (r2 = o2 = (o2 <= l2.to ? l2 : t3.doc.lineAt(o2)).to);
      let a4 = new Rs(t3, { simulateBreak: r2, simulateDoubleBreak: !!h4 }), c3 = cr(a4, r2);
      for (c3 == null && (c3 = Oi(/^\s*/.exec(t3.doc.lineAt(r2).text)[0], t3.tabSize)); o2 < l2.to && /\s/.test(l2.text[o2 - l2.from]); )
        o2++;
      h4 ? { from: r2, to: o2 } = h4 : r2 > l2.from && r2 < l2.from + 100 && !/\S/.test(l2.text.slice(0, r2)) && (r2 = l2.from);
      let f2 = ["", Ci(t3, c3)];
      return h4 && f2.push(Ci(t3, a4.lineIndent(l2.from, -1))), {
        changes: { from: r2, to: o2, insert: V$2.of(f2) },
        range: b$1.cursor(r2 + 1 + f2[1].length)
      };
    });
    return e3(t3.update(i3, { scrollIntoView: true, userEvent: "input" })), true;
  };
}
function gr$1(n2, t3) {
  let e3 = -1;
  return n2.changeByRange((i3) => {
    let s5 = [];
    for (let o2 = i3.from; o2 <= i3.to; ) {
      let l2 = n2.doc.lineAt(o2);
      l2.number > e3 && (i3.empty || i3.to > l2.from) && (t3(l2, s5, i3), e3 = l2.number), o2 = l2.to + 1;
    }
    let r2 = n2.changes(s5);
    return {
      changes: s5,
      range: b$1.range(r2.mapPos(i3.anchor, 1), r2.mapPos(i3.head, 1))
    };
  });
}
const wg = ({ state: n2, dispatch: t3 }) => {
  if (n2.readOnly)
    return false;
  let e3 = /* @__PURE__ */ Object.create(null), i3 = new Rs(n2, { overrideIndentation: (r2) => {
    let o2 = e3[r2];
    return o2 ?? -1;
  } }), s5 = gr$1(n2, (r2, o2, l2) => {
    let h4 = cr(i3, r2.from);
    if (h4 == null)
      return;
    /\S/.test(r2.text) || (h4 = 0);
    let a4 = /^\s*/.exec(r2.text)[0], c3 = Ci(n2, h4);
    (a4 != c3 || l2.from < r2.from + a4.length) && (e3[r2.from] = h4, o2.push({ from: r2.from, to: r2.from + a4.length, insert: c3 }));
  });
  return s5.changes.empty || t3(n2.update(s5, { userEvent: "indent" })), true;
}, yg = ({ state: n2, dispatch: t3 }) => n2.readOnly ? false : (t3(n2.update(gr$1(n2, (e3, i3) => {
  i3.push({ from: e3.from, insert: n2.facet(ar) });
}), { userEvent: "input.indent" })), true), bg = ({ state: n2, dispatch: t3 }) => n2.readOnly ? false : (t3(n2.update(gr$1(n2, (e3, i3) => {
  let s5 = /^\s*/.exec(e3.text)[0];
  if (!s5)
    return;
  let r2 = Oi(s5, n2.tabSize), o2 = 0, l2 = Ci(n2, Math.max(0, r2 - vs(n2)));
  for (; o2 < s5.length && o2 < l2.length && s5.charCodeAt(o2) == l2.charCodeAt(o2); )
    o2++;
  i3.push({ from: e3.from + o2, to: e3.from + s5.length, insert: l2.slice(o2) });
}), { userEvent: "delete.dedent" })), true), kg = [
  { key: "Ctrl-b", run: $h, shift: Yh, preventDefault: true },
  { key: "Ctrl-f", run: Fh, shift: Qh },
  { key: "Ctrl-p", run: jh, shift: Zh },
  { key: "Ctrl-n", run: Kh, shift: ta },
  { key: "Ctrl-a", run: _p, shift: Jp },
  { key: "Ctrl-e", run: $p, shift: Xp },
  { key: "Ctrl-d", run: sa$1 },
  { key: "Ctrl-h", run: jn$1 },
  { key: "Ctrl-k", run: ng },
  { key: "Ctrl-Alt-h", run: ra$1 },
  { key: "Ctrl-o", run: lg },
  { key: "Ctrl-t", run: hg },
  { key: "Ctrl-v", run: Wn$1 }
], xg = /* @__PURE__ */ [
  { key: "ArrowLeft", run: $h, shift: Yh, preventDefault: true },
  { key: "Mod-ArrowLeft", mac: "Alt-ArrowLeft", run: Pp, shift: Wp, preventDefault: true },
  { mac: "Cmd-ArrowLeft", run: Vp, shift: Yp, preventDefault: true },
  { key: "ArrowRight", run: Fh, shift: Qh, preventDefault: true },
  { key: "Mod-ArrowRight", mac: "Alt-ArrowRight", run: Bp, shift: jp, preventDefault: true },
  { mac: "Cmd-ArrowRight", run: Hp, shift: Qp, preventDefault: true },
  { key: "ArrowUp", run: jh, shift: Zh, preventDefault: true },
  { mac: "Cmd-ArrowUp", run: No, shift: Vo },
  { mac: "Ctrl-ArrowUp", run: Ro$1, shift: Lo },
  { key: "ArrowDown", run: Kh, shift: ta, preventDefault: true },
  { mac: "Cmd-ArrowDown", run: Io, shift: Ho },
  { mac: "Ctrl-ArrowDown", run: Wn$1, shift: Eo },
  { key: "PageUp", run: Ro$1, shift: Lo },
  { key: "PageDown", run: Wn$1, shift: Eo },
  { key: "Home", run: Ip, shift: Up, preventDefault: true },
  { key: "Mod-Home", run: No, shift: Vo },
  { key: "End", run: Np, shift: Gp, preventDefault: true },
  { key: "Mod-End", run: Io, shift: Ho },
  { key: "Enter", run: gg },
  { key: "Mod-a", run: Zp },
  { key: "Backspace", run: jn$1, shift: jn$1 },
  { key: "Delete", run: sa$1 },
  { key: "Mod-Backspace", mac: "Alt-Backspace", run: ra$1 },
  { key: "Mod-Delete", mac: "Alt-Delete", run: sg },
  { mac: "Mod-Backspace", run: rg },
  { mac: "Mod-Delete", run: og }
].concat(/* @__PURE__ */ kg.map((n2) => ({ mac: n2.key, run: n2.run, shift: n2.shift }))), vg = /* @__PURE__ */ [
  { key: "Alt-ArrowLeft", mac: "Ctrl-ArrowLeft", run: Lp, shift: Kp },
  { key: "Alt-ArrowRight", mac: "Ctrl-ArrowRight", run: Ep, shift: qp },
  { key: "Alt-ArrowUp", run: ag },
  { key: "Shift-Alt-ArrowUp", run: fg },
  { key: "Alt-ArrowDown", run: cg },
  { key: "Shift-Alt-ArrowDown", run: ug },
  { key: "Escape", run: ig },
  { key: "Mod-Enter", run: mg },
  { key: "Alt-l", mac: "Ctrl-l", run: tg },
  { key: "Mod-i", run: eg, preventDefault: true },
  { key: "Mod-[", run: bg },
  { key: "Mod-]", run: yg },
  { key: "Mod-Alt-\\", run: wg },
  { key: "Shift-Mod-k", run: dg },
  { key: "Shift-Mod-\\", run: zp },
  { key: "Mod-/", run: Sp },
  { key: "Alt-A", run: Ap }
].concat(xg);
class As {
  /**
  @internal
  */
  constructor(t3, e3, i3, s5, r2, o2, l2, h4, a4, c3 = 0, f2) {
    this.p = t3, this.stack = e3, this.state = i3, this.reducePos = s5, this.pos = r2, this.score = o2, this.buffer = l2, this.bufferBase = h4, this.curContext = a4, this.lookAhead = c3, this.parent = f2;
  }
  /**
  @internal
  */
  toString() {
    return `[${this.stack.filter((t3, e3) => e3 % 3 == 0).concat(this.state)}]@${this.pos}${this.score ? "!" + this.score : ""}`;
  }
  // Start an empty stack
  /**
  @internal
  */
  static start(t3, e3, i3 = 0) {
    let s5 = t3.parser.context;
    return new As(t3, [], e3, i3, i3, 0, [], 0, s5 ? new _o$1(s5, s5.start) : null, 0, null);
  }
  /**
  The stack's current [context](#lr.ContextTracker) value, if
  any. Its type will depend on the context tracker's type
  parameter, or it will be `null` if there is no context
  tracker.
  */
  get context() {
    return this.curContext ? this.curContext.context : null;
  }
  // Push a state onto the stack, tracking its start position as well
  // as the buffer base at that point.
  /**
  @internal
  */
  pushState(t3, e3) {
    this.stack.push(this.state, e3, this.bufferBase + this.buffer.length), this.state = t3;
  }
  // Apply a reduce action
  /**
  @internal
  */
  reduce(t3) {
    var e3;
    let i3 = t3 >> 19, s5 = t3 & 65535, { parser: r2 } = this.p, o2 = r2.dynamicPrecedence(s5);
    if (o2 && (this.score += o2), i3 == 0) {
      this.pushState(r2.getGoto(this.state, s5, true), this.reducePos), s5 < r2.minRepeatTerm && this.storeNode(s5, this.reducePos, this.reducePos, 4, true), this.reduceContext(s5, this.reducePos);
      return;
    }
    let l2 = this.stack.length - (i3 - 1) * 3 - (t3 & 262144 ? 6 : 0), h4 = l2 ? this.stack[l2 - 2] : this.p.ranges[0].from, a4 = this.reducePos - h4;
    a4 >= 2e3 && !(!((e3 = this.p.parser.nodeSet.types[s5]) === null || e3 === void 0) && e3.isAnonymous) && (h4 == this.p.lastBigReductionStart ? (this.p.bigReductionCount++, this.p.lastBigReductionSize = a4) : this.p.lastBigReductionSize < a4 && (this.p.bigReductionCount = 1, this.p.lastBigReductionStart = h4, this.p.lastBigReductionSize = a4));
    let c3 = l2 ? this.stack[l2 - 1] : 0, f2 = this.bufferBase + this.buffer.length - c3;
    if (s5 < r2.minRepeatTerm || t3 & 131072) {
      let u3 = r2.stateFlag(
        this.state,
        1
        /* StateFlag.Skipped */
      ) ? this.pos : this.reducePos;
      this.storeNode(s5, h4, u3, f2 + 4, true);
    }
    if (t3 & 262144)
      this.state = this.stack[l2];
    else {
      let u3 = this.stack[l2 - 3];
      this.state = r2.getGoto(u3, s5, true);
    }
    for (; this.stack.length > l2; )
      this.stack.pop();
    this.reduceContext(s5, h4);
  }
  // Shift a value into the buffer
  /**
  @internal
  */
  storeNode(t3, e3, i3, s5 = 4, r2 = false) {
    if (t3 == 0 && (!this.stack.length || this.stack[this.stack.length - 1] < this.buffer.length + this.bufferBase)) {
      let o2 = this, l2 = this.buffer.length;
      if (l2 == 0 && o2.parent && (l2 = o2.bufferBase - o2.parent.bufferBase, o2 = o2.parent), l2 > 0 && o2.buffer[l2 - 4] == 0 && o2.buffer[l2 - 1] > -1) {
        if (e3 == i3)
          return;
        if (o2.buffer[l2 - 2] >= e3) {
          o2.buffer[l2 - 2] = i3;
          return;
        }
      }
    }
    if (!r2 || this.pos == i3)
      this.buffer.push(t3, e3, i3, s5);
    else {
      let o2 = this.buffer.length;
      if (o2 > 0 && this.buffer[o2 - 4] != 0)
        for (; o2 > 0 && this.buffer[o2 - 2] > i3; )
          this.buffer[o2] = this.buffer[o2 - 4], this.buffer[o2 + 1] = this.buffer[o2 - 3], this.buffer[o2 + 2] = this.buffer[o2 - 2], this.buffer[o2 + 3] = this.buffer[o2 - 1], o2 -= 4, s5 > 4 && (s5 -= 4);
      this.buffer[o2] = t3, this.buffer[o2 + 1] = e3, this.buffer[o2 + 2] = i3, this.buffer[o2 + 3] = s5;
    }
  }
  // Apply a shift action
  /**
  @internal
  */
  shift(t3, e3, i3, s5) {
    if (t3 & 131072)
      this.pushState(t3 & 65535, this.pos);
    else if (t3 & 262144)
      this.pos = s5, this.shiftContext(e3, i3), e3 <= this.p.parser.maxNode && this.buffer.push(e3, i3, s5, 4);
    else {
      let r2 = t3, { parser: o2 } = this.p;
      (s5 > this.pos || e3 <= o2.maxNode) && (this.pos = s5, o2.stateFlag(
        r2,
        1
        /* StateFlag.Skipped */
      ) || (this.reducePos = s5)), this.pushState(r2, i3), this.shiftContext(e3, i3), e3 <= o2.maxNode && this.buffer.push(e3, i3, s5, 4);
    }
  }
  // Apply an action
  /**
  @internal
  */
  apply(t3, e3, i3, s5) {
    t3 & 65536 ? this.reduce(t3) : this.shift(t3, e3, i3, s5);
  }
  // Add a prebuilt (reused) node into the buffer.
  /**
  @internal
  */
  useNode(t3, e3) {
    let i3 = this.p.reused.length - 1;
    (i3 < 0 || this.p.reused[i3] != t3) && (this.p.reused.push(t3), i3++);
    let s5 = this.pos;
    this.reducePos = this.pos = s5 + t3.length, this.pushState(e3, s5), this.buffer.push(
      i3,
      s5,
      this.reducePos,
      -1
      /* size == -1 means this is a reused value */
    ), this.curContext && this.updateContext(this.curContext.tracker.reuse(this.curContext.context, t3, this, this.p.stream.reset(this.pos - t3.length)));
  }
  // Split the stack. Due to the buffer sharing and the fact
  // that `this.stack` tends to stay quite shallow, this isn't very
  // expensive.
  /**
  @internal
  */
  split() {
    let t3 = this, e3 = t3.buffer.length;
    for (; e3 > 0 && t3.buffer[e3 - 2] > t3.reducePos; )
      e3 -= 4;
    let i3 = t3.buffer.slice(e3), s5 = t3.bufferBase + e3;
    for (; t3 && s5 == t3.bufferBase; )
      t3 = t3.parent;
    return new As(this.p, this.stack.slice(), this.state, this.reducePos, this.pos, this.score, i3, s5, this.curContext, this.lookAhead, t3);
  }
  // Try to recover from an error by 'deleting' (ignoring) one token.
  /**
  @internal
  */
  recoverByDelete(t3, e3) {
    let i3 = t3 <= this.p.parser.maxNode;
    i3 && this.storeNode(t3, this.pos, e3, 4), this.storeNode(0, this.pos, e3, i3 ? 8 : 4), this.pos = this.reducePos = e3, this.score -= 190;
  }
  /**
  Check if the given term would be able to be shifted (optionally
  after some reductions) on this stack. This can be useful for
  external tokenizers that want to make sure they only provide a
  given token when it applies.
  */
  canShift(t3) {
    for (let e3 = new Sg(this); ; ) {
      let i3 = this.p.parser.stateSlot(
        e3.state,
        4
        /* ParseState.DefaultReduce */
      ) || this.p.parser.hasAction(e3.state, t3);
      if (i3 == 0)
        return false;
      if (!(i3 & 65536))
        return true;
      e3.reduce(i3);
    }
  }
  // Apply up to Recover.MaxNext recovery actions that conceptually
  // inserts some missing token or rule.
  /**
  @internal
  */
  recoverByInsert(t3) {
    if (this.stack.length >= 300)
      return [];
    let e3 = this.p.parser.nextStates(this.state);
    if (e3.length > 8 || this.stack.length >= 120) {
      let s5 = [];
      for (let r2 = 0, o2; r2 < e3.length; r2 += 2)
        (o2 = e3[r2 + 1]) != this.state && this.p.parser.hasAction(o2, t3) && s5.push(e3[r2], o2);
      if (this.stack.length < 120)
        for (let r2 = 0; s5.length < 8 && r2 < e3.length; r2 += 2) {
          let o2 = e3[r2 + 1];
          s5.some((l2, h4) => h4 & 1 && l2 == o2) || s5.push(e3[r2], o2);
        }
      e3 = s5;
    }
    let i3 = [];
    for (let s5 = 0; s5 < e3.length && i3.length < 4; s5 += 2) {
      let r2 = e3[s5 + 1];
      if (r2 == this.state)
        continue;
      let o2 = this.split();
      o2.pushState(r2, this.pos), o2.storeNode(0, o2.pos, o2.pos, 4, true), o2.shiftContext(e3[s5], this.pos), o2.reducePos = this.pos, o2.score -= 200, i3.push(o2);
    }
    return i3;
  }
  // Force a reduce, if possible. Return false if that can't
  // be done.
  /**
  @internal
  */
  forceReduce() {
    let { parser: t3 } = this.p, e3 = t3.stateSlot(
      this.state,
      5
      /* ParseState.ForcedReduce */
    );
    if (!(e3 & 65536))
      return false;
    if (!t3.validAction(this.state, e3)) {
      let i3 = e3 >> 19, s5 = e3 & 65535, r2 = this.stack.length - i3 * 3;
      if (r2 < 0 || t3.getGoto(this.stack[r2], s5, false) < 0) {
        let o2 = this.findForcedReduction();
        if (o2 == null)
          return false;
        e3 = o2;
      }
      this.storeNode(0, this.pos, this.pos, 4, true), this.score -= 100;
    }
    return this.reducePos = this.pos, this.reduce(e3), true;
  }
  /**
  Try to scan through the automaton to find some kind of reduction
  that can be applied. Used when the regular ForcedReduce field
  isn't a valid action. @internal
  */
  findForcedReduction() {
    let { parser: t3 } = this.p, e3 = [], i3 = (s5, r2) => {
      if (!e3.includes(s5))
        return e3.push(s5), t3.allActions(s5, (o2) => {
          if (!(o2 & 393216))
            if (o2 & 65536) {
              let l2 = (o2 >> 19) - r2;
              if (l2 > 1) {
                let h4 = o2 & 65535, a4 = this.stack.length - l2 * 3;
                if (a4 >= 0 && t3.getGoto(this.stack[a4], h4, false) >= 0)
                  return l2 << 19 | 65536 | h4;
              }
            } else {
              let l2 = i3(o2, r2 + 1);
              if (l2 != null)
                return l2;
            }
        });
    };
    return i3(this.state, 0);
  }
  /**
  @internal
  */
  forceAll() {
    for (; !this.p.parser.stateFlag(
      this.state,
      2
      /* StateFlag.Accepting */
    ); )
      if (!this.forceReduce()) {
        this.storeNode(0, this.pos, this.pos, 4, true);
        break;
      }
    return this;
  }
  /**
  Check whether this state has no further actions (assumed to be a direct descendant of the
  top state, since any other states must be able to continue
  somehow). @internal
  */
  get deadEnd() {
    if (this.stack.length != 3)
      return false;
    let { parser: t3 } = this.p;
    return t3.data[t3.stateSlot(
      this.state,
      1
      /* ParseState.Actions */
    )] == 65535 && !t3.stateSlot(
      this.state,
      4
      /* ParseState.DefaultReduce */
    );
  }
  /**
  Restart the stack (put it back in its start state). Only safe
  when this.stack.length == 3 (state is directly below the top
  state). @internal
  */
  restart() {
    this.storeNode(0, this.pos, this.pos, 4, true), this.state = this.stack[0], this.stack.length = 0;
  }
  /**
  @internal
  */
  sameState(t3) {
    if (this.state != t3.state || this.stack.length != t3.stack.length)
      return false;
    for (let e3 = 0; e3 < this.stack.length; e3 += 3)
      if (this.stack[e3] != t3.stack[e3])
        return false;
    return true;
  }
  /**
  Get the parser used by this stack.
  */
  get parser() {
    return this.p.parser;
  }
  /**
  Test whether a given dialect (by numeric ID, as exported from
  the terms file) is enabled.
  */
  dialectEnabled(t3) {
    return this.p.parser.dialect.flags[t3];
  }
  shiftContext(t3, e3) {
    this.curContext && this.updateContext(this.curContext.tracker.shift(this.curContext.context, t3, this, this.p.stream.reset(e3)));
  }
  reduceContext(t3, e3) {
    this.curContext && this.updateContext(this.curContext.tracker.reduce(this.curContext.context, t3, this, this.p.stream.reset(e3)));
  }
  /**
  @internal
  */
  emitContext() {
    let t3 = this.buffer.length - 1;
    (t3 < 0 || this.buffer[t3] != -3) && this.buffer.push(this.curContext.hash, this.pos, this.pos, -3);
  }
  /**
  @internal
  */
  emitLookAhead() {
    let t3 = this.buffer.length - 1;
    (t3 < 0 || this.buffer[t3] != -4) && this.buffer.push(this.lookAhead, this.pos, this.pos, -4);
  }
  updateContext(t3) {
    if (t3 != this.curContext.context) {
      let e3 = new _o$1(this.curContext.tracker, t3);
      e3.hash != this.curContext.hash && this.emitContext(), this.curContext = e3;
    }
  }
  /**
  @internal
  */
  setLookAhead(t3) {
    t3 > this.lookAhead && (this.emitLookAhead(), this.lookAhead = t3);
  }
  /**
  @internal
  */
  close() {
    this.curContext && this.curContext.tracker.strict && this.emitContext(), this.lookAhead > 0 && this.emitLookAhead();
  }
}
let _o$1 = class _o2 {
  constructor(t3, e3) {
    this.tracker = t3, this.context = e3, this.hash = t3.strict ? t3.hash(e3) : 0;
  }
};
class Sg {
  constructor(t3) {
    this.start = t3, this.state = t3.state, this.stack = t3.stack, this.base = this.stack.length;
  }
  reduce(t3) {
    let e3 = t3 & 65535, i3 = t3 >> 19;
    i3 == 0 ? (this.stack == this.start.stack && (this.stack = this.stack.slice()), this.stack.push(this.state, 0, 0), this.base += 3) : this.base -= (i3 - 1) * 3;
    let s5 = this.start.p.parser.getGoto(this.stack[this.base - 3], e3, true);
    this.state = s5;
  }
}
class Os {
  constructor(t3, e3, i3) {
    this.stack = t3, this.pos = e3, this.index = i3, this.buffer = t3.buffer, this.index == 0 && this.maybeNext();
  }
  static create(t3, e3 = t3.bufferBase + t3.buffer.length) {
    return new Os(t3, e3, e3 - t3.bufferBase);
  }
  maybeNext() {
    let t3 = this.stack.parent;
    t3 != null && (this.index = this.stack.bufferBase - t3.bufferBase, this.stack = t3, this.buffer = t3.buffer);
  }
  get id() {
    return this.buffer[this.index - 4];
  }
  get start() {
    return this.buffer[this.index - 3];
  }
  get end() {
    return this.buffer[this.index - 2];
  }
  get size() {
    return this.buffer[this.index - 1];
  }
  next() {
    this.index -= 4, this.pos -= 4, this.index == 0 && this.maybeNext();
  }
  fork() {
    return new Os(this.stack, this.pos, this.index);
  }
}
function Qi(n2, t3 = Uint16Array) {
  if (typeof n2 != "string")
    return n2;
  let e3 = null;
  for (let i3 = 0, s5 = 0; i3 < n2.length; ) {
    let r2 = 0;
    for (; ; ) {
      let o2 = n2.charCodeAt(i3++), l2 = false;
      if (o2 == 126) {
        r2 = 65535;
        break;
      }
      o2 >= 92 && o2--, o2 >= 34 && o2--;
      let h4 = o2 - 32;
      if (h4 >= 46 && (h4 -= 46, l2 = true), r2 += h4, l2)
        break;
      r2 *= 46;
    }
    e3 ? e3[s5++] = r2 : e3 = new t3(r2);
  }
  return e3;
}
class ls {
  constructor() {
    this.start = -1, this.value = -1, this.end = -1, this.extended = -1, this.lookAhead = 0, this.mask = 0, this.context = 0;
  }
}
const $o$1 = new ls();
class Cg {
  /**
  @internal
  */
  constructor(t3, e3) {
    this.input = t3, this.ranges = e3, this.chunk = "", this.chunkOff = 0, this.chunk2 = "", this.chunk2Pos = 0, this.next = -1, this.token = $o$1, this.rangeIndex = 0, this.pos = this.chunkPos = e3[0].from, this.range = e3[0], this.end = e3[e3.length - 1].to, this.readNext();
  }
  /**
  @internal
  */
  resolveOffset(t3, e3) {
    let i3 = this.range, s5 = this.rangeIndex, r2 = this.pos + t3;
    for (; r2 < i3.from; ) {
      if (!s5)
        return null;
      let o2 = this.ranges[--s5];
      r2 -= i3.from - o2.to, i3 = o2;
    }
    for (; e3 < 0 ? r2 > i3.to : r2 >= i3.to; ) {
      if (s5 == this.ranges.length - 1)
        return null;
      let o2 = this.ranges[++s5];
      r2 += o2.from - i3.to, i3 = o2;
    }
    return r2;
  }
  /**
  @internal
  */
  clipPos(t3) {
    if (t3 >= this.range.from && t3 < this.range.to)
      return t3;
    for (let e3 of this.ranges)
      if (e3.to > t3)
        return Math.max(t3, e3.from);
    return this.end;
  }
  /**
  Look at a code unit near the stream position. `.peek(0)` equals
  `.next`, `.peek(-1)` gives you the previous character, and so
  on.
  
  Note that looking around during tokenizing creates dependencies
  on potentially far-away content, which may reduce the
  effectiveness incremental parsing—when looking forward—or even
  cause invalid reparses when looking backward more than 25 code
  units, since the library does not track lookbehind.
  */
  peek(t3) {
    let e3 = this.chunkOff + t3, i3, s5;
    if (e3 >= 0 && e3 < this.chunk.length)
      i3 = this.pos + t3, s5 = this.chunk.charCodeAt(e3);
    else {
      let r2 = this.resolveOffset(t3, 1);
      if (r2 == null)
        return -1;
      if (i3 = r2, i3 >= this.chunk2Pos && i3 < this.chunk2Pos + this.chunk2.length)
        s5 = this.chunk2.charCodeAt(i3 - this.chunk2Pos);
      else {
        let o2 = this.rangeIndex, l2 = this.range;
        for (; l2.to <= i3; )
          l2 = this.ranges[++o2];
        this.chunk2 = this.input.chunk(this.chunk2Pos = i3), i3 + this.chunk2.length > l2.to && (this.chunk2 = this.chunk2.slice(0, l2.to - i3)), s5 = this.chunk2.charCodeAt(0);
      }
    }
    return i3 >= this.token.lookAhead && (this.token.lookAhead = i3 + 1), s5;
  }
  /**
  Accept a token. By default, the end of the token is set to the
  current stream position, but you can pass an offset (relative to
  the stream position) to change that.
  */
  acceptToken(t3, e3 = 0) {
    let i3 = e3 ? this.resolveOffset(e3, -1) : this.pos;
    if (i3 == null || i3 < this.token.start)
      throw new RangeError("Token end out of bounds");
    this.token.value = t3, this.token.end = i3;
  }
  getChunk() {
    if (this.pos >= this.chunk2Pos && this.pos < this.chunk2Pos + this.chunk2.length) {
      let { chunk: t3, chunkPos: e3 } = this;
      this.chunk = this.chunk2, this.chunkPos = this.chunk2Pos, this.chunk2 = t3, this.chunk2Pos = e3, this.chunkOff = this.pos - this.chunkPos;
    } else {
      this.chunk2 = this.chunk, this.chunk2Pos = this.chunkPos;
      let t3 = this.input.chunk(this.pos), e3 = this.pos + t3.length;
      this.chunk = e3 > this.range.to ? t3.slice(0, this.range.to - this.pos) : t3, this.chunkPos = this.pos, this.chunkOff = 0;
    }
  }
  readNext() {
    return this.chunkOff >= this.chunk.length && (this.getChunk(), this.chunkOff == this.chunk.length) ? this.next = -1 : this.next = this.chunk.charCodeAt(this.chunkOff);
  }
  /**
  Move the stream forward N (defaults to 1) code units. Returns
  the new value of [`next`](#lr.InputStream.next).
  */
  advance(t3 = 1) {
    for (this.chunkOff += t3; this.pos + t3 >= this.range.to; ) {
      if (this.rangeIndex == this.ranges.length - 1)
        return this.setDone();
      t3 -= this.range.to - this.pos, this.range = this.ranges[++this.rangeIndex], this.pos = this.range.from;
    }
    return this.pos += t3, this.pos >= this.token.lookAhead && (this.token.lookAhead = this.pos + 1), this.readNext();
  }
  setDone() {
    return this.pos = this.chunkPos = this.end, this.range = this.ranges[this.rangeIndex = this.ranges.length - 1], this.chunk = "", this.next = -1;
  }
  /**
  @internal
  */
  reset(t3, e3) {
    if (e3 ? (this.token = e3, e3.start = t3, e3.lookAhead = t3 + 1, e3.value = e3.extended = -1) : this.token = $o$1, this.pos != t3) {
      if (this.pos = t3, t3 == this.end)
        return this.setDone(), this;
      for (; t3 < this.range.from; )
        this.range = this.ranges[--this.rangeIndex];
      for (; t3 >= this.range.to; )
        this.range = this.ranges[++this.rangeIndex];
      t3 >= this.chunkPos && t3 < this.chunkPos + this.chunk.length ? this.chunkOff = t3 - this.chunkPos : (this.chunk = "", this.chunkOff = 0), this.readNext();
    }
    return this;
  }
  /**
  @internal
  */
  read(t3, e3) {
    if (t3 >= this.chunkPos && e3 <= this.chunkPos + this.chunk.length)
      return this.chunk.slice(t3 - this.chunkPos, e3 - this.chunkPos);
    if (t3 >= this.chunk2Pos && e3 <= this.chunk2Pos + this.chunk2.length)
      return this.chunk2.slice(t3 - this.chunk2Pos, e3 - this.chunk2Pos);
    if (t3 >= this.range.from && e3 <= this.range.to)
      return this.input.read(t3, e3);
    let i3 = "";
    for (let s5 of this.ranges) {
      if (s5.from >= e3)
        break;
      s5.to > t3 && (i3 += this.input.read(Math.max(s5.from, t3), Math.min(s5.to, e3)));
    }
    return i3;
  }
}
let Ge$3 = class Ge2 {
  constructor(t3, e3) {
    this.data = t3, this.id = e3;
  }
  token(t3, e3) {
    let { parser: i3 } = e3.p;
    Ag(this.data, t3, e3, this.id, i3.data, i3.tokenPrecTable);
  }
};
Ge$3.prototype.contextual = Ge$3.prototype.fallback = Ge$3.prototype.extend = false;
Ge$3.prototype.fallback = Ge$3.prototype.extend = false;
function Ag(n2, t3, e3, i3, s5, r2) {
  let o2 = 0, l2 = 1 << i3, { dialect: h4 } = e3.p.parser;
  t:
    for (; l2 & n2[o2]; ) {
      let a4 = n2[o2 + 1];
      for (let d4 = o2 + 3; d4 < a4; d4 += 2)
        if ((n2[d4 + 1] & l2) > 0) {
          let p2 = n2[d4];
          if (h4.allows(p2) && (t3.token.value == -1 || t3.token.value == p2 || Og(p2, t3.token.value, s5, r2))) {
            t3.acceptToken(p2);
            break;
          }
        }
      let c3 = t3.next, f2 = 0, u3 = n2[o2 + 2];
      if (t3.next < 0 && u3 > f2 && n2[a4 + u3 * 3 - 3] == 65535) {
        o2 = n2[a4 + u3 * 3 - 1];
        continue t;
      }
      for (; f2 < u3; ) {
        let d4 = f2 + u3 >> 1, p2 = a4 + d4 + (d4 << 1), m4 = n2[p2], g2 = n2[p2 + 1] || 65536;
        if (c3 < m4)
          u3 = d4;
        else if (c3 >= g2)
          f2 = d4 + 1;
        else {
          o2 = n2[p2 + 2], t3.advance();
          continue t;
        }
      }
      break;
    }
}
function Fo(n2, t3, e3) {
  for (let i3 = t3, s5; (s5 = n2[i3]) != 65535; i3++)
    if (s5 == e3)
      return i3 - t3;
  return -1;
}
function Og(n2, t3, e3, i3) {
  let s5 = Fo(e3, i3, t3);
  return s5 < 0 || Fo(e3, i3, n2) < s5;
}
const kt = typeof process < "u" && define_process_env_default$1 && /\bparse\b/.test(define_process_env_default$1.LOG);
let en = null;
function zo(n2, t3, e3) {
  let i3 = n2.cursor(st$1.IncludeAnonymous);
  for (i3.moveTo(t3); ; )
    if (!(e3 < 0 ? i3.childBefore(t3) : i3.childAfter(t3)))
      for (; ; ) {
        if ((e3 < 0 ? i3.to < t3 : i3.from > t3) && !i3.type.isError)
          return e3 < 0 ? Math.max(0, Math.min(
            i3.to - 1,
            t3 - 25
            /* Safety.Margin */
          )) : Math.min(n2.length, Math.max(
            i3.from + 1,
            t3 + 25
            /* Safety.Margin */
          ));
        if (e3 < 0 ? i3.prevSibling() : i3.nextSibling())
          break;
        if (!i3.parent())
          return e3 < 0 ? 0 : n2.length;
      }
}
class Mg {
  constructor(t3, e3) {
    this.fragments = t3, this.nodeSet = e3, this.i = 0, this.fragment = null, this.safeFrom = -1, this.safeTo = -1, this.trees = [], this.start = [], this.index = [], this.nextFragment();
  }
  nextFragment() {
    let t3 = this.fragment = this.i == this.fragments.length ? null : this.fragments[this.i++];
    if (t3) {
      for (this.safeFrom = t3.openStart ? zo(t3.tree, t3.from + t3.offset, 1) - t3.offset : t3.from, this.safeTo = t3.openEnd ? zo(t3.tree, t3.to + t3.offset, -1) - t3.offset : t3.to; this.trees.length; )
        this.trees.pop(), this.start.pop(), this.index.pop();
      this.trees.push(t3.tree), this.start.push(-t3.offset), this.index.push(0), this.nextStart = this.safeFrom;
    } else
      this.nextStart = 1e9;
  }
  // `pos` must be >= any previously given `pos` for this cursor
  nodeAt(t3) {
    if (t3 < this.nextStart)
      return null;
    for (; this.fragment && this.safeTo <= t3; )
      this.nextFragment();
    if (!this.fragment)
      return null;
    for (; ; ) {
      let e3 = this.trees.length - 1;
      if (e3 < 0)
        return this.nextFragment(), null;
      let i3 = this.trees[e3], s5 = this.index[e3];
      if (s5 == i3.children.length) {
        this.trees.pop(), this.start.pop(), this.index.pop();
        continue;
      }
      let r2 = i3.children[s5], o2 = this.start[e3] + i3.positions[s5];
      if (o2 > t3)
        return this.nextStart = o2, null;
      if (r2 instanceof X$1) {
        if (o2 == t3) {
          if (o2 < this.safeFrom)
            return null;
          let l2 = o2 + r2.length;
          if (l2 <= this.safeTo) {
            let h4 = r2.prop(R$5.lookAhead);
            if (!h4 || l2 + h4 < this.fragment.to)
              return r2;
          }
        }
        this.index[e3]++, o2 + r2.length >= Math.max(this.safeFrom, t3) && (this.trees.push(r2), this.start.push(o2), this.index.push(0));
      } else
        this.index[e3]++, this.nextStart = o2 + r2.length;
    }
  }
}
class Tg {
  constructor(t3, e3) {
    this.stream = e3, this.tokens = [], this.mainToken = null, this.actions = [], this.tokens = t3.tokenizers.map((i3) => new ls());
  }
  getActions(t3) {
    let e3 = 0, i3 = null, { parser: s5 } = t3.p, { tokenizers: r2 } = s5, o2 = s5.stateSlot(
      t3.state,
      3
      /* ParseState.TokenizerMask */
    ), l2 = t3.curContext ? t3.curContext.hash : 0, h4 = 0;
    for (let a4 = 0; a4 < r2.length; a4++) {
      if (!(1 << a4 & o2))
        continue;
      let c3 = r2[a4], f2 = this.tokens[a4];
      if (!(i3 && !c3.fallback) && ((c3.contextual || f2.start != t3.pos || f2.mask != o2 || f2.context != l2) && (this.updateCachedToken(f2, c3, t3), f2.mask = o2, f2.context = l2), f2.lookAhead > f2.end + 25 && (h4 = Math.max(f2.lookAhead, h4)), f2.value != 0)) {
        let u3 = e3;
        if (f2.extended > -1 && (e3 = this.addActions(t3, f2.extended, f2.end, e3)), e3 = this.addActions(t3, f2.value, f2.end, e3), !c3.extend && (i3 = f2, e3 > u3))
          break;
      }
    }
    for (; this.actions.length > e3; )
      this.actions.pop();
    return h4 && t3.setLookAhead(h4), !i3 && t3.pos == this.stream.end && (i3 = new ls(), i3.value = t3.p.parser.eofTerm, i3.start = i3.end = t3.pos, e3 = this.addActions(t3, i3.value, i3.end, e3)), this.mainToken = i3, this.actions;
  }
  getMainToken(t3) {
    if (this.mainToken)
      return this.mainToken;
    let e3 = new ls(), { pos: i3, p: s5 } = t3;
    return e3.start = i3, e3.end = Math.min(i3 + 1, s5.stream.end), e3.value = i3 == s5.stream.end ? s5.parser.eofTerm : 0, e3;
  }
  updateCachedToken(t3, e3, i3) {
    let s5 = this.stream.clipPos(i3.pos);
    if (e3.token(this.stream.reset(s5, t3), i3), t3.value > -1) {
      let { parser: r2 } = i3.p;
      for (let o2 = 0; o2 < r2.specialized.length; o2++)
        if (r2.specialized[o2] == t3.value) {
          let l2 = r2.specializers[o2](this.stream.read(t3.start, t3.end), i3);
          if (l2 >= 0 && i3.p.parser.dialect.allows(l2 >> 1)) {
            l2 & 1 ? t3.extended = l2 >> 1 : t3.value = l2 >> 1;
            break;
          }
        }
    } else
      t3.value = 0, t3.end = this.stream.clipPos(s5 + 1);
  }
  putAction(t3, e3, i3, s5) {
    for (let r2 = 0; r2 < s5; r2 += 3)
      if (this.actions[r2] == t3)
        return s5;
    return this.actions[s5++] = t3, this.actions[s5++] = e3, this.actions[s5++] = i3, s5;
  }
  addActions(t3, e3, i3, s5) {
    let { state: r2 } = t3, { parser: o2 } = t3.p, { data: l2 } = o2;
    for (let h4 = 0; h4 < 2; h4++)
      for (let a4 = o2.stateSlot(
        r2,
        h4 ? 2 : 1
        /* ParseState.Actions */
      ); ; a4 += 3) {
        if (l2[a4] == 65535)
          if (l2[a4 + 1] == 1)
            a4 = Xt(l2, a4 + 2);
          else {
            s5 == 0 && l2[a4 + 1] == 2 && (s5 = this.putAction(Xt(l2, a4 + 2), e3, i3, s5));
            break;
          }
        l2[a4] == e3 && (s5 = this.putAction(Xt(l2, a4 + 1), e3, i3, s5));
      }
    return s5;
  }
}
class Dg {
  constructor(t3, e3, i3, s5) {
    this.parser = t3, this.input = e3, this.ranges = s5, this.recovering = 0, this.nextStackID = 9812, this.minStackPos = 0, this.reused = [], this.stoppedAt = null, this.lastBigReductionStart = -1, this.lastBigReductionSize = 0, this.bigReductionCount = 0, this.stream = new Cg(e3, s5), this.tokens = new Tg(t3, this.stream), this.topTerm = t3.top[1];
    let { from: r2 } = s5[0];
    this.stacks = [As.start(this, t3.top[0], r2)], this.fragments = i3.length && this.stream.end - r2 > t3.bufferLength * 4 ? new Mg(i3, t3.nodeSet) : null;
  }
  get parsedPos() {
    return this.minStackPos;
  }
  // Move the parser forward. This will process all parse stacks at
  // `this.pos` and try to advance them to a further position. If no
  // stack for such a position is found, it'll start error-recovery.
  //
  // When the parse is finished, this will return a syntax tree. When
  // not, it returns `null`.
  advance() {
    let t3 = this.stacks, e3 = this.minStackPos, i3 = this.stacks = [], s5, r2;
    if (this.bigReductionCount > 300 && t3.length == 1) {
      let [o2] = t3;
      for (; o2.forceReduce() && o2.stack.length && o2.stack[o2.stack.length - 2] >= this.lastBigReductionStart; )
        ;
      this.bigReductionCount = this.lastBigReductionSize = 0;
    }
    for (let o2 = 0; o2 < t3.length; o2++) {
      let l2 = t3[o2];
      for (; ; ) {
        if (this.tokens.mainToken = null, l2.pos > e3)
          i3.push(l2);
        else {
          if (this.advanceStack(l2, i3, t3))
            continue;
          {
            s5 || (s5 = [], r2 = []), s5.push(l2);
            let h4 = this.tokens.getMainToken(l2);
            r2.push(h4.value, h4.end);
          }
        }
        break;
      }
    }
    if (!i3.length) {
      let o2 = s5 && Bg(s5);
      if (o2)
        return kt && console.log("Finish with " + this.stackID(o2)), this.stackToTree(o2);
      if (this.parser.strict)
        throw kt && s5 && console.log("Stuck with token " + (this.tokens.mainToken ? this.parser.getName(this.tokens.mainToken.value) : "none")), new SyntaxError("No parse at " + e3);
      this.recovering || (this.recovering = 5);
    }
    if (this.recovering && s5) {
      let o2 = this.stoppedAt != null && s5[0].pos > this.stoppedAt ? s5[0] : this.runRecovery(s5, r2, i3);
      if (o2)
        return kt && console.log("Force-finish " + this.stackID(o2)), this.stackToTree(o2.forceAll());
    }
    if (this.recovering) {
      let o2 = this.recovering == 1 ? 1 : this.recovering * 3;
      if (i3.length > o2)
        for (i3.sort((l2, h4) => h4.score - l2.score); i3.length > o2; )
          i3.pop();
      i3.some((l2) => l2.reducePos > e3) && this.recovering--;
    } else if (i3.length > 1) {
      t:
        for (let o2 = 0; o2 < i3.length - 1; o2++) {
          let l2 = i3[o2];
          for (let h4 = o2 + 1; h4 < i3.length; h4++) {
            let a4 = i3[h4];
            if (l2.sameState(a4) || l2.buffer.length > 500 && a4.buffer.length > 500)
              if ((l2.score - a4.score || l2.buffer.length - a4.buffer.length) > 0)
                i3.splice(h4--, 1);
              else {
                i3.splice(o2--, 1);
                continue t;
              }
          }
        }
      i3.length > 12 && i3.splice(
        12,
        i3.length - 12
        /* Rec.MaxStackCount */
      );
    }
    this.minStackPos = i3[0].pos;
    for (let o2 = 1; o2 < i3.length; o2++)
      i3[o2].pos < this.minStackPos && (this.minStackPos = i3[o2].pos);
    return null;
  }
  stopAt(t3) {
    if (this.stoppedAt != null && this.stoppedAt < t3)
      throw new RangeError("Can't move stoppedAt forward");
    this.stoppedAt = t3;
  }
  // Returns an updated version of the given stack, or null if the
  // stack can't advance normally. When `split` and `stacks` are
  // given, stacks split off by ambiguous operations will be pushed to
  // `split`, or added to `stacks` if they move `pos` forward.
  advanceStack(t3, e3, i3) {
    let s5 = t3.pos, { parser: r2 } = this, o2 = kt ? this.stackID(t3) + " -> " : "";
    if (this.stoppedAt != null && s5 > this.stoppedAt)
      return t3.forceReduce() ? t3 : null;
    if (this.fragments) {
      let a4 = t3.curContext && t3.curContext.tracker.strict, c3 = a4 ? t3.curContext.hash : 0;
      for (let f2 = this.fragments.nodeAt(s5); f2; ) {
        let u3 = this.parser.nodeSet.types[f2.type.id] == f2.type ? r2.getGoto(t3.state, f2.type.id) : -1;
        if (u3 > -1 && f2.length && (!a4 || (f2.prop(R$5.contextHash) || 0) == c3))
          return t3.useNode(f2, u3), kt && console.log(o2 + this.stackID(t3) + ` (via reuse of ${r2.getName(f2.type.id)})`), true;
        if (!(f2 instanceof X$1) || f2.children.length == 0 || f2.positions[0] > 0)
          break;
        let d4 = f2.children[0];
        if (d4 instanceof X$1 && f2.positions[0] == 0)
          f2 = d4;
        else
          break;
      }
    }
    let l2 = r2.stateSlot(
      t3.state,
      4
      /* ParseState.DefaultReduce */
    );
    if (l2 > 0)
      return t3.reduce(l2), kt && console.log(o2 + this.stackID(t3) + ` (via always-reduce ${r2.getName(
        l2 & 65535
        /* Action.ValueMask */
      )})`), true;
    if (t3.stack.length >= 8400)
      for (; t3.stack.length > 6e3 && t3.forceReduce(); )
        ;
    let h4 = this.tokens.getActions(t3);
    for (let a4 = 0; a4 < h4.length; ) {
      let c3 = h4[a4++], f2 = h4[a4++], u3 = h4[a4++], d4 = a4 == h4.length || !i3, p2 = d4 ? t3 : t3.split(), m4 = this.tokens.mainToken;
      if (p2.apply(c3, f2, m4 ? m4.start : p2.pos, u3), kt && console.log(o2 + this.stackID(p2) + ` (via ${c3 & 65536 ? `reduce of ${r2.getName(
        c3 & 65535
        /* Action.ValueMask */
      )}` : "shift"} for ${r2.getName(f2)} @ ${s5}${p2 == t3 ? "" : ", split"})`), d4)
        return true;
      p2.pos > s5 ? e3.push(p2) : i3.push(p2);
    }
    return false;
  }
  // Advance a given stack forward as far as it will go. Returns the
  // (possibly updated) stack if it got stuck, or null if it moved
  // forward and was given to `pushStackDedup`.
  advanceFully(t3, e3) {
    let i3 = t3.pos;
    for (; ; ) {
      if (!this.advanceStack(t3, null, null))
        return false;
      if (t3.pos > i3)
        return Wo(t3, e3), true;
    }
  }
  runRecovery(t3, e3, i3) {
    let s5 = null, r2 = false;
    for (let o2 = 0; o2 < t3.length; o2++) {
      let l2 = t3[o2], h4 = e3[o2 << 1], a4 = e3[(o2 << 1) + 1], c3 = kt ? this.stackID(l2) + " -> " : "";
      if (l2.deadEnd && (r2 || (r2 = true, l2.restart(), kt && console.log(c3 + this.stackID(l2) + " (restarted)"), this.advanceFully(l2, i3))))
        continue;
      let f2 = l2.split(), u3 = c3;
      for (let d4 = 0; f2.forceReduce() && d4 < 10 && (kt && console.log(u3 + this.stackID(f2) + " (via force-reduce)"), !this.advanceFully(f2, i3)); d4++)
        kt && (u3 = this.stackID(f2) + " -> ");
      for (let d4 of l2.recoverByInsert(h4))
        kt && console.log(c3 + this.stackID(d4) + " (via recover-insert)"), this.advanceFully(d4, i3);
      this.stream.end > l2.pos ? (a4 == l2.pos && (a4++, h4 = 0), l2.recoverByDelete(h4, a4), kt && console.log(c3 + this.stackID(l2) + ` (via recover-delete ${this.parser.getName(h4)})`), Wo(l2, i3)) : (!s5 || s5.score < l2.score) && (s5 = l2);
    }
    return s5;
  }
  // Convert the stack's buffer to a syntax tree.
  stackToTree(t3) {
    return t3.close(), X$1.build({
      buffer: Os.create(t3),
      nodeSet: this.parser.nodeSet,
      topID: this.topTerm,
      maxBufferLength: this.parser.bufferLength,
      reused: this.reused,
      start: this.ranges[0].from,
      length: t3.pos - this.ranges[0].from,
      minRepeatType: this.parser.minRepeatTerm
    });
  }
  stackID(t3) {
    let e3 = (en || (en = /* @__PURE__ */ new WeakMap())).get(t3);
    return e3 || en.set(t3, e3 = String.fromCodePoint(this.nextStackID++)), e3 + t3;
  }
}
function Wo(n2, t3) {
  for (let e3 = 0; e3 < t3.length; e3++) {
    let i3 = t3[e3];
    if (i3.pos == n2.pos && i3.sameState(n2)) {
      t3[e3].score < n2.score && (t3[e3] = n2);
      return;
    }
  }
  t3.push(n2);
}
class Pg {
  constructor(t3, e3, i3) {
    this.source = t3, this.flags = e3, this.disabled = i3;
  }
  allows(t3) {
    return !this.disabled || this.disabled[t3] == 0;
  }
}
class Ms extends kh {
  /**
  @internal
  */
  constructor(t3) {
    if (super(), this.wrappers = [], t3.version != 14)
      throw new RangeError(`Parser version (${t3.version}) doesn't match runtime version (14)`);
    let e3 = t3.nodeNames.split(" ");
    this.minRepeatTerm = e3.length;
    for (let l2 = 0; l2 < t3.repeatNodeCount; l2++)
      e3.push("");
    let i3 = Object.keys(t3.topRules).map((l2) => t3.topRules[l2][1]), s5 = [];
    for (let l2 = 0; l2 < e3.length; l2++)
      s5.push([]);
    function r2(l2, h4, a4) {
      s5[l2].push([h4, h4.deserialize(String(a4))]);
    }
    if (t3.nodeProps)
      for (let l2 of t3.nodeProps) {
        let h4 = l2[0];
        typeof h4 == "string" && (h4 = R$5[h4]);
        for (let a4 = 1; a4 < l2.length; ) {
          let c3 = l2[a4++];
          if (c3 >= 0)
            r2(c3, h4, l2[a4++]);
          else {
            let f2 = l2[a4 + -c3];
            for (let u3 = -c3; u3 > 0; u3--)
              r2(l2[a4++], h4, f2);
            a4++;
          }
        }
      }
    this.nodeSet = new rr(e3.map((l2, h4) => bt$1.define({
      name: h4 >= this.minRepeatTerm ? void 0 : l2,
      id: h4,
      props: s5[h4],
      top: i3.indexOf(h4) > -1,
      error: h4 == 0,
      skipped: t3.skippedNodes && t3.skippedNodes.indexOf(h4) > -1
    }))), t3.propSources && (this.nodeSet = this.nodeSet.extend(...t3.propSources)), this.strict = false, this.bufferLength = mh;
    let o2 = Qi(t3.tokenData);
    this.context = t3.context, this.specializerSpecs = t3.specialized || [], this.specialized = new Uint16Array(this.specializerSpecs.length);
    for (let l2 = 0; l2 < this.specializerSpecs.length; l2++)
      this.specialized[l2] = this.specializerSpecs[l2].term;
    this.specializers = this.specializerSpecs.map(jo), this.states = Qi(t3.states, Uint32Array), this.data = Qi(t3.stateData), this.goto = Qi(t3.goto), this.maxTerm = t3.maxTerm, this.tokenizers = t3.tokenizers.map((l2) => typeof l2 == "number" ? new Ge$3(o2, l2) : l2), this.topRules = t3.topRules, this.dialects = t3.dialects || {}, this.dynamicPrecedences = t3.dynamicPrecedences || null, this.tokenPrecTable = t3.tokenPrec, this.termNames = t3.termNames || null, this.maxNode = this.nodeSet.types.length - 1, this.dialect = this.parseDialect(), this.top = this.topRules[Object.keys(this.topRules)[0]];
  }
  createParse(t3, e3, i3) {
    let s5 = new Dg(this, t3, e3, i3);
    for (let r2 of this.wrappers)
      s5 = r2(s5, t3, e3, i3);
    return s5;
  }
  /**
  Get a goto table entry @internal
  */
  getGoto(t3, e3, i3 = false) {
    let s5 = this.goto;
    if (e3 >= s5[0])
      return -1;
    for (let r2 = s5[e3 + 1]; ; ) {
      let o2 = s5[r2++], l2 = o2 & 1, h4 = s5[r2++];
      if (l2 && i3)
        return h4;
      for (let a4 = r2 + (o2 >> 1); r2 < a4; r2++)
        if (s5[r2] == t3)
          return h4;
      if (l2)
        return -1;
    }
  }
  /**
  Check if this state has an action for a given terminal @internal
  */
  hasAction(t3, e3) {
    let i3 = this.data;
    for (let s5 = 0; s5 < 2; s5++)
      for (let r2 = this.stateSlot(
        t3,
        s5 ? 2 : 1
        /* ParseState.Actions */
      ), o2; ; r2 += 3) {
        if ((o2 = i3[r2]) == 65535)
          if (i3[r2 + 1] == 1)
            o2 = i3[r2 = Xt(i3, r2 + 2)];
          else {
            if (i3[r2 + 1] == 2)
              return Xt(i3, r2 + 2);
            break;
          }
        if (o2 == e3 || o2 == 0)
          return Xt(i3, r2 + 1);
      }
    return 0;
  }
  /**
  @internal
  */
  stateSlot(t3, e3) {
    return this.states[t3 * 6 + e3];
  }
  /**
  @internal
  */
  stateFlag(t3, e3) {
    return (this.stateSlot(
      t3,
      0
      /* ParseState.Flags */
    ) & e3) > 0;
  }
  /**
  @internal
  */
  validAction(t3, e3) {
    return !!this.allActions(t3, (i3) => i3 == e3 ? true : null);
  }
  /**
  @internal
  */
  allActions(t3, e3) {
    let i3 = this.stateSlot(
      t3,
      4
      /* ParseState.DefaultReduce */
    ), s5 = i3 ? e3(i3) : void 0;
    for (let r2 = this.stateSlot(
      t3,
      1
      /* ParseState.Actions */
    ); s5 == null; r2 += 3) {
      if (this.data[r2] == 65535)
        if (this.data[r2 + 1] == 1)
          r2 = Xt(this.data, r2 + 2);
        else
          break;
      s5 = e3(Xt(this.data, r2 + 1));
    }
    return s5;
  }
  /**
  Get the states that can follow this one through shift actions or
  goto jumps. @internal
  */
  nextStates(t3) {
    let e3 = [];
    for (let i3 = this.stateSlot(
      t3,
      1
      /* ParseState.Actions */
    ); ; i3 += 3) {
      if (this.data[i3] == 65535)
        if (this.data[i3 + 1] == 1)
          i3 = Xt(this.data, i3 + 2);
        else
          break;
      if (!(this.data[i3 + 2] & 1)) {
        let s5 = this.data[i3 + 1];
        e3.some((r2, o2) => o2 & 1 && r2 == s5) || e3.push(this.data[i3], s5);
      }
    }
    return e3;
  }
  /**
  Configure the parser. Returns a new parser instance that has the
  given settings modified. Settings not provided in `config` are
  kept from the original parser.
  */
  configure(t3) {
    let e3 = Object.assign(Object.create(Ms.prototype), this);
    if (t3.props && (e3.nodeSet = this.nodeSet.extend(...t3.props)), t3.top) {
      let i3 = this.topRules[t3.top];
      if (!i3)
        throw new RangeError(`Invalid top rule name ${t3.top}`);
      e3.top = i3;
    }
    return t3.tokenizers && (e3.tokenizers = this.tokenizers.map((i3) => {
      let s5 = t3.tokenizers.find((r2) => r2.from == i3);
      return s5 ? s5.to : i3;
    })), t3.specializers && (e3.specializers = this.specializers.slice(), e3.specializerSpecs = this.specializerSpecs.map((i3, s5) => {
      let r2 = t3.specializers.find((l2) => l2.from == i3.external);
      if (!r2)
        return i3;
      let o2 = Object.assign(Object.assign({}, i3), { external: r2.to });
      return e3.specializers[s5] = jo(o2), o2;
    })), t3.contextTracker && (e3.context = t3.contextTracker), t3.dialect && (e3.dialect = this.parseDialect(t3.dialect)), t3.strict != null && (e3.strict = t3.strict), t3.wrap && (e3.wrappers = e3.wrappers.concat(t3.wrap)), t3.bufferLength != null && (e3.bufferLength = t3.bufferLength), e3;
  }
  /**
  Tells you whether any [parse wrappers](#lr.ParserConfig.wrap)
  are registered for this parser.
  */
  hasWrappers() {
    return this.wrappers.length > 0;
  }
  /**
  Returns the name associated with a given term. This will only
  work for all terms when the parser was generated with the
  `--names` option. By default, only the names of tagged terms are
  stored.
  */
  getName(t3) {
    return this.termNames ? this.termNames[t3] : String(t3 <= this.maxNode && this.nodeSet.types[t3].name || t3);
  }
  /**
  The eof term id is always allocated directly after the node
  types. @internal
  */
  get eofTerm() {
    return this.maxNode + 1;
  }
  /**
  The type of top node produced by the parser.
  */
  get topNode() {
    return this.nodeSet.types[this.top[1]];
  }
  /**
  @internal
  */
  dynamicPrecedence(t3) {
    let e3 = this.dynamicPrecedences;
    return e3 == null ? 0 : e3[t3] || 0;
  }
  /**
  @internal
  */
  parseDialect(t3) {
    let e3 = Object.keys(this.dialects), i3 = e3.map(() => false);
    if (t3)
      for (let r2 of t3.split(" ")) {
        let o2 = e3.indexOf(r2);
        o2 >= 0 && (i3[o2] = true);
      }
    let s5 = null;
    for (let r2 = 0; r2 < e3.length; r2++)
      if (!i3[r2])
        for (let o2 = this.dialects[e3[r2]], l2; (l2 = this.data[o2++]) != 65535; )
          (s5 || (s5 = new Uint8Array(this.maxTerm + 1)))[l2] = 1;
    return new Pg(t3, i3, s5);
  }
  /**
  Used by the output of the parser generator. Not available to
  user code. @hide
  */
  static deserialize(t3) {
    return new Ms(t3);
  }
}
function Xt(n2, t3) {
  return n2[t3] | n2[t3 + 1] << 16;
}
function Bg(n2) {
  let t3 = null;
  for (let e3 of n2) {
    let i3 = e3.p.stoppedAt;
    (e3.pos == e3.p.stream.end || i3 != null && e3.pos > i3) && e3.p.parser.stateFlag(
      e3.state,
      2
      /* StateFlag.Accepting */
    ) && (!t3 || t3.score < e3.score) && (t3 = e3);
  }
  return t3;
}
function jo(n2) {
  if (n2.external) {
    let t3 = n2.extend ? 1 : 0;
    return (e3, i3) => n2.external(e3, i3) << 1 | t3;
  }
  return n2.get;
}
const Rg = xh({
  String: w$4.string,
  Number: w$4.number,
  "True False": w$4.bool,
  PropertyName: w$4.propertyName,
  Null: w$4.null,
  ",": w$4.separator,
  "[ ]": w$4.squareBracket,
  "{ }": w$4.brace
}), Lg = Ms.deserialize({
  version: 14,
  states: "$bOVQPOOOOQO'#Cb'#CbOnQPO'#CeOvQPO'#CjOOQO'#Cp'#CpQOQPOOOOQO'#Cg'#CgO}QPO'#CfO!SQPO'#CrOOQO,59P,59PO![QPO,59PO!aQPO'#CuOOQO,59U,59UO!iQPO,59UOVQPO,59QOqQPO'#CkO!nQPO,59^OOQO1G.k1G.kOVQPO'#ClO!vQPO,59aOOQO1G.p1G.pOOQO1G.l1G.lOOQO,59V,59VOOQO-E6i-E6iOOQO,59W,59WOOQO-E6j-E6j",
  stateData: "#O~OcOS~OQSORSOSSOTSOWQO]ROePO~OVXOeUO~O[[O~PVOg^O~Oh_OVfX~OVaO~OhbO[iX~O[dO~Oh_OVfa~OhbO[ia~O",
  goto: "!kjPPPPPPkPPkqwPPk{!RPPP!XP!ePP!hXSOR^bQWQRf_TVQ_Q`WRg`QcZRicQTOQZRQe^RhbRYQR]R",
  nodeNames: "⚠ JsonText True False Null Number String } { Object Property PropertyName ] [ Array",
  maxTerm: 25,
  nodeProps: [
    ["openedBy", 7, "{", 12, "["],
    ["closedBy", 8, "}", 13, "]"]
  ],
  propSources: [Rg],
  skippedNodes: [0],
  repeatNodeCount: 2,
  tokenData: "(|~RaXY!WYZ!W]^!Wpq!Wrs!]|}$u}!O$z!Q!R%T!R![&c![!]&t!}#O&y#P#Q'O#Y#Z'T#b#c'r#h#i(Z#o#p(r#q#r(w~!]Oc~~!`Wpq!]qr!]rs!xs#O!]#O#P!}#P;'S!];'S;=`$o<%lO!]~!}Oe~~#QXrs!]!P!Q!]#O#P!]#U#V!]#Y#Z!]#b#c!]#f#g!]#h#i!]#i#j#m~#pR!Q![#y!c!i#y#T#Z#y~#|R!Q![$V!c!i$V#T#Z$V~$YR!Q![$c!c!i$c#T#Z$c~$fR!Q![!]!c!i!]#T#Z!]~$rP;=`<%l!]~$zOh~~$}Q!Q!R%T!R![&c~%YRT~!O!P%c!g!h%w#X#Y%w~%fP!Q![%i~%nRT~!Q![%i!g!h%w#X#Y%w~%zR{|&T}!O&T!Q![&Z~&WP!Q![&Z~&`PT~!Q![&Z~&hST~!O!P%c!Q![&c!g!h%w#X#Y%w~&yOg~~'OO]~~'TO[~~'WP#T#U'Z~'^P#`#a'a~'dP#g#h'g~'jP#X#Y'm~'rOR~~'uP#i#j'x~'{P#`#a(O~(RP#`#a(U~(ZOS~~(^P#f#g(a~(dP#i#j(g~(jP#X#Y(m~(rOQ~~(wOW~~(|OV~",
  tokenizers: [0],
  topRules: { JsonText: [0, 1] },
  tokenPrec: 0
}), Eg = /* @__PURE__ */ ks.define({
  name: "json",
  parser: /* @__PURE__ */ Lg.configure({
    props: [
      /* @__PURE__ */ Ah.add({
        Object: /* @__PURE__ */ Mo$1({ except: /^\s*\}/ }),
        Array: /* @__PURE__ */ Mo$1({ except: /^\s*\]/ })
      }),
      /* @__PURE__ */ Mh.add({
        "Object Array": Gd
      })
    ]
  }),
  languageData: {
    closeBrackets: { brackets: ["[", "{", '"'] },
    indentOnInput: /^\s*[\}\]]$/
  }
});
function Ng() {
  return new Nd(Eg);
}
function Ut$1() {
  var n2 = arguments[0];
  typeof n2 == "string" && (n2 = document.createElement(n2));
  var t3 = 1, e3 = arguments[1];
  if (e3 && typeof e3 == "object" && e3.nodeType == null && !Array.isArray(e3)) {
    for (var i3 in e3)
      if (Object.prototype.hasOwnProperty.call(e3, i3)) {
        var s5 = e3[i3];
        typeof s5 == "string" ? n2.setAttribute(i3, s5) : s5 != null && (n2[i3] = s5);
      }
    t3++;
  }
  for (; t3 < arguments.length; t3++)
    aa$1(n2, arguments[t3]);
  return n2;
}
function aa$1(n2, t3) {
  if (typeof t3 == "string")
    n2.appendChild(document.createTextNode(t3));
  else if (t3 != null)
    if (t3.nodeType != null)
      n2.appendChild(t3);
    else if (Array.isArray(t3))
      for (var e3 = 0; e3 < t3.length; e3++)
        aa$1(n2, t3[e3]);
    else
      throw new RangeError("Unsupported child node: " + t3);
}
class Ig {
  constructor(t3, e3, i3) {
    this.from = t3, this.to = e3, this.diagnostic = i3;
  }
}
let Pe$2 = class Pe2 {
  constructor(t3, e3, i3) {
    this.diagnostics = t3, this.panel = e3, this.selected = i3;
  }
  static init(t3, e3, i3) {
    let s5 = t3, r2 = i3.facet(ua$1).markerFilter;
    r2 && (s5 = r2(s5));
    let o2 = N$5.set(s5.map((l2) => l2.from == l2.to || l2.from == l2.to - 1 && i3.doc.lineAt(l2.from).to == l2.from ? N$5.widget({
      widget: new Kg(l2),
      diagnostic: l2
    }).range(l2.from) : N$5.mark({
      attributes: { class: "cm-lintRange cm-lintRange-" + l2.severity + (l2.markClass ? " " + l2.markClass : "") },
      diagnostic: l2
    }).range(l2.from, l2.to)), true);
    return new Pe2(o2, e3, Ze$1(o2));
  }
};
function Ze$1(n2, t3 = null, e3 = 0) {
  let i3 = null;
  return n2.between(e3, 1e9, (s5, r2, { spec: o2 }) => {
    if (!(t3 && o2.diagnostic != t3))
      return i3 = new Ig(s5, r2, o2.diagnostic), false;
  }), i3;
}
function Vg(n2, t3) {
  let e3 = n2.startState.doc.lineAt(t3.pos);
  return !!(n2.effects.some((i3) => i3.is(ca$1)) || n2.changes.touchesRange(e3.from, e3.to));
}
function Hg(n2, t3) {
  return n2.field(St, false) ? t3 : t3.concat(z$4.appendConfig.of(Ug));
}
const ca$1 = /* @__PURE__ */ z$4.define(), mr$1 = /* @__PURE__ */ z$4.define(), fa$1 = /* @__PURE__ */ z$4.define(), St = /* @__PURE__ */ Ht$1.define({
  create() {
    return new Pe$2(N$5.none, null, null);
  },
  update(n2, t3) {
    if (t3.docChanged) {
      let e3 = n2.diagnostics.map(t3.changes), i3 = null;
      if (n2.selected) {
        let s5 = t3.changes.mapPos(n2.selected.from, 1);
        i3 = Ze$1(e3, n2.selected.diagnostic, s5) || Ze$1(e3, null, s5);
      }
      n2 = new Pe$2(e3, n2.panel, i3);
    }
    for (let e3 of t3.effects)
      e3.is(ca$1) ? n2 = Pe$2.init(e3.value, n2.panel, t3.state) : e3.is(mr$1) ? n2 = new Pe$2(n2.diagnostics, e3.value ? Vs.open : null, n2.selected) : e3.is(fa$1) && (n2 = new Pe$2(n2.diagnostics, n2.panel, e3.value));
    return n2;
  },
  provide: (n2) => [
    En$1.from(n2, (t3) => t3.panel),
    T$4.decorations.from(n2, (t3) => t3.diagnostics)
  ]
}), _g = /* @__PURE__ */ N$5.mark({ class: "cm-lintRange cm-lintRange-active" });
function $g(n2, t3, e3) {
  let { diagnostics: i3 } = n2.state.field(St), s5 = [], r2 = 2e8, o2 = 0;
  i3.between(t3 - (e3 < 0 ? 1 : 0), t3 + (e3 > 0 ? 1 : 0), (h4, a4, { spec: c3 }) => {
    t3 >= h4 && t3 <= a4 && (h4 == a4 || (t3 > h4 || e3 > 0) && (t3 < a4 || e3 < 0)) && (s5.push(c3.diagnostic), r2 = Math.min(h4, r2), o2 = Math.max(a4, o2));
  });
  let l2 = n2.state.facet(ua$1).tooltipFilter;
  return l2 && (s5 = l2(s5)), s5.length ? {
    pos: r2,
    end: o2,
    above: n2.state.doc.lineAt(r2).to < o2,
    create() {
      return { dom: Fg(n2, s5) };
    }
  } : null;
}
function Fg(n2, t3) {
  return Ut$1("ul", { class: "cm-tooltip-lint" }, t3.map((e3) => pa$1(n2, e3, false)));
}
const zg = (n2) => {
  let t3 = n2.state.field(St, false);
  (!t3 || !t3.panel) && n2.dispatch({ effects: Hg(n2.state, [mr$1.of(true)]) });
  let e3 = od(n2, Vs.open);
  return e3 && e3.dom.querySelector(".cm-panel-lint ul").focus(), true;
}, Ko = (n2) => {
  let t3 = n2.state.field(St, false);
  return !t3 || !t3.panel ? false : (n2.dispatch({ effects: mr$1.of(false) }), true);
}, Wg = (n2) => {
  let t3 = n2.state.field(St, false);
  if (!t3)
    return false;
  let e3 = n2.state.selection.main, i3 = t3.diagnostics.iter(e3.to + 1);
  return !i3.value && (i3 = t3.diagnostics.iter(0), !i3.value || i3.from == e3.from && i3.to == e3.to) ? false : (n2.dispatch({ selection: { anchor: i3.from, head: i3.to }, scrollIntoView: true }), true);
}, jg = [
  { key: "Mod-Shift-m", run: zg, preventDefault: true },
  { key: "F8", run: Wg }
], ua$1 = /* @__PURE__ */ O$2.define({
  combine(n2) {
    return Object.assign({ sources: n2.map((t3) => t3.source) }, Ds(n2.map((t3) => t3.config), {
      delay: 750,
      markerFilter: null,
      tooltipFilter: null,
      needsRefresh: null
    }, {
      needsRefresh: (t3, e3) => t3 ? e3 ? (i3) => t3(i3) || e3(i3) : t3 : e3
    }));
  }
});
function da$1(n2) {
  let t3 = [];
  if (n2)
    t:
      for (let { name: e3 } of n2) {
        for (let i3 = 0; i3 < e3.length; i3++) {
          let s5 = e3[i3];
          if (/[a-zA-Z]/.test(s5) && !t3.some((r2) => r2.toLowerCase() == s5.toLowerCase())) {
            t3.push(s5);
            continue t;
          }
        }
        t3.push("");
      }
  return t3;
}
function pa$1(n2, t3, e3) {
  var i3;
  let s5 = e3 ? da$1(t3.actions) : [];
  return Ut$1("li", { class: "cm-diagnostic cm-diagnostic-" + t3.severity }, Ut$1("span", { class: "cm-diagnosticText" }, t3.renderMessage ? t3.renderMessage() : t3.message), (i3 = t3.actions) === null || i3 === void 0 ? void 0 : i3.map((r2, o2) => {
    let l2 = false, h4 = (u3) => {
      if (u3.preventDefault(), l2)
        return;
      l2 = true;
      let d4 = Ze$1(n2.state.field(St).diagnostics, t3);
      d4 && r2.apply(n2, d4.from, d4.to);
    }, { name: a4 } = r2, c3 = s5[o2] ? a4.indexOf(s5[o2]) : -1, f2 = c3 < 0 ? a4 : [
      a4.slice(0, c3),
      Ut$1("u", a4.slice(c3, c3 + 1)),
      a4.slice(c3 + 1)
    ];
    return Ut$1("button", {
      type: "button",
      class: "cm-diagnosticAction",
      onclick: h4,
      onmousedown: h4,
      "aria-label": ` Action: ${a4}${c3 < 0 ? "" : ` (access key "${s5[o2]})"`}.`
    }, f2);
  }), t3.source && Ut$1("div", { class: "cm-diagnosticSource" }, t3.source));
}
class Kg extends Se$5 {
  constructor(t3) {
    super(), this.diagnostic = t3;
  }
  eq(t3) {
    return t3.diagnostic == this.diagnostic;
  }
  toDOM() {
    return Ut$1("span", { class: "cm-lintPoint cm-lintPoint-" + this.diagnostic.severity });
  }
}
class qo {
  constructor(t3, e3) {
    this.diagnostic = e3, this.id = "item_" + Math.floor(Math.random() * 4294967295).toString(16), this.dom = pa$1(t3, e3, true), this.dom.id = this.id, this.dom.setAttribute("role", "option");
  }
}
class Vs {
  constructor(t3) {
    this.view = t3, this.items = [];
    let e3 = (s5) => {
      if (s5.keyCode == 27)
        Ko(this.view), this.view.focus();
      else if (s5.keyCode == 38 || s5.keyCode == 33)
        this.moveSelection((this.selectedIndex - 1 + this.items.length) % this.items.length);
      else if (s5.keyCode == 40 || s5.keyCode == 34)
        this.moveSelection((this.selectedIndex + 1) % this.items.length);
      else if (s5.keyCode == 36)
        this.moveSelection(0);
      else if (s5.keyCode == 35)
        this.moveSelection(this.items.length - 1);
      else if (s5.keyCode == 13)
        this.view.focus();
      else if (s5.keyCode >= 65 && s5.keyCode <= 90 && this.selectedIndex >= 0) {
        let { diagnostic: r2 } = this.items[this.selectedIndex], o2 = da$1(r2.actions);
        for (let l2 = 0; l2 < o2.length; l2++)
          if (o2[l2].toUpperCase().charCodeAt(0) == s5.keyCode) {
            let h4 = Ze$1(this.view.state.field(St).diagnostics, r2);
            h4 && r2.actions[l2].apply(t3, h4.from, h4.to);
          }
      } else
        return;
      s5.preventDefault();
    }, i3 = (s5) => {
      for (let r2 = 0; r2 < this.items.length; r2++)
        this.items[r2].dom.contains(s5.target) && this.moveSelection(r2);
    };
    this.list = Ut$1("ul", {
      tabIndex: 0,
      role: "listbox",
      "aria-label": this.view.state.phrase("Diagnostics"),
      onkeydown: e3,
      onclick: i3
    }), this.dom = Ut$1("div", { class: "cm-panel-lint" }, this.list, Ut$1("button", {
      type: "button",
      name: "close",
      "aria-label": this.view.state.phrase("close"),
      onclick: () => Ko(this.view)
    }, "×")), this.update();
  }
  get selectedIndex() {
    let t3 = this.view.state.field(St).selected;
    if (!t3)
      return -1;
    for (let e3 = 0; e3 < this.items.length; e3++)
      if (this.items[e3].diagnostic == t3.diagnostic)
        return e3;
    return -1;
  }
  update() {
    let { diagnostics: t3, selected: e3 } = this.view.state.field(St), i3 = 0, s5 = false, r2 = null;
    for (t3.between(0, this.view.state.doc.length, (o2, l2, { spec: h4 }) => {
      let a4 = -1, c3;
      for (let f2 = i3; f2 < this.items.length; f2++)
        if (this.items[f2].diagnostic == h4.diagnostic) {
          a4 = f2;
          break;
        }
      a4 < 0 ? (c3 = new qo(this.view, h4.diagnostic), this.items.splice(i3, 0, c3), s5 = true) : (c3 = this.items[a4], a4 > i3 && (this.items.splice(i3, a4 - i3), s5 = true)), e3 && c3.diagnostic == e3.diagnostic ? c3.dom.hasAttribute("aria-selected") || (c3.dom.setAttribute("aria-selected", "true"), r2 = c3) : c3.dom.hasAttribute("aria-selected") && c3.dom.removeAttribute("aria-selected"), i3++;
    }); i3 < this.items.length && !(this.items.length == 1 && this.items[0].diagnostic.from < 0); )
      s5 = true, this.items.pop();
    this.items.length == 0 && (this.items.push(new qo(this.view, {
      from: -1,
      to: -1,
      severity: "info",
      message: this.view.state.phrase("No diagnostics")
    })), s5 = true), r2 ? (this.list.setAttribute("aria-activedescendant", r2.id), this.view.requestMeasure({
      key: this,
      read: () => ({ sel: r2.dom.getBoundingClientRect(), panel: this.list.getBoundingClientRect() }),
      write: ({ sel: o2, panel: l2 }) => {
        let h4 = l2.height / this.list.offsetHeight;
        o2.top < l2.top ? this.list.scrollTop -= (l2.top - o2.top) / h4 : o2.bottom > l2.bottom && (this.list.scrollTop += (o2.bottom - l2.bottom) / h4);
      }
    })) : this.selectedIndex < 0 && this.list.removeAttribute("aria-activedescendant"), s5 && this.sync();
  }
  sync() {
    let t3 = this.list.firstChild;
    function e3() {
      let i3 = t3;
      t3 = i3.nextSibling, i3.remove();
    }
    for (let i3 of this.items)
      if (i3.dom.parentNode == this.list) {
        for (; t3 != i3.dom; )
          e3();
        t3 = i3.dom.nextSibling;
      } else
        this.list.insertBefore(i3.dom, t3);
    for (; t3; )
      e3();
  }
  moveSelection(t3) {
    if (this.selectedIndex < 0)
      return;
    let e3 = this.view.state.field(St), i3 = Ze$1(e3.diagnostics, this.items[t3].diagnostic);
    i3 && this.view.dispatch({
      selection: { anchor: i3.from, head: i3.to },
      scrollIntoView: true,
      effects: fa$1.of(i3)
    });
  }
  static open(t3) {
    return new Vs(t3);
  }
}
function qg(n2, t3 = 'viewBox="0 0 40 40"') {
  return `url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" ${t3}>${encodeURIComponent(n2)}</svg>')`;
}
function Ji(n2) {
  return qg(`<path d="m0 2.5 l2 -1.5 l1 0 l2 1.5 l1 0" stroke="${n2}" fill="none" stroke-width=".7"/>`, 'width="6" height="3"');
}
const Gg = /* @__PURE__ */ T$4.baseTheme({
  ".cm-diagnostic": {
    padding: "3px 6px 3px 8px",
    marginLeft: "-1px",
    display: "block",
    whiteSpace: "pre-wrap"
  },
  ".cm-diagnostic-error": { borderLeft: "5px solid #d11" },
  ".cm-diagnostic-warning": { borderLeft: "5px solid orange" },
  ".cm-diagnostic-info": { borderLeft: "5px solid #999" },
  ".cm-diagnostic-hint": { borderLeft: "5px solid #66d" },
  ".cm-diagnosticAction": {
    font: "inherit",
    border: "none",
    padding: "2px 4px",
    backgroundColor: "#444",
    color: "white",
    borderRadius: "3px",
    marginLeft: "8px",
    cursor: "pointer"
  },
  ".cm-diagnosticSource": {
    fontSize: "70%",
    opacity: 0.7
  },
  ".cm-lintRange": {
    backgroundPosition: "left bottom",
    backgroundRepeat: "repeat-x",
    paddingBottom: "0.7px"
  },
  ".cm-lintRange-error": { backgroundImage: /* @__PURE__ */ Ji("#d11") },
  ".cm-lintRange-warning": { backgroundImage: /* @__PURE__ */ Ji("orange") },
  ".cm-lintRange-info": { backgroundImage: /* @__PURE__ */ Ji("#999") },
  ".cm-lintRange-hint": { backgroundImage: /* @__PURE__ */ Ji("#66d") },
  ".cm-lintRange-active": { backgroundColor: "#ffdd9980" },
  ".cm-tooltip-lint": {
    padding: 0,
    margin: 0
  },
  ".cm-lintPoint": {
    position: "relative",
    "&:after": {
      content: '""',
      position: "absolute",
      bottom: 0,
      left: "-2px",
      borderLeft: "3px solid transparent",
      borderRight: "3px solid transparent",
      borderBottom: "4px solid #d11"
    }
  },
  ".cm-lintPoint-warning": {
    "&:after": { borderBottomColor: "orange" }
  },
  ".cm-lintPoint-info": {
    "&:after": { borderBottomColor: "#999" }
  },
  ".cm-lintPoint-hint": {
    "&:after": { borderBottomColor: "#66d" }
  },
  ".cm-panel.cm-panel-lint": {
    position: "relative",
    "& ul": {
      maxHeight: "100px",
      overflowY: "auto",
      "& [aria-selected]": {
        backgroundColor: "#ddd",
        "& u": { textDecoration: "underline" }
      },
      "&:focus [aria-selected]": {
        background_fallback: "#bdf",
        backgroundColor: "Highlight",
        color_fallback: "white",
        color: "HighlightText"
      },
      "& u": { textDecoration: "none" },
      padding: 0,
      margin: 0
    },
    "& [name=close]": {
      position: "absolute",
      top: "0",
      right: "2px",
      background: "inherit",
      border: "none",
      font: "inherit",
      padding: 0,
      margin: 0
    }
  }
}), Ug = [
  St,
  /* @__PURE__ */ T$4.decorations.compute([St], (n2) => {
    let { selected: t3, panel: e3 } = n2.field(St);
    return !t3 || !e3 || t3.from == t3.to ? N$5.none : N$5.set([
      _g.range(t3.from, t3.to)
    ]);
  }),
  /* @__PURE__ */ nd($g, { hideOn: Vg }),
  Gg
], Yg = "#e5c07b", Go = "#e06c75", Qg = "#56b6c2", Jg = "#ffffff", hs = "#abb2bf", Kn$1 = "#7d8799", Xg = "#61afef", Zg = "#98c379", Uo = "#d19a66", tm = "#c678dd", em = "#21252b", Yo = "#2c313a", Qo = "#282c34", sn = "#353a42", im = "#3E4451", Jo = "#528bff", sm = /* @__PURE__ */ T$4.theme({
  "&": {
    color: hs,
    backgroundColor: Qo
  },
  ".cm-content": {
    caretColor: Jo
  },
  ".cm-cursor, .cm-dropCursor": { borderLeftColor: Jo },
  "&.cm-focused > .cm-scroller > .cm-selectionLayer .cm-selectionBackground, .cm-selectionBackground, .cm-content ::selection": { backgroundColor: im },
  ".cm-panels": { backgroundColor: em, color: hs },
  ".cm-panels.cm-panels-top": { borderBottom: "2px solid black" },
  ".cm-panels.cm-panels-bottom": { borderTop: "2px solid black" },
  ".cm-searchMatch": {
    backgroundColor: "#72a1ff59",
    outline: "1px solid #457dff"
  },
  ".cm-searchMatch.cm-searchMatch-selected": {
    backgroundColor: "#6199ff2f"
  },
  ".cm-activeLine": { backgroundColor: "#6699ff0b" },
  ".cm-selectionMatch": { backgroundColor: "#aafe661a" },
  "&.cm-focused .cm-matchingBracket, &.cm-focused .cm-nonmatchingBracket": {
    backgroundColor: "#bad0f847"
  },
  ".cm-gutters": {
    backgroundColor: Qo,
    color: Kn$1,
    border: "none"
  },
  ".cm-activeLineGutter": {
    backgroundColor: Yo
  },
  ".cm-foldPlaceholder": {
    backgroundColor: "transparent",
    border: "none",
    color: "#ddd"
  },
  ".cm-tooltip": {
    border: "none",
    backgroundColor: sn
  },
  ".cm-tooltip .cm-tooltip-arrow:before": {
    borderTopColor: "transparent",
    borderBottomColor: "transparent"
  },
  ".cm-tooltip .cm-tooltip-arrow:after": {
    borderTopColor: sn,
    borderBottomColor: sn
  },
  ".cm-tooltip-autocomplete": {
    "& > ul > li[aria-selected]": {
      backgroundColor: Yo,
      color: hs
    }
  }
}, { dark: true }), nm = /* @__PURE__ */ Pi.define([
  {
    tag: w$4.keyword,
    color: tm
  },
  {
    tag: [w$4.name, w$4.deleted, w$4.character, w$4.propertyName, w$4.macroName],
    color: Go
  },
  {
    tag: [/* @__PURE__ */ w$4.function(w$4.variableName), w$4.labelName],
    color: Xg
  },
  {
    tag: [w$4.color, /* @__PURE__ */ w$4.constant(w$4.name), /* @__PURE__ */ w$4.standard(w$4.name)],
    color: Uo
  },
  {
    tag: [/* @__PURE__ */ w$4.definition(w$4.name), w$4.separator],
    color: hs
  },
  {
    tag: [w$4.typeName, w$4.className, w$4.number, w$4.changed, w$4.annotation, w$4.modifier, w$4.self, w$4.namespace],
    color: Yg
  },
  {
    tag: [w$4.operator, w$4.operatorKeyword, w$4.url, w$4.escape, w$4.regexp, w$4.link, /* @__PURE__ */ w$4.special(w$4.string)],
    color: Qg
  },
  {
    tag: [w$4.meta, w$4.comment],
    color: Kn$1
  },
  {
    tag: w$4.strong,
    fontWeight: "bold"
  },
  {
    tag: w$4.emphasis,
    fontStyle: "italic"
  },
  {
    tag: w$4.strikethrough,
    textDecoration: "line-through"
  },
  {
    tag: w$4.link,
    color: Kn$1,
    textDecoration: "underline"
  },
  {
    tag: w$4.heading,
    fontWeight: "bold",
    color: Go
  },
  {
    tag: [w$4.atom, w$4.bool, /* @__PURE__ */ w$4.special(w$4.variableName)],
    color: Uo
  },
  {
    tag: [w$4.processingInstruction, w$4.string, w$4.inserted],
    color: Zg
  },
  {
    tag: w$4.invalid,
    color: Jg
  }
]), ga$1 = ref$1(false);
window.__hst_controls_dark || (window.__hst_controls_dark = []);
window.__hst_controls_dark.push(ga$1);
var Xo;
(Xo = window.__hst_controls_dark_ready) == null || Xo.call(window);
const rm = {
  name: "HstJson",
  inheritAttrs: false
}, om = /* @__PURE__ */ defineComponent$1({
  ...rm,
  props: {
    title: {},
    modelValue: {}
  },
  emits: {
    "update:modelValue": (n2) => true
  },
  setup(n2, { emit: t3 }) {
    const e3 = n2, i3 = t3;
    let s5;
    const r2 = ref$1(""), o2 = ref$1(false), l2 = ref$1(), h4 = {
      light: [T$4.baseTheme({}), Do$1(ap)],
      dark: [sm, Do$1(nm)]
    }, a4 = new Ai(), c3 = [
      gd(),
      Uu(),
      zu(),
      Ng(),
      mp(),
      Kd(),
      rp(),
      fh.of([
        ...vg,
        ...ep,
        ...jg
      ]),
      T$4.updateListener.of((f2) => {
        r2.value = f2.view.state.doc.toString();
      }),
      a4.of(h4.light)
    ];
    return onMounted$1(() => {
      s5 = new T$4({
        doc: JSON.stringify(e3.modelValue, null, 2),
        extensions: c3,
        parent: l2.value
      }), watchEffect$1(() => {
        s5.dispatch({
          effects: [
            a4.reconfigure(h4[ga$1.value ? "dark" : "light"])
          ]
        });
      });
    }), watch$1(() => e3.modelValue, () => {
      let f2;
      try {
        f2 = JSON.stringify(JSON.parse(r2.value)) === JSON.stringify(e3.modelValue);
      } catch {
        f2 = false;
      }
      f2 || s5.dispatch({ changes: [{ from: 0, to: s5.state.doc.length, insert: JSON.stringify(e3.modelValue, null, 2) }] });
    }, { deep: true }), watch$1(() => r2.value, () => {
      o2.value = false;
      try {
        i3("update:modelValue", JSON.parse(r2.value));
      } catch {
        o2.value = true;
      }
    }), (f2, u3) => (openBlock$1(), createBlock$1(Vt, {
      title: f2.title,
      class: normalizeClass$1(["histoire-json htw-cursor-text", f2.$attrs.class]),
      style: normalizeStyle$1(f2.$attrs.style)
    }, {
      actions: withCtx$1(() => [
        o2.value ? withDirectives$1((openBlock$1(), createBlock$1(unref$1(Icon), {
          key: 0,
          icon: "carbon:warning-alt",
          class: "htw-text-orange-500"
        }, null, 512)), [
          [unref$1(VTooltip), "JSON error"]
        ]) : createCommentVNode$1("", true),
        renderSlot$1(f2.$slots, "actions", {}, void 0, true)
      ]),
      default: withCtx$1(() => [
        createBaseVNode$1("div", mergeProps$1({
          ref_key: "editorElement",
          ref: l2,
          class: "__histoire-json-code htw-w-full htw-border htw-border-solid htw-border-black/25 dark:htw-border-white/25 focus-within:htw-border-primary-500 dark:focus-within:htw-border-primary-500 htw-rounded-sm htw-box-border htw-overflow-auto htw-resize-y htw-min-h-32 htw-h-48 htw-relative"
        }, { ...f2.$attrs, class: null, style: null }), null, 16)
      ]),
      _: 3
    }, 8, ["title", "class", "style"]));
  }
});
const lm = (n2, t3) => {
  const e3 = n2.__vccOpts || n2;
  for (const [i3, s5] of t3)
    e3[i3] = s5;
  return e3;
}, hm = /* @__PURE__ */ lm(om, [["__scopeId", "data-v-9f3f2832"]]), am = { class: "htw-flex htw-flex-row htw-gap-1" }, cm = ["value"], fm = {
  name: "HstColorSelect",
  inheritAttrs: false
}, um = /* @__PURE__ */ defineComponent$1({
  ...fm,
  props: {
    title: {},
    modelValue: {}
  },
  emits: {
    "update:modelValue": (n2) => true
  },
  setup(n2, { emit: t3 }) {
    const e3 = n2, i3 = t3, s5 = ref$1(null), r2 = computed$2({
      get: () => e3.modelValue,
      set: (a4) => {
        i3("update:modelValue", a4);
      }
    });
    function o2(a4, c3 = 15) {
      let f2 = false, u3;
      const d4 = () => {
        u3 == null ? f2 = false : (a4(...u3), u3 = null, setTimeout(d4, c3));
      };
      return (...p2) => {
        if (f2) {
          u3 = p2;
          return;
        }
        a4(...p2), f2 = true, setTimeout(d4, c3);
      };
    }
    const l2 = o2((a4) => {
      i3("update:modelValue", a4);
    });
    function h4(a4) {
      l2(a4);
    }
    return (a4, c3) => (openBlock$1(), createBlock$1(Vt, {
      title: a4.title,
      class: normalizeClass$1(["histoire-select htw-cursor-text htw-items-center", a4.$attrs.class]),
      style: normalizeStyle$1(a4.$attrs.style)
    }, {
      actions: withCtx$1(() => [
        renderSlot$1(a4.$slots, "actions")
      ]),
      default: withCtx$1(() => [
        createBaseVNode$1("div", am, [
          withDirectives$1(createBaseVNode$1("input", mergeProps$1({
            ref_key: "input",
            ref: s5
          }, { ...a4.$attrs, class: null, style: null }, {
            "onUpdate:modelValue": c3[0] || (c3[0] = (f2) => r2.value = f2),
            type: "text",
            class: "htw-text-inherit htw-bg-transparent htw-w-full htw-outline-none htw-px-2 htw-py-1 -htw-my-1 htw-border htw-border-solid htw-border-black/25 dark:htw-border-white/25 focus:htw-border-primary-500 dark:focus:htw-border-primary-500 htw-rounded-sm"
          }), null, 16), [
            [vModelText$1, r2.value]
          ]),
          createBaseVNode$1("input", {
            type: "color",
            value: a4.modelValue,
            onInput: c3[1] || (c3[1] = (f2) => h4(f2.target.value))
          }, null, 40, cm)
        ])
      ]),
      _: 3
    }, 8, ["title", "class", "style"]));
  }
}), dm = Zo, pm = Da, gm = Ea$1, mm = Ha$1, wm = Fa$1, ym = Wa$1, bm = Ga, km = Qa, xm = nc, vm = dc, Sm = xc, Cm = Tc, Am = Le$1, Om = Lc, Mm = hm, Tm = um, Nm = {
  HstButton: dm,
  HstButtonGroup: pm,
  HstCheckbox: gm,
  HstCheckboxList: mm,
  HstText: wm,
  HstNumber: ym,
  HstSlider: bm,
  HstTextarea: km,
  HstSelect: xm,
  HstRadio: Om,
  HstJson: Mm,
  HstColorShades: vm,
  HstTokenList: Sm,
  HstTokenGrid: Cm,
  HstCopyIcon: Am,
  HstColorSelect: Tm
};
const config = markRaw$1({
  "theme": {
    "accentColor": {
      "inherit": "inherit",
      "current": "currentColor",
      "transparent": "transparent",
      "black": "#000",
      "white": "#fff",
      "slate": {
        "50": "#f8fafc",
        "100": "#f1f5f9",
        "200": "#e2e8f0",
        "300": "#cbd5e1",
        "400": "#94a3b8",
        "500": "#64748b",
        "600": "#475569",
        "700": "#334155",
        "800": "#1e293b",
        "900": "#0f172a",
        "950": "#020617"
      },
      "gray": {
        "50": "#f9fafb",
        "100": "#f3f4f6",
        "200": "#e5e7eb",
        "300": "#d1d5db",
        "400": "#9ca3af",
        "500": "#6b7280",
        "600": "#4b5563",
        "700": "#374151",
        "800": "#1f2937",
        "900": "#111827",
        "950": "#030712"
      },
      "zinc": {
        "50": "#fafafa",
        "100": "#f4f4f5",
        "200": "#e4e4e7",
        "300": "#d4d4d8",
        "400": "#a1a1aa",
        "500": "#71717a",
        "600": "#52525b",
        "700": "#3f3f46",
        "800": "#27272a",
        "900": "#18181b",
        "950": "#09090b"
      },
      "neutral": {
        "50": "#fafafa",
        "100": "#f5f5f5",
        "200": "#e5e5e5",
        "300": "#d4d4d4",
        "400": "#a3a3a3",
        "500": "#737373",
        "600": "#525252",
        "700": "#404040",
        "800": "#262626",
        "900": "#171717",
        "950": "#0a0a0a"
      },
      "stone": {
        "50": "#fafaf9",
        "100": "#f5f5f4",
        "200": "#e7e5e4",
        "300": "#d6d3d1",
        "400": "#a8a29e",
        "500": "#78716c",
        "600": "#57534e",
        "700": "#44403c",
        "800": "#292524",
        "900": "#1c1917",
        "950": "#0c0a09"
      },
      "red": {
        "50": "#fef2f2",
        "100": "#fee2e2",
        "200": "#fecaca",
        "300": "#fca5a5",
        "400": "#f87171",
        "500": "#ef4444",
        "600": "#dc2626",
        "700": "#b91c1c",
        "800": "#991b1b",
        "900": "#7f1d1d",
        "950": "#450a0a"
      },
      "orange": {
        "50": "#fff7ed",
        "100": "#ffedd5",
        "200": "#fed7aa",
        "300": "#fdba74",
        "400": "#fb923c",
        "500": "#f97316",
        "600": "#ea580c",
        "700": "#c2410c",
        "800": "#9a3412",
        "900": "#7c2d12",
        "950": "#431407"
      },
      "amber": {
        "50": "#fffbeb",
        "100": "#fef3c7",
        "200": "#fde68a",
        "300": "#fcd34d",
        "400": "#fbbf24",
        "500": "#f59e0b",
        "600": "#d97706",
        "700": "#b45309",
        "800": "#92400e",
        "900": "#78350f",
        "950": "#451a03"
      },
      "yellow": {
        "50": "#fefce8",
        "100": "#fef9c3",
        "200": "#fef08a",
        "300": "#fde047",
        "400": "#facc15",
        "500": "#eab308",
        "600": "#ca8a04",
        "700": "#a16207",
        "800": "#854d0e",
        "900": "#713f12",
        "950": "#422006"
      },
      "lime": {
        "50": "#f7fee7",
        "100": "#ecfccb",
        "200": "#d9f99d",
        "300": "#bef264",
        "400": "#a3e635",
        "500": "#84cc16",
        "600": "#65a30d",
        "700": "#4d7c0f",
        "800": "#3f6212",
        "900": "#365314",
        "950": "#1a2e05"
      },
      "green": {
        "50": "#f0fdf4",
        "100": "#dcfce7",
        "200": "#bbf7d0",
        "300": "#86efac",
        "400": "#4ade80",
        "500": "#22c55e",
        "600": "#16a34a",
        "700": "#15803d",
        "800": "#166534",
        "900": "#14532d",
        "950": "#052e16"
      },
      "emerald": {
        "50": "#ecfdf5",
        "100": "#d1fae5",
        "200": "#a7f3d0",
        "300": "#6ee7b7",
        "400": "#34d399",
        "500": "#10b981",
        "600": "#059669",
        "700": "#047857",
        "800": "#065f46",
        "900": "#064e3b",
        "950": "#022c22"
      },
      "teal": {
        "50": "#f0fdfa",
        "100": "#ccfbf1",
        "200": "#99f6e4",
        "300": "#5eead4",
        "400": "#2dd4bf",
        "500": "#14b8a6",
        "600": "#0d9488",
        "700": "#0f766e",
        "800": "#115e59",
        "900": "#134e4a",
        "950": "#042f2e"
      },
      "cyan": {
        "50": "#ecfeff",
        "100": "#cffafe",
        "200": "#a5f3fc",
        "300": "#67e8f9",
        "400": "#22d3ee",
        "500": "#06b6d4",
        "600": "#0891b2",
        "700": "#0e7490",
        "800": "#155e75",
        "900": "#164e63",
        "950": "#083344"
      },
      "sky": {
        "50": "#f0f9ff",
        "100": "#e0f2fe",
        "200": "#bae6fd",
        "300": "#7dd3fc",
        "400": "#38bdf8",
        "500": "#0ea5e9",
        "600": "#0284c7",
        "700": "#0369a1",
        "800": "#075985",
        "900": "#0c4a6e",
        "950": "#082f49"
      },
      "blue": {
        "50": "#eff6ff",
        "100": "#dbeafe",
        "200": "#bfdbfe",
        "300": "#93c5fd",
        "400": "#60a5fa",
        "500": "#3b82f6",
        "600": "#2563eb",
        "700": "#1d4ed8",
        "800": "#1e40af",
        "900": "#1e3a8a",
        "950": "#172554"
      },
      "indigo": {
        "50": "#eef2ff",
        "100": "#e0e7ff",
        "200": "#c7d2fe",
        "300": "#a5b4fc",
        "400": "#818cf8",
        "500": "#6366f1",
        "600": "#4f46e5",
        "700": "#4338ca",
        "800": "#3730a3",
        "900": "#312e81",
        "950": "#1e1b4b"
      },
      "violet": {
        "50": "#f5f3ff",
        "100": "#ede9fe",
        "200": "#ddd6fe",
        "300": "#c4b5fd",
        "400": "#a78bfa",
        "500": "#8b5cf6",
        "600": "#7c3aed",
        "700": "#6d28d9",
        "800": "#5b21b6",
        "900": "#4c1d95",
        "950": "#2e1065"
      },
      "purple": {
        "50": "#faf5ff",
        "100": "#f3e8ff",
        "200": "#e9d5ff",
        "300": "#d8b4fe",
        "400": "#c084fc",
        "500": "#a855f7",
        "600": "#9333ea",
        "700": "#7e22ce",
        "800": "#6b21a8",
        "900": "#581c87",
        "950": "#3b0764"
      },
      "fuchsia": {
        "50": "#fdf4ff",
        "100": "#fae8ff",
        "200": "#f5d0fe",
        "300": "#f0abfc",
        "400": "#e879f9",
        "500": "#d946ef",
        "600": "#c026d3",
        "700": "#a21caf",
        "800": "#86198f",
        "900": "#701a75",
        "950": "#4a044e"
      },
      "pink": {
        "50": "#fdf2f8",
        "100": "#fce7f3",
        "200": "#fbcfe8",
        "300": "#f9a8d4",
        "400": "#f472b6",
        "500": "#ec4899",
        "600": "#db2777",
        "700": "#be185d",
        "800": "#9d174d",
        "900": "#831843",
        "950": "#500724"
      },
      "rose": {
        "50": "#fff1f2",
        "100": "#ffe4e6",
        "200": "#fecdd3",
        "300": "#fda4af",
        "400": "#fb7185",
        "500": "#f43f5e",
        "600": "#e11d48",
        "700": "#be123c",
        "800": "#9f1239",
        "900": "#881337",
        "950": "#4c0519"
      },
      "auto": "auto"
    },
    "animation": {
      "none": "none",
      "spin": "spin 1s linear infinite",
      "ping": "ping 1s cubic-bezier(0, 0, 0.2, 1) infinite",
      "pulse": "pulse 2s cubic-bezier(0.4, 0, 0.6, 1) infinite",
      "bounce": "bounce 1s infinite"
    },
    "aria": {
      "busy": 'busy="true"',
      "checked": 'checked="true"',
      "disabled": 'disabled="true"',
      "expanded": 'expanded="true"',
      "hidden": 'hidden="true"',
      "pressed": 'pressed="true"',
      "readonly": 'readonly="true"',
      "required": 'required="true"',
      "selected": 'selected="true"'
    },
    "aspectRatio": {
      "auto": "auto",
      "square": "1 / 1",
      "video": "16 / 9"
    },
    "backdropBlur": {
      "0": "0",
      "none": "0",
      "sm": "4px",
      "DEFAULT": "8px",
      "md": "12px",
      "lg": "16px",
      "xl": "24px",
      "2xl": "40px",
      "3xl": "64px"
    },
    "backdropBrightness": {
      "0": "0",
      "50": ".5",
      "75": ".75",
      "90": ".9",
      "95": ".95",
      "100": "1",
      "105": "1.05",
      "110": "1.1",
      "125": "1.25",
      "150": "1.5",
      "200": "2"
    },
    "backdropContrast": {
      "0": "0",
      "50": ".5",
      "75": ".75",
      "100": "1",
      "125": "1.25",
      "150": "1.5",
      "200": "2"
    },
    "backdropGrayscale": {
      "0": "0",
      "DEFAULT": "100%"
    },
    "backdropHueRotate": {
      "0": "0deg",
      "15": "15deg",
      "30": "30deg",
      "60": "60deg",
      "90": "90deg",
      "180": "180deg"
    },
    "backdropInvert": {
      "0": "0",
      "DEFAULT": "100%"
    },
    "backdropOpacity": {
      "0": "0",
      "5": "0.05",
      "10": "0.1",
      "15": "0.15",
      "20": "0.2",
      "25": "0.25",
      "30": "0.3",
      "35": "0.35",
      "40": "0.4",
      "45": "0.45",
      "50": "0.5",
      "55": "0.55",
      "60": "0.6",
      "65": "0.65",
      "70": "0.7",
      "75": "0.75",
      "80": "0.8",
      "85": "0.85",
      "90": "0.9",
      "95": "0.95",
      "100": "1"
    },
    "backdropSaturate": {
      "0": "0",
      "50": ".5",
      "100": "1",
      "150": "1.5",
      "200": "2"
    },
    "backdropSepia": {
      "0": "0",
      "DEFAULT": "100%"
    },
    "backgroundColor": {
      "inherit": "inherit",
      "current": "currentColor",
      "transparent": "transparent",
      "black": "#000",
      "white": "#fff",
      "slate": {
        "50": "#f8fafc",
        "100": "#f1f5f9",
        "200": "#e2e8f0",
        "300": "#cbd5e1",
        "400": "#94a3b8",
        "500": "#64748b",
        "600": "#475569",
        "700": "#334155",
        "800": "#1e293b",
        "900": "#0f172a",
        "950": "#020617"
      },
      "gray": {
        "50": "#f9fafb",
        "100": "#f3f4f6",
        "200": "#e5e7eb",
        "300": "#d1d5db",
        "400": "#9ca3af",
        "500": "#6b7280",
        "600": "#4b5563",
        "700": "#374151",
        "800": "#1f2937",
        "900": "#111827",
        "950": "#030712"
      },
      "zinc": {
        "50": "#fafafa",
        "100": "#f4f4f5",
        "200": "#e4e4e7",
        "300": "#d4d4d8",
        "400": "#a1a1aa",
        "500": "#71717a",
        "600": "#52525b",
        "700": "#3f3f46",
        "800": "#27272a",
        "900": "#18181b",
        "950": "#09090b"
      },
      "neutral": {
        "50": "#fafafa",
        "100": "#f5f5f5",
        "200": "#e5e5e5",
        "300": "#d4d4d4",
        "400": "#a3a3a3",
        "500": "#737373",
        "600": "#525252",
        "700": "#404040",
        "800": "#262626",
        "900": "#171717",
        "950": "#0a0a0a"
      },
      "stone": {
        "50": "#fafaf9",
        "100": "#f5f5f4",
        "200": "#e7e5e4",
        "300": "#d6d3d1",
        "400": "#a8a29e",
        "500": "#78716c",
        "600": "#57534e",
        "700": "#44403c",
        "800": "#292524",
        "900": "#1c1917",
        "950": "#0c0a09"
      },
      "red": {
        "50": "#fef2f2",
        "100": "#fee2e2",
        "200": "#fecaca",
        "300": "#fca5a5",
        "400": "#f87171",
        "500": "#ef4444",
        "600": "#dc2626",
        "700": "#b91c1c",
        "800": "#991b1b",
        "900": "#7f1d1d",
        "950": "#450a0a"
      },
      "orange": {
        "50": "#fff7ed",
        "100": "#ffedd5",
        "200": "#fed7aa",
        "300": "#fdba74",
        "400": "#fb923c",
        "500": "#f97316",
        "600": "#ea580c",
        "700": "#c2410c",
        "800": "#9a3412",
        "900": "#7c2d12",
        "950": "#431407"
      },
      "amber": {
        "50": "#fffbeb",
        "100": "#fef3c7",
        "200": "#fde68a",
        "300": "#fcd34d",
        "400": "#fbbf24",
        "500": "#f59e0b",
        "600": "#d97706",
        "700": "#b45309",
        "800": "#92400e",
        "900": "#78350f",
        "950": "#451a03"
      },
      "yellow": {
        "50": "#fefce8",
        "100": "#fef9c3",
        "200": "#fef08a",
        "300": "#fde047",
        "400": "#facc15",
        "500": "#eab308",
        "600": "#ca8a04",
        "700": "#a16207",
        "800": "#854d0e",
        "900": "#713f12",
        "950": "#422006"
      },
      "lime": {
        "50": "#f7fee7",
        "100": "#ecfccb",
        "200": "#d9f99d",
        "300": "#bef264",
        "400": "#a3e635",
        "500": "#84cc16",
        "600": "#65a30d",
        "700": "#4d7c0f",
        "800": "#3f6212",
        "900": "#365314",
        "950": "#1a2e05"
      },
      "green": {
        "50": "#f0fdf4",
        "100": "#dcfce7",
        "200": "#bbf7d0",
        "300": "#86efac",
        "400": "#4ade80",
        "500": "#22c55e",
        "600": "#16a34a",
        "700": "#15803d",
        "800": "#166534",
        "900": "#14532d",
        "950": "#052e16"
      },
      "emerald": {
        "50": "#ecfdf5",
        "100": "#d1fae5",
        "200": "#a7f3d0",
        "300": "#6ee7b7",
        "400": "#34d399",
        "500": "#10b981",
        "600": "#059669",
        "700": "#047857",
        "800": "#065f46",
        "900": "#064e3b",
        "950": "#022c22"
      },
      "teal": {
        "50": "#f0fdfa",
        "100": "#ccfbf1",
        "200": "#99f6e4",
        "300": "#5eead4",
        "400": "#2dd4bf",
        "500": "#14b8a6",
        "600": "#0d9488",
        "700": "#0f766e",
        "800": "#115e59",
        "900": "#134e4a",
        "950": "#042f2e"
      },
      "cyan": {
        "50": "#ecfeff",
        "100": "#cffafe",
        "200": "#a5f3fc",
        "300": "#67e8f9",
        "400": "#22d3ee",
        "500": "#06b6d4",
        "600": "#0891b2",
        "700": "#0e7490",
        "800": "#155e75",
        "900": "#164e63",
        "950": "#083344"
      },
      "sky": {
        "50": "#f0f9ff",
        "100": "#e0f2fe",
        "200": "#bae6fd",
        "300": "#7dd3fc",
        "400": "#38bdf8",
        "500": "#0ea5e9",
        "600": "#0284c7",
        "700": "#0369a1",
        "800": "#075985",
        "900": "#0c4a6e",
        "950": "#082f49"
      },
      "blue": {
        "50": "#eff6ff",
        "100": "#dbeafe",
        "200": "#bfdbfe",
        "300": "#93c5fd",
        "400": "#60a5fa",
        "500": "#3b82f6",
        "600": "#2563eb",
        "700": "#1d4ed8",
        "800": "#1e40af",
        "900": "#1e3a8a",
        "950": "#172554"
      },
      "indigo": {
        "50": "#eef2ff",
        "100": "#e0e7ff",
        "200": "#c7d2fe",
        "300": "#a5b4fc",
        "400": "#818cf8",
        "500": "#6366f1",
        "600": "#4f46e5",
        "700": "#4338ca",
        "800": "#3730a3",
        "900": "#312e81",
        "950": "#1e1b4b"
      },
      "violet": {
        "50": "#f5f3ff",
        "100": "#ede9fe",
        "200": "#ddd6fe",
        "300": "#c4b5fd",
        "400": "#a78bfa",
        "500": "#8b5cf6",
        "600": "#7c3aed",
        "700": "#6d28d9",
        "800": "#5b21b6",
        "900": "#4c1d95",
        "950": "#2e1065"
      },
      "purple": {
        "50": "#faf5ff",
        "100": "#f3e8ff",
        "200": "#e9d5ff",
        "300": "#d8b4fe",
        "400": "#c084fc",
        "500": "#a855f7",
        "600": "#9333ea",
        "700": "#7e22ce",
        "800": "#6b21a8",
        "900": "#581c87",
        "950": "#3b0764"
      },
      "fuchsia": {
        "50": "#fdf4ff",
        "100": "#fae8ff",
        "200": "#f5d0fe",
        "300": "#f0abfc",
        "400": "#e879f9",
        "500": "#d946ef",
        "600": "#c026d3",
        "700": "#a21caf",
        "800": "#86198f",
        "900": "#701a75",
        "950": "#4a044e"
      },
      "pink": {
        "50": "#fdf2f8",
        "100": "#fce7f3",
        "200": "#fbcfe8",
        "300": "#f9a8d4",
        "400": "#f472b6",
        "500": "#ec4899",
        "600": "#db2777",
        "700": "#be185d",
        "800": "#9d174d",
        "900": "#831843",
        "950": "#500724"
      },
      "rose": {
        "50": "#fff1f2",
        "100": "#ffe4e6",
        "200": "#fecdd3",
        "300": "#fda4af",
        "400": "#fb7185",
        "500": "#f43f5e",
        "600": "#e11d48",
        "700": "#be123c",
        "800": "#9f1239",
        "900": "#881337",
        "950": "#4c0519"
      }
    },
    "backgroundImage": {
      "none": "none",
      "gradient-to-t": "linear-gradient(to top, var(--tw-gradient-stops))",
      "gradient-to-tr": "linear-gradient(to top right, var(--tw-gradient-stops))",
      "gradient-to-r": "linear-gradient(to right, var(--tw-gradient-stops))",
      "gradient-to-br": "linear-gradient(to bottom right, var(--tw-gradient-stops))",
      "gradient-to-b": "linear-gradient(to bottom, var(--tw-gradient-stops))",
      "gradient-to-bl": "linear-gradient(to bottom left, var(--tw-gradient-stops))",
      "gradient-to-l": "linear-gradient(to left, var(--tw-gradient-stops))",
      "gradient-to-tl": "linear-gradient(to top left, var(--tw-gradient-stops))"
    },
    "backgroundOpacity": {
      "0": "0",
      "5": "0.05",
      "10": "0.1",
      "15": "0.15",
      "20": "0.2",
      "25": "0.25",
      "30": "0.3",
      "35": "0.35",
      "40": "0.4",
      "45": "0.45",
      "50": "0.5",
      "55": "0.55",
      "60": "0.6",
      "65": "0.65",
      "70": "0.7",
      "75": "0.75",
      "80": "0.8",
      "85": "0.85",
      "90": "0.9",
      "95": "0.95",
      "100": "1"
    },
    "backgroundPosition": {
      "bottom": "bottom",
      "center": "center",
      "left": "left",
      "left-bottom": "left bottom",
      "left-top": "left top",
      "right": "right",
      "right-bottom": "right bottom",
      "right-top": "right top",
      "top": "top"
    },
    "backgroundSize": {
      "auto": "auto",
      "cover": "cover",
      "contain": "contain"
    },
    "blur": {
      "0": "0",
      "none": "0",
      "sm": "4px",
      "DEFAULT": "8px",
      "md": "12px",
      "lg": "16px",
      "xl": "24px",
      "2xl": "40px",
      "3xl": "64px"
    },
    "borderColor": {
      "inherit": "inherit",
      "current": "currentColor",
      "transparent": "transparent",
      "black": "#000",
      "white": "#fff",
      "slate": {
        "50": "#f8fafc",
        "100": "#f1f5f9",
        "200": "#e2e8f0",
        "300": "#cbd5e1",
        "400": "#94a3b8",
        "500": "#64748b",
        "600": "#475569",
        "700": "#334155",
        "800": "#1e293b",
        "900": "#0f172a",
        "950": "#020617"
      },
      "gray": {
        "50": "#f9fafb",
        "100": "#f3f4f6",
        "200": "#e5e7eb",
        "300": "#d1d5db",
        "400": "#9ca3af",
        "500": "#6b7280",
        "600": "#4b5563",
        "700": "#374151",
        "800": "#1f2937",
        "900": "#111827",
        "950": "#030712"
      },
      "zinc": {
        "50": "#fafafa",
        "100": "#f4f4f5",
        "200": "#e4e4e7",
        "300": "#d4d4d8",
        "400": "#a1a1aa",
        "500": "#71717a",
        "600": "#52525b",
        "700": "#3f3f46",
        "800": "#27272a",
        "900": "#18181b",
        "950": "#09090b"
      },
      "neutral": {
        "50": "#fafafa",
        "100": "#f5f5f5",
        "200": "#e5e5e5",
        "300": "#d4d4d4",
        "400": "#a3a3a3",
        "500": "#737373",
        "600": "#525252",
        "700": "#404040",
        "800": "#262626",
        "900": "#171717",
        "950": "#0a0a0a"
      },
      "stone": {
        "50": "#fafaf9",
        "100": "#f5f5f4",
        "200": "#e7e5e4",
        "300": "#d6d3d1",
        "400": "#a8a29e",
        "500": "#78716c",
        "600": "#57534e",
        "700": "#44403c",
        "800": "#292524",
        "900": "#1c1917",
        "950": "#0c0a09"
      },
      "red": {
        "50": "#fef2f2",
        "100": "#fee2e2",
        "200": "#fecaca",
        "300": "#fca5a5",
        "400": "#f87171",
        "500": "#ef4444",
        "600": "#dc2626",
        "700": "#b91c1c",
        "800": "#991b1b",
        "900": "#7f1d1d",
        "950": "#450a0a"
      },
      "orange": {
        "50": "#fff7ed",
        "100": "#ffedd5",
        "200": "#fed7aa",
        "300": "#fdba74",
        "400": "#fb923c",
        "500": "#f97316",
        "600": "#ea580c",
        "700": "#c2410c",
        "800": "#9a3412",
        "900": "#7c2d12",
        "950": "#431407"
      },
      "amber": {
        "50": "#fffbeb",
        "100": "#fef3c7",
        "200": "#fde68a",
        "300": "#fcd34d",
        "400": "#fbbf24",
        "500": "#f59e0b",
        "600": "#d97706",
        "700": "#b45309",
        "800": "#92400e",
        "900": "#78350f",
        "950": "#451a03"
      },
      "yellow": {
        "50": "#fefce8",
        "100": "#fef9c3",
        "200": "#fef08a",
        "300": "#fde047",
        "400": "#facc15",
        "500": "#eab308",
        "600": "#ca8a04",
        "700": "#a16207",
        "800": "#854d0e",
        "900": "#713f12",
        "950": "#422006"
      },
      "lime": {
        "50": "#f7fee7",
        "100": "#ecfccb",
        "200": "#d9f99d",
        "300": "#bef264",
        "400": "#a3e635",
        "500": "#84cc16",
        "600": "#65a30d",
        "700": "#4d7c0f",
        "800": "#3f6212",
        "900": "#365314",
        "950": "#1a2e05"
      },
      "green": {
        "50": "#f0fdf4",
        "100": "#dcfce7",
        "200": "#bbf7d0",
        "300": "#86efac",
        "400": "#4ade80",
        "500": "#22c55e",
        "600": "#16a34a",
        "700": "#15803d",
        "800": "#166534",
        "900": "#14532d",
        "950": "#052e16"
      },
      "emerald": {
        "50": "#ecfdf5",
        "100": "#d1fae5",
        "200": "#a7f3d0",
        "300": "#6ee7b7",
        "400": "#34d399",
        "500": "#10b981",
        "600": "#059669",
        "700": "#047857",
        "800": "#065f46",
        "900": "#064e3b",
        "950": "#022c22"
      },
      "teal": {
        "50": "#f0fdfa",
        "100": "#ccfbf1",
        "200": "#99f6e4",
        "300": "#5eead4",
        "400": "#2dd4bf",
        "500": "#14b8a6",
        "600": "#0d9488",
        "700": "#0f766e",
        "800": "#115e59",
        "900": "#134e4a",
        "950": "#042f2e"
      },
      "cyan": {
        "50": "#ecfeff",
        "100": "#cffafe",
        "200": "#a5f3fc",
        "300": "#67e8f9",
        "400": "#22d3ee",
        "500": "#06b6d4",
        "600": "#0891b2",
        "700": "#0e7490",
        "800": "#155e75",
        "900": "#164e63",
        "950": "#083344"
      },
      "sky": {
        "50": "#f0f9ff",
        "100": "#e0f2fe",
        "200": "#bae6fd",
        "300": "#7dd3fc",
        "400": "#38bdf8",
        "500": "#0ea5e9",
        "600": "#0284c7",
        "700": "#0369a1",
        "800": "#075985",
        "900": "#0c4a6e",
        "950": "#082f49"
      },
      "blue": {
        "50": "#eff6ff",
        "100": "#dbeafe",
        "200": "#bfdbfe",
        "300": "#93c5fd",
        "400": "#60a5fa",
        "500": "#3b82f6",
        "600": "#2563eb",
        "700": "#1d4ed8",
        "800": "#1e40af",
        "900": "#1e3a8a",
        "950": "#172554"
      },
      "indigo": {
        "50": "#eef2ff",
        "100": "#e0e7ff",
        "200": "#c7d2fe",
        "300": "#a5b4fc",
        "400": "#818cf8",
        "500": "#6366f1",
        "600": "#4f46e5",
        "700": "#4338ca",
        "800": "#3730a3",
        "900": "#312e81",
        "950": "#1e1b4b"
      },
      "violet": {
        "50": "#f5f3ff",
        "100": "#ede9fe",
        "200": "#ddd6fe",
        "300": "#c4b5fd",
        "400": "#a78bfa",
        "500": "#8b5cf6",
        "600": "#7c3aed",
        "700": "#6d28d9",
        "800": "#5b21b6",
        "900": "#4c1d95",
        "950": "#2e1065"
      },
      "purple": {
        "50": "#faf5ff",
        "100": "#f3e8ff",
        "200": "#e9d5ff",
        "300": "#d8b4fe",
        "400": "#c084fc",
        "500": "#a855f7",
        "600": "#9333ea",
        "700": "#7e22ce",
        "800": "#6b21a8",
        "900": "#581c87",
        "950": "#3b0764"
      },
      "fuchsia": {
        "50": "#fdf4ff",
        "100": "#fae8ff",
        "200": "#f5d0fe",
        "300": "#f0abfc",
        "400": "#e879f9",
        "500": "#d946ef",
        "600": "#c026d3",
        "700": "#a21caf",
        "800": "#86198f",
        "900": "#701a75",
        "950": "#4a044e"
      },
      "pink": {
        "50": "#fdf2f8",
        "100": "#fce7f3",
        "200": "#fbcfe8",
        "300": "#f9a8d4",
        "400": "#f472b6",
        "500": "#ec4899",
        "600": "#db2777",
        "700": "#be185d",
        "800": "#9d174d",
        "900": "#831843",
        "950": "#500724"
      },
      "rose": {
        "50": "#fff1f2",
        "100": "#ffe4e6",
        "200": "#fecdd3",
        "300": "#fda4af",
        "400": "#fb7185",
        "500": "#f43f5e",
        "600": "#e11d48",
        "700": "#be123c",
        "800": "#9f1239",
        "900": "#881337",
        "950": "#4c0519"
      },
      "DEFAULT": "#e5e7eb"
    },
    "borderOpacity": {
      "0": "0",
      "5": "0.05",
      "10": "0.1",
      "15": "0.15",
      "20": "0.2",
      "25": "0.25",
      "30": "0.3",
      "35": "0.35",
      "40": "0.4",
      "45": "0.45",
      "50": "0.5",
      "55": "0.55",
      "60": "0.6",
      "65": "0.65",
      "70": "0.7",
      "75": "0.75",
      "80": "0.8",
      "85": "0.85",
      "90": "0.9",
      "95": "0.95",
      "100": "1"
    },
    "borderRadius": {
      "none": "0px",
      "sm": "0.125rem",
      "DEFAULT": "0.25rem",
      "md": "0.375rem",
      "lg": "0.5rem",
      "xl": "0.75rem",
      "2xl": "1rem",
      "3xl": "1.5rem",
      "full": "9999px"
    },
    "borderSpacing": {
      "0": "0px",
      "1": "0.25rem",
      "2": "0.5rem",
      "3": "0.75rem",
      "4": "1rem",
      "5": "1.25rem",
      "6": "1.5rem",
      "7": "1.75rem",
      "8": "2rem",
      "9": "2.25rem",
      "10": "2.5rem",
      "11": "2.75rem",
      "12": "3rem",
      "14": "3.5rem",
      "16": "4rem",
      "20": "5rem",
      "24": "6rem",
      "28": "7rem",
      "32": "8rem",
      "36": "9rem",
      "40": "10rem",
      "44": "11rem",
      "48": "12rem",
      "52": "13rem",
      "56": "14rem",
      "60": "15rem",
      "64": "16rem",
      "72": "18rem",
      "80": "20rem",
      "96": "24rem",
      "px": "1px",
      "0.5": "0.125rem",
      "1.5": "0.375rem",
      "2.5": "0.625rem",
      "3.5": "0.875rem"
    },
    "borderWidth": {
      "0": "0px",
      "2": "2px",
      "4": "4px",
      "8": "8px",
      "DEFAULT": "1px"
    },
    "boxShadow": {
      "sm": "0 1px 2px 0 rgb(0 0 0 / 0.05)",
      "DEFAULT": "0 1px 3px 0 rgb(0 0 0 / 0.1), 0 1px 2px -1px rgb(0 0 0 / 0.1)",
      "md": "0 4px 6px -1px rgb(0 0 0 / 0.1), 0 2px 4px -2px rgb(0 0 0 / 0.1)",
      "lg": "0 10px 15px -3px rgb(0 0 0 / 0.1), 0 4px 6px -4px rgb(0 0 0 / 0.1)",
      "xl": "0 20px 25px -5px rgb(0 0 0 / 0.1), 0 8px 10px -6px rgb(0 0 0 / 0.1)",
      "2xl": "0 25px 50px -12px rgb(0 0 0 / 0.25)",
      "inner": "inset 0 2px 4px 0 rgb(0 0 0 / 0.05)",
      "none": "none"
    },
    "boxShadowColor": {
      "inherit": "inherit",
      "current": "currentColor",
      "transparent": "transparent",
      "black": "#000",
      "white": "#fff",
      "slate": {
        "50": "#f8fafc",
        "100": "#f1f5f9",
        "200": "#e2e8f0",
        "300": "#cbd5e1",
        "400": "#94a3b8",
        "500": "#64748b",
        "600": "#475569",
        "700": "#334155",
        "800": "#1e293b",
        "900": "#0f172a",
        "950": "#020617"
      },
      "gray": {
        "50": "#f9fafb",
        "100": "#f3f4f6",
        "200": "#e5e7eb",
        "300": "#d1d5db",
        "400": "#9ca3af",
        "500": "#6b7280",
        "600": "#4b5563",
        "700": "#374151",
        "800": "#1f2937",
        "900": "#111827",
        "950": "#030712"
      },
      "zinc": {
        "50": "#fafafa",
        "100": "#f4f4f5",
        "200": "#e4e4e7",
        "300": "#d4d4d8",
        "400": "#a1a1aa",
        "500": "#71717a",
        "600": "#52525b",
        "700": "#3f3f46",
        "800": "#27272a",
        "900": "#18181b",
        "950": "#09090b"
      },
      "neutral": {
        "50": "#fafafa",
        "100": "#f5f5f5",
        "200": "#e5e5e5",
        "300": "#d4d4d4",
        "400": "#a3a3a3",
        "500": "#737373",
        "600": "#525252",
        "700": "#404040",
        "800": "#262626",
        "900": "#171717",
        "950": "#0a0a0a"
      },
      "stone": {
        "50": "#fafaf9",
        "100": "#f5f5f4",
        "200": "#e7e5e4",
        "300": "#d6d3d1",
        "400": "#a8a29e",
        "500": "#78716c",
        "600": "#57534e",
        "700": "#44403c",
        "800": "#292524",
        "900": "#1c1917",
        "950": "#0c0a09"
      },
      "red": {
        "50": "#fef2f2",
        "100": "#fee2e2",
        "200": "#fecaca",
        "300": "#fca5a5",
        "400": "#f87171",
        "500": "#ef4444",
        "600": "#dc2626",
        "700": "#b91c1c",
        "800": "#991b1b",
        "900": "#7f1d1d",
        "950": "#450a0a"
      },
      "orange": {
        "50": "#fff7ed",
        "100": "#ffedd5",
        "200": "#fed7aa",
        "300": "#fdba74",
        "400": "#fb923c",
        "500": "#f97316",
        "600": "#ea580c",
        "700": "#c2410c",
        "800": "#9a3412",
        "900": "#7c2d12",
        "950": "#431407"
      },
      "amber": {
        "50": "#fffbeb",
        "100": "#fef3c7",
        "200": "#fde68a",
        "300": "#fcd34d",
        "400": "#fbbf24",
        "500": "#f59e0b",
        "600": "#d97706",
        "700": "#b45309",
        "800": "#92400e",
        "900": "#78350f",
        "950": "#451a03"
      },
      "yellow": {
        "50": "#fefce8",
        "100": "#fef9c3",
        "200": "#fef08a",
        "300": "#fde047",
        "400": "#facc15",
        "500": "#eab308",
        "600": "#ca8a04",
        "700": "#a16207",
        "800": "#854d0e",
        "900": "#713f12",
        "950": "#422006"
      },
      "lime": {
        "50": "#f7fee7",
        "100": "#ecfccb",
        "200": "#d9f99d",
        "300": "#bef264",
        "400": "#a3e635",
        "500": "#84cc16",
        "600": "#65a30d",
        "700": "#4d7c0f",
        "800": "#3f6212",
        "900": "#365314",
        "950": "#1a2e05"
      },
      "green": {
        "50": "#f0fdf4",
        "100": "#dcfce7",
        "200": "#bbf7d0",
        "300": "#86efac",
        "400": "#4ade80",
        "500": "#22c55e",
        "600": "#16a34a",
        "700": "#15803d",
        "800": "#166534",
        "900": "#14532d",
        "950": "#052e16"
      },
      "emerald": {
        "50": "#ecfdf5",
        "100": "#d1fae5",
        "200": "#a7f3d0",
        "300": "#6ee7b7",
        "400": "#34d399",
        "500": "#10b981",
        "600": "#059669",
        "700": "#047857",
        "800": "#065f46",
        "900": "#064e3b",
        "950": "#022c22"
      },
      "teal": {
        "50": "#f0fdfa",
        "100": "#ccfbf1",
        "200": "#99f6e4",
        "300": "#5eead4",
        "400": "#2dd4bf",
        "500": "#14b8a6",
        "600": "#0d9488",
        "700": "#0f766e",
        "800": "#115e59",
        "900": "#134e4a",
        "950": "#042f2e"
      },
      "cyan": {
        "50": "#ecfeff",
        "100": "#cffafe",
        "200": "#a5f3fc",
        "300": "#67e8f9",
        "400": "#22d3ee",
        "500": "#06b6d4",
        "600": "#0891b2",
        "700": "#0e7490",
        "800": "#155e75",
        "900": "#164e63",
        "950": "#083344"
      },
      "sky": {
        "50": "#f0f9ff",
        "100": "#e0f2fe",
        "200": "#bae6fd",
        "300": "#7dd3fc",
        "400": "#38bdf8",
        "500": "#0ea5e9",
        "600": "#0284c7",
        "700": "#0369a1",
        "800": "#075985",
        "900": "#0c4a6e",
        "950": "#082f49"
      },
      "blue": {
        "50": "#eff6ff",
        "100": "#dbeafe",
        "200": "#bfdbfe",
        "300": "#93c5fd",
        "400": "#60a5fa",
        "500": "#3b82f6",
        "600": "#2563eb",
        "700": "#1d4ed8",
        "800": "#1e40af",
        "900": "#1e3a8a",
        "950": "#172554"
      },
      "indigo": {
        "50": "#eef2ff",
        "100": "#e0e7ff",
        "200": "#c7d2fe",
        "300": "#a5b4fc",
        "400": "#818cf8",
        "500": "#6366f1",
        "600": "#4f46e5",
        "700": "#4338ca",
        "800": "#3730a3",
        "900": "#312e81",
        "950": "#1e1b4b"
      },
      "violet": {
        "50": "#f5f3ff",
        "100": "#ede9fe",
        "200": "#ddd6fe",
        "300": "#c4b5fd",
        "400": "#a78bfa",
        "500": "#8b5cf6",
        "600": "#7c3aed",
        "700": "#6d28d9",
        "800": "#5b21b6",
        "900": "#4c1d95",
        "950": "#2e1065"
      },
      "purple": {
        "50": "#faf5ff",
        "100": "#f3e8ff",
        "200": "#e9d5ff",
        "300": "#d8b4fe",
        "400": "#c084fc",
        "500": "#a855f7",
        "600": "#9333ea",
        "700": "#7e22ce",
        "800": "#6b21a8",
        "900": "#581c87",
        "950": "#3b0764"
      },
      "fuchsia": {
        "50": "#fdf4ff",
        "100": "#fae8ff",
        "200": "#f5d0fe",
        "300": "#f0abfc",
        "400": "#e879f9",
        "500": "#d946ef",
        "600": "#c026d3",
        "700": "#a21caf",
        "800": "#86198f",
        "900": "#701a75",
        "950": "#4a044e"
      },
      "pink": {
        "50": "#fdf2f8",
        "100": "#fce7f3",
        "200": "#fbcfe8",
        "300": "#f9a8d4",
        "400": "#f472b6",
        "500": "#ec4899",
        "600": "#db2777",
        "700": "#be185d",
        "800": "#9d174d",
        "900": "#831843",
        "950": "#500724"
      },
      "rose": {
        "50": "#fff1f2",
        "100": "#ffe4e6",
        "200": "#fecdd3",
        "300": "#fda4af",
        "400": "#fb7185",
        "500": "#f43f5e",
        "600": "#e11d48",
        "700": "#be123c",
        "800": "#9f1239",
        "900": "#881337",
        "950": "#4c0519"
      }
    },
    "brightness": {
      "0": "0",
      "50": ".5",
      "75": ".75",
      "90": ".9",
      "95": ".95",
      "100": "1",
      "105": "1.05",
      "110": "1.1",
      "125": "1.25",
      "150": "1.5",
      "200": "2"
    },
    "caretColor": {
      "inherit": "inherit",
      "current": "currentColor",
      "transparent": "transparent",
      "black": "#000",
      "white": "#fff",
      "slate": {
        "50": "#f8fafc",
        "100": "#f1f5f9",
        "200": "#e2e8f0",
        "300": "#cbd5e1",
        "400": "#94a3b8",
        "500": "#64748b",
        "600": "#475569",
        "700": "#334155",
        "800": "#1e293b",
        "900": "#0f172a",
        "950": "#020617"
      },
      "gray": {
        "50": "#f9fafb",
        "100": "#f3f4f6",
        "200": "#e5e7eb",
        "300": "#d1d5db",
        "400": "#9ca3af",
        "500": "#6b7280",
        "600": "#4b5563",
        "700": "#374151",
        "800": "#1f2937",
        "900": "#111827",
        "950": "#030712"
      },
      "zinc": {
        "50": "#fafafa",
        "100": "#f4f4f5",
        "200": "#e4e4e7",
        "300": "#d4d4d8",
        "400": "#a1a1aa",
        "500": "#71717a",
        "600": "#52525b",
        "700": "#3f3f46",
        "800": "#27272a",
        "900": "#18181b",
        "950": "#09090b"
      },
      "neutral": {
        "50": "#fafafa",
        "100": "#f5f5f5",
        "200": "#e5e5e5",
        "300": "#d4d4d4",
        "400": "#a3a3a3",
        "500": "#737373",
        "600": "#525252",
        "700": "#404040",
        "800": "#262626",
        "900": "#171717",
        "950": "#0a0a0a"
      },
      "stone": {
        "50": "#fafaf9",
        "100": "#f5f5f4",
        "200": "#e7e5e4",
        "300": "#d6d3d1",
        "400": "#a8a29e",
        "500": "#78716c",
        "600": "#57534e",
        "700": "#44403c",
        "800": "#292524",
        "900": "#1c1917",
        "950": "#0c0a09"
      },
      "red": {
        "50": "#fef2f2",
        "100": "#fee2e2",
        "200": "#fecaca",
        "300": "#fca5a5",
        "400": "#f87171",
        "500": "#ef4444",
        "600": "#dc2626",
        "700": "#b91c1c",
        "800": "#991b1b",
        "900": "#7f1d1d",
        "950": "#450a0a"
      },
      "orange": {
        "50": "#fff7ed",
        "100": "#ffedd5",
        "200": "#fed7aa",
        "300": "#fdba74",
        "400": "#fb923c",
        "500": "#f97316",
        "600": "#ea580c",
        "700": "#c2410c",
        "800": "#9a3412",
        "900": "#7c2d12",
        "950": "#431407"
      },
      "amber": {
        "50": "#fffbeb",
        "100": "#fef3c7",
        "200": "#fde68a",
        "300": "#fcd34d",
        "400": "#fbbf24",
        "500": "#f59e0b",
        "600": "#d97706",
        "700": "#b45309",
        "800": "#92400e",
        "900": "#78350f",
        "950": "#451a03"
      },
      "yellow": {
        "50": "#fefce8",
        "100": "#fef9c3",
        "200": "#fef08a",
        "300": "#fde047",
        "400": "#facc15",
        "500": "#eab308",
        "600": "#ca8a04",
        "700": "#a16207",
        "800": "#854d0e",
        "900": "#713f12",
        "950": "#422006"
      },
      "lime": {
        "50": "#f7fee7",
        "100": "#ecfccb",
        "200": "#d9f99d",
        "300": "#bef264",
        "400": "#a3e635",
        "500": "#84cc16",
        "600": "#65a30d",
        "700": "#4d7c0f",
        "800": "#3f6212",
        "900": "#365314",
        "950": "#1a2e05"
      },
      "green": {
        "50": "#f0fdf4",
        "100": "#dcfce7",
        "200": "#bbf7d0",
        "300": "#86efac",
        "400": "#4ade80",
        "500": "#22c55e",
        "600": "#16a34a",
        "700": "#15803d",
        "800": "#166534",
        "900": "#14532d",
        "950": "#052e16"
      },
      "emerald": {
        "50": "#ecfdf5",
        "100": "#d1fae5",
        "200": "#a7f3d0",
        "300": "#6ee7b7",
        "400": "#34d399",
        "500": "#10b981",
        "600": "#059669",
        "700": "#047857",
        "800": "#065f46",
        "900": "#064e3b",
        "950": "#022c22"
      },
      "teal": {
        "50": "#f0fdfa",
        "100": "#ccfbf1",
        "200": "#99f6e4",
        "300": "#5eead4",
        "400": "#2dd4bf",
        "500": "#14b8a6",
        "600": "#0d9488",
        "700": "#0f766e",
        "800": "#115e59",
        "900": "#134e4a",
        "950": "#042f2e"
      },
      "cyan": {
        "50": "#ecfeff",
        "100": "#cffafe",
        "200": "#a5f3fc",
        "300": "#67e8f9",
        "400": "#22d3ee",
        "500": "#06b6d4",
        "600": "#0891b2",
        "700": "#0e7490",
        "800": "#155e75",
        "900": "#164e63",
        "950": "#083344"
      },
      "sky": {
        "50": "#f0f9ff",
        "100": "#e0f2fe",
        "200": "#bae6fd",
        "300": "#7dd3fc",
        "400": "#38bdf8",
        "500": "#0ea5e9",
        "600": "#0284c7",
        "700": "#0369a1",
        "800": "#075985",
        "900": "#0c4a6e",
        "950": "#082f49"
      },
      "blue": {
        "50": "#eff6ff",
        "100": "#dbeafe",
        "200": "#bfdbfe",
        "300": "#93c5fd",
        "400": "#60a5fa",
        "500": "#3b82f6",
        "600": "#2563eb",
        "700": "#1d4ed8",
        "800": "#1e40af",
        "900": "#1e3a8a",
        "950": "#172554"
      },
      "indigo": {
        "50": "#eef2ff",
        "100": "#e0e7ff",
        "200": "#c7d2fe",
        "300": "#a5b4fc",
        "400": "#818cf8",
        "500": "#6366f1",
        "600": "#4f46e5",
        "700": "#4338ca",
        "800": "#3730a3",
        "900": "#312e81",
        "950": "#1e1b4b"
      },
      "violet": {
        "50": "#f5f3ff",
        "100": "#ede9fe",
        "200": "#ddd6fe",
        "300": "#c4b5fd",
        "400": "#a78bfa",
        "500": "#8b5cf6",
        "600": "#7c3aed",
        "700": "#6d28d9",
        "800": "#5b21b6",
        "900": "#4c1d95",
        "950": "#2e1065"
      },
      "purple": {
        "50": "#faf5ff",
        "100": "#f3e8ff",
        "200": "#e9d5ff",
        "300": "#d8b4fe",
        "400": "#c084fc",
        "500": "#a855f7",
        "600": "#9333ea",
        "700": "#7e22ce",
        "800": "#6b21a8",
        "900": "#581c87",
        "950": "#3b0764"
      },
      "fuchsia": {
        "50": "#fdf4ff",
        "100": "#fae8ff",
        "200": "#f5d0fe",
        "300": "#f0abfc",
        "400": "#e879f9",
        "500": "#d946ef",
        "600": "#c026d3",
        "700": "#a21caf",
        "800": "#86198f",
        "900": "#701a75",
        "950": "#4a044e"
      },
      "pink": {
        "50": "#fdf2f8",
        "100": "#fce7f3",
        "200": "#fbcfe8",
        "300": "#f9a8d4",
        "400": "#f472b6",
        "500": "#ec4899",
        "600": "#db2777",
        "700": "#be185d",
        "800": "#9d174d",
        "900": "#831843",
        "950": "#500724"
      },
      "rose": {
        "50": "#fff1f2",
        "100": "#ffe4e6",
        "200": "#fecdd3",
        "300": "#fda4af",
        "400": "#fb7185",
        "500": "#f43f5e",
        "600": "#e11d48",
        "700": "#be123c",
        "800": "#9f1239",
        "900": "#881337",
        "950": "#4c0519"
      }
    },
    "colors": {
      "inherit": "inherit",
      "current": "currentColor",
      "transparent": "transparent",
      "black": "#000",
      "white": "#fff",
      "slate": {
        "50": "#f8fafc",
        "100": "#f1f5f9",
        "200": "#e2e8f0",
        "300": "#cbd5e1",
        "400": "#94a3b8",
        "500": "#64748b",
        "600": "#475569",
        "700": "#334155",
        "800": "#1e293b",
        "900": "#0f172a",
        "950": "#020617"
      },
      "gray": {
        "50": "#f9fafb",
        "100": "#f3f4f6",
        "200": "#e5e7eb",
        "300": "#d1d5db",
        "400": "#9ca3af",
        "500": "#6b7280",
        "600": "#4b5563",
        "700": "#374151",
        "800": "#1f2937",
        "900": "#111827",
        "950": "#030712"
      },
      "zinc": {
        "50": "#fafafa",
        "100": "#f4f4f5",
        "200": "#e4e4e7",
        "300": "#d4d4d8",
        "400": "#a1a1aa",
        "500": "#71717a",
        "600": "#52525b",
        "700": "#3f3f46",
        "800": "#27272a",
        "900": "#18181b",
        "950": "#09090b"
      },
      "neutral": {
        "50": "#fafafa",
        "100": "#f5f5f5",
        "200": "#e5e5e5",
        "300": "#d4d4d4",
        "400": "#a3a3a3",
        "500": "#737373",
        "600": "#525252",
        "700": "#404040",
        "800": "#262626",
        "900": "#171717",
        "950": "#0a0a0a"
      },
      "stone": {
        "50": "#fafaf9",
        "100": "#f5f5f4",
        "200": "#e7e5e4",
        "300": "#d6d3d1",
        "400": "#a8a29e",
        "500": "#78716c",
        "600": "#57534e",
        "700": "#44403c",
        "800": "#292524",
        "900": "#1c1917",
        "950": "#0c0a09"
      },
      "red": {
        "50": "#fef2f2",
        "100": "#fee2e2",
        "200": "#fecaca",
        "300": "#fca5a5",
        "400": "#f87171",
        "500": "#ef4444",
        "600": "#dc2626",
        "700": "#b91c1c",
        "800": "#991b1b",
        "900": "#7f1d1d",
        "950": "#450a0a"
      },
      "orange": {
        "50": "#fff7ed",
        "100": "#ffedd5",
        "200": "#fed7aa",
        "300": "#fdba74",
        "400": "#fb923c",
        "500": "#f97316",
        "600": "#ea580c",
        "700": "#c2410c",
        "800": "#9a3412",
        "900": "#7c2d12",
        "950": "#431407"
      },
      "amber": {
        "50": "#fffbeb",
        "100": "#fef3c7",
        "200": "#fde68a",
        "300": "#fcd34d",
        "400": "#fbbf24",
        "500": "#f59e0b",
        "600": "#d97706",
        "700": "#b45309",
        "800": "#92400e",
        "900": "#78350f",
        "950": "#451a03"
      },
      "yellow": {
        "50": "#fefce8",
        "100": "#fef9c3",
        "200": "#fef08a",
        "300": "#fde047",
        "400": "#facc15",
        "500": "#eab308",
        "600": "#ca8a04",
        "700": "#a16207",
        "800": "#854d0e",
        "900": "#713f12",
        "950": "#422006"
      },
      "lime": {
        "50": "#f7fee7",
        "100": "#ecfccb",
        "200": "#d9f99d",
        "300": "#bef264",
        "400": "#a3e635",
        "500": "#84cc16",
        "600": "#65a30d",
        "700": "#4d7c0f",
        "800": "#3f6212",
        "900": "#365314",
        "950": "#1a2e05"
      },
      "green": {
        "50": "#f0fdf4",
        "100": "#dcfce7",
        "200": "#bbf7d0",
        "300": "#86efac",
        "400": "#4ade80",
        "500": "#22c55e",
        "600": "#16a34a",
        "700": "#15803d",
        "800": "#166534",
        "900": "#14532d",
        "950": "#052e16"
      },
      "emerald": {
        "50": "#ecfdf5",
        "100": "#d1fae5",
        "200": "#a7f3d0",
        "300": "#6ee7b7",
        "400": "#34d399",
        "500": "#10b981",
        "600": "#059669",
        "700": "#047857",
        "800": "#065f46",
        "900": "#064e3b",
        "950": "#022c22"
      },
      "teal": {
        "50": "#f0fdfa",
        "100": "#ccfbf1",
        "200": "#99f6e4",
        "300": "#5eead4",
        "400": "#2dd4bf",
        "500": "#14b8a6",
        "600": "#0d9488",
        "700": "#0f766e",
        "800": "#115e59",
        "900": "#134e4a",
        "950": "#042f2e"
      },
      "cyan": {
        "50": "#ecfeff",
        "100": "#cffafe",
        "200": "#a5f3fc",
        "300": "#67e8f9",
        "400": "#22d3ee",
        "500": "#06b6d4",
        "600": "#0891b2",
        "700": "#0e7490",
        "800": "#155e75",
        "900": "#164e63",
        "950": "#083344"
      },
      "sky": {
        "50": "#f0f9ff",
        "100": "#e0f2fe",
        "200": "#bae6fd",
        "300": "#7dd3fc",
        "400": "#38bdf8",
        "500": "#0ea5e9",
        "600": "#0284c7",
        "700": "#0369a1",
        "800": "#075985",
        "900": "#0c4a6e",
        "950": "#082f49"
      },
      "blue": {
        "50": "#eff6ff",
        "100": "#dbeafe",
        "200": "#bfdbfe",
        "300": "#93c5fd",
        "400": "#60a5fa",
        "500": "#3b82f6",
        "600": "#2563eb",
        "700": "#1d4ed8",
        "800": "#1e40af",
        "900": "#1e3a8a",
        "950": "#172554"
      },
      "indigo": {
        "50": "#eef2ff",
        "100": "#e0e7ff",
        "200": "#c7d2fe",
        "300": "#a5b4fc",
        "400": "#818cf8",
        "500": "#6366f1",
        "600": "#4f46e5",
        "700": "#4338ca",
        "800": "#3730a3",
        "900": "#312e81",
        "950": "#1e1b4b"
      },
      "violet": {
        "50": "#f5f3ff",
        "100": "#ede9fe",
        "200": "#ddd6fe",
        "300": "#c4b5fd",
        "400": "#a78bfa",
        "500": "#8b5cf6",
        "600": "#7c3aed",
        "700": "#6d28d9",
        "800": "#5b21b6",
        "900": "#4c1d95",
        "950": "#2e1065"
      },
      "purple": {
        "50": "#faf5ff",
        "100": "#f3e8ff",
        "200": "#e9d5ff",
        "300": "#d8b4fe",
        "400": "#c084fc",
        "500": "#a855f7",
        "600": "#9333ea",
        "700": "#7e22ce",
        "800": "#6b21a8",
        "900": "#581c87",
        "950": "#3b0764"
      },
      "fuchsia": {
        "50": "#fdf4ff",
        "100": "#fae8ff",
        "200": "#f5d0fe",
        "300": "#f0abfc",
        "400": "#e879f9",
        "500": "#d946ef",
        "600": "#c026d3",
        "700": "#a21caf",
        "800": "#86198f",
        "900": "#701a75",
        "950": "#4a044e"
      },
      "pink": {
        "50": "#fdf2f8",
        "100": "#fce7f3",
        "200": "#fbcfe8",
        "300": "#f9a8d4",
        "400": "#f472b6",
        "500": "#ec4899",
        "600": "#db2777",
        "700": "#be185d",
        "800": "#9d174d",
        "900": "#831843",
        "950": "#500724"
      },
      "rose": {
        "50": "#fff1f2",
        "100": "#ffe4e6",
        "200": "#fecdd3",
        "300": "#fda4af",
        "400": "#fb7185",
        "500": "#f43f5e",
        "600": "#e11d48",
        "700": "#be123c",
        "800": "#9f1239",
        "900": "#881337",
        "950": "#4c0519"
      }
    },
    "columns": {
      "1": "1",
      "2": "2",
      "3": "3",
      "4": "4",
      "5": "5",
      "6": "6",
      "7": "7",
      "8": "8",
      "9": "9",
      "10": "10",
      "11": "11",
      "12": "12",
      "auto": "auto",
      "3xs": "16rem",
      "2xs": "18rem",
      "xs": "20rem",
      "sm": "24rem",
      "md": "28rem",
      "lg": "32rem",
      "xl": "36rem",
      "2xl": "42rem",
      "3xl": "48rem",
      "4xl": "56rem",
      "5xl": "64rem",
      "6xl": "72rem",
      "7xl": "80rem"
    },
    "container": {},
    "content": {
      "none": "none"
    },
    "contrast": {
      "0": "0",
      "50": ".5",
      "75": ".75",
      "100": "1",
      "125": "1.25",
      "150": "1.5",
      "200": "2"
    },
    "cursor": {
      "auto": "auto",
      "default": "default",
      "pointer": "pointer",
      "wait": "wait",
      "text": "text",
      "move": "move",
      "help": "help",
      "not-allowed": "not-allowed",
      "none": "none",
      "context-menu": "context-menu",
      "progress": "progress",
      "cell": "cell",
      "crosshair": "crosshair",
      "vertical-text": "vertical-text",
      "alias": "alias",
      "copy": "copy",
      "no-drop": "no-drop",
      "grab": "grab",
      "grabbing": "grabbing",
      "all-scroll": "all-scroll",
      "col-resize": "col-resize",
      "row-resize": "row-resize",
      "n-resize": "n-resize",
      "e-resize": "e-resize",
      "s-resize": "s-resize",
      "w-resize": "w-resize",
      "ne-resize": "ne-resize",
      "nw-resize": "nw-resize",
      "se-resize": "se-resize",
      "sw-resize": "sw-resize",
      "ew-resize": "ew-resize",
      "ns-resize": "ns-resize",
      "nesw-resize": "nesw-resize",
      "nwse-resize": "nwse-resize",
      "zoom-in": "zoom-in",
      "zoom-out": "zoom-out"
    },
    "divideColor": {
      "inherit": "inherit",
      "current": "currentColor",
      "transparent": "transparent",
      "black": "#000",
      "white": "#fff",
      "slate": {
        "50": "#f8fafc",
        "100": "#f1f5f9",
        "200": "#e2e8f0",
        "300": "#cbd5e1",
        "400": "#94a3b8",
        "500": "#64748b",
        "600": "#475569",
        "700": "#334155",
        "800": "#1e293b",
        "900": "#0f172a",
        "950": "#020617"
      },
      "gray": {
        "50": "#f9fafb",
        "100": "#f3f4f6",
        "200": "#e5e7eb",
        "300": "#d1d5db",
        "400": "#9ca3af",
        "500": "#6b7280",
        "600": "#4b5563",
        "700": "#374151",
        "800": "#1f2937",
        "900": "#111827",
        "950": "#030712"
      },
      "zinc": {
        "50": "#fafafa",
        "100": "#f4f4f5",
        "200": "#e4e4e7",
        "300": "#d4d4d8",
        "400": "#a1a1aa",
        "500": "#71717a",
        "600": "#52525b",
        "700": "#3f3f46",
        "800": "#27272a",
        "900": "#18181b",
        "950": "#09090b"
      },
      "neutral": {
        "50": "#fafafa",
        "100": "#f5f5f5",
        "200": "#e5e5e5",
        "300": "#d4d4d4",
        "400": "#a3a3a3",
        "500": "#737373",
        "600": "#525252",
        "700": "#404040",
        "800": "#262626",
        "900": "#171717",
        "950": "#0a0a0a"
      },
      "stone": {
        "50": "#fafaf9",
        "100": "#f5f5f4",
        "200": "#e7e5e4",
        "300": "#d6d3d1",
        "400": "#a8a29e",
        "500": "#78716c",
        "600": "#57534e",
        "700": "#44403c",
        "800": "#292524",
        "900": "#1c1917",
        "950": "#0c0a09"
      },
      "red": {
        "50": "#fef2f2",
        "100": "#fee2e2",
        "200": "#fecaca",
        "300": "#fca5a5",
        "400": "#f87171",
        "500": "#ef4444",
        "600": "#dc2626",
        "700": "#b91c1c",
        "800": "#991b1b",
        "900": "#7f1d1d",
        "950": "#450a0a"
      },
      "orange": {
        "50": "#fff7ed",
        "100": "#ffedd5",
        "200": "#fed7aa",
        "300": "#fdba74",
        "400": "#fb923c",
        "500": "#f97316",
        "600": "#ea580c",
        "700": "#c2410c",
        "800": "#9a3412",
        "900": "#7c2d12",
        "950": "#431407"
      },
      "amber": {
        "50": "#fffbeb",
        "100": "#fef3c7",
        "200": "#fde68a",
        "300": "#fcd34d",
        "400": "#fbbf24",
        "500": "#f59e0b",
        "600": "#d97706",
        "700": "#b45309",
        "800": "#92400e",
        "900": "#78350f",
        "950": "#451a03"
      },
      "yellow": {
        "50": "#fefce8",
        "100": "#fef9c3",
        "200": "#fef08a",
        "300": "#fde047",
        "400": "#facc15",
        "500": "#eab308",
        "600": "#ca8a04",
        "700": "#a16207",
        "800": "#854d0e",
        "900": "#713f12",
        "950": "#422006"
      },
      "lime": {
        "50": "#f7fee7",
        "100": "#ecfccb",
        "200": "#d9f99d",
        "300": "#bef264",
        "400": "#a3e635",
        "500": "#84cc16",
        "600": "#65a30d",
        "700": "#4d7c0f",
        "800": "#3f6212",
        "900": "#365314",
        "950": "#1a2e05"
      },
      "green": {
        "50": "#f0fdf4",
        "100": "#dcfce7",
        "200": "#bbf7d0",
        "300": "#86efac",
        "400": "#4ade80",
        "500": "#22c55e",
        "600": "#16a34a",
        "700": "#15803d",
        "800": "#166534",
        "900": "#14532d",
        "950": "#052e16"
      },
      "emerald": {
        "50": "#ecfdf5",
        "100": "#d1fae5",
        "200": "#a7f3d0",
        "300": "#6ee7b7",
        "400": "#34d399",
        "500": "#10b981",
        "600": "#059669",
        "700": "#047857",
        "800": "#065f46",
        "900": "#064e3b",
        "950": "#022c22"
      },
      "teal": {
        "50": "#f0fdfa",
        "100": "#ccfbf1",
        "200": "#99f6e4",
        "300": "#5eead4",
        "400": "#2dd4bf",
        "500": "#14b8a6",
        "600": "#0d9488",
        "700": "#0f766e",
        "800": "#115e59",
        "900": "#134e4a",
        "950": "#042f2e"
      },
      "cyan": {
        "50": "#ecfeff",
        "100": "#cffafe",
        "200": "#a5f3fc",
        "300": "#67e8f9",
        "400": "#22d3ee",
        "500": "#06b6d4",
        "600": "#0891b2",
        "700": "#0e7490",
        "800": "#155e75",
        "900": "#164e63",
        "950": "#083344"
      },
      "sky": {
        "50": "#f0f9ff",
        "100": "#e0f2fe",
        "200": "#bae6fd",
        "300": "#7dd3fc",
        "400": "#38bdf8",
        "500": "#0ea5e9",
        "600": "#0284c7",
        "700": "#0369a1",
        "800": "#075985",
        "900": "#0c4a6e",
        "950": "#082f49"
      },
      "blue": {
        "50": "#eff6ff",
        "100": "#dbeafe",
        "200": "#bfdbfe",
        "300": "#93c5fd",
        "400": "#60a5fa",
        "500": "#3b82f6",
        "600": "#2563eb",
        "700": "#1d4ed8",
        "800": "#1e40af",
        "900": "#1e3a8a",
        "950": "#172554"
      },
      "indigo": {
        "50": "#eef2ff",
        "100": "#e0e7ff",
        "200": "#c7d2fe",
        "300": "#a5b4fc",
        "400": "#818cf8",
        "500": "#6366f1",
        "600": "#4f46e5",
        "700": "#4338ca",
        "800": "#3730a3",
        "900": "#312e81",
        "950": "#1e1b4b"
      },
      "violet": {
        "50": "#f5f3ff",
        "100": "#ede9fe",
        "200": "#ddd6fe",
        "300": "#c4b5fd",
        "400": "#a78bfa",
        "500": "#8b5cf6",
        "600": "#7c3aed",
        "700": "#6d28d9",
        "800": "#5b21b6",
        "900": "#4c1d95",
        "950": "#2e1065"
      },
      "purple": {
        "50": "#faf5ff",
        "100": "#f3e8ff",
        "200": "#e9d5ff",
        "300": "#d8b4fe",
        "400": "#c084fc",
        "500": "#a855f7",
        "600": "#9333ea",
        "700": "#7e22ce",
        "800": "#6b21a8",
        "900": "#581c87",
        "950": "#3b0764"
      },
      "fuchsia": {
        "50": "#fdf4ff",
        "100": "#fae8ff",
        "200": "#f5d0fe",
        "300": "#f0abfc",
        "400": "#e879f9",
        "500": "#d946ef",
        "600": "#c026d3",
        "700": "#a21caf",
        "800": "#86198f",
        "900": "#701a75",
        "950": "#4a044e"
      },
      "pink": {
        "50": "#fdf2f8",
        "100": "#fce7f3",
        "200": "#fbcfe8",
        "300": "#f9a8d4",
        "400": "#f472b6",
        "500": "#ec4899",
        "600": "#db2777",
        "700": "#be185d",
        "800": "#9d174d",
        "900": "#831843",
        "950": "#500724"
      },
      "rose": {
        "50": "#fff1f2",
        "100": "#ffe4e6",
        "200": "#fecdd3",
        "300": "#fda4af",
        "400": "#fb7185",
        "500": "#f43f5e",
        "600": "#e11d48",
        "700": "#be123c",
        "800": "#9f1239",
        "900": "#881337",
        "950": "#4c0519"
      },
      "DEFAULT": "#e5e7eb"
    },
    "divideOpacity": {
      "0": "0",
      "5": "0.05",
      "10": "0.1",
      "15": "0.15",
      "20": "0.2",
      "25": "0.25",
      "30": "0.3",
      "35": "0.35",
      "40": "0.4",
      "45": "0.45",
      "50": "0.5",
      "55": "0.55",
      "60": "0.6",
      "65": "0.65",
      "70": "0.7",
      "75": "0.75",
      "80": "0.8",
      "85": "0.85",
      "90": "0.9",
      "95": "0.95",
      "100": "1"
    },
    "divideWidth": {
      "0": "0px",
      "2": "2px",
      "4": "4px",
      "8": "8px",
      "DEFAULT": "1px"
    },
    "dropShadow": {
      "sm": "0 1px 1px rgb(0 0 0 / 0.05)",
      "DEFAULT": [
        "0 1px 2px rgb(0 0 0 / 0.1)",
        "0 1px 1px rgb(0 0 0 / 0.06)"
      ],
      "md": [
        "0 4px 3px rgb(0 0 0 / 0.07)",
        "0 2px 2px rgb(0 0 0 / 0.06)"
      ],
      "lg": [
        "0 10px 8px rgb(0 0 0 / 0.04)",
        "0 4px 3px rgb(0 0 0 / 0.1)"
      ],
      "xl": [
        "0 20px 13px rgb(0 0 0 / 0.03)",
        "0 8px 5px rgb(0 0 0 / 0.08)"
      ],
      "2xl": "0 25px 25px rgb(0 0 0 / 0.15)",
      "none": "0 0 #0000"
    },
    "fill": {
      "none": "none",
      "inherit": "inherit",
      "current": "currentColor",
      "transparent": "transparent",
      "black": "#000",
      "white": "#fff",
      "slate": {
        "50": "#f8fafc",
        "100": "#f1f5f9",
        "200": "#e2e8f0",
        "300": "#cbd5e1",
        "400": "#94a3b8",
        "500": "#64748b",
        "600": "#475569",
        "700": "#334155",
        "800": "#1e293b",
        "900": "#0f172a",
        "950": "#020617"
      },
      "gray": {
        "50": "#f9fafb",
        "100": "#f3f4f6",
        "200": "#e5e7eb",
        "300": "#d1d5db",
        "400": "#9ca3af",
        "500": "#6b7280",
        "600": "#4b5563",
        "700": "#374151",
        "800": "#1f2937",
        "900": "#111827",
        "950": "#030712"
      },
      "zinc": {
        "50": "#fafafa",
        "100": "#f4f4f5",
        "200": "#e4e4e7",
        "300": "#d4d4d8",
        "400": "#a1a1aa",
        "500": "#71717a",
        "600": "#52525b",
        "700": "#3f3f46",
        "800": "#27272a",
        "900": "#18181b",
        "950": "#09090b"
      },
      "neutral": {
        "50": "#fafafa",
        "100": "#f5f5f5",
        "200": "#e5e5e5",
        "300": "#d4d4d4",
        "400": "#a3a3a3",
        "500": "#737373",
        "600": "#525252",
        "700": "#404040",
        "800": "#262626",
        "900": "#171717",
        "950": "#0a0a0a"
      },
      "stone": {
        "50": "#fafaf9",
        "100": "#f5f5f4",
        "200": "#e7e5e4",
        "300": "#d6d3d1",
        "400": "#a8a29e",
        "500": "#78716c",
        "600": "#57534e",
        "700": "#44403c",
        "800": "#292524",
        "900": "#1c1917",
        "950": "#0c0a09"
      },
      "red": {
        "50": "#fef2f2",
        "100": "#fee2e2",
        "200": "#fecaca",
        "300": "#fca5a5",
        "400": "#f87171",
        "500": "#ef4444",
        "600": "#dc2626",
        "700": "#b91c1c",
        "800": "#991b1b",
        "900": "#7f1d1d",
        "950": "#450a0a"
      },
      "orange": {
        "50": "#fff7ed",
        "100": "#ffedd5",
        "200": "#fed7aa",
        "300": "#fdba74",
        "400": "#fb923c",
        "500": "#f97316",
        "600": "#ea580c",
        "700": "#c2410c",
        "800": "#9a3412",
        "900": "#7c2d12",
        "950": "#431407"
      },
      "amber": {
        "50": "#fffbeb",
        "100": "#fef3c7",
        "200": "#fde68a",
        "300": "#fcd34d",
        "400": "#fbbf24",
        "500": "#f59e0b",
        "600": "#d97706",
        "700": "#b45309",
        "800": "#92400e",
        "900": "#78350f",
        "950": "#451a03"
      },
      "yellow": {
        "50": "#fefce8",
        "100": "#fef9c3",
        "200": "#fef08a",
        "300": "#fde047",
        "400": "#facc15",
        "500": "#eab308",
        "600": "#ca8a04",
        "700": "#a16207",
        "800": "#854d0e",
        "900": "#713f12",
        "950": "#422006"
      },
      "lime": {
        "50": "#f7fee7",
        "100": "#ecfccb",
        "200": "#d9f99d",
        "300": "#bef264",
        "400": "#a3e635",
        "500": "#84cc16",
        "600": "#65a30d",
        "700": "#4d7c0f",
        "800": "#3f6212",
        "900": "#365314",
        "950": "#1a2e05"
      },
      "green": {
        "50": "#f0fdf4",
        "100": "#dcfce7",
        "200": "#bbf7d0",
        "300": "#86efac",
        "400": "#4ade80",
        "500": "#22c55e",
        "600": "#16a34a",
        "700": "#15803d",
        "800": "#166534",
        "900": "#14532d",
        "950": "#052e16"
      },
      "emerald": {
        "50": "#ecfdf5",
        "100": "#d1fae5",
        "200": "#a7f3d0",
        "300": "#6ee7b7",
        "400": "#34d399",
        "500": "#10b981",
        "600": "#059669",
        "700": "#047857",
        "800": "#065f46",
        "900": "#064e3b",
        "950": "#022c22"
      },
      "teal": {
        "50": "#f0fdfa",
        "100": "#ccfbf1",
        "200": "#99f6e4",
        "300": "#5eead4",
        "400": "#2dd4bf",
        "500": "#14b8a6",
        "600": "#0d9488",
        "700": "#0f766e",
        "800": "#115e59",
        "900": "#134e4a",
        "950": "#042f2e"
      },
      "cyan": {
        "50": "#ecfeff",
        "100": "#cffafe",
        "200": "#a5f3fc",
        "300": "#67e8f9",
        "400": "#22d3ee",
        "500": "#06b6d4",
        "600": "#0891b2",
        "700": "#0e7490",
        "800": "#155e75",
        "900": "#164e63",
        "950": "#083344"
      },
      "sky": {
        "50": "#f0f9ff",
        "100": "#e0f2fe",
        "200": "#bae6fd",
        "300": "#7dd3fc",
        "400": "#38bdf8",
        "500": "#0ea5e9",
        "600": "#0284c7",
        "700": "#0369a1",
        "800": "#075985",
        "900": "#0c4a6e",
        "950": "#082f49"
      },
      "blue": {
        "50": "#eff6ff",
        "100": "#dbeafe",
        "200": "#bfdbfe",
        "300": "#93c5fd",
        "400": "#60a5fa",
        "500": "#3b82f6",
        "600": "#2563eb",
        "700": "#1d4ed8",
        "800": "#1e40af",
        "900": "#1e3a8a",
        "950": "#172554"
      },
      "indigo": {
        "50": "#eef2ff",
        "100": "#e0e7ff",
        "200": "#c7d2fe",
        "300": "#a5b4fc",
        "400": "#818cf8",
        "500": "#6366f1",
        "600": "#4f46e5",
        "700": "#4338ca",
        "800": "#3730a3",
        "900": "#312e81",
        "950": "#1e1b4b"
      },
      "violet": {
        "50": "#f5f3ff",
        "100": "#ede9fe",
        "200": "#ddd6fe",
        "300": "#c4b5fd",
        "400": "#a78bfa",
        "500": "#8b5cf6",
        "600": "#7c3aed",
        "700": "#6d28d9",
        "800": "#5b21b6",
        "900": "#4c1d95",
        "950": "#2e1065"
      },
      "purple": {
        "50": "#faf5ff",
        "100": "#f3e8ff",
        "200": "#e9d5ff",
        "300": "#d8b4fe",
        "400": "#c084fc",
        "500": "#a855f7",
        "600": "#9333ea",
        "700": "#7e22ce",
        "800": "#6b21a8",
        "900": "#581c87",
        "950": "#3b0764"
      },
      "fuchsia": {
        "50": "#fdf4ff",
        "100": "#fae8ff",
        "200": "#f5d0fe",
        "300": "#f0abfc",
        "400": "#e879f9",
        "500": "#d946ef",
        "600": "#c026d3",
        "700": "#a21caf",
        "800": "#86198f",
        "900": "#701a75",
        "950": "#4a044e"
      },
      "pink": {
        "50": "#fdf2f8",
        "100": "#fce7f3",
        "200": "#fbcfe8",
        "300": "#f9a8d4",
        "400": "#f472b6",
        "500": "#ec4899",
        "600": "#db2777",
        "700": "#be185d",
        "800": "#9d174d",
        "900": "#831843",
        "950": "#500724"
      },
      "rose": {
        "50": "#fff1f2",
        "100": "#ffe4e6",
        "200": "#fecdd3",
        "300": "#fda4af",
        "400": "#fb7185",
        "500": "#f43f5e",
        "600": "#e11d48",
        "700": "#be123c",
        "800": "#9f1239",
        "900": "#881337",
        "950": "#4c0519"
      }
    },
    "flex": {
      "1": "1 1 0%",
      "auto": "1 1 auto",
      "initial": "0 1 auto",
      "none": "none"
    },
    "flexBasis": {
      "0": "0px",
      "1": "0.25rem",
      "2": "0.5rem",
      "3": "0.75rem",
      "4": "1rem",
      "5": "1.25rem",
      "6": "1.5rem",
      "7": "1.75rem",
      "8": "2rem",
      "9": "2.25rem",
      "10": "2.5rem",
      "11": "2.75rem",
      "12": "3rem",
      "14": "3.5rem",
      "16": "4rem",
      "20": "5rem",
      "24": "6rem",
      "28": "7rem",
      "32": "8rem",
      "36": "9rem",
      "40": "10rem",
      "44": "11rem",
      "48": "12rem",
      "52": "13rem",
      "56": "14rem",
      "60": "15rem",
      "64": "16rem",
      "72": "18rem",
      "80": "20rem",
      "96": "24rem",
      "auto": "auto",
      "px": "1px",
      "0.5": "0.125rem",
      "1.5": "0.375rem",
      "2.5": "0.625rem",
      "3.5": "0.875rem",
      "1/2": "50%",
      "1/3": "33.333333%",
      "2/3": "66.666667%",
      "1/4": "25%",
      "2/4": "50%",
      "3/4": "75%",
      "1/5": "20%",
      "2/5": "40%",
      "3/5": "60%",
      "4/5": "80%",
      "1/6": "16.666667%",
      "2/6": "33.333333%",
      "3/6": "50%",
      "4/6": "66.666667%",
      "5/6": "83.333333%",
      "1/12": "8.333333%",
      "2/12": "16.666667%",
      "3/12": "25%",
      "4/12": "33.333333%",
      "5/12": "41.666667%",
      "6/12": "50%",
      "7/12": "58.333333%",
      "8/12": "66.666667%",
      "9/12": "75%",
      "10/12": "83.333333%",
      "11/12": "91.666667%",
      "full": "100%"
    },
    "flexGrow": {
      "0": "0",
      "DEFAULT": "1"
    },
    "flexShrink": {
      "0": "0",
      "DEFAULT": "1"
    },
    "fontFamily": {
      "sans": [
        "ui-sans-serif",
        "system-ui",
        "sans-serif",
        '"Apple Color Emoji"',
        '"Segoe UI Emoji"',
        '"Segoe UI Symbol"',
        '"Noto Color Emoji"'
      ],
      "serif": [
        "ui-serif",
        "Georgia",
        "Cambria",
        '"Times New Roman"',
        "Times",
        "serif"
      ],
      "mono": [
        "ui-monospace",
        "SFMono-Regular",
        "Menlo",
        "Monaco",
        "Consolas",
        '"Liberation Mono"',
        '"Courier New"',
        "monospace"
      ]
    },
    "fontSize": {
      "xs": [
        "0.75rem",
        {
          "lineHeight": "1rem"
        }
      ],
      "sm": [
        "0.875rem",
        {
          "lineHeight": "1.25rem"
        }
      ],
      "base": [
        "1rem",
        {
          "lineHeight": "1.5rem"
        }
      ],
      "lg": [
        "1.125rem",
        {
          "lineHeight": "1.75rem"
        }
      ],
      "xl": [
        "1.25rem",
        {
          "lineHeight": "1.75rem"
        }
      ],
      "2xl": [
        "1.5rem",
        {
          "lineHeight": "2rem"
        }
      ],
      "3xl": [
        "1.875rem",
        {
          "lineHeight": "2.25rem"
        }
      ],
      "4xl": [
        "2.25rem",
        {
          "lineHeight": "2.5rem"
        }
      ],
      "5xl": [
        "3rem",
        {
          "lineHeight": "1"
        }
      ],
      "6xl": [
        "3.75rem",
        {
          "lineHeight": "1"
        }
      ],
      "7xl": [
        "4.5rem",
        {
          "lineHeight": "1"
        }
      ],
      "8xl": [
        "6rem",
        {
          "lineHeight": "1"
        }
      ],
      "9xl": [
        "8rem",
        {
          "lineHeight": "1"
        }
      ]
    },
    "fontWeight": {
      "thin": "100",
      "extralight": "200",
      "light": "300",
      "normal": "400",
      "medium": "500",
      "semibold": "600",
      "bold": "700",
      "extrabold": "800",
      "black": "900"
    },
    "gap": {
      "0": "0px",
      "1": "0.25rem",
      "2": "0.5rem",
      "3": "0.75rem",
      "4": "1rem",
      "5": "1.25rem",
      "6": "1.5rem",
      "7": "1.75rem",
      "8": "2rem",
      "9": "2.25rem",
      "10": "2.5rem",
      "11": "2.75rem",
      "12": "3rem",
      "14": "3.5rem",
      "16": "4rem",
      "20": "5rem",
      "24": "6rem",
      "28": "7rem",
      "32": "8rem",
      "36": "9rem",
      "40": "10rem",
      "44": "11rem",
      "48": "12rem",
      "52": "13rem",
      "56": "14rem",
      "60": "15rem",
      "64": "16rem",
      "72": "18rem",
      "80": "20rem",
      "96": "24rem",
      "px": "1px",
      "0.5": "0.125rem",
      "1.5": "0.375rem",
      "2.5": "0.625rem",
      "3.5": "0.875rem"
    },
    "gradientColorStops": {
      "inherit": "inherit",
      "current": "currentColor",
      "transparent": "transparent",
      "black": "#000",
      "white": "#fff",
      "slate": {
        "50": "#f8fafc",
        "100": "#f1f5f9",
        "200": "#e2e8f0",
        "300": "#cbd5e1",
        "400": "#94a3b8",
        "500": "#64748b",
        "600": "#475569",
        "700": "#334155",
        "800": "#1e293b",
        "900": "#0f172a",
        "950": "#020617"
      },
      "gray": {
        "50": "#f9fafb",
        "100": "#f3f4f6",
        "200": "#e5e7eb",
        "300": "#d1d5db",
        "400": "#9ca3af",
        "500": "#6b7280",
        "600": "#4b5563",
        "700": "#374151",
        "800": "#1f2937",
        "900": "#111827",
        "950": "#030712"
      },
      "zinc": {
        "50": "#fafafa",
        "100": "#f4f4f5",
        "200": "#e4e4e7",
        "300": "#d4d4d8",
        "400": "#a1a1aa",
        "500": "#71717a",
        "600": "#52525b",
        "700": "#3f3f46",
        "800": "#27272a",
        "900": "#18181b",
        "950": "#09090b"
      },
      "neutral": {
        "50": "#fafafa",
        "100": "#f5f5f5",
        "200": "#e5e5e5",
        "300": "#d4d4d4",
        "400": "#a3a3a3",
        "500": "#737373",
        "600": "#525252",
        "700": "#404040",
        "800": "#262626",
        "900": "#171717",
        "950": "#0a0a0a"
      },
      "stone": {
        "50": "#fafaf9",
        "100": "#f5f5f4",
        "200": "#e7e5e4",
        "300": "#d6d3d1",
        "400": "#a8a29e",
        "500": "#78716c",
        "600": "#57534e",
        "700": "#44403c",
        "800": "#292524",
        "900": "#1c1917",
        "950": "#0c0a09"
      },
      "red": {
        "50": "#fef2f2",
        "100": "#fee2e2",
        "200": "#fecaca",
        "300": "#fca5a5",
        "400": "#f87171",
        "500": "#ef4444",
        "600": "#dc2626",
        "700": "#b91c1c",
        "800": "#991b1b",
        "900": "#7f1d1d",
        "950": "#450a0a"
      },
      "orange": {
        "50": "#fff7ed",
        "100": "#ffedd5",
        "200": "#fed7aa",
        "300": "#fdba74",
        "400": "#fb923c",
        "500": "#f97316",
        "600": "#ea580c",
        "700": "#c2410c",
        "800": "#9a3412",
        "900": "#7c2d12",
        "950": "#431407"
      },
      "amber": {
        "50": "#fffbeb",
        "100": "#fef3c7",
        "200": "#fde68a",
        "300": "#fcd34d",
        "400": "#fbbf24",
        "500": "#f59e0b",
        "600": "#d97706",
        "700": "#b45309",
        "800": "#92400e",
        "900": "#78350f",
        "950": "#451a03"
      },
      "yellow": {
        "50": "#fefce8",
        "100": "#fef9c3",
        "200": "#fef08a",
        "300": "#fde047",
        "400": "#facc15",
        "500": "#eab308",
        "600": "#ca8a04",
        "700": "#a16207",
        "800": "#854d0e",
        "900": "#713f12",
        "950": "#422006"
      },
      "lime": {
        "50": "#f7fee7",
        "100": "#ecfccb",
        "200": "#d9f99d",
        "300": "#bef264",
        "400": "#a3e635",
        "500": "#84cc16",
        "600": "#65a30d",
        "700": "#4d7c0f",
        "800": "#3f6212",
        "900": "#365314",
        "950": "#1a2e05"
      },
      "green": {
        "50": "#f0fdf4",
        "100": "#dcfce7",
        "200": "#bbf7d0",
        "300": "#86efac",
        "400": "#4ade80",
        "500": "#22c55e",
        "600": "#16a34a",
        "700": "#15803d",
        "800": "#166534",
        "900": "#14532d",
        "950": "#052e16"
      },
      "emerald": {
        "50": "#ecfdf5",
        "100": "#d1fae5",
        "200": "#a7f3d0",
        "300": "#6ee7b7",
        "400": "#34d399",
        "500": "#10b981",
        "600": "#059669",
        "700": "#047857",
        "800": "#065f46",
        "900": "#064e3b",
        "950": "#022c22"
      },
      "teal": {
        "50": "#f0fdfa",
        "100": "#ccfbf1",
        "200": "#99f6e4",
        "300": "#5eead4",
        "400": "#2dd4bf",
        "500": "#14b8a6",
        "600": "#0d9488",
        "700": "#0f766e",
        "800": "#115e59",
        "900": "#134e4a",
        "950": "#042f2e"
      },
      "cyan": {
        "50": "#ecfeff",
        "100": "#cffafe",
        "200": "#a5f3fc",
        "300": "#67e8f9",
        "400": "#22d3ee",
        "500": "#06b6d4",
        "600": "#0891b2",
        "700": "#0e7490",
        "800": "#155e75",
        "900": "#164e63",
        "950": "#083344"
      },
      "sky": {
        "50": "#f0f9ff",
        "100": "#e0f2fe",
        "200": "#bae6fd",
        "300": "#7dd3fc",
        "400": "#38bdf8",
        "500": "#0ea5e9",
        "600": "#0284c7",
        "700": "#0369a1",
        "800": "#075985",
        "900": "#0c4a6e",
        "950": "#082f49"
      },
      "blue": {
        "50": "#eff6ff",
        "100": "#dbeafe",
        "200": "#bfdbfe",
        "300": "#93c5fd",
        "400": "#60a5fa",
        "500": "#3b82f6",
        "600": "#2563eb",
        "700": "#1d4ed8",
        "800": "#1e40af",
        "900": "#1e3a8a",
        "950": "#172554"
      },
      "indigo": {
        "50": "#eef2ff",
        "100": "#e0e7ff",
        "200": "#c7d2fe",
        "300": "#a5b4fc",
        "400": "#818cf8",
        "500": "#6366f1",
        "600": "#4f46e5",
        "700": "#4338ca",
        "800": "#3730a3",
        "900": "#312e81",
        "950": "#1e1b4b"
      },
      "violet": {
        "50": "#f5f3ff",
        "100": "#ede9fe",
        "200": "#ddd6fe",
        "300": "#c4b5fd",
        "400": "#a78bfa",
        "500": "#8b5cf6",
        "600": "#7c3aed",
        "700": "#6d28d9",
        "800": "#5b21b6",
        "900": "#4c1d95",
        "950": "#2e1065"
      },
      "purple": {
        "50": "#faf5ff",
        "100": "#f3e8ff",
        "200": "#e9d5ff",
        "300": "#d8b4fe",
        "400": "#c084fc",
        "500": "#a855f7",
        "600": "#9333ea",
        "700": "#7e22ce",
        "800": "#6b21a8",
        "900": "#581c87",
        "950": "#3b0764"
      },
      "fuchsia": {
        "50": "#fdf4ff",
        "100": "#fae8ff",
        "200": "#f5d0fe",
        "300": "#f0abfc",
        "400": "#e879f9",
        "500": "#d946ef",
        "600": "#c026d3",
        "700": "#a21caf",
        "800": "#86198f",
        "900": "#701a75",
        "950": "#4a044e"
      },
      "pink": {
        "50": "#fdf2f8",
        "100": "#fce7f3",
        "200": "#fbcfe8",
        "300": "#f9a8d4",
        "400": "#f472b6",
        "500": "#ec4899",
        "600": "#db2777",
        "700": "#be185d",
        "800": "#9d174d",
        "900": "#831843",
        "950": "#500724"
      },
      "rose": {
        "50": "#fff1f2",
        "100": "#ffe4e6",
        "200": "#fecdd3",
        "300": "#fda4af",
        "400": "#fb7185",
        "500": "#f43f5e",
        "600": "#e11d48",
        "700": "#be123c",
        "800": "#9f1239",
        "900": "#881337",
        "950": "#4c0519"
      }
    },
    "gradientColorStopPositions": {
      "0%": "0%",
      "5%": "5%",
      "10%": "10%",
      "15%": "15%",
      "20%": "20%",
      "25%": "25%",
      "30%": "30%",
      "35%": "35%",
      "40%": "40%",
      "45%": "45%",
      "50%": "50%",
      "55%": "55%",
      "60%": "60%",
      "65%": "65%",
      "70%": "70%",
      "75%": "75%",
      "80%": "80%",
      "85%": "85%",
      "90%": "90%",
      "95%": "95%",
      "100%": "100%"
    },
    "grayscale": {
      "0": "0",
      "DEFAULT": "100%"
    },
    "gridAutoColumns": {
      "auto": "auto",
      "min": "min-content",
      "max": "max-content",
      "fr": "minmax(0, 1fr)"
    },
    "gridAutoRows": {
      "auto": "auto",
      "min": "min-content",
      "max": "max-content",
      "fr": "minmax(0, 1fr)"
    },
    "gridColumn": {
      "auto": "auto",
      "span-1": "span 1 / span 1",
      "span-2": "span 2 / span 2",
      "span-3": "span 3 / span 3",
      "span-4": "span 4 / span 4",
      "span-5": "span 5 / span 5",
      "span-6": "span 6 / span 6",
      "span-7": "span 7 / span 7",
      "span-8": "span 8 / span 8",
      "span-9": "span 9 / span 9",
      "span-10": "span 10 / span 10",
      "span-11": "span 11 / span 11",
      "span-12": "span 12 / span 12",
      "span-full": "1 / -1"
    },
    "gridColumnEnd": {
      "1": "1",
      "2": "2",
      "3": "3",
      "4": "4",
      "5": "5",
      "6": "6",
      "7": "7",
      "8": "8",
      "9": "9",
      "10": "10",
      "11": "11",
      "12": "12",
      "13": "13",
      "auto": "auto"
    },
    "gridColumnStart": {
      "1": "1",
      "2": "2",
      "3": "3",
      "4": "4",
      "5": "5",
      "6": "6",
      "7": "7",
      "8": "8",
      "9": "9",
      "10": "10",
      "11": "11",
      "12": "12",
      "13": "13",
      "auto": "auto"
    },
    "gridRow": {
      "auto": "auto",
      "span-1": "span 1 / span 1",
      "span-2": "span 2 / span 2",
      "span-3": "span 3 / span 3",
      "span-4": "span 4 / span 4",
      "span-5": "span 5 / span 5",
      "span-6": "span 6 / span 6",
      "span-7": "span 7 / span 7",
      "span-8": "span 8 / span 8",
      "span-9": "span 9 / span 9",
      "span-10": "span 10 / span 10",
      "span-11": "span 11 / span 11",
      "span-12": "span 12 / span 12",
      "span-full": "1 / -1"
    },
    "gridRowEnd": {
      "1": "1",
      "2": "2",
      "3": "3",
      "4": "4",
      "5": "5",
      "6": "6",
      "7": "7",
      "8": "8",
      "9": "9",
      "10": "10",
      "11": "11",
      "12": "12",
      "13": "13",
      "auto": "auto"
    },
    "gridRowStart": {
      "1": "1",
      "2": "2",
      "3": "3",
      "4": "4",
      "5": "5",
      "6": "6",
      "7": "7",
      "8": "8",
      "9": "9",
      "10": "10",
      "11": "11",
      "12": "12",
      "13": "13",
      "auto": "auto"
    },
    "gridTemplateColumns": {
      "1": "repeat(1, minmax(0, 1fr))",
      "2": "repeat(2, minmax(0, 1fr))",
      "3": "repeat(3, minmax(0, 1fr))",
      "4": "repeat(4, minmax(0, 1fr))",
      "5": "repeat(5, minmax(0, 1fr))",
      "6": "repeat(6, minmax(0, 1fr))",
      "7": "repeat(7, minmax(0, 1fr))",
      "8": "repeat(8, minmax(0, 1fr))",
      "9": "repeat(9, minmax(0, 1fr))",
      "10": "repeat(10, minmax(0, 1fr))",
      "11": "repeat(11, minmax(0, 1fr))",
      "12": "repeat(12, minmax(0, 1fr))",
      "none": "none",
      "subgrid": "subgrid"
    },
    "gridTemplateRows": {
      "1": "repeat(1, minmax(0, 1fr))",
      "2": "repeat(2, minmax(0, 1fr))",
      "3": "repeat(3, minmax(0, 1fr))",
      "4": "repeat(4, minmax(0, 1fr))",
      "5": "repeat(5, minmax(0, 1fr))",
      "6": "repeat(6, minmax(0, 1fr))",
      "7": "repeat(7, minmax(0, 1fr))",
      "8": "repeat(8, minmax(0, 1fr))",
      "9": "repeat(9, minmax(0, 1fr))",
      "10": "repeat(10, minmax(0, 1fr))",
      "11": "repeat(11, minmax(0, 1fr))",
      "12": "repeat(12, minmax(0, 1fr))",
      "none": "none",
      "subgrid": "subgrid"
    },
    "height": {
      "0": "0px",
      "1": "0.25rem",
      "2": "0.5rem",
      "3": "0.75rem",
      "4": "1rem",
      "5": "1.25rem",
      "6": "1.5rem",
      "7": "1.75rem",
      "8": "2rem",
      "9": "2.25rem",
      "10": "2.5rem",
      "11": "2.75rem",
      "12": "3rem",
      "14": "3.5rem",
      "16": "4rem",
      "20": "5rem",
      "24": "6rem",
      "28": "7rem",
      "32": "8rem",
      "36": "9rem",
      "40": "10rem",
      "44": "11rem",
      "48": "12rem",
      "52": "13rem",
      "56": "14rem",
      "60": "15rem",
      "64": "16rem",
      "72": "18rem",
      "80": "20rem",
      "96": "24rem",
      "auto": "auto",
      "px": "1px",
      "0.5": "0.125rem",
      "1.5": "0.375rem",
      "2.5": "0.625rem",
      "3.5": "0.875rem",
      "1/2": "50%",
      "1/3": "33.333333%",
      "2/3": "66.666667%",
      "1/4": "25%",
      "2/4": "50%",
      "3/4": "75%",
      "1/5": "20%",
      "2/5": "40%",
      "3/5": "60%",
      "4/5": "80%",
      "1/6": "16.666667%",
      "2/6": "33.333333%",
      "3/6": "50%",
      "4/6": "66.666667%",
      "5/6": "83.333333%",
      "full": "100%",
      "screen": "100vh",
      "svh": "100svh",
      "lvh": "100lvh",
      "dvh": "100dvh",
      "min": "min-content",
      "max": "max-content",
      "fit": "fit-content"
    },
    "hueRotate": {
      "0": "0deg",
      "15": "15deg",
      "30": "30deg",
      "60": "60deg",
      "90": "90deg",
      "180": "180deg"
    },
    "inset": {
      "0": "0px",
      "1": "0.25rem",
      "2": "0.5rem",
      "3": "0.75rem",
      "4": "1rem",
      "5": "1.25rem",
      "6": "1.5rem",
      "7": "1.75rem",
      "8": "2rem",
      "9": "2.25rem",
      "10": "2.5rem",
      "11": "2.75rem",
      "12": "3rem",
      "14": "3.5rem",
      "16": "4rem",
      "20": "5rem",
      "24": "6rem",
      "28": "7rem",
      "32": "8rem",
      "36": "9rem",
      "40": "10rem",
      "44": "11rem",
      "48": "12rem",
      "52": "13rem",
      "56": "14rem",
      "60": "15rem",
      "64": "16rem",
      "72": "18rem",
      "80": "20rem",
      "96": "24rem",
      "auto": "auto",
      "px": "1px",
      "0.5": "0.125rem",
      "1.5": "0.375rem",
      "2.5": "0.625rem",
      "3.5": "0.875rem",
      "1/2": "50%",
      "1/3": "33.333333%",
      "2/3": "66.666667%",
      "1/4": "25%",
      "2/4": "50%",
      "3/4": "75%",
      "full": "100%"
    },
    "invert": {
      "0": "0",
      "DEFAULT": "100%"
    },
    "keyframes": {
      "spin": {
        "to": {
          "transform": "rotate(360deg)"
        }
      },
      "ping": {
        "75%, 100%": {
          "transform": "scale(2)",
          "opacity": "0"
        }
      },
      "pulse": {
        "50%": {
          "opacity": ".5"
        }
      },
      "bounce": {
        "0%, 100%": {
          "transform": "translateY(-25%)",
          "animationTimingFunction": "cubic-bezier(0.8,0,1,1)"
        },
        "50%": {
          "transform": "none",
          "animationTimingFunction": "cubic-bezier(0,0,0.2,1)"
        }
      }
    },
    "letterSpacing": {
      "tighter": "-0.05em",
      "tight": "-0.025em",
      "normal": "0em",
      "wide": "0.025em",
      "wider": "0.05em",
      "widest": "0.1em"
    },
    "lineHeight": {
      "3": ".75rem",
      "4": "1rem",
      "5": "1.25rem",
      "6": "1.5rem",
      "7": "1.75rem",
      "8": "2rem",
      "9": "2.25rem",
      "10": "2.5rem",
      "none": "1",
      "tight": "1.25",
      "snug": "1.375",
      "normal": "1.5",
      "relaxed": "1.625",
      "loose": "2"
    },
    "listStyleType": {
      "none": "none",
      "disc": "disc",
      "decimal": "decimal"
    },
    "listStyleImage": {
      "none": "none"
    },
    "margin": {
      "0": "0px",
      "1": "0.25rem",
      "2": "0.5rem",
      "3": "0.75rem",
      "4": "1rem",
      "5": "1.25rem",
      "6": "1.5rem",
      "7": "1.75rem",
      "8": "2rem",
      "9": "2.25rem",
      "10": "2.5rem",
      "11": "2.75rem",
      "12": "3rem",
      "14": "3.5rem",
      "16": "4rem",
      "20": "5rem",
      "24": "6rem",
      "28": "7rem",
      "32": "8rem",
      "36": "9rem",
      "40": "10rem",
      "44": "11rem",
      "48": "12rem",
      "52": "13rem",
      "56": "14rem",
      "60": "15rem",
      "64": "16rem",
      "72": "18rem",
      "80": "20rem",
      "96": "24rem",
      "auto": "auto",
      "px": "1px",
      "0.5": "0.125rem",
      "1.5": "0.375rem",
      "2.5": "0.625rem",
      "3.5": "0.875rem"
    },
    "lineClamp": {
      "1": "1",
      "2": "2",
      "3": "3",
      "4": "4",
      "5": "5",
      "6": "6"
    },
    "maxHeight": {
      "0": "0px",
      "1": "0.25rem",
      "2": "0.5rem",
      "3": "0.75rem",
      "4": "1rem",
      "5": "1.25rem",
      "6": "1.5rem",
      "7": "1.75rem",
      "8": "2rem",
      "9": "2.25rem",
      "10": "2.5rem",
      "11": "2.75rem",
      "12": "3rem",
      "14": "3.5rem",
      "16": "4rem",
      "20": "5rem",
      "24": "6rem",
      "28": "7rem",
      "32": "8rem",
      "36": "9rem",
      "40": "10rem",
      "44": "11rem",
      "48": "12rem",
      "52": "13rem",
      "56": "14rem",
      "60": "15rem",
      "64": "16rem",
      "72": "18rem",
      "80": "20rem",
      "96": "24rem",
      "px": "1px",
      "0.5": "0.125rem",
      "1.5": "0.375rem",
      "2.5": "0.625rem",
      "3.5": "0.875rem",
      "none": "none",
      "full": "100%",
      "screen": "100vh",
      "svh": "100svh",
      "lvh": "100lvh",
      "dvh": "100dvh",
      "min": "min-content",
      "max": "max-content",
      "fit": "fit-content"
    },
    "maxWidth": {
      "0": "0px",
      "1": "0.25rem",
      "2": "0.5rem",
      "3": "0.75rem",
      "4": "1rem",
      "5": "1.25rem",
      "6": "1.5rem",
      "7": "1.75rem",
      "8": "2rem",
      "9": "2.25rem",
      "10": "2.5rem",
      "11": "2.75rem",
      "12": "3rem",
      "14": "3.5rem",
      "16": "4rem",
      "20": "5rem",
      "24": "6rem",
      "28": "7rem",
      "32": "8rem",
      "36": "9rem",
      "40": "10rem",
      "44": "11rem",
      "48": "12rem",
      "52": "13rem",
      "56": "14rem",
      "60": "15rem",
      "64": "16rem",
      "72": "18rem",
      "80": "20rem",
      "96": "24rem",
      "px": "1px",
      "0.5": "0.125rem",
      "1.5": "0.375rem",
      "2.5": "0.625rem",
      "3.5": "0.875rem",
      "none": "none",
      "xs": "20rem",
      "sm": "24rem",
      "md": "28rem",
      "lg": "32rem",
      "xl": "36rem",
      "2xl": "42rem",
      "3xl": "48rem",
      "4xl": "56rem",
      "5xl": "64rem",
      "6xl": "72rem",
      "7xl": "80rem",
      "full": "100%",
      "min": "min-content",
      "max": "max-content",
      "fit": "fit-content",
      "prose": "65ch",
      "screen-sm": "640px",
      "screen-md": "768px",
      "screen-lg": "1024px",
      "screen-xl": "1280px",
      "screen-2xl": "1536px"
    },
    "minHeight": {
      "0": "0px",
      "1": "0.25rem",
      "2": "0.5rem",
      "3": "0.75rem",
      "4": "1rem",
      "5": "1.25rem",
      "6": "1.5rem",
      "7": "1.75rem",
      "8": "2rem",
      "9": "2.25rem",
      "10": "2.5rem",
      "11": "2.75rem",
      "12": "3rem",
      "14": "3.5rem",
      "16": "4rem",
      "20": "5rem",
      "24": "6rem",
      "28": "7rem",
      "32": "8rem",
      "36": "9rem",
      "40": "10rem",
      "44": "11rem",
      "48": "12rem",
      "52": "13rem",
      "56": "14rem",
      "60": "15rem",
      "64": "16rem",
      "72": "18rem",
      "80": "20rem",
      "96": "24rem",
      "px": "1px",
      "0.5": "0.125rem",
      "1.5": "0.375rem",
      "2.5": "0.625rem",
      "3.5": "0.875rem",
      "full": "100%",
      "screen": "100vh",
      "svh": "100svh",
      "lvh": "100lvh",
      "dvh": "100dvh",
      "min": "min-content",
      "max": "max-content",
      "fit": "fit-content"
    },
    "minWidth": {
      "0": "0px",
      "1": "0.25rem",
      "2": "0.5rem",
      "3": "0.75rem",
      "4": "1rem",
      "5": "1.25rem",
      "6": "1.5rem",
      "7": "1.75rem",
      "8": "2rem",
      "9": "2.25rem",
      "10": "2.5rem",
      "11": "2.75rem",
      "12": "3rem",
      "14": "3.5rem",
      "16": "4rem",
      "20": "5rem",
      "24": "6rem",
      "28": "7rem",
      "32": "8rem",
      "36": "9rem",
      "40": "10rem",
      "44": "11rem",
      "48": "12rem",
      "52": "13rem",
      "56": "14rem",
      "60": "15rem",
      "64": "16rem",
      "72": "18rem",
      "80": "20rem",
      "96": "24rem",
      "px": "1px",
      "0.5": "0.125rem",
      "1.5": "0.375rem",
      "2.5": "0.625rem",
      "3.5": "0.875rem",
      "full": "100%",
      "min": "min-content",
      "max": "max-content",
      "fit": "fit-content"
    },
    "objectPosition": {
      "bottom": "bottom",
      "center": "center",
      "left": "left",
      "left-bottom": "left bottom",
      "left-top": "left top",
      "right": "right",
      "right-bottom": "right bottom",
      "right-top": "right top",
      "top": "top"
    },
    "opacity": {
      "0": "0",
      "5": "0.05",
      "10": "0.1",
      "15": "0.15",
      "20": "0.2",
      "25": "0.25",
      "30": "0.3",
      "35": "0.35",
      "40": "0.4",
      "45": "0.45",
      "50": "0.5",
      "55": "0.55",
      "60": "0.6",
      "65": "0.65",
      "70": "0.7",
      "75": "0.75",
      "80": "0.8",
      "85": "0.85",
      "90": "0.9",
      "95": "0.95",
      "100": "1"
    },
    "order": {
      "1": "1",
      "2": "2",
      "3": "3",
      "4": "4",
      "5": "5",
      "6": "6",
      "7": "7",
      "8": "8",
      "9": "9",
      "10": "10",
      "11": "11",
      "12": "12",
      "first": "-9999",
      "last": "9999",
      "none": "0"
    },
    "outlineColor": {
      "inherit": "inherit",
      "current": "currentColor",
      "transparent": "transparent",
      "black": "#000",
      "white": "#fff",
      "slate": {
        "50": "#f8fafc",
        "100": "#f1f5f9",
        "200": "#e2e8f0",
        "300": "#cbd5e1",
        "400": "#94a3b8",
        "500": "#64748b",
        "600": "#475569",
        "700": "#334155",
        "800": "#1e293b",
        "900": "#0f172a",
        "950": "#020617"
      },
      "gray": {
        "50": "#f9fafb",
        "100": "#f3f4f6",
        "200": "#e5e7eb",
        "300": "#d1d5db",
        "400": "#9ca3af",
        "500": "#6b7280",
        "600": "#4b5563",
        "700": "#374151",
        "800": "#1f2937",
        "900": "#111827",
        "950": "#030712"
      },
      "zinc": {
        "50": "#fafafa",
        "100": "#f4f4f5",
        "200": "#e4e4e7",
        "300": "#d4d4d8",
        "400": "#a1a1aa",
        "500": "#71717a",
        "600": "#52525b",
        "700": "#3f3f46",
        "800": "#27272a",
        "900": "#18181b",
        "950": "#09090b"
      },
      "neutral": {
        "50": "#fafafa",
        "100": "#f5f5f5",
        "200": "#e5e5e5",
        "300": "#d4d4d4",
        "400": "#a3a3a3",
        "500": "#737373",
        "600": "#525252",
        "700": "#404040",
        "800": "#262626",
        "900": "#171717",
        "950": "#0a0a0a"
      },
      "stone": {
        "50": "#fafaf9",
        "100": "#f5f5f4",
        "200": "#e7e5e4",
        "300": "#d6d3d1",
        "400": "#a8a29e",
        "500": "#78716c",
        "600": "#57534e",
        "700": "#44403c",
        "800": "#292524",
        "900": "#1c1917",
        "950": "#0c0a09"
      },
      "red": {
        "50": "#fef2f2",
        "100": "#fee2e2",
        "200": "#fecaca",
        "300": "#fca5a5",
        "400": "#f87171",
        "500": "#ef4444",
        "600": "#dc2626",
        "700": "#b91c1c",
        "800": "#991b1b",
        "900": "#7f1d1d",
        "950": "#450a0a"
      },
      "orange": {
        "50": "#fff7ed",
        "100": "#ffedd5",
        "200": "#fed7aa",
        "300": "#fdba74",
        "400": "#fb923c",
        "500": "#f97316",
        "600": "#ea580c",
        "700": "#c2410c",
        "800": "#9a3412",
        "900": "#7c2d12",
        "950": "#431407"
      },
      "amber": {
        "50": "#fffbeb",
        "100": "#fef3c7",
        "200": "#fde68a",
        "300": "#fcd34d",
        "400": "#fbbf24",
        "500": "#f59e0b",
        "600": "#d97706",
        "700": "#b45309",
        "800": "#92400e",
        "900": "#78350f",
        "950": "#451a03"
      },
      "yellow": {
        "50": "#fefce8",
        "100": "#fef9c3",
        "200": "#fef08a",
        "300": "#fde047",
        "400": "#facc15",
        "500": "#eab308",
        "600": "#ca8a04",
        "700": "#a16207",
        "800": "#854d0e",
        "900": "#713f12",
        "950": "#422006"
      },
      "lime": {
        "50": "#f7fee7",
        "100": "#ecfccb",
        "200": "#d9f99d",
        "300": "#bef264",
        "400": "#a3e635",
        "500": "#84cc16",
        "600": "#65a30d",
        "700": "#4d7c0f",
        "800": "#3f6212",
        "900": "#365314",
        "950": "#1a2e05"
      },
      "green": {
        "50": "#f0fdf4",
        "100": "#dcfce7",
        "200": "#bbf7d0",
        "300": "#86efac",
        "400": "#4ade80",
        "500": "#22c55e",
        "600": "#16a34a",
        "700": "#15803d",
        "800": "#166534",
        "900": "#14532d",
        "950": "#052e16"
      },
      "emerald": {
        "50": "#ecfdf5",
        "100": "#d1fae5",
        "200": "#a7f3d0",
        "300": "#6ee7b7",
        "400": "#34d399",
        "500": "#10b981",
        "600": "#059669",
        "700": "#047857",
        "800": "#065f46",
        "900": "#064e3b",
        "950": "#022c22"
      },
      "teal": {
        "50": "#f0fdfa",
        "100": "#ccfbf1",
        "200": "#99f6e4",
        "300": "#5eead4",
        "400": "#2dd4bf",
        "500": "#14b8a6",
        "600": "#0d9488",
        "700": "#0f766e",
        "800": "#115e59",
        "900": "#134e4a",
        "950": "#042f2e"
      },
      "cyan": {
        "50": "#ecfeff",
        "100": "#cffafe",
        "200": "#a5f3fc",
        "300": "#67e8f9",
        "400": "#22d3ee",
        "500": "#06b6d4",
        "600": "#0891b2",
        "700": "#0e7490",
        "800": "#155e75",
        "900": "#164e63",
        "950": "#083344"
      },
      "sky": {
        "50": "#f0f9ff",
        "100": "#e0f2fe",
        "200": "#bae6fd",
        "300": "#7dd3fc",
        "400": "#38bdf8",
        "500": "#0ea5e9",
        "600": "#0284c7",
        "700": "#0369a1",
        "800": "#075985",
        "900": "#0c4a6e",
        "950": "#082f49"
      },
      "blue": {
        "50": "#eff6ff",
        "100": "#dbeafe",
        "200": "#bfdbfe",
        "300": "#93c5fd",
        "400": "#60a5fa",
        "500": "#3b82f6",
        "600": "#2563eb",
        "700": "#1d4ed8",
        "800": "#1e40af",
        "900": "#1e3a8a",
        "950": "#172554"
      },
      "indigo": {
        "50": "#eef2ff",
        "100": "#e0e7ff",
        "200": "#c7d2fe",
        "300": "#a5b4fc",
        "400": "#818cf8",
        "500": "#6366f1",
        "600": "#4f46e5",
        "700": "#4338ca",
        "800": "#3730a3",
        "900": "#312e81",
        "950": "#1e1b4b"
      },
      "violet": {
        "50": "#f5f3ff",
        "100": "#ede9fe",
        "200": "#ddd6fe",
        "300": "#c4b5fd",
        "400": "#a78bfa",
        "500": "#8b5cf6",
        "600": "#7c3aed",
        "700": "#6d28d9",
        "800": "#5b21b6",
        "900": "#4c1d95",
        "950": "#2e1065"
      },
      "purple": {
        "50": "#faf5ff",
        "100": "#f3e8ff",
        "200": "#e9d5ff",
        "300": "#d8b4fe",
        "400": "#c084fc",
        "500": "#a855f7",
        "600": "#9333ea",
        "700": "#7e22ce",
        "800": "#6b21a8",
        "900": "#581c87",
        "950": "#3b0764"
      },
      "fuchsia": {
        "50": "#fdf4ff",
        "100": "#fae8ff",
        "200": "#f5d0fe",
        "300": "#f0abfc",
        "400": "#e879f9",
        "500": "#d946ef",
        "600": "#c026d3",
        "700": "#a21caf",
        "800": "#86198f",
        "900": "#701a75",
        "950": "#4a044e"
      },
      "pink": {
        "50": "#fdf2f8",
        "100": "#fce7f3",
        "200": "#fbcfe8",
        "300": "#f9a8d4",
        "400": "#f472b6",
        "500": "#ec4899",
        "600": "#db2777",
        "700": "#be185d",
        "800": "#9d174d",
        "900": "#831843",
        "950": "#500724"
      },
      "rose": {
        "50": "#fff1f2",
        "100": "#ffe4e6",
        "200": "#fecdd3",
        "300": "#fda4af",
        "400": "#fb7185",
        "500": "#f43f5e",
        "600": "#e11d48",
        "700": "#be123c",
        "800": "#9f1239",
        "900": "#881337",
        "950": "#4c0519"
      }
    },
    "outlineOffset": {
      "0": "0px",
      "1": "1px",
      "2": "2px",
      "4": "4px",
      "8": "8px"
    },
    "outlineWidth": {
      "0": "0px",
      "1": "1px",
      "2": "2px",
      "4": "4px",
      "8": "8px"
    },
    "padding": {
      "0": "0px",
      "1": "0.25rem",
      "2": "0.5rem",
      "3": "0.75rem",
      "4": "1rem",
      "5": "1.25rem",
      "6": "1.5rem",
      "7": "1.75rem",
      "8": "2rem",
      "9": "2.25rem",
      "10": "2.5rem",
      "11": "2.75rem",
      "12": "3rem",
      "14": "3.5rem",
      "16": "4rem",
      "20": "5rem",
      "24": "6rem",
      "28": "7rem",
      "32": "8rem",
      "36": "9rem",
      "40": "10rem",
      "44": "11rem",
      "48": "12rem",
      "52": "13rem",
      "56": "14rem",
      "60": "15rem",
      "64": "16rem",
      "72": "18rem",
      "80": "20rem",
      "96": "24rem",
      "px": "1px",
      "0.5": "0.125rem",
      "1.5": "0.375rem",
      "2.5": "0.625rem",
      "3.5": "0.875rem"
    },
    "placeholderColor": {
      "inherit": "inherit",
      "current": "currentColor",
      "transparent": "transparent",
      "black": "#000",
      "white": "#fff",
      "slate": {
        "50": "#f8fafc",
        "100": "#f1f5f9",
        "200": "#e2e8f0",
        "300": "#cbd5e1",
        "400": "#94a3b8",
        "500": "#64748b",
        "600": "#475569",
        "700": "#334155",
        "800": "#1e293b",
        "900": "#0f172a",
        "950": "#020617"
      },
      "gray": {
        "50": "#f9fafb",
        "100": "#f3f4f6",
        "200": "#e5e7eb",
        "300": "#d1d5db",
        "400": "#9ca3af",
        "500": "#6b7280",
        "600": "#4b5563",
        "700": "#374151",
        "800": "#1f2937",
        "900": "#111827",
        "950": "#030712"
      },
      "zinc": {
        "50": "#fafafa",
        "100": "#f4f4f5",
        "200": "#e4e4e7",
        "300": "#d4d4d8",
        "400": "#a1a1aa",
        "500": "#71717a",
        "600": "#52525b",
        "700": "#3f3f46",
        "800": "#27272a",
        "900": "#18181b",
        "950": "#09090b"
      },
      "neutral": {
        "50": "#fafafa",
        "100": "#f5f5f5",
        "200": "#e5e5e5",
        "300": "#d4d4d4",
        "400": "#a3a3a3",
        "500": "#737373",
        "600": "#525252",
        "700": "#404040",
        "800": "#262626",
        "900": "#171717",
        "950": "#0a0a0a"
      },
      "stone": {
        "50": "#fafaf9",
        "100": "#f5f5f4",
        "200": "#e7e5e4",
        "300": "#d6d3d1",
        "400": "#a8a29e",
        "500": "#78716c",
        "600": "#57534e",
        "700": "#44403c",
        "800": "#292524",
        "900": "#1c1917",
        "950": "#0c0a09"
      },
      "red": {
        "50": "#fef2f2",
        "100": "#fee2e2",
        "200": "#fecaca",
        "300": "#fca5a5",
        "400": "#f87171",
        "500": "#ef4444",
        "600": "#dc2626",
        "700": "#b91c1c",
        "800": "#991b1b",
        "900": "#7f1d1d",
        "950": "#450a0a"
      },
      "orange": {
        "50": "#fff7ed",
        "100": "#ffedd5",
        "200": "#fed7aa",
        "300": "#fdba74",
        "400": "#fb923c",
        "500": "#f97316",
        "600": "#ea580c",
        "700": "#c2410c",
        "800": "#9a3412",
        "900": "#7c2d12",
        "950": "#431407"
      },
      "amber": {
        "50": "#fffbeb",
        "100": "#fef3c7",
        "200": "#fde68a",
        "300": "#fcd34d",
        "400": "#fbbf24",
        "500": "#f59e0b",
        "600": "#d97706",
        "700": "#b45309",
        "800": "#92400e",
        "900": "#78350f",
        "950": "#451a03"
      },
      "yellow": {
        "50": "#fefce8",
        "100": "#fef9c3",
        "200": "#fef08a",
        "300": "#fde047",
        "400": "#facc15",
        "500": "#eab308",
        "600": "#ca8a04",
        "700": "#a16207",
        "800": "#854d0e",
        "900": "#713f12",
        "950": "#422006"
      },
      "lime": {
        "50": "#f7fee7",
        "100": "#ecfccb",
        "200": "#d9f99d",
        "300": "#bef264",
        "400": "#a3e635",
        "500": "#84cc16",
        "600": "#65a30d",
        "700": "#4d7c0f",
        "800": "#3f6212",
        "900": "#365314",
        "950": "#1a2e05"
      },
      "green": {
        "50": "#f0fdf4",
        "100": "#dcfce7",
        "200": "#bbf7d0",
        "300": "#86efac",
        "400": "#4ade80",
        "500": "#22c55e",
        "600": "#16a34a",
        "700": "#15803d",
        "800": "#166534",
        "900": "#14532d",
        "950": "#052e16"
      },
      "emerald": {
        "50": "#ecfdf5",
        "100": "#d1fae5",
        "200": "#a7f3d0",
        "300": "#6ee7b7",
        "400": "#34d399",
        "500": "#10b981",
        "600": "#059669",
        "700": "#047857",
        "800": "#065f46",
        "900": "#064e3b",
        "950": "#022c22"
      },
      "teal": {
        "50": "#f0fdfa",
        "100": "#ccfbf1",
        "200": "#99f6e4",
        "300": "#5eead4",
        "400": "#2dd4bf",
        "500": "#14b8a6",
        "600": "#0d9488",
        "700": "#0f766e",
        "800": "#115e59",
        "900": "#134e4a",
        "950": "#042f2e"
      },
      "cyan": {
        "50": "#ecfeff",
        "100": "#cffafe",
        "200": "#a5f3fc",
        "300": "#67e8f9",
        "400": "#22d3ee",
        "500": "#06b6d4",
        "600": "#0891b2",
        "700": "#0e7490",
        "800": "#155e75",
        "900": "#164e63",
        "950": "#083344"
      },
      "sky": {
        "50": "#f0f9ff",
        "100": "#e0f2fe",
        "200": "#bae6fd",
        "300": "#7dd3fc",
        "400": "#38bdf8",
        "500": "#0ea5e9",
        "600": "#0284c7",
        "700": "#0369a1",
        "800": "#075985",
        "900": "#0c4a6e",
        "950": "#082f49"
      },
      "blue": {
        "50": "#eff6ff",
        "100": "#dbeafe",
        "200": "#bfdbfe",
        "300": "#93c5fd",
        "400": "#60a5fa",
        "500": "#3b82f6",
        "600": "#2563eb",
        "700": "#1d4ed8",
        "800": "#1e40af",
        "900": "#1e3a8a",
        "950": "#172554"
      },
      "indigo": {
        "50": "#eef2ff",
        "100": "#e0e7ff",
        "200": "#c7d2fe",
        "300": "#a5b4fc",
        "400": "#818cf8",
        "500": "#6366f1",
        "600": "#4f46e5",
        "700": "#4338ca",
        "800": "#3730a3",
        "900": "#312e81",
        "950": "#1e1b4b"
      },
      "violet": {
        "50": "#f5f3ff",
        "100": "#ede9fe",
        "200": "#ddd6fe",
        "300": "#c4b5fd",
        "400": "#a78bfa",
        "500": "#8b5cf6",
        "600": "#7c3aed",
        "700": "#6d28d9",
        "800": "#5b21b6",
        "900": "#4c1d95",
        "950": "#2e1065"
      },
      "purple": {
        "50": "#faf5ff",
        "100": "#f3e8ff",
        "200": "#e9d5ff",
        "300": "#d8b4fe",
        "400": "#c084fc",
        "500": "#a855f7",
        "600": "#9333ea",
        "700": "#7e22ce",
        "800": "#6b21a8",
        "900": "#581c87",
        "950": "#3b0764"
      },
      "fuchsia": {
        "50": "#fdf4ff",
        "100": "#fae8ff",
        "200": "#f5d0fe",
        "300": "#f0abfc",
        "400": "#e879f9",
        "500": "#d946ef",
        "600": "#c026d3",
        "700": "#a21caf",
        "800": "#86198f",
        "900": "#701a75",
        "950": "#4a044e"
      },
      "pink": {
        "50": "#fdf2f8",
        "100": "#fce7f3",
        "200": "#fbcfe8",
        "300": "#f9a8d4",
        "400": "#f472b6",
        "500": "#ec4899",
        "600": "#db2777",
        "700": "#be185d",
        "800": "#9d174d",
        "900": "#831843",
        "950": "#500724"
      },
      "rose": {
        "50": "#fff1f2",
        "100": "#ffe4e6",
        "200": "#fecdd3",
        "300": "#fda4af",
        "400": "#fb7185",
        "500": "#f43f5e",
        "600": "#e11d48",
        "700": "#be123c",
        "800": "#9f1239",
        "900": "#881337",
        "950": "#4c0519"
      }
    },
    "placeholderOpacity": {
      "0": "0",
      "5": "0.05",
      "10": "0.1",
      "15": "0.15",
      "20": "0.2",
      "25": "0.25",
      "30": "0.3",
      "35": "0.35",
      "40": "0.4",
      "45": "0.45",
      "50": "0.5",
      "55": "0.55",
      "60": "0.6",
      "65": "0.65",
      "70": "0.7",
      "75": "0.75",
      "80": "0.8",
      "85": "0.85",
      "90": "0.9",
      "95": "0.95",
      "100": "1"
    },
    "ringColor": {
      "DEFAULT": "#3b82f6",
      "inherit": "inherit",
      "current": "currentColor",
      "transparent": "transparent",
      "black": "#000",
      "white": "#fff",
      "slate": {
        "50": "#f8fafc",
        "100": "#f1f5f9",
        "200": "#e2e8f0",
        "300": "#cbd5e1",
        "400": "#94a3b8",
        "500": "#64748b",
        "600": "#475569",
        "700": "#334155",
        "800": "#1e293b",
        "900": "#0f172a",
        "950": "#020617"
      },
      "gray": {
        "50": "#f9fafb",
        "100": "#f3f4f6",
        "200": "#e5e7eb",
        "300": "#d1d5db",
        "400": "#9ca3af",
        "500": "#6b7280",
        "600": "#4b5563",
        "700": "#374151",
        "800": "#1f2937",
        "900": "#111827",
        "950": "#030712"
      },
      "zinc": {
        "50": "#fafafa",
        "100": "#f4f4f5",
        "200": "#e4e4e7",
        "300": "#d4d4d8",
        "400": "#a1a1aa",
        "500": "#71717a",
        "600": "#52525b",
        "700": "#3f3f46",
        "800": "#27272a",
        "900": "#18181b",
        "950": "#09090b"
      },
      "neutral": {
        "50": "#fafafa",
        "100": "#f5f5f5",
        "200": "#e5e5e5",
        "300": "#d4d4d4",
        "400": "#a3a3a3",
        "500": "#737373",
        "600": "#525252",
        "700": "#404040",
        "800": "#262626",
        "900": "#171717",
        "950": "#0a0a0a"
      },
      "stone": {
        "50": "#fafaf9",
        "100": "#f5f5f4",
        "200": "#e7e5e4",
        "300": "#d6d3d1",
        "400": "#a8a29e",
        "500": "#78716c",
        "600": "#57534e",
        "700": "#44403c",
        "800": "#292524",
        "900": "#1c1917",
        "950": "#0c0a09"
      },
      "red": {
        "50": "#fef2f2",
        "100": "#fee2e2",
        "200": "#fecaca",
        "300": "#fca5a5",
        "400": "#f87171",
        "500": "#ef4444",
        "600": "#dc2626",
        "700": "#b91c1c",
        "800": "#991b1b",
        "900": "#7f1d1d",
        "950": "#450a0a"
      },
      "orange": {
        "50": "#fff7ed",
        "100": "#ffedd5",
        "200": "#fed7aa",
        "300": "#fdba74",
        "400": "#fb923c",
        "500": "#f97316",
        "600": "#ea580c",
        "700": "#c2410c",
        "800": "#9a3412",
        "900": "#7c2d12",
        "950": "#431407"
      },
      "amber": {
        "50": "#fffbeb",
        "100": "#fef3c7",
        "200": "#fde68a",
        "300": "#fcd34d",
        "400": "#fbbf24",
        "500": "#f59e0b",
        "600": "#d97706",
        "700": "#b45309",
        "800": "#92400e",
        "900": "#78350f",
        "950": "#451a03"
      },
      "yellow": {
        "50": "#fefce8",
        "100": "#fef9c3",
        "200": "#fef08a",
        "300": "#fde047",
        "400": "#facc15",
        "500": "#eab308",
        "600": "#ca8a04",
        "700": "#a16207",
        "800": "#854d0e",
        "900": "#713f12",
        "950": "#422006"
      },
      "lime": {
        "50": "#f7fee7",
        "100": "#ecfccb",
        "200": "#d9f99d",
        "300": "#bef264",
        "400": "#a3e635",
        "500": "#84cc16",
        "600": "#65a30d",
        "700": "#4d7c0f",
        "800": "#3f6212",
        "900": "#365314",
        "950": "#1a2e05"
      },
      "green": {
        "50": "#f0fdf4",
        "100": "#dcfce7",
        "200": "#bbf7d0",
        "300": "#86efac",
        "400": "#4ade80",
        "500": "#22c55e",
        "600": "#16a34a",
        "700": "#15803d",
        "800": "#166534",
        "900": "#14532d",
        "950": "#052e16"
      },
      "emerald": {
        "50": "#ecfdf5",
        "100": "#d1fae5",
        "200": "#a7f3d0",
        "300": "#6ee7b7",
        "400": "#34d399",
        "500": "#10b981",
        "600": "#059669",
        "700": "#047857",
        "800": "#065f46",
        "900": "#064e3b",
        "950": "#022c22"
      },
      "teal": {
        "50": "#f0fdfa",
        "100": "#ccfbf1",
        "200": "#99f6e4",
        "300": "#5eead4",
        "400": "#2dd4bf",
        "500": "#14b8a6",
        "600": "#0d9488",
        "700": "#0f766e",
        "800": "#115e59",
        "900": "#134e4a",
        "950": "#042f2e"
      },
      "cyan": {
        "50": "#ecfeff",
        "100": "#cffafe",
        "200": "#a5f3fc",
        "300": "#67e8f9",
        "400": "#22d3ee",
        "500": "#06b6d4",
        "600": "#0891b2",
        "700": "#0e7490",
        "800": "#155e75",
        "900": "#164e63",
        "950": "#083344"
      },
      "sky": {
        "50": "#f0f9ff",
        "100": "#e0f2fe",
        "200": "#bae6fd",
        "300": "#7dd3fc",
        "400": "#38bdf8",
        "500": "#0ea5e9",
        "600": "#0284c7",
        "700": "#0369a1",
        "800": "#075985",
        "900": "#0c4a6e",
        "950": "#082f49"
      },
      "blue": {
        "50": "#eff6ff",
        "100": "#dbeafe",
        "200": "#bfdbfe",
        "300": "#93c5fd",
        "400": "#60a5fa",
        "500": "#3b82f6",
        "600": "#2563eb",
        "700": "#1d4ed8",
        "800": "#1e40af",
        "900": "#1e3a8a",
        "950": "#172554"
      },
      "indigo": {
        "50": "#eef2ff",
        "100": "#e0e7ff",
        "200": "#c7d2fe",
        "300": "#a5b4fc",
        "400": "#818cf8",
        "500": "#6366f1",
        "600": "#4f46e5",
        "700": "#4338ca",
        "800": "#3730a3",
        "900": "#312e81",
        "950": "#1e1b4b"
      },
      "violet": {
        "50": "#f5f3ff",
        "100": "#ede9fe",
        "200": "#ddd6fe",
        "300": "#c4b5fd",
        "400": "#a78bfa",
        "500": "#8b5cf6",
        "600": "#7c3aed",
        "700": "#6d28d9",
        "800": "#5b21b6",
        "900": "#4c1d95",
        "950": "#2e1065"
      },
      "purple": {
        "50": "#faf5ff",
        "100": "#f3e8ff",
        "200": "#e9d5ff",
        "300": "#d8b4fe",
        "400": "#c084fc",
        "500": "#a855f7",
        "600": "#9333ea",
        "700": "#7e22ce",
        "800": "#6b21a8",
        "900": "#581c87",
        "950": "#3b0764"
      },
      "fuchsia": {
        "50": "#fdf4ff",
        "100": "#fae8ff",
        "200": "#f5d0fe",
        "300": "#f0abfc",
        "400": "#e879f9",
        "500": "#d946ef",
        "600": "#c026d3",
        "700": "#a21caf",
        "800": "#86198f",
        "900": "#701a75",
        "950": "#4a044e"
      },
      "pink": {
        "50": "#fdf2f8",
        "100": "#fce7f3",
        "200": "#fbcfe8",
        "300": "#f9a8d4",
        "400": "#f472b6",
        "500": "#ec4899",
        "600": "#db2777",
        "700": "#be185d",
        "800": "#9d174d",
        "900": "#831843",
        "950": "#500724"
      },
      "rose": {
        "50": "#fff1f2",
        "100": "#ffe4e6",
        "200": "#fecdd3",
        "300": "#fda4af",
        "400": "#fb7185",
        "500": "#f43f5e",
        "600": "#e11d48",
        "700": "#be123c",
        "800": "#9f1239",
        "900": "#881337",
        "950": "#4c0519"
      }
    },
    "ringOffsetColor": {
      "inherit": "inherit",
      "current": "currentColor",
      "transparent": "transparent",
      "black": "#000",
      "white": "#fff",
      "slate": {
        "50": "#f8fafc",
        "100": "#f1f5f9",
        "200": "#e2e8f0",
        "300": "#cbd5e1",
        "400": "#94a3b8",
        "500": "#64748b",
        "600": "#475569",
        "700": "#334155",
        "800": "#1e293b",
        "900": "#0f172a",
        "950": "#020617"
      },
      "gray": {
        "50": "#f9fafb",
        "100": "#f3f4f6",
        "200": "#e5e7eb",
        "300": "#d1d5db",
        "400": "#9ca3af",
        "500": "#6b7280",
        "600": "#4b5563",
        "700": "#374151",
        "800": "#1f2937",
        "900": "#111827",
        "950": "#030712"
      },
      "zinc": {
        "50": "#fafafa",
        "100": "#f4f4f5",
        "200": "#e4e4e7",
        "300": "#d4d4d8",
        "400": "#a1a1aa",
        "500": "#71717a",
        "600": "#52525b",
        "700": "#3f3f46",
        "800": "#27272a",
        "900": "#18181b",
        "950": "#09090b"
      },
      "neutral": {
        "50": "#fafafa",
        "100": "#f5f5f5",
        "200": "#e5e5e5",
        "300": "#d4d4d4",
        "400": "#a3a3a3",
        "500": "#737373",
        "600": "#525252",
        "700": "#404040",
        "800": "#262626",
        "900": "#171717",
        "950": "#0a0a0a"
      },
      "stone": {
        "50": "#fafaf9",
        "100": "#f5f5f4",
        "200": "#e7e5e4",
        "300": "#d6d3d1",
        "400": "#a8a29e",
        "500": "#78716c",
        "600": "#57534e",
        "700": "#44403c",
        "800": "#292524",
        "900": "#1c1917",
        "950": "#0c0a09"
      },
      "red": {
        "50": "#fef2f2",
        "100": "#fee2e2",
        "200": "#fecaca",
        "300": "#fca5a5",
        "400": "#f87171",
        "500": "#ef4444",
        "600": "#dc2626",
        "700": "#b91c1c",
        "800": "#991b1b",
        "900": "#7f1d1d",
        "950": "#450a0a"
      },
      "orange": {
        "50": "#fff7ed",
        "100": "#ffedd5",
        "200": "#fed7aa",
        "300": "#fdba74",
        "400": "#fb923c",
        "500": "#f97316",
        "600": "#ea580c",
        "700": "#c2410c",
        "800": "#9a3412",
        "900": "#7c2d12",
        "950": "#431407"
      },
      "amber": {
        "50": "#fffbeb",
        "100": "#fef3c7",
        "200": "#fde68a",
        "300": "#fcd34d",
        "400": "#fbbf24",
        "500": "#f59e0b",
        "600": "#d97706",
        "700": "#b45309",
        "800": "#92400e",
        "900": "#78350f",
        "950": "#451a03"
      },
      "yellow": {
        "50": "#fefce8",
        "100": "#fef9c3",
        "200": "#fef08a",
        "300": "#fde047",
        "400": "#facc15",
        "500": "#eab308",
        "600": "#ca8a04",
        "700": "#a16207",
        "800": "#854d0e",
        "900": "#713f12",
        "950": "#422006"
      },
      "lime": {
        "50": "#f7fee7",
        "100": "#ecfccb",
        "200": "#d9f99d",
        "300": "#bef264",
        "400": "#a3e635",
        "500": "#84cc16",
        "600": "#65a30d",
        "700": "#4d7c0f",
        "800": "#3f6212",
        "900": "#365314",
        "950": "#1a2e05"
      },
      "green": {
        "50": "#f0fdf4",
        "100": "#dcfce7",
        "200": "#bbf7d0",
        "300": "#86efac",
        "400": "#4ade80",
        "500": "#22c55e",
        "600": "#16a34a",
        "700": "#15803d",
        "800": "#166534",
        "900": "#14532d",
        "950": "#052e16"
      },
      "emerald": {
        "50": "#ecfdf5",
        "100": "#d1fae5",
        "200": "#a7f3d0",
        "300": "#6ee7b7",
        "400": "#34d399",
        "500": "#10b981",
        "600": "#059669",
        "700": "#047857",
        "800": "#065f46",
        "900": "#064e3b",
        "950": "#022c22"
      },
      "teal": {
        "50": "#f0fdfa",
        "100": "#ccfbf1",
        "200": "#99f6e4",
        "300": "#5eead4",
        "400": "#2dd4bf",
        "500": "#14b8a6",
        "600": "#0d9488",
        "700": "#0f766e",
        "800": "#115e59",
        "900": "#134e4a",
        "950": "#042f2e"
      },
      "cyan": {
        "50": "#ecfeff",
        "100": "#cffafe",
        "200": "#a5f3fc",
        "300": "#67e8f9",
        "400": "#22d3ee",
        "500": "#06b6d4",
        "600": "#0891b2",
        "700": "#0e7490",
        "800": "#155e75",
        "900": "#164e63",
        "950": "#083344"
      },
      "sky": {
        "50": "#f0f9ff",
        "100": "#e0f2fe",
        "200": "#bae6fd",
        "300": "#7dd3fc",
        "400": "#38bdf8",
        "500": "#0ea5e9",
        "600": "#0284c7",
        "700": "#0369a1",
        "800": "#075985",
        "900": "#0c4a6e",
        "950": "#082f49"
      },
      "blue": {
        "50": "#eff6ff",
        "100": "#dbeafe",
        "200": "#bfdbfe",
        "300": "#93c5fd",
        "400": "#60a5fa",
        "500": "#3b82f6",
        "600": "#2563eb",
        "700": "#1d4ed8",
        "800": "#1e40af",
        "900": "#1e3a8a",
        "950": "#172554"
      },
      "indigo": {
        "50": "#eef2ff",
        "100": "#e0e7ff",
        "200": "#c7d2fe",
        "300": "#a5b4fc",
        "400": "#818cf8",
        "500": "#6366f1",
        "600": "#4f46e5",
        "700": "#4338ca",
        "800": "#3730a3",
        "900": "#312e81",
        "950": "#1e1b4b"
      },
      "violet": {
        "50": "#f5f3ff",
        "100": "#ede9fe",
        "200": "#ddd6fe",
        "300": "#c4b5fd",
        "400": "#a78bfa",
        "500": "#8b5cf6",
        "600": "#7c3aed",
        "700": "#6d28d9",
        "800": "#5b21b6",
        "900": "#4c1d95",
        "950": "#2e1065"
      },
      "purple": {
        "50": "#faf5ff",
        "100": "#f3e8ff",
        "200": "#e9d5ff",
        "300": "#d8b4fe",
        "400": "#c084fc",
        "500": "#a855f7",
        "600": "#9333ea",
        "700": "#7e22ce",
        "800": "#6b21a8",
        "900": "#581c87",
        "950": "#3b0764"
      },
      "fuchsia": {
        "50": "#fdf4ff",
        "100": "#fae8ff",
        "200": "#f5d0fe",
        "300": "#f0abfc",
        "400": "#e879f9",
        "500": "#d946ef",
        "600": "#c026d3",
        "700": "#a21caf",
        "800": "#86198f",
        "900": "#701a75",
        "950": "#4a044e"
      },
      "pink": {
        "50": "#fdf2f8",
        "100": "#fce7f3",
        "200": "#fbcfe8",
        "300": "#f9a8d4",
        "400": "#f472b6",
        "500": "#ec4899",
        "600": "#db2777",
        "700": "#be185d",
        "800": "#9d174d",
        "900": "#831843",
        "950": "#500724"
      },
      "rose": {
        "50": "#fff1f2",
        "100": "#ffe4e6",
        "200": "#fecdd3",
        "300": "#fda4af",
        "400": "#fb7185",
        "500": "#f43f5e",
        "600": "#e11d48",
        "700": "#be123c",
        "800": "#9f1239",
        "900": "#881337",
        "950": "#4c0519"
      }
    },
    "ringOffsetWidth": {
      "0": "0px",
      "1": "1px",
      "2": "2px",
      "4": "4px",
      "8": "8px"
    },
    "ringOpacity": {
      "0": "0",
      "5": "0.05",
      "10": "0.1",
      "15": "0.15",
      "20": "0.2",
      "25": "0.25",
      "30": "0.3",
      "35": "0.35",
      "40": "0.4",
      "45": "0.45",
      "50": "0.5",
      "55": "0.55",
      "60": "0.6",
      "65": "0.65",
      "70": "0.7",
      "75": "0.75",
      "80": "0.8",
      "85": "0.85",
      "90": "0.9",
      "95": "0.95",
      "100": "1",
      "DEFAULT": "0.5"
    },
    "ringWidth": {
      "0": "0px",
      "1": "1px",
      "2": "2px",
      "4": "4px",
      "8": "8px",
      "DEFAULT": "3px"
    },
    "rotate": {
      "0": "0deg",
      "1": "1deg",
      "2": "2deg",
      "3": "3deg",
      "6": "6deg",
      "12": "12deg",
      "45": "45deg",
      "90": "90deg",
      "180": "180deg"
    },
    "saturate": {
      "0": "0",
      "50": ".5",
      "100": "1",
      "150": "1.5",
      "200": "2"
    },
    "scale": {
      "0": "0",
      "50": ".5",
      "75": ".75",
      "90": ".9",
      "95": ".95",
      "100": "1",
      "105": "1.05",
      "110": "1.1",
      "125": "1.25",
      "150": "1.5"
    },
    "screens": {
      "sm": "640px",
      "md": "768px",
      "lg": "1024px",
      "xl": "1280px",
      "2xl": "1536px"
    },
    "scrollMargin": {
      "0": "0px",
      "1": "0.25rem",
      "2": "0.5rem",
      "3": "0.75rem",
      "4": "1rem",
      "5": "1.25rem",
      "6": "1.5rem",
      "7": "1.75rem",
      "8": "2rem",
      "9": "2.25rem",
      "10": "2.5rem",
      "11": "2.75rem",
      "12": "3rem",
      "14": "3.5rem",
      "16": "4rem",
      "20": "5rem",
      "24": "6rem",
      "28": "7rem",
      "32": "8rem",
      "36": "9rem",
      "40": "10rem",
      "44": "11rem",
      "48": "12rem",
      "52": "13rem",
      "56": "14rem",
      "60": "15rem",
      "64": "16rem",
      "72": "18rem",
      "80": "20rem",
      "96": "24rem",
      "px": "1px",
      "0.5": "0.125rem",
      "1.5": "0.375rem",
      "2.5": "0.625rem",
      "3.5": "0.875rem"
    },
    "scrollPadding": {
      "0": "0px",
      "1": "0.25rem",
      "2": "0.5rem",
      "3": "0.75rem",
      "4": "1rem",
      "5": "1.25rem",
      "6": "1.5rem",
      "7": "1.75rem",
      "8": "2rem",
      "9": "2.25rem",
      "10": "2.5rem",
      "11": "2.75rem",
      "12": "3rem",
      "14": "3.5rem",
      "16": "4rem",
      "20": "5rem",
      "24": "6rem",
      "28": "7rem",
      "32": "8rem",
      "36": "9rem",
      "40": "10rem",
      "44": "11rem",
      "48": "12rem",
      "52": "13rem",
      "56": "14rem",
      "60": "15rem",
      "64": "16rem",
      "72": "18rem",
      "80": "20rem",
      "96": "24rem",
      "px": "1px",
      "0.5": "0.125rem",
      "1.5": "0.375rem",
      "2.5": "0.625rem",
      "3.5": "0.875rem"
    },
    "sepia": {
      "0": "0",
      "DEFAULT": "100%"
    },
    "skew": {
      "0": "0deg",
      "1": "1deg",
      "2": "2deg",
      "3": "3deg",
      "6": "6deg",
      "12": "12deg"
    },
    "space": {
      "0": "0px",
      "1": "0.25rem",
      "2": "0.5rem",
      "3": "0.75rem",
      "4": "1rem",
      "5": "1.25rem",
      "6": "1.5rem",
      "7": "1.75rem",
      "8": "2rem",
      "9": "2.25rem",
      "10": "2.5rem",
      "11": "2.75rem",
      "12": "3rem",
      "14": "3.5rem",
      "16": "4rem",
      "20": "5rem",
      "24": "6rem",
      "28": "7rem",
      "32": "8rem",
      "36": "9rem",
      "40": "10rem",
      "44": "11rem",
      "48": "12rem",
      "52": "13rem",
      "56": "14rem",
      "60": "15rem",
      "64": "16rem",
      "72": "18rem",
      "80": "20rem",
      "96": "24rem",
      "px": "1px",
      "0.5": "0.125rem",
      "1.5": "0.375rem",
      "2.5": "0.625rem",
      "3.5": "0.875rem"
    },
    "spacing": {
      "0": "0px",
      "1": "0.25rem",
      "2": "0.5rem",
      "3": "0.75rem",
      "4": "1rem",
      "5": "1.25rem",
      "6": "1.5rem",
      "7": "1.75rem",
      "8": "2rem",
      "9": "2.25rem",
      "10": "2.5rem",
      "11": "2.75rem",
      "12": "3rem",
      "14": "3.5rem",
      "16": "4rem",
      "20": "5rem",
      "24": "6rem",
      "28": "7rem",
      "32": "8rem",
      "36": "9rem",
      "40": "10rem",
      "44": "11rem",
      "48": "12rem",
      "52": "13rem",
      "56": "14rem",
      "60": "15rem",
      "64": "16rem",
      "72": "18rem",
      "80": "20rem",
      "96": "24rem",
      "px": "1px",
      "0.5": "0.125rem",
      "1.5": "0.375rem",
      "2.5": "0.625rem",
      "3.5": "0.875rem"
    },
    "stroke": {
      "none": "none",
      "inherit": "inherit",
      "current": "currentColor",
      "transparent": "transparent",
      "black": "#000",
      "white": "#fff",
      "slate": {
        "50": "#f8fafc",
        "100": "#f1f5f9",
        "200": "#e2e8f0",
        "300": "#cbd5e1",
        "400": "#94a3b8",
        "500": "#64748b",
        "600": "#475569",
        "700": "#334155",
        "800": "#1e293b",
        "900": "#0f172a",
        "950": "#020617"
      },
      "gray": {
        "50": "#f9fafb",
        "100": "#f3f4f6",
        "200": "#e5e7eb",
        "300": "#d1d5db",
        "400": "#9ca3af",
        "500": "#6b7280",
        "600": "#4b5563",
        "700": "#374151",
        "800": "#1f2937",
        "900": "#111827",
        "950": "#030712"
      },
      "zinc": {
        "50": "#fafafa",
        "100": "#f4f4f5",
        "200": "#e4e4e7",
        "300": "#d4d4d8",
        "400": "#a1a1aa",
        "500": "#71717a",
        "600": "#52525b",
        "700": "#3f3f46",
        "800": "#27272a",
        "900": "#18181b",
        "950": "#09090b"
      },
      "neutral": {
        "50": "#fafafa",
        "100": "#f5f5f5",
        "200": "#e5e5e5",
        "300": "#d4d4d4",
        "400": "#a3a3a3",
        "500": "#737373",
        "600": "#525252",
        "700": "#404040",
        "800": "#262626",
        "900": "#171717",
        "950": "#0a0a0a"
      },
      "stone": {
        "50": "#fafaf9",
        "100": "#f5f5f4",
        "200": "#e7e5e4",
        "300": "#d6d3d1",
        "400": "#a8a29e",
        "500": "#78716c",
        "600": "#57534e",
        "700": "#44403c",
        "800": "#292524",
        "900": "#1c1917",
        "950": "#0c0a09"
      },
      "red": {
        "50": "#fef2f2",
        "100": "#fee2e2",
        "200": "#fecaca",
        "300": "#fca5a5",
        "400": "#f87171",
        "500": "#ef4444",
        "600": "#dc2626",
        "700": "#b91c1c",
        "800": "#991b1b",
        "900": "#7f1d1d",
        "950": "#450a0a"
      },
      "orange": {
        "50": "#fff7ed",
        "100": "#ffedd5",
        "200": "#fed7aa",
        "300": "#fdba74",
        "400": "#fb923c",
        "500": "#f97316",
        "600": "#ea580c",
        "700": "#c2410c",
        "800": "#9a3412",
        "900": "#7c2d12",
        "950": "#431407"
      },
      "amber": {
        "50": "#fffbeb",
        "100": "#fef3c7",
        "200": "#fde68a",
        "300": "#fcd34d",
        "400": "#fbbf24",
        "500": "#f59e0b",
        "600": "#d97706",
        "700": "#b45309",
        "800": "#92400e",
        "900": "#78350f",
        "950": "#451a03"
      },
      "yellow": {
        "50": "#fefce8",
        "100": "#fef9c3",
        "200": "#fef08a",
        "300": "#fde047",
        "400": "#facc15",
        "500": "#eab308",
        "600": "#ca8a04",
        "700": "#a16207",
        "800": "#854d0e",
        "900": "#713f12",
        "950": "#422006"
      },
      "lime": {
        "50": "#f7fee7",
        "100": "#ecfccb",
        "200": "#d9f99d",
        "300": "#bef264",
        "400": "#a3e635",
        "500": "#84cc16",
        "600": "#65a30d",
        "700": "#4d7c0f",
        "800": "#3f6212",
        "900": "#365314",
        "950": "#1a2e05"
      },
      "green": {
        "50": "#f0fdf4",
        "100": "#dcfce7",
        "200": "#bbf7d0",
        "300": "#86efac",
        "400": "#4ade80",
        "500": "#22c55e",
        "600": "#16a34a",
        "700": "#15803d",
        "800": "#166534",
        "900": "#14532d",
        "950": "#052e16"
      },
      "emerald": {
        "50": "#ecfdf5",
        "100": "#d1fae5",
        "200": "#a7f3d0",
        "300": "#6ee7b7",
        "400": "#34d399",
        "500": "#10b981",
        "600": "#059669",
        "700": "#047857",
        "800": "#065f46",
        "900": "#064e3b",
        "950": "#022c22"
      },
      "teal": {
        "50": "#f0fdfa",
        "100": "#ccfbf1",
        "200": "#99f6e4",
        "300": "#5eead4",
        "400": "#2dd4bf",
        "500": "#14b8a6",
        "600": "#0d9488",
        "700": "#0f766e",
        "800": "#115e59",
        "900": "#134e4a",
        "950": "#042f2e"
      },
      "cyan": {
        "50": "#ecfeff",
        "100": "#cffafe",
        "200": "#a5f3fc",
        "300": "#67e8f9",
        "400": "#22d3ee",
        "500": "#06b6d4",
        "600": "#0891b2",
        "700": "#0e7490",
        "800": "#155e75",
        "900": "#164e63",
        "950": "#083344"
      },
      "sky": {
        "50": "#f0f9ff",
        "100": "#e0f2fe",
        "200": "#bae6fd",
        "300": "#7dd3fc",
        "400": "#38bdf8",
        "500": "#0ea5e9",
        "600": "#0284c7",
        "700": "#0369a1",
        "800": "#075985",
        "900": "#0c4a6e",
        "950": "#082f49"
      },
      "blue": {
        "50": "#eff6ff",
        "100": "#dbeafe",
        "200": "#bfdbfe",
        "300": "#93c5fd",
        "400": "#60a5fa",
        "500": "#3b82f6",
        "600": "#2563eb",
        "700": "#1d4ed8",
        "800": "#1e40af",
        "900": "#1e3a8a",
        "950": "#172554"
      },
      "indigo": {
        "50": "#eef2ff",
        "100": "#e0e7ff",
        "200": "#c7d2fe",
        "300": "#a5b4fc",
        "400": "#818cf8",
        "500": "#6366f1",
        "600": "#4f46e5",
        "700": "#4338ca",
        "800": "#3730a3",
        "900": "#312e81",
        "950": "#1e1b4b"
      },
      "violet": {
        "50": "#f5f3ff",
        "100": "#ede9fe",
        "200": "#ddd6fe",
        "300": "#c4b5fd",
        "400": "#a78bfa",
        "500": "#8b5cf6",
        "600": "#7c3aed",
        "700": "#6d28d9",
        "800": "#5b21b6",
        "900": "#4c1d95",
        "950": "#2e1065"
      },
      "purple": {
        "50": "#faf5ff",
        "100": "#f3e8ff",
        "200": "#e9d5ff",
        "300": "#d8b4fe",
        "400": "#c084fc",
        "500": "#a855f7",
        "600": "#9333ea",
        "700": "#7e22ce",
        "800": "#6b21a8",
        "900": "#581c87",
        "950": "#3b0764"
      },
      "fuchsia": {
        "50": "#fdf4ff",
        "100": "#fae8ff",
        "200": "#f5d0fe",
        "300": "#f0abfc",
        "400": "#e879f9",
        "500": "#d946ef",
        "600": "#c026d3",
        "700": "#a21caf",
        "800": "#86198f",
        "900": "#701a75",
        "950": "#4a044e"
      },
      "pink": {
        "50": "#fdf2f8",
        "100": "#fce7f3",
        "200": "#fbcfe8",
        "300": "#f9a8d4",
        "400": "#f472b6",
        "500": "#ec4899",
        "600": "#db2777",
        "700": "#be185d",
        "800": "#9d174d",
        "900": "#831843",
        "950": "#500724"
      },
      "rose": {
        "50": "#fff1f2",
        "100": "#ffe4e6",
        "200": "#fecdd3",
        "300": "#fda4af",
        "400": "#fb7185",
        "500": "#f43f5e",
        "600": "#e11d48",
        "700": "#be123c",
        "800": "#9f1239",
        "900": "#881337",
        "950": "#4c0519"
      }
    },
    "strokeWidth": {
      "0": "0",
      "1": "1",
      "2": "2"
    },
    "supports": {},
    "data": {},
    "textColor": {
      "inherit": "inherit",
      "current": "currentColor",
      "transparent": "transparent",
      "black": "#000",
      "white": "#fff",
      "slate": {
        "50": "#f8fafc",
        "100": "#f1f5f9",
        "200": "#e2e8f0",
        "300": "#cbd5e1",
        "400": "#94a3b8",
        "500": "#64748b",
        "600": "#475569",
        "700": "#334155",
        "800": "#1e293b",
        "900": "#0f172a",
        "950": "#020617"
      },
      "gray": {
        "50": "#f9fafb",
        "100": "#f3f4f6",
        "200": "#e5e7eb",
        "300": "#d1d5db",
        "400": "#9ca3af",
        "500": "#6b7280",
        "600": "#4b5563",
        "700": "#374151",
        "800": "#1f2937",
        "900": "#111827",
        "950": "#030712"
      },
      "zinc": {
        "50": "#fafafa",
        "100": "#f4f4f5",
        "200": "#e4e4e7",
        "300": "#d4d4d8",
        "400": "#a1a1aa",
        "500": "#71717a",
        "600": "#52525b",
        "700": "#3f3f46",
        "800": "#27272a",
        "900": "#18181b",
        "950": "#09090b"
      },
      "neutral": {
        "50": "#fafafa",
        "100": "#f5f5f5",
        "200": "#e5e5e5",
        "300": "#d4d4d4",
        "400": "#a3a3a3",
        "500": "#737373",
        "600": "#525252",
        "700": "#404040",
        "800": "#262626",
        "900": "#171717",
        "950": "#0a0a0a"
      },
      "stone": {
        "50": "#fafaf9",
        "100": "#f5f5f4",
        "200": "#e7e5e4",
        "300": "#d6d3d1",
        "400": "#a8a29e",
        "500": "#78716c",
        "600": "#57534e",
        "700": "#44403c",
        "800": "#292524",
        "900": "#1c1917",
        "950": "#0c0a09"
      },
      "red": {
        "50": "#fef2f2",
        "100": "#fee2e2",
        "200": "#fecaca",
        "300": "#fca5a5",
        "400": "#f87171",
        "500": "#ef4444",
        "600": "#dc2626",
        "700": "#b91c1c",
        "800": "#991b1b",
        "900": "#7f1d1d",
        "950": "#450a0a"
      },
      "orange": {
        "50": "#fff7ed",
        "100": "#ffedd5",
        "200": "#fed7aa",
        "300": "#fdba74",
        "400": "#fb923c",
        "500": "#f97316",
        "600": "#ea580c",
        "700": "#c2410c",
        "800": "#9a3412",
        "900": "#7c2d12",
        "950": "#431407"
      },
      "amber": {
        "50": "#fffbeb",
        "100": "#fef3c7",
        "200": "#fde68a",
        "300": "#fcd34d",
        "400": "#fbbf24",
        "500": "#f59e0b",
        "600": "#d97706",
        "700": "#b45309",
        "800": "#92400e",
        "900": "#78350f",
        "950": "#451a03"
      },
      "yellow": {
        "50": "#fefce8",
        "100": "#fef9c3",
        "200": "#fef08a",
        "300": "#fde047",
        "400": "#facc15",
        "500": "#eab308",
        "600": "#ca8a04",
        "700": "#a16207",
        "800": "#854d0e",
        "900": "#713f12",
        "950": "#422006"
      },
      "lime": {
        "50": "#f7fee7",
        "100": "#ecfccb",
        "200": "#d9f99d",
        "300": "#bef264",
        "400": "#a3e635",
        "500": "#84cc16",
        "600": "#65a30d",
        "700": "#4d7c0f",
        "800": "#3f6212",
        "900": "#365314",
        "950": "#1a2e05"
      },
      "green": {
        "50": "#f0fdf4",
        "100": "#dcfce7",
        "200": "#bbf7d0",
        "300": "#86efac",
        "400": "#4ade80",
        "500": "#22c55e",
        "600": "#16a34a",
        "700": "#15803d",
        "800": "#166534",
        "900": "#14532d",
        "950": "#052e16"
      },
      "emerald": {
        "50": "#ecfdf5",
        "100": "#d1fae5",
        "200": "#a7f3d0",
        "300": "#6ee7b7",
        "400": "#34d399",
        "500": "#10b981",
        "600": "#059669",
        "700": "#047857",
        "800": "#065f46",
        "900": "#064e3b",
        "950": "#022c22"
      },
      "teal": {
        "50": "#f0fdfa",
        "100": "#ccfbf1",
        "200": "#99f6e4",
        "300": "#5eead4",
        "400": "#2dd4bf",
        "500": "#14b8a6",
        "600": "#0d9488",
        "700": "#0f766e",
        "800": "#115e59",
        "900": "#134e4a",
        "950": "#042f2e"
      },
      "cyan": {
        "50": "#ecfeff",
        "100": "#cffafe",
        "200": "#a5f3fc",
        "300": "#67e8f9",
        "400": "#22d3ee",
        "500": "#06b6d4",
        "600": "#0891b2",
        "700": "#0e7490",
        "800": "#155e75",
        "900": "#164e63",
        "950": "#083344"
      },
      "sky": {
        "50": "#f0f9ff",
        "100": "#e0f2fe",
        "200": "#bae6fd",
        "300": "#7dd3fc",
        "400": "#38bdf8",
        "500": "#0ea5e9",
        "600": "#0284c7",
        "700": "#0369a1",
        "800": "#075985",
        "900": "#0c4a6e",
        "950": "#082f49"
      },
      "blue": {
        "50": "#eff6ff",
        "100": "#dbeafe",
        "200": "#bfdbfe",
        "300": "#93c5fd",
        "400": "#60a5fa",
        "500": "#3b82f6",
        "600": "#2563eb",
        "700": "#1d4ed8",
        "800": "#1e40af",
        "900": "#1e3a8a",
        "950": "#172554"
      },
      "indigo": {
        "50": "#eef2ff",
        "100": "#e0e7ff",
        "200": "#c7d2fe",
        "300": "#a5b4fc",
        "400": "#818cf8",
        "500": "#6366f1",
        "600": "#4f46e5",
        "700": "#4338ca",
        "800": "#3730a3",
        "900": "#312e81",
        "950": "#1e1b4b"
      },
      "violet": {
        "50": "#f5f3ff",
        "100": "#ede9fe",
        "200": "#ddd6fe",
        "300": "#c4b5fd",
        "400": "#a78bfa",
        "500": "#8b5cf6",
        "600": "#7c3aed",
        "700": "#6d28d9",
        "800": "#5b21b6",
        "900": "#4c1d95",
        "950": "#2e1065"
      },
      "purple": {
        "50": "#faf5ff",
        "100": "#f3e8ff",
        "200": "#e9d5ff",
        "300": "#d8b4fe",
        "400": "#c084fc",
        "500": "#a855f7",
        "600": "#9333ea",
        "700": "#7e22ce",
        "800": "#6b21a8",
        "900": "#581c87",
        "950": "#3b0764"
      },
      "fuchsia": {
        "50": "#fdf4ff",
        "100": "#fae8ff",
        "200": "#f5d0fe",
        "300": "#f0abfc",
        "400": "#e879f9",
        "500": "#d946ef",
        "600": "#c026d3",
        "700": "#a21caf",
        "800": "#86198f",
        "900": "#701a75",
        "950": "#4a044e"
      },
      "pink": {
        "50": "#fdf2f8",
        "100": "#fce7f3",
        "200": "#fbcfe8",
        "300": "#f9a8d4",
        "400": "#f472b6",
        "500": "#ec4899",
        "600": "#db2777",
        "700": "#be185d",
        "800": "#9d174d",
        "900": "#831843",
        "950": "#500724"
      },
      "rose": {
        "50": "#fff1f2",
        "100": "#ffe4e6",
        "200": "#fecdd3",
        "300": "#fda4af",
        "400": "#fb7185",
        "500": "#f43f5e",
        "600": "#e11d48",
        "700": "#be123c",
        "800": "#9f1239",
        "900": "#881337",
        "950": "#4c0519"
      }
    },
    "textDecorationColor": {
      "inherit": "inherit",
      "current": "currentColor",
      "transparent": "transparent",
      "black": "#000",
      "white": "#fff",
      "slate": {
        "50": "#f8fafc",
        "100": "#f1f5f9",
        "200": "#e2e8f0",
        "300": "#cbd5e1",
        "400": "#94a3b8",
        "500": "#64748b",
        "600": "#475569",
        "700": "#334155",
        "800": "#1e293b",
        "900": "#0f172a",
        "950": "#020617"
      },
      "gray": {
        "50": "#f9fafb",
        "100": "#f3f4f6",
        "200": "#e5e7eb",
        "300": "#d1d5db",
        "400": "#9ca3af",
        "500": "#6b7280",
        "600": "#4b5563",
        "700": "#374151",
        "800": "#1f2937",
        "900": "#111827",
        "950": "#030712"
      },
      "zinc": {
        "50": "#fafafa",
        "100": "#f4f4f5",
        "200": "#e4e4e7",
        "300": "#d4d4d8",
        "400": "#a1a1aa",
        "500": "#71717a",
        "600": "#52525b",
        "700": "#3f3f46",
        "800": "#27272a",
        "900": "#18181b",
        "950": "#09090b"
      },
      "neutral": {
        "50": "#fafafa",
        "100": "#f5f5f5",
        "200": "#e5e5e5",
        "300": "#d4d4d4",
        "400": "#a3a3a3",
        "500": "#737373",
        "600": "#525252",
        "700": "#404040",
        "800": "#262626",
        "900": "#171717",
        "950": "#0a0a0a"
      },
      "stone": {
        "50": "#fafaf9",
        "100": "#f5f5f4",
        "200": "#e7e5e4",
        "300": "#d6d3d1",
        "400": "#a8a29e",
        "500": "#78716c",
        "600": "#57534e",
        "700": "#44403c",
        "800": "#292524",
        "900": "#1c1917",
        "950": "#0c0a09"
      },
      "red": {
        "50": "#fef2f2",
        "100": "#fee2e2",
        "200": "#fecaca",
        "300": "#fca5a5",
        "400": "#f87171",
        "500": "#ef4444",
        "600": "#dc2626",
        "700": "#b91c1c",
        "800": "#991b1b",
        "900": "#7f1d1d",
        "950": "#450a0a"
      },
      "orange": {
        "50": "#fff7ed",
        "100": "#ffedd5",
        "200": "#fed7aa",
        "300": "#fdba74",
        "400": "#fb923c",
        "500": "#f97316",
        "600": "#ea580c",
        "700": "#c2410c",
        "800": "#9a3412",
        "900": "#7c2d12",
        "950": "#431407"
      },
      "amber": {
        "50": "#fffbeb",
        "100": "#fef3c7",
        "200": "#fde68a",
        "300": "#fcd34d",
        "400": "#fbbf24",
        "500": "#f59e0b",
        "600": "#d97706",
        "700": "#b45309",
        "800": "#92400e",
        "900": "#78350f",
        "950": "#451a03"
      },
      "yellow": {
        "50": "#fefce8",
        "100": "#fef9c3",
        "200": "#fef08a",
        "300": "#fde047",
        "400": "#facc15",
        "500": "#eab308",
        "600": "#ca8a04",
        "700": "#a16207",
        "800": "#854d0e",
        "900": "#713f12",
        "950": "#422006"
      },
      "lime": {
        "50": "#f7fee7",
        "100": "#ecfccb",
        "200": "#d9f99d",
        "300": "#bef264",
        "400": "#a3e635",
        "500": "#84cc16",
        "600": "#65a30d",
        "700": "#4d7c0f",
        "800": "#3f6212",
        "900": "#365314",
        "950": "#1a2e05"
      },
      "green": {
        "50": "#f0fdf4",
        "100": "#dcfce7",
        "200": "#bbf7d0",
        "300": "#86efac",
        "400": "#4ade80",
        "500": "#22c55e",
        "600": "#16a34a",
        "700": "#15803d",
        "800": "#166534",
        "900": "#14532d",
        "950": "#052e16"
      },
      "emerald": {
        "50": "#ecfdf5",
        "100": "#d1fae5",
        "200": "#a7f3d0",
        "300": "#6ee7b7",
        "400": "#34d399",
        "500": "#10b981",
        "600": "#059669",
        "700": "#047857",
        "800": "#065f46",
        "900": "#064e3b",
        "950": "#022c22"
      },
      "teal": {
        "50": "#f0fdfa",
        "100": "#ccfbf1",
        "200": "#99f6e4",
        "300": "#5eead4",
        "400": "#2dd4bf",
        "500": "#14b8a6",
        "600": "#0d9488",
        "700": "#0f766e",
        "800": "#115e59",
        "900": "#134e4a",
        "950": "#042f2e"
      },
      "cyan": {
        "50": "#ecfeff",
        "100": "#cffafe",
        "200": "#a5f3fc",
        "300": "#67e8f9",
        "400": "#22d3ee",
        "500": "#06b6d4",
        "600": "#0891b2",
        "700": "#0e7490",
        "800": "#155e75",
        "900": "#164e63",
        "950": "#083344"
      },
      "sky": {
        "50": "#f0f9ff",
        "100": "#e0f2fe",
        "200": "#bae6fd",
        "300": "#7dd3fc",
        "400": "#38bdf8",
        "500": "#0ea5e9",
        "600": "#0284c7",
        "700": "#0369a1",
        "800": "#075985",
        "900": "#0c4a6e",
        "950": "#082f49"
      },
      "blue": {
        "50": "#eff6ff",
        "100": "#dbeafe",
        "200": "#bfdbfe",
        "300": "#93c5fd",
        "400": "#60a5fa",
        "500": "#3b82f6",
        "600": "#2563eb",
        "700": "#1d4ed8",
        "800": "#1e40af",
        "900": "#1e3a8a",
        "950": "#172554"
      },
      "indigo": {
        "50": "#eef2ff",
        "100": "#e0e7ff",
        "200": "#c7d2fe",
        "300": "#a5b4fc",
        "400": "#818cf8",
        "500": "#6366f1",
        "600": "#4f46e5",
        "700": "#4338ca",
        "800": "#3730a3",
        "900": "#312e81",
        "950": "#1e1b4b"
      },
      "violet": {
        "50": "#f5f3ff",
        "100": "#ede9fe",
        "200": "#ddd6fe",
        "300": "#c4b5fd",
        "400": "#a78bfa",
        "500": "#8b5cf6",
        "600": "#7c3aed",
        "700": "#6d28d9",
        "800": "#5b21b6",
        "900": "#4c1d95",
        "950": "#2e1065"
      },
      "purple": {
        "50": "#faf5ff",
        "100": "#f3e8ff",
        "200": "#e9d5ff",
        "300": "#d8b4fe",
        "400": "#c084fc",
        "500": "#a855f7",
        "600": "#9333ea",
        "700": "#7e22ce",
        "800": "#6b21a8",
        "900": "#581c87",
        "950": "#3b0764"
      },
      "fuchsia": {
        "50": "#fdf4ff",
        "100": "#fae8ff",
        "200": "#f5d0fe",
        "300": "#f0abfc",
        "400": "#e879f9",
        "500": "#d946ef",
        "600": "#c026d3",
        "700": "#a21caf",
        "800": "#86198f",
        "900": "#701a75",
        "950": "#4a044e"
      },
      "pink": {
        "50": "#fdf2f8",
        "100": "#fce7f3",
        "200": "#fbcfe8",
        "300": "#f9a8d4",
        "400": "#f472b6",
        "500": "#ec4899",
        "600": "#db2777",
        "700": "#be185d",
        "800": "#9d174d",
        "900": "#831843",
        "950": "#500724"
      },
      "rose": {
        "50": "#fff1f2",
        "100": "#ffe4e6",
        "200": "#fecdd3",
        "300": "#fda4af",
        "400": "#fb7185",
        "500": "#f43f5e",
        "600": "#e11d48",
        "700": "#be123c",
        "800": "#9f1239",
        "900": "#881337",
        "950": "#4c0519"
      }
    },
    "textDecorationThickness": {
      "0": "0px",
      "1": "1px",
      "2": "2px",
      "4": "4px",
      "8": "8px",
      "auto": "auto",
      "from-font": "from-font"
    },
    "textIndent": {
      "0": "0px",
      "1": "0.25rem",
      "2": "0.5rem",
      "3": "0.75rem",
      "4": "1rem",
      "5": "1.25rem",
      "6": "1.5rem",
      "7": "1.75rem",
      "8": "2rem",
      "9": "2.25rem",
      "10": "2.5rem",
      "11": "2.75rem",
      "12": "3rem",
      "14": "3.5rem",
      "16": "4rem",
      "20": "5rem",
      "24": "6rem",
      "28": "7rem",
      "32": "8rem",
      "36": "9rem",
      "40": "10rem",
      "44": "11rem",
      "48": "12rem",
      "52": "13rem",
      "56": "14rem",
      "60": "15rem",
      "64": "16rem",
      "72": "18rem",
      "80": "20rem",
      "96": "24rem",
      "px": "1px",
      "0.5": "0.125rem",
      "1.5": "0.375rem",
      "2.5": "0.625rem",
      "3.5": "0.875rem"
    },
    "textOpacity": {
      "0": "0",
      "5": "0.05",
      "10": "0.1",
      "15": "0.15",
      "20": "0.2",
      "25": "0.25",
      "30": "0.3",
      "35": "0.35",
      "40": "0.4",
      "45": "0.45",
      "50": "0.5",
      "55": "0.55",
      "60": "0.6",
      "65": "0.65",
      "70": "0.7",
      "75": "0.75",
      "80": "0.8",
      "85": "0.85",
      "90": "0.9",
      "95": "0.95",
      "100": "1"
    },
    "textUnderlineOffset": {
      "0": "0px",
      "1": "1px",
      "2": "2px",
      "4": "4px",
      "8": "8px",
      "auto": "auto"
    },
    "transformOrigin": {
      "center": "center",
      "top": "top",
      "top-right": "top right",
      "right": "right",
      "bottom-right": "bottom right",
      "bottom": "bottom",
      "bottom-left": "bottom left",
      "left": "left",
      "top-left": "top left"
    },
    "transitionDelay": {
      "0": "0s",
      "75": "75ms",
      "100": "100ms",
      "150": "150ms",
      "200": "200ms",
      "300": "300ms",
      "500": "500ms",
      "700": "700ms",
      "1000": "1000ms"
    },
    "transitionDuration": {
      "0": "0s",
      "75": "75ms",
      "100": "100ms",
      "150": "150ms",
      "200": "200ms",
      "300": "300ms",
      "500": "500ms",
      "700": "700ms",
      "1000": "1000ms",
      "DEFAULT": "150ms"
    },
    "transitionProperty": {
      "none": "none",
      "all": "all",
      "DEFAULT": "color, background-color, border-color, text-decoration-color, fill, stroke, opacity, box-shadow, transform, filter, backdrop-filter",
      "colors": "color, background-color, border-color, text-decoration-color, fill, stroke",
      "opacity": "opacity",
      "shadow": "box-shadow",
      "transform": "transform"
    },
    "transitionTimingFunction": {
      "DEFAULT": "cubic-bezier(0.4, 0, 0.2, 1)",
      "linear": "linear",
      "in": "cubic-bezier(0.4, 0, 1, 1)",
      "out": "cubic-bezier(0, 0, 0.2, 1)",
      "in-out": "cubic-bezier(0.4, 0, 0.2, 1)"
    },
    "translate": {
      "0": "0px",
      "1": "0.25rem",
      "2": "0.5rem",
      "3": "0.75rem",
      "4": "1rem",
      "5": "1.25rem",
      "6": "1.5rem",
      "7": "1.75rem",
      "8": "2rem",
      "9": "2.25rem",
      "10": "2.5rem",
      "11": "2.75rem",
      "12": "3rem",
      "14": "3.5rem",
      "16": "4rem",
      "20": "5rem",
      "24": "6rem",
      "28": "7rem",
      "32": "8rem",
      "36": "9rem",
      "40": "10rem",
      "44": "11rem",
      "48": "12rem",
      "52": "13rem",
      "56": "14rem",
      "60": "15rem",
      "64": "16rem",
      "72": "18rem",
      "80": "20rem",
      "96": "24rem",
      "px": "1px",
      "0.5": "0.125rem",
      "1.5": "0.375rem",
      "2.5": "0.625rem",
      "3.5": "0.875rem",
      "1/2": "50%",
      "1/3": "33.333333%",
      "2/3": "66.666667%",
      "1/4": "25%",
      "2/4": "50%",
      "3/4": "75%",
      "full": "100%"
    },
    "size": {
      "0": "0px",
      "1": "0.25rem",
      "2": "0.5rem",
      "3": "0.75rem",
      "4": "1rem",
      "5": "1.25rem",
      "6": "1.5rem",
      "7": "1.75rem",
      "8": "2rem",
      "9": "2.25rem",
      "10": "2.5rem",
      "11": "2.75rem",
      "12": "3rem",
      "14": "3.5rem",
      "16": "4rem",
      "20": "5rem",
      "24": "6rem",
      "28": "7rem",
      "32": "8rem",
      "36": "9rem",
      "40": "10rem",
      "44": "11rem",
      "48": "12rem",
      "52": "13rem",
      "56": "14rem",
      "60": "15rem",
      "64": "16rem",
      "72": "18rem",
      "80": "20rem",
      "96": "24rem",
      "auto": "auto",
      "px": "1px",
      "0.5": "0.125rem",
      "1.5": "0.375rem",
      "2.5": "0.625rem",
      "3.5": "0.875rem",
      "1/2": "50%",
      "1/3": "33.333333%",
      "2/3": "66.666667%",
      "1/4": "25%",
      "2/4": "50%",
      "3/4": "75%",
      "1/5": "20%",
      "2/5": "40%",
      "3/5": "60%",
      "4/5": "80%",
      "1/6": "16.666667%",
      "2/6": "33.333333%",
      "3/6": "50%",
      "4/6": "66.666667%",
      "5/6": "83.333333%",
      "1/12": "8.333333%",
      "2/12": "16.666667%",
      "3/12": "25%",
      "4/12": "33.333333%",
      "5/12": "41.666667%",
      "6/12": "50%",
      "7/12": "58.333333%",
      "8/12": "66.666667%",
      "9/12": "75%",
      "10/12": "83.333333%",
      "11/12": "91.666667%",
      "full": "100%",
      "min": "min-content",
      "max": "max-content",
      "fit": "fit-content"
    },
    "width": {
      "0": "0px",
      "1": "0.25rem",
      "2": "0.5rem",
      "3": "0.75rem",
      "4": "1rem",
      "5": "1.25rem",
      "6": "1.5rem",
      "7": "1.75rem",
      "8": "2rem",
      "9": "2.25rem",
      "10": "2.5rem",
      "11": "2.75rem",
      "12": "3rem",
      "14": "3.5rem",
      "16": "4rem",
      "20": "5rem",
      "24": "6rem",
      "28": "7rem",
      "32": "8rem",
      "36": "9rem",
      "40": "10rem",
      "44": "11rem",
      "48": "12rem",
      "52": "13rem",
      "56": "14rem",
      "60": "15rem",
      "64": "16rem",
      "72": "18rem",
      "80": "20rem",
      "96": "24rem",
      "auto": "auto",
      "px": "1px",
      "0.5": "0.125rem",
      "1.5": "0.375rem",
      "2.5": "0.625rem",
      "3.5": "0.875rem",
      "1/2": "50%",
      "1/3": "33.333333%",
      "2/3": "66.666667%",
      "1/4": "25%",
      "2/4": "50%",
      "3/4": "75%",
      "1/5": "20%",
      "2/5": "40%",
      "3/5": "60%",
      "4/5": "80%",
      "1/6": "16.666667%",
      "2/6": "33.333333%",
      "3/6": "50%",
      "4/6": "66.666667%",
      "5/6": "83.333333%",
      "1/12": "8.333333%",
      "2/12": "16.666667%",
      "3/12": "25%",
      "4/12": "33.333333%",
      "5/12": "41.666667%",
      "6/12": "50%",
      "7/12": "58.333333%",
      "8/12": "66.666667%",
      "9/12": "75%",
      "10/12": "83.333333%",
      "11/12": "91.666667%",
      "full": "100%",
      "screen": "100vw",
      "svw": "100svw",
      "lvw": "100lvw",
      "dvw": "100dvw",
      "min": "min-content",
      "max": "max-content",
      "fit": "fit-content"
    },
    "willChange": {
      "auto": "auto",
      "scroll": "scroll-position",
      "contents": "contents",
      "transform": "transform"
    },
    "zIndex": {
      "0": "0",
      "10": "10",
      "20": "20",
      "30": "30",
      "40": "40",
      "50": "50",
      "auto": "auto"
    }
  },
  "corePlugins": [
    "preflight",
    "container",
    "accessibility",
    "pointerEvents",
    "visibility",
    "position",
    "inset",
    "isolation",
    "zIndex",
    "order",
    "gridColumn",
    "gridColumnStart",
    "gridColumnEnd",
    "gridRow",
    "gridRowStart",
    "gridRowEnd",
    "float",
    "clear",
    "margin",
    "boxSizing",
    "lineClamp",
    "display",
    "aspectRatio",
    "size",
    "height",
    "maxHeight",
    "minHeight",
    "width",
    "minWidth",
    "maxWidth",
    "flex",
    "flexShrink",
    "flexGrow",
    "flexBasis",
    "tableLayout",
    "captionSide",
    "borderCollapse",
    "borderSpacing",
    "transformOrigin",
    "translate",
    "rotate",
    "skew",
    "scale",
    "transform",
    "animation",
    "cursor",
    "touchAction",
    "userSelect",
    "resize",
    "scrollSnapType",
    "scrollSnapAlign",
    "scrollSnapStop",
    "scrollMargin",
    "scrollPadding",
    "listStylePosition",
    "listStyleType",
    "listStyleImage",
    "appearance",
    "columns",
    "breakBefore",
    "breakInside",
    "breakAfter",
    "gridAutoColumns",
    "gridAutoFlow",
    "gridAutoRows",
    "gridTemplateColumns",
    "gridTemplateRows",
    "flexDirection",
    "flexWrap",
    "placeContent",
    "placeItems",
    "alignContent",
    "alignItems",
    "justifyContent",
    "justifyItems",
    "gap",
    "space",
    "divideWidth",
    "divideStyle",
    "divideColor",
    "divideOpacity",
    "placeSelf",
    "alignSelf",
    "justifySelf",
    "overflow",
    "overscrollBehavior",
    "scrollBehavior",
    "textOverflow",
    "hyphens",
    "whitespace",
    "textWrap",
    "wordBreak",
    "borderRadius",
    "borderWidth",
    "borderStyle",
    "borderColor",
    "borderOpacity",
    "backgroundColor",
    "backgroundOpacity",
    "backgroundImage",
    "gradientColorStops",
    "boxDecorationBreak",
    "backgroundSize",
    "backgroundAttachment",
    "backgroundClip",
    "backgroundPosition",
    "backgroundRepeat",
    "backgroundOrigin",
    "fill",
    "stroke",
    "strokeWidth",
    "objectFit",
    "objectPosition",
    "padding",
    "textAlign",
    "textIndent",
    "verticalAlign",
    "fontFamily",
    "fontSize",
    "fontWeight",
    "textTransform",
    "fontStyle",
    "fontVariantNumeric",
    "lineHeight",
    "letterSpacing",
    "textColor",
    "textOpacity",
    "textDecoration",
    "textDecorationColor",
    "textDecorationStyle",
    "textDecorationThickness",
    "textUnderlineOffset",
    "fontSmoothing",
    "placeholderColor",
    "placeholderOpacity",
    "caretColor",
    "accentColor",
    "opacity",
    "backgroundBlendMode",
    "mixBlendMode",
    "boxShadow",
    "boxShadowColor",
    "outlineStyle",
    "outlineWidth",
    "outlineOffset",
    "outlineColor",
    "ringWidth",
    "ringColor",
    "ringOpacity",
    "ringOffsetWidth",
    "ringOffsetColor",
    "blur",
    "brightness",
    "contrast",
    "dropShadow",
    "grayscale",
    "hueRotate",
    "invert",
    "saturate",
    "sepia",
    "filter",
    "backdropBlur",
    "backdropBrightness",
    "backdropContrast",
    "backdropGrayscale",
    "backdropHueRotate",
    "backdropInvert",
    "backdropOpacity",
    "backdropSaturate",
    "backdropSepia",
    "backdropFilter",
    "transitionProperty",
    "transitionDelay",
    "transitionDuration",
    "transitionTimingFunction",
    "willChange",
    "content",
    "forcedColorAdjust"
  ],
  "plugins": [],
  "default": {
    "content": [
      "./index.html",
      "./src/**/*.{vue,js,ts,jsx,tsx}"
    ],
    "safelist": [
      "origin-bottom",
      "origin-top",
      "origin-right",
      "origin-left",
      "origin-bottom-left",
      "origin-bottom-right",
      "origin-top-left",
      "origin-top-right"
    ],
    "theme": {
      "container": {
        "center": true,
        "padding": "2rem",
        "screens": {
          "2xl": "1400px"
        }
      },
      "fontSize": {
        "hero": [
          "var(--font-size-hero)",
          {
            "lineHeight": "var(--font-line-height-hero)"
          }
        ],
        "title": [
          "var(--font-size-title)",
          {
            "lineHeight": "var(--font-line-height-title)"
          }
        ],
        "subtitle": [
          "var(--font-size-subtitle)",
          {
            "lineHeight": "var(--font-line-height-subtitle)"
          }
        ],
        "heading": [
          "var(--font-size-heading)",
          {
            "lineHeight": "var(--font-line-height-heading)"
          }
        ],
        "body": [
          "var(--font-size-body)",
          {
            "lineHeight": "var(--font-line-height-body)"
          }
        ],
        "subtext": [
          "var(--font-size-subtext)",
          {
            "lineHeight": "var(--font-line-height-subtext)"
          }
        ],
        "caption": [
          "var(--font-size-caption)",
          {
            "lineHeight": "var(--font-line-height-caption)"
          }
        ]
      },
      "boxShadow": {
        "DEFAULT": "var(--shadow)",
        "card-shadow": "var(--shadow-card);",
        "card-hover-shadow": "var(--shadow-card-hover);",
        "button-shadow": "var(--shadow-button);",
        "button-hover-shadow": "var(--shadow-button-hover);",
        "popover-shadow": "var(--shadow-popover);",
        "modal-shadow": "var(--shadow-modal);",
        "input-shadow": "var(--shadow-input);",
        "toast-shadow": "var(--shadow-toast);"
      },
      "borderRadius": {
        "DEFAULT": "var(--radius)",
        "card": "var(--radius-card)",
        "button": "var(--radius-button)",
        "modal": "var(--radius-modal)",
        "popover": "var(--radius-popover)",
        "full": "var(--radius-full)",
        "input": "var(--radius-input)"
      },
      "colors": {
        "transparent": "transparent",
        "black": "hsl(var(--black))",
        "white": "hsl(var(--white))",
        "border": "hsl(var(--border))",
        "ring": "hsl(var(--ring))",
        "background": "hsl(var(--background))",
        "foreground": "hsl(var(--foreground))",
        "primary": {
          "DEFAULT": "hsl(var(--primary))",
          "foreground": "hsl(var(--primary-foreground))"
        },
        "secondary": {
          "DEFAULT": "hsl(var(--secondary))",
          "foreground": "hsl(var(--secondary-foreground))"
        },
        "destructive": {
          "DEFAULT": "hsl(var(--destructive))",
          "foreground": "hsl(var(--destructive-foreground))"
        },
        "muted": {
          "DEFAULT": "hsl(var(--muted))",
          "foreground": "hsl(var(--muted-foreground))"
        },
        "accent": {
          "DEFAULT": "hsl(var(--accent))",
          "foreground": "hsl(var(--accent-foreground))"
        },
        "warn": {
          "DEFAULT": "hsl(var(--warning))",
          "foreground": "hsl(var(--warning-foreground))"
        },
        "success": {
          "DEFAULT": "hsl(var(--success))",
          "foreground": "hsl(var(--success-foreground))"
        },
        "info": {
          "DEFAULT": "hsl(var(--info))",
          "foreground": "hsl(var(--info-foreground))"
        },
        "popover": {
          "DEFAULT": "hsl(var(--popover))",
          "foreground": "hsl(var(--popover-foreground))"
        },
        "card": {
          "DEFAULT": "hsl(var(--card))",
          "foreground": "hsl(var(--card-foreground))"
        },
        "input": {
          "DEFAULT": "hsl(var(--input))",
          "foreground": "hsl(var(--input-foreground))",
          "placeholder": "hsl(var(--input-placeholder))",
          "disabled": "hsl(var(--input-disabled))",
          "border": "hsl(var(--input-border))",
          "ring": "hsl(var(--input-ring))"
        },
        "neutral": {
          "100": "hsl(var(--neutral-100))",
          "200": "hsl(var(--neutral-200))",
          "300": "hsl(var(--neutral-300))",
          "400": "hsl(var(--neutral-400))",
          "500": "hsl(var(--neutral-500))",
          "600": "hsl(var(--neutral-600))",
          "700": "hsl(var(--neutral-700))",
          "800": "hsl(var(--neutral-800))",
          "900": "hsl(var(--neutral-900))"
        }
      },
      "extend": {
        "transitionTimingFunction": {
          "out-back": "cubic-bezier(0.34, 1.56, 0.64, 1)",
          "native": "ease"
        }
      }
    }
  },
  "content": {
    "relative": false,
    "files": [],
    "extract": {},
    "transform": {}
  },
  "presets": [],
  "darkMode": "media",
  "prefix": "",
  "important": false,
  "separator": ":",
  "safelist": [],
  "blocklist": []
});
const search = ref$1("");
const sampleText = ref$1("Cat sit like bread eat prawns daintily with a claw then lick paws clean wash down prawns with a lap of carnation milk then retire to the warmest spot on the couch to claw at the fabric before taking a catnap mrow cat cat moo moo lick ears lick paws");
const fontSize = ref$1(16);
function mountApp({ el: el3, state, onUnmount }, render2) {
  Object.assign(state, {
    search,
    sampleText,
    fontSize
  });
  const app = createApp$1({
    render: render2
  });
  app.mount(el3);
  onUnmount(() => {
    app.unmount();
  });
}
const Comp25 = {
  id: "tailwind",
  title: "Tailwind",
  group: "design-system",
  icon: "mdi:tailwind",
  responsiveDisabled: true,
  layout: { type: "single", iframe: false },
  variants: [
    {
      id: "background-color",
      title: "Background Color",
      icon: "carbon:color-palette",
      onMount: (api) => mountApp(api, () => Object.entries(config.theme.backgroundColor).map(([key, shades]) => h$4(vm, {
        key,
        shades: typeof shades === "object" ? shades : { DEFAULT: shades },
        getName: (shade) => (config.prefix ?? "") + (shade === "DEFAULT" ? `bg-${key}` : `bg-${key}-${shade}`),
        search: search.value
      }, ({ color }) => h$4("div", {
        class: "__hst-shade",
        style: {
          backgroundColor: color.replace("<alpha-value>", 1)
        }
      })))),
      onMountControls: (api) => mountApp(api, () => [
        h$4(wm, {
          title: "Filter...",
          modelValue: search.value,
          "onUpdate:modelValue": (value) => {
            search.value = value;
          }
        })
      ])
    },
    {
      id: "text-color",
      title: "Text Color",
      icon: "carbon:text-color",
      onMount: (api) => mountApp(api, () => Object.entries(config.theme.textColor).map(([key, shades]) => h$4(vm, {
        key,
        shades: typeof shades === "object" ? shades : { DEFAULT: shades },
        getName: (shade) => (config.prefix ?? "") + (shade === "DEFAULT" ? `text-${key}` : `text-${key}-${shade}`),
        search: search.value
      }, ({ color }) => h$4("div", {
        class: "__hst-shade __hst-text",
        style: {
          color: color.replace("<alpha-value>", 1)
        }
      }, "Aa")))),
      onMountControls: (api) => mountApp(api, () => [
        h$4(wm, {
          title: "Filter...",
          modelValue: search.value,
          "onUpdate:modelValue": (value) => {
            search.value = value;
          }
        })
      ])
    },
    {
      id: "border-color",
      title: "Border Color",
      icon: "carbon:color-palette",
      onMount: (api) => mountApp(api, () => Object.entries(config.theme.borderColor).map(([key, shades]) => h$4(vm, {
        key,
        shades: typeof shades === "object" ? shades : { DEFAULT: shades },
        getName: (shade) => (config.prefix ?? "") + (shade === "DEFAULT" ? `border-${key}` : `border-${key}-${shade}`),
        search: search.value
      }, ({ color }) => h$4("div", {
        class: "__hst-shade __hst-border",
        style: {
          borderColor: color.replace("<alpha-value>", 1)
        }
      })))),
      onMountControls: (api) => mountApp(api, () => [
        h$4(wm, {
          title: "Filter...",
          modelValue: search.value,
          "onUpdate:modelValue": (value) => {
            search.value = value;
          }
        })
      ])
    },
    {
      id: "padding",
      title: "Padding",
      icon: "carbon:area",
      onMount: (api) => mountApp(api, () => h$4(Sm, {
        tokens: config.theme.padding,
        getName: (key) => `${config.prefix ?? ""}p-${key}`
      }, ({ token }) => h$4("div", {
        class: "__hst-padding",
        style: {
          padding: token.value
        }
      }, [
        h$4("div", {
          class: "__hst-padding-box"
        })
      ])))
    },
    {
      id: "margin",
      title: "Margin",
      icon: "carbon:area",
      onMount: (api) => mountApp(api, () => h$4(Sm, {
        tokens: config.theme.margin,
        getName: (key) => `${config.prefix ?? ""}m-${key}`
      }, ({ token }) => h$4("div", {
        class: "__hst-margin"
      }, [
        h$4("div", {
          class: "__hst-margin-box",
          style: {
            margin: token.value
          }
        })
      ])))
    },
    {
      id: "font-size",
      title: "Font Size",
      icon: "carbon:text-font",
      onMount: (api) => mountApp(api, () => h$4(Sm, {
        tokens: config.theme.fontSize,
        getName: (key) => `${config.prefix ?? ""}text-${key}`
      }, ({ token }) => h$4("div", {
        class: "__hst-truncate",
        style: {
          fontSize: Array.isArray(token.value) ? token.value[0] : token.value,
          ...Array.isArray(token.value) && typeof token.value[1] === "object" ? token.value[1] : { lineHeight: token.value[1] }
        }
      }, sampleText.value))),
      onMountControls: (api) => mountApp(api, () => [
        h$4(km, {
          title: "Sample text",
          modelValue: sampleText.value,
          "onUpdate:modelValue": (value) => {
            sampleText.value = value;
          },
          rows: 5
        })
      ])
    },
    {
      id: "font-weight",
      title: "Font Weight",
      icon: "carbon:text-font",
      onMount: (api) => mountApp(api, () => h$4(Sm, {
        tokens: config.theme.fontWeight,
        getName: (key) => `${config.prefix ?? ""}font-${key}`
      }, ({ token }) => h$4("div", {
        class: "__hst-truncate",
        style: {
          fontWeight: token.value,
          fontSize: `${fontSize.value}px`
        }
      }, sampleText.value))),
      onMountControls: (api) => mountApp(api, () => [
        h$4(km, {
          title: "Sample text",
          modelValue: sampleText.value,
          "onUpdate:modelValue": (value) => {
            sampleText.value = value;
          },
          rows: 5
        }),
        h$4(ym, {
          title: "Font size",
          modelValue: fontSize.value,
          "onUpdate:modelValue": (value) => {
            fontSize.value = value;
          },
          min: 1
        })
      ])
    },
    {
      id: "font-family",
      title: "Font Family",
      icon: "carbon:text-font",
      onMount: (api) => mountApp(api, () => h$4(Sm, {
        tokens: config.theme.fontFamily,
        getName: (key) => `${config.prefix ?? ""}font-${key}`
      }, ({ token }) => h$4("div", {
        class: "__hst-truncate",
        style: {
          fontFamily: token.value,
          fontSize: `${fontSize.value}px`
        }
      }, sampleText.value))),
      onMountControls: (api) => mountApp(api, () => [
        h$4(km, {
          title: "Sample text",
          modelValue: sampleText.value,
          "onUpdate:modelValue": (value) => {
            sampleText.value = value;
          },
          rows: 5
        }),
        h$4(ym, {
          title: "Font size",
          modelValue: fontSize.value,
          "onUpdate:modelValue": (value) => {
            fontSize.value = value;
          },
          min: 1
        })
      ])
    },
    {
      id: "letter-spacing",
      title: "Letter Spacing",
      icon: "carbon:text-font",
      onMount: (api) => mountApp(api, () => h$4(Sm, {
        tokens: config.theme.letterSpacing,
        getName: (key) => `${config.prefix ?? ""}tracking-${key}`
      }, ({ token }) => h$4("div", {
        class: "__hst-truncate",
        style: {
          letterSpacing: token.value,
          fontSize: `${fontSize.value}px`
        }
      }, sampleText.value))),
      onMountControls: (api) => mountApp(api, () => [
        h$4(km, {
          title: "Sample text",
          modelValue: sampleText.value,
          "onUpdate:modelValue": (value) => {
            sampleText.value = value;
          },
          rows: 5
        }),
        h$4(ym, {
          title: "Font size",
          modelValue: fontSize.value,
          "onUpdate:modelValue": (value) => {
            fontSize.value = value;
          },
          min: 1
        })
      ])
    },
    {
      id: "line-height",
      title: "Line Height",
      icon: "carbon:text-font",
      onMount: (api) => mountApp(api, () => h$4(Sm, {
        tokens: config.theme.lineHeight,
        getName: (key) => `${config.prefix ?? ""}leading-${key}`
      }, ({ token }) => h$4("div", {
        style: {
          lineHeight: token.value
        }
      }, sampleText.value))),
      onMountControls: (api) => mountApp(api, () => [
        h$4(km, {
          title: "Sample text",
          modelValue: sampleText.value,
          "onUpdate:modelValue": (value) => {
            sampleText.value = value;
          },
          rows: 5
        })
        // @TODO select font size
      ])
    },
    {
      id: "drop-shadow",
      title: "Drop Shadow",
      icon: "carbon:shape-except",
      onMount: (api) => mountApp(api, () => h$4(Cm, {
        tokens: config.theme.dropShadow,
        getName: (key) => (config.prefix ?? "") + (key === "DEFAULT" ? "drop-shadow" : `drop-shadow-${key}`),
        colSize: 180
      }, ({ token }) => h$4("div", {
        class: "__hst-drop-shadow",
        style: {
          filter: `${(Array.isArray(token.value) ? token.value : [token.value]).map((v2) => `drop-shadow(${v2})`).join(" ")}`
        }
      })))
    },
    {
      id: "border-radius",
      title: "Border Radius",
      icon: "carbon:condition-wait-point",
      onMount: (api) => mountApp(api, () => h$4(Cm, {
        tokens: config.theme.borderRadius,
        getName: (key) => (config.prefix ?? "") + (key === "DEFAULT" ? "rounded" : `rounded-${key}`),
        colSize: 180
      }, ({ token }) => h$4("div", {
        class: "__hst-border-radius",
        style: {
          borderRadius: token.value
        }
      })))
    },
    {
      id: "border-width",
      title: "Border Width",
      icon: "carbon:checkbox",
      onMount: (api) => mountApp(api, () => h$4(Cm, {
        tokens: config.theme.borderWidth,
        getName: (key) => (config.prefix ?? "") + (key === "DEFAULT" ? "border" : `border-${key}`),
        colSize: 180
      }, ({ token }) => h$4("div", {
        class: "__hst-border-width",
        style: {
          borderWidth: token.value
        }
      })))
    },
    {
      id: "width",
      title: "Width",
      icon: "carbon:pan-horizontal",
      onMount: (api) => mountApp(api, () => h$4(Sm, {
        tokens: config.theme.width,
        getName: (key) => (config.prefix ?? "") + (key === "DEFAULT" ? "w" : `w-${key}`)
      }, ({ token }) => h$4("div", {
        class: "__hst-width"
      }, [
        h$4("div", {
          class: "__hst-width-box",
          style: {
            width: token.value
          }
        })
      ])))
    },
    {
      id: "height",
      title: "Height",
      icon: "carbon:pan-vertical",
      onMount: (api) => mountApp(api, () => h$4(Sm, {
        tokens: config.theme.height,
        getName: (key) => (config.prefix ?? "") + (key === "DEFAULT" ? "h" : `h-${key}`)
      }, ({ token }) => h$4("div", {
        class: "__hst-height",
        style: {
          height: token.value
        }
      })))
    },
    {
      id: "full-config",
      title: "Full Config",
      icon: "carbon:code",
      onMount: (api) => mountApp(api, () => h$4("pre", JSON.stringify(config, null, 2)))
    }
  ]
};
/*!
  * vue-router v4.2.5
  * (c) 2023 Eduardo San Martin Morote
  * @license MIT
  */
const isBrowser$1 = typeof window !== "undefined";
function isESModule$1(obj) {
  return obj.__esModule || obj[Symbol.toStringTag] === "Module";
}
const assign$4 = Object.assign;
function applyToParams$1(fn2, params) {
  const newParams = {};
  for (const key in params) {
    const value = params[key];
    newParams[key] = isArray$2(value) ? value.map(fn2) : fn2(value);
  }
  return newParams;
}
const noop$2 = () => {
};
const isArray$2 = Array.isArray;
function warn$2(msg) {
  const args = Array.from(arguments).slice(1);
  console.warn.apply(console, ["[Vue Router warn]: " + msg].concat(args));
}
const TRAILING_SLASH_RE$1 = /\/$/;
const removeTrailingSlash$1 = (path) => path.replace(TRAILING_SLASH_RE$1, "");
function parseURL$1(parseQuery2, location2, currentLocation = "/") {
  let path, query = {}, searchString = "", hash2 = "";
  const hashPos = location2.indexOf("#");
  let searchPos = location2.indexOf("?");
  if (hashPos < searchPos && hashPos >= 0) {
    searchPos = -1;
  }
  if (searchPos > -1) {
    path = location2.slice(0, searchPos);
    searchString = location2.slice(searchPos + 1, hashPos > -1 ? hashPos : location2.length);
    query = parseQuery2(searchString);
  }
  if (hashPos > -1) {
    path = path || location2.slice(0, hashPos);
    hash2 = location2.slice(hashPos, location2.length);
  }
  path = resolveRelativePath$1(path != null ? path : location2, currentLocation);
  return {
    fullPath: path + (searchString && "?") + searchString + hash2,
    path,
    query,
    hash: hash2
  };
}
function stringifyURL$1(stringifyQuery2, location2) {
  const query = location2.query ? stringifyQuery2(location2.query) : "";
  return location2.path + (query && "?") + query + (location2.hash || "");
}
function stripBase$1(pathname, base) {
  if (!base || !pathname.toLowerCase().startsWith(base.toLowerCase()))
    return pathname;
  return pathname.slice(base.length) || "/";
}
function isSameRouteLocation$1(stringifyQuery2, a4, b4) {
  const aLastIndex = a4.matched.length - 1;
  const bLastIndex = b4.matched.length - 1;
  return aLastIndex > -1 && aLastIndex === bLastIndex && isSameRouteRecord$1(a4.matched[aLastIndex], b4.matched[bLastIndex]) && isSameRouteLocationParams$1(a4.params, b4.params) && stringifyQuery2(a4.query) === stringifyQuery2(b4.query) && a4.hash === b4.hash;
}
function isSameRouteRecord$1(a4, b4) {
  return (a4.aliasOf || a4) === (b4.aliasOf || b4);
}
function isSameRouteLocationParams$1(a4, b4) {
  if (Object.keys(a4).length !== Object.keys(b4).length)
    return false;
  for (const key in a4) {
    if (!isSameRouteLocationParamsValue$1(a4[key], b4[key]))
      return false;
  }
  return true;
}
function isSameRouteLocationParamsValue$1(a4, b4) {
  return isArray$2(a4) ? isEquivalentArray$1(a4, b4) : isArray$2(b4) ? isEquivalentArray$1(b4, a4) : a4 === b4;
}
function isEquivalentArray$1(a4, b4) {
  return isArray$2(b4) ? a4.length === b4.length && a4.every((value, i3) => value === b4[i3]) : a4.length === 1 && a4[0] === b4;
}
function resolveRelativePath$1(to2, from) {
  if (to2.startsWith("/"))
    return to2;
  if (!from.startsWith("/")) {
    warn$2(`Cannot resolve a relative location without an absolute path. Trying to resolve "${to2}" from "${from}". It should look like "/${from}".`);
    return to2;
  }
  if (!to2)
    return from;
  const fromSegments = from.split("/");
  const toSegments = to2.split("/");
  const lastToSegment = toSegments[toSegments.length - 1];
  if (lastToSegment === ".." || lastToSegment === ".") {
    toSegments.push("");
  }
  let position = fromSegments.length - 1;
  let toPosition;
  let segment;
  for (toPosition = 0; toPosition < toSegments.length; toPosition++) {
    segment = toSegments[toPosition];
    if (segment === ".")
      continue;
    if (segment === "..") {
      if (position > 1)
        position--;
    } else
      break;
  }
  return fromSegments.slice(0, position).join("/") + "/" + toSegments.slice(toPosition - (toPosition === toSegments.length ? 1 : 0)).join("/");
}
var NavigationType$1;
(function(NavigationType2) {
  NavigationType2["pop"] = "pop";
  NavigationType2["push"] = "push";
})(NavigationType$1 || (NavigationType$1 = {}));
var NavigationDirection$1;
(function(NavigationDirection2) {
  NavigationDirection2["back"] = "back";
  NavigationDirection2["forward"] = "forward";
  NavigationDirection2["unknown"] = "";
})(NavigationDirection$1 || (NavigationDirection$1 = {}));
function normalizeBase$1(base) {
  if (!base) {
    if (isBrowser$1) {
      const baseEl = document.querySelector("base");
      base = baseEl && baseEl.getAttribute("href") || "/";
      base = base.replace(/^\w+:\/\/[^\/]+/, "");
    } else {
      base = "/";
    }
  }
  if (base[0] !== "/" && base[0] !== "#")
    base = "/" + base;
  return removeTrailingSlash$1(base);
}
const BEFORE_HASH_RE$1 = /^[^#]+#/;
function createHref$1(base, location2) {
  return base.replace(BEFORE_HASH_RE$1, "#") + location2;
}
function getElementPosition$1(el3, offset2) {
  const docRect = document.documentElement.getBoundingClientRect();
  const elRect = el3.getBoundingClientRect();
  return {
    behavior: offset2.behavior,
    left: elRect.left - docRect.left - (offset2.left || 0),
    top: elRect.top - docRect.top - (offset2.top || 0)
  };
}
const computeScrollPosition$1 = () => ({
  left: window.pageXOffset,
  top: window.pageYOffset
});
function scrollToPosition$1(position) {
  let scrollToOptions;
  if ("el" in position) {
    const positionEl = position.el;
    const isIdSelector = typeof positionEl === "string" && positionEl.startsWith("#");
    if (typeof position.el === "string") {
      if (!isIdSelector || !document.getElementById(position.el.slice(1))) {
        try {
          const foundEl = document.querySelector(position.el);
          if (isIdSelector && foundEl) {
            warn$2(`The selector "${position.el}" should be passed as "el: document.querySelector('${position.el}')" because it starts with "#".`);
            return;
          }
        } catch (err) {
          warn$2(`The selector "${position.el}" is invalid. If you are using an id selector, make sure to escape it. You can find more information about escaping characters in selectors at https://mathiasbynens.be/notes/css-escapes or use CSS.escape (https://developer.mozilla.org/en-US/docs/Web/API/CSS/escape).`);
          return;
        }
      }
    }
    const el3 = typeof positionEl === "string" ? isIdSelector ? document.getElementById(positionEl.slice(1)) : document.querySelector(positionEl) : positionEl;
    if (!el3) {
      warn$2(`Couldn't find element using selector "${position.el}" returned by scrollBehavior.`);
      return;
    }
    scrollToOptions = getElementPosition$1(el3, position);
  } else {
    scrollToOptions = position;
  }
  if ("scrollBehavior" in document.documentElement.style)
    window.scrollTo(scrollToOptions);
  else {
    window.scrollTo(scrollToOptions.left != null ? scrollToOptions.left : window.pageXOffset, scrollToOptions.top != null ? scrollToOptions.top : window.pageYOffset);
  }
}
function getScrollKey$1(path, delta) {
  const position = history.state ? history.state.position - delta : -1;
  return position + path;
}
const scrollPositions$1 = /* @__PURE__ */ new Map();
function saveScrollPosition$1(key, scrollPosition) {
  scrollPositions$1.set(key, scrollPosition);
}
function getSavedScrollPosition$1(key) {
  const scroll = scrollPositions$1.get(key);
  scrollPositions$1.delete(key);
  return scroll;
}
let createBaseLocation$1 = () => location.protocol + "//" + location.host;
function createCurrentLocation$1(base, location2) {
  const { pathname, search: search2, hash: hash2 } = location2;
  const hashPos = base.indexOf("#");
  if (hashPos > -1) {
    let slicePos = hash2.includes(base.slice(hashPos)) ? base.slice(hashPos).length : 1;
    let pathFromHash = hash2.slice(slicePos);
    if (pathFromHash[0] !== "/")
      pathFromHash = "/" + pathFromHash;
    return stripBase$1(pathFromHash, "");
  }
  const path = stripBase$1(pathname, base);
  return path + search2 + hash2;
}
function useHistoryListeners$1(base, historyState, currentLocation, replace) {
  let listeners = [];
  let teardowns = [];
  let pauseState = null;
  const popStateHandler = ({ state }) => {
    const to2 = createCurrentLocation$1(base, location);
    const from = currentLocation.value;
    const fromState = historyState.value;
    let delta = 0;
    if (state) {
      currentLocation.value = to2;
      historyState.value = state;
      if (pauseState && pauseState === from) {
        pauseState = null;
        return;
      }
      delta = fromState ? state.position - fromState.position : 0;
    } else {
      replace(to2);
    }
    listeners.forEach((listener) => {
      listener(currentLocation.value, from, {
        delta,
        type: NavigationType$1.pop,
        direction: delta ? delta > 0 ? NavigationDirection$1.forward : NavigationDirection$1.back : NavigationDirection$1.unknown
      });
    });
  };
  function pauseListeners() {
    pauseState = currentLocation.value;
  }
  function listen(callback) {
    listeners.push(callback);
    const teardown = () => {
      const index = listeners.indexOf(callback);
      if (index > -1)
        listeners.splice(index, 1);
    };
    teardowns.push(teardown);
    return teardown;
  }
  function beforeUnloadListener() {
    const { history: history2 } = window;
    if (!history2.state)
      return;
    history2.replaceState(assign$4({}, history2.state, { scroll: computeScrollPosition$1() }), "");
  }
  function destroy() {
    for (const teardown of teardowns)
      teardown();
    teardowns = [];
    window.removeEventListener("popstate", popStateHandler);
    window.removeEventListener("beforeunload", beforeUnloadListener);
  }
  window.addEventListener("popstate", popStateHandler);
  window.addEventListener("beforeunload", beforeUnloadListener, {
    passive: true
  });
  return {
    pauseListeners,
    listen,
    destroy
  };
}
function buildState$1(back, current, forward, replaced = false, computeScroll = false) {
  return {
    back,
    current,
    forward,
    replaced,
    position: window.history.length,
    scroll: computeScroll ? computeScrollPosition$1() : null
  };
}
function useHistoryStateNavigation$1(base) {
  const { history: history2, location: location2 } = window;
  const currentLocation = {
    value: createCurrentLocation$1(base, location2)
  };
  const historyState = { value: history2.state };
  if (!historyState.value) {
    changeLocation(currentLocation.value, {
      back: null,
      current: currentLocation.value,
      forward: null,
      // the length is off by one, we need to decrease it
      position: history2.length - 1,
      replaced: true,
      // don't add a scroll as the user may have an anchor, and we want
      // scrollBehavior to be triggered without a saved position
      scroll: null
    }, true);
  }
  function changeLocation(to2, state, replace2) {
    const hashIndex = base.indexOf("#");
    const url = hashIndex > -1 ? (location2.host && document.querySelector("base") ? base : base.slice(hashIndex)) + to2 : createBaseLocation$1() + base + to2;
    try {
      history2[replace2 ? "replaceState" : "pushState"](state, "", url);
      historyState.value = state;
    } catch (err) {
      {
        warn$2("Error with push/replace State", err);
      }
      location2[replace2 ? "replace" : "assign"](url);
    }
  }
  function replace(to2, data) {
    const state = assign$4({}, history2.state, buildState$1(
      historyState.value.back,
      // keep back and forward entries but override current position
      to2,
      historyState.value.forward,
      true
    ), data, { position: historyState.value.position });
    changeLocation(to2, state, true);
    currentLocation.value = to2;
  }
  function push(to2, data) {
    const currentState = assign$4(
      {},
      // use current history state to gracefully handle a wrong call to
      // history.replaceState
      // https://github.com/vuejs/router/issues/366
      historyState.value,
      history2.state,
      {
        forward: to2,
        scroll: computeScrollPosition$1()
      }
    );
    if (!history2.state) {
      warn$2(`history.state seems to have been manually replaced without preserving the necessary values. Make sure to preserve existing history state if you are manually calling history.replaceState:

history.replaceState(history.state, '', url)

You can find more information at https://next.router.vuejs.org/guide/migration/#usage-of-history-state.`);
    }
    changeLocation(currentState.current, currentState, true);
    const state = assign$4({}, buildState$1(currentLocation.value, to2, null), { position: currentState.position + 1 }, data);
    changeLocation(to2, state, false);
    currentLocation.value = to2;
  }
  return {
    location: currentLocation,
    state: historyState,
    push,
    replace
  };
}
function createWebHistory$1(base) {
  base = normalizeBase$1(base);
  const historyNavigation = useHistoryStateNavigation$1(base);
  const historyListeners = useHistoryListeners$1(base, historyNavigation.state, historyNavigation.location, historyNavigation.replace);
  function go2(delta, triggerListeners = true) {
    if (!triggerListeners)
      historyListeners.pauseListeners();
    history.go(delta);
  }
  const routerHistory = assign$4({
    // it's overridden right after
    location: "",
    base,
    go: go2,
    createHref: createHref$1.bind(null, base)
  }, historyNavigation, historyListeners);
  Object.defineProperty(routerHistory, "location", {
    enumerable: true,
    get: () => historyNavigation.location.value
  });
  Object.defineProperty(routerHistory, "state", {
    enumerable: true,
    get: () => historyNavigation.state.value
  });
  return routerHistory;
}
function createWebHashHistory(base) {
  base = location.host ? base || location.pathname + location.search : "";
  if (!base.includes("#"))
    base += "#";
  if (!base.endsWith("#/") && !base.endsWith("#")) {
    warn$2(`A hash base must end with a "#":
"${base}" should be "${base.replace(/#.*$/, "#")}".`);
  }
  return createWebHistory$1(base);
}
function isRouteLocation$1(route) {
  return typeof route === "string" || route && typeof route === "object";
}
function isRouteName$1(name) {
  return typeof name === "string" || typeof name === "symbol";
}
const START_LOCATION_NORMALIZED$1 = {
  path: "/",
  name: void 0,
  params: {},
  query: {},
  hash: "",
  fullPath: "/",
  matched: [],
  meta: {},
  redirectedFrom: void 0
};
const NavigationFailureSymbol$1 = Symbol("navigation failure");
var NavigationFailureType$1;
(function(NavigationFailureType2) {
  NavigationFailureType2[NavigationFailureType2["aborted"] = 4] = "aborted";
  NavigationFailureType2[NavigationFailureType2["cancelled"] = 8] = "cancelled";
  NavigationFailureType2[NavigationFailureType2["duplicated"] = 16] = "duplicated";
})(NavigationFailureType$1 || (NavigationFailureType$1 = {}));
const ErrorTypeMessages$1 = {
  [
    1
    /* ErrorTypes.MATCHER_NOT_FOUND */
  ]({ location: location2, currentLocation }) {
    return `No match for
 ${JSON.stringify(location2)}${currentLocation ? "\nwhile being at\n" + JSON.stringify(currentLocation) : ""}`;
  },
  [
    2
    /* ErrorTypes.NAVIGATION_GUARD_REDIRECT */
  ]({ from, to: to2 }) {
    return `Redirected from "${from.fullPath}" to "${stringifyRoute$1(to2)}" via a navigation guard.`;
  },
  [
    4
    /* ErrorTypes.NAVIGATION_ABORTED */
  ]({ from, to: to2 }) {
    return `Navigation aborted from "${from.fullPath}" to "${to2.fullPath}" via a navigation guard.`;
  },
  [
    8
    /* ErrorTypes.NAVIGATION_CANCELLED */
  ]({ from, to: to2 }) {
    return `Navigation cancelled from "${from.fullPath}" to "${to2.fullPath}" with a new navigation.`;
  },
  [
    16
    /* ErrorTypes.NAVIGATION_DUPLICATED */
  ]({ from, to: to2 }) {
    return `Avoided redundant navigation to current location: "${from.fullPath}".`;
  }
};
function createRouterError$1(type, params) {
  {
    return assign$4(new Error(ErrorTypeMessages$1[type](params)), {
      type,
      [NavigationFailureSymbol$1]: true
    }, params);
  }
}
function isNavigationFailure$1(error, type) {
  return error instanceof Error && NavigationFailureSymbol$1 in error && (type == null || !!(error.type & type));
}
const propertiesToLog$1 = ["params", "query", "hash"];
function stringifyRoute$1(to2) {
  if (typeof to2 === "string")
    return to2;
  if ("path" in to2)
    return to2.path;
  const location2 = {};
  for (const key of propertiesToLog$1) {
    if (key in to2)
      location2[key] = to2[key];
  }
  return JSON.stringify(location2, null, 2);
}
const BASE_PARAM_PATTERN$1 = "[^/]+?";
const BASE_PATH_PARSER_OPTIONS$1 = {
  sensitive: false,
  strict: false,
  start: true,
  end: true
};
const REGEX_CHARS_RE$1 = /[.+*?^${}()[\]/\\]/g;
function tokensToParser$1(segments, extraOptions) {
  const options = assign$4({}, BASE_PATH_PARSER_OPTIONS$1, extraOptions);
  const score = [];
  let pattern = options.start ? "^" : "";
  const keys = [];
  for (const segment of segments) {
    const segmentScores = segment.length ? [] : [
      90
      /* PathScore.Root */
    ];
    if (options.strict && !segment.length)
      pattern += "/";
    for (let tokenIndex = 0; tokenIndex < segment.length; tokenIndex++) {
      const token = segment[tokenIndex];
      let subSegmentScore = 40 + (options.sensitive ? 0.25 : 0);
      if (token.type === 0) {
        if (!tokenIndex)
          pattern += "/";
        pattern += token.value.replace(REGEX_CHARS_RE$1, "\\$&");
        subSegmentScore += 40;
      } else if (token.type === 1) {
        const { value, repeatable, optional, regexp } = token;
        keys.push({
          name: value,
          repeatable,
          optional
        });
        const re22 = regexp ? regexp : BASE_PARAM_PATTERN$1;
        if (re22 !== BASE_PARAM_PATTERN$1) {
          subSegmentScore += 10;
          try {
            new RegExp(`(${re22})`);
          } catch (err) {
            throw new Error(`Invalid custom RegExp for param "${value}" (${re22}): ` + err.message);
          }
        }
        let subPattern = repeatable ? `((?:${re22})(?:/(?:${re22}))*)` : `(${re22})`;
        if (!tokenIndex)
          subPattern = // avoid an optional / if there are more segments e.g. /:p?-static
          // or /:p?-:p2
          optional && segment.length < 2 ? `(?:/${subPattern})` : "/" + subPattern;
        if (optional)
          subPattern += "?";
        pattern += subPattern;
        subSegmentScore += 20;
        if (optional)
          subSegmentScore += -8;
        if (repeatable)
          subSegmentScore += -20;
        if (re22 === ".*")
          subSegmentScore += -50;
      }
      segmentScores.push(subSegmentScore);
    }
    score.push(segmentScores);
  }
  if (options.strict && options.end) {
    const i3 = score.length - 1;
    score[i3][score[i3].length - 1] += 0.7000000000000001;
  }
  if (!options.strict)
    pattern += "/?";
  if (options.end)
    pattern += "$";
  else if (options.strict)
    pattern += "(?:/|$)";
  const re3 = new RegExp(pattern, options.sensitive ? "" : "i");
  function parse2(path) {
    const match2 = path.match(re3);
    const params = {};
    if (!match2)
      return null;
    for (let i3 = 1; i3 < match2.length; i3++) {
      const value = match2[i3] || "";
      const key = keys[i3 - 1];
      params[key.name] = value && key.repeatable ? value.split("/") : value;
    }
    return params;
  }
  function stringify(params) {
    let path = "";
    let avoidDuplicatedSlash = false;
    for (const segment of segments) {
      if (!avoidDuplicatedSlash || !path.endsWith("/"))
        path += "/";
      avoidDuplicatedSlash = false;
      for (const token of segment) {
        if (token.type === 0) {
          path += token.value;
        } else if (token.type === 1) {
          const { value, repeatable, optional } = token;
          const param = value in params ? params[value] : "";
          if (isArray$2(param) && !repeatable) {
            throw new Error(`Provided param "${value}" is an array but it is not repeatable (* or + modifiers)`);
          }
          const text = isArray$2(param) ? param.join("/") : param;
          if (!text) {
            if (optional) {
              if (segment.length < 2) {
                if (path.endsWith("/"))
                  path = path.slice(0, -1);
                else
                  avoidDuplicatedSlash = true;
              }
            } else
              throw new Error(`Missing required param "${value}"`);
          }
          path += text;
        }
      }
    }
    return path || "/";
  }
  return {
    re: re3,
    score,
    keys,
    parse: parse2,
    stringify
  };
}
function compareScoreArray$1(a4, b4) {
  let i3 = 0;
  while (i3 < a4.length && i3 < b4.length) {
    const diff = b4[i3] - a4[i3];
    if (diff)
      return diff;
    i3++;
  }
  if (a4.length < b4.length) {
    return a4.length === 1 && a4[0] === 40 + 40 ? -1 : 1;
  } else if (a4.length > b4.length) {
    return b4.length === 1 && b4[0] === 40 + 40 ? 1 : -1;
  }
  return 0;
}
function comparePathParserScore$1(a4, b4) {
  let i3 = 0;
  const aScore = a4.score;
  const bScore = b4.score;
  while (i3 < aScore.length && i3 < bScore.length) {
    const comp = compareScoreArray$1(aScore[i3], bScore[i3]);
    if (comp)
      return comp;
    i3++;
  }
  if (Math.abs(bScore.length - aScore.length) === 1) {
    if (isLastScoreNegative$1(aScore))
      return 1;
    if (isLastScoreNegative$1(bScore))
      return -1;
  }
  return bScore.length - aScore.length;
}
function isLastScoreNegative$1(score) {
  const last = score[score.length - 1];
  return score.length > 0 && last[last.length - 1] < 0;
}
const ROOT_TOKEN$1 = {
  type: 0,
  value: ""
};
const VALID_PARAM_RE$1 = /[a-zA-Z0-9_]/;
function tokenizePath$1(path) {
  if (!path)
    return [[]];
  if (path === "/")
    return [[ROOT_TOKEN$1]];
  if (!path.startsWith("/")) {
    throw new Error(`Route paths should start with a "/": "${path}" should be "/${path}".`);
  }
  function crash(message) {
    throw new Error(`ERR (${state})/"${buffer2}": ${message}`);
  }
  let state = 0;
  let previousState = state;
  const tokens = [];
  let segment;
  function finalizeSegment() {
    if (segment)
      tokens.push(segment);
    segment = [];
  }
  let i3 = 0;
  let char;
  let buffer2 = "";
  let customRe = "";
  function consumeBuffer() {
    if (!buffer2)
      return;
    if (state === 0) {
      segment.push({
        type: 0,
        value: buffer2
      });
    } else if (state === 1 || state === 2 || state === 3) {
      if (segment.length > 1 && (char === "*" || char === "+"))
        crash(`A repeatable param (${buffer2}) must be alone in its segment. eg: '/:ids+.`);
      segment.push({
        type: 1,
        value: buffer2,
        regexp: customRe,
        repeatable: char === "*" || char === "+",
        optional: char === "*" || char === "?"
      });
    } else {
      crash("Invalid state to consume buffer");
    }
    buffer2 = "";
  }
  function addCharToBuffer() {
    buffer2 += char;
  }
  while (i3 < path.length) {
    char = path[i3++];
    if (char === "\\" && state !== 2) {
      previousState = state;
      state = 4;
      continue;
    }
    switch (state) {
      case 0:
        if (char === "/") {
          if (buffer2) {
            consumeBuffer();
          }
          finalizeSegment();
        } else if (char === ":") {
          consumeBuffer();
          state = 1;
        } else {
          addCharToBuffer();
        }
        break;
      case 4:
        addCharToBuffer();
        state = previousState;
        break;
      case 1:
        if (char === "(") {
          state = 2;
        } else if (VALID_PARAM_RE$1.test(char)) {
          addCharToBuffer();
        } else {
          consumeBuffer();
          state = 0;
          if (char !== "*" && char !== "?" && char !== "+")
            i3--;
        }
        break;
      case 2:
        if (char === ")") {
          if (customRe[customRe.length - 1] == "\\")
            customRe = customRe.slice(0, -1) + char;
          else
            state = 3;
        } else {
          customRe += char;
        }
        break;
      case 3:
        consumeBuffer();
        state = 0;
        if (char !== "*" && char !== "?" && char !== "+")
          i3--;
        customRe = "";
        break;
      default:
        crash("Unknown state");
        break;
    }
  }
  if (state === 2)
    crash(`Unfinished custom RegExp for param "${buffer2}"`);
  consumeBuffer();
  finalizeSegment();
  return tokens;
}
function createRouteRecordMatcher$1(record, parent, options) {
  const parser = tokensToParser$1(tokenizePath$1(record.path), options);
  {
    const existingKeys = /* @__PURE__ */ new Set();
    for (const key of parser.keys) {
      if (existingKeys.has(key.name))
        warn$2(`Found duplicated params with name "${key.name}" for path "${record.path}". Only the last one will be available on "$route.params".`);
      existingKeys.add(key.name);
    }
  }
  const matcher = assign$4(parser, {
    record,
    parent,
    // these needs to be populated by the parent
    children: [],
    alias: []
  });
  if (parent) {
    if (!matcher.record.aliasOf === !parent.record.aliasOf)
      parent.children.push(matcher);
  }
  return matcher;
}
function createRouterMatcher$1(routes2, globalOptions) {
  const matchers = [];
  const matcherMap = /* @__PURE__ */ new Map();
  globalOptions = mergeOptions$1({ strict: false, end: true, sensitive: false }, globalOptions);
  function getRecordMatcher(name) {
    return matcherMap.get(name);
  }
  function addRoute(record, parent, originalRecord) {
    const isRootAdd = !originalRecord;
    const mainNormalizedRecord = normalizeRouteRecord$1(record);
    {
      checkChildMissingNameWithEmptyPath$1(mainNormalizedRecord, parent);
    }
    mainNormalizedRecord.aliasOf = originalRecord && originalRecord.record;
    const options = mergeOptions$1(globalOptions, record);
    const normalizedRecords = [
      mainNormalizedRecord
    ];
    if ("alias" in record) {
      const aliases = typeof record.alias === "string" ? [record.alias] : record.alias;
      for (const alias of aliases) {
        normalizedRecords.push(assign$4({}, mainNormalizedRecord, {
          // this allows us to hold a copy of the `components` option
          // so that async components cache is hold on the original record
          components: originalRecord ? originalRecord.record.components : mainNormalizedRecord.components,
          path: alias,
          // we might be the child of an alias
          aliasOf: originalRecord ? originalRecord.record : mainNormalizedRecord
          // the aliases are always of the same kind as the original since they
          // are defined on the same record
        }));
      }
    }
    let matcher;
    let originalMatcher;
    for (const normalizedRecord of normalizedRecords) {
      const { path } = normalizedRecord;
      if (parent && path[0] !== "/") {
        const parentPath = parent.record.path;
        const connectingSlash = parentPath[parentPath.length - 1] === "/" ? "" : "/";
        normalizedRecord.path = parent.record.path + (path && connectingSlash + path);
      }
      if (normalizedRecord.path === "*") {
        throw new Error('Catch all routes ("*") must now be defined using a param with a custom regexp.\nSee more at https://next.router.vuejs.org/guide/migration/#removed-star-or-catch-all-routes.');
      }
      matcher = createRouteRecordMatcher$1(normalizedRecord, parent, options);
      if (parent && path[0] === "/")
        checkMissingParamsInAbsolutePath$1(matcher, parent);
      if (originalRecord) {
        originalRecord.alias.push(matcher);
        {
          checkSameParams$1(originalRecord, matcher);
        }
      } else {
        originalMatcher = originalMatcher || matcher;
        if (originalMatcher !== matcher)
          originalMatcher.alias.push(matcher);
        if (isRootAdd && record.name && !isAliasRecord$1(matcher))
          removeRoute(record.name);
      }
      if (mainNormalizedRecord.children) {
        const children = mainNormalizedRecord.children;
        for (let i3 = 0; i3 < children.length; i3++) {
          addRoute(children[i3], matcher, originalRecord && originalRecord.children[i3]);
        }
      }
      originalRecord = originalRecord || matcher;
      if (matcher.record.components && Object.keys(matcher.record.components).length || matcher.record.name || matcher.record.redirect) {
        insertMatcher(matcher);
      }
    }
    return originalMatcher ? () => {
      removeRoute(originalMatcher);
    } : noop$2;
  }
  function removeRoute(matcherRef) {
    if (isRouteName$1(matcherRef)) {
      const matcher = matcherMap.get(matcherRef);
      if (matcher) {
        matcherMap.delete(matcherRef);
        matchers.splice(matchers.indexOf(matcher), 1);
        matcher.children.forEach(removeRoute);
        matcher.alias.forEach(removeRoute);
      }
    } else {
      const index = matchers.indexOf(matcherRef);
      if (index > -1) {
        matchers.splice(index, 1);
        if (matcherRef.record.name)
          matcherMap.delete(matcherRef.record.name);
        matcherRef.children.forEach(removeRoute);
        matcherRef.alias.forEach(removeRoute);
      }
    }
  }
  function getRoutes() {
    return matchers;
  }
  function insertMatcher(matcher) {
    let i3 = 0;
    while (i3 < matchers.length && comparePathParserScore$1(matcher, matchers[i3]) >= 0 && // Adding children with empty path should still appear before the parent
    // https://github.com/vuejs/router/issues/1124
    (matcher.record.path !== matchers[i3].record.path || !isRecordChildOf$1(matcher, matchers[i3])))
      i3++;
    matchers.splice(i3, 0, matcher);
    if (matcher.record.name && !isAliasRecord$1(matcher))
      matcherMap.set(matcher.record.name, matcher);
  }
  function resolve2(location2, currentLocation) {
    let matcher;
    let params = {};
    let path;
    let name;
    if ("name" in location2 && location2.name) {
      matcher = matcherMap.get(location2.name);
      if (!matcher)
        throw createRouterError$1(1, {
          location: location2
        });
      {
        const invalidParams = Object.keys(location2.params || {}).filter((paramName) => !matcher.keys.find((k3) => k3.name === paramName));
        if (invalidParams.length) {
          warn$2(`Discarded invalid param(s) "${invalidParams.join('", "')}" when navigating. See https://github.com/vuejs/router/blob/main/packages/router/CHANGELOG.md#414-2022-08-22 for more details.`);
        }
      }
      name = matcher.record.name;
      params = assign$4(
        // paramsFromLocation is a new object
        paramsFromLocation$1(
          currentLocation.params,
          // only keep params that exist in the resolved location
          // TODO: only keep optional params coming from a parent record
          matcher.keys.filter((k3) => !k3.optional).map((k3) => k3.name)
        ),
        // discard any existing params in the current location that do not exist here
        // #1497 this ensures better active/exact matching
        location2.params && paramsFromLocation$1(location2.params, matcher.keys.map((k3) => k3.name))
      );
      path = matcher.stringify(params);
    } else if ("path" in location2) {
      path = location2.path;
      if (!path.startsWith("/")) {
        warn$2(`The Matcher cannot resolve relative paths but received "${path}". Unless you directly called \`matcher.resolve("${path}")\`, this is probably a bug in vue-router. Please open an issue at https://github.com/vuejs/router/issues/new/choose.`);
      }
      matcher = matchers.find((m4) => m4.re.test(path));
      if (matcher) {
        params = matcher.parse(path);
        name = matcher.record.name;
      }
    } else {
      matcher = currentLocation.name ? matcherMap.get(currentLocation.name) : matchers.find((m4) => m4.re.test(currentLocation.path));
      if (!matcher)
        throw createRouterError$1(1, {
          location: location2,
          currentLocation
        });
      name = matcher.record.name;
      params = assign$4({}, currentLocation.params, location2.params);
      path = matcher.stringify(params);
    }
    const matched = [];
    let parentMatcher = matcher;
    while (parentMatcher) {
      matched.unshift(parentMatcher.record);
      parentMatcher = parentMatcher.parent;
    }
    return {
      name,
      path,
      params,
      matched,
      meta: mergeMetaFields$1(matched)
    };
  }
  routes2.forEach((route) => addRoute(route));
  return { addRoute, resolve: resolve2, removeRoute, getRoutes, getRecordMatcher };
}
function paramsFromLocation$1(params, keys) {
  const newParams = {};
  for (const key of keys) {
    if (key in params)
      newParams[key] = params[key];
  }
  return newParams;
}
function normalizeRouteRecord$1(record) {
  return {
    path: record.path,
    redirect: record.redirect,
    name: record.name,
    meta: record.meta || {},
    aliasOf: void 0,
    beforeEnter: record.beforeEnter,
    props: normalizeRecordProps$1(record),
    children: record.children || [],
    instances: {},
    leaveGuards: /* @__PURE__ */ new Set(),
    updateGuards: /* @__PURE__ */ new Set(),
    enterCallbacks: {},
    components: "components" in record ? record.components || null : record.component && { default: record.component }
  };
}
function normalizeRecordProps$1(record) {
  const propsObject = {};
  const props = record.props || false;
  if ("component" in record) {
    propsObject.default = props;
  } else {
    for (const name in record.components)
      propsObject[name] = typeof props === "object" ? props[name] : props;
  }
  return propsObject;
}
function isAliasRecord$1(record) {
  while (record) {
    if (record.record.aliasOf)
      return true;
    record = record.parent;
  }
  return false;
}
function mergeMetaFields$1(matched) {
  return matched.reduce((meta, record) => assign$4(meta, record.meta), {});
}
function mergeOptions$1(defaults2, partialOptions) {
  const options = {};
  for (const key in defaults2) {
    options[key] = key in partialOptions ? partialOptions[key] : defaults2[key];
  }
  return options;
}
function isSameParam$1(a4, b4) {
  return a4.name === b4.name && a4.optional === b4.optional && a4.repeatable === b4.repeatable;
}
function checkSameParams$1(a4, b4) {
  for (const key of a4.keys) {
    if (!key.optional && !b4.keys.find(isSameParam$1.bind(null, key)))
      return warn$2(`Alias "${b4.record.path}" and the original record: "${a4.record.path}" must have the exact same param named "${key.name}"`);
  }
  for (const key of b4.keys) {
    if (!key.optional && !a4.keys.find(isSameParam$1.bind(null, key)))
      return warn$2(`Alias "${b4.record.path}" and the original record: "${a4.record.path}" must have the exact same param named "${key.name}"`);
  }
}
function checkChildMissingNameWithEmptyPath$1(mainNormalizedRecord, parent) {
  if (parent && parent.record.name && !mainNormalizedRecord.name && !mainNormalizedRecord.path) {
    warn$2(`The route named "${String(parent.record.name)}" has a child without a name and an empty path. Using that name won't render the empty path child so you probably want to move the name to the child instead. If this is intentional, add a name to the child route to remove the warning.`);
  }
}
function checkMissingParamsInAbsolutePath$1(record, parent) {
  for (const key of parent.keys) {
    if (!record.keys.find(isSameParam$1.bind(null, key)))
      return warn$2(`Absolute path "${record.record.path}" must have the exact same param named "${key.name}" as its parent "${parent.record.path}".`);
  }
}
function isRecordChildOf$1(record, parent) {
  return parent.children.some((child) => child === record || isRecordChildOf$1(record, child));
}
const HASH_RE$1 = /#/g;
const AMPERSAND_RE$1 = /&/g;
const SLASH_RE$1 = /\//g;
const EQUAL_RE$1 = /=/g;
const IM_RE$1 = /\?/g;
const PLUS_RE$1 = /\+/g;
const ENC_BRACKET_OPEN_RE$1 = /%5B/g;
const ENC_BRACKET_CLOSE_RE$1 = /%5D/g;
const ENC_CARET_RE$1 = /%5E/g;
const ENC_BACKTICK_RE$1 = /%60/g;
const ENC_CURLY_OPEN_RE$1 = /%7B/g;
const ENC_PIPE_RE$1 = /%7C/g;
const ENC_CURLY_CLOSE_RE$1 = /%7D/g;
const ENC_SPACE_RE$1 = /%20/g;
function commonEncode$1(text) {
  return encodeURI("" + text).replace(ENC_PIPE_RE$1, "|").replace(ENC_BRACKET_OPEN_RE$1, "[").replace(ENC_BRACKET_CLOSE_RE$1, "]");
}
function encodeHash$1(text) {
  return commonEncode$1(text).replace(ENC_CURLY_OPEN_RE$1, "{").replace(ENC_CURLY_CLOSE_RE$1, "}").replace(ENC_CARET_RE$1, "^");
}
function encodeQueryValue$1(text) {
  return commonEncode$1(text).replace(PLUS_RE$1, "%2B").replace(ENC_SPACE_RE$1, "+").replace(HASH_RE$1, "%23").replace(AMPERSAND_RE$1, "%26").replace(ENC_BACKTICK_RE$1, "`").replace(ENC_CURLY_OPEN_RE$1, "{").replace(ENC_CURLY_CLOSE_RE$1, "}").replace(ENC_CARET_RE$1, "^");
}
function encodeQueryKey$1(text) {
  return encodeQueryValue$1(text).replace(EQUAL_RE$1, "%3D");
}
function encodePath$1(text) {
  return commonEncode$1(text).replace(HASH_RE$1, "%23").replace(IM_RE$1, "%3F");
}
function encodeParam$1(text) {
  return text == null ? "" : encodePath$1(text).replace(SLASH_RE$1, "%2F");
}
function decode$1(text) {
  try {
    return decodeURIComponent("" + text);
  } catch (err) {
    warn$2(`Error decoding "${text}". Using original value`);
  }
  return "" + text;
}
function parseQuery$1(search2) {
  const query = {};
  if (search2 === "" || search2 === "?")
    return query;
  const hasLeadingIM = search2[0] === "?";
  const searchParams = (hasLeadingIM ? search2.slice(1) : search2).split("&");
  for (let i3 = 0; i3 < searchParams.length; ++i3) {
    const searchParam = searchParams[i3].replace(PLUS_RE$1, " ");
    const eqPos = searchParam.indexOf("=");
    const key = decode$1(eqPos < 0 ? searchParam : searchParam.slice(0, eqPos));
    const value = eqPos < 0 ? null : decode$1(searchParam.slice(eqPos + 1));
    if (key in query) {
      let currentValue = query[key];
      if (!isArray$2(currentValue)) {
        currentValue = query[key] = [currentValue];
      }
      currentValue.push(value);
    } else {
      query[key] = value;
    }
  }
  return query;
}
function stringifyQuery$1(query) {
  let search2 = "";
  for (let key in query) {
    const value = query[key];
    key = encodeQueryKey$1(key);
    if (value == null) {
      if (value !== void 0) {
        search2 += (search2.length ? "&" : "") + key;
      }
      continue;
    }
    const values = isArray$2(value) ? value.map((v2) => v2 && encodeQueryValue$1(v2)) : [value && encodeQueryValue$1(value)];
    values.forEach((value2) => {
      if (value2 !== void 0) {
        search2 += (search2.length ? "&" : "") + key;
        if (value2 != null)
          search2 += "=" + value2;
      }
    });
  }
  return search2;
}
function normalizeQuery$1(query) {
  const normalizedQuery = {};
  for (const key in query) {
    const value = query[key];
    if (value !== void 0) {
      normalizedQuery[key] = isArray$2(value) ? value.map((v2) => v2 == null ? null : "" + v2) : value == null ? value : "" + value;
    }
  }
  return normalizedQuery;
}
const matchedRouteKey$1 = Symbol("router view location matched");
const viewDepthKey$1 = Symbol("router view depth");
const routerKey$1 = Symbol("router");
const routeLocationKey$1 = Symbol("route location");
const routerViewLocationKey$1 = Symbol("router view location");
function useCallbacks$1() {
  let handlers2 = [];
  function add2(handler) {
    handlers2.push(handler);
    return () => {
      const i3 = handlers2.indexOf(handler);
      if (i3 > -1)
        handlers2.splice(i3, 1);
    };
  }
  function reset() {
    handlers2 = [];
  }
  return {
    add: add2,
    list: () => handlers2.slice(),
    reset
  };
}
function guardToPromiseFn$1(guard, to2, from, record, name) {
  const enterCallbackArray = record && // name is defined if record is because of the function overload
  (record.enterCallbacks[name] = record.enterCallbacks[name] || []);
  return () => new Promise((resolve2, reject) => {
    const next = (valid) => {
      if (valid === false) {
        reject(createRouterError$1(4, {
          from,
          to: to2
        }));
      } else if (valid instanceof Error) {
        reject(valid);
      } else if (isRouteLocation$1(valid)) {
        reject(createRouterError$1(2, {
          from: to2,
          to: valid
        }));
      } else {
        if (enterCallbackArray && // since enterCallbackArray is truthy, both record and name also are
        record.enterCallbacks[name] === enterCallbackArray && typeof valid === "function") {
          enterCallbackArray.push(valid);
        }
        resolve2();
      }
    };
    const guardReturn = guard.call(record && record.instances[name], to2, from, canOnlyBeCalledOnce$1(next, to2, from));
    let guardCall = Promise.resolve(guardReturn);
    if (guard.length < 3)
      guardCall = guardCall.then(next);
    if (guard.length > 2) {
      const message = `The "next" callback was never called inside of ${guard.name ? '"' + guard.name + '"' : ""}:
${guard.toString()}
. If you are returning a value instead of calling "next", make sure to remove the "next" parameter from your function.`;
      if (typeof guardReturn === "object" && "then" in guardReturn) {
        guardCall = guardCall.then((resolvedValue) => {
          if (!next._called) {
            warn$2(message);
            return Promise.reject(new Error("Invalid navigation guard"));
          }
          return resolvedValue;
        });
      } else if (guardReturn !== void 0) {
        if (!next._called) {
          warn$2(message);
          reject(new Error("Invalid navigation guard"));
          return;
        }
      }
    }
    guardCall.catch((err) => reject(err));
  });
}
function canOnlyBeCalledOnce$1(next, to2, from) {
  let called = 0;
  return function() {
    if (called++ === 1)
      warn$2(`The "next" callback was called more than once in one navigation guard when going from "${from.fullPath}" to "${to2.fullPath}". It should be called exactly one time in each navigation guard. This will fail in production.`);
    next._called = true;
    if (called === 1)
      next.apply(null, arguments);
  };
}
function extractComponentsGuards$1(matched, guardType, to2, from) {
  const guards = [];
  for (const record of matched) {
    if (!record.components && !record.children.length) {
      warn$2(`Record with path "${record.path}" is either missing a "component(s)" or "children" property.`);
    }
    for (const name in record.components) {
      let rawComponent = record.components[name];
      {
        if (!rawComponent || typeof rawComponent !== "object" && typeof rawComponent !== "function") {
          warn$2(`Component "${name}" in record with path "${record.path}" is not a valid component. Received "${String(rawComponent)}".`);
          throw new Error("Invalid route component");
        } else if ("then" in rawComponent) {
          warn$2(`Component "${name}" in record with path "${record.path}" is a Promise instead of a function that returns a Promise. Did you write "import('./MyPage.vue')" instead of "() => import('./MyPage.vue')" ? This will break in production if not fixed.`);
          const promise = rawComponent;
          rawComponent = () => promise;
        } else if (rawComponent.__asyncLoader && // warn only once per component
        !rawComponent.__warnedDefineAsync) {
          rawComponent.__warnedDefineAsync = true;
          warn$2(`Component "${name}" in record with path "${record.path}" is defined using "defineAsyncComponent()". Write "() => import('./MyPage.vue')" instead of "defineAsyncComponent(() => import('./MyPage.vue'))".`);
        }
      }
      if (guardType !== "beforeRouteEnter" && !record.instances[name])
        continue;
      if (isRouteComponent$1(rawComponent)) {
        const options = rawComponent.__vccOpts || rawComponent;
        const guard = options[guardType];
        guard && guards.push(guardToPromiseFn$1(guard, to2, from, record, name));
      } else {
        let componentPromise = rawComponent();
        if (!("catch" in componentPromise)) {
          warn$2(`Component "${name}" in record with path "${record.path}" is a function that does not return a Promise. If you were passing a functional component, make sure to add a "displayName" to the component. This will break in production if not fixed.`);
          componentPromise = Promise.resolve(componentPromise);
        }
        guards.push(() => componentPromise.then((resolved) => {
          if (!resolved)
            return Promise.reject(new Error(`Couldn't resolve component "${name}" at "${record.path}"`));
          const resolvedComponent = isESModule$1(resolved) ? resolved.default : resolved;
          record.components[name] = resolvedComponent;
          const options = resolvedComponent.__vccOpts || resolvedComponent;
          const guard = options[guardType];
          return guard && guardToPromiseFn$1(guard, to2, from, record, name)();
        }));
      }
    }
  }
  return guards;
}
function isRouteComponent$1(component) {
  return typeof component === "object" || "displayName" in component || "props" in component || "__vccOpts" in component;
}
function useLink$1(props) {
  const router2 = inject$1(routerKey$1);
  const currentRoute = inject$1(routeLocationKey$1);
  const route = computed$2(() => router2.resolve(unref$1(props.to)));
  const activeRecordIndex = computed$2(() => {
    const { matched } = route.value;
    const { length } = matched;
    const routeMatched = matched[length - 1];
    const currentMatched = currentRoute.matched;
    if (!routeMatched || !currentMatched.length)
      return -1;
    const index = currentMatched.findIndex(isSameRouteRecord$1.bind(null, routeMatched));
    if (index > -1)
      return index;
    const parentRecordPath = getOriginalPath$1(matched[length - 2]);
    return (
      // we are dealing with nested routes
      length > 1 && // if the parent and matched route have the same path, this link is
      // referring to the empty child. Or we currently are on a different
      // child of the same parent
      getOriginalPath$1(routeMatched) === parentRecordPath && // avoid comparing the child with its parent
      currentMatched[currentMatched.length - 1].path !== parentRecordPath ? currentMatched.findIndex(isSameRouteRecord$1.bind(null, matched[length - 2])) : index
    );
  });
  const isActive = computed$2(() => activeRecordIndex.value > -1 && includesParams$1(currentRoute.params, route.value.params));
  const isExactActive = computed$2(() => activeRecordIndex.value > -1 && activeRecordIndex.value === currentRoute.matched.length - 1 && isSameRouteLocationParams$1(currentRoute.params, route.value.params));
  function navigate(e3 = {}) {
    if (guardEvent$1(e3)) {
      return router2[unref$1(props.replace) ? "replace" : "push"](
        unref$1(props.to)
        // avoid uncaught errors are they are logged anyway
      ).catch(noop$2);
    }
    return Promise.resolve();
  }
  if (isBrowser$1) {
    const instance = getCurrentInstance$1();
    if (instance) {
      const linkContextDevtools = {
        route: route.value,
        isActive: isActive.value,
        isExactActive: isExactActive.value
      };
      instance.__vrl_devtools = instance.__vrl_devtools || [];
      instance.__vrl_devtools.push(linkContextDevtools);
      watchEffect$1(() => {
        linkContextDevtools.route = route.value;
        linkContextDevtools.isActive = isActive.value;
        linkContextDevtools.isExactActive = isExactActive.value;
      }, { flush: "post" });
    }
  }
  return {
    route,
    href: computed$2(() => route.value.href),
    isActive,
    isExactActive,
    navigate
  };
}
const RouterLinkImpl$1 = /* @__PURE__ */ defineComponent$1({
  name: "RouterLink",
  compatConfig: { MODE: 3 },
  props: {
    to: {
      type: [String, Object],
      required: true
    },
    replace: Boolean,
    activeClass: String,
    // inactiveClass: String,
    exactActiveClass: String,
    custom: Boolean,
    ariaCurrentValue: {
      type: String,
      default: "page"
    }
  },
  useLink: useLink$1,
  setup(props, { slots }) {
    const link = reactive$1(useLink$1(props));
    const { options } = inject$1(routerKey$1);
    const elClass = computed$2(() => ({
      [getLinkClass$1(props.activeClass, options.linkActiveClass, "router-link-active")]: link.isActive,
      // [getLinkClass(
      //   props.inactiveClass,
      //   options.linkInactiveClass,
      //   'router-link-inactive'
      // )]: !link.isExactActive,
      [getLinkClass$1(props.exactActiveClass, options.linkExactActiveClass, "router-link-exact-active")]: link.isExactActive
    }));
    return () => {
      const children = slots.default && slots.default(link);
      return props.custom ? children : h$4("a", {
        "aria-current": link.isExactActive ? props.ariaCurrentValue : null,
        href: link.href,
        // this would override user added attrs but Vue will still add
        // the listener, so we end up triggering both
        onClick: link.navigate,
        class: elClass.value
      }, children);
    };
  }
});
const RouterLink$1 = RouterLinkImpl$1;
function guardEvent$1(e3) {
  if (e3.metaKey || e3.altKey || e3.ctrlKey || e3.shiftKey)
    return;
  if (e3.defaultPrevented)
    return;
  if (e3.button !== void 0 && e3.button !== 0)
    return;
  if (e3.currentTarget && e3.currentTarget.getAttribute) {
    const target = e3.currentTarget.getAttribute("target");
    if (/\b_blank\b/i.test(target))
      return;
  }
  if (e3.preventDefault)
    e3.preventDefault();
  return true;
}
function includesParams$1(outer, inner) {
  for (const key in inner) {
    const innerValue = inner[key];
    const outerValue = outer[key];
    if (typeof innerValue === "string") {
      if (innerValue !== outerValue)
        return false;
    } else {
      if (!isArray$2(outerValue) || outerValue.length !== innerValue.length || innerValue.some((value, i3) => value !== outerValue[i3]))
        return false;
    }
  }
  return true;
}
function getOriginalPath$1(record) {
  return record ? record.aliasOf ? record.aliasOf.path : record.path : "";
}
const getLinkClass$1 = (propClass, globalClass, defaultClass) => propClass != null ? propClass : globalClass != null ? globalClass : defaultClass;
const RouterViewImpl$1 = /* @__PURE__ */ defineComponent$1({
  name: "RouterView",
  // #674 we manually inherit them
  inheritAttrs: false,
  props: {
    name: {
      type: String,
      default: "default"
    },
    route: Object
  },
  // Better compat for @vue/compat users
  // https://github.com/vuejs/router/issues/1315
  compatConfig: { MODE: 3 },
  setup(props, { attrs, slots }) {
    warnDeprecatedUsage$1();
    const injectedRoute = inject$1(routerViewLocationKey$1);
    const routeToDisplay = computed$2(() => props.route || injectedRoute.value);
    const injectedDepth = inject$1(viewDepthKey$1, 0);
    const depth = computed$2(() => {
      let initialDepth = unref$1(injectedDepth);
      const { matched } = routeToDisplay.value;
      let matchedRoute;
      while ((matchedRoute = matched[initialDepth]) && !matchedRoute.components) {
        initialDepth++;
      }
      return initialDepth;
    });
    const matchedRouteRef = computed$2(() => routeToDisplay.value.matched[depth.value]);
    provide$1(viewDepthKey$1, computed$2(() => depth.value + 1));
    provide$1(matchedRouteKey$1, matchedRouteRef);
    provide$1(routerViewLocationKey$1, routeToDisplay);
    const viewRef = ref$1();
    watch$1(() => [viewRef.value, matchedRouteRef.value, props.name], ([instance, to2, name], [oldInstance, from, oldName]) => {
      if (to2) {
        to2.instances[name] = instance;
        if (from && from !== to2 && instance && instance === oldInstance) {
          if (!to2.leaveGuards.size) {
            to2.leaveGuards = from.leaveGuards;
          }
          if (!to2.updateGuards.size) {
            to2.updateGuards = from.updateGuards;
          }
        }
      }
      if (instance && to2 && // if there is no instance but to and from are the same this might be
      // the first visit
      (!from || !isSameRouteRecord$1(to2, from) || !oldInstance)) {
        (to2.enterCallbacks[name] || []).forEach((callback) => callback(instance));
      }
    }, { flush: "post" });
    return () => {
      const route = routeToDisplay.value;
      const currentName = props.name;
      const matchedRoute = matchedRouteRef.value;
      const ViewComponent = matchedRoute && matchedRoute.components[currentName];
      if (!ViewComponent) {
        return normalizeSlot$1(slots.default, { Component: ViewComponent, route });
      }
      const routePropsOption = matchedRoute.props[currentName];
      const routeProps = routePropsOption ? routePropsOption === true ? route.params : typeof routePropsOption === "function" ? routePropsOption(route) : routePropsOption : null;
      const onVnodeUnmounted = (vnode) => {
        if (vnode.component.isUnmounted) {
          matchedRoute.instances[currentName] = null;
        }
      };
      const component = h$4(ViewComponent, assign$4({}, routeProps, attrs, {
        onVnodeUnmounted,
        ref: viewRef
      }));
      if (isBrowser$1 && component.ref) {
        const info = {
          depth: depth.value,
          name: matchedRoute.name,
          path: matchedRoute.path,
          meta: matchedRoute.meta
        };
        const internalInstances = isArray$2(component.ref) ? component.ref.map((r2) => r2.i) : [component.ref.i];
        internalInstances.forEach((instance) => {
          instance.__vrv_devtools = info;
        });
      }
      return (
        // pass the vnode to the slot as a prop.
        // h and <component :is="..."> both accept vnodes
        normalizeSlot$1(slots.default, { Component: component, route }) || component
      );
    };
  }
});
function normalizeSlot$1(slot, data) {
  if (!slot)
    return null;
  const slotContent = slot(data);
  return slotContent.length === 1 ? slotContent[0] : slotContent;
}
const RouterView$1 = RouterViewImpl$1;
function warnDeprecatedUsage$1() {
  const instance = getCurrentInstance$1();
  const parentName = instance.parent && instance.parent.type.name;
  const parentSubTreeType = instance.parent && instance.parent.subTree && instance.parent.subTree.type;
  if (parentName && (parentName === "KeepAlive" || parentName.includes("Transition")) && typeof parentSubTreeType === "object" && parentSubTreeType.name === "RouterView") {
    const comp = parentName === "KeepAlive" ? "keep-alive" : "transition";
    warn$2(`<router-view> can no longer be used directly inside <transition> or <keep-alive>.
Use slot props instead:

<router-view v-slot="{ Component }">
  <${comp}>
    <component :is="Component" />
  </${comp}>
</router-view>`);
  }
}
function formatRouteLocation$1(routeLocation, tooltip) {
  const copy = assign$4({}, routeLocation, {
    // remove variables that can contain vue instances
    matched: routeLocation.matched.map((matched) => omit$2(matched, ["instances", "children", "aliasOf"]))
  });
  return {
    _custom: {
      type: null,
      readOnly: true,
      display: routeLocation.fullPath,
      tooltip,
      value: copy
    }
  };
}
function formatDisplay$2(display) {
  return {
    _custom: {
      display
    }
  };
}
let routerId$1 = 0;
function addDevtools$1(app, router2, matcher) {
  if (router2.__hasDevtools)
    return;
  router2.__hasDevtools = true;
  const id2 = routerId$1++;
  setupDevtoolsPlugin$1({
    id: "org.vuejs.router" + (id2 ? "." + id2 : ""),
    label: "Vue Router",
    packageName: "vue-router",
    homepage: "https://router.vuejs.org",
    logo: "https://router.vuejs.org/logo.png",
    componentStateTypes: ["Routing"],
    app
  }, (api) => {
    if (typeof api.now !== "function") {
      console.warn("[Vue Router]: You seem to be using an outdated version of Vue Devtools. Are you still using the Beta release instead of the stable one? You can find the links at https://devtools.vuejs.org/guide/installation.html.");
    }
    api.on.inspectComponent((payload, ctx) => {
      if (payload.instanceData) {
        payload.instanceData.state.push({
          type: "Routing",
          key: "$route",
          editable: false,
          value: formatRouteLocation$1(router2.currentRoute.value, "Current Route")
        });
      }
    });
    api.on.visitComponentTree(({ treeNode: node, componentInstance }) => {
      if (componentInstance.__vrv_devtools) {
        const info = componentInstance.__vrv_devtools;
        node.tags.push({
          label: (info.name ? `${info.name.toString()}: ` : "") + info.path,
          textColor: 0,
          tooltip: "This component is rendered by &lt;router-view&gt;",
          backgroundColor: PINK_500$1
        });
      }
      if (isArray$2(componentInstance.__vrl_devtools)) {
        componentInstance.__devtoolsApi = api;
        componentInstance.__vrl_devtools.forEach((devtoolsData) => {
          let backgroundColor = ORANGE_400$1;
          let tooltip = "";
          if (devtoolsData.isExactActive) {
            backgroundColor = LIME_500$1;
            tooltip = "This is exactly active";
          } else if (devtoolsData.isActive) {
            backgroundColor = BLUE_600$1;
            tooltip = "This link is active";
          }
          node.tags.push({
            label: devtoolsData.route.path,
            textColor: 0,
            tooltip,
            backgroundColor
          });
        });
      }
    });
    watch$1(router2.currentRoute, () => {
      refreshRoutesView();
      api.notifyComponentUpdate();
      api.sendInspectorTree(routerInspectorId);
      api.sendInspectorState(routerInspectorId);
    });
    const navigationsLayerId = "router:navigations:" + id2;
    api.addTimelineLayer({
      id: navigationsLayerId,
      label: `Router${id2 ? " " + id2 : ""} Navigations`,
      color: 4237508
    });
    router2.onError((error, to2) => {
      api.addTimelineEvent({
        layerId: navigationsLayerId,
        event: {
          title: "Error during Navigation",
          subtitle: to2.fullPath,
          logType: "error",
          time: api.now(),
          data: { error },
          groupId: to2.meta.__navigationId
        }
      });
    });
    let navigationId = 0;
    router2.beforeEach((to2, from) => {
      const data = {
        guard: formatDisplay$2("beforeEach"),
        from: formatRouteLocation$1(from, "Current Location during this navigation"),
        to: formatRouteLocation$1(to2, "Target location")
      };
      Object.defineProperty(to2.meta, "__navigationId", {
        value: navigationId++
      });
      api.addTimelineEvent({
        layerId: navigationsLayerId,
        event: {
          time: api.now(),
          title: "Start of navigation",
          subtitle: to2.fullPath,
          data,
          groupId: to2.meta.__navigationId
        }
      });
    });
    router2.afterEach((to2, from, failure) => {
      const data = {
        guard: formatDisplay$2("afterEach")
      };
      if (failure) {
        data.failure = {
          _custom: {
            type: Error,
            readOnly: true,
            display: failure ? failure.message : "",
            tooltip: "Navigation Failure",
            value: failure
          }
        };
        data.status = formatDisplay$2("❌");
      } else {
        data.status = formatDisplay$2("✅");
      }
      data.from = formatRouteLocation$1(from, "Current Location during this navigation");
      data.to = formatRouteLocation$1(to2, "Target location");
      api.addTimelineEvent({
        layerId: navigationsLayerId,
        event: {
          title: "End of navigation",
          subtitle: to2.fullPath,
          time: api.now(),
          data,
          logType: failure ? "warning" : "default",
          groupId: to2.meta.__navigationId
        }
      });
    });
    const routerInspectorId = "router-inspector:" + id2;
    api.addInspector({
      id: routerInspectorId,
      label: "Routes" + (id2 ? " " + id2 : ""),
      icon: "book",
      treeFilterPlaceholder: "Search routes"
    });
    function refreshRoutesView() {
      if (!activeRoutesPayload)
        return;
      const payload = activeRoutesPayload;
      let routes2 = matcher.getRoutes().filter((route) => !route.parent || // these routes have a parent with no component which will not appear in the view
      // therefore we still need to include them
      !route.parent.record.components);
      routes2.forEach(resetMatchStateOnRouteRecord$1);
      if (payload.filter) {
        routes2 = routes2.filter((route) => (
          // save matches state based on the payload
          isRouteMatching$1(route, payload.filter.toLowerCase())
        ));
      }
      routes2.forEach((route) => markRouteRecordActive$1(route, router2.currentRoute.value));
      payload.rootNodes = routes2.map(formatRouteRecordForInspector$1);
    }
    let activeRoutesPayload;
    api.on.getInspectorTree((payload) => {
      activeRoutesPayload = payload;
      if (payload.app === app && payload.inspectorId === routerInspectorId) {
        refreshRoutesView();
      }
    });
    api.on.getInspectorState((payload) => {
      if (payload.app === app && payload.inspectorId === routerInspectorId) {
        const routes2 = matcher.getRoutes();
        const route = routes2.find((route2) => route2.record.__vd_id === payload.nodeId);
        if (route) {
          payload.state = {
            options: formatRouteRecordMatcherForStateInspector$1(route)
          };
        }
      }
    });
    api.sendInspectorTree(routerInspectorId);
    api.sendInspectorState(routerInspectorId);
  });
}
function modifierForKey$1(key) {
  if (key.optional) {
    return key.repeatable ? "*" : "?";
  } else {
    return key.repeatable ? "+" : "";
  }
}
function formatRouteRecordMatcherForStateInspector$1(route) {
  const { record } = route;
  const fields = [
    { editable: false, key: "path", value: record.path }
  ];
  if (record.name != null) {
    fields.push({
      editable: false,
      key: "name",
      value: record.name
    });
  }
  fields.push({ editable: false, key: "regexp", value: route.re });
  if (route.keys.length) {
    fields.push({
      editable: false,
      key: "keys",
      value: {
        _custom: {
          type: null,
          readOnly: true,
          display: route.keys.map((key) => `${key.name}${modifierForKey$1(key)}`).join(" "),
          tooltip: "Param keys",
          value: route.keys
        }
      }
    });
  }
  if (record.redirect != null) {
    fields.push({
      editable: false,
      key: "redirect",
      value: record.redirect
    });
  }
  if (route.alias.length) {
    fields.push({
      editable: false,
      key: "aliases",
      value: route.alias.map((alias) => alias.record.path)
    });
  }
  if (Object.keys(route.record.meta).length) {
    fields.push({
      editable: false,
      key: "meta",
      value: route.record.meta
    });
  }
  fields.push({
    key: "score",
    editable: false,
    value: {
      _custom: {
        type: null,
        readOnly: true,
        display: route.score.map((score) => score.join(", ")).join(" | "),
        tooltip: "Score used to sort routes",
        value: route.score
      }
    }
  });
  return fields;
}
const PINK_500$1 = 15485081;
const BLUE_600$1 = 2450411;
const LIME_500$1 = 8702998;
const CYAN_400$1 = 2282478;
const ORANGE_400$1 = 16486972;
const DARK$1 = 6710886;
function formatRouteRecordForInspector$1(route) {
  const tags = [];
  const { record } = route;
  if (record.name != null) {
    tags.push({
      label: String(record.name),
      textColor: 0,
      backgroundColor: CYAN_400$1
    });
  }
  if (record.aliasOf) {
    tags.push({
      label: "alias",
      textColor: 0,
      backgroundColor: ORANGE_400$1
    });
  }
  if (route.__vd_match) {
    tags.push({
      label: "matches",
      textColor: 0,
      backgroundColor: PINK_500$1
    });
  }
  if (route.__vd_exactActive) {
    tags.push({
      label: "exact",
      textColor: 0,
      backgroundColor: LIME_500$1
    });
  }
  if (route.__vd_active) {
    tags.push({
      label: "active",
      textColor: 0,
      backgroundColor: BLUE_600$1
    });
  }
  if (record.redirect) {
    tags.push({
      label: typeof record.redirect === "string" ? `redirect: ${record.redirect}` : "redirects",
      textColor: 16777215,
      backgroundColor: DARK$1
    });
  }
  let id2 = record.__vd_id;
  if (id2 == null) {
    id2 = String(routeRecordId$1++);
    record.__vd_id = id2;
  }
  return {
    id: id2,
    label: record.path,
    tags,
    children: route.children.map(formatRouteRecordForInspector$1)
  };
}
let routeRecordId$1 = 0;
const EXTRACT_REGEXP_RE$1 = /^\/(.*)\/([a-z]*)$/;
function markRouteRecordActive$1(route, currentRoute) {
  const isExactActive = currentRoute.matched.length && isSameRouteRecord$1(currentRoute.matched[currentRoute.matched.length - 1], route.record);
  route.__vd_exactActive = route.__vd_active = isExactActive;
  if (!isExactActive) {
    route.__vd_active = currentRoute.matched.some((match2) => isSameRouteRecord$1(match2, route.record));
  }
  route.children.forEach((childRoute) => markRouteRecordActive$1(childRoute, currentRoute));
}
function resetMatchStateOnRouteRecord$1(route) {
  route.__vd_match = false;
  route.children.forEach(resetMatchStateOnRouteRecord$1);
}
function isRouteMatching$1(route, filter) {
  const found = String(route.re).match(EXTRACT_REGEXP_RE$1);
  route.__vd_match = false;
  if (!found || found.length < 3) {
    return false;
  }
  const nonEndingRE = new RegExp(found[1].replace(/\$$/, ""), found[2]);
  if (nonEndingRE.test(filter)) {
    route.children.forEach((child) => isRouteMatching$1(child, filter));
    if (route.record.path !== "/" || filter === "/") {
      route.__vd_match = route.re.test(filter);
      return true;
    }
    return false;
  }
  const path = route.record.path.toLowerCase();
  const decodedPath = decode$1(path);
  if (!filter.startsWith("/") && (decodedPath.includes(filter) || path.includes(filter)))
    return true;
  if (decodedPath.startsWith(filter) || path.startsWith(filter))
    return true;
  if (route.record.name && String(route.record.name).includes(filter))
    return true;
  return route.children.some((child) => isRouteMatching$1(child, filter));
}
function omit$2(obj, keys) {
  const ret = {};
  for (const key in obj) {
    if (!keys.includes(key)) {
      ret[key] = obj[key];
    }
  }
  return ret;
}
function createRouter$1(options) {
  const matcher = createRouterMatcher$1(options.routes, options);
  const parseQuery$1$1 = options.parseQuery || parseQuery$1;
  const stringifyQuery$1$1 = options.stringifyQuery || stringifyQuery$1;
  const routerHistory = options.history;
  if (!routerHistory)
    throw new Error('Provide the "history" option when calling "createRouter()": https://next.router.vuejs.org/api/#history.');
  const beforeGuards = useCallbacks$1();
  const beforeResolveGuards = useCallbacks$1();
  const afterGuards = useCallbacks$1();
  const currentRoute = shallowRef$1(START_LOCATION_NORMALIZED$1);
  let pendingLocation = START_LOCATION_NORMALIZED$1;
  if (isBrowser$1 && options.scrollBehavior && "scrollRestoration" in history) {
    history.scrollRestoration = "manual";
  }
  const normalizeParams = applyToParams$1.bind(null, (paramValue) => "" + paramValue);
  const encodeParams = applyToParams$1.bind(null, encodeParam$1);
  const decodeParams = (
    // @ts-expect-error: intentionally avoid the type check
    applyToParams$1.bind(null, decode$1)
  );
  function addRoute(parentOrRoute, route) {
    let parent;
    let record;
    if (isRouteName$1(parentOrRoute)) {
      parent = matcher.getRecordMatcher(parentOrRoute);
      record = route;
    } else {
      record = parentOrRoute;
    }
    return matcher.addRoute(record, parent);
  }
  function removeRoute(name) {
    const recordMatcher = matcher.getRecordMatcher(name);
    if (recordMatcher) {
      matcher.removeRoute(recordMatcher);
    } else {
      warn$2(`Cannot remove non-existent route "${String(name)}"`);
    }
  }
  function getRoutes() {
    return matcher.getRoutes().map((routeMatcher) => routeMatcher.record);
  }
  function hasRoute(name) {
    return !!matcher.getRecordMatcher(name);
  }
  function resolve2(rawLocation, currentLocation) {
    currentLocation = assign$4({}, currentLocation || currentRoute.value);
    if (typeof rawLocation === "string") {
      const locationNormalized = parseURL$1(parseQuery$1$1, rawLocation, currentLocation.path);
      const matchedRoute2 = matcher.resolve({ path: locationNormalized.path }, currentLocation);
      const href2 = routerHistory.createHref(locationNormalized.fullPath);
      {
        if (href2.startsWith("//"))
          warn$2(`Location "${rawLocation}" resolved to "${href2}". A resolved location cannot start with multiple slashes.`);
        else if (!matchedRoute2.matched.length) {
          warn$2(`No match found for location with path "${rawLocation}"`);
        }
      }
      return assign$4(locationNormalized, matchedRoute2, {
        params: decodeParams(matchedRoute2.params),
        hash: decode$1(locationNormalized.hash),
        redirectedFrom: void 0,
        href: href2
      });
    }
    let matcherLocation;
    if ("path" in rawLocation) {
      if ("params" in rawLocation && !("name" in rawLocation) && // @ts-expect-error: the type is never
      Object.keys(rawLocation.params).length) {
        warn$2(`Path "${rawLocation.path}" was passed with params but they will be ignored. Use a named route alongside params instead.`);
      }
      matcherLocation = assign$4({}, rawLocation, {
        path: parseURL$1(parseQuery$1$1, rawLocation.path, currentLocation.path).path
      });
    } else {
      const targetParams = assign$4({}, rawLocation.params);
      for (const key in targetParams) {
        if (targetParams[key] == null) {
          delete targetParams[key];
        }
      }
      matcherLocation = assign$4({}, rawLocation, {
        params: encodeParams(targetParams)
      });
      currentLocation.params = encodeParams(currentLocation.params);
    }
    const matchedRoute = matcher.resolve(matcherLocation, currentLocation);
    const hash2 = rawLocation.hash || "";
    if (hash2 && !hash2.startsWith("#")) {
      warn$2(`A \`hash\` should always start with the character "#". Replace "${hash2}" with "#${hash2}".`);
    }
    matchedRoute.params = normalizeParams(decodeParams(matchedRoute.params));
    const fullPath = stringifyURL$1(stringifyQuery$1$1, assign$4({}, rawLocation, {
      hash: encodeHash$1(hash2),
      path: matchedRoute.path
    }));
    const href = routerHistory.createHref(fullPath);
    {
      if (href.startsWith("//")) {
        warn$2(`Location "${rawLocation}" resolved to "${href}". A resolved location cannot start with multiple slashes.`);
      } else if (!matchedRoute.matched.length) {
        warn$2(`No match found for location with path "${"path" in rawLocation ? rawLocation.path : rawLocation}"`);
      }
    }
    return assign$4({
      fullPath,
      // keep the hash encoded so fullPath is effectively path + encodedQuery +
      // hash
      hash: hash2,
      query: (
        // if the user is using a custom query lib like qs, we might have
        // nested objects, so we keep the query as is, meaning it can contain
        // numbers at `$route.query`, but at the point, the user will have to
        // use their own type anyway.
        // https://github.com/vuejs/router/issues/328#issuecomment-649481567
        stringifyQuery$1$1 === stringifyQuery$1 ? normalizeQuery$1(rawLocation.query) : rawLocation.query || {}
      )
    }, matchedRoute, {
      redirectedFrom: void 0,
      href
    });
  }
  function locationAsObject(to2) {
    return typeof to2 === "string" ? parseURL$1(parseQuery$1$1, to2, currentRoute.value.path) : assign$4({}, to2);
  }
  function checkCanceledNavigation(to2, from) {
    if (pendingLocation !== to2) {
      return createRouterError$1(8, {
        from,
        to: to2
      });
    }
  }
  function push(to2) {
    return pushWithRedirect(to2);
  }
  function replace(to2) {
    return push(assign$4(locationAsObject(to2), { replace: true }));
  }
  function handleRedirectRecord(to2) {
    const lastMatched = to2.matched[to2.matched.length - 1];
    if (lastMatched && lastMatched.redirect) {
      const { redirect } = lastMatched;
      let newTargetLocation = typeof redirect === "function" ? redirect(to2) : redirect;
      if (typeof newTargetLocation === "string") {
        newTargetLocation = newTargetLocation.includes("?") || newTargetLocation.includes("#") ? newTargetLocation = locationAsObject(newTargetLocation) : (
          // force empty params
          { path: newTargetLocation }
        );
        newTargetLocation.params = {};
      }
      if (!("path" in newTargetLocation) && !("name" in newTargetLocation)) {
        warn$2(`Invalid redirect found:
${JSON.stringify(newTargetLocation, null, 2)}
 when navigating to "${to2.fullPath}". A redirect must contain a name or path. This will break in production.`);
        throw new Error("Invalid redirect");
      }
      return assign$4({
        query: to2.query,
        hash: to2.hash,
        // avoid transferring params if the redirect has a path
        params: "path" in newTargetLocation ? {} : to2.params
      }, newTargetLocation);
    }
  }
  function pushWithRedirect(to2, redirectedFrom) {
    const targetLocation = pendingLocation = resolve2(to2);
    const from = currentRoute.value;
    const data = to2.state;
    const force = to2.force;
    const replace2 = to2.replace === true;
    const shouldRedirect = handleRedirectRecord(targetLocation);
    if (shouldRedirect)
      return pushWithRedirect(
        assign$4(locationAsObject(shouldRedirect), {
          state: typeof shouldRedirect === "object" ? assign$4({}, data, shouldRedirect.state) : data,
          force,
          replace: replace2
        }),
        // keep original redirectedFrom if it exists
        redirectedFrom || targetLocation
      );
    const toLocation = targetLocation;
    toLocation.redirectedFrom = redirectedFrom;
    let failure;
    if (!force && isSameRouteLocation$1(stringifyQuery$1$1, from, targetLocation)) {
      failure = createRouterError$1(16, { to: toLocation, from });
      handleScroll(
        from,
        from,
        // this is a push, the only way for it to be triggered from a
        // history.listen is with a redirect, which makes it become a push
        true,
        // This cannot be the first navigation because the initial location
        // cannot be manually navigated to
        false
      );
    }
    return (failure ? Promise.resolve(failure) : navigate(toLocation, from)).catch((error) => isNavigationFailure$1(error) ? (
      // navigation redirects still mark the router as ready
      isNavigationFailure$1(
        error,
        2
        /* ErrorTypes.NAVIGATION_GUARD_REDIRECT */
      ) ? error : markAsReady(error)
    ) : (
      // reject any unknown error
      triggerError(error, toLocation, from)
    )).then((failure2) => {
      if (failure2) {
        if (isNavigationFailure$1(
          failure2,
          2
          /* ErrorTypes.NAVIGATION_GUARD_REDIRECT */
        )) {
          if (
            // we are redirecting to the same location we were already at
            isSameRouteLocation$1(stringifyQuery$1$1, resolve2(failure2.to), toLocation) && // and we have done it a couple of times
            redirectedFrom && // @ts-expect-error: added only in dev
            (redirectedFrom._count = redirectedFrom._count ? (
              // @ts-expect-error
              redirectedFrom._count + 1
            ) : 1) > 30
          ) {
            warn$2(`Detected a possibly infinite redirection in a navigation guard when going from "${from.fullPath}" to "${toLocation.fullPath}". Aborting to avoid a Stack Overflow.
 Are you always returning a new location within a navigation guard? That would lead to this error. Only return when redirecting or aborting, that should fix this. This might break in production if not fixed.`);
            return Promise.reject(new Error("Infinite redirect in navigation guard"));
          }
          return pushWithRedirect(
            // keep options
            assign$4({
              // preserve an existing replacement but allow the redirect to override it
              replace: replace2
            }, locationAsObject(failure2.to), {
              state: typeof failure2.to === "object" ? assign$4({}, data, failure2.to.state) : data,
              force
            }),
            // preserve the original redirectedFrom if any
            redirectedFrom || toLocation
          );
        }
      } else {
        failure2 = finalizeNavigation(toLocation, from, true, replace2, data);
      }
      triggerAfterEach(toLocation, from, failure2);
      return failure2;
    });
  }
  function checkCanceledNavigationAndReject(to2, from) {
    const error = checkCanceledNavigation(to2, from);
    return error ? Promise.reject(error) : Promise.resolve();
  }
  function runWithContext(fn2) {
    const app = installedApps.values().next().value;
    return app && typeof app.runWithContext === "function" ? app.runWithContext(fn2) : fn2();
  }
  function navigate(to2, from) {
    let guards;
    const [leavingRecords, updatingRecords, enteringRecords] = extractChangingRecords$1(to2, from);
    guards = extractComponentsGuards$1(leavingRecords.reverse(), "beforeRouteLeave", to2, from);
    for (const record of leavingRecords) {
      record.leaveGuards.forEach((guard) => {
        guards.push(guardToPromiseFn$1(guard, to2, from));
      });
    }
    const canceledNavigationCheck = checkCanceledNavigationAndReject.bind(null, to2, from);
    guards.push(canceledNavigationCheck);
    return runGuardQueue(guards).then(() => {
      guards = [];
      for (const guard of beforeGuards.list()) {
        guards.push(guardToPromiseFn$1(guard, to2, from));
      }
      guards.push(canceledNavigationCheck);
      return runGuardQueue(guards);
    }).then(() => {
      guards = extractComponentsGuards$1(updatingRecords, "beforeRouteUpdate", to2, from);
      for (const record of updatingRecords) {
        record.updateGuards.forEach((guard) => {
          guards.push(guardToPromiseFn$1(guard, to2, from));
        });
      }
      guards.push(canceledNavigationCheck);
      return runGuardQueue(guards);
    }).then(() => {
      guards = [];
      for (const record of enteringRecords) {
        if (record.beforeEnter) {
          if (isArray$2(record.beforeEnter)) {
            for (const beforeEnter of record.beforeEnter)
              guards.push(guardToPromiseFn$1(beforeEnter, to2, from));
          } else {
            guards.push(guardToPromiseFn$1(record.beforeEnter, to2, from));
          }
        }
      }
      guards.push(canceledNavigationCheck);
      return runGuardQueue(guards);
    }).then(() => {
      to2.matched.forEach((record) => record.enterCallbacks = {});
      guards = extractComponentsGuards$1(enteringRecords, "beforeRouteEnter", to2, from);
      guards.push(canceledNavigationCheck);
      return runGuardQueue(guards);
    }).then(() => {
      guards = [];
      for (const guard of beforeResolveGuards.list()) {
        guards.push(guardToPromiseFn$1(guard, to2, from));
      }
      guards.push(canceledNavigationCheck);
      return runGuardQueue(guards);
    }).catch((err) => isNavigationFailure$1(
      err,
      8
      /* ErrorTypes.NAVIGATION_CANCELLED */
    ) ? err : Promise.reject(err));
  }
  function triggerAfterEach(to2, from, failure) {
    afterGuards.list().forEach((guard) => runWithContext(() => guard(to2, from, failure)));
  }
  function finalizeNavigation(toLocation, from, isPush, replace2, data) {
    const error = checkCanceledNavigation(toLocation, from);
    if (error)
      return error;
    const isFirstNavigation = from === START_LOCATION_NORMALIZED$1;
    const state = !isBrowser$1 ? {} : history.state;
    if (isPush) {
      if (replace2 || isFirstNavigation)
        routerHistory.replace(toLocation.fullPath, assign$4({
          scroll: isFirstNavigation && state && state.scroll
        }, data));
      else
        routerHistory.push(toLocation.fullPath, data);
    }
    currentRoute.value = toLocation;
    handleScroll(toLocation, from, isPush, isFirstNavigation);
    markAsReady();
  }
  let removeHistoryListener;
  function setupListeners() {
    if (removeHistoryListener)
      return;
    removeHistoryListener = routerHistory.listen((to2, _from, info) => {
      if (!router2.listening)
        return;
      const toLocation = resolve2(to2);
      const shouldRedirect = handleRedirectRecord(toLocation);
      if (shouldRedirect) {
        pushWithRedirect(assign$4(shouldRedirect, { replace: true }), toLocation).catch(noop$2);
        return;
      }
      pendingLocation = toLocation;
      const from = currentRoute.value;
      if (isBrowser$1) {
        saveScrollPosition$1(getScrollKey$1(from.fullPath, info.delta), computeScrollPosition$1());
      }
      navigate(toLocation, from).catch((error) => {
        if (isNavigationFailure$1(
          error,
          4 | 8
          /* ErrorTypes.NAVIGATION_CANCELLED */
        )) {
          return error;
        }
        if (isNavigationFailure$1(
          error,
          2
          /* ErrorTypes.NAVIGATION_GUARD_REDIRECT */
        )) {
          pushWithRedirect(
            error.to,
            toLocation
            // avoid an uncaught rejection, let push call triggerError
          ).then((failure) => {
            if (isNavigationFailure$1(
              failure,
              4 | 16
              /* ErrorTypes.NAVIGATION_DUPLICATED */
            ) && !info.delta && info.type === NavigationType$1.pop) {
              routerHistory.go(-1, false);
            }
          }).catch(noop$2);
          return Promise.reject();
        }
        if (info.delta) {
          routerHistory.go(-info.delta, false);
        }
        return triggerError(error, toLocation, from);
      }).then((failure) => {
        failure = failure || finalizeNavigation(
          // after navigation, all matched components are resolved
          toLocation,
          from,
          false
        );
        if (failure) {
          if (info.delta && // a new navigation has been triggered, so we do not want to revert, that will change the current history
          // entry while a different route is displayed
          !isNavigationFailure$1(
            failure,
            8
            /* ErrorTypes.NAVIGATION_CANCELLED */
          )) {
            routerHistory.go(-info.delta, false);
          } else if (info.type === NavigationType$1.pop && isNavigationFailure$1(
            failure,
            4 | 16
            /* ErrorTypes.NAVIGATION_DUPLICATED */
          )) {
            routerHistory.go(-1, false);
          }
        }
        triggerAfterEach(toLocation, from, failure);
      }).catch(noop$2);
    });
  }
  let readyHandlers = useCallbacks$1();
  let errorListeners = useCallbacks$1();
  let ready;
  function triggerError(error, to2, from) {
    markAsReady(error);
    const list = errorListeners.list();
    if (list.length) {
      list.forEach((handler) => handler(error, to2, from));
    } else {
      {
        warn$2("uncaught error during route navigation:");
      }
      console.error(error);
    }
    return Promise.reject(error);
  }
  function isReady() {
    if (ready && currentRoute.value !== START_LOCATION_NORMALIZED$1)
      return Promise.resolve();
    return new Promise((resolve22, reject) => {
      readyHandlers.add([resolve22, reject]);
    });
  }
  function markAsReady(err) {
    if (!ready) {
      ready = !err;
      setupListeners();
      readyHandlers.list().forEach(([resolve22, reject]) => err ? reject(err) : resolve22());
      readyHandlers.reset();
    }
    return err;
  }
  function handleScroll(to2, from, isPush, isFirstNavigation) {
    const { scrollBehavior } = options;
    if (!isBrowser$1 || !scrollBehavior)
      return Promise.resolve();
    const scrollPosition = !isPush && getSavedScrollPosition$1(getScrollKey$1(to2.fullPath, 0)) || (isFirstNavigation || !isPush) && history.state && history.state.scroll || null;
    return nextTick$1().then(() => scrollBehavior(to2, from, scrollPosition)).then((position) => position && scrollToPosition$1(position)).catch((err) => triggerError(err, to2, from));
  }
  const go2 = (delta) => routerHistory.go(delta);
  let started;
  const installedApps = /* @__PURE__ */ new Set();
  const router2 = {
    currentRoute,
    listening: true,
    addRoute,
    removeRoute,
    hasRoute,
    getRoutes,
    resolve: resolve2,
    options,
    push,
    replace,
    go: go2,
    back: () => go2(-1),
    forward: () => go2(1),
    beforeEach: beforeGuards.add,
    beforeResolve: beforeResolveGuards.add,
    afterEach: afterGuards.add,
    onError: errorListeners.add,
    isReady,
    install(app) {
      const router22 = this;
      app.component("RouterLink", RouterLink$1);
      app.component("RouterView", RouterView$1);
      app.config.globalProperties.$router = router22;
      Object.defineProperty(app.config.globalProperties, "$route", {
        enumerable: true,
        get: () => unref$1(currentRoute)
      });
      if (isBrowser$1 && // used for the initial navigation client side to avoid pushing
      // multiple times when the router is used in multiple apps
      !started && currentRoute.value === START_LOCATION_NORMALIZED$1) {
        started = true;
        push(routerHistory.location).catch((err) => {
          warn$2("Unexpected error when starting the router:", err);
        });
      }
      const reactiveRoute = {};
      for (const key in START_LOCATION_NORMALIZED$1) {
        Object.defineProperty(reactiveRoute, key, {
          get: () => currentRoute.value[key],
          enumerable: true
        });
      }
      app.provide(routerKey$1, router22);
      app.provide(routeLocationKey$1, shallowReactive$1(reactiveRoute));
      app.provide(routerViewLocationKey$1, currentRoute);
      const unmountApp = app.unmount;
      installedApps.add(app);
      app.unmount = function() {
        installedApps.delete(app);
        if (installedApps.size < 1) {
          pendingLocation = START_LOCATION_NORMALIZED$1;
          removeHistoryListener && removeHistoryListener();
          removeHistoryListener = null;
          currentRoute.value = START_LOCATION_NORMALIZED$1;
          started = false;
          ready = false;
        }
        unmountApp();
      };
      if (isBrowser$1) {
        addDevtools$1(app, router22, matcher);
      }
    }
  };
  function runGuardQueue(guards) {
    return guards.reduce((promise, guard) => promise.then(() => runWithContext(guard)), Promise.resolve());
  }
  return router2;
}
function extractChangingRecords$1(to2, from) {
  const leavingRecords = [];
  const updatingRecords = [];
  const enteringRecords = [];
  const len = Math.max(from.matched.length, to2.matched.length);
  for (let i3 = 0; i3 < len; i3++) {
    const recordFrom = from.matched[i3];
    if (recordFrom) {
      if (to2.matched.find((record) => isSameRouteRecord$1(record, recordFrom)))
        updatingRecords.push(recordFrom);
      else
        leavingRecords.push(recordFrom);
    }
    const recordTo = to2.matched[i3];
    if (recordTo) {
      if (!from.matched.find((record) => isSameRouteRecord$1(record, recordTo))) {
        enteringRecords.push(recordTo);
      }
    }
  }
  return [leavingRecords, updatingRecords, enteringRecords];
}
function useRouter$1() {
  return inject$1(routerKey$1);
}
function useRoute$1() {
  return inject$1(routeLocationKey$1);
}
function t$7(t3) {
  return "object" == typeof t3 && null != t3 && 1 === t3.nodeType;
}
function e$3(t3, e3) {
  return (!e3 || "hidden" !== t3) && "visible" !== t3 && "clip" !== t3;
}
function n$7(t3, n2) {
  if (t3.clientHeight < t3.scrollHeight || t3.clientWidth < t3.scrollWidth) {
    var r2 = getComputedStyle(t3, null);
    return e$3(r2.overflowY, n2) || e$3(r2.overflowX, n2) || function(t4) {
      var e3 = function(t5) {
        if (!t5.ownerDocument || !t5.ownerDocument.defaultView)
          return null;
        try {
          return t5.ownerDocument.defaultView.frameElement;
        } catch (t6) {
          return null;
        }
      }(t4);
      return !!e3 && (e3.clientHeight < t4.scrollHeight || e3.clientWidth < t4.scrollWidth);
    }(t3);
  }
  return false;
}
function r$4(t3, e3, n2, r2, i3, o2, l2, d4) {
  return o2 < t3 && l2 > e3 || o2 > t3 && l2 < e3 ? 0 : o2 <= t3 && d4 <= n2 || l2 >= e3 && d4 >= n2 ? o2 - t3 - r2 : l2 > e3 && d4 < n2 || o2 < t3 && d4 > n2 ? l2 - e3 + i3 : 0;
}
var i$8 = function(e3, i3) {
  var o2 = window, l2 = i3.scrollMode, d4 = i3.block, f2 = i3.inline, h4 = i3.boundary, u3 = i3.skipOverflowHiddenElements, s5 = "function" == typeof h4 ? h4 : function(t3) {
    return t3 !== h4;
  };
  if (!t$7(e3))
    throw new TypeError("Invalid target");
  for (var a4, c3, g2 = document.scrollingElement || document.documentElement, p2 = [], m4 = e3; t$7(m4) && s5(m4); ) {
    if ((m4 = null == (c3 = (a4 = m4).parentElement) ? a4.getRootNode().host || null : c3) === g2) {
      p2.push(m4);
      break;
    }
    null != m4 && m4 === document.body && n$7(m4) && !n$7(document.documentElement) || null != m4 && n$7(m4, u3) && p2.push(m4);
  }
  for (var w3 = o2.visualViewport ? o2.visualViewport.width : innerWidth, v2 = o2.visualViewport ? o2.visualViewport.height : innerHeight, W2 = window.scrollX || pageXOffset, H5 = window.scrollY || pageYOffset, b4 = e3.getBoundingClientRect(), y4 = b4.height, E3 = b4.width, M4 = b4.top, V3 = b4.right, x3 = b4.bottom, I3 = b4.left, C2 = "start" === d4 || "nearest" === d4 ? M4 : "end" === d4 ? x3 : M4 + y4 / 2, R4 = "center" === f2 ? I3 + E3 / 2 : "end" === f2 ? V3 : I3, T4 = [], k3 = 0; k3 < p2.length; k3++) {
    var B3 = p2[k3], D3 = B3.getBoundingClientRect(), O4 = D3.height, X4 = D3.width, Y3 = D3.top, L3 = D3.right, S4 = D3.bottom, j2 = D3.left;
    if ("if-needed" === l2 && M4 >= 0 && I3 >= 0 && x3 <= v2 && V3 <= w3 && M4 >= Y3 && x3 <= S4 && I3 >= j2 && V3 <= L3)
      return T4;
    var N3 = getComputedStyle(B3), q3 = parseInt(N3.borderLeftWidth, 10), z4 = parseInt(N3.borderTopWidth, 10), A2 = parseInt(N3.borderRightWidth, 10), F2 = parseInt(N3.borderBottomWidth, 10), G3 = 0, J3 = 0, K3 = "offsetWidth" in B3 ? B3.offsetWidth - B3.clientWidth - q3 - A2 : 0, P2 = "offsetHeight" in B3 ? B3.offsetHeight - B3.clientHeight - z4 - F2 : 0, Q3 = "offsetWidth" in B3 ? 0 === B3.offsetWidth ? 0 : X4 / B3.offsetWidth : 0, U2 = "offsetHeight" in B3 ? 0 === B3.offsetHeight ? 0 : O4 / B3.offsetHeight : 0;
    if (g2 === B3)
      G3 = "start" === d4 ? C2 : "end" === d4 ? C2 - v2 : "nearest" === d4 ? r$4(H5, H5 + v2, v2, z4, F2, H5 + C2, H5 + C2 + y4, y4) : C2 - v2 / 2, J3 = "start" === f2 ? R4 : "center" === f2 ? R4 - w3 / 2 : "end" === f2 ? R4 - w3 : r$4(W2, W2 + w3, w3, q3, A2, W2 + R4, W2 + R4 + E3, E3), G3 = Math.max(0, G3 + H5), J3 = Math.max(0, J3 + W2);
    else {
      G3 = "start" === d4 ? C2 - Y3 - z4 : "end" === d4 ? C2 - S4 + F2 + P2 : "nearest" === d4 ? r$4(Y3, S4, O4, z4, F2 + P2, C2, C2 + y4, y4) : C2 - (Y3 + O4 / 2) + P2 / 2, J3 = "start" === f2 ? R4 - j2 - q3 : "center" === f2 ? R4 - (j2 + X4 / 2) + K3 / 2 : "end" === f2 ? R4 - L3 + A2 + K3 : r$4(j2, L3, X4, q3, A2 + K3, R4, R4 + E3, E3);
      var Z3 = B3.scrollLeft, $3 = B3.scrollTop;
      C2 += $3 - (G3 = Math.max(0, Math.min($3 + G3 / U2, B3.scrollHeight - O4 / U2 + P2))), R4 += Z3 - (J3 = Math.max(0, Math.min(Z3 + J3 / Q3, B3.scrollWidth - X4 / Q3 + K3)));
    }
    T4.push({ el: B3, top: G3, left: J3 });
  }
  return T4;
};
function isOptionsObject(options) {
  return options === Object(options) && Object.keys(options).length !== 0;
}
function defaultBehavior(actions, behavior) {
  if (behavior === void 0) {
    behavior = "auto";
  }
  var canSmoothScroll = "scrollBehavior" in document.body.style;
  actions.forEach(function(_ref) {
    var el3 = _ref.el, top = _ref.top, left = _ref.left;
    if (el3.scroll && canSmoothScroll) {
      el3.scroll({
        top,
        left,
        behavior
      });
    } else {
      el3.scrollTop = top;
      el3.scrollLeft = left;
    }
  });
}
function getOptions(options) {
  if (options === false) {
    return {
      block: "end",
      inline: "nearest"
    };
  }
  if (isOptionsObject(options)) {
    return options;
  }
  return {
    block: "start",
    inline: "nearest"
  };
}
function scrollIntoView(target, options) {
  var isTargetAttached = target.isConnected || target.ownerDocument.documentElement.contains(target);
  if (isOptionsObject(options) && typeof options.behavior === "function") {
    return options.behavior(isTargetAttached ? i$8(target, options) : []);
  }
  if (!isTargetAttached) {
    return;
  }
  var computeOptions = getOptions(options);
  return defaultBehavior(i$8(target, computeOptions), computeOptions.behavior);
}
const voidElements = [
  "area",
  "base",
  "br",
  "col",
  "embed",
  "hr",
  "img",
  "input",
  "keygen",
  "link",
  "meta",
  "param",
  "source",
  "track",
  "wbr"
];
const KEY_ESCAPE_REG = /[\s-.:|#@$£*%]/;
const MAX_SINGLE_LINE_ARRAY_LENGTH = 3;
function serializeJs(value) {
  const seen2 = /* @__PURE__ */ new Set();
  if (value === void 0) {
    return "undefined";
  }
  if (value === null) {
    return "null";
  }
  if (typeof value === "string") {
    return `'${value}'`;
  }
  if (typeof value === "boolean") {
    return value ? "true" : "false";
  }
  if (Array.isArray(value)) {
    return printLines(arrayToSourceLines(value, seen2));
  }
  if (typeof value === "object") {
    return printLines(objectToSourceLines(value, seen2));
  }
  if (value == null ? void 0 : value.__autoBuildingObject) {
    return value;
  }
  if (typeof value === "function" && value.name) {
    return value.name;
  }
  return value.toString();
}
function printLines(lines) {
  return lines.map((line) => "  ".repeat(line.spaces) + line.line).join("\n");
}
function objectToSourceLines(object, seen2, indentCount = 0) {
  if (seen2.has(object)) {
    object = {};
  } else {
    seen2.add(object);
  }
  return createLines(indentCount, (lines) => {
    lines.push("{");
    lines.push(...createLines(1, (lines2) => {
      for (const key in object) {
        const value = object[key];
        let printedKey = key;
        if (KEY_ESCAPE_REG.test(key)) {
          printedKey = `'${printedKey}'`;
        }
        addLinesFromValue(lines2, value, `${printedKey}: `, ",", seen2);
      }
    }));
    lines.push("}");
  });
}
function arrayToSourceLines(array, seen2, indentCount = 0) {
  if (seen2.has(array)) {
    array = [];
  } else {
    seen2.add(array);
  }
  return createLines(indentCount, (lines) => {
    const contentLines = createLines(1, (lines2) => {
      for (const value of array) {
        addLinesFromValue(lines2, value, "", ",", seen2);
      }
    });
    if (contentLines.length === 0) {
      lines.push("[]");
    } else if (contentLines.length <= MAX_SINGLE_LINE_ARRAY_LENGTH && !contentLines.some((line) => line.spaces > 1)) {
      const [first] = contentLines;
      first.line = contentLines.map(({ line }) => line.substring(0, line.length - 1)).join(", ");
      first.line = `[${first.line}]`;
      first.spaces--;
      lines.push(first);
    } else {
      lines.push("[", ...contentLines, "]");
    }
  });
}
function createLines(indentCount, handler) {
  const lines = [];
  handler(lines);
  return lines.map((line) => {
    if (line.spaces != null) {
      line.spaces += indentCount;
      return line;
    }
    return { spaces: indentCount, line };
  });
}
function addLinesFromValue(lines, value, before, after, seen2) {
  let result;
  if (Array.isArray(value)) {
    lines.push(...wrap(arrayToSourceLines(value, seen2), before, after));
    return;
  } else if (value && typeof value === "object") {
    lines.push(...wrap(objectToSourceLines(value, seen2), before, after));
    return;
  } else if (typeof value === "string") {
    result = value.includes("'") ? `\`${value}\`` : `'${value}'`;
  } else if (typeof value === "undefined") {
    result = "undefined";
  } else if (value === null) {
    result = "null";
  } else if (typeof value === "boolean") {
    result = value ? "true" : "false";
  } else {
    result = value;
  }
  lines.push(before + result + after);
}
function wrap(lines, before, after) {
  lines[0].line = before + lines[0].line;
  lines[lines.length - 1].line += after;
  return lines;
}
function indent(lines, count2 = 1) {
  return lines.map((line) => `${"  ".repeat(count2)}${line}`);
}
function unindent(code2) {
  const lines = code2.split("\n");
  let indentLevel = -1;
  let indentText;
  const linesToAnalyze = lines.filter((line) => line.trim().length > 0);
  for (const line of linesToAnalyze) {
    const match2 = /^\s*/.exec(line);
    if (match2 && (indentLevel === -1 || indentLevel > match2[0].length)) {
      indentLevel = match2[0].length;
      indentText = match2[0];
    }
  }
  const result = [];
  for (const line of lines) {
    result.push(line.replace(indentText, ""));
  }
  return result.join("\n").trim();
}
function createAutoBuildingObject(format2, specialKeysHandler, key = "", depth = 0) {
  const cache2 = {};
  if (depth > 32)
    return { key, cache: cache2, target: {}, proxy: () => key };
  const target = () => {
    const k3 = key + "()";
    return format2 ? format2(k3) : k3;
  };
  const proxy = new Proxy(target, {
    get(_2, p2) {
      if (p2 === "__autoBuildingObject") {
        return true;
      }
      if (p2 === "__autoBuildingObjectGetKey") {
        return key;
      }
      if (specialKeysHandler) {
        const fn2 = specialKeysHandler(target, p2);
        if (fn2) {
          return fn2();
        }
      }
      if (p2 === "toString") {
        const k3 = key + ".toString()";
        return () => format2 ? format2(k3) : k3;
      }
      if (p2 === Symbol.toPrimitive) {
        return () => format2 ? format2(key) : key;
      }
      if (!cache2[p2]) {
        const childKey = key ? `${key}.${p2.toString()}` : p2.toString();
        const child = createAutoBuildingObject(format2, specialKeysHandler, childKey, depth + 1);
        cache2[p2] = { key: childKey, ...child };
      }
      return cache2[p2].proxy;
    },
    apply(_2, thisArg, args) {
      const k3 = `${key}(${args.join(", ")})`;
      return format2 ? format2(k3) : k3;
    }
  });
  return {
    key,
    cache: cache2,
    target,
    proxy
  };
}
function clone(data) {
  try {
    return structuredClone(data);
  } catch (e3) {
    console.warn(e3, `Fallback to JSON cloning`);
    try {
      return JSON.parse(JSON.stringify(data));
    } catch (e4) {
      console.error(e4);
    }
    return data;
  }
}
function omit$1(data, keys) {
  const copy = {};
  for (const key in data) {
    if (!keys.includes(key)) {
      copy[key] = data[key];
    }
  }
  return copy;
}
function applyState(target, state, override = false) {
  for (const key in state) {
    if (!override && target[key] && !key.startsWith("_h") && typeof target[key] === "object" && !Array.isArray(target[key])) {
      Object.assign(target[key], state[key]);
    } else {
      target[key] = state[key];
    }
  }
}
const omitInheritStoryProps = [
  "id",
  "title",
  "group",
  "layout",
  "variants",
  "file",
  "slots",
  "lastSelectedVariant"
];
function r$3(e3) {
  var t3, f2, n2 = "";
  if ("string" == typeof e3 || "number" == typeof e3)
    n2 += e3;
  else if ("object" == typeof e3)
    if (Array.isArray(e3))
      for (t3 = 0; t3 < e3.length; t3++)
        e3[t3] && (f2 = r$3(e3[t3])) && (n2 && (n2 += " "), n2 += f2);
    else
      for (t3 in e3)
        e3[t3] && (n2 && (n2 += " "), n2 += t3);
  return n2;
}
function clsx() {
  for (var e3, t3, f2 = 0, n2 = ""; f2 < arguments.length; )
    (e3 = arguments[f2++]) && (t3 = r$3(e3)) && (n2 && (n2 += " "), n2 += t3);
  return n2;
}
const falsyToString = (value) => typeof value === "boolean" ? "".concat(value) : value === 0 ? "0" : value;
const defineConfig = (options) => {
  const cx1 = function() {
    for (var _len = arguments.length, inputs = new Array(_len), _key = 0; _key < _len; _key++) {
      inputs[_key] = arguments[_key];
    }
    var ref2, ref1;
    if (typeof (options === null || options === void 0 ? void 0 : (ref2 = options.hooks) === null || ref2 === void 0 ? void 0 : ref2["cx:done"]) !== "undefined")
      return options === null || options === void 0 ? void 0 : options.hooks["cx:done"](clsx(inputs));
    if (typeof (options === null || options === void 0 ? void 0 : (ref1 = options.hooks) === null || ref1 === void 0 ? void 0 : ref1.onComplete) !== "undefined")
      return options === null || options === void 0 ? void 0 : options.hooks.onComplete(clsx(inputs));
    return clsx(inputs);
  };
  const cva1 = (config2) => {
    return (props) => {
      var ref2;
      if ((config2 === null || config2 === void 0 ? void 0 : config2.variants) == null)
        return cx1(config2 === null || config2 === void 0 ? void 0 : config2.base, props === null || props === void 0 ? void 0 : props.class, props === null || props === void 0 ? void 0 : props.className);
      const { variants, defaultVariants } = config2;
      const getVariantClassNames = Object.keys(variants).map((variant) => {
        const variantProp = props === null || props === void 0 ? void 0 : props[variant];
        const defaultVariantProp = defaultVariants === null || defaultVariants === void 0 ? void 0 : defaultVariants[variant];
        const variantKey = falsyToString(variantProp) || falsyToString(defaultVariantProp);
        return variants[variant][variantKey];
      });
      const defaultsAndProps = { ...defaultVariants, ...props && Object.entries(props).reduce((acc, param) => {
        let [key, value] = param;
        return typeof value === "undefined" ? acc : { ...acc, [key]: value };
      }, {}) };
      const getCompoundVariantClassNames = config2 === null || config2 === void 0 ? void 0 : (ref2 = config2.compoundVariants) === null || ref2 === void 0 ? void 0 : ref2.reduce((acc, param1) => {
        let { class: cvClass, className: cvClassName, ...cvConfig } = param1;
        return Object.entries(cvConfig).every((param) => {
          let [cvKey, cvSelector] = param;
          const selector = defaultsAndProps[cvKey];
          return Array.isArray(cvSelector) ? cvSelector.includes(selector) : selector === cvSelector;
        }) ? [...acc, cvClass, cvClassName] : acc;
      }, []);
      return cx1(config2 === null || config2 === void 0 ? void 0 : config2.base, getVariantClassNames, getCompoundVariantClassNames, props === null || props === void 0 ? void 0 : props.class, props === null || props === void 0 ? void 0 : props.className);
    };
  };
  const compose1 = function() {
    for (var _len = arguments.length, components = new Array(_len), _key = 0; _key < _len; _key++) {
      components[_key] = arguments[_key];
    }
    return (props) => {
      const propsWithoutClass = Object.fromEntries(Object.entries(props || {}).filter((param) => {
        let [key] = param;
        return !["class", "className"].includes(key);
      }));
      return cx1(components.map((component) => component(propsWithoutClass)), props === null || props === void 0 ? void 0 : props.class, props === null || props === void 0 ? void 0 : props.className);
    };
  };
  return { compose: compose1, cva: cva1, cx: cx1 };
};
const CLASS_PART_SEPARATOR = "-";
function createClassUtils(config2) {
  const classMap = createClassMap(config2);
  const {
    conflictingClassGroups,
    conflictingClassGroupModifiers
  } = config2;
  function getClassGroupId(className) {
    const classParts = className.split(CLASS_PART_SEPARATOR);
    if (classParts[0] === "" && classParts.length !== 1) {
      classParts.shift();
    }
    return getGroupRecursive(classParts, classMap) || getGroupIdForArbitraryProperty(className);
  }
  function getConflictingClassGroupIds(classGroupId, hasPostfixModifier) {
    const conflicts = conflictingClassGroups[classGroupId] || [];
    if (hasPostfixModifier && conflictingClassGroupModifiers[classGroupId]) {
      return [...conflicts, ...conflictingClassGroupModifiers[classGroupId]];
    }
    return conflicts;
  }
  return {
    getClassGroupId,
    getConflictingClassGroupIds
  };
}
function getGroupRecursive(classParts, classPartObject) {
  var _a2;
  if (classParts.length === 0) {
    return classPartObject.classGroupId;
  }
  const currentClassPart = classParts[0];
  const nextClassPartObject = classPartObject.nextPart.get(currentClassPart);
  const classGroupFromNextClassPart = nextClassPartObject ? getGroupRecursive(classParts.slice(1), nextClassPartObject) : void 0;
  if (classGroupFromNextClassPart) {
    return classGroupFromNextClassPart;
  }
  if (classPartObject.validators.length === 0) {
    return void 0;
  }
  const classRest = classParts.join(CLASS_PART_SEPARATOR);
  return (_a2 = classPartObject.validators.find(({
    validator
  }) => validator(classRest))) == null ? void 0 : _a2.classGroupId;
}
const arbitraryPropertyRegex = /^\[(.+)\]$/;
function getGroupIdForArbitraryProperty(className) {
  if (arbitraryPropertyRegex.test(className)) {
    const arbitraryPropertyClassName = arbitraryPropertyRegex.exec(className)[1];
    const property = arbitraryPropertyClassName == null ? void 0 : arbitraryPropertyClassName.substring(0, arbitraryPropertyClassName.indexOf(":"));
    if (property) {
      return "arbitrary.." + property;
    }
  }
}
function createClassMap(config2) {
  const {
    theme,
    prefix
  } = config2;
  const classMap = {
    nextPart: /* @__PURE__ */ new Map(),
    validators: []
  };
  const prefixedClassGroupEntries = getPrefixedClassGroupEntries(Object.entries(config2.classGroups), prefix);
  prefixedClassGroupEntries.forEach(([classGroupId, classGroup]) => {
    processClassesRecursively(classGroup, classMap, classGroupId, theme);
  });
  return classMap;
}
function processClassesRecursively(classGroup, classPartObject, classGroupId, theme) {
  classGroup.forEach((classDefinition) => {
    if (typeof classDefinition === "string") {
      const classPartObjectToEdit = classDefinition === "" ? classPartObject : getPart(classPartObject, classDefinition);
      classPartObjectToEdit.classGroupId = classGroupId;
      return;
    }
    if (typeof classDefinition === "function") {
      if (isThemeGetter(classDefinition)) {
        processClassesRecursively(classDefinition(theme), classPartObject, classGroupId, theme);
        return;
      }
      classPartObject.validators.push({
        validator: classDefinition,
        classGroupId
      });
      return;
    }
    Object.entries(classDefinition).forEach(([key, classGroup2]) => {
      processClassesRecursively(classGroup2, getPart(classPartObject, key), classGroupId, theme);
    });
  });
}
function getPart(classPartObject, path) {
  let currentClassPartObject = classPartObject;
  path.split(CLASS_PART_SEPARATOR).forEach((pathPart) => {
    if (!currentClassPartObject.nextPart.has(pathPart)) {
      currentClassPartObject.nextPart.set(pathPart, {
        nextPart: /* @__PURE__ */ new Map(),
        validators: []
      });
    }
    currentClassPartObject = currentClassPartObject.nextPart.get(pathPart);
  });
  return currentClassPartObject;
}
function isThemeGetter(func) {
  return func.isThemeGetter;
}
function getPrefixedClassGroupEntries(classGroupEntries, prefix) {
  if (!prefix) {
    return classGroupEntries;
  }
  return classGroupEntries.map(([classGroupId, classGroup]) => {
    const prefixedClassGroup = classGroup.map((classDefinition) => {
      if (typeof classDefinition === "string") {
        return prefix + classDefinition;
      }
      if (typeof classDefinition === "object") {
        return Object.fromEntries(Object.entries(classDefinition).map(([key, value]) => [prefix + key, value]));
      }
      return classDefinition;
    });
    return [classGroupId, prefixedClassGroup];
  });
}
function createLruCache(maxCacheSize) {
  if (maxCacheSize < 1) {
    return {
      get: () => void 0,
      set: () => {
      }
    };
  }
  let cacheSize = 0;
  let cache2 = /* @__PURE__ */ new Map();
  let previousCache = /* @__PURE__ */ new Map();
  function update(key, value) {
    cache2.set(key, value);
    cacheSize++;
    if (cacheSize > maxCacheSize) {
      cacheSize = 0;
      previousCache = cache2;
      cache2 = /* @__PURE__ */ new Map();
    }
  }
  return {
    get(key) {
      let value = cache2.get(key);
      if (value !== void 0) {
        return value;
      }
      if ((value = previousCache.get(key)) !== void 0) {
        update(key, value);
        return value;
      }
    },
    set(key, value) {
      if (cache2.has(key)) {
        cache2.set(key, value);
      } else {
        update(key, value);
      }
    }
  };
}
const IMPORTANT_MODIFIER = "!";
function createSplitModifiers(config2) {
  const separator2 = config2.separator;
  const isSeparatorSingleCharacter = separator2.length === 1;
  const firstSeparatorCharacter = separator2[0];
  const separatorLength = separator2.length;
  return function splitModifiers(className) {
    const modifiers = [];
    let bracketDepth = 0;
    let modifierStart = 0;
    let postfixModifierPosition;
    for (let index = 0; index < className.length; index++) {
      let currentCharacter = className[index];
      if (bracketDepth === 0) {
        if (currentCharacter === firstSeparatorCharacter && (isSeparatorSingleCharacter || className.slice(index, index + separatorLength) === separator2)) {
          modifiers.push(className.slice(modifierStart, index));
          modifierStart = index + separatorLength;
          continue;
        }
        if (currentCharacter === "/") {
          postfixModifierPosition = index;
          continue;
        }
      }
      if (currentCharacter === "[") {
        bracketDepth++;
      } else if (currentCharacter === "]") {
        bracketDepth--;
      }
    }
    const baseClassNameWithImportantModifier = modifiers.length === 0 ? className : className.substring(modifierStart);
    const hasImportantModifier = baseClassNameWithImportantModifier.startsWith(IMPORTANT_MODIFIER);
    const baseClassName = hasImportantModifier ? baseClassNameWithImportantModifier.substring(1) : baseClassNameWithImportantModifier;
    const maybePostfixModifierPosition = postfixModifierPosition && postfixModifierPosition > modifierStart ? postfixModifierPosition - modifierStart : void 0;
    return {
      modifiers,
      hasImportantModifier,
      baseClassName,
      maybePostfixModifierPosition
    };
  };
}
function sortModifiers(modifiers) {
  if (modifiers.length <= 1) {
    return modifiers;
  }
  const sortedModifiers = [];
  let unsortedModifiers = [];
  modifiers.forEach((modifier) => {
    const isArbitraryVariant = modifier[0] === "[";
    if (isArbitraryVariant) {
      sortedModifiers.push(...unsortedModifiers.sort(), modifier);
      unsortedModifiers = [];
    } else {
      unsortedModifiers.push(modifier);
    }
  });
  sortedModifiers.push(...unsortedModifiers.sort());
  return sortedModifiers;
}
function createConfigUtils(config2) {
  return {
    cache: createLruCache(config2.cacheSize),
    splitModifiers: createSplitModifiers(config2),
    ...createClassUtils(config2)
  };
}
const SPLIT_CLASSES_REGEX = /\s+/;
function mergeClassList(classList, configUtils) {
  const {
    splitModifiers,
    getClassGroupId,
    getConflictingClassGroupIds
  } = configUtils;
  const classGroupsInConflict = /* @__PURE__ */ new Set();
  return classList.trim().split(SPLIT_CLASSES_REGEX).map((originalClassName) => {
    const {
      modifiers,
      hasImportantModifier,
      baseClassName,
      maybePostfixModifierPosition
    } = splitModifiers(originalClassName);
    let classGroupId = getClassGroupId(maybePostfixModifierPosition ? baseClassName.substring(0, maybePostfixModifierPosition) : baseClassName);
    let hasPostfixModifier = Boolean(maybePostfixModifierPosition);
    if (!classGroupId) {
      if (!maybePostfixModifierPosition) {
        return {
          isTailwindClass: false,
          originalClassName
        };
      }
      classGroupId = getClassGroupId(baseClassName);
      if (!classGroupId) {
        return {
          isTailwindClass: false,
          originalClassName
        };
      }
      hasPostfixModifier = false;
    }
    const variantModifier = sortModifiers(modifiers).join(":");
    const modifierId = hasImportantModifier ? variantModifier + IMPORTANT_MODIFIER : variantModifier;
    return {
      isTailwindClass: true,
      modifierId,
      classGroupId,
      originalClassName,
      hasPostfixModifier
    };
  }).reverse().filter((parsed) => {
    if (!parsed.isTailwindClass) {
      return true;
    }
    const {
      modifierId,
      classGroupId,
      hasPostfixModifier
    } = parsed;
    const classId = modifierId + classGroupId;
    if (classGroupsInConflict.has(classId)) {
      return false;
    }
    classGroupsInConflict.add(classId);
    getConflictingClassGroupIds(classGroupId, hasPostfixModifier).forEach((group) => classGroupsInConflict.add(modifierId + group));
    return true;
  }).reverse().map((parsed) => parsed.originalClassName).join(" ");
}
function twJoin() {
  let index = 0;
  let argument;
  let resolvedValue;
  let string = "";
  while (index < arguments.length) {
    if (argument = arguments[index++]) {
      if (resolvedValue = toValue$1(argument)) {
        string && (string += " ");
        string += resolvedValue;
      }
    }
  }
  return string;
}
function toValue$1(mix) {
  if (typeof mix === "string") {
    return mix;
  }
  let resolvedValue;
  let string = "";
  for (let k3 = 0; k3 < mix.length; k3++) {
    if (mix[k3]) {
      if (resolvedValue = toValue$1(mix[k3])) {
        string && (string += " ");
        string += resolvedValue;
      }
    }
  }
  return string;
}
function createTailwindMerge(createConfigFirst, ...createConfigRest) {
  let configUtils;
  let cacheGet;
  let cacheSet;
  let functionToCall = initTailwindMerge;
  function initTailwindMerge(classList) {
    const config2 = createConfigRest.reduce((previousConfig, createConfigCurrent) => createConfigCurrent(previousConfig), createConfigFirst());
    configUtils = createConfigUtils(config2);
    cacheGet = configUtils.cache.get;
    cacheSet = configUtils.cache.set;
    functionToCall = tailwindMerge;
    return tailwindMerge(classList);
  }
  function tailwindMerge(classList) {
    const cachedResult = cacheGet(classList);
    if (cachedResult) {
      return cachedResult;
    }
    const result = mergeClassList(classList, configUtils);
    cacheSet(classList, result);
    return result;
  }
  return function callTailwindMerge() {
    return functionToCall(twJoin.apply(null, arguments));
  };
}
function fromTheme(key) {
  const themeGetter = (theme) => theme[key] || [];
  themeGetter.isThemeGetter = true;
  return themeGetter;
}
const arbitraryValueRegex = /^\[(?:([a-z-]+):)?(.+)\]$/i;
const fractionRegex = /^\d+\/\d+$/;
const stringLengths = /* @__PURE__ */ new Set(["px", "full", "screen"]);
const tshirtUnitRegex = /^(\d+(\.\d+)?)?(xs|sm|md|lg|xl)$/;
const lengthUnitRegex = /\d+(%|px|r?em|[sdl]?v([hwib]|min|max)|pt|pc|in|cm|mm|cap|ch|ex|r?lh|cq(w|h|i|b|min|max))|\b(calc|min|max|clamp)\(.+\)|^0$/;
const shadowRegex = /^-?((\d+)?\.?(\d+)[a-z]+|0)_-?((\d+)?\.?(\d+)[a-z]+|0)/;
const imageRegex = /^(url|image|image-set|cross-fade|element|(repeating-)?(linear|radial|conic)-gradient)\(.+\)$/;
function isLength(value) {
  return isNumber$1(value) || stringLengths.has(value) || fractionRegex.test(value);
}
function isArbitraryLength(value) {
  return getIsArbitraryValue(value, "length", isLengthOnly);
}
function isNumber$1(value) {
  return Boolean(value) && !Number.isNaN(Number(value));
}
function isArbitraryNumber(value) {
  return getIsArbitraryValue(value, "number", isNumber$1);
}
function isInteger(value) {
  return Boolean(value) && Number.isInteger(Number(value));
}
function isPercent(value) {
  return value.endsWith("%") && isNumber$1(value.slice(0, -1));
}
function isArbitraryValue(value) {
  return arbitraryValueRegex.test(value);
}
function isTshirtSize(value) {
  return tshirtUnitRegex.test(value);
}
const sizeLabels = /* @__PURE__ */ new Set(["length", "size", "percentage"]);
function isArbitrarySize(value) {
  return getIsArbitraryValue(value, sizeLabels, isNever);
}
function isArbitraryPosition(value) {
  return getIsArbitraryValue(value, "position", isNever);
}
const imageLabels = /* @__PURE__ */ new Set(["image", "url"]);
function isArbitraryImage(value) {
  return getIsArbitraryValue(value, imageLabels, isImage);
}
function isArbitraryShadow(value) {
  return getIsArbitraryValue(value, "", isShadow);
}
function isAny() {
  return true;
}
function getIsArbitraryValue(value, label, testValue) {
  const result = arbitraryValueRegex.exec(value);
  if (result) {
    if (result[1]) {
      return typeof label === "string" ? result[1] === label : label.has(result[1]);
    }
    return testValue(result[2]);
  }
  return false;
}
function isLengthOnly(value) {
  return lengthUnitRegex.test(value);
}
function isNever() {
  return false;
}
function isShadow(value) {
  return shadowRegex.test(value);
}
function isImage(value) {
  return imageRegex.test(value);
}
function getDefaultConfig() {
  const colors = fromTheme("colors");
  const spacing = fromTheme("spacing");
  const blur = fromTheme("blur");
  const brightness = fromTheme("brightness");
  const borderColor = fromTheme("borderColor");
  const borderRadius = fromTheme("borderRadius");
  const borderSpacing = fromTheme("borderSpacing");
  const borderWidth = fromTheme("borderWidth");
  const contrast = fromTheme("contrast");
  const grayscale = fromTheme("grayscale");
  const hueRotate = fromTheme("hueRotate");
  const invert = fromTheme("invert");
  const gap = fromTheme("gap");
  const gradientColorStops = fromTheme("gradientColorStops");
  const gradientColorStopPositions = fromTheme("gradientColorStopPositions");
  const inset = fromTheme("inset");
  const margin = fromTheme("margin");
  const opacity = fromTheme("opacity");
  const padding = fromTheme("padding");
  const saturate = fromTheme("saturate");
  const scale = fromTheme("scale");
  const sepia = fromTheme("sepia");
  const skew = fromTheme("skew");
  const space = fromTheme("space");
  const translate2 = fromTheme("translate");
  const getOverscroll = () => ["auto", "contain", "none"];
  const getOverflow = () => ["auto", "hidden", "clip", "visible", "scroll"];
  const getSpacingWithAutoAndArbitrary = () => ["auto", isArbitraryValue, spacing];
  const getSpacingWithArbitrary = () => [isArbitraryValue, spacing];
  const getLengthWithEmptyAndArbitrary = () => ["", isLength, isArbitraryLength];
  const getNumberWithAutoAndArbitrary = () => ["auto", isNumber$1, isArbitraryValue];
  const getPositions = () => ["bottom", "center", "left", "left-bottom", "left-top", "right", "right-bottom", "right-top", "top"];
  const getLineStyles = () => ["solid", "dashed", "dotted", "double", "none"];
  const getBlendModes = () => ["normal", "multiply", "screen", "overlay", "darken", "lighten", "color-dodge", "color-burn", "hard-light", "soft-light", "difference", "exclusion", "hue", "saturation", "color", "luminosity", "plus-lighter"];
  const getAlign = () => ["start", "end", "center", "between", "around", "evenly", "stretch"];
  const getZeroAndEmpty = () => ["", "0", isArbitraryValue];
  const getBreaks = () => ["auto", "avoid", "all", "avoid-page", "page", "left", "right", "column"];
  const getNumber = () => [isNumber$1, isArbitraryNumber];
  const getNumberAndArbitrary = () => [isNumber$1, isArbitraryValue];
  return {
    cacheSize: 500,
    separator: ":",
    theme: {
      colors: [isAny],
      spacing: [isLength, isArbitraryLength],
      blur: ["none", "", isTshirtSize, isArbitraryValue],
      brightness: getNumber(),
      borderColor: [colors],
      borderRadius: ["none", "", "full", isTshirtSize, isArbitraryValue],
      borderSpacing: getSpacingWithArbitrary(),
      borderWidth: getLengthWithEmptyAndArbitrary(),
      contrast: getNumber(),
      grayscale: getZeroAndEmpty(),
      hueRotate: getNumberAndArbitrary(),
      invert: getZeroAndEmpty(),
      gap: getSpacingWithArbitrary(),
      gradientColorStops: [colors],
      gradientColorStopPositions: [isPercent, isArbitraryLength],
      inset: getSpacingWithAutoAndArbitrary(),
      margin: getSpacingWithAutoAndArbitrary(),
      opacity: getNumber(),
      padding: getSpacingWithArbitrary(),
      saturate: getNumber(),
      scale: getNumber(),
      sepia: getZeroAndEmpty(),
      skew: getNumberAndArbitrary(),
      space: getSpacingWithArbitrary(),
      translate: getSpacingWithArbitrary()
    },
    classGroups: {
      // Layout
      /**
       * Aspect Ratio
       * @see https://tailwindcss.com/docs/aspect-ratio
       */
      aspect: [{
        aspect: ["auto", "square", "video", isArbitraryValue]
      }],
      /**
       * Container
       * @see https://tailwindcss.com/docs/container
       */
      container: ["container"],
      /**
       * Columns
       * @see https://tailwindcss.com/docs/columns
       */
      columns: [{
        columns: [isTshirtSize]
      }],
      /**
       * Break After
       * @see https://tailwindcss.com/docs/break-after
       */
      "break-after": [{
        "break-after": getBreaks()
      }],
      /**
       * Break Before
       * @see https://tailwindcss.com/docs/break-before
       */
      "break-before": [{
        "break-before": getBreaks()
      }],
      /**
       * Break Inside
       * @see https://tailwindcss.com/docs/break-inside
       */
      "break-inside": [{
        "break-inside": ["auto", "avoid", "avoid-page", "avoid-column"]
      }],
      /**
       * Box Decoration Break
       * @see https://tailwindcss.com/docs/box-decoration-break
       */
      "box-decoration": [{
        "box-decoration": ["slice", "clone"]
      }],
      /**
       * Box Sizing
       * @see https://tailwindcss.com/docs/box-sizing
       */
      box: [{
        box: ["border", "content"]
      }],
      /**
       * Display
       * @see https://tailwindcss.com/docs/display
       */
      display: ["block", "inline-block", "inline", "flex", "inline-flex", "table", "inline-table", "table-caption", "table-cell", "table-column", "table-column-group", "table-footer-group", "table-header-group", "table-row-group", "table-row", "flow-root", "grid", "inline-grid", "contents", "list-item", "hidden"],
      /**
       * Floats
       * @see https://tailwindcss.com/docs/float
       */
      float: [{
        float: ["right", "left", "none", "start", "end"]
      }],
      /**
       * Clear
       * @see https://tailwindcss.com/docs/clear
       */
      clear: [{
        clear: ["left", "right", "both", "none", "start", "end"]
      }],
      /**
       * Isolation
       * @see https://tailwindcss.com/docs/isolation
       */
      isolation: ["isolate", "isolation-auto"],
      /**
       * Object Fit
       * @see https://tailwindcss.com/docs/object-fit
       */
      "object-fit": [{
        object: ["contain", "cover", "fill", "none", "scale-down"]
      }],
      /**
       * Object Position
       * @see https://tailwindcss.com/docs/object-position
       */
      "object-position": [{
        object: [...getPositions(), isArbitraryValue]
      }],
      /**
       * Overflow
       * @see https://tailwindcss.com/docs/overflow
       */
      overflow: [{
        overflow: getOverflow()
      }],
      /**
       * Overflow X
       * @see https://tailwindcss.com/docs/overflow
       */
      "overflow-x": [{
        "overflow-x": getOverflow()
      }],
      /**
       * Overflow Y
       * @see https://tailwindcss.com/docs/overflow
       */
      "overflow-y": [{
        "overflow-y": getOverflow()
      }],
      /**
       * Overscroll Behavior
       * @see https://tailwindcss.com/docs/overscroll-behavior
       */
      overscroll: [{
        overscroll: getOverscroll()
      }],
      /**
       * Overscroll Behavior X
       * @see https://tailwindcss.com/docs/overscroll-behavior
       */
      "overscroll-x": [{
        "overscroll-x": getOverscroll()
      }],
      /**
       * Overscroll Behavior Y
       * @see https://tailwindcss.com/docs/overscroll-behavior
       */
      "overscroll-y": [{
        "overscroll-y": getOverscroll()
      }],
      /**
       * Position
       * @see https://tailwindcss.com/docs/position
       */
      position: ["static", "fixed", "absolute", "relative", "sticky"],
      /**
       * Top / Right / Bottom / Left
       * @see https://tailwindcss.com/docs/top-right-bottom-left
       */
      inset: [{
        inset: [inset]
      }],
      /**
       * Right / Left
       * @see https://tailwindcss.com/docs/top-right-bottom-left
       */
      "inset-x": [{
        "inset-x": [inset]
      }],
      /**
       * Top / Bottom
       * @see https://tailwindcss.com/docs/top-right-bottom-left
       */
      "inset-y": [{
        "inset-y": [inset]
      }],
      /**
       * Start
       * @see https://tailwindcss.com/docs/top-right-bottom-left
       */
      start: [{
        start: [inset]
      }],
      /**
       * End
       * @see https://tailwindcss.com/docs/top-right-bottom-left
       */
      end: [{
        end: [inset]
      }],
      /**
       * Top
       * @see https://tailwindcss.com/docs/top-right-bottom-left
       */
      top: [{
        top: [inset]
      }],
      /**
       * Right
       * @see https://tailwindcss.com/docs/top-right-bottom-left
       */
      right: [{
        right: [inset]
      }],
      /**
       * Bottom
       * @see https://tailwindcss.com/docs/top-right-bottom-left
       */
      bottom: [{
        bottom: [inset]
      }],
      /**
       * Left
       * @see https://tailwindcss.com/docs/top-right-bottom-left
       */
      left: [{
        left: [inset]
      }],
      /**
       * Visibility
       * @see https://tailwindcss.com/docs/visibility
       */
      visibility: ["visible", "invisible", "collapse"],
      /**
       * Z-Index
       * @see https://tailwindcss.com/docs/z-index
       */
      z: [{
        z: ["auto", isInteger, isArbitraryValue]
      }],
      // Flexbox and Grid
      /**
       * Flex Basis
       * @see https://tailwindcss.com/docs/flex-basis
       */
      basis: [{
        basis: getSpacingWithAutoAndArbitrary()
      }],
      /**
       * Flex Direction
       * @see https://tailwindcss.com/docs/flex-direction
       */
      "flex-direction": [{
        flex: ["row", "row-reverse", "col", "col-reverse"]
      }],
      /**
       * Flex Wrap
       * @see https://tailwindcss.com/docs/flex-wrap
       */
      "flex-wrap": [{
        flex: ["wrap", "wrap-reverse", "nowrap"]
      }],
      /**
       * Flex
       * @see https://tailwindcss.com/docs/flex
       */
      flex: [{
        flex: ["1", "auto", "initial", "none", isArbitraryValue]
      }],
      /**
       * Flex Grow
       * @see https://tailwindcss.com/docs/flex-grow
       */
      grow: [{
        grow: getZeroAndEmpty()
      }],
      /**
       * Flex Shrink
       * @see https://tailwindcss.com/docs/flex-shrink
       */
      shrink: [{
        shrink: getZeroAndEmpty()
      }],
      /**
       * Order
       * @see https://tailwindcss.com/docs/order
       */
      order: [{
        order: ["first", "last", "none", isInteger, isArbitraryValue]
      }],
      /**
       * Grid Template Columns
       * @see https://tailwindcss.com/docs/grid-template-columns
       */
      "grid-cols": [{
        "grid-cols": [isAny]
      }],
      /**
       * Grid Column Start / End
       * @see https://tailwindcss.com/docs/grid-column
       */
      "col-start-end": [{
        col: ["auto", {
          span: ["full", isInteger, isArbitraryValue]
        }, isArbitraryValue]
      }],
      /**
       * Grid Column Start
       * @see https://tailwindcss.com/docs/grid-column
       */
      "col-start": [{
        "col-start": getNumberWithAutoAndArbitrary()
      }],
      /**
       * Grid Column End
       * @see https://tailwindcss.com/docs/grid-column
       */
      "col-end": [{
        "col-end": getNumberWithAutoAndArbitrary()
      }],
      /**
       * Grid Template Rows
       * @see https://tailwindcss.com/docs/grid-template-rows
       */
      "grid-rows": [{
        "grid-rows": [isAny]
      }],
      /**
       * Grid Row Start / End
       * @see https://tailwindcss.com/docs/grid-row
       */
      "row-start-end": [{
        row: ["auto", {
          span: [isInteger, isArbitraryValue]
        }, isArbitraryValue]
      }],
      /**
       * Grid Row Start
       * @see https://tailwindcss.com/docs/grid-row
       */
      "row-start": [{
        "row-start": getNumberWithAutoAndArbitrary()
      }],
      /**
       * Grid Row End
       * @see https://tailwindcss.com/docs/grid-row
       */
      "row-end": [{
        "row-end": getNumberWithAutoAndArbitrary()
      }],
      /**
       * Grid Auto Flow
       * @see https://tailwindcss.com/docs/grid-auto-flow
       */
      "grid-flow": [{
        "grid-flow": ["row", "col", "dense", "row-dense", "col-dense"]
      }],
      /**
       * Grid Auto Columns
       * @see https://tailwindcss.com/docs/grid-auto-columns
       */
      "auto-cols": [{
        "auto-cols": ["auto", "min", "max", "fr", isArbitraryValue]
      }],
      /**
       * Grid Auto Rows
       * @see https://tailwindcss.com/docs/grid-auto-rows
       */
      "auto-rows": [{
        "auto-rows": ["auto", "min", "max", "fr", isArbitraryValue]
      }],
      /**
       * Gap
       * @see https://tailwindcss.com/docs/gap
       */
      gap: [{
        gap: [gap]
      }],
      /**
       * Gap X
       * @see https://tailwindcss.com/docs/gap
       */
      "gap-x": [{
        "gap-x": [gap]
      }],
      /**
       * Gap Y
       * @see https://tailwindcss.com/docs/gap
       */
      "gap-y": [{
        "gap-y": [gap]
      }],
      /**
       * Justify Content
       * @see https://tailwindcss.com/docs/justify-content
       */
      "justify-content": [{
        justify: ["normal", ...getAlign()]
      }],
      /**
       * Justify Items
       * @see https://tailwindcss.com/docs/justify-items
       */
      "justify-items": [{
        "justify-items": ["start", "end", "center", "stretch"]
      }],
      /**
       * Justify Self
       * @see https://tailwindcss.com/docs/justify-self
       */
      "justify-self": [{
        "justify-self": ["auto", "start", "end", "center", "stretch"]
      }],
      /**
       * Align Content
       * @see https://tailwindcss.com/docs/align-content
       */
      "align-content": [{
        content: ["normal", ...getAlign(), "baseline"]
      }],
      /**
       * Align Items
       * @see https://tailwindcss.com/docs/align-items
       */
      "align-items": [{
        items: ["start", "end", "center", "baseline", "stretch"]
      }],
      /**
       * Align Self
       * @see https://tailwindcss.com/docs/align-self
       */
      "align-self": [{
        self: ["auto", "start", "end", "center", "stretch", "baseline"]
      }],
      /**
       * Place Content
       * @see https://tailwindcss.com/docs/place-content
       */
      "place-content": [{
        "place-content": [...getAlign(), "baseline"]
      }],
      /**
       * Place Items
       * @see https://tailwindcss.com/docs/place-items
       */
      "place-items": [{
        "place-items": ["start", "end", "center", "baseline", "stretch"]
      }],
      /**
       * Place Self
       * @see https://tailwindcss.com/docs/place-self
       */
      "place-self": [{
        "place-self": ["auto", "start", "end", "center", "stretch"]
      }],
      // Spacing
      /**
       * Padding
       * @see https://tailwindcss.com/docs/padding
       */
      p: [{
        p: [padding]
      }],
      /**
       * Padding X
       * @see https://tailwindcss.com/docs/padding
       */
      px: [{
        px: [padding]
      }],
      /**
       * Padding Y
       * @see https://tailwindcss.com/docs/padding
       */
      py: [{
        py: [padding]
      }],
      /**
       * Padding Start
       * @see https://tailwindcss.com/docs/padding
       */
      ps: [{
        ps: [padding]
      }],
      /**
       * Padding End
       * @see https://tailwindcss.com/docs/padding
       */
      pe: [{
        pe: [padding]
      }],
      /**
       * Padding Top
       * @see https://tailwindcss.com/docs/padding
       */
      pt: [{
        pt: [padding]
      }],
      /**
       * Padding Right
       * @see https://tailwindcss.com/docs/padding
       */
      pr: [{
        pr: [padding]
      }],
      /**
       * Padding Bottom
       * @see https://tailwindcss.com/docs/padding
       */
      pb: [{
        pb: [padding]
      }],
      /**
       * Padding Left
       * @see https://tailwindcss.com/docs/padding
       */
      pl: [{
        pl: [padding]
      }],
      /**
       * Margin
       * @see https://tailwindcss.com/docs/margin
       */
      m: [{
        m: [margin]
      }],
      /**
       * Margin X
       * @see https://tailwindcss.com/docs/margin
       */
      mx: [{
        mx: [margin]
      }],
      /**
       * Margin Y
       * @see https://tailwindcss.com/docs/margin
       */
      my: [{
        my: [margin]
      }],
      /**
       * Margin Start
       * @see https://tailwindcss.com/docs/margin
       */
      ms: [{
        ms: [margin]
      }],
      /**
       * Margin End
       * @see https://tailwindcss.com/docs/margin
       */
      me: [{
        me: [margin]
      }],
      /**
       * Margin Top
       * @see https://tailwindcss.com/docs/margin
       */
      mt: [{
        mt: [margin]
      }],
      /**
       * Margin Right
       * @see https://tailwindcss.com/docs/margin
       */
      mr: [{
        mr: [margin]
      }],
      /**
       * Margin Bottom
       * @see https://tailwindcss.com/docs/margin
       */
      mb: [{
        mb: [margin]
      }],
      /**
       * Margin Left
       * @see https://tailwindcss.com/docs/margin
       */
      ml: [{
        ml: [margin]
      }],
      /**
       * Space Between X
       * @see https://tailwindcss.com/docs/space
       */
      "space-x": [{
        "space-x": [space]
      }],
      /**
       * Space Between X Reverse
       * @see https://tailwindcss.com/docs/space
       */
      "space-x-reverse": ["space-x-reverse"],
      /**
       * Space Between Y
       * @see https://tailwindcss.com/docs/space
       */
      "space-y": [{
        "space-y": [space]
      }],
      /**
       * Space Between Y Reverse
       * @see https://tailwindcss.com/docs/space
       */
      "space-y-reverse": ["space-y-reverse"],
      // Sizing
      /**
       * Width
       * @see https://tailwindcss.com/docs/width
       */
      w: [{
        w: ["auto", "min", "max", "fit", "svw", "lvw", "dvw", isArbitraryValue, spacing]
      }],
      /**
       * Min-Width
       * @see https://tailwindcss.com/docs/min-width
       */
      "min-w": [{
        "min-w": [isArbitraryValue, spacing, "min", "max", "fit"]
      }],
      /**
       * Max-Width
       * @see https://tailwindcss.com/docs/max-width
       */
      "max-w": [{
        "max-w": [isArbitraryValue, spacing, "none", "full", "min", "max", "fit", "prose", {
          screen: [isTshirtSize]
        }, isTshirtSize]
      }],
      /**
       * Height
       * @see https://tailwindcss.com/docs/height
       */
      h: [{
        h: [isArbitraryValue, spacing, "auto", "min", "max", "fit", "svh", "lvh", "dvh"]
      }],
      /**
       * Min-Height
       * @see https://tailwindcss.com/docs/min-height
       */
      "min-h": [{
        "min-h": [isArbitraryValue, spacing, "min", "max", "fit", "svh", "lvh", "dvh"]
      }],
      /**
       * Max-Height
       * @see https://tailwindcss.com/docs/max-height
       */
      "max-h": [{
        "max-h": [isArbitraryValue, spacing, "min", "max", "fit", "svh", "lvh", "dvh"]
      }],
      /**
       * Size
       * @see https://tailwindcss.com/docs/size
       */
      size: [{
        size: [isArbitraryValue, spacing, "auto", "min", "max", "fit"]
      }],
      // Typography
      /**
       * Font Size
       * @see https://tailwindcss.com/docs/font-size
       */
      "font-size": [{
        text: ["base", isTshirtSize, isArbitraryLength]
      }],
      /**
       * Font Smoothing
       * @see https://tailwindcss.com/docs/font-smoothing
       */
      "font-smoothing": ["antialiased", "subpixel-antialiased"],
      /**
       * Font Style
       * @see https://tailwindcss.com/docs/font-style
       */
      "font-style": ["italic", "not-italic"],
      /**
       * Font Weight
       * @see https://tailwindcss.com/docs/font-weight
       */
      "font-weight": [{
        font: ["thin", "extralight", "light", "normal", "medium", "semibold", "bold", "extrabold", "black", isArbitraryNumber]
      }],
      /**
       * Font Family
       * @see https://tailwindcss.com/docs/font-family
       */
      "font-family": [{
        font: [isAny]
      }],
      /**
       * Font Variant Numeric
       * @see https://tailwindcss.com/docs/font-variant-numeric
       */
      "fvn-normal": ["normal-nums"],
      /**
       * Font Variant Numeric
       * @see https://tailwindcss.com/docs/font-variant-numeric
       */
      "fvn-ordinal": ["ordinal"],
      /**
       * Font Variant Numeric
       * @see https://tailwindcss.com/docs/font-variant-numeric
       */
      "fvn-slashed-zero": ["slashed-zero"],
      /**
       * Font Variant Numeric
       * @see https://tailwindcss.com/docs/font-variant-numeric
       */
      "fvn-figure": ["lining-nums", "oldstyle-nums"],
      /**
       * Font Variant Numeric
       * @see https://tailwindcss.com/docs/font-variant-numeric
       */
      "fvn-spacing": ["proportional-nums", "tabular-nums"],
      /**
       * Font Variant Numeric
       * @see https://tailwindcss.com/docs/font-variant-numeric
       */
      "fvn-fraction": ["diagonal-fractions", "stacked-fractons"],
      /**
       * Letter Spacing
       * @see https://tailwindcss.com/docs/letter-spacing
       */
      tracking: [{
        tracking: ["tighter", "tight", "normal", "wide", "wider", "widest", isArbitraryValue]
      }],
      /**
       * Line Clamp
       * @see https://tailwindcss.com/docs/line-clamp
       */
      "line-clamp": [{
        "line-clamp": ["none", isNumber$1, isArbitraryNumber]
      }],
      /**
       * Line Height
       * @see https://tailwindcss.com/docs/line-height
       */
      leading: [{
        leading: ["none", "tight", "snug", "normal", "relaxed", "loose", isLength, isArbitraryValue]
      }],
      /**
       * List Style Image
       * @see https://tailwindcss.com/docs/list-style-image
       */
      "list-image": [{
        "list-image": ["none", isArbitraryValue]
      }],
      /**
       * List Style Type
       * @see https://tailwindcss.com/docs/list-style-type
       */
      "list-style-type": [{
        list: ["none", "disc", "decimal", isArbitraryValue]
      }],
      /**
       * List Style Position
       * @see https://tailwindcss.com/docs/list-style-position
       */
      "list-style-position": [{
        list: ["inside", "outside"]
      }],
      /**
       * Placeholder Color
       * @deprecated since Tailwind CSS v3.0.0
       * @see https://tailwindcss.com/docs/placeholder-color
       */
      "placeholder-color": [{
        placeholder: [colors]
      }],
      /**
       * Placeholder Opacity
       * @see https://tailwindcss.com/docs/placeholder-opacity
       */
      "placeholder-opacity": [{
        "placeholder-opacity": [opacity]
      }],
      /**
       * Text Alignment
       * @see https://tailwindcss.com/docs/text-align
       */
      "text-alignment": [{
        text: ["left", "center", "right", "justify", "start", "end"]
      }],
      /**
       * Text Color
       * @see https://tailwindcss.com/docs/text-color
       */
      "text-color": [{
        text: [colors]
      }],
      /**
       * Text Opacity
       * @see https://tailwindcss.com/docs/text-opacity
       */
      "text-opacity": [{
        "text-opacity": [opacity]
      }],
      /**
       * Text Decoration
       * @see https://tailwindcss.com/docs/text-decoration
       */
      "text-decoration": ["underline", "overline", "line-through", "no-underline"],
      /**
       * Text Decoration Style
       * @see https://tailwindcss.com/docs/text-decoration-style
       */
      "text-decoration-style": [{
        decoration: [...getLineStyles(), "wavy"]
      }],
      /**
       * Text Decoration Thickness
       * @see https://tailwindcss.com/docs/text-decoration-thickness
       */
      "text-decoration-thickness": [{
        decoration: ["auto", "from-font", isLength, isArbitraryLength]
      }],
      /**
       * Text Underline Offset
       * @see https://tailwindcss.com/docs/text-underline-offset
       */
      "underline-offset": [{
        "underline-offset": ["auto", isLength, isArbitraryValue]
      }],
      /**
       * Text Decoration Color
       * @see https://tailwindcss.com/docs/text-decoration-color
       */
      "text-decoration-color": [{
        decoration: [colors]
      }],
      /**
       * Text Transform
       * @see https://tailwindcss.com/docs/text-transform
       */
      "text-transform": ["uppercase", "lowercase", "capitalize", "normal-case"],
      /**
       * Text Overflow
       * @see https://tailwindcss.com/docs/text-overflow
       */
      "text-overflow": ["truncate", "text-ellipsis", "text-clip"],
      /**
       * Text Wrap
       * @see https://tailwindcss.com/docs/text-wrap
       */
      "text-wrap": [{
        text: ["wrap", "nowrap", "balance", "pretty"]
      }],
      /**
       * Text Indent
       * @see https://tailwindcss.com/docs/text-indent
       */
      indent: [{
        indent: getSpacingWithArbitrary()
      }],
      /**
       * Vertical Alignment
       * @see https://tailwindcss.com/docs/vertical-align
       */
      "vertical-align": [{
        align: ["baseline", "top", "middle", "bottom", "text-top", "text-bottom", "sub", "super", isArbitraryValue]
      }],
      /**
       * Whitespace
       * @see https://tailwindcss.com/docs/whitespace
       */
      whitespace: [{
        whitespace: ["normal", "nowrap", "pre", "pre-line", "pre-wrap", "break-spaces"]
      }],
      /**
       * Word Break
       * @see https://tailwindcss.com/docs/word-break
       */
      break: [{
        break: ["normal", "words", "all", "keep"]
      }],
      /**
       * Hyphens
       * @see https://tailwindcss.com/docs/hyphens
       */
      hyphens: [{
        hyphens: ["none", "manual", "auto"]
      }],
      /**
       * Content
       * @see https://tailwindcss.com/docs/content
       */
      content: [{
        content: ["none", isArbitraryValue]
      }],
      // Backgrounds
      /**
       * Background Attachment
       * @see https://tailwindcss.com/docs/background-attachment
       */
      "bg-attachment": [{
        bg: ["fixed", "local", "scroll"]
      }],
      /**
       * Background Clip
       * @see https://tailwindcss.com/docs/background-clip
       */
      "bg-clip": [{
        "bg-clip": ["border", "padding", "content", "text"]
      }],
      /**
       * Background Opacity
       * @deprecated since Tailwind CSS v3.0.0
       * @see https://tailwindcss.com/docs/background-opacity
       */
      "bg-opacity": [{
        "bg-opacity": [opacity]
      }],
      /**
       * Background Origin
       * @see https://tailwindcss.com/docs/background-origin
       */
      "bg-origin": [{
        "bg-origin": ["border", "padding", "content"]
      }],
      /**
       * Background Position
       * @see https://tailwindcss.com/docs/background-position
       */
      "bg-position": [{
        bg: [...getPositions(), isArbitraryPosition]
      }],
      /**
       * Background Repeat
       * @see https://tailwindcss.com/docs/background-repeat
       */
      "bg-repeat": [{
        bg: ["no-repeat", {
          repeat: ["", "x", "y", "round", "space"]
        }]
      }],
      /**
       * Background Size
       * @see https://tailwindcss.com/docs/background-size
       */
      "bg-size": [{
        bg: ["auto", "cover", "contain", isArbitrarySize]
      }],
      /**
       * Background Image
       * @see https://tailwindcss.com/docs/background-image
       */
      "bg-image": [{
        bg: ["none", {
          "gradient-to": ["t", "tr", "r", "br", "b", "bl", "l", "tl"]
        }, isArbitraryImage]
      }],
      /**
       * Background Color
       * @see https://tailwindcss.com/docs/background-color
       */
      "bg-color": [{
        bg: [colors]
      }],
      /**
       * Gradient Color Stops From Position
       * @see https://tailwindcss.com/docs/gradient-color-stops
       */
      "gradient-from-pos": [{
        from: [gradientColorStopPositions]
      }],
      /**
       * Gradient Color Stops Via Position
       * @see https://tailwindcss.com/docs/gradient-color-stops
       */
      "gradient-via-pos": [{
        via: [gradientColorStopPositions]
      }],
      /**
       * Gradient Color Stops To Position
       * @see https://tailwindcss.com/docs/gradient-color-stops
       */
      "gradient-to-pos": [{
        to: [gradientColorStopPositions]
      }],
      /**
       * Gradient Color Stops From
       * @see https://tailwindcss.com/docs/gradient-color-stops
       */
      "gradient-from": [{
        from: [gradientColorStops]
      }],
      /**
       * Gradient Color Stops Via
       * @see https://tailwindcss.com/docs/gradient-color-stops
       */
      "gradient-via": [{
        via: [gradientColorStops]
      }],
      /**
       * Gradient Color Stops To
       * @see https://tailwindcss.com/docs/gradient-color-stops
       */
      "gradient-to": [{
        to: [gradientColorStops]
      }],
      // Borders
      /**
       * Border Radius
       * @see https://tailwindcss.com/docs/border-radius
       */
      rounded: [{
        rounded: [borderRadius]
      }],
      /**
       * Border Radius Start
       * @see https://tailwindcss.com/docs/border-radius
       */
      "rounded-s": [{
        "rounded-s": [borderRadius]
      }],
      /**
       * Border Radius End
       * @see https://tailwindcss.com/docs/border-radius
       */
      "rounded-e": [{
        "rounded-e": [borderRadius]
      }],
      /**
       * Border Radius Top
       * @see https://tailwindcss.com/docs/border-radius
       */
      "rounded-t": [{
        "rounded-t": [borderRadius]
      }],
      /**
       * Border Radius Right
       * @see https://tailwindcss.com/docs/border-radius
       */
      "rounded-r": [{
        "rounded-r": [borderRadius]
      }],
      /**
       * Border Radius Bottom
       * @see https://tailwindcss.com/docs/border-radius
       */
      "rounded-b": [{
        "rounded-b": [borderRadius]
      }],
      /**
       * Border Radius Left
       * @see https://tailwindcss.com/docs/border-radius
       */
      "rounded-l": [{
        "rounded-l": [borderRadius]
      }],
      /**
       * Border Radius Start Start
       * @see https://tailwindcss.com/docs/border-radius
       */
      "rounded-ss": [{
        "rounded-ss": [borderRadius]
      }],
      /**
       * Border Radius Start End
       * @see https://tailwindcss.com/docs/border-radius
       */
      "rounded-se": [{
        "rounded-se": [borderRadius]
      }],
      /**
       * Border Radius End End
       * @see https://tailwindcss.com/docs/border-radius
       */
      "rounded-ee": [{
        "rounded-ee": [borderRadius]
      }],
      /**
       * Border Radius End Start
       * @see https://tailwindcss.com/docs/border-radius
       */
      "rounded-es": [{
        "rounded-es": [borderRadius]
      }],
      /**
       * Border Radius Top Left
       * @see https://tailwindcss.com/docs/border-radius
       */
      "rounded-tl": [{
        "rounded-tl": [borderRadius]
      }],
      /**
       * Border Radius Top Right
       * @see https://tailwindcss.com/docs/border-radius
       */
      "rounded-tr": [{
        "rounded-tr": [borderRadius]
      }],
      /**
       * Border Radius Bottom Right
       * @see https://tailwindcss.com/docs/border-radius
       */
      "rounded-br": [{
        "rounded-br": [borderRadius]
      }],
      /**
       * Border Radius Bottom Left
       * @see https://tailwindcss.com/docs/border-radius
       */
      "rounded-bl": [{
        "rounded-bl": [borderRadius]
      }],
      /**
       * Border Width
       * @see https://tailwindcss.com/docs/border-width
       */
      "border-w": [{
        border: [borderWidth]
      }],
      /**
       * Border Width X
       * @see https://tailwindcss.com/docs/border-width
       */
      "border-w-x": [{
        "border-x": [borderWidth]
      }],
      /**
       * Border Width Y
       * @see https://tailwindcss.com/docs/border-width
       */
      "border-w-y": [{
        "border-y": [borderWidth]
      }],
      /**
       * Border Width Start
       * @see https://tailwindcss.com/docs/border-width
       */
      "border-w-s": [{
        "border-s": [borderWidth]
      }],
      /**
       * Border Width End
       * @see https://tailwindcss.com/docs/border-width
       */
      "border-w-e": [{
        "border-e": [borderWidth]
      }],
      /**
       * Border Width Top
       * @see https://tailwindcss.com/docs/border-width
       */
      "border-w-t": [{
        "border-t": [borderWidth]
      }],
      /**
       * Border Width Right
       * @see https://tailwindcss.com/docs/border-width
       */
      "border-w-r": [{
        "border-r": [borderWidth]
      }],
      /**
       * Border Width Bottom
       * @see https://tailwindcss.com/docs/border-width
       */
      "border-w-b": [{
        "border-b": [borderWidth]
      }],
      /**
       * Border Width Left
       * @see https://tailwindcss.com/docs/border-width
       */
      "border-w-l": [{
        "border-l": [borderWidth]
      }],
      /**
       * Border Opacity
       * @see https://tailwindcss.com/docs/border-opacity
       */
      "border-opacity": [{
        "border-opacity": [opacity]
      }],
      /**
       * Border Style
       * @see https://tailwindcss.com/docs/border-style
       */
      "border-style": [{
        border: [...getLineStyles(), "hidden"]
      }],
      /**
       * Divide Width X
       * @see https://tailwindcss.com/docs/divide-width
       */
      "divide-x": [{
        "divide-x": [borderWidth]
      }],
      /**
       * Divide Width X Reverse
       * @see https://tailwindcss.com/docs/divide-width
       */
      "divide-x-reverse": ["divide-x-reverse"],
      /**
       * Divide Width Y
       * @see https://tailwindcss.com/docs/divide-width
       */
      "divide-y": [{
        "divide-y": [borderWidth]
      }],
      /**
       * Divide Width Y Reverse
       * @see https://tailwindcss.com/docs/divide-width
       */
      "divide-y-reverse": ["divide-y-reverse"],
      /**
       * Divide Opacity
       * @see https://tailwindcss.com/docs/divide-opacity
       */
      "divide-opacity": [{
        "divide-opacity": [opacity]
      }],
      /**
       * Divide Style
       * @see https://tailwindcss.com/docs/divide-style
       */
      "divide-style": [{
        divide: getLineStyles()
      }],
      /**
       * Border Color
       * @see https://tailwindcss.com/docs/border-color
       */
      "border-color": [{
        border: [borderColor]
      }],
      /**
       * Border Color X
       * @see https://tailwindcss.com/docs/border-color
       */
      "border-color-x": [{
        "border-x": [borderColor]
      }],
      /**
       * Border Color Y
       * @see https://tailwindcss.com/docs/border-color
       */
      "border-color-y": [{
        "border-y": [borderColor]
      }],
      /**
       * Border Color Top
       * @see https://tailwindcss.com/docs/border-color
       */
      "border-color-t": [{
        "border-t": [borderColor]
      }],
      /**
       * Border Color Right
       * @see https://tailwindcss.com/docs/border-color
       */
      "border-color-r": [{
        "border-r": [borderColor]
      }],
      /**
       * Border Color Bottom
       * @see https://tailwindcss.com/docs/border-color
       */
      "border-color-b": [{
        "border-b": [borderColor]
      }],
      /**
       * Border Color Left
       * @see https://tailwindcss.com/docs/border-color
       */
      "border-color-l": [{
        "border-l": [borderColor]
      }],
      /**
       * Divide Color
       * @see https://tailwindcss.com/docs/divide-color
       */
      "divide-color": [{
        divide: [borderColor]
      }],
      /**
       * Outline Style
       * @see https://tailwindcss.com/docs/outline-style
       */
      "outline-style": [{
        outline: ["", ...getLineStyles()]
      }],
      /**
       * Outline Offset
       * @see https://tailwindcss.com/docs/outline-offset
       */
      "outline-offset": [{
        "outline-offset": [isLength, isArbitraryValue]
      }],
      /**
       * Outline Width
       * @see https://tailwindcss.com/docs/outline-width
       */
      "outline-w": [{
        outline: [isLength, isArbitraryLength]
      }],
      /**
       * Outline Color
       * @see https://tailwindcss.com/docs/outline-color
       */
      "outline-color": [{
        outline: [colors]
      }],
      /**
       * Ring Width
       * @see https://tailwindcss.com/docs/ring-width
       */
      "ring-w": [{
        ring: getLengthWithEmptyAndArbitrary()
      }],
      /**
       * Ring Width Inset
       * @see https://tailwindcss.com/docs/ring-width
       */
      "ring-w-inset": ["ring-inset"],
      /**
       * Ring Color
       * @see https://tailwindcss.com/docs/ring-color
       */
      "ring-color": [{
        ring: [colors]
      }],
      /**
       * Ring Opacity
       * @see https://tailwindcss.com/docs/ring-opacity
       */
      "ring-opacity": [{
        "ring-opacity": [opacity]
      }],
      /**
       * Ring Offset Width
       * @see https://tailwindcss.com/docs/ring-offset-width
       */
      "ring-offset-w": [{
        "ring-offset": [isLength, isArbitraryLength]
      }],
      /**
       * Ring Offset Color
       * @see https://tailwindcss.com/docs/ring-offset-color
       */
      "ring-offset-color": [{
        "ring-offset": [colors]
      }],
      // Effects
      /**
       * Box Shadow
       * @see https://tailwindcss.com/docs/box-shadow
       */
      shadow: [{
        shadow: ["", "inner", "none", isTshirtSize, isArbitraryShadow]
      }],
      /**
       * Box Shadow Color
       * @see https://tailwindcss.com/docs/box-shadow-color
       */
      "shadow-color": [{
        shadow: [isAny]
      }],
      /**
       * Opacity
       * @see https://tailwindcss.com/docs/opacity
       */
      opacity: [{
        opacity: [opacity]
      }],
      /**
       * Mix Blend Mode
       * @see https://tailwindcss.com/docs/mix-blend-mode
       */
      "mix-blend": [{
        "mix-blend": getBlendModes()
      }],
      /**
       * Background Blend Mode
       * @see https://tailwindcss.com/docs/background-blend-mode
       */
      "bg-blend": [{
        "bg-blend": getBlendModes()
      }],
      // Filters
      /**
       * Filter
       * @deprecated since Tailwind CSS v3.0.0
       * @see https://tailwindcss.com/docs/filter
       */
      filter: [{
        filter: ["", "none"]
      }],
      /**
       * Blur
       * @see https://tailwindcss.com/docs/blur
       */
      blur: [{
        blur: [blur]
      }],
      /**
       * Brightness
       * @see https://tailwindcss.com/docs/brightness
       */
      brightness: [{
        brightness: [brightness]
      }],
      /**
       * Contrast
       * @see https://tailwindcss.com/docs/contrast
       */
      contrast: [{
        contrast: [contrast]
      }],
      /**
       * Drop Shadow
       * @see https://tailwindcss.com/docs/drop-shadow
       */
      "drop-shadow": [{
        "drop-shadow": ["", "none", isTshirtSize, isArbitraryValue]
      }],
      /**
       * Grayscale
       * @see https://tailwindcss.com/docs/grayscale
       */
      grayscale: [{
        grayscale: [grayscale]
      }],
      /**
       * Hue Rotate
       * @see https://tailwindcss.com/docs/hue-rotate
       */
      "hue-rotate": [{
        "hue-rotate": [hueRotate]
      }],
      /**
       * Invert
       * @see https://tailwindcss.com/docs/invert
       */
      invert: [{
        invert: [invert]
      }],
      /**
       * Saturate
       * @see https://tailwindcss.com/docs/saturate
       */
      saturate: [{
        saturate: [saturate]
      }],
      /**
       * Sepia
       * @see https://tailwindcss.com/docs/sepia
       */
      sepia: [{
        sepia: [sepia]
      }],
      /**
       * Backdrop Filter
       * @deprecated since Tailwind CSS v3.0.0
       * @see https://tailwindcss.com/docs/backdrop-filter
       */
      "backdrop-filter": [{
        "backdrop-filter": ["", "none"]
      }],
      /**
       * Backdrop Blur
       * @see https://tailwindcss.com/docs/backdrop-blur
       */
      "backdrop-blur": [{
        "backdrop-blur": [blur]
      }],
      /**
       * Backdrop Brightness
       * @see https://tailwindcss.com/docs/backdrop-brightness
       */
      "backdrop-brightness": [{
        "backdrop-brightness": [brightness]
      }],
      /**
       * Backdrop Contrast
       * @see https://tailwindcss.com/docs/backdrop-contrast
       */
      "backdrop-contrast": [{
        "backdrop-contrast": [contrast]
      }],
      /**
       * Backdrop Grayscale
       * @see https://tailwindcss.com/docs/backdrop-grayscale
       */
      "backdrop-grayscale": [{
        "backdrop-grayscale": [grayscale]
      }],
      /**
       * Backdrop Hue Rotate
       * @see https://tailwindcss.com/docs/backdrop-hue-rotate
       */
      "backdrop-hue-rotate": [{
        "backdrop-hue-rotate": [hueRotate]
      }],
      /**
       * Backdrop Invert
       * @see https://tailwindcss.com/docs/backdrop-invert
       */
      "backdrop-invert": [{
        "backdrop-invert": [invert]
      }],
      /**
       * Backdrop Opacity
       * @see https://tailwindcss.com/docs/backdrop-opacity
       */
      "backdrop-opacity": [{
        "backdrop-opacity": [opacity]
      }],
      /**
       * Backdrop Saturate
       * @see https://tailwindcss.com/docs/backdrop-saturate
       */
      "backdrop-saturate": [{
        "backdrop-saturate": [saturate]
      }],
      /**
       * Backdrop Sepia
       * @see https://tailwindcss.com/docs/backdrop-sepia
       */
      "backdrop-sepia": [{
        "backdrop-sepia": [sepia]
      }],
      // Tables
      /**
       * Border Collapse
       * @see https://tailwindcss.com/docs/border-collapse
       */
      "border-collapse": [{
        border: ["collapse", "separate"]
      }],
      /**
       * Border Spacing
       * @see https://tailwindcss.com/docs/border-spacing
       */
      "border-spacing": [{
        "border-spacing": [borderSpacing]
      }],
      /**
       * Border Spacing X
       * @see https://tailwindcss.com/docs/border-spacing
       */
      "border-spacing-x": [{
        "border-spacing-x": [borderSpacing]
      }],
      /**
       * Border Spacing Y
       * @see https://tailwindcss.com/docs/border-spacing
       */
      "border-spacing-y": [{
        "border-spacing-y": [borderSpacing]
      }],
      /**
       * Table Layout
       * @see https://tailwindcss.com/docs/table-layout
       */
      "table-layout": [{
        table: ["auto", "fixed"]
      }],
      /**
       * Caption Side
       * @see https://tailwindcss.com/docs/caption-side
       */
      caption: [{
        caption: ["top", "bottom"]
      }],
      // Transitions and Animation
      /**
       * Tranisition Property
       * @see https://tailwindcss.com/docs/transition-property
       */
      transition: [{
        transition: ["none", "all", "", "colors", "opacity", "shadow", "transform", isArbitraryValue]
      }],
      /**
       * Transition Duration
       * @see https://tailwindcss.com/docs/transition-duration
       */
      duration: [{
        duration: getNumberAndArbitrary()
      }],
      /**
       * Transition Timing Function
       * @see https://tailwindcss.com/docs/transition-timing-function
       */
      ease: [{
        ease: ["linear", "in", "out", "in-out", isArbitraryValue]
      }],
      /**
       * Transition Delay
       * @see https://tailwindcss.com/docs/transition-delay
       */
      delay: [{
        delay: getNumberAndArbitrary()
      }],
      /**
       * Animation
       * @see https://tailwindcss.com/docs/animation
       */
      animate: [{
        animate: ["none", "spin", "ping", "pulse", "bounce", isArbitraryValue]
      }],
      // Transforms
      /**
       * Transform
       * @see https://tailwindcss.com/docs/transform
       */
      transform: [{
        transform: ["", "gpu", "none"]
      }],
      /**
       * Scale
       * @see https://tailwindcss.com/docs/scale
       */
      scale: [{
        scale: [scale]
      }],
      /**
       * Scale X
       * @see https://tailwindcss.com/docs/scale
       */
      "scale-x": [{
        "scale-x": [scale]
      }],
      /**
       * Scale Y
       * @see https://tailwindcss.com/docs/scale
       */
      "scale-y": [{
        "scale-y": [scale]
      }],
      /**
       * Rotate
       * @see https://tailwindcss.com/docs/rotate
       */
      rotate: [{
        rotate: [isInteger, isArbitraryValue]
      }],
      /**
       * Translate X
       * @see https://tailwindcss.com/docs/translate
       */
      "translate-x": [{
        "translate-x": [translate2]
      }],
      /**
       * Translate Y
       * @see https://tailwindcss.com/docs/translate
       */
      "translate-y": [{
        "translate-y": [translate2]
      }],
      /**
       * Skew X
       * @see https://tailwindcss.com/docs/skew
       */
      "skew-x": [{
        "skew-x": [skew]
      }],
      /**
       * Skew Y
       * @see https://tailwindcss.com/docs/skew
       */
      "skew-y": [{
        "skew-y": [skew]
      }],
      /**
       * Transform Origin
       * @see https://tailwindcss.com/docs/transform-origin
       */
      "transform-origin": [{
        origin: ["center", "top", "top-right", "right", "bottom-right", "bottom", "bottom-left", "left", "top-left", isArbitraryValue]
      }],
      // Interactivity
      /**
       * Accent Color
       * @see https://tailwindcss.com/docs/accent-color
       */
      accent: [{
        accent: ["auto", colors]
      }],
      /**
       * Appearance
       * @see https://tailwindcss.com/docs/appearance
       */
      appearance: [{
        appearance: ["none", "auto"]
      }],
      /**
       * Cursor
       * @see https://tailwindcss.com/docs/cursor
       */
      cursor: [{
        cursor: ["auto", "default", "pointer", "wait", "text", "move", "help", "not-allowed", "none", "context-menu", "progress", "cell", "crosshair", "vertical-text", "alias", "copy", "no-drop", "grab", "grabbing", "all-scroll", "col-resize", "row-resize", "n-resize", "e-resize", "s-resize", "w-resize", "ne-resize", "nw-resize", "se-resize", "sw-resize", "ew-resize", "ns-resize", "nesw-resize", "nwse-resize", "zoom-in", "zoom-out", isArbitraryValue]
      }],
      /**
       * Caret Color
       * @see https://tailwindcss.com/docs/just-in-time-mode#caret-color-utilities
       */
      "caret-color": [{
        caret: [colors]
      }],
      /**
       * Pointer Events
       * @see https://tailwindcss.com/docs/pointer-events
       */
      "pointer-events": [{
        "pointer-events": ["none", "auto"]
      }],
      /**
       * Resize
       * @see https://tailwindcss.com/docs/resize
       */
      resize: [{
        resize: ["none", "y", "x", ""]
      }],
      /**
       * Scroll Behavior
       * @see https://tailwindcss.com/docs/scroll-behavior
       */
      "scroll-behavior": [{
        scroll: ["auto", "smooth"]
      }],
      /**
       * Scroll Margin
       * @see https://tailwindcss.com/docs/scroll-margin
       */
      "scroll-m": [{
        "scroll-m": getSpacingWithArbitrary()
      }],
      /**
       * Scroll Margin X
       * @see https://tailwindcss.com/docs/scroll-margin
       */
      "scroll-mx": [{
        "scroll-mx": getSpacingWithArbitrary()
      }],
      /**
       * Scroll Margin Y
       * @see https://tailwindcss.com/docs/scroll-margin
       */
      "scroll-my": [{
        "scroll-my": getSpacingWithArbitrary()
      }],
      /**
       * Scroll Margin Start
       * @see https://tailwindcss.com/docs/scroll-margin
       */
      "scroll-ms": [{
        "scroll-ms": getSpacingWithArbitrary()
      }],
      /**
       * Scroll Margin End
       * @see https://tailwindcss.com/docs/scroll-margin
       */
      "scroll-me": [{
        "scroll-me": getSpacingWithArbitrary()
      }],
      /**
       * Scroll Margin Top
       * @see https://tailwindcss.com/docs/scroll-margin
       */
      "scroll-mt": [{
        "scroll-mt": getSpacingWithArbitrary()
      }],
      /**
       * Scroll Margin Right
       * @see https://tailwindcss.com/docs/scroll-margin
       */
      "scroll-mr": [{
        "scroll-mr": getSpacingWithArbitrary()
      }],
      /**
       * Scroll Margin Bottom
       * @see https://tailwindcss.com/docs/scroll-margin
       */
      "scroll-mb": [{
        "scroll-mb": getSpacingWithArbitrary()
      }],
      /**
       * Scroll Margin Left
       * @see https://tailwindcss.com/docs/scroll-margin
       */
      "scroll-ml": [{
        "scroll-ml": getSpacingWithArbitrary()
      }],
      /**
       * Scroll Padding
       * @see https://tailwindcss.com/docs/scroll-padding
       */
      "scroll-p": [{
        "scroll-p": getSpacingWithArbitrary()
      }],
      /**
       * Scroll Padding X
       * @see https://tailwindcss.com/docs/scroll-padding
       */
      "scroll-px": [{
        "scroll-px": getSpacingWithArbitrary()
      }],
      /**
       * Scroll Padding Y
       * @see https://tailwindcss.com/docs/scroll-padding
       */
      "scroll-py": [{
        "scroll-py": getSpacingWithArbitrary()
      }],
      /**
       * Scroll Padding Start
       * @see https://tailwindcss.com/docs/scroll-padding
       */
      "scroll-ps": [{
        "scroll-ps": getSpacingWithArbitrary()
      }],
      /**
       * Scroll Padding End
       * @see https://tailwindcss.com/docs/scroll-padding
       */
      "scroll-pe": [{
        "scroll-pe": getSpacingWithArbitrary()
      }],
      /**
       * Scroll Padding Top
       * @see https://tailwindcss.com/docs/scroll-padding
       */
      "scroll-pt": [{
        "scroll-pt": getSpacingWithArbitrary()
      }],
      /**
       * Scroll Padding Right
       * @see https://tailwindcss.com/docs/scroll-padding
       */
      "scroll-pr": [{
        "scroll-pr": getSpacingWithArbitrary()
      }],
      /**
       * Scroll Padding Bottom
       * @see https://tailwindcss.com/docs/scroll-padding
       */
      "scroll-pb": [{
        "scroll-pb": getSpacingWithArbitrary()
      }],
      /**
       * Scroll Padding Left
       * @see https://tailwindcss.com/docs/scroll-padding
       */
      "scroll-pl": [{
        "scroll-pl": getSpacingWithArbitrary()
      }],
      /**
       * Scroll Snap Align
       * @see https://tailwindcss.com/docs/scroll-snap-align
       */
      "snap-align": [{
        snap: ["start", "end", "center", "align-none"]
      }],
      /**
       * Scroll Snap Stop
       * @see https://tailwindcss.com/docs/scroll-snap-stop
       */
      "snap-stop": [{
        snap: ["normal", "always"]
      }],
      /**
       * Scroll Snap Type
       * @see https://tailwindcss.com/docs/scroll-snap-type
       */
      "snap-type": [{
        snap: ["none", "x", "y", "both"]
      }],
      /**
       * Scroll Snap Type Strictness
       * @see https://tailwindcss.com/docs/scroll-snap-type
       */
      "snap-strictness": [{
        snap: ["mandatory", "proximity"]
      }],
      /**
       * Touch Action
       * @see https://tailwindcss.com/docs/touch-action
       */
      touch: [{
        touch: ["auto", "none", "manipulation"]
      }],
      /**
       * Touch Action X
       * @see https://tailwindcss.com/docs/touch-action
       */
      "touch-x": [{
        "touch-pan": ["x", "left", "right"]
      }],
      /**
       * Touch Action Y
       * @see https://tailwindcss.com/docs/touch-action
       */
      "touch-y": [{
        "touch-pan": ["y", "up", "down"]
      }],
      /**
       * Touch Action Pinch Zoom
       * @see https://tailwindcss.com/docs/touch-action
       */
      "touch-pz": ["touch-pinch-zoom"],
      /**
       * User Select
       * @see https://tailwindcss.com/docs/user-select
       */
      select: [{
        select: ["none", "text", "all", "auto"]
      }],
      /**
       * Will Change
       * @see https://tailwindcss.com/docs/will-change
       */
      "will-change": [{
        "will-change": ["auto", "scroll", "contents", "transform", isArbitraryValue]
      }],
      // SVG
      /**
       * Fill
       * @see https://tailwindcss.com/docs/fill
       */
      fill: [{
        fill: [colors, "none"]
      }],
      /**
       * Stroke Width
       * @see https://tailwindcss.com/docs/stroke-width
       */
      "stroke-w": [{
        stroke: [isLength, isArbitraryLength, isArbitraryNumber]
      }],
      /**
       * Stroke
       * @see https://tailwindcss.com/docs/stroke
       */
      stroke: [{
        stroke: [colors, "none"]
      }],
      // Accessibility
      /**
       * Screen Readers
       * @see https://tailwindcss.com/docs/screen-readers
       */
      sr: ["sr-only", "not-sr-only"],
      /**
       * Forced Color Adjust
       * @see https://tailwindcss.com/docs/forced-color-adjust
       */
      "forced-color-adjust": [{
        "forced-color-adjust": ["auto", "none"]
      }]
    },
    conflictingClassGroups: {
      overflow: ["overflow-x", "overflow-y"],
      overscroll: ["overscroll-x", "overscroll-y"],
      inset: ["inset-x", "inset-y", "start", "end", "top", "right", "bottom", "left"],
      "inset-x": ["right", "left"],
      "inset-y": ["top", "bottom"],
      flex: ["basis", "grow", "shrink"],
      gap: ["gap-x", "gap-y"],
      p: ["px", "py", "ps", "pe", "pt", "pr", "pb", "pl"],
      px: ["pr", "pl"],
      py: ["pt", "pb"],
      m: ["mx", "my", "ms", "me", "mt", "mr", "mb", "ml"],
      mx: ["mr", "ml"],
      my: ["mt", "mb"],
      size: ["w", "h"],
      "font-size": ["leading"],
      "fvn-normal": ["fvn-ordinal", "fvn-slashed-zero", "fvn-figure", "fvn-spacing", "fvn-fraction"],
      "fvn-ordinal": ["fvn-normal"],
      "fvn-slashed-zero": ["fvn-normal"],
      "fvn-figure": ["fvn-normal"],
      "fvn-spacing": ["fvn-normal"],
      "fvn-fraction": ["fvn-normal"],
      "line-clamp": ["display", "overflow"],
      rounded: ["rounded-s", "rounded-e", "rounded-t", "rounded-r", "rounded-b", "rounded-l", "rounded-ss", "rounded-se", "rounded-ee", "rounded-es", "rounded-tl", "rounded-tr", "rounded-br", "rounded-bl"],
      "rounded-s": ["rounded-ss", "rounded-es"],
      "rounded-e": ["rounded-se", "rounded-ee"],
      "rounded-t": ["rounded-tl", "rounded-tr"],
      "rounded-r": ["rounded-tr", "rounded-br"],
      "rounded-b": ["rounded-br", "rounded-bl"],
      "rounded-l": ["rounded-tl", "rounded-bl"],
      "border-spacing": ["border-spacing-x", "border-spacing-y"],
      "border-w": ["border-w-s", "border-w-e", "border-w-t", "border-w-r", "border-w-b", "border-w-l"],
      "border-w-x": ["border-w-r", "border-w-l"],
      "border-w-y": ["border-w-t", "border-w-b"],
      "border-color": ["border-color-t", "border-color-r", "border-color-b", "border-color-l"],
      "border-color-x": ["border-color-r", "border-color-l"],
      "border-color-y": ["border-color-t", "border-color-b"],
      "scroll-m": ["scroll-mx", "scroll-my", "scroll-ms", "scroll-me", "scroll-mt", "scroll-mr", "scroll-mb", "scroll-ml"],
      "scroll-mx": ["scroll-mr", "scroll-ml"],
      "scroll-my": ["scroll-mt", "scroll-mb"],
      "scroll-p": ["scroll-px", "scroll-py", "scroll-ps", "scroll-pe", "scroll-pt", "scroll-pr", "scroll-pb", "scroll-pl"],
      "scroll-px": ["scroll-pr", "scroll-pl"],
      "scroll-py": ["scroll-pt", "scroll-pb"],
      touch: ["touch-x", "touch-y", "touch-pz"],
      "touch-x": ["touch"],
      "touch-y": ["touch"],
      "touch-pz": ["touch"]
    },
    conflictingClassGroupModifiers: {
      "font-size": ["leading"]
    }
  };
}
function mergeConfigs(baseConfig, {
  cacheSize,
  prefix,
  separator: separator2,
  extend: extend2 = {},
  override = {}
}) {
  overrideProperty(baseConfig, "cacheSize", cacheSize);
  overrideProperty(baseConfig, "prefix", prefix);
  overrideProperty(baseConfig, "separator", separator2);
  for (const configKey in override) {
    overrideConfigProperties(baseConfig[configKey], override[configKey]);
  }
  for (const key in extend2) {
    mergeConfigProperties(baseConfig[key], extend2[key]);
  }
  return baseConfig;
}
function overrideProperty(baseObject, overrideKey, overrideValue) {
  if (overrideValue !== void 0) {
    baseObject[overrideKey] = overrideValue;
  }
}
function overrideConfigProperties(baseObject, overrideObject) {
  if (overrideObject) {
    for (const key in overrideObject) {
      overrideProperty(baseObject, key, overrideObject[key]);
    }
  }
}
function mergeConfigProperties(baseObject, mergeObject) {
  if (mergeObject) {
    for (const key in mergeObject) {
      const mergeValue = mergeObject[key];
      if (mergeValue !== void 0) {
        baseObject[key] = (baseObject[key] || []).concat(mergeValue);
      }
    }
  }
}
function extendTailwindMerge(configExtension, ...createConfig) {
  return typeof configExtension === "function" ? createTailwindMerge(getDefaultConfig, configExtension, ...createConfig) : createTailwindMerge(() => mergeConfigs(getDefaultConfig(), configExtension), ...createConfig);
}
const twMerge = /* @__PURE__ */ createTailwindMerge(getDefaultConfig);
function getDevtoolsGlobalHook() {
  return getTarget().__VUE_DEVTOOLS_GLOBAL_HOOK__;
}
function getTarget() {
  return typeof navigator !== "undefined" && typeof window !== "undefined" ? window : typeof global !== "undefined" ? global : {};
}
const isProxyAvailable = typeof Proxy === "function";
const HOOK_SETUP = "devtools-plugin:setup";
const HOOK_PLUGIN_SETTINGS_SET = "plugin:settings:set";
let supported;
let perf;
function isPerformanceSupported() {
  var _a2;
  if (supported !== void 0) {
    return supported;
  }
  if (typeof window !== "undefined" && window.performance) {
    supported = true;
    perf = window.performance;
  } else if (typeof global !== "undefined" && ((_a2 = global.perf_hooks) === null || _a2 === void 0 ? void 0 : _a2.performance)) {
    supported = true;
    perf = global.perf_hooks.performance;
  } else {
    supported = false;
  }
  return supported;
}
function now() {
  return isPerformanceSupported() ? perf.now() : Date.now();
}
class ApiProxy {
  constructor(plugin2, hook) {
    this.target = null;
    this.targetQueue = [];
    this.onQueue = [];
    this.plugin = plugin2;
    this.hook = hook;
    const defaultSettings = {};
    if (plugin2.settings) {
      for (const id2 in plugin2.settings) {
        const item = plugin2.settings[id2];
        defaultSettings[id2] = item.defaultValue;
      }
    }
    const localSettingsSaveId = `__vue-devtools-plugin-settings__${plugin2.id}`;
    let currentSettings = Object.assign({}, defaultSettings);
    try {
      const raw = localStorage.getItem(localSettingsSaveId);
      const data = JSON.parse(raw);
      Object.assign(currentSettings, data);
    } catch (e3) {
    }
    this.fallbacks = {
      getSettings() {
        return currentSettings;
      },
      setSettings(value) {
        try {
          localStorage.setItem(localSettingsSaveId, JSON.stringify(value));
        } catch (e3) {
        }
        currentSettings = value;
      },
      now() {
        return now();
      }
    };
    if (hook) {
      hook.on(HOOK_PLUGIN_SETTINGS_SET, (pluginId, value) => {
        if (pluginId === this.plugin.id) {
          this.fallbacks.setSettings(value);
        }
      });
    }
    this.proxiedOn = new Proxy({}, {
      get: (_target, prop) => {
        if (this.target) {
          return this.target.on[prop];
        } else {
          return (...args) => {
            this.onQueue.push({
              method: prop,
              args
            });
          };
        }
      }
    });
    this.proxiedTarget = new Proxy({}, {
      get: (_target, prop) => {
        if (this.target) {
          return this.target[prop];
        } else if (prop === "on") {
          return this.proxiedOn;
        } else if (Object.keys(this.fallbacks).includes(prop)) {
          return (...args) => {
            this.targetQueue.push({
              method: prop,
              args,
              resolve: () => {
              }
            });
            return this.fallbacks[prop](...args);
          };
        } else {
          return (...args) => {
            return new Promise((resolve2) => {
              this.targetQueue.push({
                method: prop,
                args,
                resolve: resolve2
              });
            });
          };
        }
      }
    });
  }
  async setRealTarget(target) {
    this.target = target;
    for (const item of this.onQueue) {
      this.target.on[item.method](...item.args);
    }
    for (const item of this.targetQueue) {
      item.resolve(await this.target[item.method](...item.args));
    }
  }
}
function setupDevtoolsPlugin(pluginDescriptor, setupFn) {
  const descriptor = pluginDescriptor;
  const target = getTarget();
  const hook = getDevtoolsGlobalHook();
  const enableProxy = isProxyAvailable && descriptor.enableEarlyProxy;
  if (hook && (target.__VUE_DEVTOOLS_PLUGIN_API_AVAILABLE__ || !enableProxy)) {
    hook.emit(HOOK_SETUP, pluginDescriptor, setupFn);
  } else {
    const proxy = enableProxy ? new ApiProxy(descriptor, hook) : null;
    const list = target.__VUE_DEVTOOLS_PLUGINS__ = target.__VUE_DEVTOOLS_PLUGINS__ || [];
    list.push({
      pluginDescriptor: descriptor,
      setupFn,
      proxy
    });
    if (proxy)
      setupFn(proxy.proxiedTarget);
  }
}
/*!
  * vue-router v4.2.5
  * (c) 2023 Eduardo San Martin Morote
  * @license MIT
  */
const isBrowser = typeof window !== "undefined";
function isESModule(obj) {
  return obj.__esModule || obj[Symbol.toStringTag] === "Module";
}
const assign$3 = Object.assign;
function applyToParams(fn2, params) {
  const newParams = {};
  for (const key in params) {
    const value = params[key];
    newParams[key] = isArray$1(value) ? value.map(fn2) : fn2(value);
  }
  return newParams;
}
const noop$1 = () => {
};
const isArray$1 = Array.isArray;
function warn$1(msg) {
  const args = Array.from(arguments).slice(1);
  console.warn.apply(console, ["[Vue Router warn]: " + msg].concat(args));
}
const TRAILING_SLASH_RE = /\/$/;
const removeTrailingSlash = (path) => path.replace(TRAILING_SLASH_RE, "");
function parseURL(parseQuery2, location2, currentLocation = "/") {
  let path, query = {}, searchString = "", hash2 = "";
  const hashPos = location2.indexOf("#");
  let searchPos = location2.indexOf("?");
  if (hashPos < searchPos && hashPos >= 0) {
    searchPos = -1;
  }
  if (searchPos > -1) {
    path = location2.slice(0, searchPos);
    searchString = location2.slice(searchPos + 1, hashPos > -1 ? hashPos : location2.length);
    query = parseQuery2(searchString);
  }
  if (hashPos > -1) {
    path = path || location2.slice(0, hashPos);
    hash2 = location2.slice(hashPos, location2.length);
  }
  path = resolveRelativePath(path != null ? path : location2, currentLocation);
  return {
    fullPath: path + (searchString && "?") + searchString + hash2,
    path,
    query,
    hash: hash2
  };
}
function stringifyURL(stringifyQuery2, location2) {
  const query = location2.query ? stringifyQuery2(location2.query) : "";
  return location2.path + (query && "?") + query + (location2.hash || "");
}
function stripBase(pathname, base) {
  if (!base || !pathname.toLowerCase().startsWith(base.toLowerCase()))
    return pathname;
  return pathname.slice(base.length) || "/";
}
function isSameRouteLocation(stringifyQuery2, a4, b4) {
  const aLastIndex = a4.matched.length - 1;
  const bLastIndex = b4.matched.length - 1;
  return aLastIndex > -1 && aLastIndex === bLastIndex && isSameRouteRecord(a4.matched[aLastIndex], b4.matched[bLastIndex]) && isSameRouteLocationParams(a4.params, b4.params) && stringifyQuery2(a4.query) === stringifyQuery2(b4.query) && a4.hash === b4.hash;
}
function isSameRouteRecord(a4, b4) {
  return (a4.aliasOf || a4) === (b4.aliasOf || b4);
}
function isSameRouteLocationParams(a4, b4) {
  if (Object.keys(a4).length !== Object.keys(b4).length)
    return false;
  for (const key in a4) {
    if (!isSameRouteLocationParamsValue(a4[key], b4[key]))
      return false;
  }
  return true;
}
function isSameRouteLocationParamsValue(a4, b4) {
  return isArray$1(a4) ? isEquivalentArray(a4, b4) : isArray$1(b4) ? isEquivalentArray(b4, a4) : a4 === b4;
}
function isEquivalentArray(a4, b4) {
  return isArray$1(b4) ? a4.length === b4.length && a4.every((value, i3) => value === b4[i3]) : a4.length === 1 && a4[0] === b4;
}
function resolveRelativePath(to2, from) {
  if (to2.startsWith("/"))
    return to2;
  if (!from.startsWith("/")) {
    warn$1(`Cannot resolve a relative location without an absolute path. Trying to resolve "${to2}" from "${from}". It should look like "/${from}".`);
    return to2;
  }
  if (!to2)
    return from;
  const fromSegments = from.split("/");
  const toSegments = to2.split("/");
  const lastToSegment = toSegments[toSegments.length - 1];
  if (lastToSegment === ".." || lastToSegment === ".") {
    toSegments.push("");
  }
  let position = fromSegments.length - 1;
  let toPosition;
  let segment;
  for (toPosition = 0; toPosition < toSegments.length; toPosition++) {
    segment = toSegments[toPosition];
    if (segment === ".")
      continue;
    if (segment === "..") {
      if (position > 1)
        position--;
    } else
      break;
  }
  return fromSegments.slice(0, position).join("/") + "/" + toSegments.slice(toPosition - (toPosition === toSegments.length ? 1 : 0)).join("/");
}
var NavigationType;
(function(NavigationType2) {
  NavigationType2["pop"] = "pop";
  NavigationType2["push"] = "push";
})(NavigationType || (NavigationType = {}));
var NavigationDirection;
(function(NavigationDirection2) {
  NavigationDirection2["back"] = "back";
  NavigationDirection2["forward"] = "forward";
  NavigationDirection2["unknown"] = "";
})(NavigationDirection || (NavigationDirection = {}));
function normalizeBase(base) {
  if (!base) {
    if (isBrowser) {
      const baseEl = document.querySelector("base");
      base = baseEl && baseEl.getAttribute("href") || "/";
      base = base.replace(/^\w+:\/\/[^\/]+/, "");
    } else {
      base = "/";
    }
  }
  if (base[0] !== "/" && base[0] !== "#")
    base = "/" + base;
  return removeTrailingSlash(base);
}
const BEFORE_HASH_RE = /^[^#]+#/;
function createHref(base, location2) {
  return base.replace(BEFORE_HASH_RE, "#") + location2;
}
function getElementPosition(el3, offset2) {
  const docRect = document.documentElement.getBoundingClientRect();
  const elRect = el3.getBoundingClientRect();
  return {
    behavior: offset2.behavior,
    left: elRect.left - docRect.left - (offset2.left || 0),
    top: elRect.top - docRect.top - (offset2.top || 0)
  };
}
const computeScrollPosition = () => ({
  left: window.pageXOffset,
  top: window.pageYOffset
});
function scrollToPosition(position) {
  let scrollToOptions;
  if ("el" in position) {
    const positionEl = position.el;
    const isIdSelector = typeof positionEl === "string" && positionEl.startsWith("#");
    if (typeof position.el === "string") {
      if (!isIdSelector || !document.getElementById(position.el.slice(1))) {
        try {
          const foundEl = document.querySelector(position.el);
          if (isIdSelector && foundEl) {
            warn$1(`The selector "${position.el}" should be passed as "el: document.querySelector('${position.el}')" because it starts with "#".`);
            return;
          }
        } catch (err) {
          warn$1(`The selector "${position.el}" is invalid. If you are using an id selector, make sure to escape it. You can find more information about escaping characters in selectors at https://mathiasbynens.be/notes/css-escapes or use CSS.escape (https://developer.mozilla.org/en-US/docs/Web/API/CSS/escape).`);
          return;
        }
      }
    }
    const el3 = typeof positionEl === "string" ? isIdSelector ? document.getElementById(positionEl.slice(1)) : document.querySelector(positionEl) : positionEl;
    if (!el3) {
      warn$1(`Couldn't find element using selector "${position.el}" returned by scrollBehavior.`);
      return;
    }
    scrollToOptions = getElementPosition(el3, position);
  } else {
    scrollToOptions = position;
  }
  if ("scrollBehavior" in document.documentElement.style)
    window.scrollTo(scrollToOptions);
  else {
    window.scrollTo(scrollToOptions.left != null ? scrollToOptions.left : window.pageXOffset, scrollToOptions.top != null ? scrollToOptions.top : window.pageYOffset);
  }
}
function getScrollKey(path, delta) {
  const position = history.state ? history.state.position - delta : -1;
  return position + path;
}
const scrollPositions = /* @__PURE__ */ new Map();
function saveScrollPosition(key, scrollPosition) {
  scrollPositions.set(key, scrollPosition);
}
function getSavedScrollPosition(key) {
  const scroll = scrollPositions.get(key);
  scrollPositions.delete(key);
  return scroll;
}
let createBaseLocation = () => location.protocol + "//" + location.host;
function createCurrentLocation(base, location2) {
  const { pathname, search: search2, hash: hash2 } = location2;
  const hashPos = base.indexOf("#");
  if (hashPos > -1) {
    let slicePos = hash2.includes(base.slice(hashPos)) ? base.slice(hashPos).length : 1;
    let pathFromHash = hash2.slice(slicePos);
    if (pathFromHash[0] !== "/")
      pathFromHash = "/" + pathFromHash;
    return stripBase(pathFromHash, "");
  }
  const path = stripBase(pathname, base);
  return path + search2 + hash2;
}
function useHistoryListeners(base, historyState, currentLocation, replace) {
  let listeners = [];
  let teardowns = [];
  let pauseState = null;
  const popStateHandler = ({ state }) => {
    const to2 = createCurrentLocation(base, location);
    const from = currentLocation.value;
    const fromState = historyState.value;
    let delta = 0;
    if (state) {
      currentLocation.value = to2;
      historyState.value = state;
      if (pauseState && pauseState === from) {
        pauseState = null;
        return;
      }
      delta = fromState ? state.position - fromState.position : 0;
    } else {
      replace(to2);
    }
    listeners.forEach((listener) => {
      listener(currentLocation.value, from, {
        delta,
        type: NavigationType.pop,
        direction: delta ? delta > 0 ? NavigationDirection.forward : NavigationDirection.back : NavigationDirection.unknown
      });
    });
  };
  function pauseListeners() {
    pauseState = currentLocation.value;
  }
  function listen(callback) {
    listeners.push(callback);
    const teardown = () => {
      const index = listeners.indexOf(callback);
      if (index > -1)
        listeners.splice(index, 1);
    };
    teardowns.push(teardown);
    return teardown;
  }
  function beforeUnloadListener() {
    const { history: history2 } = window;
    if (!history2.state)
      return;
    history2.replaceState(assign$3({}, history2.state, { scroll: computeScrollPosition() }), "");
  }
  function destroy() {
    for (const teardown of teardowns)
      teardown();
    teardowns = [];
    window.removeEventListener("popstate", popStateHandler);
    window.removeEventListener("beforeunload", beforeUnloadListener);
  }
  window.addEventListener("popstate", popStateHandler);
  window.addEventListener("beforeunload", beforeUnloadListener, {
    passive: true
  });
  return {
    pauseListeners,
    listen,
    destroy
  };
}
function buildState(back, current, forward, replaced = false, computeScroll = false) {
  return {
    back,
    current,
    forward,
    replaced,
    position: window.history.length,
    scroll: computeScroll ? computeScrollPosition() : null
  };
}
function useHistoryStateNavigation(base) {
  const { history: history2, location: location2 } = window;
  const currentLocation = {
    value: createCurrentLocation(base, location2)
  };
  const historyState = { value: history2.state };
  if (!historyState.value) {
    changeLocation(currentLocation.value, {
      back: null,
      current: currentLocation.value,
      forward: null,
      // the length is off by one, we need to decrease it
      position: history2.length - 1,
      replaced: true,
      // don't add a scroll as the user may have an anchor, and we want
      // scrollBehavior to be triggered without a saved position
      scroll: null
    }, true);
  }
  function changeLocation(to2, state, replace2) {
    const hashIndex = base.indexOf("#");
    const url = hashIndex > -1 ? (location2.host && document.querySelector("base") ? base : base.slice(hashIndex)) + to2 : createBaseLocation() + base + to2;
    try {
      history2[replace2 ? "replaceState" : "pushState"](state, "", url);
      historyState.value = state;
    } catch (err) {
      {
        warn$1("Error with push/replace State", err);
      }
      location2[replace2 ? "replace" : "assign"](url);
    }
  }
  function replace(to2, data) {
    const state = assign$3({}, history2.state, buildState(
      historyState.value.back,
      // keep back and forward entries but override current position
      to2,
      historyState.value.forward,
      true
    ), data, { position: historyState.value.position });
    changeLocation(to2, state, true);
    currentLocation.value = to2;
  }
  function push(to2, data) {
    const currentState = assign$3(
      {},
      // use current history state to gracefully handle a wrong call to
      // history.replaceState
      // https://github.com/vuejs/router/issues/366
      historyState.value,
      history2.state,
      {
        forward: to2,
        scroll: computeScrollPosition()
      }
    );
    if (!history2.state) {
      warn$1(`history.state seems to have been manually replaced without preserving the necessary values. Make sure to preserve existing history state if you are manually calling history.replaceState:

history.replaceState(history.state, '', url)

You can find more information at https://next.router.vuejs.org/guide/migration/#usage-of-history-state.`);
    }
    changeLocation(currentState.current, currentState, true);
    const state = assign$3({}, buildState(currentLocation.value, to2, null), { position: currentState.position + 1 }, data);
    changeLocation(to2, state, false);
    currentLocation.value = to2;
  }
  return {
    location: currentLocation,
    state: historyState,
    push,
    replace
  };
}
function createWebHistory(base) {
  base = normalizeBase(base);
  const historyNavigation = useHistoryStateNavigation(base);
  const historyListeners = useHistoryListeners(base, historyNavigation.state, historyNavigation.location, historyNavigation.replace);
  function go2(delta, triggerListeners = true) {
    if (!triggerListeners)
      historyListeners.pauseListeners();
    history.go(delta);
  }
  const routerHistory = assign$3({
    // it's overridden right after
    location: "",
    base,
    go: go2,
    createHref: createHref.bind(null, base)
  }, historyNavigation, historyListeners);
  Object.defineProperty(routerHistory, "location", {
    enumerable: true,
    get: () => historyNavigation.location.value
  });
  Object.defineProperty(routerHistory, "state", {
    enumerable: true,
    get: () => historyNavigation.state.value
  });
  return routerHistory;
}
function isRouteLocation(route) {
  return typeof route === "string" || route && typeof route === "object";
}
function isRouteName(name) {
  return typeof name === "string" || typeof name === "symbol";
}
const START_LOCATION_NORMALIZED = {
  path: "/",
  name: void 0,
  params: {},
  query: {},
  hash: "",
  fullPath: "/",
  matched: [],
  meta: {},
  redirectedFrom: void 0
};
const NavigationFailureSymbol = Symbol("navigation failure");
var NavigationFailureType;
(function(NavigationFailureType2) {
  NavigationFailureType2[NavigationFailureType2["aborted"] = 4] = "aborted";
  NavigationFailureType2[NavigationFailureType2["cancelled"] = 8] = "cancelled";
  NavigationFailureType2[NavigationFailureType2["duplicated"] = 16] = "duplicated";
})(NavigationFailureType || (NavigationFailureType = {}));
const ErrorTypeMessages = {
  [
    1
    /* ErrorTypes.MATCHER_NOT_FOUND */
  ]({ location: location2, currentLocation }) {
    return `No match for
 ${JSON.stringify(location2)}${currentLocation ? "\nwhile being at\n" + JSON.stringify(currentLocation) : ""}`;
  },
  [
    2
    /* ErrorTypes.NAVIGATION_GUARD_REDIRECT */
  ]({ from, to: to2 }) {
    return `Redirected from "${from.fullPath}" to "${stringifyRoute(to2)}" via a navigation guard.`;
  },
  [
    4
    /* ErrorTypes.NAVIGATION_ABORTED */
  ]({ from, to: to2 }) {
    return `Navigation aborted from "${from.fullPath}" to "${to2.fullPath}" via a navigation guard.`;
  },
  [
    8
    /* ErrorTypes.NAVIGATION_CANCELLED */
  ]({ from, to: to2 }) {
    return `Navigation cancelled from "${from.fullPath}" to "${to2.fullPath}" with a new navigation.`;
  },
  [
    16
    /* ErrorTypes.NAVIGATION_DUPLICATED */
  ]({ from, to: to2 }) {
    return `Avoided redundant navigation to current location: "${from.fullPath}".`;
  }
};
function createRouterError(type, params) {
  {
    return assign$3(new Error(ErrorTypeMessages[type](params)), {
      type,
      [NavigationFailureSymbol]: true
    }, params);
  }
}
function isNavigationFailure(error, type) {
  return error instanceof Error && NavigationFailureSymbol in error && (type == null || !!(error.type & type));
}
const propertiesToLog = ["params", "query", "hash"];
function stringifyRoute(to2) {
  if (typeof to2 === "string")
    return to2;
  if ("path" in to2)
    return to2.path;
  const location2 = {};
  for (const key of propertiesToLog) {
    if (key in to2)
      location2[key] = to2[key];
  }
  return JSON.stringify(location2, null, 2);
}
const BASE_PARAM_PATTERN = "[^/]+?";
const BASE_PATH_PARSER_OPTIONS = {
  sensitive: false,
  strict: false,
  start: true,
  end: true
};
const REGEX_CHARS_RE = /[.+*?^${}()[\]/\\]/g;
function tokensToParser(segments, extraOptions) {
  const options = assign$3({}, BASE_PATH_PARSER_OPTIONS, extraOptions);
  const score = [];
  let pattern = options.start ? "^" : "";
  const keys = [];
  for (const segment of segments) {
    const segmentScores = segment.length ? [] : [
      90
      /* PathScore.Root */
    ];
    if (options.strict && !segment.length)
      pattern += "/";
    for (let tokenIndex = 0; tokenIndex < segment.length; tokenIndex++) {
      const token = segment[tokenIndex];
      let subSegmentScore = 40 + (options.sensitive ? 0.25 : 0);
      if (token.type === 0) {
        if (!tokenIndex)
          pattern += "/";
        pattern += token.value.replace(REGEX_CHARS_RE, "\\$&");
        subSegmentScore += 40;
      } else if (token.type === 1) {
        const { value, repeatable, optional, regexp } = token;
        keys.push({
          name: value,
          repeatable,
          optional
        });
        const re22 = regexp ? regexp : BASE_PARAM_PATTERN;
        if (re22 !== BASE_PARAM_PATTERN) {
          subSegmentScore += 10;
          try {
            new RegExp(`(${re22})`);
          } catch (err) {
            throw new Error(`Invalid custom RegExp for param "${value}" (${re22}): ` + err.message);
          }
        }
        let subPattern = repeatable ? `((?:${re22})(?:/(?:${re22}))*)` : `(${re22})`;
        if (!tokenIndex)
          subPattern = // avoid an optional / if there are more segments e.g. /:p?-static
          // or /:p?-:p2
          optional && segment.length < 2 ? `(?:/${subPattern})` : "/" + subPattern;
        if (optional)
          subPattern += "?";
        pattern += subPattern;
        subSegmentScore += 20;
        if (optional)
          subSegmentScore += -8;
        if (repeatable)
          subSegmentScore += -20;
        if (re22 === ".*")
          subSegmentScore += -50;
      }
      segmentScores.push(subSegmentScore);
    }
    score.push(segmentScores);
  }
  if (options.strict && options.end) {
    const i3 = score.length - 1;
    score[i3][score[i3].length - 1] += 0.7000000000000001;
  }
  if (!options.strict)
    pattern += "/?";
  if (options.end)
    pattern += "$";
  else if (options.strict)
    pattern += "(?:/|$)";
  const re3 = new RegExp(pattern, options.sensitive ? "" : "i");
  function parse2(path) {
    const match2 = path.match(re3);
    const params = {};
    if (!match2)
      return null;
    for (let i3 = 1; i3 < match2.length; i3++) {
      const value = match2[i3] || "";
      const key = keys[i3 - 1];
      params[key.name] = value && key.repeatable ? value.split("/") : value;
    }
    return params;
  }
  function stringify(params) {
    let path = "";
    let avoidDuplicatedSlash = false;
    for (const segment of segments) {
      if (!avoidDuplicatedSlash || !path.endsWith("/"))
        path += "/";
      avoidDuplicatedSlash = false;
      for (const token of segment) {
        if (token.type === 0) {
          path += token.value;
        } else if (token.type === 1) {
          const { value, repeatable, optional } = token;
          const param = value in params ? params[value] : "";
          if (isArray$1(param) && !repeatable) {
            throw new Error(`Provided param "${value}" is an array but it is not repeatable (* or + modifiers)`);
          }
          const text = isArray$1(param) ? param.join("/") : param;
          if (!text) {
            if (optional) {
              if (segment.length < 2) {
                if (path.endsWith("/"))
                  path = path.slice(0, -1);
                else
                  avoidDuplicatedSlash = true;
              }
            } else
              throw new Error(`Missing required param "${value}"`);
          }
          path += text;
        }
      }
    }
    return path || "/";
  }
  return {
    re: re3,
    score,
    keys,
    parse: parse2,
    stringify
  };
}
function compareScoreArray(a4, b4) {
  let i3 = 0;
  while (i3 < a4.length && i3 < b4.length) {
    const diff = b4[i3] - a4[i3];
    if (diff)
      return diff;
    i3++;
  }
  if (a4.length < b4.length) {
    return a4.length === 1 && a4[0] === 40 + 40 ? -1 : 1;
  } else if (a4.length > b4.length) {
    return b4.length === 1 && b4[0] === 40 + 40 ? 1 : -1;
  }
  return 0;
}
function comparePathParserScore(a4, b4) {
  let i3 = 0;
  const aScore = a4.score;
  const bScore = b4.score;
  while (i3 < aScore.length && i3 < bScore.length) {
    const comp = compareScoreArray(aScore[i3], bScore[i3]);
    if (comp)
      return comp;
    i3++;
  }
  if (Math.abs(bScore.length - aScore.length) === 1) {
    if (isLastScoreNegative(aScore))
      return 1;
    if (isLastScoreNegative(bScore))
      return -1;
  }
  return bScore.length - aScore.length;
}
function isLastScoreNegative(score) {
  const last = score[score.length - 1];
  return score.length > 0 && last[last.length - 1] < 0;
}
const ROOT_TOKEN = {
  type: 0,
  value: ""
};
const VALID_PARAM_RE = /[a-zA-Z0-9_]/;
function tokenizePath(path) {
  if (!path)
    return [[]];
  if (path === "/")
    return [[ROOT_TOKEN]];
  if (!path.startsWith("/")) {
    throw new Error(`Route paths should start with a "/": "${path}" should be "/${path}".`);
  }
  function crash(message) {
    throw new Error(`ERR (${state})/"${buffer2}": ${message}`);
  }
  let state = 0;
  let previousState = state;
  const tokens = [];
  let segment;
  function finalizeSegment() {
    if (segment)
      tokens.push(segment);
    segment = [];
  }
  let i3 = 0;
  let char;
  let buffer2 = "";
  let customRe = "";
  function consumeBuffer() {
    if (!buffer2)
      return;
    if (state === 0) {
      segment.push({
        type: 0,
        value: buffer2
      });
    } else if (state === 1 || state === 2 || state === 3) {
      if (segment.length > 1 && (char === "*" || char === "+"))
        crash(`A repeatable param (${buffer2}) must be alone in its segment. eg: '/:ids+.`);
      segment.push({
        type: 1,
        value: buffer2,
        regexp: customRe,
        repeatable: char === "*" || char === "+",
        optional: char === "*" || char === "?"
      });
    } else {
      crash("Invalid state to consume buffer");
    }
    buffer2 = "";
  }
  function addCharToBuffer() {
    buffer2 += char;
  }
  while (i3 < path.length) {
    char = path[i3++];
    if (char === "\\" && state !== 2) {
      previousState = state;
      state = 4;
      continue;
    }
    switch (state) {
      case 0:
        if (char === "/") {
          if (buffer2) {
            consumeBuffer();
          }
          finalizeSegment();
        } else if (char === ":") {
          consumeBuffer();
          state = 1;
        } else {
          addCharToBuffer();
        }
        break;
      case 4:
        addCharToBuffer();
        state = previousState;
        break;
      case 1:
        if (char === "(") {
          state = 2;
        } else if (VALID_PARAM_RE.test(char)) {
          addCharToBuffer();
        } else {
          consumeBuffer();
          state = 0;
          if (char !== "*" && char !== "?" && char !== "+")
            i3--;
        }
        break;
      case 2:
        if (char === ")") {
          if (customRe[customRe.length - 1] == "\\")
            customRe = customRe.slice(0, -1) + char;
          else
            state = 3;
        } else {
          customRe += char;
        }
        break;
      case 3:
        consumeBuffer();
        state = 0;
        if (char !== "*" && char !== "?" && char !== "+")
          i3--;
        customRe = "";
        break;
      default:
        crash("Unknown state");
        break;
    }
  }
  if (state === 2)
    crash(`Unfinished custom RegExp for param "${buffer2}"`);
  consumeBuffer();
  finalizeSegment();
  return tokens;
}
function createRouteRecordMatcher(record, parent, options) {
  const parser = tokensToParser(tokenizePath(record.path), options);
  {
    const existingKeys = /* @__PURE__ */ new Set();
    for (const key of parser.keys) {
      if (existingKeys.has(key.name))
        warn$1(`Found duplicated params with name "${key.name}" for path "${record.path}". Only the last one will be available on "$route.params".`);
      existingKeys.add(key.name);
    }
  }
  const matcher = assign$3(parser, {
    record,
    parent,
    // these needs to be populated by the parent
    children: [],
    alias: []
  });
  if (parent) {
    if (!matcher.record.aliasOf === !parent.record.aliasOf)
      parent.children.push(matcher);
  }
  return matcher;
}
function createRouterMatcher(routes2, globalOptions) {
  const matchers = [];
  const matcherMap = /* @__PURE__ */ new Map();
  globalOptions = mergeOptions({ strict: false, end: true, sensitive: false }, globalOptions);
  function getRecordMatcher(name) {
    return matcherMap.get(name);
  }
  function addRoute(record, parent, originalRecord) {
    const isRootAdd = !originalRecord;
    const mainNormalizedRecord = normalizeRouteRecord(record);
    {
      checkChildMissingNameWithEmptyPath(mainNormalizedRecord, parent);
    }
    mainNormalizedRecord.aliasOf = originalRecord && originalRecord.record;
    const options = mergeOptions(globalOptions, record);
    const normalizedRecords = [
      mainNormalizedRecord
    ];
    if ("alias" in record) {
      const aliases = typeof record.alias === "string" ? [record.alias] : record.alias;
      for (const alias of aliases) {
        normalizedRecords.push(assign$3({}, mainNormalizedRecord, {
          // this allows us to hold a copy of the `components` option
          // so that async components cache is hold on the original record
          components: originalRecord ? originalRecord.record.components : mainNormalizedRecord.components,
          path: alias,
          // we might be the child of an alias
          aliasOf: originalRecord ? originalRecord.record : mainNormalizedRecord
          // the aliases are always of the same kind as the original since they
          // are defined on the same record
        }));
      }
    }
    let matcher;
    let originalMatcher;
    for (const normalizedRecord of normalizedRecords) {
      const { path } = normalizedRecord;
      if (parent && path[0] !== "/") {
        const parentPath = parent.record.path;
        const connectingSlash = parentPath[parentPath.length - 1] === "/" ? "" : "/";
        normalizedRecord.path = parent.record.path + (path && connectingSlash + path);
      }
      if (normalizedRecord.path === "*") {
        throw new Error('Catch all routes ("*") must now be defined using a param with a custom regexp.\nSee more at https://next.router.vuejs.org/guide/migration/#removed-star-or-catch-all-routes.');
      }
      matcher = createRouteRecordMatcher(normalizedRecord, parent, options);
      if (parent && path[0] === "/")
        checkMissingParamsInAbsolutePath(matcher, parent);
      if (originalRecord) {
        originalRecord.alias.push(matcher);
        {
          checkSameParams(originalRecord, matcher);
        }
      } else {
        originalMatcher = originalMatcher || matcher;
        if (originalMatcher !== matcher)
          originalMatcher.alias.push(matcher);
        if (isRootAdd && record.name && !isAliasRecord(matcher))
          removeRoute(record.name);
      }
      if (mainNormalizedRecord.children) {
        const children = mainNormalizedRecord.children;
        for (let i3 = 0; i3 < children.length; i3++) {
          addRoute(children[i3], matcher, originalRecord && originalRecord.children[i3]);
        }
      }
      originalRecord = originalRecord || matcher;
      if (matcher.record.components && Object.keys(matcher.record.components).length || matcher.record.name || matcher.record.redirect) {
        insertMatcher(matcher);
      }
    }
    return originalMatcher ? () => {
      removeRoute(originalMatcher);
    } : noop$1;
  }
  function removeRoute(matcherRef) {
    if (isRouteName(matcherRef)) {
      const matcher = matcherMap.get(matcherRef);
      if (matcher) {
        matcherMap.delete(matcherRef);
        matchers.splice(matchers.indexOf(matcher), 1);
        matcher.children.forEach(removeRoute);
        matcher.alias.forEach(removeRoute);
      }
    } else {
      const index = matchers.indexOf(matcherRef);
      if (index > -1) {
        matchers.splice(index, 1);
        if (matcherRef.record.name)
          matcherMap.delete(matcherRef.record.name);
        matcherRef.children.forEach(removeRoute);
        matcherRef.alias.forEach(removeRoute);
      }
    }
  }
  function getRoutes() {
    return matchers;
  }
  function insertMatcher(matcher) {
    let i3 = 0;
    while (i3 < matchers.length && comparePathParserScore(matcher, matchers[i3]) >= 0 && // Adding children with empty path should still appear before the parent
    // https://github.com/vuejs/router/issues/1124
    (matcher.record.path !== matchers[i3].record.path || !isRecordChildOf(matcher, matchers[i3])))
      i3++;
    matchers.splice(i3, 0, matcher);
    if (matcher.record.name && !isAliasRecord(matcher))
      matcherMap.set(matcher.record.name, matcher);
  }
  function resolve2(location2, currentLocation) {
    let matcher;
    let params = {};
    let path;
    let name;
    if ("name" in location2 && location2.name) {
      matcher = matcherMap.get(location2.name);
      if (!matcher)
        throw createRouterError(1, {
          location: location2
        });
      {
        const invalidParams = Object.keys(location2.params || {}).filter((paramName) => !matcher.keys.find((k3) => k3.name === paramName));
        if (invalidParams.length) {
          warn$1(`Discarded invalid param(s) "${invalidParams.join('", "')}" when navigating. See https://github.com/vuejs/router/blob/main/packages/router/CHANGELOG.md#414-2022-08-22 for more details.`);
        }
      }
      name = matcher.record.name;
      params = assign$3(
        // paramsFromLocation is a new object
        paramsFromLocation(
          currentLocation.params,
          // only keep params that exist in the resolved location
          // TODO: only keep optional params coming from a parent record
          matcher.keys.filter((k3) => !k3.optional).map((k3) => k3.name)
        ),
        // discard any existing params in the current location that do not exist here
        // #1497 this ensures better active/exact matching
        location2.params && paramsFromLocation(location2.params, matcher.keys.map((k3) => k3.name))
      );
      path = matcher.stringify(params);
    } else if ("path" in location2) {
      path = location2.path;
      if (!path.startsWith("/")) {
        warn$1(`The Matcher cannot resolve relative paths but received "${path}". Unless you directly called \`matcher.resolve("${path}")\`, this is probably a bug in vue-router. Please open an issue at https://github.com/vuejs/router/issues/new/choose.`);
      }
      matcher = matchers.find((m4) => m4.re.test(path));
      if (matcher) {
        params = matcher.parse(path);
        name = matcher.record.name;
      }
    } else {
      matcher = currentLocation.name ? matcherMap.get(currentLocation.name) : matchers.find((m4) => m4.re.test(currentLocation.path));
      if (!matcher)
        throw createRouterError(1, {
          location: location2,
          currentLocation
        });
      name = matcher.record.name;
      params = assign$3({}, currentLocation.params, location2.params);
      path = matcher.stringify(params);
    }
    const matched = [];
    let parentMatcher = matcher;
    while (parentMatcher) {
      matched.unshift(parentMatcher.record);
      parentMatcher = parentMatcher.parent;
    }
    return {
      name,
      path,
      params,
      matched,
      meta: mergeMetaFields(matched)
    };
  }
  routes2.forEach((route) => addRoute(route));
  return { addRoute, resolve: resolve2, removeRoute, getRoutes, getRecordMatcher };
}
function paramsFromLocation(params, keys) {
  const newParams = {};
  for (const key of keys) {
    if (key in params)
      newParams[key] = params[key];
  }
  return newParams;
}
function normalizeRouteRecord(record) {
  return {
    path: record.path,
    redirect: record.redirect,
    name: record.name,
    meta: record.meta || {},
    aliasOf: void 0,
    beforeEnter: record.beforeEnter,
    props: normalizeRecordProps(record),
    children: record.children || [],
    instances: {},
    leaveGuards: /* @__PURE__ */ new Set(),
    updateGuards: /* @__PURE__ */ new Set(),
    enterCallbacks: {},
    components: "components" in record ? record.components || null : record.component && { default: record.component }
  };
}
function normalizeRecordProps(record) {
  const propsObject = {};
  const props = record.props || false;
  if ("component" in record) {
    propsObject.default = props;
  } else {
    for (const name in record.components)
      propsObject[name] = typeof props === "object" ? props[name] : props;
  }
  return propsObject;
}
function isAliasRecord(record) {
  while (record) {
    if (record.record.aliasOf)
      return true;
    record = record.parent;
  }
  return false;
}
function mergeMetaFields(matched) {
  return matched.reduce((meta, record) => assign$3(meta, record.meta), {});
}
function mergeOptions(defaults2, partialOptions) {
  const options = {};
  for (const key in defaults2) {
    options[key] = key in partialOptions ? partialOptions[key] : defaults2[key];
  }
  return options;
}
function isSameParam(a4, b4) {
  return a4.name === b4.name && a4.optional === b4.optional && a4.repeatable === b4.repeatable;
}
function checkSameParams(a4, b4) {
  for (const key of a4.keys) {
    if (!key.optional && !b4.keys.find(isSameParam.bind(null, key)))
      return warn$1(`Alias "${b4.record.path}" and the original record: "${a4.record.path}" must have the exact same param named "${key.name}"`);
  }
  for (const key of b4.keys) {
    if (!key.optional && !a4.keys.find(isSameParam.bind(null, key)))
      return warn$1(`Alias "${b4.record.path}" and the original record: "${a4.record.path}" must have the exact same param named "${key.name}"`);
  }
}
function checkChildMissingNameWithEmptyPath(mainNormalizedRecord, parent) {
  if (parent && parent.record.name && !mainNormalizedRecord.name && !mainNormalizedRecord.path) {
    warn$1(`The route named "${String(parent.record.name)}" has a child without a name and an empty path. Using that name won't render the empty path child so you probably want to move the name to the child instead. If this is intentional, add a name to the child route to remove the warning.`);
  }
}
function checkMissingParamsInAbsolutePath(record, parent) {
  for (const key of parent.keys) {
    if (!record.keys.find(isSameParam.bind(null, key)))
      return warn$1(`Absolute path "${record.record.path}" must have the exact same param named "${key.name}" as its parent "${parent.record.path}".`);
  }
}
function isRecordChildOf(record, parent) {
  return parent.children.some((child) => child === record || isRecordChildOf(record, child));
}
const HASH_RE = /#/g;
const AMPERSAND_RE = /&/g;
const SLASH_RE = /\//g;
const EQUAL_RE = /=/g;
const IM_RE = /\?/g;
const PLUS_RE = /\+/g;
const ENC_BRACKET_OPEN_RE = /%5B/g;
const ENC_BRACKET_CLOSE_RE = /%5D/g;
const ENC_CARET_RE = /%5E/g;
const ENC_BACKTICK_RE = /%60/g;
const ENC_CURLY_OPEN_RE = /%7B/g;
const ENC_PIPE_RE = /%7C/g;
const ENC_CURLY_CLOSE_RE = /%7D/g;
const ENC_SPACE_RE = /%20/g;
function commonEncode(text) {
  return encodeURI("" + text).replace(ENC_PIPE_RE, "|").replace(ENC_BRACKET_OPEN_RE, "[").replace(ENC_BRACKET_CLOSE_RE, "]");
}
function encodeHash(text) {
  return commonEncode(text).replace(ENC_CURLY_OPEN_RE, "{").replace(ENC_CURLY_CLOSE_RE, "}").replace(ENC_CARET_RE, "^");
}
function encodeQueryValue(text) {
  return commonEncode(text).replace(PLUS_RE, "%2B").replace(ENC_SPACE_RE, "+").replace(HASH_RE, "%23").replace(AMPERSAND_RE, "%26").replace(ENC_BACKTICK_RE, "`").replace(ENC_CURLY_OPEN_RE, "{").replace(ENC_CURLY_CLOSE_RE, "}").replace(ENC_CARET_RE, "^");
}
function encodeQueryKey(text) {
  return encodeQueryValue(text).replace(EQUAL_RE, "%3D");
}
function encodePath(text) {
  return commonEncode(text).replace(HASH_RE, "%23").replace(IM_RE, "%3F");
}
function encodeParam(text) {
  return text == null ? "" : encodePath(text).replace(SLASH_RE, "%2F");
}
function decode(text) {
  try {
    return decodeURIComponent("" + text);
  } catch (err) {
    warn$1(`Error decoding "${text}". Using original value`);
  }
  return "" + text;
}
function parseQuery(search2) {
  const query = {};
  if (search2 === "" || search2 === "?")
    return query;
  const hasLeadingIM = search2[0] === "?";
  const searchParams = (hasLeadingIM ? search2.slice(1) : search2).split("&");
  for (let i3 = 0; i3 < searchParams.length; ++i3) {
    const searchParam = searchParams[i3].replace(PLUS_RE, " ");
    const eqPos = searchParam.indexOf("=");
    const key = decode(eqPos < 0 ? searchParam : searchParam.slice(0, eqPos));
    const value = eqPos < 0 ? null : decode(searchParam.slice(eqPos + 1));
    if (key in query) {
      let currentValue = query[key];
      if (!isArray$1(currentValue)) {
        currentValue = query[key] = [currentValue];
      }
      currentValue.push(value);
    } else {
      query[key] = value;
    }
  }
  return query;
}
function stringifyQuery(query) {
  let search2 = "";
  for (let key in query) {
    const value = query[key];
    key = encodeQueryKey(key);
    if (value == null) {
      if (value !== void 0) {
        search2 += (search2.length ? "&" : "") + key;
      }
      continue;
    }
    const values = isArray$1(value) ? value.map((v2) => v2 && encodeQueryValue(v2)) : [value && encodeQueryValue(value)];
    values.forEach((value2) => {
      if (value2 !== void 0) {
        search2 += (search2.length ? "&" : "") + key;
        if (value2 != null)
          search2 += "=" + value2;
      }
    });
  }
  return search2;
}
function normalizeQuery(query) {
  const normalizedQuery = {};
  for (const key in query) {
    const value = query[key];
    if (value !== void 0) {
      normalizedQuery[key] = isArray$1(value) ? value.map((v2) => v2 == null ? null : "" + v2) : value == null ? value : "" + value;
    }
  }
  return normalizedQuery;
}
const matchedRouteKey = Symbol("router view location matched");
const viewDepthKey = Symbol("router view depth");
const routerKey = Symbol("router");
const routeLocationKey = Symbol("route location");
const routerViewLocationKey = Symbol("router view location");
function useCallbacks() {
  let handlers2 = [];
  function add2(handler) {
    handlers2.push(handler);
    return () => {
      const i3 = handlers2.indexOf(handler);
      if (i3 > -1)
        handlers2.splice(i3, 1);
    };
  }
  function reset() {
    handlers2 = [];
  }
  return {
    add: add2,
    list: () => handlers2.slice(),
    reset
  };
}
function guardToPromiseFn(guard, to2, from, record, name) {
  const enterCallbackArray = record && // name is defined if record is because of the function overload
  (record.enterCallbacks[name] = record.enterCallbacks[name] || []);
  return () => new Promise((resolve2, reject) => {
    const next = (valid) => {
      if (valid === false) {
        reject(createRouterError(4, {
          from,
          to: to2
        }));
      } else if (valid instanceof Error) {
        reject(valid);
      } else if (isRouteLocation(valid)) {
        reject(createRouterError(2, {
          from: to2,
          to: valid
        }));
      } else {
        if (enterCallbackArray && // since enterCallbackArray is truthy, both record and name also are
        record.enterCallbacks[name] === enterCallbackArray && typeof valid === "function") {
          enterCallbackArray.push(valid);
        }
        resolve2();
      }
    };
    const guardReturn = guard.call(record && record.instances[name], to2, from, canOnlyBeCalledOnce(next, to2, from));
    let guardCall = Promise.resolve(guardReturn);
    if (guard.length < 3)
      guardCall = guardCall.then(next);
    if (guard.length > 2) {
      const message = `The "next" callback was never called inside of ${guard.name ? '"' + guard.name + '"' : ""}:
${guard.toString()}
. If you are returning a value instead of calling "next", make sure to remove the "next" parameter from your function.`;
      if (typeof guardReturn === "object" && "then" in guardReturn) {
        guardCall = guardCall.then((resolvedValue) => {
          if (!next._called) {
            warn$1(message);
            return Promise.reject(new Error("Invalid navigation guard"));
          }
          return resolvedValue;
        });
      } else if (guardReturn !== void 0) {
        if (!next._called) {
          warn$1(message);
          reject(new Error("Invalid navigation guard"));
          return;
        }
      }
    }
    guardCall.catch((err) => reject(err));
  });
}
function canOnlyBeCalledOnce(next, to2, from) {
  let called = 0;
  return function() {
    if (called++ === 1)
      warn$1(`The "next" callback was called more than once in one navigation guard when going from "${from.fullPath}" to "${to2.fullPath}". It should be called exactly one time in each navigation guard. This will fail in production.`);
    next._called = true;
    if (called === 1)
      next.apply(null, arguments);
  };
}
function extractComponentsGuards(matched, guardType, to2, from) {
  const guards = [];
  for (const record of matched) {
    if (!record.components && !record.children.length) {
      warn$1(`Record with path "${record.path}" is either missing a "component(s)" or "children" property.`);
    }
    for (const name in record.components) {
      let rawComponent = record.components[name];
      {
        if (!rawComponent || typeof rawComponent !== "object" && typeof rawComponent !== "function") {
          warn$1(`Component "${name}" in record with path "${record.path}" is not a valid component. Received "${String(rawComponent)}".`);
          throw new Error("Invalid route component");
        } else if ("then" in rawComponent) {
          warn$1(`Component "${name}" in record with path "${record.path}" is a Promise instead of a function that returns a Promise. Did you write "import('./MyPage.vue')" instead of "() => import('./MyPage.vue')" ? This will break in production if not fixed.`);
          const promise = rawComponent;
          rawComponent = () => promise;
        } else if (rawComponent.__asyncLoader && // warn only once per component
        !rawComponent.__warnedDefineAsync) {
          rawComponent.__warnedDefineAsync = true;
          warn$1(`Component "${name}" in record with path "${record.path}" is defined using "defineAsyncComponent()". Write "() => import('./MyPage.vue')" instead of "defineAsyncComponent(() => import('./MyPage.vue'))".`);
        }
      }
      if (guardType !== "beforeRouteEnter" && !record.instances[name])
        continue;
      if (isRouteComponent(rawComponent)) {
        const options = rawComponent.__vccOpts || rawComponent;
        const guard = options[guardType];
        guard && guards.push(guardToPromiseFn(guard, to2, from, record, name));
      } else {
        let componentPromise = rawComponent();
        if (!("catch" in componentPromise)) {
          warn$1(`Component "${name}" in record with path "${record.path}" is a function that does not return a Promise. If you were passing a functional component, make sure to add a "displayName" to the component. This will break in production if not fixed.`);
          componentPromise = Promise.resolve(componentPromise);
        }
        guards.push(() => componentPromise.then((resolved) => {
          if (!resolved)
            return Promise.reject(new Error(`Couldn't resolve component "${name}" at "${record.path}"`));
          const resolvedComponent = isESModule(resolved) ? resolved.default : resolved;
          record.components[name] = resolvedComponent;
          const options = resolvedComponent.__vccOpts || resolvedComponent;
          const guard = options[guardType];
          return guard && guardToPromiseFn(guard, to2, from, record, name)();
        }));
      }
    }
  }
  return guards;
}
function isRouteComponent(component) {
  return typeof component === "object" || "displayName" in component || "props" in component || "__vccOpts" in component;
}
function useLink(props) {
  const router2 = inject(routerKey);
  const currentRoute = inject(routeLocationKey);
  const route = computed(() => router2.resolve(unref(props.to)));
  const activeRecordIndex = computed(() => {
    const { matched } = route.value;
    const { length } = matched;
    const routeMatched = matched[length - 1];
    const currentMatched = currentRoute.matched;
    if (!routeMatched || !currentMatched.length)
      return -1;
    const index = currentMatched.findIndex(isSameRouteRecord.bind(null, routeMatched));
    if (index > -1)
      return index;
    const parentRecordPath = getOriginalPath(matched[length - 2]);
    return (
      // we are dealing with nested routes
      length > 1 && // if the parent and matched route have the same path, this link is
      // referring to the empty child. Or we currently are on a different
      // child of the same parent
      getOriginalPath(routeMatched) === parentRecordPath && // avoid comparing the child with its parent
      currentMatched[currentMatched.length - 1].path !== parentRecordPath ? currentMatched.findIndex(isSameRouteRecord.bind(null, matched[length - 2])) : index
    );
  });
  const isActive = computed(() => activeRecordIndex.value > -1 && includesParams(currentRoute.params, route.value.params));
  const isExactActive = computed(() => activeRecordIndex.value > -1 && activeRecordIndex.value === currentRoute.matched.length - 1 && isSameRouteLocationParams(currentRoute.params, route.value.params));
  function navigate(e3 = {}) {
    if (guardEvent(e3)) {
      return router2[unref(props.replace) ? "replace" : "push"](
        unref(props.to)
        // avoid uncaught errors are they are logged anyway
      ).catch(noop$1);
    }
    return Promise.resolve();
  }
  if (isBrowser) {
    const instance = getCurrentInstance();
    if (instance) {
      const linkContextDevtools = {
        route: route.value,
        isActive: isActive.value,
        isExactActive: isExactActive.value
      };
      instance.__vrl_devtools = instance.__vrl_devtools || [];
      instance.__vrl_devtools.push(linkContextDevtools);
      watchEffect(() => {
        linkContextDevtools.route = route.value;
        linkContextDevtools.isActive = isActive.value;
        linkContextDevtools.isExactActive = isExactActive.value;
      }, { flush: "post" });
    }
  }
  return {
    route,
    href: computed(() => route.value.href),
    isActive,
    isExactActive,
    navigate
  };
}
const RouterLinkImpl = /* @__PURE__ */ defineComponent({
  name: "RouterLink",
  compatConfig: { MODE: 3 },
  props: {
    to: {
      type: [String, Object],
      required: true
    },
    replace: Boolean,
    activeClass: String,
    // inactiveClass: String,
    exactActiveClass: String,
    custom: Boolean,
    ariaCurrentValue: {
      type: String,
      default: "page"
    }
  },
  useLink,
  setup(props, { slots }) {
    const link = reactive(useLink(props));
    const { options } = inject(routerKey);
    const elClass = computed(() => ({
      [getLinkClass(props.activeClass, options.linkActiveClass, "router-link-active")]: link.isActive,
      // [getLinkClass(
      //   props.inactiveClass,
      //   options.linkInactiveClass,
      //   'router-link-inactive'
      // )]: !link.isExactActive,
      [getLinkClass(props.exactActiveClass, options.linkExactActiveClass, "router-link-exact-active")]: link.isExactActive
    }));
    return () => {
      const children = slots.default && slots.default(link);
      return props.custom ? children : h$3("a", {
        "aria-current": link.isExactActive ? props.ariaCurrentValue : null,
        href: link.href,
        // this would override user added attrs but Vue will still add
        // the listener, so we end up triggering both
        onClick: link.navigate,
        class: elClass.value
      }, children);
    };
  }
});
const RouterLink = RouterLinkImpl;
function guardEvent(e3) {
  if (e3.metaKey || e3.altKey || e3.ctrlKey || e3.shiftKey)
    return;
  if (e3.defaultPrevented)
    return;
  if (e3.button !== void 0 && e3.button !== 0)
    return;
  if (e3.currentTarget && e3.currentTarget.getAttribute) {
    const target = e3.currentTarget.getAttribute("target");
    if (/\b_blank\b/i.test(target))
      return;
  }
  if (e3.preventDefault)
    e3.preventDefault();
  return true;
}
function includesParams(outer, inner) {
  for (const key in inner) {
    const innerValue = inner[key];
    const outerValue = outer[key];
    if (typeof innerValue === "string") {
      if (innerValue !== outerValue)
        return false;
    } else {
      if (!isArray$1(outerValue) || outerValue.length !== innerValue.length || innerValue.some((value, i3) => value !== outerValue[i3]))
        return false;
    }
  }
  return true;
}
function getOriginalPath(record) {
  return record ? record.aliasOf ? record.aliasOf.path : record.path : "";
}
const getLinkClass = (propClass, globalClass, defaultClass) => propClass != null ? propClass : globalClass != null ? globalClass : defaultClass;
const RouterViewImpl = /* @__PURE__ */ defineComponent({
  name: "RouterView",
  // #674 we manually inherit them
  inheritAttrs: false,
  props: {
    name: {
      type: String,
      default: "default"
    },
    route: Object
  },
  // Better compat for @vue/compat users
  // https://github.com/vuejs/router/issues/1315
  compatConfig: { MODE: 3 },
  setup(props, { attrs, slots }) {
    warnDeprecatedUsage();
    const injectedRoute = inject(routerViewLocationKey);
    const routeToDisplay = computed(() => props.route || injectedRoute.value);
    const injectedDepth = inject(viewDepthKey, 0);
    const depth = computed(() => {
      let initialDepth = unref(injectedDepth);
      const { matched } = routeToDisplay.value;
      let matchedRoute;
      while ((matchedRoute = matched[initialDepth]) && !matchedRoute.components) {
        initialDepth++;
      }
      return initialDepth;
    });
    const matchedRouteRef = computed(() => routeToDisplay.value.matched[depth.value]);
    provide(viewDepthKey, computed(() => depth.value + 1));
    provide(matchedRouteKey, matchedRouteRef);
    provide(routerViewLocationKey, routeToDisplay);
    const viewRef = ref();
    watch(() => [viewRef.value, matchedRouteRef.value, props.name], ([instance, to2, name], [oldInstance, from, oldName]) => {
      if (to2) {
        to2.instances[name] = instance;
        if (from && from !== to2 && instance && instance === oldInstance) {
          if (!to2.leaveGuards.size) {
            to2.leaveGuards = from.leaveGuards;
          }
          if (!to2.updateGuards.size) {
            to2.updateGuards = from.updateGuards;
          }
        }
      }
      if (instance && to2 && // if there is no instance but to and from are the same this might be
      // the first visit
      (!from || !isSameRouteRecord(to2, from) || !oldInstance)) {
        (to2.enterCallbacks[name] || []).forEach((callback) => callback(instance));
      }
    }, { flush: "post" });
    return () => {
      const route = routeToDisplay.value;
      const currentName = props.name;
      const matchedRoute = matchedRouteRef.value;
      const ViewComponent = matchedRoute && matchedRoute.components[currentName];
      if (!ViewComponent) {
        return normalizeSlot(slots.default, { Component: ViewComponent, route });
      }
      const routePropsOption = matchedRoute.props[currentName];
      const routeProps = routePropsOption ? routePropsOption === true ? route.params : typeof routePropsOption === "function" ? routePropsOption(route) : routePropsOption : null;
      const onVnodeUnmounted = (vnode) => {
        if (vnode.component.isUnmounted) {
          matchedRoute.instances[currentName] = null;
        }
      };
      const component = h$3(ViewComponent, assign$3({}, routeProps, attrs, {
        onVnodeUnmounted,
        ref: viewRef
      }));
      if (isBrowser && component.ref) {
        const info = {
          depth: depth.value,
          name: matchedRoute.name,
          path: matchedRoute.path,
          meta: matchedRoute.meta
        };
        const internalInstances = isArray$1(component.ref) ? component.ref.map((r2) => r2.i) : [component.ref.i];
        internalInstances.forEach((instance) => {
          instance.__vrv_devtools = info;
        });
      }
      return (
        // pass the vnode to the slot as a prop.
        // h and <component :is="..."> both accept vnodes
        normalizeSlot(slots.default, { Component: component, route }) || component
      );
    };
  }
});
function normalizeSlot(slot, data) {
  if (!slot)
    return null;
  const slotContent = slot(data);
  return slotContent.length === 1 ? slotContent[0] : slotContent;
}
const RouterView = RouterViewImpl;
function warnDeprecatedUsage() {
  const instance = getCurrentInstance();
  const parentName = instance.parent && instance.parent.type.name;
  const parentSubTreeType = instance.parent && instance.parent.subTree && instance.parent.subTree.type;
  if (parentName && (parentName === "KeepAlive" || parentName.includes("Transition")) && typeof parentSubTreeType === "object" && parentSubTreeType.name === "RouterView") {
    const comp = parentName === "KeepAlive" ? "keep-alive" : "transition";
    warn$1(`<router-view> can no longer be used directly inside <transition> or <keep-alive>.
Use slot props instead:

<router-view v-slot="{ Component }">
  <${comp}>
    <component :is="Component" />
  </${comp}>
</router-view>`);
  }
}
function formatRouteLocation(routeLocation, tooltip) {
  const copy = assign$3({}, routeLocation, {
    // remove variables that can contain vue instances
    matched: routeLocation.matched.map((matched) => omit(matched, ["instances", "children", "aliasOf"]))
  });
  return {
    _custom: {
      type: null,
      readOnly: true,
      display: routeLocation.fullPath,
      tooltip,
      value: copy
    }
  };
}
function formatDisplay$1(display) {
  return {
    _custom: {
      display
    }
  };
}
let routerId = 0;
function addDevtools(app, router2, matcher) {
  if (router2.__hasDevtools)
    return;
  router2.__hasDevtools = true;
  const id2 = routerId++;
  setupDevtoolsPlugin({
    id: "org.vuejs.router" + (id2 ? "." + id2 : ""),
    label: "Vue Router",
    packageName: "vue-router",
    homepage: "https://router.vuejs.org",
    logo: "https://router.vuejs.org/logo.png",
    componentStateTypes: ["Routing"],
    app
  }, (api) => {
    if (typeof api.now !== "function") {
      console.warn("[Vue Router]: You seem to be using an outdated version of Vue Devtools. Are you still using the Beta release instead of the stable one? You can find the links at https://devtools.vuejs.org/guide/installation.html.");
    }
    api.on.inspectComponent((payload, ctx) => {
      if (payload.instanceData) {
        payload.instanceData.state.push({
          type: "Routing",
          key: "$route",
          editable: false,
          value: formatRouteLocation(router2.currentRoute.value, "Current Route")
        });
      }
    });
    api.on.visitComponentTree(({ treeNode: node, componentInstance }) => {
      if (componentInstance.__vrv_devtools) {
        const info = componentInstance.__vrv_devtools;
        node.tags.push({
          label: (info.name ? `${info.name.toString()}: ` : "") + info.path,
          textColor: 0,
          tooltip: "This component is rendered by &lt;router-view&gt;",
          backgroundColor: PINK_500
        });
      }
      if (isArray$1(componentInstance.__vrl_devtools)) {
        componentInstance.__devtoolsApi = api;
        componentInstance.__vrl_devtools.forEach((devtoolsData) => {
          let backgroundColor = ORANGE_400;
          let tooltip = "";
          if (devtoolsData.isExactActive) {
            backgroundColor = LIME_500;
            tooltip = "This is exactly active";
          } else if (devtoolsData.isActive) {
            backgroundColor = BLUE_600;
            tooltip = "This link is active";
          }
          node.tags.push({
            label: devtoolsData.route.path,
            textColor: 0,
            tooltip,
            backgroundColor
          });
        });
      }
    });
    watch(router2.currentRoute, () => {
      refreshRoutesView();
      api.notifyComponentUpdate();
      api.sendInspectorTree(routerInspectorId);
      api.sendInspectorState(routerInspectorId);
    });
    const navigationsLayerId = "router:navigations:" + id2;
    api.addTimelineLayer({
      id: navigationsLayerId,
      label: `Router${id2 ? " " + id2 : ""} Navigations`,
      color: 4237508
    });
    router2.onError((error, to2) => {
      api.addTimelineEvent({
        layerId: navigationsLayerId,
        event: {
          title: "Error during Navigation",
          subtitle: to2.fullPath,
          logType: "error",
          time: api.now(),
          data: { error },
          groupId: to2.meta.__navigationId
        }
      });
    });
    let navigationId = 0;
    router2.beforeEach((to2, from) => {
      const data = {
        guard: formatDisplay$1("beforeEach"),
        from: formatRouteLocation(from, "Current Location during this navigation"),
        to: formatRouteLocation(to2, "Target location")
      };
      Object.defineProperty(to2.meta, "__navigationId", {
        value: navigationId++
      });
      api.addTimelineEvent({
        layerId: navigationsLayerId,
        event: {
          time: api.now(),
          title: "Start of navigation",
          subtitle: to2.fullPath,
          data,
          groupId: to2.meta.__navigationId
        }
      });
    });
    router2.afterEach((to2, from, failure) => {
      const data = {
        guard: formatDisplay$1("afterEach")
      };
      if (failure) {
        data.failure = {
          _custom: {
            type: Error,
            readOnly: true,
            display: failure ? failure.message : "",
            tooltip: "Navigation Failure",
            value: failure
          }
        };
        data.status = formatDisplay$1("❌");
      } else {
        data.status = formatDisplay$1("✅");
      }
      data.from = formatRouteLocation(from, "Current Location during this navigation");
      data.to = formatRouteLocation(to2, "Target location");
      api.addTimelineEvent({
        layerId: navigationsLayerId,
        event: {
          title: "End of navigation",
          subtitle: to2.fullPath,
          time: api.now(),
          data,
          logType: failure ? "warning" : "default",
          groupId: to2.meta.__navigationId
        }
      });
    });
    const routerInspectorId = "router-inspector:" + id2;
    api.addInspector({
      id: routerInspectorId,
      label: "Routes" + (id2 ? " " + id2 : ""),
      icon: "book",
      treeFilterPlaceholder: "Search routes"
    });
    function refreshRoutesView() {
      if (!activeRoutesPayload)
        return;
      const payload = activeRoutesPayload;
      let routes2 = matcher.getRoutes().filter((route) => !route.parent || // these routes have a parent with no component which will not appear in the view
      // therefore we still need to include them
      !route.parent.record.components);
      routes2.forEach(resetMatchStateOnRouteRecord);
      if (payload.filter) {
        routes2 = routes2.filter((route) => (
          // save matches state based on the payload
          isRouteMatching(route, payload.filter.toLowerCase())
        ));
      }
      routes2.forEach((route) => markRouteRecordActive(route, router2.currentRoute.value));
      payload.rootNodes = routes2.map(formatRouteRecordForInspector);
    }
    let activeRoutesPayload;
    api.on.getInspectorTree((payload) => {
      activeRoutesPayload = payload;
      if (payload.app === app && payload.inspectorId === routerInspectorId) {
        refreshRoutesView();
      }
    });
    api.on.getInspectorState((payload) => {
      if (payload.app === app && payload.inspectorId === routerInspectorId) {
        const routes2 = matcher.getRoutes();
        const route = routes2.find((route2) => route2.record.__vd_id === payload.nodeId);
        if (route) {
          payload.state = {
            options: formatRouteRecordMatcherForStateInspector(route)
          };
        }
      }
    });
    api.sendInspectorTree(routerInspectorId);
    api.sendInspectorState(routerInspectorId);
  });
}
function modifierForKey(key) {
  if (key.optional) {
    return key.repeatable ? "*" : "?";
  } else {
    return key.repeatable ? "+" : "";
  }
}
function formatRouteRecordMatcherForStateInspector(route) {
  const { record } = route;
  const fields = [
    { editable: false, key: "path", value: record.path }
  ];
  if (record.name != null) {
    fields.push({
      editable: false,
      key: "name",
      value: record.name
    });
  }
  fields.push({ editable: false, key: "regexp", value: route.re });
  if (route.keys.length) {
    fields.push({
      editable: false,
      key: "keys",
      value: {
        _custom: {
          type: null,
          readOnly: true,
          display: route.keys.map((key) => `${key.name}${modifierForKey(key)}`).join(" "),
          tooltip: "Param keys",
          value: route.keys
        }
      }
    });
  }
  if (record.redirect != null) {
    fields.push({
      editable: false,
      key: "redirect",
      value: record.redirect
    });
  }
  if (route.alias.length) {
    fields.push({
      editable: false,
      key: "aliases",
      value: route.alias.map((alias) => alias.record.path)
    });
  }
  if (Object.keys(route.record.meta).length) {
    fields.push({
      editable: false,
      key: "meta",
      value: route.record.meta
    });
  }
  fields.push({
    key: "score",
    editable: false,
    value: {
      _custom: {
        type: null,
        readOnly: true,
        display: route.score.map((score) => score.join(", ")).join(" | "),
        tooltip: "Score used to sort routes",
        value: route.score
      }
    }
  });
  return fields;
}
const PINK_500 = 15485081;
const BLUE_600 = 2450411;
const LIME_500 = 8702998;
const CYAN_400 = 2282478;
const ORANGE_400 = 16486972;
const DARK = 6710886;
function formatRouteRecordForInspector(route) {
  const tags = [];
  const { record } = route;
  if (record.name != null) {
    tags.push({
      label: String(record.name),
      textColor: 0,
      backgroundColor: CYAN_400
    });
  }
  if (record.aliasOf) {
    tags.push({
      label: "alias",
      textColor: 0,
      backgroundColor: ORANGE_400
    });
  }
  if (route.__vd_match) {
    tags.push({
      label: "matches",
      textColor: 0,
      backgroundColor: PINK_500
    });
  }
  if (route.__vd_exactActive) {
    tags.push({
      label: "exact",
      textColor: 0,
      backgroundColor: LIME_500
    });
  }
  if (route.__vd_active) {
    tags.push({
      label: "active",
      textColor: 0,
      backgroundColor: BLUE_600
    });
  }
  if (record.redirect) {
    tags.push({
      label: typeof record.redirect === "string" ? `redirect: ${record.redirect}` : "redirects",
      textColor: 16777215,
      backgroundColor: DARK
    });
  }
  let id2 = record.__vd_id;
  if (id2 == null) {
    id2 = String(routeRecordId++);
    record.__vd_id = id2;
  }
  return {
    id: id2,
    label: record.path,
    tags,
    children: route.children.map(formatRouteRecordForInspector)
  };
}
let routeRecordId = 0;
const EXTRACT_REGEXP_RE = /^\/(.*)\/([a-z]*)$/;
function markRouteRecordActive(route, currentRoute) {
  const isExactActive = currentRoute.matched.length && isSameRouteRecord(currentRoute.matched[currentRoute.matched.length - 1], route.record);
  route.__vd_exactActive = route.__vd_active = isExactActive;
  if (!isExactActive) {
    route.__vd_active = currentRoute.matched.some((match2) => isSameRouteRecord(match2, route.record));
  }
  route.children.forEach((childRoute) => markRouteRecordActive(childRoute, currentRoute));
}
function resetMatchStateOnRouteRecord(route) {
  route.__vd_match = false;
  route.children.forEach(resetMatchStateOnRouteRecord);
}
function isRouteMatching(route, filter) {
  const found = String(route.re).match(EXTRACT_REGEXP_RE);
  route.__vd_match = false;
  if (!found || found.length < 3) {
    return false;
  }
  const nonEndingRE = new RegExp(found[1].replace(/\$$/, ""), found[2]);
  if (nonEndingRE.test(filter)) {
    route.children.forEach((child) => isRouteMatching(child, filter));
    if (route.record.path !== "/" || filter === "/") {
      route.__vd_match = route.re.test(filter);
      return true;
    }
    return false;
  }
  const path = route.record.path.toLowerCase();
  const decodedPath = decode(path);
  if (!filter.startsWith("/") && (decodedPath.includes(filter) || path.includes(filter)))
    return true;
  if (decodedPath.startsWith(filter) || path.startsWith(filter))
    return true;
  if (route.record.name && String(route.record.name).includes(filter))
    return true;
  return route.children.some((child) => isRouteMatching(child, filter));
}
function omit(obj, keys) {
  const ret = {};
  for (const key in obj) {
    if (!keys.includes(key)) {
      ret[key] = obj[key];
    }
  }
  return ret;
}
function createRouter(options) {
  const matcher = createRouterMatcher(options.routes, options);
  const parseQuery$12 = options.parseQuery || parseQuery;
  const stringifyQuery$12 = options.stringifyQuery || stringifyQuery;
  const routerHistory = options.history;
  if (!routerHistory)
    throw new Error('Provide the "history" option when calling "createRouter()": https://next.router.vuejs.org/api/#history.');
  const beforeGuards = useCallbacks();
  const beforeResolveGuards = useCallbacks();
  const afterGuards = useCallbacks();
  const currentRoute = shallowRef(START_LOCATION_NORMALIZED);
  let pendingLocation = START_LOCATION_NORMALIZED;
  if (isBrowser && options.scrollBehavior && "scrollRestoration" in history) {
    history.scrollRestoration = "manual";
  }
  const normalizeParams = applyToParams.bind(null, (paramValue) => "" + paramValue);
  const encodeParams = applyToParams.bind(null, encodeParam);
  const decodeParams = (
    // @ts-expect-error: intentionally avoid the type check
    applyToParams.bind(null, decode)
  );
  function addRoute(parentOrRoute, route) {
    let parent;
    let record;
    if (isRouteName(parentOrRoute)) {
      parent = matcher.getRecordMatcher(parentOrRoute);
      record = route;
    } else {
      record = parentOrRoute;
    }
    return matcher.addRoute(record, parent);
  }
  function removeRoute(name) {
    const recordMatcher = matcher.getRecordMatcher(name);
    if (recordMatcher) {
      matcher.removeRoute(recordMatcher);
    } else {
      warn$1(`Cannot remove non-existent route "${String(name)}"`);
    }
  }
  function getRoutes() {
    return matcher.getRoutes().map((routeMatcher) => routeMatcher.record);
  }
  function hasRoute(name) {
    return !!matcher.getRecordMatcher(name);
  }
  function resolve2(rawLocation, currentLocation) {
    currentLocation = assign$3({}, currentLocation || currentRoute.value);
    if (typeof rawLocation === "string") {
      const locationNormalized = parseURL(parseQuery$12, rawLocation, currentLocation.path);
      const matchedRoute2 = matcher.resolve({ path: locationNormalized.path }, currentLocation);
      const href2 = routerHistory.createHref(locationNormalized.fullPath);
      {
        if (href2.startsWith("//"))
          warn$1(`Location "${rawLocation}" resolved to "${href2}". A resolved location cannot start with multiple slashes.`);
        else if (!matchedRoute2.matched.length) {
          warn$1(`No match found for location with path "${rawLocation}"`);
        }
      }
      return assign$3(locationNormalized, matchedRoute2, {
        params: decodeParams(matchedRoute2.params),
        hash: decode(locationNormalized.hash),
        redirectedFrom: void 0,
        href: href2
      });
    }
    let matcherLocation;
    if ("path" in rawLocation) {
      if ("params" in rawLocation && !("name" in rawLocation) && // @ts-expect-error: the type is never
      Object.keys(rawLocation.params).length) {
        warn$1(`Path "${rawLocation.path}" was passed with params but they will be ignored. Use a named route alongside params instead.`);
      }
      matcherLocation = assign$3({}, rawLocation, {
        path: parseURL(parseQuery$12, rawLocation.path, currentLocation.path).path
      });
    } else {
      const targetParams = assign$3({}, rawLocation.params);
      for (const key in targetParams) {
        if (targetParams[key] == null) {
          delete targetParams[key];
        }
      }
      matcherLocation = assign$3({}, rawLocation, {
        params: encodeParams(targetParams)
      });
      currentLocation.params = encodeParams(currentLocation.params);
    }
    const matchedRoute = matcher.resolve(matcherLocation, currentLocation);
    const hash2 = rawLocation.hash || "";
    if (hash2 && !hash2.startsWith("#")) {
      warn$1(`A \`hash\` should always start with the character "#". Replace "${hash2}" with "#${hash2}".`);
    }
    matchedRoute.params = normalizeParams(decodeParams(matchedRoute.params));
    const fullPath = stringifyURL(stringifyQuery$12, assign$3({}, rawLocation, {
      hash: encodeHash(hash2),
      path: matchedRoute.path
    }));
    const href = routerHistory.createHref(fullPath);
    {
      if (href.startsWith("//")) {
        warn$1(`Location "${rawLocation}" resolved to "${href}". A resolved location cannot start with multiple slashes.`);
      } else if (!matchedRoute.matched.length) {
        warn$1(`No match found for location with path "${"path" in rawLocation ? rawLocation.path : rawLocation}"`);
      }
    }
    return assign$3({
      fullPath,
      // keep the hash encoded so fullPath is effectively path + encodedQuery +
      // hash
      hash: hash2,
      query: (
        // if the user is using a custom query lib like qs, we might have
        // nested objects, so we keep the query as is, meaning it can contain
        // numbers at `$route.query`, but at the point, the user will have to
        // use their own type anyway.
        // https://github.com/vuejs/router/issues/328#issuecomment-649481567
        stringifyQuery$12 === stringifyQuery ? normalizeQuery(rawLocation.query) : rawLocation.query || {}
      )
    }, matchedRoute, {
      redirectedFrom: void 0,
      href
    });
  }
  function locationAsObject(to2) {
    return typeof to2 === "string" ? parseURL(parseQuery$12, to2, currentRoute.value.path) : assign$3({}, to2);
  }
  function checkCanceledNavigation(to2, from) {
    if (pendingLocation !== to2) {
      return createRouterError(8, {
        from,
        to: to2
      });
    }
  }
  function push(to2) {
    return pushWithRedirect(to2);
  }
  function replace(to2) {
    return push(assign$3(locationAsObject(to2), { replace: true }));
  }
  function handleRedirectRecord(to2) {
    const lastMatched = to2.matched[to2.matched.length - 1];
    if (lastMatched && lastMatched.redirect) {
      const { redirect } = lastMatched;
      let newTargetLocation = typeof redirect === "function" ? redirect(to2) : redirect;
      if (typeof newTargetLocation === "string") {
        newTargetLocation = newTargetLocation.includes("?") || newTargetLocation.includes("#") ? newTargetLocation = locationAsObject(newTargetLocation) : (
          // force empty params
          { path: newTargetLocation }
        );
        newTargetLocation.params = {};
      }
      if (!("path" in newTargetLocation) && !("name" in newTargetLocation)) {
        warn$1(`Invalid redirect found:
${JSON.stringify(newTargetLocation, null, 2)}
 when navigating to "${to2.fullPath}". A redirect must contain a name or path. This will break in production.`);
        throw new Error("Invalid redirect");
      }
      return assign$3({
        query: to2.query,
        hash: to2.hash,
        // avoid transferring params if the redirect has a path
        params: "path" in newTargetLocation ? {} : to2.params
      }, newTargetLocation);
    }
  }
  function pushWithRedirect(to2, redirectedFrom) {
    const targetLocation = pendingLocation = resolve2(to2);
    const from = currentRoute.value;
    const data = to2.state;
    const force = to2.force;
    const replace2 = to2.replace === true;
    const shouldRedirect = handleRedirectRecord(targetLocation);
    if (shouldRedirect)
      return pushWithRedirect(
        assign$3(locationAsObject(shouldRedirect), {
          state: typeof shouldRedirect === "object" ? assign$3({}, data, shouldRedirect.state) : data,
          force,
          replace: replace2
        }),
        // keep original redirectedFrom if it exists
        redirectedFrom || targetLocation
      );
    const toLocation = targetLocation;
    toLocation.redirectedFrom = redirectedFrom;
    let failure;
    if (!force && isSameRouteLocation(stringifyQuery$12, from, targetLocation)) {
      failure = createRouterError(16, { to: toLocation, from });
      handleScroll(
        from,
        from,
        // this is a push, the only way for it to be triggered from a
        // history.listen is with a redirect, which makes it become a push
        true,
        // This cannot be the first navigation because the initial location
        // cannot be manually navigated to
        false
      );
    }
    return (failure ? Promise.resolve(failure) : navigate(toLocation, from)).catch((error) => isNavigationFailure(error) ? (
      // navigation redirects still mark the router as ready
      isNavigationFailure(
        error,
        2
        /* ErrorTypes.NAVIGATION_GUARD_REDIRECT */
      ) ? error : markAsReady(error)
    ) : (
      // reject any unknown error
      triggerError(error, toLocation, from)
    )).then((failure2) => {
      if (failure2) {
        if (isNavigationFailure(
          failure2,
          2
          /* ErrorTypes.NAVIGATION_GUARD_REDIRECT */
        )) {
          if (
            // we are redirecting to the same location we were already at
            isSameRouteLocation(stringifyQuery$12, resolve2(failure2.to), toLocation) && // and we have done it a couple of times
            redirectedFrom && // @ts-expect-error: added only in dev
            (redirectedFrom._count = redirectedFrom._count ? (
              // @ts-expect-error
              redirectedFrom._count + 1
            ) : 1) > 30
          ) {
            warn$1(`Detected a possibly infinite redirection in a navigation guard when going from "${from.fullPath}" to "${toLocation.fullPath}". Aborting to avoid a Stack Overflow.
 Are you always returning a new location within a navigation guard? That would lead to this error. Only return when redirecting or aborting, that should fix this. This might break in production if not fixed.`);
            return Promise.reject(new Error("Infinite redirect in navigation guard"));
          }
          return pushWithRedirect(
            // keep options
            assign$3({
              // preserve an existing replacement but allow the redirect to override it
              replace: replace2
            }, locationAsObject(failure2.to), {
              state: typeof failure2.to === "object" ? assign$3({}, data, failure2.to.state) : data,
              force
            }),
            // preserve the original redirectedFrom if any
            redirectedFrom || toLocation
          );
        }
      } else {
        failure2 = finalizeNavigation(toLocation, from, true, replace2, data);
      }
      triggerAfterEach(toLocation, from, failure2);
      return failure2;
    });
  }
  function checkCanceledNavigationAndReject(to2, from) {
    const error = checkCanceledNavigation(to2, from);
    return error ? Promise.reject(error) : Promise.resolve();
  }
  function runWithContext(fn2) {
    const app = installedApps.values().next().value;
    return app && typeof app.runWithContext === "function" ? app.runWithContext(fn2) : fn2();
  }
  function navigate(to2, from) {
    let guards;
    const [leavingRecords, updatingRecords, enteringRecords] = extractChangingRecords(to2, from);
    guards = extractComponentsGuards(leavingRecords.reverse(), "beforeRouteLeave", to2, from);
    for (const record of leavingRecords) {
      record.leaveGuards.forEach((guard) => {
        guards.push(guardToPromiseFn(guard, to2, from));
      });
    }
    const canceledNavigationCheck = checkCanceledNavigationAndReject.bind(null, to2, from);
    guards.push(canceledNavigationCheck);
    return runGuardQueue(guards).then(() => {
      guards = [];
      for (const guard of beforeGuards.list()) {
        guards.push(guardToPromiseFn(guard, to2, from));
      }
      guards.push(canceledNavigationCheck);
      return runGuardQueue(guards);
    }).then(() => {
      guards = extractComponentsGuards(updatingRecords, "beforeRouteUpdate", to2, from);
      for (const record of updatingRecords) {
        record.updateGuards.forEach((guard) => {
          guards.push(guardToPromiseFn(guard, to2, from));
        });
      }
      guards.push(canceledNavigationCheck);
      return runGuardQueue(guards);
    }).then(() => {
      guards = [];
      for (const record of enteringRecords) {
        if (record.beforeEnter) {
          if (isArray$1(record.beforeEnter)) {
            for (const beforeEnter of record.beforeEnter)
              guards.push(guardToPromiseFn(beforeEnter, to2, from));
          } else {
            guards.push(guardToPromiseFn(record.beforeEnter, to2, from));
          }
        }
      }
      guards.push(canceledNavigationCheck);
      return runGuardQueue(guards);
    }).then(() => {
      to2.matched.forEach((record) => record.enterCallbacks = {});
      guards = extractComponentsGuards(enteringRecords, "beforeRouteEnter", to2, from);
      guards.push(canceledNavigationCheck);
      return runGuardQueue(guards);
    }).then(() => {
      guards = [];
      for (const guard of beforeResolveGuards.list()) {
        guards.push(guardToPromiseFn(guard, to2, from));
      }
      guards.push(canceledNavigationCheck);
      return runGuardQueue(guards);
    }).catch((err) => isNavigationFailure(
      err,
      8
      /* ErrorTypes.NAVIGATION_CANCELLED */
    ) ? err : Promise.reject(err));
  }
  function triggerAfterEach(to2, from, failure) {
    afterGuards.list().forEach((guard) => runWithContext(() => guard(to2, from, failure)));
  }
  function finalizeNavigation(toLocation, from, isPush, replace2, data) {
    const error = checkCanceledNavigation(toLocation, from);
    if (error)
      return error;
    const isFirstNavigation = from === START_LOCATION_NORMALIZED;
    const state = !isBrowser ? {} : history.state;
    if (isPush) {
      if (replace2 || isFirstNavigation)
        routerHistory.replace(toLocation.fullPath, assign$3({
          scroll: isFirstNavigation && state && state.scroll
        }, data));
      else
        routerHistory.push(toLocation.fullPath, data);
    }
    currentRoute.value = toLocation;
    handleScroll(toLocation, from, isPush, isFirstNavigation);
    markAsReady();
  }
  let removeHistoryListener;
  function setupListeners() {
    if (removeHistoryListener)
      return;
    removeHistoryListener = routerHistory.listen((to2, _from, info) => {
      if (!router2.listening)
        return;
      const toLocation = resolve2(to2);
      const shouldRedirect = handleRedirectRecord(toLocation);
      if (shouldRedirect) {
        pushWithRedirect(assign$3(shouldRedirect, { replace: true }), toLocation).catch(noop$1);
        return;
      }
      pendingLocation = toLocation;
      const from = currentRoute.value;
      if (isBrowser) {
        saveScrollPosition(getScrollKey(from.fullPath, info.delta), computeScrollPosition());
      }
      navigate(toLocation, from).catch((error) => {
        if (isNavigationFailure(
          error,
          4 | 8
          /* ErrorTypes.NAVIGATION_CANCELLED */
        )) {
          return error;
        }
        if (isNavigationFailure(
          error,
          2
          /* ErrorTypes.NAVIGATION_GUARD_REDIRECT */
        )) {
          pushWithRedirect(
            error.to,
            toLocation
            // avoid an uncaught rejection, let push call triggerError
          ).then((failure) => {
            if (isNavigationFailure(
              failure,
              4 | 16
              /* ErrorTypes.NAVIGATION_DUPLICATED */
            ) && !info.delta && info.type === NavigationType.pop) {
              routerHistory.go(-1, false);
            }
          }).catch(noop$1);
          return Promise.reject();
        }
        if (info.delta) {
          routerHistory.go(-info.delta, false);
        }
        return triggerError(error, toLocation, from);
      }).then((failure) => {
        failure = failure || finalizeNavigation(
          // after navigation, all matched components are resolved
          toLocation,
          from,
          false
        );
        if (failure) {
          if (info.delta && // a new navigation has been triggered, so we do not want to revert, that will change the current history
          // entry while a different route is displayed
          !isNavigationFailure(
            failure,
            8
            /* ErrorTypes.NAVIGATION_CANCELLED */
          )) {
            routerHistory.go(-info.delta, false);
          } else if (info.type === NavigationType.pop && isNavigationFailure(
            failure,
            4 | 16
            /* ErrorTypes.NAVIGATION_DUPLICATED */
          )) {
            routerHistory.go(-1, false);
          }
        }
        triggerAfterEach(toLocation, from, failure);
      }).catch(noop$1);
    });
  }
  let readyHandlers = useCallbacks();
  let errorListeners = useCallbacks();
  let ready;
  function triggerError(error, to2, from) {
    markAsReady(error);
    const list = errorListeners.list();
    if (list.length) {
      list.forEach((handler) => handler(error, to2, from));
    } else {
      {
        warn$1("uncaught error during route navigation:");
      }
      console.error(error);
    }
    return Promise.reject(error);
  }
  function isReady() {
    if (ready && currentRoute.value !== START_LOCATION_NORMALIZED)
      return Promise.resolve();
    return new Promise((resolve22, reject) => {
      readyHandlers.add([resolve22, reject]);
    });
  }
  function markAsReady(err) {
    if (!ready) {
      ready = !err;
      setupListeners();
      readyHandlers.list().forEach(([resolve22, reject]) => err ? reject(err) : resolve22());
      readyHandlers.reset();
    }
    return err;
  }
  function handleScroll(to2, from, isPush, isFirstNavigation) {
    const { scrollBehavior } = options;
    if (!isBrowser || !scrollBehavior)
      return Promise.resolve();
    const scrollPosition = !isPush && getSavedScrollPosition(getScrollKey(to2.fullPath, 0)) || (isFirstNavigation || !isPush) && history.state && history.state.scroll || null;
    return nextTick().then(() => scrollBehavior(to2, from, scrollPosition)).then((position) => position && scrollToPosition(position)).catch((err) => triggerError(err, to2, from));
  }
  const go2 = (delta) => routerHistory.go(delta);
  let started;
  const installedApps = /* @__PURE__ */ new Set();
  const router2 = {
    currentRoute,
    listening: true,
    addRoute,
    removeRoute,
    hasRoute,
    getRoutes,
    resolve: resolve2,
    options,
    push,
    replace,
    go: go2,
    back: () => go2(-1),
    forward: () => go2(1),
    beforeEach: beforeGuards.add,
    beforeResolve: beforeResolveGuards.add,
    afterEach: afterGuards.add,
    onError: errorListeners.add,
    isReady,
    install(app) {
      const router22 = this;
      app.component("RouterLink", RouterLink);
      app.component("RouterView", RouterView);
      app.config.globalProperties.$router = router22;
      Object.defineProperty(app.config.globalProperties, "$route", {
        enumerable: true,
        get: () => unref(currentRoute)
      });
      if (isBrowser && // used for the initial navigation client side to avoid pushing
      // multiple times when the router is used in multiple apps
      !started && currentRoute.value === START_LOCATION_NORMALIZED) {
        started = true;
        push(routerHistory.location).catch((err) => {
          warn$1("Unexpected error when starting the router:", err);
        });
      }
      const reactiveRoute = {};
      for (const key in START_LOCATION_NORMALIZED) {
        Object.defineProperty(reactiveRoute, key, {
          get: () => currentRoute.value[key],
          enumerable: true
        });
      }
      app.provide(routerKey, router22);
      app.provide(routeLocationKey, shallowReactive(reactiveRoute));
      app.provide(routerViewLocationKey, currentRoute);
      const unmountApp = app.unmount;
      installedApps.add(app);
      app.unmount = function() {
        installedApps.delete(app);
        if (installedApps.size < 1) {
          pendingLocation = START_LOCATION_NORMALIZED;
          removeHistoryListener && removeHistoryListener();
          removeHistoryListener = null;
          currentRoute.value = START_LOCATION_NORMALIZED;
          started = false;
          ready = false;
        }
        unmountApp();
      };
      if (isBrowser) {
        addDevtools(app, router22, matcher);
      }
    }
  };
  function runGuardQueue(guards) {
    return guards.reduce((promise, guard) => promise.then(() => runWithContext(guard)), Promise.resolve());
  }
  return router2;
}
function extractChangingRecords(to2, from) {
  const leavingRecords = [];
  const updatingRecords = [];
  const enteringRecords = [];
  const len = Math.max(from.matched.length, to2.matched.length);
  for (let i3 = 0; i3 < len; i3++) {
    const recordFrom = from.matched[i3];
    if (recordFrom) {
      if (to2.matched.find((record) => isSameRouteRecord(record, recordFrom)))
        updatingRecords.push(recordFrom);
      else
        leavingRecords.push(recordFrom);
    }
    const recordTo = to2.matched[i3];
    if (recordTo) {
      if (!from.matched.find((record) => isSameRouteRecord(record, recordTo))) {
        enteringRecords.push(recordTo);
      }
    }
  }
  return [leavingRecords, updatingRecords, enteringRecords];
}
function useRouter() {
  return inject(routerKey);
}
function useRoute() {
  return inject(routeLocationKey);
}
function _typeof(o2) {
  "@babel/helpers - typeof";
  return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(o3) {
    return typeof o3;
  } : function(o3) {
    return o3 && "function" == typeof Symbol && o3.constructor === Symbol && o3 !== Symbol.prototype ? "symbol" : typeof o3;
  }, _typeof(o2);
}
function toInteger(dirtyNumber) {
  if (dirtyNumber === null || dirtyNumber === true || dirtyNumber === false) {
    return NaN;
  }
  var number2 = Number(dirtyNumber);
  if (isNaN(number2)) {
    return number2;
  }
  return number2 < 0 ? Math.ceil(number2) : Math.floor(number2);
}
function requiredArgs(required, args) {
  if (args.length < required) {
    throw new TypeError(required + " argument" + (required > 1 ? "s" : "") + " required, but only " + args.length + " present");
  }
}
function toDate(argument) {
  requiredArgs(1, arguments);
  var argStr = Object.prototype.toString.call(argument);
  if (argument instanceof Date || _typeof(argument) === "object" && argStr === "[object Date]") {
    return new Date(argument.getTime());
  } else if (typeof argument === "number" || argStr === "[object Number]") {
    return new Date(argument);
  } else {
    if ((typeof argument === "string" || argStr === "[object String]") && typeof console !== "undefined") {
      console.warn("Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#string-arguments");
      console.warn(new Error().stack);
    }
    return /* @__PURE__ */ new Date(NaN);
  }
}
function addDays(dirtyDate, dirtyAmount) {
  requiredArgs(2, arguments);
  var date = toDate(dirtyDate);
  var amount = toInteger(dirtyAmount);
  if (isNaN(amount)) {
    return /* @__PURE__ */ new Date(NaN);
  }
  if (!amount) {
    return date;
  }
  date.setDate(date.getDate() + amount);
  return date;
}
function addMonths(dirtyDate, dirtyAmount) {
  requiredArgs(2, arguments);
  var date = toDate(dirtyDate);
  var amount = toInteger(dirtyAmount);
  if (isNaN(amount)) {
    return /* @__PURE__ */ new Date(NaN);
  }
  if (!amount) {
    return date;
  }
  var dayOfMonth = date.getDate();
  var endOfDesiredMonth = new Date(date.getTime());
  endOfDesiredMonth.setMonth(date.getMonth() + amount + 1, 0);
  var daysInMonth = endOfDesiredMonth.getDate();
  if (dayOfMonth >= daysInMonth) {
    return endOfDesiredMonth;
  } else {
    date.setFullYear(endOfDesiredMonth.getFullYear(), endOfDesiredMonth.getMonth(), dayOfMonth);
    return date;
  }
}
function add(dirtyDate, duration) {
  requiredArgs(2, arguments);
  if (!duration || _typeof(duration) !== "object")
    return /* @__PURE__ */ new Date(NaN);
  var years = duration.years ? toInteger(duration.years) : 0;
  var months = duration.months ? toInteger(duration.months) : 0;
  var weeks = duration.weeks ? toInteger(duration.weeks) : 0;
  var days = duration.days ? toInteger(duration.days) : 0;
  var hours = duration.hours ? toInteger(duration.hours) : 0;
  var minutes = duration.minutes ? toInteger(duration.minutes) : 0;
  var seconds = duration.seconds ? toInteger(duration.seconds) : 0;
  var date = toDate(dirtyDate);
  var dateWithMonths = months || years ? addMonths(date, months + years * 12) : date;
  var dateWithDays = days || weeks ? addDays(dateWithMonths, days + weeks * 7) : dateWithMonths;
  var minutesToAdd = minutes + hours * 60;
  var secondsToAdd = seconds + minutesToAdd * 60;
  var msToAdd = secondsToAdd * 1e3;
  var finalDate = new Date(dateWithDays.getTime() + msToAdd);
  return finalDate;
}
function addMilliseconds(dirtyDate, dirtyAmount) {
  requiredArgs(2, arguments);
  var timestamp = toDate(dirtyDate).getTime();
  var amount = toInteger(dirtyAmount);
  return new Date(timestamp + amount);
}
var defaultOptions = {};
function getDefaultOptions() {
  return defaultOptions;
}
function startOfWeek(dirtyDate, options) {
  var _ref, _ref2, _ref3, _options$weekStartsOn, _options$locale, _options$locale$optio, _defaultOptions$local, _defaultOptions$local2;
  requiredArgs(1, arguments);
  var defaultOptions2 = getDefaultOptions();
  var weekStartsOn = toInteger((_ref = (_ref2 = (_ref3 = (_options$weekStartsOn = options === null || options === void 0 ? void 0 : options.weekStartsOn) !== null && _options$weekStartsOn !== void 0 ? _options$weekStartsOn : options === null || options === void 0 ? void 0 : (_options$locale = options.locale) === null || _options$locale === void 0 ? void 0 : (_options$locale$optio = _options$locale.options) === null || _options$locale$optio === void 0 ? void 0 : _options$locale$optio.weekStartsOn) !== null && _ref3 !== void 0 ? _ref3 : defaultOptions2.weekStartsOn) !== null && _ref2 !== void 0 ? _ref2 : (_defaultOptions$local = defaultOptions2.locale) === null || _defaultOptions$local === void 0 ? void 0 : (_defaultOptions$local2 = _defaultOptions$local.options) === null || _defaultOptions$local2 === void 0 ? void 0 : _defaultOptions$local2.weekStartsOn) !== null && _ref !== void 0 ? _ref : 0);
  if (!(weekStartsOn >= 0 && weekStartsOn <= 6)) {
    throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");
  }
  var date = toDate(dirtyDate);
  var day = date.getDay();
  var diff = (day < weekStartsOn ? 7 : 0) + day - weekStartsOn;
  date.setDate(date.getDate() - diff);
  date.setHours(0, 0, 0, 0);
  return date;
}
function startOfISOWeek(dirtyDate) {
  requiredArgs(1, arguments);
  return startOfWeek(dirtyDate, {
    weekStartsOn: 1
  });
}
function getISOWeekYear(dirtyDate) {
  requiredArgs(1, arguments);
  var date = toDate(dirtyDate);
  var year = date.getFullYear();
  var fourthOfJanuaryOfNextYear = /* @__PURE__ */ new Date(0);
  fourthOfJanuaryOfNextYear.setFullYear(year + 1, 0, 4);
  fourthOfJanuaryOfNextYear.setHours(0, 0, 0, 0);
  var startOfNextYear = startOfISOWeek(fourthOfJanuaryOfNextYear);
  var fourthOfJanuaryOfThisYear = /* @__PURE__ */ new Date(0);
  fourthOfJanuaryOfThisYear.setFullYear(year, 0, 4);
  fourthOfJanuaryOfThisYear.setHours(0, 0, 0, 0);
  var startOfThisYear = startOfISOWeek(fourthOfJanuaryOfThisYear);
  if (date.getTime() >= startOfNextYear.getTime()) {
    return year + 1;
  } else if (date.getTime() >= startOfThisYear.getTime()) {
    return year;
  } else {
    return year - 1;
  }
}
function startOfISOWeekYear(dirtyDate) {
  requiredArgs(1, arguments);
  var year = getISOWeekYear(dirtyDate);
  var fourthOfJanuary = /* @__PURE__ */ new Date(0);
  fourthOfJanuary.setFullYear(year, 0, 4);
  fourthOfJanuary.setHours(0, 0, 0, 0);
  var date = startOfISOWeek(fourthOfJanuary);
  return date;
}
function getTimezoneOffsetInMilliseconds(date) {
  var utcDate = new Date(Date.UTC(date.getFullYear(), date.getMonth(), date.getDate(), date.getHours(), date.getMinutes(), date.getSeconds(), date.getMilliseconds()));
  utcDate.setUTCFullYear(date.getFullYear());
  return date.getTime() - utcDate.getTime();
}
function startOfDay(dirtyDate) {
  requiredArgs(1, arguments);
  var date = toDate(dirtyDate);
  date.setHours(0, 0, 0, 0);
  return date;
}
var MILLISECONDS_IN_DAY$1 = 864e5;
function differenceInCalendarDays(dirtyDateLeft, dirtyDateRight) {
  requiredArgs(2, arguments);
  var startOfDayLeft = startOfDay(dirtyDateLeft);
  var startOfDayRight = startOfDay(dirtyDateRight);
  var timestampLeft = startOfDayLeft.getTime() - getTimezoneOffsetInMilliseconds(startOfDayLeft);
  var timestampRight = startOfDayRight.getTime() - getTimezoneOffsetInMilliseconds(startOfDayRight);
  return Math.round((timestampLeft - timestampRight) / MILLISECONDS_IN_DAY$1);
}
function addQuarters(dirtyDate, dirtyAmount) {
  requiredArgs(2, arguments);
  var amount = toInteger(dirtyAmount);
  var months = amount * 3;
  return addMonths(dirtyDate, months);
}
function addYears(dirtyDate, dirtyAmount) {
  requiredArgs(2, arguments);
  var amount = toInteger(dirtyAmount);
  return addMonths(dirtyDate, amount * 12);
}
var millisecondsInMinute = 6e4;
var millisecondsInHour = 36e5;
var millisecondsInSecond = 1e3;
function isDate$1(value) {
  requiredArgs(1, arguments);
  return value instanceof Date || _typeof(value) === "object" && Object.prototype.toString.call(value) === "[object Date]";
}
function isValid(dirtyDate) {
  requiredArgs(1, arguments);
  if (!isDate$1(dirtyDate) && typeof dirtyDate !== "number") {
    return false;
  }
  var date = toDate(dirtyDate);
  return !isNaN(Number(date));
}
function getQuarter(dirtyDate) {
  requiredArgs(1, arguments);
  var date = toDate(dirtyDate);
  var quarter = Math.floor(date.getMonth() / 3) + 1;
  return quarter;
}
function eachDayOfInterval(dirtyInterval, options) {
  var _options$step;
  requiredArgs(1, arguments);
  var interval = dirtyInterval || {};
  var startDate = toDate(interval.start);
  var endDate = toDate(interval.end);
  var endTime = endDate.getTime();
  if (!(startDate.getTime() <= endTime)) {
    throw new RangeError("Invalid interval");
  }
  var dates = [];
  var currentDate = startDate;
  currentDate.setHours(0, 0, 0, 0);
  var step = Number((_options$step = options === null || options === void 0 ? void 0 : options.step) !== null && _options$step !== void 0 ? _options$step : 1);
  if (step < 1 || isNaN(step))
    throw new RangeError("`options.step` must be a number greater than 1");
  while (currentDate.getTime() <= endTime) {
    dates.push(toDate(currentDate));
    currentDate.setDate(currentDate.getDate() + step);
    currentDate.setHours(0, 0, 0, 0);
  }
  return dates;
}
function startOfQuarter(dirtyDate) {
  requiredArgs(1, arguments);
  var date = toDate(dirtyDate);
  var currentMonth = date.getMonth();
  var month = currentMonth - currentMonth % 3;
  date.setMonth(month, 1);
  date.setHours(0, 0, 0, 0);
  return date;
}
function eachQuarterOfInterval(dirtyInterval) {
  requiredArgs(1, arguments);
  var interval = dirtyInterval || {};
  var startDate = toDate(interval.start);
  var endDate = toDate(interval.end);
  var endTime = endDate.getTime();
  if (!(startDate.getTime() <= endTime)) {
    throw new RangeError("Invalid interval");
  }
  var startDateQuarter = startOfQuarter(startDate);
  var endDateQuarter = startOfQuarter(endDate);
  endTime = endDateQuarter.getTime();
  var quarters = [];
  var currentQuarter = startDateQuarter;
  while (currentQuarter.getTime() <= endTime) {
    quarters.push(toDate(currentQuarter));
    currentQuarter = addQuarters(currentQuarter, 1);
  }
  return quarters;
}
function endOfYear(dirtyDate) {
  requiredArgs(1, arguments);
  var date = toDate(dirtyDate);
  var year = date.getFullYear();
  date.setFullYear(year + 1, 0, 0);
  date.setHours(23, 59, 59, 999);
  return date;
}
function startOfYear(dirtyDate) {
  requiredArgs(1, arguments);
  var cleanDate = toDate(dirtyDate);
  var date = /* @__PURE__ */ new Date(0);
  date.setFullYear(cleanDate.getFullYear(), 0, 1);
  date.setHours(0, 0, 0, 0);
  return date;
}
function endOfWeek(dirtyDate, options) {
  var _ref, _ref2, _ref3, _options$weekStartsOn, _options$locale, _options$locale$optio, _defaultOptions$local, _defaultOptions$local2;
  requiredArgs(1, arguments);
  var defaultOptions2 = getDefaultOptions();
  var weekStartsOn = toInteger((_ref = (_ref2 = (_ref3 = (_options$weekStartsOn = options === null || options === void 0 ? void 0 : options.weekStartsOn) !== null && _options$weekStartsOn !== void 0 ? _options$weekStartsOn : options === null || options === void 0 ? void 0 : (_options$locale = options.locale) === null || _options$locale === void 0 ? void 0 : (_options$locale$optio = _options$locale.options) === null || _options$locale$optio === void 0 ? void 0 : _options$locale$optio.weekStartsOn) !== null && _ref3 !== void 0 ? _ref3 : defaultOptions2.weekStartsOn) !== null && _ref2 !== void 0 ? _ref2 : (_defaultOptions$local = defaultOptions2.locale) === null || _defaultOptions$local === void 0 ? void 0 : (_defaultOptions$local2 = _defaultOptions$local.options) === null || _defaultOptions$local2 === void 0 ? void 0 : _defaultOptions$local2.weekStartsOn) !== null && _ref !== void 0 ? _ref : 0);
  if (!(weekStartsOn >= 0 && weekStartsOn <= 6)) {
    throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");
  }
  var date = toDate(dirtyDate);
  var day = date.getDay();
  var diff = (day < weekStartsOn ? -7 : 0) + 6 - (day - weekStartsOn);
  date.setDate(date.getDate() + diff);
  date.setHours(23, 59, 59, 999);
  return date;
}
function endOfQuarter(dirtyDate) {
  requiredArgs(1, arguments);
  var date = toDate(dirtyDate);
  var currentMonth = date.getMonth();
  var month = currentMonth - currentMonth % 3 + 3;
  date.setMonth(month, 0);
  date.setHours(23, 59, 59, 999);
  return date;
}
function subMilliseconds(dirtyDate, dirtyAmount) {
  requiredArgs(2, arguments);
  var amount = toInteger(dirtyAmount);
  return addMilliseconds(dirtyDate, -amount);
}
var MILLISECONDS_IN_DAY = 864e5;
function getUTCDayOfYear(dirtyDate) {
  requiredArgs(1, arguments);
  var date = toDate(dirtyDate);
  var timestamp = date.getTime();
  date.setUTCMonth(0, 1);
  date.setUTCHours(0, 0, 0, 0);
  var startOfYearTimestamp = date.getTime();
  var difference = timestamp - startOfYearTimestamp;
  return Math.floor(difference / MILLISECONDS_IN_DAY) + 1;
}
function startOfUTCISOWeek(dirtyDate) {
  requiredArgs(1, arguments);
  var weekStartsOn = 1;
  var date = toDate(dirtyDate);
  var day = date.getUTCDay();
  var diff = (day < weekStartsOn ? 7 : 0) + day - weekStartsOn;
  date.setUTCDate(date.getUTCDate() - diff);
  date.setUTCHours(0, 0, 0, 0);
  return date;
}
function getUTCISOWeekYear(dirtyDate) {
  requiredArgs(1, arguments);
  var date = toDate(dirtyDate);
  var year = date.getUTCFullYear();
  var fourthOfJanuaryOfNextYear = /* @__PURE__ */ new Date(0);
  fourthOfJanuaryOfNextYear.setUTCFullYear(year + 1, 0, 4);
  fourthOfJanuaryOfNextYear.setUTCHours(0, 0, 0, 0);
  var startOfNextYear = startOfUTCISOWeek(fourthOfJanuaryOfNextYear);
  var fourthOfJanuaryOfThisYear = /* @__PURE__ */ new Date(0);
  fourthOfJanuaryOfThisYear.setUTCFullYear(year, 0, 4);
  fourthOfJanuaryOfThisYear.setUTCHours(0, 0, 0, 0);
  var startOfThisYear = startOfUTCISOWeek(fourthOfJanuaryOfThisYear);
  if (date.getTime() >= startOfNextYear.getTime()) {
    return year + 1;
  } else if (date.getTime() >= startOfThisYear.getTime()) {
    return year;
  } else {
    return year - 1;
  }
}
function startOfUTCISOWeekYear(dirtyDate) {
  requiredArgs(1, arguments);
  var year = getUTCISOWeekYear(dirtyDate);
  var fourthOfJanuary = /* @__PURE__ */ new Date(0);
  fourthOfJanuary.setUTCFullYear(year, 0, 4);
  fourthOfJanuary.setUTCHours(0, 0, 0, 0);
  var date = startOfUTCISOWeek(fourthOfJanuary);
  return date;
}
var MILLISECONDS_IN_WEEK$3 = 6048e5;
function getUTCISOWeek(dirtyDate) {
  requiredArgs(1, arguments);
  var date = toDate(dirtyDate);
  var diff = startOfUTCISOWeek(date).getTime() - startOfUTCISOWeekYear(date).getTime();
  return Math.round(diff / MILLISECONDS_IN_WEEK$3) + 1;
}
function startOfUTCWeek(dirtyDate, options) {
  var _ref, _ref2, _ref3, _options$weekStartsOn, _options$locale, _options$locale$optio, _defaultOptions$local, _defaultOptions$local2;
  requiredArgs(1, arguments);
  var defaultOptions2 = getDefaultOptions();
  var weekStartsOn = toInteger((_ref = (_ref2 = (_ref3 = (_options$weekStartsOn = options === null || options === void 0 ? void 0 : options.weekStartsOn) !== null && _options$weekStartsOn !== void 0 ? _options$weekStartsOn : options === null || options === void 0 ? void 0 : (_options$locale = options.locale) === null || _options$locale === void 0 ? void 0 : (_options$locale$optio = _options$locale.options) === null || _options$locale$optio === void 0 ? void 0 : _options$locale$optio.weekStartsOn) !== null && _ref3 !== void 0 ? _ref3 : defaultOptions2.weekStartsOn) !== null && _ref2 !== void 0 ? _ref2 : (_defaultOptions$local = defaultOptions2.locale) === null || _defaultOptions$local === void 0 ? void 0 : (_defaultOptions$local2 = _defaultOptions$local.options) === null || _defaultOptions$local2 === void 0 ? void 0 : _defaultOptions$local2.weekStartsOn) !== null && _ref !== void 0 ? _ref : 0);
  if (!(weekStartsOn >= 0 && weekStartsOn <= 6)) {
    throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");
  }
  var date = toDate(dirtyDate);
  var day = date.getUTCDay();
  var diff = (day < weekStartsOn ? 7 : 0) + day - weekStartsOn;
  date.setUTCDate(date.getUTCDate() - diff);
  date.setUTCHours(0, 0, 0, 0);
  return date;
}
function getUTCWeekYear(dirtyDate, options) {
  var _ref, _ref2, _ref3, _options$firstWeekCon, _options$locale, _options$locale$optio, _defaultOptions$local, _defaultOptions$local2;
  requiredArgs(1, arguments);
  var date = toDate(dirtyDate);
  var year = date.getUTCFullYear();
  var defaultOptions2 = getDefaultOptions();
  var firstWeekContainsDate = toInteger((_ref = (_ref2 = (_ref3 = (_options$firstWeekCon = options === null || options === void 0 ? void 0 : options.firstWeekContainsDate) !== null && _options$firstWeekCon !== void 0 ? _options$firstWeekCon : options === null || options === void 0 ? void 0 : (_options$locale = options.locale) === null || _options$locale === void 0 ? void 0 : (_options$locale$optio = _options$locale.options) === null || _options$locale$optio === void 0 ? void 0 : _options$locale$optio.firstWeekContainsDate) !== null && _ref3 !== void 0 ? _ref3 : defaultOptions2.firstWeekContainsDate) !== null && _ref2 !== void 0 ? _ref2 : (_defaultOptions$local = defaultOptions2.locale) === null || _defaultOptions$local === void 0 ? void 0 : (_defaultOptions$local2 = _defaultOptions$local.options) === null || _defaultOptions$local2 === void 0 ? void 0 : _defaultOptions$local2.firstWeekContainsDate) !== null && _ref !== void 0 ? _ref : 1);
  if (!(firstWeekContainsDate >= 1 && firstWeekContainsDate <= 7)) {
    throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");
  }
  var firstWeekOfNextYear = /* @__PURE__ */ new Date(0);
  firstWeekOfNextYear.setUTCFullYear(year + 1, 0, firstWeekContainsDate);
  firstWeekOfNextYear.setUTCHours(0, 0, 0, 0);
  var startOfNextYear = startOfUTCWeek(firstWeekOfNextYear, options);
  var firstWeekOfThisYear = /* @__PURE__ */ new Date(0);
  firstWeekOfThisYear.setUTCFullYear(year, 0, firstWeekContainsDate);
  firstWeekOfThisYear.setUTCHours(0, 0, 0, 0);
  var startOfThisYear = startOfUTCWeek(firstWeekOfThisYear, options);
  if (date.getTime() >= startOfNextYear.getTime()) {
    return year + 1;
  } else if (date.getTime() >= startOfThisYear.getTime()) {
    return year;
  } else {
    return year - 1;
  }
}
function startOfUTCWeekYear(dirtyDate, options) {
  var _ref, _ref2, _ref3, _options$firstWeekCon, _options$locale, _options$locale$optio, _defaultOptions$local, _defaultOptions$local2;
  requiredArgs(1, arguments);
  var defaultOptions2 = getDefaultOptions();
  var firstWeekContainsDate = toInteger((_ref = (_ref2 = (_ref3 = (_options$firstWeekCon = options === null || options === void 0 ? void 0 : options.firstWeekContainsDate) !== null && _options$firstWeekCon !== void 0 ? _options$firstWeekCon : options === null || options === void 0 ? void 0 : (_options$locale = options.locale) === null || _options$locale === void 0 ? void 0 : (_options$locale$optio = _options$locale.options) === null || _options$locale$optio === void 0 ? void 0 : _options$locale$optio.firstWeekContainsDate) !== null && _ref3 !== void 0 ? _ref3 : defaultOptions2.firstWeekContainsDate) !== null && _ref2 !== void 0 ? _ref2 : (_defaultOptions$local = defaultOptions2.locale) === null || _defaultOptions$local === void 0 ? void 0 : (_defaultOptions$local2 = _defaultOptions$local.options) === null || _defaultOptions$local2 === void 0 ? void 0 : _defaultOptions$local2.firstWeekContainsDate) !== null && _ref !== void 0 ? _ref : 1);
  var year = getUTCWeekYear(dirtyDate, options);
  var firstWeek = /* @__PURE__ */ new Date(0);
  firstWeek.setUTCFullYear(year, 0, firstWeekContainsDate);
  firstWeek.setUTCHours(0, 0, 0, 0);
  var date = startOfUTCWeek(firstWeek, options);
  return date;
}
var MILLISECONDS_IN_WEEK$2 = 6048e5;
function getUTCWeek(dirtyDate, options) {
  requiredArgs(1, arguments);
  var date = toDate(dirtyDate);
  var diff = startOfUTCWeek(date, options).getTime() - startOfUTCWeekYear(date, options).getTime();
  return Math.round(diff / MILLISECONDS_IN_WEEK$2) + 1;
}
function addLeadingZeros(number2, targetLength) {
  var sign = number2 < 0 ? "-" : "";
  var output = Math.abs(number2).toString();
  while (output.length < targetLength) {
    output = "0" + output;
  }
  return sign + output;
}
var formatters$1 = {
  // Year
  y: function y2(date, token) {
    var signedYear = date.getUTCFullYear();
    var year = signedYear > 0 ? signedYear : 1 - signedYear;
    return addLeadingZeros(token === "yy" ? year % 100 : year, token.length);
  },
  // Month
  M: function M2(date, token) {
    var month = date.getUTCMonth();
    return token === "M" ? String(month + 1) : addLeadingZeros(month + 1, 2);
  },
  // Day of the month
  d: function d2(date, token) {
    return addLeadingZeros(date.getUTCDate(), token.length);
  },
  // AM or PM
  a: function a2(date, token) {
    var dayPeriodEnumValue = date.getUTCHours() / 12 >= 1 ? "pm" : "am";
    switch (token) {
      case "a":
      case "aa":
        return dayPeriodEnumValue.toUpperCase();
      case "aaa":
        return dayPeriodEnumValue;
      case "aaaaa":
        return dayPeriodEnumValue[0];
      case "aaaa":
      default:
        return dayPeriodEnumValue === "am" ? "a.m." : "p.m.";
    }
  },
  // Hour [1-12]
  h: function h2(date, token) {
    return addLeadingZeros(date.getUTCHours() % 12 || 12, token.length);
  },
  // Hour [0-23]
  H: function H3(date, token) {
    return addLeadingZeros(date.getUTCHours(), token.length);
  },
  // Minute
  m: function m2(date, token) {
    return addLeadingZeros(date.getUTCMinutes(), token.length);
  },
  // Second
  s: function s2(date, token) {
    return addLeadingZeros(date.getUTCSeconds(), token.length);
  },
  // Fraction of second
  S: function S2(date, token) {
    var numberOfDigits = token.length;
    var milliseconds = date.getUTCMilliseconds();
    var fractionalSeconds = Math.floor(milliseconds * Math.pow(10, numberOfDigits - 3));
    return addLeadingZeros(fractionalSeconds, token.length);
  }
};
const formatters$2 = formatters$1;
var dayPeriodEnum = {
  am: "am",
  pm: "pm",
  midnight: "midnight",
  noon: "noon",
  morning: "morning",
  afternoon: "afternoon",
  evening: "evening",
  night: "night"
};
var formatters = {
  // Era
  G: function G2(date, token, localize2) {
    var era = date.getUTCFullYear() > 0 ? 1 : 0;
    switch (token) {
      case "G":
      case "GG":
      case "GGG":
        return localize2.era(era, {
          width: "abbreviated"
        });
      case "GGGGG":
        return localize2.era(era, {
          width: "narrow"
        });
      case "GGGG":
      default:
        return localize2.era(era, {
          width: "wide"
        });
    }
  },
  // Year
  y: function y3(date, token, localize2) {
    if (token === "yo") {
      var signedYear = date.getUTCFullYear();
      var year = signedYear > 0 ? signedYear : 1 - signedYear;
      return localize2.ordinalNumber(year, {
        unit: "year"
      });
    }
    return formatters$2.y(date, token);
  },
  // Local week-numbering year
  Y: function Y2(date, token, localize2, options) {
    var signedWeekYear = getUTCWeekYear(date, options);
    var weekYear = signedWeekYear > 0 ? signedWeekYear : 1 - signedWeekYear;
    if (token === "YY") {
      var twoDigitYear = weekYear % 100;
      return addLeadingZeros(twoDigitYear, 2);
    }
    if (token === "Yo") {
      return localize2.ordinalNumber(weekYear, {
        unit: "year"
      });
    }
    return addLeadingZeros(weekYear, token.length);
  },
  // ISO week-numbering year
  R: function R3(date, token) {
    var isoWeekYear = getUTCISOWeekYear(date);
    return addLeadingZeros(isoWeekYear, token.length);
  },
  // Extended year. This is a single number designating the year of this calendar system.
  // The main difference between `y` and `u` localizers are B.C. years:
  // | Year | `y` | `u` |
  // |------|-----|-----|
  // | AC 1 |   1 |   1 |
  // | BC 1 |   1 |   0 |
  // | BC 2 |   2 |  -1 |
  // Also `yy` always returns the last two digits of a year,
  // while `uu` pads single digit years to 2 characters and returns other years unchanged.
  u: function u2(date, token) {
    var year = date.getUTCFullYear();
    return addLeadingZeros(year, token.length);
  },
  // Quarter
  Q: function Q2(date, token, localize2) {
    var quarter = Math.ceil((date.getUTCMonth() + 1) / 3);
    switch (token) {
      case "Q":
        return String(quarter);
      case "QQ":
        return addLeadingZeros(quarter, 2);
      case "Qo":
        return localize2.ordinalNumber(quarter, {
          unit: "quarter"
        });
      case "QQQ":
        return localize2.quarter(quarter, {
          width: "abbreviated",
          context: "formatting"
        });
      case "QQQQQ":
        return localize2.quarter(quarter, {
          width: "narrow",
          context: "formatting"
        });
      case "QQQQ":
      default:
        return localize2.quarter(quarter, {
          width: "wide",
          context: "formatting"
        });
    }
  },
  // Stand-alone quarter
  q: function q2(date, token, localize2) {
    var quarter = Math.ceil((date.getUTCMonth() + 1) / 3);
    switch (token) {
      case "q":
        return String(quarter);
      case "qq":
        return addLeadingZeros(quarter, 2);
      case "qo":
        return localize2.ordinalNumber(quarter, {
          unit: "quarter"
        });
      case "qqq":
        return localize2.quarter(quarter, {
          width: "abbreviated",
          context: "standalone"
        });
      case "qqqqq":
        return localize2.quarter(quarter, {
          width: "narrow",
          context: "standalone"
        });
      case "qqqq":
      default:
        return localize2.quarter(quarter, {
          width: "wide",
          context: "standalone"
        });
    }
  },
  // Month
  M: function M3(date, token, localize2) {
    var month = date.getUTCMonth();
    switch (token) {
      case "M":
      case "MM":
        return formatters$2.M(date, token);
      case "Mo":
        return localize2.ordinalNumber(month + 1, {
          unit: "month"
        });
      case "MMM":
        return localize2.month(month, {
          width: "abbreviated",
          context: "formatting"
        });
      case "MMMMM":
        return localize2.month(month, {
          width: "narrow",
          context: "formatting"
        });
      case "MMMM":
      default:
        return localize2.month(month, {
          width: "wide",
          context: "formatting"
        });
    }
  },
  // Stand-alone month
  L: function L2(date, token, localize2) {
    var month = date.getUTCMonth();
    switch (token) {
      case "L":
        return String(month + 1);
      case "LL":
        return addLeadingZeros(month + 1, 2);
      case "Lo":
        return localize2.ordinalNumber(month + 1, {
          unit: "month"
        });
      case "LLL":
        return localize2.month(month, {
          width: "abbreviated",
          context: "standalone"
        });
      case "LLLLL":
        return localize2.month(month, {
          width: "narrow",
          context: "standalone"
        });
      case "LLLL":
      default:
        return localize2.month(month, {
          width: "wide",
          context: "standalone"
        });
    }
  },
  // Local week of year
  w: function w2(date, token, localize2, options) {
    var week = getUTCWeek(date, options);
    if (token === "wo") {
      return localize2.ordinalNumber(week, {
        unit: "week"
      });
    }
    return addLeadingZeros(week, token.length);
  },
  // ISO week of year
  I: function I2(date, token, localize2) {
    var isoWeek = getUTCISOWeek(date);
    if (token === "Io") {
      return localize2.ordinalNumber(isoWeek, {
        unit: "week"
      });
    }
    return addLeadingZeros(isoWeek, token.length);
  },
  // Day of the month
  d: function d3(date, token, localize2) {
    if (token === "do") {
      return localize2.ordinalNumber(date.getUTCDate(), {
        unit: "date"
      });
    }
    return formatters$2.d(date, token);
  },
  // Day of year
  D: function D2(date, token, localize2) {
    var dayOfYear = getUTCDayOfYear(date);
    if (token === "Do") {
      return localize2.ordinalNumber(dayOfYear, {
        unit: "dayOfYear"
      });
    }
    return addLeadingZeros(dayOfYear, token.length);
  },
  // Day of week
  E: function E2(date, token, localize2) {
    var dayOfWeek = date.getUTCDay();
    switch (token) {
      case "E":
      case "EE":
      case "EEE":
        return localize2.day(dayOfWeek, {
          width: "abbreviated",
          context: "formatting"
        });
      case "EEEEE":
        return localize2.day(dayOfWeek, {
          width: "narrow",
          context: "formatting"
        });
      case "EEEEEE":
        return localize2.day(dayOfWeek, {
          width: "short",
          context: "formatting"
        });
      case "EEEE":
      default:
        return localize2.day(dayOfWeek, {
          width: "wide",
          context: "formatting"
        });
    }
  },
  // Local day of week
  e: function e2(date, token, localize2, options) {
    var dayOfWeek = date.getUTCDay();
    var localDayOfWeek = (dayOfWeek - options.weekStartsOn + 8) % 7 || 7;
    switch (token) {
      case "e":
        return String(localDayOfWeek);
      case "ee":
        return addLeadingZeros(localDayOfWeek, 2);
      case "eo":
        return localize2.ordinalNumber(localDayOfWeek, {
          unit: "day"
        });
      case "eee":
        return localize2.day(dayOfWeek, {
          width: "abbreviated",
          context: "formatting"
        });
      case "eeeee":
        return localize2.day(dayOfWeek, {
          width: "narrow",
          context: "formatting"
        });
      case "eeeeee":
        return localize2.day(dayOfWeek, {
          width: "short",
          context: "formatting"
        });
      case "eeee":
      default:
        return localize2.day(dayOfWeek, {
          width: "wide",
          context: "formatting"
        });
    }
  },
  // Stand-alone local day of week
  c: function c2(date, token, localize2, options) {
    var dayOfWeek = date.getUTCDay();
    var localDayOfWeek = (dayOfWeek - options.weekStartsOn + 8) % 7 || 7;
    switch (token) {
      case "c":
        return String(localDayOfWeek);
      case "cc":
        return addLeadingZeros(localDayOfWeek, token.length);
      case "co":
        return localize2.ordinalNumber(localDayOfWeek, {
          unit: "day"
        });
      case "ccc":
        return localize2.day(dayOfWeek, {
          width: "abbreviated",
          context: "standalone"
        });
      case "ccccc":
        return localize2.day(dayOfWeek, {
          width: "narrow",
          context: "standalone"
        });
      case "cccccc":
        return localize2.day(dayOfWeek, {
          width: "short",
          context: "standalone"
        });
      case "cccc":
      default:
        return localize2.day(dayOfWeek, {
          width: "wide",
          context: "standalone"
        });
    }
  },
  // ISO day of week
  i: function i2(date, token, localize2) {
    var dayOfWeek = date.getUTCDay();
    var isoDayOfWeek = dayOfWeek === 0 ? 7 : dayOfWeek;
    switch (token) {
      case "i":
        return String(isoDayOfWeek);
      case "ii":
        return addLeadingZeros(isoDayOfWeek, token.length);
      case "io":
        return localize2.ordinalNumber(isoDayOfWeek, {
          unit: "day"
        });
      case "iii":
        return localize2.day(dayOfWeek, {
          width: "abbreviated",
          context: "formatting"
        });
      case "iiiii":
        return localize2.day(dayOfWeek, {
          width: "narrow",
          context: "formatting"
        });
      case "iiiiii":
        return localize2.day(dayOfWeek, {
          width: "short",
          context: "formatting"
        });
      case "iiii":
      default:
        return localize2.day(dayOfWeek, {
          width: "wide",
          context: "formatting"
        });
    }
  },
  // AM or PM
  a: function a3(date, token, localize2) {
    var hours = date.getUTCHours();
    var dayPeriodEnumValue = hours / 12 >= 1 ? "pm" : "am";
    switch (token) {
      case "a":
      case "aa":
        return localize2.dayPeriod(dayPeriodEnumValue, {
          width: "abbreviated",
          context: "formatting"
        });
      case "aaa":
        return localize2.dayPeriod(dayPeriodEnumValue, {
          width: "abbreviated",
          context: "formatting"
        }).toLowerCase();
      case "aaaaa":
        return localize2.dayPeriod(dayPeriodEnumValue, {
          width: "narrow",
          context: "formatting"
        });
      case "aaaa":
      default:
        return localize2.dayPeriod(dayPeriodEnumValue, {
          width: "wide",
          context: "formatting"
        });
    }
  },
  // AM, PM, midnight, noon
  b: function b3(date, token, localize2) {
    var hours = date.getUTCHours();
    var dayPeriodEnumValue;
    if (hours === 12) {
      dayPeriodEnumValue = dayPeriodEnum.noon;
    } else if (hours === 0) {
      dayPeriodEnumValue = dayPeriodEnum.midnight;
    } else {
      dayPeriodEnumValue = hours / 12 >= 1 ? "pm" : "am";
    }
    switch (token) {
      case "b":
      case "bb":
        return localize2.dayPeriod(dayPeriodEnumValue, {
          width: "abbreviated",
          context: "formatting"
        });
      case "bbb":
        return localize2.dayPeriod(dayPeriodEnumValue, {
          width: "abbreviated",
          context: "formatting"
        }).toLowerCase();
      case "bbbbb":
        return localize2.dayPeriod(dayPeriodEnumValue, {
          width: "narrow",
          context: "formatting"
        });
      case "bbbb":
      default:
        return localize2.dayPeriod(dayPeriodEnumValue, {
          width: "wide",
          context: "formatting"
        });
    }
  },
  // in the morning, in the afternoon, in the evening, at night
  B: function B2(date, token, localize2) {
    var hours = date.getUTCHours();
    var dayPeriodEnumValue;
    if (hours >= 17) {
      dayPeriodEnumValue = dayPeriodEnum.evening;
    } else if (hours >= 12) {
      dayPeriodEnumValue = dayPeriodEnum.afternoon;
    } else if (hours >= 4) {
      dayPeriodEnumValue = dayPeriodEnum.morning;
    } else {
      dayPeriodEnumValue = dayPeriodEnum.night;
    }
    switch (token) {
      case "B":
      case "BB":
      case "BBB":
        return localize2.dayPeriod(dayPeriodEnumValue, {
          width: "abbreviated",
          context: "formatting"
        });
      case "BBBBB":
        return localize2.dayPeriod(dayPeriodEnumValue, {
          width: "narrow",
          context: "formatting"
        });
      case "BBBB":
      default:
        return localize2.dayPeriod(dayPeriodEnumValue, {
          width: "wide",
          context: "formatting"
        });
    }
  },
  // Hour [1-12]
  h: function h3(date, token, localize2) {
    if (token === "ho") {
      var hours = date.getUTCHours() % 12;
      if (hours === 0)
        hours = 12;
      return localize2.ordinalNumber(hours, {
        unit: "hour"
      });
    }
    return formatters$2.h(date, token);
  },
  // Hour [0-23]
  H: function H4(date, token, localize2) {
    if (token === "Ho") {
      return localize2.ordinalNumber(date.getUTCHours(), {
        unit: "hour"
      });
    }
    return formatters$2.H(date, token);
  },
  // Hour [0-11]
  K: function K2(date, token, localize2) {
    var hours = date.getUTCHours() % 12;
    if (token === "Ko") {
      return localize2.ordinalNumber(hours, {
        unit: "hour"
      });
    }
    return addLeadingZeros(hours, token.length);
  },
  // Hour [1-24]
  k: function k2(date, token, localize2) {
    var hours = date.getUTCHours();
    if (hours === 0)
      hours = 24;
    if (token === "ko") {
      return localize2.ordinalNumber(hours, {
        unit: "hour"
      });
    }
    return addLeadingZeros(hours, token.length);
  },
  // Minute
  m: function m3(date, token, localize2) {
    if (token === "mo") {
      return localize2.ordinalNumber(date.getUTCMinutes(), {
        unit: "minute"
      });
    }
    return formatters$2.m(date, token);
  },
  // Second
  s: function s3(date, token, localize2) {
    if (token === "so") {
      return localize2.ordinalNumber(date.getUTCSeconds(), {
        unit: "second"
      });
    }
    return formatters$2.s(date, token);
  },
  // Fraction of second
  S: function S3(date, token) {
    return formatters$2.S(date, token);
  },
  // Timezone (ISO-8601. If offset is 0, output is always `'Z'`)
  X: function X3(date, token, _localize, options) {
    var originalDate = options._originalDate || date;
    var timezoneOffset = originalDate.getTimezoneOffset();
    if (timezoneOffset === 0) {
      return "Z";
    }
    switch (token) {
      case "X":
        return formatTimezoneWithOptionalMinutes(timezoneOffset);
      case "XXXX":
      case "XX":
        return formatTimezone(timezoneOffset);
      case "XXXXX":
      case "XXX":
      default:
        return formatTimezone(timezoneOffset, ":");
    }
  },
  // Timezone (ISO-8601. If offset is 0, output is `'+00:00'` or equivalent)
  x: function x2(date, token, _localize, options) {
    var originalDate = options._originalDate || date;
    var timezoneOffset = originalDate.getTimezoneOffset();
    switch (token) {
      case "x":
        return formatTimezoneWithOptionalMinutes(timezoneOffset);
      case "xxxx":
      case "xx":
        return formatTimezone(timezoneOffset);
      case "xxxxx":
      case "xxx":
      default:
        return formatTimezone(timezoneOffset, ":");
    }
  },
  // Timezone (GMT)
  O: function O3(date, token, _localize, options) {
    var originalDate = options._originalDate || date;
    var timezoneOffset = originalDate.getTimezoneOffset();
    switch (token) {
      case "O":
      case "OO":
      case "OOO":
        return "GMT" + formatTimezoneShort(timezoneOffset, ":");
      case "OOOO":
      default:
        return "GMT" + formatTimezone(timezoneOffset, ":");
    }
  },
  // Timezone (specific non-location)
  z: function z3(date, token, _localize, options) {
    var originalDate = options._originalDate || date;
    var timezoneOffset = originalDate.getTimezoneOffset();
    switch (token) {
      case "z":
      case "zz":
      case "zzz":
        return "GMT" + formatTimezoneShort(timezoneOffset, ":");
      case "zzzz":
      default:
        return "GMT" + formatTimezone(timezoneOffset, ":");
    }
  },
  // Seconds timestamp
  t: function t2(date, token, _localize, options) {
    var originalDate = options._originalDate || date;
    var timestamp = Math.floor(originalDate.getTime() / 1e3);
    return addLeadingZeros(timestamp, token.length);
  },
  // Milliseconds timestamp
  T: function T3(date, token, _localize, options) {
    var originalDate = options._originalDate || date;
    var timestamp = originalDate.getTime();
    return addLeadingZeros(timestamp, token.length);
  }
};
function formatTimezoneShort(offset2, dirtyDelimiter) {
  var sign = offset2 > 0 ? "-" : "+";
  var absOffset = Math.abs(offset2);
  var hours = Math.floor(absOffset / 60);
  var minutes = absOffset % 60;
  if (minutes === 0) {
    return sign + String(hours);
  }
  var delimiter = dirtyDelimiter || "";
  return sign + String(hours) + delimiter + addLeadingZeros(minutes, 2);
}
function formatTimezoneWithOptionalMinutes(offset2, dirtyDelimiter) {
  if (offset2 % 60 === 0) {
    var sign = offset2 > 0 ? "-" : "+";
    return sign + addLeadingZeros(Math.abs(offset2) / 60, 2);
  }
  return formatTimezone(offset2, dirtyDelimiter);
}
function formatTimezone(offset2, dirtyDelimiter) {
  var delimiter = dirtyDelimiter || "";
  var sign = offset2 > 0 ? "-" : "+";
  var absOffset = Math.abs(offset2);
  var hours = addLeadingZeros(Math.floor(absOffset / 60), 2);
  var minutes = addLeadingZeros(absOffset % 60, 2);
  return sign + hours + delimiter + minutes;
}
var dateLongFormatter = function dateLongFormatter2(pattern, formatLong2) {
  switch (pattern) {
    case "P":
      return formatLong2.date({
        width: "short"
      });
    case "PP":
      return formatLong2.date({
        width: "medium"
      });
    case "PPP":
      return formatLong2.date({
        width: "long"
      });
    case "PPPP":
    default:
      return formatLong2.date({
        width: "full"
      });
  }
};
var timeLongFormatter = function timeLongFormatter2(pattern, formatLong2) {
  switch (pattern) {
    case "p":
      return formatLong2.time({
        width: "short"
      });
    case "pp":
      return formatLong2.time({
        width: "medium"
      });
    case "ppp":
      return formatLong2.time({
        width: "long"
      });
    case "pppp":
    default:
      return formatLong2.time({
        width: "full"
      });
  }
};
var dateTimeLongFormatter = function dateTimeLongFormatter2(pattern, formatLong2) {
  var matchResult = pattern.match(/(P+)(p+)?/) || [];
  var datePattern = matchResult[1];
  var timePattern = matchResult[2];
  if (!timePattern) {
    return dateLongFormatter(pattern, formatLong2);
  }
  var dateTimeFormat;
  switch (datePattern) {
    case "P":
      dateTimeFormat = formatLong2.dateTime({
        width: "short"
      });
      break;
    case "PP":
      dateTimeFormat = formatLong2.dateTime({
        width: "medium"
      });
      break;
    case "PPP":
      dateTimeFormat = formatLong2.dateTime({
        width: "long"
      });
      break;
    case "PPPP":
    default:
      dateTimeFormat = formatLong2.dateTime({
        width: "full"
      });
      break;
  }
  return dateTimeFormat.replace("{{date}}", dateLongFormatter(datePattern, formatLong2)).replace("{{time}}", timeLongFormatter(timePattern, formatLong2));
};
var longFormatters = {
  p: timeLongFormatter,
  P: dateTimeLongFormatter
};
var protectedDayOfYearTokens = ["D", "DD"];
var protectedWeekYearTokens = ["YY", "YYYY"];
function isProtectedDayOfYearToken(token) {
  return protectedDayOfYearTokens.indexOf(token) !== -1;
}
function isProtectedWeekYearToken(token) {
  return protectedWeekYearTokens.indexOf(token) !== -1;
}
function throwProtectedError(token, format2, input) {
  if (token === "YYYY") {
    throw new RangeError("Use `yyyy` instead of `YYYY` (in `".concat(format2, "`) for formatting years to the input `").concat(input, "`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));
  } else if (token === "YY") {
    throw new RangeError("Use `yy` instead of `YY` (in `".concat(format2, "`) for formatting years to the input `").concat(input, "`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));
  } else if (token === "D") {
    throw new RangeError("Use `d` instead of `D` (in `".concat(format2, "`) for formatting days of the month to the input `").concat(input, "`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));
  } else if (token === "DD") {
    throw new RangeError("Use `dd` instead of `DD` (in `".concat(format2, "`) for formatting days of the month to the input `").concat(input, "`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));
  }
}
var formatDistanceLocale = {
  lessThanXSeconds: {
    one: "less than a second",
    other: "less than {{count}} seconds"
  },
  xSeconds: {
    one: "1 second",
    other: "{{count}} seconds"
  },
  halfAMinute: "half a minute",
  lessThanXMinutes: {
    one: "less than a minute",
    other: "less than {{count}} minutes"
  },
  xMinutes: {
    one: "1 minute",
    other: "{{count}} minutes"
  },
  aboutXHours: {
    one: "about 1 hour",
    other: "about {{count}} hours"
  },
  xHours: {
    one: "1 hour",
    other: "{{count}} hours"
  },
  xDays: {
    one: "1 day",
    other: "{{count}} days"
  },
  aboutXWeeks: {
    one: "about 1 week",
    other: "about {{count}} weeks"
  },
  xWeeks: {
    one: "1 week",
    other: "{{count}} weeks"
  },
  aboutXMonths: {
    one: "about 1 month",
    other: "about {{count}} months"
  },
  xMonths: {
    one: "1 month",
    other: "{{count}} months"
  },
  aboutXYears: {
    one: "about 1 year",
    other: "about {{count}} years"
  },
  xYears: {
    one: "1 year",
    other: "{{count}} years"
  },
  overXYears: {
    one: "over 1 year",
    other: "over {{count}} years"
  },
  almostXYears: {
    one: "almost 1 year",
    other: "almost {{count}} years"
  }
};
var formatDistance = function formatDistance2(token, count2, options) {
  var result;
  var tokenValue = formatDistanceLocale[token];
  if (typeof tokenValue === "string") {
    result = tokenValue;
  } else if (count2 === 1) {
    result = tokenValue.one;
  } else {
    result = tokenValue.other.replace("{{count}}", count2.toString());
  }
  if (options !== null && options !== void 0 && options.addSuffix) {
    if (options.comparison && options.comparison > 0) {
      return "in " + result;
    } else {
      return result + " ago";
    }
  }
  return result;
};
const formatDistance$1 = formatDistance;
function buildFormatLongFn(args) {
  return function() {
    var options = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
    var width = options.width ? String(options.width) : args.defaultWidth;
    var format2 = args.formats[width] || args.formats[args.defaultWidth];
    return format2;
  };
}
var dateFormats = {
  full: "EEEE, MMMM do, y",
  long: "MMMM do, y",
  medium: "MMM d, y",
  short: "MM/dd/yyyy"
};
var timeFormats = {
  full: "h:mm:ss a zzzz",
  long: "h:mm:ss a z",
  medium: "h:mm:ss a",
  short: "h:mm a"
};
var dateTimeFormats = {
  full: "{{date}} 'at' {{time}}",
  long: "{{date}} 'at' {{time}}",
  medium: "{{date}}, {{time}}",
  short: "{{date}}, {{time}}"
};
var formatLong = {
  date: buildFormatLongFn({
    formats: dateFormats,
    defaultWidth: "full"
  }),
  time: buildFormatLongFn({
    formats: timeFormats,
    defaultWidth: "full"
  }),
  dateTime: buildFormatLongFn({
    formats: dateTimeFormats,
    defaultWidth: "full"
  })
};
const formatLong$1 = formatLong;
var formatRelativeLocale = {
  lastWeek: "'last' eeee 'at' p",
  yesterday: "'yesterday at' p",
  today: "'today at' p",
  tomorrow: "'tomorrow at' p",
  nextWeek: "eeee 'at' p",
  other: "P"
};
var formatRelative = function formatRelative2(token, _date, _baseDate, _options) {
  return formatRelativeLocale[token];
};
const formatRelative$1 = formatRelative;
function buildLocalizeFn(args) {
  return function(dirtyIndex, options) {
    var context = options !== null && options !== void 0 && options.context ? String(options.context) : "standalone";
    var valuesArray;
    if (context === "formatting" && args.formattingValues) {
      var defaultWidth = args.defaultFormattingWidth || args.defaultWidth;
      var width = options !== null && options !== void 0 && options.width ? String(options.width) : defaultWidth;
      valuesArray = args.formattingValues[width] || args.formattingValues[defaultWidth];
    } else {
      var _defaultWidth = args.defaultWidth;
      var _width = options !== null && options !== void 0 && options.width ? String(options.width) : args.defaultWidth;
      valuesArray = args.values[_width] || args.values[_defaultWidth];
    }
    var index = args.argumentCallback ? args.argumentCallback(dirtyIndex) : dirtyIndex;
    return valuesArray[index];
  };
}
var eraValues = {
  narrow: ["B", "A"],
  abbreviated: ["BC", "AD"],
  wide: ["Before Christ", "Anno Domini"]
};
var quarterValues = {
  narrow: ["1", "2", "3", "4"],
  abbreviated: ["Q1", "Q2", "Q3", "Q4"],
  wide: ["1st quarter", "2nd quarter", "3rd quarter", "4th quarter"]
};
var monthValues = {
  narrow: ["J", "F", "M", "A", "M", "J", "J", "A", "S", "O", "N", "D"],
  abbreviated: ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"],
  wide: ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"]
};
var dayValues = {
  narrow: ["S", "M", "T", "W", "T", "F", "S"],
  short: ["Su", "Mo", "Tu", "We", "Th", "Fr", "Sa"],
  abbreviated: ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"],
  wide: ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"]
};
var dayPeriodValues = {
  narrow: {
    am: "a",
    pm: "p",
    midnight: "mi",
    noon: "n",
    morning: "morning",
    afternoon: "afternoon",
    evening: "evening",
    night: "night"
  },
  abbreviated: {
    am: "AM",
    pm: "PM",
    midnight: "midnight",
    noon: "noon",
    morning: "morning",
    afternoon: "afternoon",
    evening: "evening",
    night: "night"
  },
  wide: {
    am: "a.m.",
    pm: "p.m.",
    midnight: "midnight",
    noon: "noon",
    morning: "morning",
    afternoon: "afternoon",
    evening: "evening",
    night: "night"
  }
};
var formattingDayPeriodValues = {
  narrow: {
    am: "a",
    pm: "p",
    midnight: "mi",
    noon: "n",
    morning: "in the morning",
    afternoon: "in the afternoon",
    evening: "in the evening",
    night: "at night"
  },
  abbreviated: {
    am: "AM",
    pm: "PM",
    midnight: "midnight",
    noon: "noon",
    morning: "in the morning",
    afternoon: "in the afternoon",
    evening: "in the evening",
    night: "at night"
  },
  wide: {
    am: "a.m.",
    pm: "p.m.",
    midnight: "midnight",
    noon: "noon",
    morning: "in the morning",
    afternoon: "in the afternoon",
    evening: "in the evening",
    night: "at night"
  }
};
var ordinalNumber = function ordinalNumber2(dirtyNumber, _options) {
  var number2 = Number(dirtyNumber);
  var rem100 = number2 % 100;
  if (rem100 > 20 || rem100 < 10) {
    switch (rem100 % 10) {
      case 1:
        return number2 + "st";
      case 2:
        return number2 + "nd";
      case 3:
        return number2 + "rd";
    }
  }
  return number2 + "th";
};
var localize = {
  ordinalNumber,
  era: buildLocalizeFn({
    values: eraValues,
    defaultWidth: "wide"
  }),
  quarter: buildLocalizeFn({
    values: quarterValues,
    defaultWidth: "wide",
    argumentCallback: function argumentCallback(quarter) {
      return quarter - 1;
    }
  }),
  month: buildLocalizeFn({
    values: monthValues,
    defaultWidth: "wide"
  }),
  day: buildLocalizeFn({
    values: dayValues,
    defaultWidth: "wide"
  }),
  dayPeriod: buildLocalizeFn({
    values: dayPeriodValues,
    defaultWidth: "wide",
    formattingValues: formattingDayPeriodValues,
    defaultFormattingWidth: "wide"
  })
};
const localize$1 = localize;
function buildMatchFn(args) {
  return function(string) {
    var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
    var width = options.width;
    var matchPattern = width && args.matchPatterns[width] || args.matchPatterns[args.defaultMatchWidth];
    var matchResult = string.match(matchPattern);
    if (!matchResult) {
      return null;
    }
    var matchedString = matchResult[0];
    var parsePatterns = width && args.parsePatterns[width] || args.parsePatterns[args.defaultParseWidth];
    var key = Array.isArray(parsePatterns) ? findIndex(parsePatterns, function(pattern) {
      return pattern.test(matchedString);
    }) : findKey(parsePatterns, function(pattern) {
      return pattern.test(matchedString);
    });
    var value;
    value = args.valueCallback ? args.valueCallback(key) : key;
    value = options.valueCallback ? options.valueCallback(value) : value;
    var rest = string.slice(matchedString.length);
    return {
      value,
      rest
    };
  };
}
function findKey(object, predicate) {
  for (var key in object) {
    if (object.hasOwnProperty(key) && predicate(object[key])) {
      return key;
    }
  }
  return void 0;
}
function findIndex(array, predicate) {
  for (var key = 0; key < array.length; key++) {
    if (predicate(array[key])) {
      return key;
    }
  }
  return void 0;
}
function buildMatchPatternFn(args) {
  return function(string) {
    var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
    var matchResult = string.match(args.matchPattern);
    if (!matchResult)
      return null;
    var matchedString = matchResult[0];
    var parseResult = string.match(args.parsePattern);
    if (!parseResult)
      return null;
    var value = args.valueCallback ? args.valueCallback(parseResult[0]) : parseResult[0];
    value = options.valueCallback ? options.valueCallback(value) : value;
    var rest = string.slice(matchedString.length);
    return {
      value,
      rest
    };
  };
}
var matchOrdinalNumberPattern = /^(\d+)(th|st|nd|rd)?/i;
var parseOrdinalNumberPattern = /\d+/i;
var matchEraPatterns = {
  narrow: /^(b|a)/i,
  abbreviated: /^(b\.?\s?c\.?|b\.?\s?c\.?\s?e\.?|a\.?\s?d\.?|c\.?\s?e\.?)/i,
  wide: /^(before christ|before common era|anno domini|common era)/i
};
var parseEraPatterns = {
  any: [/^b/i, /^(a|c)/i]
};
var matchQuarterPatterns = {
  narrow: /^[1234]/i,
  abbreviated: /^q[1234]/i,
  wide: /^[1234](th|st|nd|rd)? quarter/i
};
var parseQuarterPatterns = {
  any: [/1/i, /2/i, /3/i, /4/i]
};
var matchMonthPatterns = {
  narrow: /^[jfmasond]/i,
  abbreviated: /^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,
  wide: /^(january|february|march|april|may|june|july|august|september|october|november|december)/i
};
var parseMonthPatterns = {
  narrow: [/^j/i, /^f/i, /^m/i, /^a/i, /^m/i, /^j/i, /^j/i, /^a/i, /^s/i, /^o/i, /^n/i, /^d/i],
  any: [/^ja/i, /^f/i, /^mar/i, /^ap/i, /^may/i, /^jun/i, /^jul/i, /^au/i, /^s/i, /^o/i, /^n/i, /^d/i]
};
var matchDayPatterns = {
  narrow: /^[smtwf]/i,
  short: /^(su|mo|tu|we|th|fr|sa)/i,
  abbreviated: /^(sun|mon|tue|wed|thu|fri|sat)/i,
  wide: /^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i
};
var parseDayPatterns = {
  narrow: [/^s/i, /^m/i, /^t/i, /^w/i, /^t/i, /^f/i, /^s/i],
  any: [/^su/i, /^m/i, /^tu/i, /^w/i, /^th/i, /^f/i, /^sa/i]
};
var matchDayPeriodPatterns = {
  narrow: /^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,
  any: /^([ap]\.?\s?m\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i
};
var parseDayPeriodPatterns = {
  any: {
    am: /^a/i,
    pm: /^p/i,
    midnight: /^mi/i,
    noon: /^no/i,
    morning: /morning/i,
    afternoon: /afternoon/i,
    evening: /evening/i,
    night: /night/i
  }
};
var match = {
  ordinalNumber: buildMatchPatternFn({
    matchPattern: matchOrdinalNumberPattern,
    parsePattern: parseOrdinalNumberPattern,
    valueCallback: function valueCallback(value) {
      return parseInt(value, 10);
    }
  }),
  era: buildMatchFn({
    matchPatterns: matchEraPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: parseEraPatterns,
    defaultParseWidth: "any"
  }),
  quarter: buildMatchFn({
    matchPatterns: matchQuarterPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: parseQuarterPatterns,
    defaultParseWidth: "any",
    valueCallback: function valueCallback2(index) {
      return index + 1;
    }
  }),
  month: buildMatchFn({
    matchPatterns: matchMonthPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: parseMonthPatterns,
    defaultParseWidth: "any"
  }),
  day: buildMatchFn({
    matchPatterns: matchDayPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: parseDayPatterns,
    defaultParseWidth: "any"
  }),
  dayPeriod: buildMatchFn({
    matchPatterns: matchDayPeriodPatterns,
    defaultMatchWidth: "any",
    parsePatterns: parseDayPeriodPatterns,
    defaultParseWidth: "any"
  })
};
const match$1 = match;
var locale = {
  code: "en-US",
  formatDistance: formatDistance$1,
  formatLong: formatLong$1,
  formatRelative: formatRelative$1,
  localize: localize$1,
  match: match$1,
  options: {
    weekStartsOn: 0,
    firstWeekContainsDate: 1
  }
};
const defaultLocale = locale;
var formattingTokensRegExp$1 = /[yYQqMLwIdDecihHKkms]o|(\w)\1*|''|'(''|[^'])+('|$)|./g;
var longFormattingTokensRegExp$1 = /P+p+|P+|p+|''|'(''|[^'])+('|$)|./g;
var escapedStringRegExp$1 = /^'([^]*?)'?$/;
var doubleQuoteRegExp$1 = /''/g;
var unescapedLatinCharacterRegExp$1 = /[a-zA-Z]/;
function format$2(dirtyDate, dirtyFormatStr, options) {
  var _ref, _options$locale, _ref2, _ref3, _ref4, _options$firstWeekCon, _options$locale2, _options$locale2$opti, _defaultOptions$local, _defaultOptions$local2, _ref5, _ref6, _ref7, _options$weekStartsOn, _options$locale3, _options$locale3$opti, _defaultOptions$local3, _defaultOptions$local4;
  requiredArgs(2, arguments);
  var formatStr = String(dirtyFormatStr);
  var defaultOptions2 = getDefaultOptions();
  var locale2 = (_ref = (_options$locale = options === null || options === void 0 ? void 0 : options.locale) !== null && _options$locale !== void 0 ? _options$locale : defaultOptions2.locale) !== null && _ref !== void 0 ? _ref : defaultLocale;
  var firstWeekContainsDate = toInteger((_ref2 = (_ref3 = (_ref4 = (_options$firstWeekCon = options === null || options === void 0 ? void 0 : options.firstWeekContainsDate) !== null && _options$firstWeekCon !== void 0 ? _options$firstWeekCon : options === null || options === void 0 ? void 0 : (_options$locale2 = options.locale) === null || _options$locale2 === void 0 ? void 0 : (_options$locale2$opti = _options$locale2.options) === null || _options$locale2$opti === void 0 ? void 0 : _options$locale2$opti.firstWeekContainsDate) !== null && _ref4 !== void 0 ? _ref4 : defaultOptions2.firstWeekContainsDate) !== null && _ref3 !== void 0 ? _ref3 : (_defaultOptions$local = defaultOptions2.locale) === null || _defaultOptions$local === void 0 ? void 0 : (_defaultOptions$local2 = _defaultOptions$local.options) === null || _defaultOptions$local2 === void 0 ? void 0 : _defaultOptions$local2.firstWeekContainsDate) !== null && _ref2 !== void 0 ? _ref2 : 1);
  if (!(firstWeekContainsDate >= 1 && firstWeekContainsDate <= 7)) {
    throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");
  }
  var weekStartsOn = toInteger((_ref5 = (_ref6 = (_ref7 = (_options$weekStartsOn = options === null || options === void 0 ? void 0 : options.weekStartsOn) !== null && _options$weekStartsOn !== void 0 ? _options$weekStartsOn : options === null || options === void 0 ? void 0 : (_options$locale3 = options.locale) === null || _options$locale3 === void 0 ? void 0 : (_options$locale3$opti = _options$locale3.options) === null || _options$locale3$opti === void 0 ? void 0 : _options$locale3$opti.weekStartsOn) !== null && _ref7 !== void 0 ? _ref7 : defaultOptions2.weekStartsOn) !== null && _ref6 !== void 0 ? _ref6 : (_defaultOptions$local3 = defaultOptions2.locale) === null || _defaultOptions$local3 === void 0 ? void 0 : (_defaultOptions$local4 = _defaultOptions$local3.options) === null || _defaultOptions$local4 === void 0 ? void 0 : _defaultOptions$local4.weekStartsOn) !== null && _ref5 !== void 0 ? _ref5 : 0);
  if (!(weekStartsOn >= 0 && weekStartsOn <= 6)) {
    throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");
  }
  if (!locale2.localize) {
    throw new RangeError("locale must contain localize property");
  }
  if (!locale2.formatLong) {
    throw new RangeError("locale must contain formatLong property");
  }
  var originalDate = toDate(dirtyDate);
  if (!isValid(originalDate)) {
    throw new RangeError("Invalid time value");
  }
  var timezoneOffset = getTimezoneOffsetInMilliseconds(originalDate);
  var utcDate = subMilliseconds(originalDate, timezoneOffset);
  var formatterOptions = {
    firstWeekContainsDate,
    weekStartsOn,
    locale: locale2,
    _originalDate: originalDate
  };
  var result = formatStr.match(longFormattingTokensRegExp$1).map(function(substring) {
    var firstCharacter = substring[0];
    if (firstCharacter === "p" || firstCharacter === "P") {
      var longFormatter = longFormatters[firstCharacter];
      return longFormatter(substring, locale2.formatLong);
    }
    return substring;
  }).join("").match(formattingTokensRegExp$1).map(function(substring) {
    if (substring === "''") {
      return "'";
    }
    var firstCharacter = substring[0];
    if (firstCharacter === "'") {
      return cleanEscapedString$1(substring);
    }
    var formatter = formatters[firstCharacter];
    if (formatter) {
      if (!(options !== null && options !== void 0 && options.useAdditionalWeekYearTokens) && isProtectedWeekYearToken(substring)) {
        throwProtectedError(substring, dirtyFormatStr, String(dirtyDate));
      }
      if (!(options !== null && options !== void 0 && options.useAdditionalDayOfYearTokens) && isProtectedDayOfYearToken(substring)) {
        throwProtectedError(substring, dirtyFormatStr, String(dirtyDate));
      }
      return formatter(utcDate, substring, locale2.localize, formatterOptions);
    }
    if (firstCharacter.match(unescapedLatinCharacterRegExp$1)) {
      throw new RangeError("Format string contains an unescaped latin alphabet character `" + firstCharacter + "`");
    }
    return substring;
  }).join("");
  return result;
}
function cleanEscapedString$1(input) {
  var matched = input.match(escapedStringRegExp$1);
  if (!matched) {
    return input;
  }
  return matched[1].replace(doubleQuoteRegExp$1, "'");
}
function assign$2(target, object) {
  if (target == null) {
    throw new TypeError("assign requires that input parameter not be null or undefined");
  }
  for (var property in object) {
    if (Object.prototype.hasOwnProperty.call(object, property)) {
      target[property] = object[property];
    }
  }
  return target;
}
function getDay(dirtyDate) {
  requiredArgs(1, arguments);
  var date = toDate(dirtyDate);
  var day = date.getDay();
  return day;
}
function getDaysInMonth(dirtyDate) {
  requiredArgs(1, arguments);
  var date = toDate(dirtyDate);
  var year = date.getFullYear();
  var monthIndex = date.getMonth();
  var lastDayOfMonth = /* @__PURE__ */ new Date(0);
  lastDayOfMonth.setFullYear(year, monthIndex + 1, 0);
  lastDayOfMonth.setHours(0, 0, 0, 0);
  return lastDayOfMonth.getDate();
}
function getHours(dirtyDate) {
  requiredArgs(1, arguments);
  var date = toDate(dirtyDate);
  var hours = date.getHours();
  return hours;
}
var MILLISECONDS_IN_WEEK$1 = 6048e5;
function getISOWeek(dirtyDate) {
  requiredArgs(1, arguments);
  var date = toDate(dirtyDate);
  var diff = startOfISOWeek(date).getTime() - startOfISOWeekYear(date).getTime();
  return Math.round(diff / MILLISECONDS_IN_WEEK$1) + 1;
}
function getMinutes(dirtyDate) {
  requiredArgs(1, arguments);
  var date = toDate(dirtyDate);
  var minutes = date.getMinutes();
  return minutes;
}
function getMonth(dirtyDate) {
  requiredArgs(1, arguments);
  var date = toDate(dirtyDate);
  var month = date.getMonth();
  return month;
}
function getSeconds(dirtyDate) {
  requiredArgs(1, arguments);
  var date = toDate(dirtyDate);
  var seconds = date.getSeconds();
  return seconds;
}
function getWeekYear(dirtyDate, options) {
  var _ref, _ref2, _ref3, _options$firstWeekCon, _options$locale, _options$locale$optio, _defaultOptions$local, _defaultOptions$local2;
  requiredArgs(1, arguments);
  var date = toDate(dirtyDate);
  var year = date.getFullYear();
  var defaultOptions2 = getDefaultOptions();
  var firstWeekContainsDate = toInteger((_ref = (_ref2 = (_ref3 = (_options$firstWeekCon = options === null || options === void 0 ? void 0 : options.firstWeekContainsDate) !== null && _options$firstWeekCon !== void 0 ? _options$firstWeekCon : options === null || options === void 0 ? void 0 : (_options$locale = options.locale) === null || _options$locale === void 0 ? void 0 : (_options$locale$optio = _options$locale.options) === null || _options$locale$optio === void 0 ? void 0 : _options$locale$optio.firstWeekContainsDate) !== null && _ref3 !== void 0 ? _ref3 : defaultOptions2.firstWeekContainsDate) !== null && _ref2 !== void 0 ? _ref2 : (_defaultOptions$local = defaultOptions2.locale) === null || _defaultOptions$local === void 0 ? void 0 : (_defaultOptions$local2 = _defaultOptions$local.options) === null || _defaultOptions$local2 === void 0 ? void 0 : _defaultOptions$local2.firstWeekContainsDate) !== null && _ref !== void 0 ? _ref : 1);
  if (!(firstWeekContainsDate >= 1 && firstWeekContainsDate <= 7)) {
    throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");
  }
  var firstWeekOfNextYear = /* @__PURE__ */ new Date(0);
  firstWeekOfNextYear.setFullYear(year + 1, 0, firstWeekContainsDate);
  firstWeekOfNextYear.setHours(0, 0, 0, 0);
  var startOfNextYear = startOfWeek(firstWeekOfNextYear, options);
  var firstWeekOfThisYear = /* @__PURE__ */ new Date(0);
  firstWeekOfThisYear.setFullYear(year, 0, firstWeekContainsDate);
  firstWeekOfThisYear.setHours(0, 0, 0, 0);
  var startOfThisYear = startOfWeek(firstWeekOfThisYear, options);
  if (date.getTime() >= startOfNextYear.getTime()) {
    return year + 1;
  } else if (date.getTime() >= startOfThisYear.getTime()) {
    return year;
  } else {
    return year - 1;
  }
}
function startOfWeekYear(dirtyDate, options) {
  var _ref, _ref2, _ref3, _options$firstWeekCon, _options$locale, _options$locale$optio, _defaultOptions$local, _defaultOptions$local2;
  requiredArgs(1, arguments);
  var defaultOptions2 = getDefaultOptions();
  var firstWeekContainsDate = toInteger((_ref = (_ref2 = (_ref3 = (_options$firstWeekCon = options === null || options === void 0 ? void 0 : options.firstWeekContainsDate) !== null && _options$firstWeekCon !== void 0 ? _options$firstWeekCon : options === null || options === void 0 ? void 0 : (_options$locale = options.locale) === null || _options$locale === void 0 ? void 0 : (_options$locale$optio = _options$locale.options) === null || _options$locale$optio === void 0 ? void 0 : _options$locale$optio.firstWeekContainsDate) !== null && _ref3 !== void 0 ? _ref3 : defaultOptions2.firstWeekContainsDate) !== null && _ref2 !== void 0 ? _ref2 : (_defaultOptions$local = defaultOptions2.locale) === null || _defaultOptions$local === void 0 ? void 0 : (_defaultOptions$local2 = _defaultOptions$local.options) === null || _defaultOptions$local2 === void 0 ? void 0 : _defaultOptions$local2.firstWeekContainsDate) !== null && _ref !== void 0 ? _ref : 1);
  var year = getWeekYear(dirtyDate, options);
  var firstWeek = /* @__PURE__ */ new Date(0);
  firstWeek.setFullYear(year, 0, firstWeekContainsDate);
  firstWeek.setHours(0, 0, 0, 0);
  var date = startOfWeek(firstWeek, options);
  return date;
}
var MILLISECONDS_IN_WEEK = 6048e5;
function getWeek(dirtyDate, options) {
  requiredArgs(1, arguments);
  var date = toDate(dirtyDate);
  var diff = startOfWeek(date, options).getTime() - startOfWeekYear(date, options).getTime();
  return Math.round(diff / MILLISECONDS_IN_WEEK) + 1;
}
function getYear(dirtyDate) {
  requiredArgs(1, arguments);
  return toDate(dirtyDate).getFullYear();
}
function isAfter(dirtyDate, dirtyDateToCompare) {
  requiredArgs(2, arguments);
  var date = toDate(dirtyDate);
  var dateToCompare = toDate(dirtyDateToCompare);
  return date.getTime() > dateToCompare.getTime();
}
function isBefore(dirtyDate, dirtyDateToCompare) {
  requiredArgs(2, arguments);
  var date = toDate(dirtyDate);
  var dateToCompare = toDate(dirtyDateToCompare);
  return date.getTime() < dateToCompare.getTime();
}
function isEqual(dirtyLeftDate, dirtyRightDate) {
  requiredArgs(2, arguments);
  var dateLeft = toDate(dirtyLeftDate);
  var dateRight = toDate(dirtyRightDate);
  return dateLeft.getTime() === dateRight.getTime();
}
function _arrayLikeToArray(arr, len) {
  if (len == null || len > arr.length)
    len = arr.length;
  for (var i3 = 0, arr2 = new Array(len); i3 < len; i3++)
    arr2[i3] = arr[i3];
  return arr2;
}
function _unsupportedIterableToArray(o2, minLen) {
  if (!o2)
    return;
  if (typeof o2 === "string")
    return _arrayLikeToArray(o2, minLen);
  var n2 = Object.prototype.toString.call(o2).slice(8, -1);
  if (n2 === "Object" && o2.constructor)
    n2 = o2.constructor.name;
  if (n2 === "Map" || n2 === "Set")
    return Array.from(o2);
  if (n2 === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n2))
    return _arrayLikeToArray(o2, minLen);
}
function _createForOfIteratorHelper(o2, allowArrayLike) {
  var it3 = typeof Symbol !== "undefined" && o2[Symbol.iterator] || o2["@@iterator"];
  if (!it3) {
    if (Array.isArray(o2) || (it3 = _unsupportedIterableToArray(o2)) || allowArrayLike && o2 && typeof o2.length === "number") {
      if (it3)
        o2 = it3;
      var i3 = 0;
      var F2 = function F3() {
      };
      return {
        s: F2,
        n: function n2() {
          if (i3 >= o2.length)
            return {
              done: true
            };
          return {
            done: false,
            value: o2[i3++]
          };
        },
        e: function e3(_e2) {
          throw _e2;
        },
        f: F2
      };
    }
    throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }
  var normalCompletion = true, didErr = false, err;
  return {
    s: function s5() {
      it3 = it3.call(o2);
    },
    n: function n2() {
      var step = it3.next();
      normalCompletion = step.done;
      return step;
    },
    e: function e3(_e2) {
      didErr = true;
      err = _e2;
    },
    f: function f2() {
      try {
        if (!normalCompletion && it3["return"] != null)
          it3["return"]();
      } finally {
        if (didErr)
          throw err;
      }
    }
  };
}
function _assertThisInitialized(self2) {
  if (self2 === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }
  return self2;
}
function _setPrototypeOf(o2, p2) {
  _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf2(o3, p3) {
    o3.__proto__ = p3;
    return o3;
  };
  return _setPrototypeOf(o2, p2);
}
function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }
  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      writable: true,
      configurable: true
    }
  });
  Object.defineProperty(subClass, "prototype", {
    writable: false
  });
  if (superClass)
    _setPrototypeOf(subClass, superClass);
}
function _getPrototypeOf(o2) {
  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf2(o3) {
    return o3.__proto__ || Object.getPrototypeOf(o3);
  };
  return _getPrototypeOf(o2);
}
function _isNativeReflectConstruct() {
  if (typeof Reflect === "undefined" || !Reflect.construct)
    return false;
  if (Reflect.construct.sham)
    return false;
  if (typeof Proxy === "function")
    return true;
  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    }));
    return true;
  } catch (e3) {
    return false;
  }
}
function _possibleConstructorReturn(self2, call) {
  if (call && (_typeof(call) === "object" || typeof call === "function")) {
    return call;
  } else if (call !== void 0) {
    throw new TypeError("Derived constructors may only return object or undefined");
  }
  return _assertThisInitialized(self2);
}
function _createSuper(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf(Derived), result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn(this, result);
  };
}
function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}
function toPrimitive(t3, r2) {
  if ("object" != _typeof(t3) || !t3)
    return t3;
  var e3 = t3[Symbol.toPrimitive];
  if (void 0 !== e3) {
    var i3 = e3.call(t3, r2 || "default");
    if ("object" != _typeof(i3))
      return i3;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return ("string" === r2 ? String : Number)(t3);
}
function toPropertyKey(t3) {
  var i3 = toPrimitive(t3, "string");
  return "symbol" == _typeof(i3) ? i3 : String(i3);
}
function _defineProperties(target, props) {
  for (var i3 = 0; i3 < props.length; i3++) {
    var descriptor = props[i3];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor)
      descriptor.writable = true;
    Object.defineProperty(target, toPropertyKey(descriptor.key), descriptor);
  }
}
function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps)
    _defineProperties(Constructor.prototype, protoProps);
  if (staticProps)
    _defineProperties(Constructor, staticProps);
  Object.defineProperty(Constructor, "prototype", {
    writable: false
  });
  return Constructor;
}
function _defineProperty(obj, key, value) {
  key = toPropertyKey(key);
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }
  return obj;
}
var TIMEZONE_UNIT_PRIORITY = 10;
var Setter = /* @__PURE__ */ function() {
  function Setter2() {
    _classCallCheck(this, Setter2);
    _defineProperty(this, "priority", void 0);
    _defineProperty(this, "subPriority", 0);
  }
  _createClass(Setter2, [{
    key: "validate",
    value: function validate(_utcDate, _options) {
      return true;
    }
  }]);
  return Setter2;
}();
var ValueSetter = /* @__PURE__ */ function(_Setter) {
  _inherits(ValueSetter2, _Setter);
  var _super = _createSuper(ValueSetter2);
  function ValueSetter2(value, validateValue, setValue, priority, subPriority) {
    var _this;
    _classCallCheck(this, ValueSetter2);
    _this = _super.call(this);
    _this.value = value;
    _this.validateValue = validateValue;
    _this.setValue = setValue;
    _this.priority = priority;
    if (subPriority) {
      _this.subPriority = subPriority;
    }
    return _this;
  }
  _createClass(ValueSetter2, [{
    key: "validate",
    value: function validate(utcDate, options) {
      return this.validateValue(utcDate, this.value, options);
    }
  }, {
    key: "set",
    value: function set2(utcDate, flags, options) {
      return this.setValue(utcDate, flags, this.value, options);
    }
  }]);
  return ValueSetter2;
}(Setter);
var DateToSystemTimezoneSetter = /* @__PURE__ */ function(_Setter2) {
  _inherits(DateToSystemTimezoneSetter2, _Setter2);
  var _super2 = _createSuper(DateToSystemTimezoneSetter2);
  function DateToSystemTimezoneSetter2() {
    var _this2;
    _classCallCheck(this, DateToSystemTimezoneSetter2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this2 = _super2.call.apply(_super2, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this2), "priority", TIMEZONE_UNIT_PRIORITY);
    _defineProperty(_assertThisInitialized(_this2), "subPriority", -1);
    return _this2;
  }
  _createClass(DateToSystemTimezoneSetter2, [{
    key: "set",
    value: function set2(date, flags) {
      if (flags.timestampIsSet) {
        return date;
      }
      var convertedDate = /* @__PURE__ */ new Date(0);
      convertedDate.setFullYear(date.getUTCFullYear(), date.getUTCMonth(), date.getUTCDate());
      convertedDate.setHours(date.getUTCHours(), date.getUTCMinutes(), date.getUTCSeconds(), date.getUTCMilliseconds());
      return convertedDate;
    }
  }]);
  return DateToSystemTimezoneSetter2;
}(Setter);
var Parser = /* @__PURE__ */ function() {
  function Parser2() {
    _classCallCheck(this, Parser2);
    _defineProperty(this, "incompatibleTokens", void 0);
    _defineProperty(this, "priority", void 0);
    _defineProperty(this, "subPriority", void 0);
  }
  _createClass(Parser2, [{
    key: "run",
    value: function run(dateString, token, match2, options) {
      var result = this.parse(dateString, token, match2, options);
      if (!result) {
        return null;
      }
      return {
        setter: new ValueSetter(result.value, this.validate, this.set, this.priority, this.subPriority),
        rest: result.rest
      };
    }
  }, {
    key: "validate",
    value: function validate(_utcDate, _value, _options) {
      return true;
    }
  }]);
  return Parser2;
}();
var EraParser = /* @__PURE__ */ function(_Parser) {
  _inherits(EraParser2, _Parser);
  var _super = _createSuper(EraParser2);
  function EraParser2() {
    var _this;
    _classCallCheck(this, EraParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "priority", 140);
    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ["R", "u", "t", "T"]);
    return _this;
  }
  _createClass(EraParser2, [{
    key: "parse",
    value: function parse2(dateString, token, match2) {
      switch (token) {
        case "G":
        case "GG":
        case "GGG":
          return match2.era(dateString, {
            width: "abbreviated"
          }) || match2.era(dateString, {
            width: "narrow"
          });
        case "GGGGG":
          return match2.era(dateString, {
            width: "narrow"
          });
        case "GGGG":
        default:
          return match2.era(dateString, {
            width: "wide"
          }) || match2.era(dateString, {
            width: "abbreviated"
          }) || match2.era(dateString, {
            width: "narrow"
          });
      }
    }
  }, {
    key: "set",
    value: function set2(date, flags, value) {
      flags.era = value;
      date.setUTCFullYear(value, 0, 1);
      date.setUTCHours(0, 0, 0, 0);
      return date;
    }
  }]);
  return EraParser2;
}(Parser);
var numericPatterns = {
  month: /^(1[0-2]|0?\d)/,
  // 0 to 12
  date: /^(3[0-1]|[0-2]?\d)/,
  // 0 to 31
  dayOfYear: /^(36[0-6]|3[0-5]\d|[0-2]?\d?\d)/,
  // 0 to 366
  week: /^(5[0-3]|[0-4]?\d)/,
  // 0 to 53
  hour23h: /^(2[0-3]|[0-1]?\d)/,
  // 0 to 23
  hour24h: /^(2[0-4]|[0-1]?\d)/,
  // 0 to 24
  hour11h: /^(1[0-1]|0?\d)/,
  // 0 to 11
  hour12h: /^(1[0-2]|0?\d)/,
  // 0 to 12
  minute: /^[0-5]?\d/,
  // 0 to 59
  second: /^[0-5]?\d/,
  // 0 to 59
  singleDigit: /^\d/,
  // 0 to 9
  twoDigits: /^\d{1,2}/,
  // 0 to 99
  threeDigits: /^\d{1,3}/,
  // 0 to 999
  fourDigits: /^\d{1,4}/,
  // 0 to 9999
  anyDigitsSigned: /^-?\d+/,
  singleDigitSigned: /^-?\d/,
  // 0 to 9, -0 to -9
  twoDigitsSigned: /^-?\d{1,2}/,
  // 0 to 99, -0 to -99
  threeDigitsSigned: /^-?\d{1,3}/,
  // 0 to 999, -0 to -999
  fourDigitsSigned: /^-?\d{1,4}/
  // 0 to 9999, -0 to -9999
};
var timezonePatterns = {
  basicOptionalMinutes: /^([+-])(\d{2})(\d{2})?|Z/,
  basic: /^([+-])(\d{2})(\d{2})|Z/,
  basicOptionalSeconds: /^([+-])(\d{2})(\d{2})((\d{2}))?|Z/,
  extended: /^([+-])(\d{2}):(\d{2})|Z/,
  extendedOptionalSeconds: /^([+-])(\d{2}):(\d{2})(:(\d{2}))?|Z/
};
function mapValue(parseFnResult, mapFn) {
  if (!parseFnResult) {
    return parseFnResult;
  }
  return {
    value: mapFn(parseFnResult.value),
    rest: parseFnResult.rest
  };
}
function parseNumericPattern(pattern, dateString) {
  var matchResult = dateString.match(pattern);
  if (!matchResult) {
    return null;
  }
  return {
    value: parseInt(matchResult[0], 10),
    rest: dateString.slice(matchResult[0].length)
  };
}
function parseTimezonePattern(pattern, dateString) {
  var matchResult = dateString.match(pattern);
  if (!matchResult) {
    return null;
  }
  if (matchResult[0] === "Z") {
    return {
      value: 0,
      rest: dateString.slice(1)
    };
  }
  var sign = matchResult[1] === "+" ? 1 : -1;
  var hours = matchResult[2] ? parseInt(matchResult[2], 10) : 0;
  var minutes = matchResult[3] ? parseInt(matchResult[3], 10) : 0;
  var seconds = matchResult[5] ? parseInt(matchResult[5], 10) : 0;
  return {
    value: sign * (hours * millisecondsInHour + minutes * millisecondsInMinute + seconds * millisecondsInSecond),
    rest: dateString.slice(matchResult[0].length)
  };
}
function parseAnyDigitsSigned(dateString) {
  return parseNumericPattern(numericPatterns.anyDigitsSigned, dateString);
}
function parseNDigits(n2, dateString) {
  switch (n2) {
    case 1:
      return parseNumericPattern(numericPatterns.singleDigit, dateString);
    case 2:
      return parseNumericPattern(numericPatterns.twoDigits, dateString);
    case 3:
      return parseNumericPattern(numericPatterns.threeDigits, dateString);
    case 4:
      return parseNumericPattern(numericPatterns.fourDigits, dateString);
    default:
      return parseNumericPattern(new RegExp("^\\d{1," + n2 + "}"), dateString);
  }
}
function parseNDigitsSigned(n2, dateString) {
  switch (n2) {
    case 1:
      return parseNumericPattern(numericPatterns.singleDigitSigned, dateString);
    case 2:
      return parseNumericPattern(numericPatterns.twoDigitsSigned, dateString);
    case 3:
      return parseNumericPattern(numericPatterns.threeDigitsSigned, dateString);
    case 4:
      return parseNumericPattern(numericPatterns.fourDigitsSigned, dateString);
    default:
      return parseNumericPattern(new RegExp("^-?\\d{1," + n2 + "}"), dateString);
  }
}
function dayPeriodEnumToHours(dayPeriod) {
  switch (dayPeriod) {
    case "morning":
      return 4;
    case "evening":
      return 17;
    case "pm":
    case "noon":
    case "afternoon":
      return 12;
    case "am":
    case "midnight":
    case "night":
    default:
      return 0;
  }
}
function normalizeTwoDigitYear(twoDigitYear, currentYear) {
  var isCommonEra = currentYear > 0;
  var absCurrentYear = isCommonEra ? currentYear : 1 - currentYear;
  var result;
  if (absCurrentYear <= 50) {
    result = twoDigitYear || 100;
  } else {
    var rangeEnd = absCurrentYear + 50;
    var rangeEndCentury = Math.floor(rangeEnd / 100) * 100;
    var isPreviousCentury = twoDigitYear >= rangeEnd % 100;
    result = twoDigitYear + rangeEndCentury - (isPreviousCentury ? 100 : 0);
  }
  return isCommonEra ? result : 1 - result;
}
function isLeapYearIndex$1(year) {
  return year % 400 === 0 || year % 4 === 0 && year % 100 !== 0;
}
var YearParser = /* @__PURE__ */ function(_Parser) {
  _inherits(YearParser2, _Parser);
  var _super = _createSuper(YearParser2);
  function YearParser2() {
    var _this;
    _classCallCheck(this, YearParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "priority", 130);
    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ["Y", "R", "u", "w", "I", "i", "e", "c", "t", "T"]);
    return _this;
  }
  _createClass(YearParser2, [{
    key: "parse",
    value: function parse2(dateString, token, match2) {
      var valueCallback3 = function valueCallback4(year) {
        return {
          year,
          isTwoDigitYear: token === "yy"
        };
      };
      switch (token) {
        case "y":
          return mapValue(parseNDigits(4, dateString), valueCallback3);
        case "yo":
          return mapValue(match2.ordinalNumber(dateString, {
            unit: "year"
          }), valueCallback3);
        default:
          return mapValue(parseNDigits(token.length, dateString), valueCallback3);
      }
    }
  }, {
    key: "validate",
    value: function validate(_date, value) {
      return value.isTwoDigitYear || value.year > 0;
    }
  }, {
    key: "set",
    value: function set2(date, flags, value) {
      var currentYear = date.getUTCFullYear();
      if (value.isTwoDigitYear) {
        var normalizedTwoDigitYear = normalizeTwoDigitYear(value.year, currentYear);
        date.setUTCFullYear(normalizedTwoDigitYear, 0, 1);
        date.setUTCHours(0, 0, 0, 0);
        return date;
      }
      var year = !("era" in flags) || flags.era === 1 ? value.year : 1 - value.year;
      date.setUTCFullYear(year, 0, 1);
      date.setUTCHours(0, 0, 0, 0);
      return date;
    }
  }]);
  return YearParser2;
}(Parser);
var LocalWeekYearParser = /* @__PURE__ */ function(_Parser) {
  _inherits(LocalWeekYearParser2, _Parser);
  var _super = _createSuper(LocalWeekYearParser2);
  function LocalWeekYearParser2() {
    var _this;
    _classCallCheck(this, LocalWeekYearParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "priority", 130);
    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ["y", "R", "u", "Q", "q", "M", "L", "I", "d", "D", "i", "t", "T"]);
    return _this;
  }
  _createClass(LocalWeekYearParser2, [{
    key: "parse",
    value: function parse2(dateString, token, match2) {
      var valueCallback3 = function valueCallback4(year) {
        return {
          year,
          isTwoDigitYear: token === "YY"
        };
      };
      switch (token) {
        case "Y":
          return mapValue(parseNDigits(4, dateString), valueCallback3);
        case "Yo":
          return mapValue(match2.ordinalNumber(dateString, {
            unit: "year"
          }), valueCallback3);
        default:
          return mapValue(parseNDigits(token.length, dateString), valueCallback3);
      }
    }
  }, {
    key: "validate",
    value: function validate(_date, value) {
      return value.isTwoDigitYear || value.year > 0;
    }
  }, {
    key: "set",
    value: function set2(date, flags, value, options) {
      var currentYear = getUTCWeekYear(date, options);
      if (value.isTwoDigitYear) {
        var normalizedTwoDigitYear = normalizeTwoDigitYear(value.year, currentYear);
        date.setUTCFullYear(normalizedTwoDigitYear, 0, options.firstWeekContainsDate);
        date.setUTCHours(0, 0, 0, 0);
        return startOfUTCWeek(date, options);
      }
      var year = !("era" in flags) || flags.era === 1 ? value.year : 1 - value.year;
      date.setUTCFullYear(year, 0, options.firstWeekContainsDate);
      date.setUTCHours(0, 0, 0, 0);
      return startOfUTCWeek(date, options);
    }
  }]);
  return LocalWeekYearParser2;
}(Parser);
var ISOWeekYearParser = /* @__PURE__ */ function(_Parser) {
  _inherits(ISOWeekYearParser2, _Parser);
  var _super = _createSuper(ISOWeekYearParser2);
  function ISOWeekYearParser2() {
    var _this;
    _classCallCheck(this, ISOWeekYearParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "priority", 130);
    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ["G", "y", "Y", "u", "Q", "q", "M", "L", "w", "d", "D", "e", "c", "t", "T"]);
    return _this;
  }
  _createClass(ISOWeekYearParser2, [{
    key: "parse",
    value: function parse2(dateString, token) {
      if (token === "R") {
        return parseNDigitsSigned(4, dateString);
      }
      return parseNDigitsSigned(token.length, dateString);
    }
  }, {
    key: "set",
    value: function set2(_date, _flags, value) {
      var firstWeekOfYear = /* @__PURE__ */ new Date(0);
      firstWeekOfYear.setUTCFullYear(value, 0, 4);
      firstWeekOfYear.setUTCHours(0, 0, 0, 0);
      return startOfUTCISOWeek(firstWeekOfYear);
    }
  }]);
  return ISOWeekYearParser2;
}(Parser);
var ExtendedYearParser = /* @__PURE__ */ function(_Parser) {
  _inherits(ExtendedYearParser2, _Parser);
  var _super = _createSuper(ExtendedYearParser2);
  function ExtendedYearParser2() {
    var _this;
    _classCallCheck(this, ExtendedYearParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "priority", 130);
    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ["G", "y", "Y", "R", "w", "I", "i", "e", "c", "t", "T"]);
    return _this;
  }
  _createClass(ExtendedYearParser2, [{
    key: "parse",
    value: function parse2(dateString, token) {
      if (token === "u") {
        return parseNDigitsSigned(4, dateString);
      }
      return parseNDigitsSigned(token.length, dateString);
    }
  }, {
    key: "set",
    value: function set2(date, _flags, value) {
      date.setUTCFullYear(value, 0, 1);
      date.setUTCHours(0, 0, 0, 0);
      return date;
    }
  }]);
  return ExtendedYearParser2;
}(Parser);
var QuarterParser = /* @__PURE__ */ function(_Parser) {
  _inherits(QuarterParser2, _Parser);
  var _super = _createSuper(QuarterParser2);
  function QuarterParser2() {
    var _this;
    _classCallCheck(this, QuarterParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "priority", 120);
    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ["Y", "R", "q", "M", "L", "w", "I", "d", "D", "i", "e", "c", "t", "T"]);
    return _this;
  }
  _createClass(QuarterParser2, [{
    key: "parse",
    value: function parse2(dateString, token, match2) {
      switch (token) {
        case "Q":
        case "QQ":
          return parseNDigits(token.length, dateString);
        case "Qo":
          return match2.ordinalNumber(dateString, {
            unit: "quarter"
          });
        case "QQQ":
          return match2.quarter(dateString, {
            width: "abbreviated",
            context: "formatting"
          }) || match2.quarter(dateString, {
            width: "narrow",
            context: "formatting"
          });
        case "QQQQQ":
          return match2.quarter(dateString, {
            width: "narrow",
            context: "formatting"
          });
        case "QQQQ":
        default:
          return match2.quarter(dateString, {
            width: "wide",
            context: "formatting"
          }) || match2.quarter(dateString, {
            width: "abbreviated",
            context: "formatting"
          }) || match2.quarter(dateString, {
            width: "narrow",
            context: "formatting"
          });
      }
    }
  }, {
    key: "validate",
    value: function validate(_date, value) {
      return value >= 1 && value <= 4;
    }
  }, {
    key: "set",
    value: function set2(date, _flags, value) {
      date.setUTCMonth((value - 1) * 3, 1);
      date.setUTCHours(0, 0, 0, 0);
      return date;
    }
  }]);
  return QuarterParser2;
}(Parser);
var StandAloneQuarterParser = /* @__PURE__ */ function(_Parser) {
  _inherits(StandAloneQuarterParser2, _Parser);
  var _super = _createSuper(StandAloneQuarterParser2);
  function StandAloneQuarterParser2() {
    var _this;
    _classCallCheck(this, StandAloneQuarterParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "priority", 120);
    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ["Y", "R", "Q", "M", "L", "w", "I", "d", "D", "i", "e", "c", "t", "T"]);
    return _this;
  }
  _createClass(StandAloneQuarterParser2, [{
    key: "parse",
    value: function parse2(dateString, token, match2) {
      switch (token) {
        case "q":
        case "qq":
          return parseNDigits(token.length, dateString);
        case "qo":
          return match2.ordinalNumber(dateString, {
            unit: "quarter"
          });
        case "qqq":
          return match2.quarter(dateString, {
            width: "abbreviated",
            context: "standalone"
          }) || match2.quarter(dateString, {
            width: "narrow",
            context: "standalone"
          });
        case "qqqqq":
          return match2.quarter(dateString, {
            width: "narrow",
            context: "standalone"
          });
        case "qqqq":
        default:
          return match2.quarter(dateString, {
            width: "wide",
            context: "standalone"
          }) || match2.quarter(dateString, {
            width: "abbreviated",
            context: "standalone"
          }) || match2.quarter(dateString, {
            width: "narrow",
            context: "standalone"
          });
      }
    }
  }, {
    key: "validate",
    value: function validate(_date, value) {
      return value >= 1 && value <= 4;
    }
  }, {
    key: "set",
    value: function set2(date, _flags, value) {
      date.setUTCMonth((value - 1) * 3, 1);
      date.setUTCHours(0, 0, 0, 0);
      return date;
    }
  }]);
  return StandAloneQuarterParser2;
}(Parser);
var MonthParser = /* @__PURE__ */ function(_Parser) {
  _inherits(MonthParser2, _Parser);
  var _super = _createSuper(MonthParser2);
  function MonthParser2() {
    var _this;
    _classCallCheck(this, MonthParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ["Y", "R", "q", "Q", "L", "w", "I", "D", "i", "e", "c", "t", "T"]);
    _defineProperty(_assertThisInitialized(_this), "priority", 110);
    return _this;
  }
  _createClass(MonthParser2, [{
    key: "parse",
    value: function parse2(dateString, token, match2) {
      var valueCallback3 = function valueCallback4(value) {
        return value - 1;
      };
      switch (token) {
        case "M":
          return mapValue(parseNumericPattern(numericPatterns.month, dateString), valueCallback3);
        case "MM":
          return mapValue(parseNDigits(2, dateString), valueCallback3);
        case "Mo":
          return mapValue(match2.ordinalNumber(dateString, {
            unit: "month"
          }), valueCallback3);
        case "MMM":
          return match2.month(dateString, {
            width: "abbreviated",
            context: "formatting"
          }) || match2.month(dateString, {
            width: "narrow",
            context: "formatting"
          });
        case "MMMMM":
          return match2.month(dateString, {
            width: "narrow",
            context: "formatting"
          });
        case "MMMM":
        default:
          return match2.month(dateString, {
            width: "wide",
            context: "formatting"
          }) || match2.month(dateString, {
            width: "abbreviated",
            context: "formatting"
          }) || match2.month(dateString, {
            width: "narrow",
            context: "formatting"
          });
      }
    }
  }, {
    key: "validate",
    value: function validate(_date, value) {
      return value >= 0 && value <= 11;
    }
  }, {
    key: "set",
    value: function set2(date, _flags, value) {
      date.setUTCMonth(value, 1);
      date.setUTCHours(0, 0, 0, 0);
      return date;
    }
  }]);
  return MonthParser2;
}(Parser);
var StandAloneMonthParser = /* @__PURE__ */ function(_Parser) {
  _inherits(StandAloneMonthParser2, _Parser);
  var _super = _createSuper(StandAloneMonthParser2);
  function StandAloneMonthParser2() {
    var _this;
    _classCallCheck(this, StandAloneMonthParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "priority", 110);
    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ["Y", "R", "q", "Q", "M", "w", "I", "D", "i", "e", "c", "t", "T"]);
    return _this;
  }
  _createClass(StandAloneMonthParser2, [{
    key: "parse",
    value: function parse2(dateString, token, match2) {
      var valueCallback3 = function valueCallback4(value) {
        return value - 1;
      };
      switch (token) {
        case "L":
          return mapValue(parseNumericPattern(numericPatterns.month, dateString), valueCallback3);
        case "LL":
          return mapValue(parseNDigits(2, dateString), valueCallback3);
        case "Lo":
          return mapValue(match2.ordinalNumber(dateString, {
            unit: "month"
          }), valueCallback3);
        case "LLL":
          return match2.month(dateString, {
            width: "abbreviated",
            context: "standalone"
          }) || match2.month(dateString, {
            width: "narrow",
            context: "standalone"
          });
        case "LLLLL":
          return match2.month(dateString, {
            width: "narrow",
            context: "standalone"
          });
        case "LLLL":
        default:
          return match2.month(dateString, {
            width: "wide",
            context: "standalone"
          }) || match2.month(dateString, {
            width: "abbreviated",
            context: "standalone"
          }) || match2.month(dateString, {
            width: "narrow",
            context: "standalone"
          });
      }
    }
  }, {
    key: "validate",
    value: function validate(_date, value) {
      return value >= 0 && value <= 11;
    }
  }, {
    key: "set",
    value: function set2(date, _flags, value) {
      date.setUTCMonth(value, 1);
      date.setUTCHours(0, 0, 0, 0);
      return date;
    }
  }]);
  return StandAloneMonthParser2;
}(Parser);
function setUTCWeek(dirtyDate, dirtyWeek, options) {
  requiredArgs(2, arguments);
  var date = toDate(dirtyDate);
  var week = toInteger(dirtyWeek);
  var diff = getUTCWeek(date, options) - week;
  date.setUTCDate(date.getUTCDate() - diff * 7);
  return date;
}
var LocalWeekParser = /* @__PURE__ */ function(_Parser) {
  _inherits(LocalWeekParser2, _Parser);
  var _super = _createSuper(LocalWeekParser2);
  function LocalWeekParser2() {
    var _this;
    _classCallCheck(this, LocalWeekParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "priority", 100);
    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ["y", "R", "u", "q", "Q", "M", "L", "I", "d", "D", "i", "t", "T"]);
    return _this;
  }
  _createClass(LocalWeekParser2, [{
    key: "parse",
    value: function parse2(dateString, token, match2) {
      switch (token) {
        case "w":
          return parseNumericPattern(numericPatterns.week, dateString);
        case "wo":
          return match2.ordinalNumber(dateString, {
            unit: "week"
          });
        default:
          return parseNDigits(token.length, dateString);
      }
    }
  }, {
    key: "validate",
    value: function validate(_date, value) {
      return value >= 1 && value <= 53;
    }
  }, {
    key: "set",
    value: function set2(date, _flags, value, options) {
      return startOfUTCWeek(setUTCWeek(date, value, options), options);
    }
  }]);
  return LocalWeekParser2;
}(Parser);
function setUTCISOWeek(dirtyDate, dirtyISOWeek) {
  requiredArgs(2, arguments);
  var date = toDate(dirtyDate);
  var isoWeek = toInteger(dirtyISOWeek);
  var diff = getUTCISOWeek(date) - isoWeek;
  date.setUTCDate(date.getUTCDate() - diff * 7);
  return date;
}
var ISOWeekParser = /* @__PURE__ */ function(_Parser) {
  _inherits(ISOWeekParser2, _Parser);
  var _super = _createSuper(ISOWeekParser2);
  function ISOWeekParser2() {
    var _this;
    _classCallCheck(this, ISOWeekParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "priority", 100);
    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ["y", "Y", "u", "q", "Q", "M", "L", "w", "d", "D", "e", "c", "t", "T"]);
    return _this;
  }
  _createClass(ISOWeekParser2, [{
    key: "parse",
    value: function parse2(dateString, token, match2) {
      switch (token) {
        case "I":
          return parseNumericPattern(numericPatterns.week, dateString);
        case "Io":
          return match2.ordinalNumber(dateString, {
            unit: "week"
          });
        default:
          return parseNDigits(token.length, dateString);
      }
    }
  }, {
    key: "validate",
    value: function validate(_date, value) {
      return value >= 1 && value <= 53;
    }
  }, {
    key: "set",
    value: function set2(date, _flags, value) {
      return startOfUTCISOWeek(setUTCISOWeek(date, value));
    }
  }]);
  return ISOWeekParser2;
}(Parser);
var DAYS_IN_MONTH = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];
var DAYS_IN_MONTH_LEAP_YEAR = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];
var DateParser = /* @__PURE__ */ function(_Parser) {
  _inherits(DateParser2, _Parser);
  var _super = _createSuper(DateParser2);
  function DateParser2() {
    var _this;
    _classCallCheck(this, DateParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "priority", 90);
    _defineProperty(_assertThisInitialized(_this), "subPriority", 1);
    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ["Y", "R", "q", "Q", "w", "I", "D", "i", "e", "c", "t", "T"]);
    return _this;
  }
  _createClass(DateParser2, [{
    key: "parse",
    value: function parse2(dateString, token, match2) {
      switch (token) {
        case "d":
          return parseNumericPattern(numericPatterns.date, dateString);
        case "do":
          return match2.ordinalNumber(dateString, {
            unit: "date"
          });
        default:
          return parseNDigits(token.length, dateString);
      }
    }
  }, {
    key: "validate",
    value: function validate(date, value) {
      var year = date.getUTCFullYear();
      var isLeapYear = isLeapYearIndex$1(year);
      var month = date.getUTCMonth();
      if (isLeapYear) {
        return value >= 1 && value <= DAYS_IN_MONTH_LEAP_YEAR[month];
      } else {
        return value >= 1 && value <= DAYS_IN_MONTH[month];
      }
    }
  }, {
    key: "set",
    value: function set2(date, _flags, value) {
      date.setUTCDate(value);
      date.setUTCHours(0, 0, 0, 0);
      return date;
    }
  }]);
  return DateParser2;
}(Parser);
var DayOfYearParser = /* @__PURE__ */ function(_Parser) {
  _inherits(DayOfYearParser2, _Parser);
  var _super = _createSuper(DayOfYearParser2);
  function DayOfYearParser2() {
    var _this;
    _classCallCheck(this, DayOfYearParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "priority", 90);
    _defineProperty(_assertThisInitialized(_this), "subpriority", 1);
    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ["Y", "R", "q", "Q", "M", "L", "w", "I", "d", "E", "i", "e", "c", "t", "T"]);
    return _this;
  }
  _createClass(DayOfYearParser2, [{
    key: "parse",
    value: function parse2(dateString, token, match2) {
      switch (token) {
        case "D":
        case "DD":
          return parseNumericPattern(numericPatterns.dayOfYear, dateString);
        case "Do":
          return match2.ordinalNumber(dateString, {
            unit: "date"
          });
        default:
          return parseNDigits(token.length, dateString);
      }
    }
  }, {
    key: "validate",
    value: function validate(date, value) {
      var year = date.getUTCFullYear();
      var isLeapYear = isLeapYearIndex$1(year);
      if (isLeapYear) {
        return value >= 1 && value <= 366;
      } else {
        return value >= 1 && value <= 365;
      }
    }
  }, {
    key: "set",
    value: function set2(date, _flags, value) {
      date.setUTCMonth(0, value);
      date.setUTCHours(0, 0, 0, 0);
      return date;
    }
  }]);
  return DayOfYearParser2;
}(Parser);
function setUTCDay(dirtyDate, dirtyDay, options) {
  var _ref, _ref2, _ref3, _options$weekStartsOn, _options$locale, _options$locale$optio, _defaultOptions$local, _defaultOptions$local2;
  requiredArgs(2, arguments);
  var defaultOptions2 = getDefaultOptions();
  var weekStartsOn = toInteger((_ref = (_ref2 = (_ref3 = (_options$weekStartsOn = options === null || options === void 0 ? void 0 : options.weekStartsOn) !== null && _options$weekStartsOn !== void 0 ? _options$weekStartsOn : options === null || options === void 0 ? void 0 : (_options$locale = options.locale) === null || _options$locale === void 0 ? void 0 : (_options$locale$optio = _options$locale.options) === null || _options$locale$optio === void 0 ? void 0 : _options$locale$optio.weekStartsOn) !== null && _ref3 !== void 0 ? _ref3 : defaultOptions2.weekStartsOn) !== null && _ref2 !== void 0 ? _ref2 : (_defaultOptions$local = defaultOptions2.locale) === null || _defaultOptions$local === void 0 ? void 0 : (_defaultOptions$local2 = _defaultOptions$local.options) === null || _defaultOptions$local2 === void 0 ? void 0 : _defaultOptions$local2.weekStartsOn) !== null && _ref !== void 0 ? _ref : 0);
  if (!(weekStartsOn >= 0 && weekStartsOn <= 6)) {
    throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");
  }
  var date = toDate(dirtyDate);
  var day = toInteger(dirtyDay);
  var currentDay = date.getUTCDay();
  var remainder = day % 7;
  var dayIndex = (remainder + 7) % 7;
  var diff = (dayIndex < weekStartsOn ? 7 : 0) + day - currentDay;
  date.setUTCDate(date.getUTCDate() + diff);
  return date;
}
var DayParser = /* @__PURE__ */ function(_Parser) {
  _inherits(DayParser2, _Parser);
  var _super = _createSuper(DayParser2);
  function DayParser2() {
    var _this;
    _classCallCheck(this, DayParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "priority", 90);
    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ["D", "i", "e", "c", "t", "T"]);
    return _this;
  }
  _createClass(DayParser2, [{
    key: "parse",
    value: function parse2(dateString, token, match2) {
      switch (token) {
        case "E":
        case "EE":
        case "EEE":
          return match2.day(dateString, {
            width: "abbreviated",
            context: "formatting"
          }) || match2.day(dateString, {
            width: "short",
            context: "formatting"
          }) || match2.day(dateString, {
            width: "narrow",
            context: "formatting"
          });
        case "EEEEE":
          return match2.day(dateString, {
            width: "narrow",
            context: "formatting"
          });
        case "EEEEEE":
          return match2.day(dateString, {
            width: "short",
            context: "formatting"
          }) || match2.day(dateString, {
            width: "narrow",
            context: "formatting"
          });
        case "EEEE":
        default:
          return match2.day(dateString, {
            width: "wide",
            context: "formatting"
          }) || match2.day(dateString, {
            width: "abbreviated",
            context: "formatting"
          }) || match2.day(dateString, {
            width: "short",
            context: "formatting"
          }) || match2.day(dateString, {
            width: "narrow",
            context: "formatting"
          });
      }
    }
  }, {
    key: "validate",
    value: function validate(_date, value) {
      return value >= 0 && value <= 6;
    }
  }, {
    key: "set",
    value: function set2(date, _flags, value, options) {
      date = setUTCDay(date, value, options);
      date.setUTCHours(0, 0, 0, 0);
      return date;
    }
  }]);
  return DayParser2;
}(Parser);
var LocalDayParser = /* @__PURE__ */ function(_Parser) {
  _inherits(LocalDayParser2, _Parser);
  var _super = _createSuper(LocalDayParser2);
  function LocalDayParser2() {
    var _this;
    _classCallCheck(this, LocalDayParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "priority", 90);
    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ["y", "R", "u", "q", "Q", "M", "L", "I", "d", "D", "E", "i", "c", "t", "T"]);
    return _this;
  }
  _createClass(LocalDayParser2, [{
    key: "parse",
    value: function parse2(dateString, token, match2, options) {
      var valueCallback3 = function valueCallback4(value) {
        var wholeWeekDays = Math.floor((value - 1) / 7) * 7;
        return (value + options.weekStartsOn + 6) % 7 + wholeWeekDays;
      };
      switch (token) {
        case "e":
        case "ee":
          return mapValue(parseNDigits(token.length, dateString), valueCallback3);
        case "eo":
          return mapValue(match2.ordinalNumber(dateString, {
            unit: "day"
          }), valueCallback3);
        case "eee":
          return match2.day(dateString, {
            width: "abbreviated",
            context: "formatting"
          }) || match2.day(dateString, {
            width: "short",
            context: "formatting"
          }) || match2.day(dateString, {
            width: "narrow",
            context: "formatting"
          });
        case "eeeee":
          return match2.day(dateString, {
            width: "narrow",
            context: "formatting"
          });
        case "eeeeee":
          return match2.day(dateString, {
            width: "short",
            context: "formatting"
          }) || match2.day(dateString, {
            width: "narrow",
            context: "formatting"
          });
        case "eeee":
        default:
          return match2.day(dateString, {
            width: "wide",
            context: "formatting"
          }) || match2.day(dateString, {
            width: "abbreviated",
            context: "formatting"
          }) || match2.day(dateString, {
            width: "short",
            context: "formatting"
          }) || match2.day(dateString, {
            width: "narrow",
            context: "formatting"
          });
      }
    }
  }, {
    key: "validate",
    value: function validate(_date, value) {
      return value >= 0 && value <= 6;
    }
  }, {
    key: "set",
    value: function set2(date, _flags, value, options) {
      date = setUTCDay(date, value, options);
      date.setUTCHours(0, 0, 0, 0);
      return date;
    }
  }]);
  return LocalDayParser2;
}(Parser);
var StandAloneLocalDayParser = /* @__PURE__ */ function(_Parser) {
  _inherits(StandAloneLocalDayParser2, _Parser);
  var _super = _createSuper(StandAloneLocalDayParser2);
  function StandAloneLocalDayParser2() {
    var _this;
    _classCallCheck(this, StandAloneLocalDayParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "priority", 90);
    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ["y", "R", "u", "q", "Q", "M", "L", "I", "d", "D", "E", "i", "e", "t", "T"]);
    return _this;
  }
  _createClass(StandAloneLocalDayParser2, [{
    key: "parse",
    value: function parse2(dateString, token, match2, options) {
      var valueCallback3 = function valueCallback4(value) {
        var wholeWeekDays = Math.floor((value - 1) / 7) * 7;
        return (value + options.weekStartsOn + 6) % 7 + wholeWeekDays;
      };
      switch (token) {
        case "c":
        case "cc":
          return mapValue(parseNDigits(token.length, dateString), valueCallback3);
        case "co":
          return mapValue(match2.ordinalNumber(dateString, {
            unit: "day"
          }), valueCallback3);
        case "ccc":
          return match2.day(dateString, {
            width: "abbreviated",
            context: "standalone"
          }) || match2.day(dateString, {
            width: "short",
            context: "standalone"
          }) || match2.day(dateString, {
            width: "narrow",
            context: "standalone"
          });
        case "ccccc":
          return match2.day(dateString, {
            width: "narrow",
            context: "standalone"
          });
        case "cccccc":
          return match2.day(dateString, {
            width: "short",
            context: "standalone"
          }) || match2.day(dateString, {
            width: "narrow",
            context: "standalone"
          });
        case "cccc":
        default:
          return match2.day(dateString, {
            width: "wide",
            context: "standalone"
          }) || match2.day(dateString, {
            width: "abbreviated",
            context: "standalone"
          }) || match2.day(dateString, {
            width: "short",
            context: "standalone"
          }) || match2.day(dateString, {
            width: "narrow",
            context: "standalone"
          });
      }
    }
  }, {
    key: "validate",
    value: function validate(_date, value) {
      return value >= 0 && value <= 6;
    }
  }, {
    key: "set",
    value: function set2(date, _flags, value, options) {
      date = setUTCDay(date, value, options);
      date.setUTCHours(0, 0, 0, 0);
      return date;
    }
  }]);
  return StandAloneLocalDayParser2;
}(Parser);
function setUTCISODay(dirtyDate, dirtyDay) {
  requiredArgs(2, arguments);
  var day = toInteger(dirtyDay);
  if (day % 7 === 0) {
    day = day - 7;
  }
  var weekStartsOn = 1;
  var date = toDate(dirtyDate);
  var currentDay = date.getUTCDay();
  var remainder = day % 7;
  var dayIndex = (remainder + 7) % 7;
  var diff = (dayIndex < weekStartsOn ? 7 : 0) + day - currentDay;
  date.setUTCDate(date.getUTCDate() + diff);
  return date;
}
var ISODayParser = /* @__PURE__ */ function(_Parser) {
  _inherits(ISODayParser2, _Parser);
  var _super = _createSuper(ISODayParser2);
  function ISODayParser2() {
    var _this;
    _classCallCheck(this, ISODayParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "priority", 90);
    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ["y", "Y", "u", "q", "Q", "M", "L", "w", "d", "D", "E", "e", "c", "t", "T"]);
    return _this;
  }
  _createClass(ISODayParser2, [{
    key: "parse",
    value: function parse2(dateString, token, match2) {
      var valueCallback3 = function valueCallback4(value) {
        if (value === 0) {
          return 7;
        }
        return value;
      };
      switch (token) {
        case "i":
        case "ii":
          return parseNDigits(token.length, dateString);
        case "io":
          return match2.ordinalNumber(dateString, {
            unit: "day"
          });
        case "iii":
          return mapValue(match2.day(dateString, {
            width: "abbreviated",
            context: "formatting"
          }) || match2.day(dateString, {
            width: "short",
            context: "formatting"
          }) || match2.day(dateString, {
            width: "narrow",
            context: "formatting"
          }), valueCallback3);
        case "iiiii":
          return mapValue(match2.day(dateString, {
            width: "narrow",
            context: "formatting"
          }), valueCallback3);
        case "iiiiii":
          return mapValue(match2.day(dateString, {
            width: "short",
            context: "formatting"
          }) || match2.day(dateString, {
            width: "narrow",
            context: "formatting"
          }), valueCallback3);
        case "iiii":
        default:
          return mapValue(match2.day(dateString, {
            width: "wide",
            context: "formatting"
          }) || match2.day(dateString, {
            width: "abbreviated",
            context: "formatting"
          }) || match2.day(dateString, {
            width: "short",
            context: "formatting"
          }) || match2.day(dateString, {
            width: "narrow",
            context: "formatting"
          }), valueCallback3);
      }
    }
  }, {
    key: "validate",
    value: function validate(_date, value) {
      return value >= 1 && value <= 7;
    }
  }, {
    key: "set",
    value: function set2(date, _flags, value) {
      date = setUTCISODay(date, value);
      date.setUTCHours(0, 0, 0, 0);
      return date;
    }
  }]);
  return ISODayParser2;
}(Parser);
var AMPMParser = /* @__PURE__ */ function(_Parser) {
  _inherits(AMPMParser2, _Parser);
  var _super = _createSuper(AMPMParser2);
  function AMPMParser2() {
    var _this;
    _classCallCheck(this, AMPMParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "priority", 80);
    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ["b", "B", "H", "k", "t", "T"]);
    return _this;
  }
  _createClass(AMPMParser2, [{
    key: "parse",
    value: function parse2(dateString, token, match2) {
      switch (token) {
        case "a":
        case "aa":
        case "aaa":
          return match2.dayPeriod(dateString, {
            width: "abbreviated",
            context: "formatting"
          }) || match2.dayPeriod(dateString, {
            width: "narrow",
            context: "formatting"
          });
        case "aaaaa":
          return match2.dayPeriod(dateString, {
            width: "narrow",
            context: "formatting"
          });
        case "aaaa":
        default:
          return match2.dayPeriod(dateString, {
            width: "wide",
            context: "formatting"
          }) || match2.dayPeriod(dateString, {
            width: "abbreviated",
            context: "formatting"
          }) || match2.dayPeriod(dateString, {
            width: "narrow",
            context: "formatting"
          });
      }
    }
  }, {
    key: "set",
    value: function set2(date, _flags, value) {
      date.setUTCHours(dayPeriodEnumToHours(value), 0, 0, 0);
      return date;
    }
  }]);
  return AMPMParser2;
}(Parser);
var AMPMMidnightParser = /* @__PURE__ */ function(_Parser) {
  _inherits(AMPMMidnightParser2, _Parser);
  var _super = _createSuper(AMPMMidnightParser2);
  function AMPMMidnightParser2() {
    var _this;
    _classCallCheck(this, AMPMMidnightParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "priority", 80);
    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ["a", "B", "H", "k", "t", "T"]);
    return _this;
  }
  _createClass(AMPMMidnightParser2, [{
    key: "parse",
    value: function parse2(dateString, token, match2) {
      switch (token) {
        case "b":
        case "bb":
        case "bbb":
          return match2.dayPeriod(dateString, {
            width: "abbreviated",
            context: "formatting"
          }) || match2.dayPeriod(dateString, {
            width: "narrow",
            context: "formatting"
          });
        case "bbbbb":
          return match2.dayPeriod(dateString, {
            width: "narrow",
            context: "formatting"
          });
        case "bbbb":
        default:
          return match2.dayPeriod(dateString, {
            width: "wide",
            context: "formatting"
          }) || match2.dayPeriod(dateString, {
            width: "abbreviated",
            context: "formatting"
          }) || match2.dayPeriod(dateString, {
            width: "narrow",
            context: "formatting"
          });
      }
    }
  }, {
    key: "set",
    value: function set2(date, _flags, value) {
      date.setUTCHours(dayPeriodEnumToHours(value), 0, 0, 0);
      return date;
    }
  }]);
  return AMPMMidnightParser2;
}(Parser);
var DayPeriodParser = /* @__PURE__ */ function(_Parser) {
  _inherits(DayPeriodParser2, _Parser);
  var _super = _createSuper(DayPeriodParser2);
  function DayPeriodParser2() {
    var _this;
    _classCallCheck(this, DayPeriodParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "priority", 80);
    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ["a", "b", "t", "T"]);
    return _this;
  }
  _createClass(DayPeriodParser2, [{
    key: "parse",
    value: function parse2(dateString, token, match2) {
      switch (token) {
        case "B":
        case "BB":
        case "BBB":
          return match2.dayPeriod(dateString, {
            width: "abbreviated",
            context: "formatting"
          }) || match2.dayPeriod(dateString, {
            width: "narrow",
            context: "formatting"
          });
        case "BBBBB":
          return match2.dayPeriod(dateString, {
            width: "narrow",
            context: "formatting"
          });
        case "BBBB":
        default:
          return match2.dayPeriod(dateString, {
            width: "wide",
            context: "formatting"
          }) || match2.dayPeriod(dateString, {
            width: "abbreviated",
            context: "formatting"
          }) || match2.dayPeriod(dateString, {
            width: "narrow",
            context: "formatting"
          });
      }
    }
  }, {
    key: "set",
    value: function set2(date, _flags, value) {
      date.setUTCHours(dayPeriodEnumToHours(value), 0, 0, 0);
      return date;
    }
  }]);
  return DayPeriodParser2;
}(Parser);
var Hour1to12Parser = /* @__PURE__ */ function(_Parser) {
  _inherits(Hour1to12Parser2, _Parser);
  var _super = _createSuper(Hour1to12Parser2);
  function Hour1to12Parser2() {
    var _this;
    _classCallCheck(this, Hour1to12Parser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "priority", 70);
    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ["H", "K", "k", "t", "T"]);
    return _this;
  }
  _createClass(Hour1to12Parser2, [{
    key: "parse",
    value: function parse2(dateString, token, match2) {
      switch (token) {
        case "h":
          return parseNumericPattern(numericPatterns.hour12h, dateString);
        case "ho":
          return match2.ordinalNumber(dateString, {
            unit: "hour"
          });
        default:
          return parseNDigits(token.length, dateString);
      }
    }
  }, {
    key: "validate",
    value: function validate(_date, value) {
      return value >= 1 && value <= 12;
    }
  }, {
    key: "set",
    value: function set2(date, _flags, value) {
      var isPM = date.getUTCHours() >= 12;
      if (isPM && value < 12) {
        date.setUTCHours(value + 12, 0, 0, 0);
      } else if (!isPM && value === 12) {
        date.setUTCHours(0, 0, 0, 0);
      } else {
        date.setUTCHours(value, 0, 0, 0);
      }
      return date;
    }
  }]);
  return Hour1to12Parser2;
}(Parser);
var Hour0to23Parser = /* @__PURE__ */ function(_Parser) {
  _inherits(Hour0to23Parser2, _Parser);
  var _super = _createSuper(Hour0to23Parser2);
  function Hour0to23Parser2() {
    var _this;
    _classCallCheck(this, Hour0to23Parser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "priority", 70);
    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ["a", "b", "h", "K", "k", "t", "T"]);
    return _this;
  }
  _createClass(Hour0to23Parser2, [{
    key: "parse",
    value: function parse2(dateString, token, match2) {
      switch (token) {
        case "H":
          return parseNumericPattern(numericPatterns.hour23h, dateString);
        case "Ho":
          return match2.ordinalNumber(dateString, {
            unit: "hour"
          });
        default:
          return parseNDigits(token.length, dateString);
      }
    }
  }, {
    key: "validate",
    value: function validate(_date, value) {
      return value >= 0 && value <= 23;
    }
  }, {
    key: "set",
    value: function set2(date, _flags, value) {
      date.setUTCHours(value, 0, 0, 0);
      return date;
    }
  }]);
  return Hour0to23Parser2;
}(Parser);
var Hour0To11Parser = /* @__PURE__ */ function(_Parser) {
  _inherits(Hour0To11Parser2, _Parser);
  var _super = _createSuper(Hour0To11Parser2);
  function Hour0To11Parser2() {
    var _this;
    _classCallCheck(this, Hour0To11Parser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "priority", 70);
    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ["h", "H", "k", "t", "T"]);
    return _this;
  }
  _createClass(Hour0To11Parser2, [{
    key: "parse",
    value: function parse2(dateString, token, match2) {
      switch (token) {
        case "K":
          return parseNumericPattern(numericPatterns.hour11h, dateString);
        case "Ko":
          return match2.ordinalNumber(dateString, {
            unit: "hour"
          });
        default:
          return parseNDigits(token.length, dateString);
      }
    }
  }, {
    key: "validate",
    value: function validate(_date, value) {
      return value >= 0 && value <= 11;
    }
  }, {
    key: "set",
    value: function set2(date, _flags, value) {
      var isPM = date.getUTCHours() >= 12;
      if (isPM && value < 12) {
        date.setUTCHours(value + 12, 0, 0, 0);
      } else {
        date.setUTCHours(value, 0, 0, 0);
      }
      return date;
    }
  }]);
  return Hour0To11Parser2;
}(Parser);
var Hour1To24Parser = /* @__PURE__ */ function(_Parser) {
  _inherits(Hour1To24Parser2, _Parser);
  var _super = _createSuper(Hour1To24Parser2);
  function Hour1To24Parser2() {
    var _this;
    _classCallCheck(this, Hour1To24Parser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "priority", 70);
    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ["a", "b", "h", "H", "K", "t", "T"]);
    return _this;
  }
  _createClass(Hour1To24Parser2, [{
    key: "parse",
    value: function parse2(dateString, token, match2) {
      switch (token) {
        case "k":
          return parseNumericPattern(numericPatterns.hour24h, dateString);
        case "ko":
          return match2.ordinalNumber(dateString, {
            unit: "hour"
          });
        default:
          return parseNDigits(token.length, dateString);
      }
    }
  }, {
    key: "validate",
    value: function validate(_date, value) {
      return value >= 1 && value <= 24;
    }
  }, {
    key: "set",
    value: function set2(date, _flags, value) {
      var hours = value <= 24 ? value % 24 : value;
      date.setUTCHours(hours, 0, 0, 0);
      return date;
    }
  }]);
  return Hour1To24Parser2;
}(Parser);
var MinuteParser = /* @__PURE__ */ function(_Parser) {
  _inherits(MinuteParser2, _Parser);
  var _super = _createSuper(MinuteParser2);
  function MinuteParser2() {
    var _this;
    _classCallCheck(this, MinuteParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "priority", 60);
    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ["t", "T"]);
    return _this;
  }
  _createClass(MinuteParser2, [{
    key: "parse",
    value: function parse2(dateString, token, match2) {
      switch (token) {
        case "m":
          return parseNumericPattern(numericPatterns.minute, dateString);
        case "mo":
          return match2.ordinalNumber(dateString, {
            unit: "minute"
          });
        default:
          return parseNDigits(token.length, dateString);
      }
    }
  }, {
    key: "validate",
    value: function validate(_date, value) {
      return value >= 0 && value <= 59;
    }
  }, {
    key: "set",
    value: function set2(date, _flags, value) {
      date.setUTCMinutes(value, 0, 0);
      return date;
    }
  }]);
  return MinuteParser2;
}(Parser);
var SecondParser = /* @__PURE__ */ function(_Parser) {
  _inherits(SecondParser2, _Parser);
  var _super = _createSuper(SecondParser2);
  function SecondParser2() {
    var _this;
    _classCallCheck(this, SecondParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "priority", 50);
    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ["t", "T"]);
    return _this;
  }
  _createClass(SecondParser2, [{
    key: "parse",
    value: function parse2(dateString, token, match2) {
      switch (token) {
        case "s":
          return parseNumericPattern(numericPatterns.second, dateString);
        case "so":
          return match2.ordinalNumber(dateString, {
            unit: "second"
          });
        default:
          return parseNDigits(token.length, dateString);
      }
    }
  }, {
    key: "validate",
    value: function validate(_date, value) {
      return value >= 0 && value <= 59;
    }
  }, {
    key: "set",
    value: function set2(date, _flags, value) {
      date.setUTCSeconds(value, 0);
      return date;
    }
  }]);
  return SecondParser2;
}(Parser);
var FractionOfSecondParser = /* @__PURE__ */ function(_Parser) {
  _inherits(FractionOfSecondParser2, _Parser);
  var _super = _createSuper(FractionOfSecondParser2);
  function FractionOfSecondParser2() {
    var _this;
    _classCallCheck(this, FractionOfSecondParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "priority", 30);
    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ["t", "T"]);
    return _this;
  }
  _createClass(FractionOfSecondParser2, [{
    key: "parse",
    value: function parse2(dateString, token) {
      var valueCallback3 = function valueCallback4(value) {
        return Math.floor(value * Math.pow(10, -token.length + 3));
      };
      return mapValue(parseNDigits(token.length, dateString), valueCallback3);
    }
  }, {
    key: "set",
    value: function set2(date, _flags, value) {
      date.setUTCMilliseconds(value);
      return date;
    }
  }]);
  return FractionOfSecondParser2;
}(Parser);
var ISOTimezoneWithZParser = /* @__PURE__ */ function(_Parser) {
  _inherits(ISOTimezoneWithZParser2, _Parser);
  var _super = _createSuper(ISOTimezoneWithZParser2);
  function ISOTimezoneWithZParser2() {
    var _this;
    _classCallCheck(this, ISOTimezoneWithZParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "priority", 10);
    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ["t", "T", "x"]);
    return _this;
  }
  _createClass(ISOTimezoneWithZParser2, [{
    key: "parse",
    value: function parse2(dateString, token) {
      switch (token) {
        case "X":
          return parseTimezonePattern(timezonePatterns.basicOptionalMinutes, dateString);
        case "XX":
          return parseTimezonePattern(timezonePatterns.basic, dateString);
        case "XXXX":
          return parseTimezonePattern(timezonePatterns.basicOptionalSeconds, dateString);
        case "XXXXX":
          return parseTimezonePattern(timezonePatterns.extendedOptionalSeconds, dateString);
        case "XXX":
        default:
          return parseTimezonePattern(timezonePatterns.extended, dateString);
      }
    }
  }, {
    key: "set",
    value: function set2(date, flags, value) {
      if (flags.timestampIsSet) {
        return date;
      }
      return new Date(date.getTime() - value);
    }
  }]);
  return ISOTimezoneWithZParser2;
}(Parser);
var ISOTimezoneParser = /* @__PURE__ */ function(_Parser) {
  _inherits(ISOTimezoneParser2, _Parser);
  var _super = _createSuper(ISOTimezoneParser2);
  function ISOTimezoneParser2() {
    var _this;
    _classCallCheck(this, ISOTimezoneParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "priority", 10);
    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ["t", "T", "X"]);
    return _this;
  }
  _createClass(ISOTimezoneParser2, [{
    key: "parse",
    value: function parse2(dateString, token) {
      switch (token) {
        case "x":
          return parseTimezonePattern(timezonePatterns.basicOptionalMinutes, dateString);
        case "xx":
          return parseTimezonePattern(timezonePatterns.basic, dateString);
        case "xxxx":
          return parseTimezonePattern(timezonePatterns.basicOptionalSeconds, dateString);
        case "xxxxx":
          return parseTimezonePattern(timezonePatterns.extendedOptionalSeconds, dateString);
        case "xxx":
        default:
          return parseTimezonePattern(timezonePatterns.extended, dateString);
      }
    }
  }, {
    key: "set",
    value: function set2(date, flags, value) {
      if (flags.timestampIsSet) {
        return date;
      }
      return new Date(date.getTime() - value);
    }
  }]);
  return ISOTimezoneParser2;
}(Parser);
var TimestampSecondsParser = /* @__PURE__ */ function(_Parser) {
  _inherits(TimestampSecondsParser2, _Parser);
  var _super = _createSuper(TimestampSecondsParser2);
  function TimestampSecondsParser2() {
    var _this;
    _classCallCheck(this, TimestampSecondsParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "priority", 40);
    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", "*");
    return _this;
  }
  _createClass(TimestampSecondsParser2, [{
    key: "parse",
    value: function parse2(dateString) {
      return parseAnyDigitsSigned(dateString);
    }
  }, {
    key: "set",
    value: function set2(_date, _flags, value) {
      return [new Date(value * 1e3), {
        timestampIsSet: true
      }];
    }
  }]);
  return TimestampSecondsParser2;
}(Parser);
var TimestampMillisecondsParser = /* @__PURE__ */ function(_Parser) {
  _inherits(TimestampMillisecondsParser2, _Parser);
  var _super = _createSuper(TimestampMillisecondsParser2);
  function TimestampMillisecondsParser2() {
    var _this;
    _classCallCheck(this, TimestampMillisecondsParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "priority", 20);
    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", "*");
    return _this;
  }
  _createClass(TimestampMillisecondsParser2, [{
    key: "parse",
    value: function parse2(dateString) {
      return parseAnyDigitsSigned(dateString);
    }
  }, {
    key: "set",
    value: function set2(_date, _flags, value) {
      return [new Date(value), {
        timestampIsSet: true
      }];
    }
  }]);
  return TimestampMillisecondsParser2;
}(Parser);
var parsers = {
  G: new EraParser(),
  y: new YearParser(),
  Y: new LocalWeekYearParser(),
  R: new ISOWeekYearParser(),
  u: new ExtendedYearParser(),
  Q: new QuarterParser(),
  q: new StandAloneQuarterParser(),
  M: new MonthParser(),
  L: new StandAloneMonthParser(),
  w: new LocalWeekParser(),
  I: new ISOWeekParser(),
  d: new DateParser(),
  D: new DayOfYearParser(),
  E: new DayParser(),
  e: new LocalDayParser(),
  c: new StandAloneLocalDayParser(),
  i: new ISODayParser(),
  a: new AMPMParser(),
  b: new AMPMMidnightParser(),
  B: new DayPeriodParser(),
  h: new Hour1to12Parser(),
  H: new Hour0to23Parser(),
  K: new Hour0To11Parser(),
  k: new Hour1To24Parser(),
  m: new MinuteParser(),
  s: new SecondParser(),
  S: new FractionOfSecondParser(),
  X: new ISOTimezoneWithZParser(),
  x: new ISOTimezoneParser(),
  t: new TimestampSecondsParser(),
  T: new TimestampMillisecondsParser()
};
var formattingTokensRegExp = /[yYQqMLwIdDecihHKkms]o|(\w)\1*|''|'(''|[^'])+('|$)|./g;
var longFormattingTokensRegExp = /P+p+|P+|p+|''|'(''|[^'])+('|$)|./g;
var escapedStringRegExp = /^'([^]*?)'?$/;
var doubleQuoteRegExp = /''/g;
var notWhitespaceRegExp = /\S/;
var unescapedLatinCharacterRegExp = /[a-zA-Z]/;
function parse$3(dirtyDateString, dirtyFormatString, dirtyReferenceDate, options) {
  var _ref, _options$locale, _ref2, _ref3, _ref4, _options$firstWeekCon, _options$locale2, _options$locale2$opti, _defaultOptions$local, _defaultOptions$local2, _ref5, _ref6, _ref7, _options$weekStartsOn, _options$locale3, _options$locale3$opti, _defaultOptions$local3, _defaultOptions$local4;
  requiredArgs(3, arguments);
  var dateString = String(dirtyDateString);
  var formatString = String(dirtyFormatString);
  var defaultOptions2 = getDefaultOptions();
  var locale2 = (_ref = (_options$locale = options === null || options === void 0 ? void 0 : options.locale) !== null && _options$locale !== void 0 ? _options$locale : defaultOptions2.locale) !== null && _ref !== void 0 ? _ref : defaultLocale;
  if (!locale2.match) {
    throw new RangeError("locale must contain match property");
  }
  var firstWeekContainsDate = toInteger((_ref2 = (_ref3 = (_ref4 = (_options$firstWeekCon = options === null || options === void 0 ? void 0 : options.firstWeekContainsDate) !== null && _options$firstWeekCon !== void 0 ? _options$firstWeekCon : options === null || options === void 0 ? void 0 : (_options$locale2 = options.locale) === null || _options$locale2 === void 0 ? void 0 : (_options$locale2$opti = _options$locale2.options) === null || _options$locale2$opti === void 0 ? void 0 : _options$locale2$opti.firstWeekContainsDate) !== null && _ref4 !== void 0 ? _ref4 : defaultOptions2.firstWeekContainsDate) !== null && _ref3 !== void 0 ? _ref3 : (_defaultOptions$local = defaultOptions2.locale) === null || _defaultOptions$local === void 0 ? void 0 : (_defaultOptions$local2 = _defaultOptions$local.options) === null || _defaultOptions$local2 === void 0 ? void 0 : _defaultOptions$local2.firstWeekContainsDate) !== null && _ref2 !== void 0 ? _ref2 : 1);
  if (!(firstWeekContainsDate >= 1 && firstWeekContainsDate <= 7)) {
    throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");
  }
  var weekStartsOn = toInteger((_ref5 = (_ref6 = (_ref7 = (_options$weekStartsOn = options === null || options === void 0 ? void 0 : options.weekStartsOn) !== null && _options$weekStartsOn !== void 0 ? _options$weekStartsOn : options === null || options === void 0 ? void 0 : (_options$locale3 = options.locale) === null || _options$locale3 === void 0 ? void 0 : (_options$locale3$opti = _options$locale3.options) === null || _options$locale3$opti === void 0 ? void 0 : _options$locale3$opti.weekStartsOn) !== null && _ref7 !== void 0 ? _ref7 : defaultOptions2.weekStartsOn) !== null && _ref6 !== void 0 ? _ref6 : (_defaultOptions$local3 = defaultOptions2.locale) === null || _defaultOptions$local3 === void 0 ? void 0 : (_defaultOptions$local4 = _defaultOptions$local3.options) === null || _defaultOptions$local4 === void 0 ? void 0 : _defaultOptions$local4.weekStartsOn) !== null && _ref5 !== void 0 ? _ref5 : 0);
  if (!(weekStartsOn >= 0 && weekStartsOn <= 6)) {
    throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");
  }
  if (formatString === "") {
    if (dateString === "") {
      return toDate(dirtyReferenceDate);
    } else {
      return /* @__PURE__ */ new Date(NaN);
    }
  }
  var subFnOptions = {
    firstWeekContainsDate,
    weekStartsOn,
    locale: locale2
  };
  var setters = [new DateToSystemTimezoneSetter()];
  var tokens = formatString.match(longFormattingTokensRegExp).map(function(substring) {
    var firstCharacter = substring[0];
    if (firstCharacter in longFormatters) {
      var longFormatter = longFormatters[firstCharacter];
      return longFormatter(substring, locale2.formatLong);
    }
    return substring;
  }).join("").match(formattingTokensRegExp);
  var usedTokens = [];
  var _iterator = _createForOfIteratorHelper(tokens), _step;
  try {
    var _loop = function _loop2() {
      var token = _step.value;
      if (!(options !== null && options !== void 0 && options.useAdditionalWeekYearTokens) && isProtectedWeekYearToken(token)) {
        throwProtectedError(token, formatString, dirtyDateString);
      }
      if (!(options !== null && options !== void 0 && options.useAdditionalDayOfYearTokens) && isProtectedDayOfYearToken(token)) {
        throwProtectedError(token, formatString, dirtyDateString);
      }
      var firstCharacter = token[0];
      var parser = parsers[firstCharacter];
      if (parser) {
        var incompatibleTokens = parser.incompatibleTokens;
        if (Array.isArray(incompatibleTokens)) {
          var incompatibleToken = usedTokens.find(function(usedToken) {
            return incompatibleTokens.includes(usedToken.token) || usedToken.token === firstCharacter;
          });
          if (incompatibleToken) {
            throw new RangeError("The format string mustn't contain `".concat(incompatibleToken.fullToken, "` and `").concat(token, "` at the same time"));
          }
        } else if (parser.incompatibleTokens === "*" && usedTokens.length > 0) {
          throw new RangeError("The format string mustn't contain `".concat(token, "` and any other token at the same time"));
        }
        usedTokens.push({
          token: firstCharacter,
          fullToken: token
        });
        var parseResult = parser.run(dateString, token, locale2.match, subFnOptions);
        if (!parseResult) {
          return {
            v: /* @__PURE__ */ new Date(NaN)
          };
        }
        setters.push(parseResult.setter);
        dateString = parseResult.rest;
      } else {
        if (firstCharacter.match(unescapedLatinCharacterRegExp)) {
          throw new RangeError("Format string contains an unescaped latin alphabet character `" + firstCharacter + "`");
        }
        if (token === "''") {
          token = "'";
        } else if (firstCharacter === "'") {
          token = cleanEscapedString(token);
        }
        if (dateString.indexOf(token) === 0) {
          dateString = dateString.slice(token.length);
        } else {
          return {
            v: /* @__PURE__ */ new Date(NaN)
          };
        }
      }
    };
    for (_iterator.s(); !(_step = _iterator.n()).done; ) {
      var _ret = _loop();
      if (_typeof(_ret) === "object")
        return _ret.v;
    }
  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }
  if (dateString.length > 0 && notWhitespaceRegExp.test(dateString)) {
    return /* @__PURE__ */ new Date(NaN);
  }
  var uniquePrioritySetters = setters.map(function(setter2) {
    return setter2.priority;
  }).sort(function(a4, b4) {
    return b4 - a4;
  }).filter(function(priority, index, array) {
    return array.indexOf(priority) === index;
  }).map(function(priority) {
    return setters.filter(function(setter2) {
      return setter2.priority === priority;
    }).sort(function(a4, b4) {
      return b4.subPriority - a4.subPriority;
    });
  }).map(function(setterArray) {
    return setterArray[0];
  });
  var date = toDate(dirtyReferenceDate);
  if (isNaN(date.getTime())) {
    return /* @__PURE__ */ new Date(NaN);
  }
  var utcDate = subMilliseconds(date, getTimezoneOffsetInMilliseconds(date));
  var flags = {};
  var _iterator2 = _createForOfIteratorHelper(uniquePrioritySetters), _step2;
  try {
    for (_iterator2.s(); !(_step2 = _iterator2.n()).done; ) {
      var setter = _step2.value;
      if (!setter.validate(utcDate, subFnOptions)) {
        return /* @__PURE__ */ new Date(NaN);
      }
      var result = setter.set(utcDate, flags, subFnOptions);
      if (Array.isArray(result)) {
        utcDate = result[0];
        assign$2(flags, result[1]);
      } else {
        utcDate = result;
      }
    }
  } catch (err) {
    _iterator2.e(err);
  } finally {
    _iterator2.f();
  }
  return utcDate;
}
function cleanEscapedString(input) {
  return input.match(escapedStringRegExp)[1].replace(doubleQuoteRegExp, "'");
}
function isSameQuarter(dirtyDateLeft, dirtyDateRight) {
  requiredArgs(2, arguments);
  var dateLeftStartOfQuarter = startOfQuarter(dirtyDateLeft);
  var dateRightStartOfQuarter = startOfQuarter(dirtyDateRight);
  return dateLeftStartOfQuarter.getTime() === dateRightStartOfQuarter.getTime();
}
function subDays(dirtyDate, dirtyAmount) {
  requiredArgs(2, arguments);
  var amount = toInteger(dirtyAmount);
  return addDays(dirtyDate, -amount);
}
function parseISO(argument, options) {
  var _options$additionalDi;
  requiredArgs(1, arguments);
  var additionalDigits = toInteger((_options$additionalDi = options === null || options === void 0 ? void 0 : options.additionalDigits) !== null && _options$additionalDi !== void 0 ? _options$additionalDi : 2);
  if (additionalDigits !== 2 && additionalDigits !== 1 && additionalDigits !== 0) {
    throw new RangeError("additionalDigits must be 0, 1 or 2");
  }
  if (!(typeof argument === "string" || Object.prototype.toString.call(argument) === "[object String]")) {
    return /* @__PURE__ */ new Date(NaN);
  }
  var dateStrings = splitDateString(argument);
  var date;
  if (dateStrings.date) {
    var parseYearResult = parseYear(dateStrings.date, additionalDigits);
    date = parseDate(parseYearResult.restDateString, parseYearResult.year);
  }
  if (!date || isNaN(date.getTime())) {
    return /* @__PURE__ */ new Date(NaN);
  }
  var timestamp = date.getTime();
  var time = 0;
  var offset2;
  if (dateStrings.time) {
    time = parseTime(dateStrings.time);
    if (isNaN(time)) {
      return /* @__PURE__ */ new Date(NaN);
    }
  }
  if (dateStrings.timezone) {
    offset2 = parseTimezone(dateStrings.timezone);
    if (isNaN(offset2)) {
      return /* @__PURE__ */ new Date(NaN);
    }
  } else {
    var dirtyDate = new Date(timestamp + time);
    var result = /* @__PURE__ */ new Date(0);
    result.setFullYear(dirtyDate.getUTCFullYear(), dirtyDate.getUTCMonth(), dirtyDate.getUTCDate());
    result.setHours(dirtyDate.getUTCHours(), dirtyDate.getUTCMinutes(), dirtyDate.getUTCSeconds(), dirtyDate.getUTCMilliseconds());
    return result;
  }
  return new Date(timestamp + time + offset2);
}
var patterns = {
  dateTimeDelimiter: /[T ]/,
  timeZoneDelimiter: /[Z ]/i,
  timezone: /([Z+-].*)$/
};
var dateRegex = /^-?(?:(\d{3})|(\d{2})(?:-?(\d{2}))?|W(\d{2})(?:-?(\d{1}))?|)$/;
var timeRegex = /^(\d{2}(?:[.,]\d*)?)(?::?(\d{2}(?:[.,]\d*)?))?(?::?(\d{2}(?:[.,]\d*)?))?$/;
var timezoneRegex = /^([+-])(\d{2})(?::?(\d{2}))?$/;
function splitDateString(dateString) {
  var dateStrings = {};
  var array = dateString.split(patterns.dateTimeDelimiter);
  var timeString;
  if (array.length > 2) {
    return dateStrings;
  }
  if (/:/.test(array[0])) {
    timeString = array[0];
  } else {
    dateStrings.date = array[0];
    timeString = array[1];
    if (patterns.timeZoneDelimiter.test(dateStrings.date)) {
      dateStrings.date = dateString.split(patterns.timeZoneDelimiter)[0];
      timeString = dateString.substr(dateStrings.date.length, dateString.length);
    }
  }
  if (timeString) {
    var token = patterns.timezone.exec(timeString);
    if (token) {
      dateStrings.time = timeString.replace(token[1], "");
      dateStrings.timezone = token[1];
    } else {
      dateStrings.time = timeString;
    }
  }
  return dateStrings;
}
function parseYear(dateString, additionalDigits) {
  var regex2 = new RegExp("^(?:(\\d{4}|[+-]\\d{" + (4 + additionalDigits) + "})|(\\d{2}|[+-]\\d{" + (2 + additionalDigits) + "})$)");
  var captures = dateString.match(regex2);
  if (!captures)
    return {
      year: NaN,
      restDateString: ""
    };
  var year = captures[1] ? parseInt(captures[1]) : null;
  var century = captures[2] ? parseInt(captures[2]) : null;
  return {
    year: century === null ? year : century * 100,
    restDateString: dateString.slice((captures[1] || captures[2]).length)
  };
}
function parseDate(dateString, year) {
  if (year === null)
    return /* @__PURE__ */ new Date(NaN);
  var captures = dateString.match(dateRegex);
  if (!captures)
    return /* @__PURE__ */ new Date(NaN);
  var isWeekDate = !!captures[4];
  var dayOfYear = parseDateUnit(captures[1]);
  var month = parseDateUnit(captures[2]) - 1;
  var day = parseDateUnit(captures[3]);
  var week = parseDateUnit(captures[4]);
  var dayOfWeek = parseDateUnit(captures[5]) - 1;
  if (isWeekDate) {
    if (!validateWeekDate(year, week, dayOfWeek)) {
      return /* @__PURE__ */ new Date(NaN);
    }
    return dayOfISOWeekYear(year, week, dayOfWeek);
  } else {
    var date = /* @__PURE__ */ new Date(0);
    if (!validateDate(year, month, day) || !validateDayOfYearDate(year, dayOfYear)) {
      return /* @__PURE__ */ new Date(NaN);
    }
    date.setUTCFullYear(year, month, Math.max(dayOfYear, day));
    return date;
  }
}
function parseDateUnit(value) {
  return value ? parseInt(value) : 1;
}
function parseTime(timeString) {
  var captures = timeString.match(timeRegex);
  if (!captures)
    return NaN;
  var hours = parseTimeUnit(captures[1]);
  var minutes = parseTimeUnit(captures[2]);
  var seconds = parseTimeUnit(captures[3]);
  if (!validateTime(hours, minutes, seconds)) {
    return NaN;
  }
  return hours * millisecondsInHour + minutes * millisecondsInMinute + seconds * 1e3;
}
function parseTimeUnit(value) {
  return value && parseFloat(value.replace(",", ".")) || 0;
}
function parseTimezone(timezoneString) {
  if (timezoneString === "Z")
    return 0;
  var captures = timezoneString.match(timezoneRegex);
  if (!captures)
    return 0;
  var sign = captures[1] === "+" ? -1 : 1;
  var hours = parseInt(captures[2]);
  var minutes = captures[3] && parseInt(captures[3]) || 0;
  if (!validateTimezone(hours, minutes)) {
    return NaN;
  }
  return sign * (hours * millisecondsInHour + minutes * millisecondsInMinute);
}
function dayOfISOWeekYear(isoWeekYear, week, day) {
  var date = /* @__PURE__ */ new Date(0);
  date.setUTCFullYear(isoWeekYear, 0, 4);
  var fourthOfJanuaryDay = date.getUTCDay() || 7;
  var diff = (week - 1) * 7 + day + 1 - fourthOfJanuaryDay;
  date.setUTCDate(date.getUTCDate() + diff);
  return date;
}
var daysInMonths = [31, null, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];
function isLeapYearIndex(year) {
  return year % 400 === 0 || year % 4 === 0 && year % 100 !== 0;
}
function validateDate(year, month, date) {
  return month >= 0 && month <= 11 && date >= 1 && date <= (daysInMonths[month] || (isLeapYearIndex(year) ? 29 : 28));
}
function validateDayOfYearDate(year, dayOfYear) {
  return dayOfYear >= 1 && dayOfYear <= (isLeapYearIndex(year) ? 366 : 365);
}
function validateWeekDate(_year, week, day) {
  return week >= 1 && week <= 53 && day >= 0 && day <= 6;
}
function validateTime(hours, minutes, seconds) {
  if (hours === 24) {
    return minutes === 0 && seconds === 0;
  }
  return seconds >= 0 && seconds < 60 && minutes >= 0 && minutes < 60 && hours >= 0 && hours < 25;
}
function validateTimezone(_hours, minutes) {
  return minutes >= 0 && minutes <= 59;
}
function setMonth(dirtyDate, dirtyMonth) {
  requiredArgs(2, arguments);
  var date = toDate(dirtyDate);
  var month = toInteger(dirtyMonth);
  var year = date.getFullYear();
  var day = date.getDate();
  var dateWithDesiredMonth = /* @__PURE__ */ new Date(0);
  dateWithDesiredMonth.setFullYear(year, month, 15);
  dateWithDesiredMonth.setHours(0, 0, 0, 0);
  var daysInMonth = getDaysInMonth(dateWithDesiredMonth);
  date.setMonth(month, Math.min(day, daysInMonth));
  return date;
}
function set(dirtyDate, values) {
  requiredArgs(2, arguments);
  if (_typeof(values) !== "object" || values === null) {
    throw new RangeError("values parameter must be an object");
  }
  var date = toDate(dirtyDate);
  if (isNaN(date.getTime())) {
    return /* @__PURE__ */ new Date(NaN);
  }
  if (values.year != null) {
    date.setFullYear(values.year);
  }
  if (values.month != null) {
    date = setMonth(date, values.month);
  }
  if (values.date != null) {
    date.setDate(toInteger(values.date));
  }
  if (values.hours != null) {
    date.setHours(toInteger(values.hours));
  }
  if (values.minutes != null) {
    date.setMinutes(toInteger(values.minutes));
  }
  if (values.seconds != null) {
    date.setSeconds(toInteger(values.seconds));
  }
  if (values.milliseconds != null) {
    date.setMilliseconds(toInteger(values.milliseconds));
  }
  return date;
}
function setHours(dirtyDate, dirtyHours) {
  requiredArgs(2, arguments);
  var date = toDate(dirtyDate);
  var hours = toInteger(dirtyHours);
  date.setHours(hours);
  return date;
}
function setMilliseconds(dirtyDate, dirtyMilliseconds) {
  requiredArgs(2, arguments);
  var date = toDate(dirtyDate);
  var milliseconds = toInteger(dirtyMilliseconds);
  date.setMilliseconds(milliseconds);
  return date;
}
function setMinutes(dirtyDate, dirtyMinutes) {
  requiredArgs(2, arguments);
  var date = toDate(dirtyDate);
  var minutes = toInteger(dirtyMinutes);
  date.setMinutes(minutes);
  return date;
}
function setSeconds(dirtyDate, dirtySeconds) {
  requiredArgs(2, arguments);
  var date = toDate(dirtyDate);
  var seconds = toInteger(dirtySeconds);
  date.setSeconds(seconds);
  return date;
}
function setYear(dirtyDate, dirtyYear) {
  requiredArgs(2, arguments);
  var date = toDate(dirtyDate);
  var year = toInteger(dirtyYear);
  if (isNaN(date.getTime())) {
    return /* @__PURE__ */ new Date(NaN);
  }
  date.setFullYear(year);
  return date;
}
function subMonths(dirtyDate, dirtyAmount) {
  requiredArgs(2, arguments);
  var amount = toInteger(dirtyAmount);
  return addMonths(dirtyDate, -amount);
}
function sub(date, duration) {
  requiredArgs(2, arguments);
  if (!duration || _typeof(duration) !== "object")
    return /* @__PURE__ */ new Date(NaN);
  var years = duration.years ? toInteger(duration.years) : 0;
  var months = duration.months ? toInteger(duration.months) : 0;
  var weeks = duration.weeks ? toInteger(duration.weeks) : 0;
  var days = duration.days ? toInteger(duration.days) : 0;
  var hours = duration.hours ? toInteger(duration.hours) : 0;
  var minutes = duration.minutes ? toInteger(duration.minutes) : 0;
  var seconds = duration.seconds ? toInteger(duration.seconds) : 0;
  var dateWithoutMonths = subMonths(date, months + years * 12);
  var dateWithoutDays = subDays(dateWithoutMonths, days + weeks * 7);
  var minutestoSub = minutes + hours * 60;
  var secondstoSub = seconds + minutestoSub * 60;
  var mstoSub = secondstoSub * 1e3;
  var finalDate = new Date(dateWithoutDays.getTime() - mstoSub);
  return finalDate;
}
function subYears(dirtyDate, dirtyAmount) {
  requiredArgs(2, arguments);
  var amount = toInteger(dirtyAmount);
  return addYears(dirtyDate, -amount);
}
function Ot() {
  return openBlock(), createElementBlock(
    "svg",
    {
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: "0 0 32 32",
      fill: "currentColor",
      "aria-hidden": "true",
      class: "dp__icon"
    },
    [
      createBaseVNode("path", {
        d: "M29.333 8c0-2.208-1.792-4-4-4h-18.667c-2.208 0-4 1.792-4 4v18.667c0 2.208 1.792 4 4 4h18.667c2.208 0 4-1.792 4-4v-18.667zM26.667 8v18.667c0 0.736-0.597 1.333-1.333 1.333 0 0-18.667 0-18.667 0-0.736 0-1.333-0.597-1.333-1.333 0 0 0-18.667 0-18.667 0-0.736 0.597-1.333 1.333-1.333 0 0 18.667 0 18.667 0 0.736 0 1.333 0.597 1.333 1.333z"
      }),
      createBaseVNode("path", {
        d: "M20 2.667v5.333c0 0.736 0.597 1.333 1.333 1.333s1.333-0.597 1.333-1.333v-5.333c0-0.736-0.597-1.333-1.333-1.333s-1.333 0.597-1.333 1.333z"
      }),
      createBaseVNode("path", {
        d: "M9.333 2.667v5.333c0 0.736 0.597 1.333 1.333 1.333s1.333-0.597 1.333-1.333v-5.333c0-0.736-0.597-1.333-1.333-1.333s-1.333 0.597-1.333 1.333z"
      }),
      createBaseVNode("path", {
        d: "M4 14.667h24c0.736 0 1.333-0.597 1.333-1.333s-0.597-1.333-1.333-1.333h-24c-0.736 0-1.333 0.597-1.333 1.333s0.597 1.333 1.333 1.333z"
      })
    ]
  );
}
Ot.compatConfig = {
  MODE: 3
};
function Aa() {
  return openBlock(), createElementBlock(
    "svg",
    {
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: "0 0 32 32",
      fill: "currentColor",
      "aria-hidden": "true",
      class: "dp__icon"
    },
    [
      createBaseVNode("path", {
        d: "M23.057 7.057l-16 16c-0.52 0.52-0.52 1.365 0 1.885s1.365 0.52 1.885 0l16-16c0.52-0.52 0.52-1.365 0-1.885s-1.365-0.52-1.885 0z"
      }),
      createBaseVNode("path", {
        d: "M7.057 8.943l16 16c0.52 0.52 1.365 0.52 1.885 0s0.52-1.365 0-1.885l-16-16c-0.52-0.52-1.365-0.52-1.885 0s-0.52 1.365 0 1.885z"
      })
    ]
  );
}
Aa.compatConfig = {
  MODE: 3
};
function En() {
  return openBlock(), createElementBlock(
    "svg",
    {
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: "0 0 32 32",
      fill: "currentColor",
      "aria-hidden": "true",
      class: "dp__icon"
    },
    [
      createBaseVNode("path", {
        d: "M20.943 23.057l-7.057-7.057c0 0 7.057-7.057 7.057-7.057 0.52-0.52 0.52-1.365 0-1.885s-1.365-0.52-1.885 0l-8 8c-0.521 0.521-0.521 1.365 0 1.885l8 8c0.52 0.52 1.365 0.52 1.885 0s0.52-1.365 0-1.885z"
      })
    ]
  );
}
En.compatConfig = {
  MODE: 3
};
function Fn() {
  return openBlock(), createElementBlock(
    "svg",
    {
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: "0 0 32 32",
      fill: "currentColor",
      "aria-hidden": "true",
      class: "dp__icon"
    },
    [
      createBaseVNode("path", {
        d: "M12.943 24.943l8-8c0.521-0.521 0.521-1.365 0-1.885l-8-8c-0.52-0.52-1.365-0.52-1.885 0s-0.52 1.365 0 1.885l7.057 7.057c0 0-7.057 7.057-7.057 7.057-0.52 0.52-0.52 1.365 0 1.885s1.365 0.52 1.885 0z"
      })
    ]
  );
}
Fn.compatConfig = {
  MODE: 3
};
function Hn() {
  return openBlock(), createElementBlock(
    "svg",
    {
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: "0 0 32 32",
      fill: "currentColor",
      "aria-hidden": "true",
      class: "dp__icon"
    },
    [
      createBaseVNode("path", {
        d: "M16 1.333c-8.095 0-14.667 6.572-14.667 14.667s6.572 14.667 14.667 14.667c8.095 0 14.667-6.572 14.667-14.667s-6.572-14.667-14.667-14.667zM16 4c6.623 0 12 5.377 12 12s-5.377 12-12 12c-6.623 0-12-5.377-12-12s5.377-12 12-12z"
      }),
      createBaseVNode("path", {
        d: "M14.667 8v8c0 0.505 0.285 0.967 0.737 1.193l5.333 2.667c0.658 0.329 1.46 0.062 1.789-0.596s0.062-1.46-0.596-1.789l-4.596-2.298c0 0 0-7.176 0-7.176 0-0.736-0.597-1.333-1.333-1.333s-1.333 0.597-1.333 1.333z"
      })
    ]
  );
}
Hn.compatConfig = {
  MODE: 3
};
function Vn() {
  return openBlock(), createElementBlock(
    "svg",
    {
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: "0 0 32 32",
      fill: "currentColor",
      "aria-hidden": "true",
      class: "dp__icon"
    },
    [
      createBaseVNode("path", {
        d: "M24.943 19.057l-8-8c-0.521-0.521-1.365-0.521-1.885 0l-8 8c-0.52 0.52-0.52 1.365 0 1.885s1.365 0.52 1.885 0l7.057-7.057c0 0 7.057 7.057 7.057 7.057 0.52 0.52 1.365 0.52 1.885 0s0.52-1.365 0-1.885z"
      })
    ]
  );
}
Vn.compatConfig = {
  MODE: 3
};
function Ln() {
  return openBlock(), createElementBlock(
    "svg",
    {
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: "0 0 32 32",
      fill: "currentColor",
      "aria-hidden": "true",
      class: "dp__icon"
    },
    [
      createBaseVNode("path", {
        d: "M7.057 12.943l8 8c0.521 0.521 1.365 0.521 1.885 0l8-8c0.52-0.52 0.52-1.365 0-1.885s-1.365-0.52-1.885 0l-7.057 7.057c0 0-7.057-7.057-7.057-7.057-0.52-0.52-1.365-0.52-1.885 0s-0.52 1.365 0 1.885z"
      })
    ]
  );
}
Ln.compatConfig = {
  MODE: 3
};
function Un(e3) {
  return e3 && e3.__esModule && Object.prototype.hasOwnProperty.call(e3, "default") ? e3.default : e3;
}
var Sa = { exports: {} };
(function(e3) {
  function t3(r2) {
    return r2 && r2.__esModule ? r2 : {
      default: r2
    };
  }
  e3.exports = t3, e3.exports.__esModule = true, e3.exports.default = e3.exports;
})(Sa);
var fr = Sa.exports, An = { exports: {} };
(function(e3, t3) {
  Object.defineProperty(t3, "__esModule", {
    value: true
  }), t3.default = r2;
  function r2(a4) {
    if (a4 === null || a4 === true || a4 === false)
      return NaN;
    var n2 = Number(a4);
    return isNaN(n2) ? n2 : n2 < 0 ? Math.ceil(n2) : Math.floor(n2);
  }
  e3.exports = t3.default;
})(An, An.exports);
var vr = An.exports;
const mr = /* @__PURE__ */ Un(vr);
var Sn = { exports: {} };
(function(e3, t3) {
  Object.defineProperty(t3, "__esModule", {
    value: true
  }), t3.default = r2;
  function r2(a4) {
    var n2 = new Date(Date.UTC(a4.getFullYear(), a4.getMonth(), a4.getDate(), a4.getHours(), a4.getMinutes(), a4.getSeconds(), a4.getMilliseconds()));
    return n2.setUTCFullYear(a4.getFullYear()), a4.getTime() - n2.getTime();
  }
  e3.exports = t3.default;
})(Sn, Sn.exports);
var gr = Sn.exports;
const na = /* @__PURE__ */ Un(gr);
function yr(e3, t3) {
  var r2 = kr(t3);
  return r2.formatToParts ? pr(r2, e3) : br(r2, e3);
}
var hr = {
  year: 0,
  month: 1,
  day: 2,
  hour: 3,
  minute: 4,
  second: 5
};
function pr(e3, t3) {
  try {
    for (var r2 = e3.formatToParts(t3), a4 = [], n2 = 0; n2 < r2.length; n2++) {
      var o2 = hr[r2[n2].type];
      o2 >= 0 && (a4[o2] = parseInt(r2[n2].value, 10));
    }
    return a4;
  } catch (i3) {
    if (i3 instanceof RangeError)
      return [NaN];
    throw i3;
  }
}
function br(e3, t3) {
  var r2 = e3.format(t3).replace(/\u200E/g, ""), a4 = /(\d+)\/(\d+)\/(\d+),? (\d+):(\d+):(\d+)/.exec(r2);
  return [a4[3], a4[1], a4[2], a4[4], a4[5], a4[6]];
}
var fn = {};
function kr(e3) {
  if (!fn[e3]) {
    var t3 = new Intl.DateTimeFormat("en-US", {
      hour12: false,
      timeZone: "America/New_York",
      year: "numeric",
      month: "numeric",
      day: "2-digit",
      hour: "2-digit",
      minute: "2-digit",
      second: "2-digit"
    }).format(/* @__PURE__ */ new Date("2014-06-25T04:00:00.123Z")), r2 = t3 === "06/25/2014, 00:00:00" || t3 === "‎06‎/‎25‎/‎2014‎ ‎00‎:‎00‎:‎00";
    fn[e3] = r2 ? new Intl.DateTimeFormat("en-US", {
      hour12: false,
      timeZone: e3,
      year: "numeric",
      month: "numeric",
      day: "2-digit",
      hour: "2-digit",
      minute: "2-digit",
      second: "2-digit"
    }) : new Intl.DateTimeFormat("en-US", {
      hourCycle: "h23",
      timeZone: e3,
      year: "numeric",
      month: "numeric",
      day: "2-digit",
      hour: "2-digit",
      minute: "2-digit",
      second: "2-digit"
    });
  }
  return fn[e3];
}
function zn(e3, t3, r2, a4, n2, o2, i3) {
  var c3 = /* @__PURE__ */ new Date(0);
  return c3.setUTCFullYear(e3, t3, r2), c3.setUTCHours(a4, n2, o2, i3), c3;
}
var aa = 36e5, wr = 6e4, vn = {
  timezone: /([Z+-].*)$/,
  timezoneZ: /^(Z)$/,
  timezoneHH: /^([+-]\d{2})$/,
  timezoneHHMM: /^([+-]\d{2}):?(\d{2})$/
};
function Wn(e3, t3, r2) {
  var a4, n2;
  if (e3 === "" || (a4 = vn.timezoneZ.exec(e3), a4))
    return 0;
  var o2;
  if (a4 = vn.timezoneHH.exec(e3), a4)
    return o2 = parseInt(a4[1], 10), ra(o2) ? -(o2 * aa) : NaN;
  if (a4 = vn.timezoneHHMM.exec(e3), a4) {
    o2 = parseInt(a4[1], 10);
    var i3 = parseInt(a4[2], 10);
    return ra(o2, i3) ? (n2 = Math.abs(o2) * aa + i3 * wr, o2 > 0 ? -n2 : n2) : NaN;
  }
  if ($r(e3)) {
    t3 = new Date(t3 || Date.now());
    var c3 = r2 ? t3 : Dr(t3), p2 = Pn(c3, e3), T4 = r2 ? p2 : Mr(t3, p2, e3);
    return -T4;
  }
  return NaN;
}
function Dr(e3) {
  return zn(
    e3.getFullYear(),
    e3.getMonth(),
    e3.getDate(),
    e3.getHours(),
    e3.getMinutes(),
    e3.getSeconds(),
    e3.getMilliseconds()
  );
}
function Pn(e3, t3) {
  var r2 = yr(e3, t3), a4 = zn(
    r2[0],
    r2[1] - 1,
    r2[2],
    r2[3] % 24,
    r2[4],
    r2[5],
    0
  ).getTime(), n2 = e3.getTime(), o2 = n2 % 1e3;
  return n2 -= o2 >= 0 ? o2 : 1e3 + o2, a4 - n2;
}
function Mr(e3, t3, r2) {
  var a4 = e3.getTime(), n2 = a4 - t3, o2 = Pn(new Date(n2), r2);
  if (t3 === o2)
    return t3;
  n2 -= o2 - t3;
  var i3 = Pn(new Date(n2), r2);
  return o2 === i3 ? o2 : Math.max(o2, i3);
}
function ra(e3, t3) {
  return -23 <= e3 && e3 <= 23 && (t3 == null || 0 <= t3 && t3 <= 59);
}
var la = {};
function $r(e3) {
  if (la[e3])
    return true;
  try {
    return new Intl.DateTimeFormat(void 0, { timeZone: e3 }), la[e3] = true, true;
  } catch {
    return false;
  }
}
var Pa = /(Z|[+-]\d{2}(?::?\d{2})?| UTC| [a-zA-Z]+\/[a-zA-Z_]+(?:\/[a-zA-Z_]+)?)$/, mn = 36e5, oa = 6e4, Tr = 2, Ve$2 = {
  dateTimePattern: /^([0-9W+-]+)(T| )(.*)/,
  datePattern: /^([0-9W+-]+)(.*)/,
  plainTime: /:/,
  // year tokens
  YY: /^(\d{2})$/,
  YYY: [
    /^([+-]\d{2})$/,
    // 0 additional digits
    /^([+-]\d{3})$/,
    // 1 additional digit
    /^([+-]\d{4})$/
    // 2 additional digits
  ],
  YYYY: /^(\d{4})/,
  YYYYY: [
    /^([+-]\d{4})/,
    // 0 additional digits
    /^([+-]\d{5})/,
    // 1 additional digit
    /^([+-]\d{6})/
    // 2 additional digits
  ],
  // date tokens
  MM: /^-(\d{2})$/,
  DDD: /^-?(\d{3})$/,
  MMDD: /^-?(\d{2})-?(\d{2})$/,
  Www: /^-?W(\d{2})$/,
  WwwD: /^-?W(\d{2})-?(\d{1})$/,
  HH: /^(\d{2}([.,]\d*)?)$/,
  HHMM: /^(\d{2}):?(\d{2}([.,]\d*)?)$/,
  HHMMSS: /^(\d{2}):?(\d{2}):?(\d{2}([.,]\d*)?)$/,
  // time zone tokens (to identify the presence of a tz)
  timeZone: Pa
};
function Cn(e3, t3) {
  if (arguments.length < 1)
    throw new TypeError("1 argument required, but only " + arguments.length + " present");
  if (e3 === null)
    return /* @__PURE__ */ new Date(NaN);
  var r2 = t3 || {}, a4 = r2.additionalDigits == null ? Tr : mr(r2.additionalDigits);
  if (a4 !== 2 && a4 !== 1 && a4 !== 0)
    throw new RangeError("additionalDigits must be 0, 1 or 2");
  if (e3 instanceof Date || typeof e3 == "object" && Object.prototype.toString.call(e3) === "[object Date]")
    return new Date(e3.getTime());
  if (typeof e3 == "number" || Object.prototype.toString.call(e3) === "[object Number]")
    return new Date(e3);
  if (!(typeof e3 == "string" || Object.prototype.toString.call(e3) === "[object String]"))
    return /* @__PURE__ */ new Date(NaN);
  var n2 = Ar(e3), o2 = Sr(n2.date, a4), i3 = o2.year, c3 = o2.restDateString, p2 = Pr(c3, i3);
  if (isNaN(p2))
    return /* @__PURE__ */ new Date(NaN);
  if (p2) {
    var T4 = p2.getTime(), D3 = 0, R4;
    if (n2.time && (D3 = Cr(n2.time), isNaN(D3)))
      return /* @__PURE__ */ new Date(NaN);
    if (n2.timeZone || r2.timeZone) {
      if (R4 = Wn(n2.timeZone || r2.timeZone, new Date(T4 + D3)), isNaN(R4))
        return /* @__PURE__ */ new Date(NaN);
    } else
      R4 = na(new Date(T4 + D3)), R4 = na(new Date(T4 + D3 + R4));
    return new Date(T4 + D3 + R4);
  } else
    return /* @__PURE__ */ new Date(NaN);
}
function Ar(e3) {
  var t3 = {}, r2 = Ve$2.dateTimePattern.exec(e3), a4;
  if (r2 ? (t3.date = r2[1], a4 = r2[3]) : (r2 = Ve$2.datePattern.exec(e3), r2 ? (t3.date = r2[1], a4 = r2[2]) : (t3.date = null, a4 = e3)), a4) {
    var n2 = Ve$2.timeZone.exec(a4);
    n2 ? (t3.time = a4.replace(n2[1], ""), t3.timeZone = n2[1].trim()) : t3.time = a4;
  }
  return t3;
}
function Sr(e3, t3) {
  var r2 = Ve$2.YYY[t3], a4 = Ve$2.YYYYY[t3], n2;
  if (n2 = Ve$2.YYYY.exec(e3) || a4.exec(e3), n2) {
    var o2 = n2[1];
    return {
      year: parseInt(o2, 10),
      restDateString: e3.slice(o2.length)
    };
  }
  if (n2 = Ve$2.YY.exec(e3) || r2.exec(e3), n2) {
    var i3 = n2[1];
    return {
      year: parseInt(i3, 10) * 100,
      restDateString: e3.slice(i3.length)
    };
  }
  return {
    year: null
  };
}
function Pr(e3, t3) {
  if (t3 === null)
    return null;
  var r2, a4, n2, o2;
  if (e3.length === 0)
    return a4 = /* @__PURE__ */ new Date(0), a4.setUTCFullYear(t3), a4;
  if (r2 = Ve$2.MM.exec(e3), r2)
    return a4 = /* @__PURE__ */ new Date(0), n2 = parseInt(r2[1], 10) - 1, ia(t3, n2) ? (a4.setUTCFullYear(t3, n2), a4) : /* @__PURE__ */ new Date(NaN);
  if (r2 = Ve$2.DDD.exec(e3), r2) {
    a4 = /* @__PURE__ */ new Date(0);
    var i3 = parseInt(r2[1], 10);
    return Or(t3, i3) ? (a4.setUTCFullYear(t3, 0, i3), a4) : /* @__PURE__ */ new Date(NaN);
  }
  if (r2 = Ve$2.MMDD.exec(e3), r2) {
    a4 = /* @__PURE__ */ new Date(0), n2 = parseInt(r2[1], 10) - 1;
    var c3 = parseInt(r2[2], 10);
    return ia(t3, n2, c3) ? (a4.setUTCFullYear(t3, n2, c3), a4) : /* @__PURE__ */ new Date(NaN);
  }
  if (r2 = Ve$2.Www.exec(e3), r2)
    return o2 = parseInt(r2[1], 10) - 1, ua(t3, o2) ? sa(t3, o2) : /* @__PURE__ */ new Date(NaN);
  if (r2 = Ve$2.WwwD.exec(e3), r2) {
    o2 = parseInt(r2[1], 10) - 1;
    var p2 = parseInt(r2[2], 10) - 1;
    return ua(t3, o2, p2) ? sa(t3, o2, p2) : /* @__PURE__ */ new Date(NaN);
  }
  return null;
}
function Cr(e3) {
  var t3, r2, a4;
  if (t3 = Ve$2.HH.exec(e3), t3)
    return r2 = parseFloat(t3[1].replace(",", ".")), gn(r2) ? r2 % 24 * mn : NaN;
  if (t3 = Ve$2.HHMM.exec(e3), t3)
    return r2 = parseInt(t3[1], 10), a4 = parseFloat(t3[2].replace(",", ".")), gn(r2, a4) ? r2 % 24 * mn + a4 * oa : NaN;
  if (t3 = Ve$2.HHMMSS.exec(e3), t3) {
    r2 = parseInt(t3[1], 10), a4 = parseInt(t3[2], 10);
    var n2 = parseFloat(t3[3].replace(",", "."));
    return gn(r2, a4, n2) ? r2 % 24 * mn + a4 * oa + n2 * 1e3 : NaN;
  }
  return null;
}
function sa(e3, t3, r2) {
  t3 = t3 || 0, r2 = r2 || 0;
  var a4 = /* @__PURE__ */ new Date(0);
  a4.setUTCFullYear(e3, 0, 4);
  var n2 = a4.getUTCDay() || 7, o2 = t3 * 7 + r2 + 1 - n2;
  return a4.setUTCDate(a4.getUTCDate() + o2), a4;
}
var _r = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31], Rr = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];
function Ca(e3) {
  return e3 % 400 === 0 || e3 % 4 === 0 && e3 % 100 !== 0;
}
function ia(e3, t3, r2) {
  if (t3 < 0 || t3 > 11)
    return false;
  if (r2 != null) {
    if (r2 < 1)
      return false;
    var a4 = Ca(e3);
    if (a4 && r2 > Rr[t3] || !a4 && r2 > _r[t3])
      return false;
  }
  return true;
}
function Or(e3, t3) {
  if (t3 < 1)
    return false;
  var r2 = Ca(e3);
  return !(r2 && t3 > 366 || !r2 && t3 > 365);
}
function ua(e3, t3, r2) {
  return !(t3 < 0 || t3 > 52 || r2 != null && (r2 < 0 || r2 > 6));
}
function gn(e3, t3, r2) {
  return !(e3 != null && (e3 < 0 || e3 >= 25) || t3 != null && (t3 < 0 || t3 >= 60) || r2 != null && (r2 < 0 || r2 >= 60));
}
var _n = { exports: {} }, Rn = { exports: {} };
(function(e3, t3) {
  Object.defineProperty(t3, "__esModule", {
    value: true
  }), t3.default = r2;
  function r2(a4, n2) {
    if (a4 == null)
      throw new TypeError("assign requires that input parameter not be null or undefined");
    for (var o2 in n2)
      Object.prototype.hasOwnProperty.call(n2, o2) && (a4[o2] = n2[o2]);
    return a4;
  }
  e3.exports = t3.default;
})(Rn, Rn.exports);
var Yr = Rn.exports;
(function(e3, t3) {
  var r2 = fr.default;
  Object.defineProperty(t3, "__esModule", {
    value: true
  }), t3.default = n2;
  var a4 = r2(Yr);
  function n2(o2) {
    return (0, a4.default)({}, o2);
  }
  e3.exports = t3.default;
})(_n, _n.exports);
var Nr = _n.exports;
const Ir = /* @__PURE__ */ Un(Nr);
function Br(e3, t3, r2) {
  var a4 = Cn(e3, r2), n2 = Wn(t3, a4, true), o2 = new Date(a4.getTime() - n2), i3 = /* @__PURE__ */ new Date(0);
  return i3.setFullYear(o2.getUTCFullYear(), o2.getUTCMonth(), o2.getUTCDate()), i3.setHours(o2.getUTCHours(), o2.getUTCMinutes(), o2.getUTCSeconds(), o2.getUTCMilliseconds()), i3;
}
function Er(e3, t3, r2) {
  if (typeof e3 == "string" && !e3.match(Pa)) {
    var a4 = Ir(r2);
    return a4.timeZone = t3, Cn(e3, a4);
  }
  var n2 = Cn(e3, r2), o2 = zn(
    n2.getFullYear(),
    n2.getMonth(),
    n2.getDate(),
    n2.getHours(),
    n2.getMinutes(),
    n2.getSeconds(),
    n2.getMilliseconds()
  ).getTime(), i3 = Wn(t3, new Date(o2));
  return new Date(o2 + i3);
}
function da(e3) {
  return (t3) => new Intl.DateTimeFormat(e3, { weekday: "short", timeZone: "UTC" }).format(/* @__PURE__ */ new Date(`2017-01-0${t3}T00:00:00+00:00`)).slice(0, 2);
}
function Fr(e3) {
  return (t3) => format$2(/* @__PURE__ */ new Date(`2017-01-0${t3}T00:00:00+00:00`), "EEEEEE", { locale: e3 });
}
const Hr = (e3, t3, r2) => {
  const a4 = [1, 2, 3, 4, 5, 6, 7];
  let n2;
  if (e3 !== null)
    try {
      n2 = a4.map(Fr(e3));
    } catch {
      n2 = a4.map(da(t3));
    }
  else
    n2 = a4.map(da(t3));
  const o2 = n2.slice(0, r2), i3 = n2.slice(r2 + 1, n2.length);
  return [n2[r2]].concat(...i3).concat(...o2);
}, jn = (e3, t3) => {
  const r2 = [];
  for (let a4 = +e3[0]; a4 <= +e3[1]; a4++)
    r2.push({ value: +a4, text: `${a4}` });
  return t3 ? r2.reverse() : r2;
}, _a = (e3, t3, r2) => {
  const a4 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12].map((o2) => {
    const i3 = o2 < 10 ? `0${o2}` : o2;
    return /* @__PURE__ */ new Date(`2017-${i3}-01T00:00:00+00:00`);
  });
  if (e3 !== null)
    try {
      const o2 = r2 === "long" ? "MMMM" : "MMM";
      return a4.map((i3, c3) => {
        const p2 = format$2(i3, o2, { locale: e3 });
        return {
          text: p2.charAt(0).toUpperCase() + p2.substring(1),
          value: c3
        };
      });
    } catch {
    }
  const n2 = new Intl.DateTimeFormat(t3, { month: r2, timeZone: "UTC" });
  return a4.map((o2, i3) => {
    const c3 = n2.format(o2);
    return {
      text: c3.charAt(0).toUpperCase() + c3.substring(1),
      value: i3
    };
  });
}, Vr = (e3) => [12, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11][e3], Re$2 = (e3) => {
  const t3 = unref(e3);
  return t3 != null && t3.$el ? t3 == null ? void 0 : t3.$el : t3;
}, Lr = (e3) => Object.assign({ type: "dot" }, e3), Ra = (e3) => Array.isArray(e3) ? !!e3[0] && !!e3[1] : false, tn = {
  prop: (e3) => `"${e3}" prop must be enabled!`,
  dateArr: (e3) => `You need to use array as "model-value" binding in order to support "${e3}"`
}, Ce$2 = (e3) => e3, ca = (e3) => e3 === 0 ? e3 : !e3 || isNaN(+e3) ? null : +e3, fa = (e3) => e3 === null, Ur = (e3) => {
  if (e3)
    return [...e3.querySelectorAll("input, button, select, textarea, a[href]")][0];
}, zr = (e3) => {
  const t3 = [], r2 = (a4) => a4.filter((n2) => n2);
  for (let a4 = 0; a4 < e3.length; a4 += 3) {
    const n2 = [e3[a4], e3[a4 + 1], e3[a4 + 2]];
    t3.push(r2(n2));
  }
  return t3;
}, Ht = (e3, t3, r2) => {
  const a4 = r2 != null, n2 = t3 != null;
  if (!a4 && !n2)
    return false;
  const o2 = +r2, i3 = +t3;
  return a4 && n2 ? +e3 > o2 || +e3 < i3 : a4 ? +e3 > o2 : n2 ? +e3 < i3 : false;
}, Ct = (e3, t3) => zr(e3).map((r2) => r2.map((a4) => {
  const { active: n2, disabled: o2, isBetween: i3, highlighted: c3 } = t3(a4);
  return {
    ...a4,
    active: n2,
    disabled: o2,
    className: {
      dp__overlay_cell_active: n2,
      dp__overlay_cell: !n2,
      dp__overlay_cell_disabled: o2,
      dp__overlay_cell_pad: true,
      dp__overlay_cell_active_disabled: o2 && n2,
      dp__cell_in_between: i3,
      "dp--highlighted": c3
    }
  };
})), ft$1 = (e3, t3, r2 = false) => {
  e3 && t3.allowStopPropagation && (r2 && e3.stopImmediatePropagation(), e3.stopPropagation());
}, Wr = () => [
  "a[href]",
  "area[href]",
  "input:not([disabled]):not([type='hidden'])",
  "select:not([disabled])",
  "textarea:not([disabled])",
  "button:not([disabled])",
  "[tabindex]:not([tabindex='-1'])",
  "[data-datepicker-instance]"
].join(", ");
function jr(e3, t3) {
  let r2 = [...document.querySelectorAll(Wr())];
  r2 = r2.filter((n2) => !e3.contains(n2) || n2.hasAttribute("data-datepicker-instance"));
  const a4 = r2.indexOf(e3);
  if (a4 >= 0 && (t3 ? a4 - 1 >= 0 : a4 + 1 <= r2.length))
    return r2[a4 + (t3 ? -1 : 1)];
}
const Kr = (e3, t3) => {
  let r2;
  return function(...a4) {
    clearTimeout(r2), r2 = setTimeout(() => {
      e3(...a4);
    }, t3);
  };
}, va = (e3, t3, r2, a4, n2) => {
  const o2 = parse$3(e3, t3.slice(0, e3.length), /* @__PURE__ */ new Date());
  return isValid(o2) && isDate$1(o2) ? a4 || n2 ? o2 : set(o2, {
    hours: +r2.hours,
    minutes: +(r2 == null ? void 0 : r2.minutes),
    seconds: +(r2 == null ? void 0 : r2.seconds),
    milliseconds: 0
  }) : null;
}, Gr = (e3, t3, r2, a4, n2) => {
  const o2 = Array.isArray(r2) ? r2[0] : r2;
  if (typeof t3 == "string")
    return va(e3, t3, o2, a4, n2);
  if (Array.isArray(t3)) {
    let i3 = null;
    for (const c3 of t3)
      if (i3 = va(e3, c3, o2, a4, n2), i3)
        break;
    return i3;
  }
  return typeof t3 == "function" ? t3(e3) : null;
}, B$1 = (e3) => e3 ? new Date(e3) : /* @__PURE__ */ new Date(), qr = (e3, t3, r2) => {
  if (t3) {
    const n2 = (e3.getMonth() + 1).toString().padStart(2, "0"), o2 = e3.getDate().toString().padStart(2, "0"), i3 = e3.getHours().toString().padStart(2, "0"), c3 = e3.getMinutes().toString().padStart(2, "0"), p2 = r2 ? e3.getSeconds().toString().padStart(2, "0") : "00";
    return `${e3.getFullYear()}-${n2}-${o2}T${i3}:${c3}:${p2}.000Z`;
  }
  const a4 = Date.UTC(
    e3.getUTCFullYear(),
    e3.getUTCMonth(),
    e3.getUTCDate(),
    e3.getUTCHours(),
    e3.getUTCMinutes(),
    e3.getUTCSeconds()
  );
  return new Date(a4).toISOString();
}, Fe$2 = (e3) => {
  let t3 = B$1(JSON.parse(JSON.stringify(e3)));
  return t3 = setHours(t3, 0), t3 = setMinutes(t3, 0), t3 = setSeconds(t3, 0), t3 = setMilliseconds(t3, 0), t3;
}, vt$1 = (e3, t3, r2, a4) => {
  let n2 = e3 ? B$1(e3) : B$1();
  return (t3 || t3 === 0) && (n2 = setHours(n2, +t3)), (r2 || r2 === 0) && (n2 = setMinutes(n2, +r2)), (a4 || a4 === 0) && (n2 = setSeconds(n2, +a4)), setMilliseconds(n2, 0);
}, Ye$2 = (e3, t3) => !e3 || !t3 ? false : isBefore(Fe$2(e3), Fe$2(t3)), ke$1 = (e3, t3) => !e3 || !t3 ? false : isEqual(Fe$2(e3), Fe$2(t3)), Ee$1 = (e3, t3) => !e3 || !t3 ? false : isAfter(Fe$2(e3), Fe$2(t3)), nn = (e3, t3, r2) => e3 != null && e3[0] && (e3 != null && e3[1]) ? Ee$1(r2, e3[0]) && Ye$2(r2, e3[1]) : e3 != null && e3[0] && t3 ? Ee$1(r2, e3[0]) && Ye$2(r2, t3) || Ye$2(r2, e3[0]) && Ee$1(r2, t3) : false, Xe$1 = (e3) => {
  const t3 = set(new Date(e3), { date: 1 });
  return Fe$2(t3);
}, yn = (e3, t3, r2) => t3 && (r2 || r2 === 0) ? Object.fromEntries(
  ["hours", "minutes", "seconds"].map((a4) => a4 === t3 ? [a4, r2] : [a4, isNaN(+e3[a4]) ? void 0 : +e3[a4]])
) : {
  hours: isNaN(+e3.hours) ? void 0 : +e3.hours,
  minutes: isNaN(+e3.minutes) ? void 0 : +e3.minutes,
  seconds: isNaN(+e3.seconds) ? void 0 : +e3.seconds
}, wt$1 = (e3) => ({
  hours: getHours(e3),
  minutes: getMinutes(e3),
  seconds: getSeconds(e3)
}), Oa = (e3, t3) => {
  if (t3) {
    const r2 = getYear(B$1(t3));
    if (r2 > e3)
      return 12;
    if (r2 === e3)
      return getMonth(B$1(t3));
  }
}, Ya = (e3, t3) => {
  if (t3) {
    const r2 = getYear(B$1(t3));
    return r2 < e3 ? -1 : r2 === e3 ? getMonth(B$1(t3)) : void 0;
  }
}, _t = (e3) => {
  if (e3)
    return getYear(B$1(e3));
}, et$1 = (e3, t3) => t3 ? Br(e3, t3) : e3, Na = (e3, t3) => t3 ? Er(e3, t3) : e3, Zr = (e3) => e3 instanceof Date ? e3 : parseISO(e3), Ia = (e3, t3) => {
  const r2 = Ee$1(e3, t3) ? t3 : e3, a4 = Ee$1(t3, e3) ? t3 : e3;
  return eachDayOfInterval({ start: r2, end: a4 });
}, Qr = (e3) => {
  const t3 = addMonths(e3, 1);
  return { month: getMonth(t3), year: getYear(t3) };
}, xt = (e3, t3, r2) => {
  const a4 = startOfWeek(et$1(e3, t3), { weekStartsOn: +r2 }), n2 = endOfWeek(et$1(e3, t3), { weekStartsOn: +r2 });
  return [a4, n2];
}, Ba = (e3, t3) => {
  const r2 = {
    hours: getHours(B$1()),
    minutes: getMinutes(B$1()),
    seconds: t3 ? getSeconds(B$1()) : 0
  };
  return Object.assign(r2, e3);
}, dt$1 = (e3, t3, r2) => [set(B$1(e3), { date: 1 }), set(B$1(), { month: t3, year: r2, date: 1 })], ot$1 = (e3, t3, r2) => {
  let a4 = e3 ? B$1(e3) : B$1();
  return (t3 || t3 === 0) && (a4 = setMonth(a4, t3)), r2 && (a4 = setYear(a4, r2)), a4;
}, Ea = (e3, t3, r2, a4, n2) => {
  if (!a4 || n2 && !t3 || !n2 && !r2)
    return false;
  const o2 = n2 ? addMonths(e3, 1) : subMonths(e3, 1), i3 = [getMonth(o2), getYear(o2)];
  return n2 ? !Jr(...i3, t3) : !Xr(...i3, r2);
}, Xr = (e3, t3, r2) => Ye$2(...dt$1(r2, e3, t3)) || ke$1(...dt$1(r2, e3, t3)), Jr = (e3, t3, r2) => Ee$1(...dt$1(r2, e3, t3)) || ke$1(...dt$1(r2, e3, t3)), Fa = (e3, t3, r2, a4, n2, o2, i3) => {
  if (typeof t3 == "function" && !i3)
    return t3(e3);
  const c3 = r2 ? { locale: r2 } : void 0;
  return Array.isArray(e3) ? `${format$2(e3[0], o2, c3)}${n2 && !e3[1] ? "" : a4}${e3[1] ? format$2(e3[1], o2, c3) : ""}` : format$2(e3, o2, c3);
}, Tt = (e3) => {
  if (e3)
    return null;
  throw new Error(tn.prop("partial-range"));
}, qt = (e3, t3) => {
  if (t3)
    return e3();
  throw new Error(tn.prop("range"));
}, On = (e3) => Array.isArray(e3) ? isValid(e3[0]) && (e3[1] ? isValid(e3[1]) : true) : e3 ? isValid(e3) : false, xr = (e3, t3) => set(t3 ?? B$1(), {
  hours: +e3.hours || 0,
  minutes: +e3.minutes || 0,
  seconds: +e3.seconds || 0
}), hn = (e3, t3, r2, a4) => {
  if (!e3)
    return true;
  if (a4) {
    const n2 = r2 === "max" ? isBefore(e3, t3) : isAfter(e3, t3), o2 = { seconds: 0, milliseconds: 0 };
    return n2 || isEqual(set(e3, o2), set(t3, o2));
  }
  return r2 === "max" ? e3.getTime() <= t3.getTime() : e3.getTime() >= t3.getTime();
}, pn = (e3, t3, r2) => e3 ? xr(e3, t3) : B$1(r2 ?? t3), ma = (e3, t3, r2, a4, n2) => {
  if (Array.isArray(a4)) {
    const i3 = pn(e3, a4[0], t3), c3 = pn(e3, a4[1], t3);
    return hn(a4[0], i3, r2, !!t3) && hn(a4[1], c3, r2, !!t3) && n2;
  }
  const o2 = pn(e3, a4, t3);
  return hn(a4, o2, r2, !!t3) && n2;
}, bn = (e3) => set(B$1(), wt$1(e3)), el = (e3, t3) => Array.isArray(e3) ? e3.map((r2) => B$1(r2)).filter((r2) => getYear(B$1(r2)) === t3).map((r2) => getMonth(r2)) : [], Ha = (e3, t3, r2) => typeof e3 == "function" ? e3({ month: t3, year: r2 }) : !!e3.months.find((a4) => a4.month === t3 && a4.year === r2), Kn = (e3, t3) => typeof e3 == "function" ? e3(t3) : e3.years.includes(t3), Nt = reactive({
  menuFocused: false,
  shiftKeyInMenu: false
}), Va = () => {
  const e3 = (a4) => {
    Nt.menuFocused = a4;
  }, t3 = (a4) => {
    Nt.shiftKeyInMenu !== a4 && (Nt.shiftKeyInMenu = a4);
  };
  return {
    control: computed(() => ({ shiftKeyInMenu: Nt.shiftKeyInMenu, menuFocused: Nt.menuFocused })),
    setMenuFocused: e3,
    setShiftKey: t3
  };
}, $e$2 = reactive({
  monthYear: [],
  calendar: [],
  time: [],
  actionRow: [],
  selectionGrid: [],
  timePicker: {
    0: [],
    1: []
  },
  monthPicker: []
}), kn = ref(null), Zt = ref(false), wn = ref(false), Dn = ref(false), Mn = ref(false), He$1 = ref(0), Oe$2 = ref(0), yt$1 = () => {
  const e3 = computed(() => Zt.value ? [...$e$2.selectionGrid, $e$2.actionRow].filter((g2) => g2.length) : wn.value ? [
    ...$e$2.timePicker[0],
    ...$e$2.timePicker[1],
    Mn.value ? [] : [kn.value],
    $e$2.actionRow
  ].filter((g2) => g2.length) : Dn.value ? [...$e$2.monthPicker, $e$2.actionRow] : [$e$2.monthYear, ...$e$2.calendar, $e$2.time, $e$2.actionRow].filter((g2) => g2.length)), t3 = (g2) => {
    He$1.value = g2 ? He$1.value + 1 : He$1.value - 1;
    let S4 = null;
    e3.value[Oe$2.value] && (S4 = e3.value[Oe$2.value][He$1.value]), S4 || (He$1.value = g2 ? He$1.value - 1 : He$1.value + 1);
  }, r2 = (g2) => {
    if (Oe$2.value === 0 && !g2 || Oe$2.value === e3.value.length && g2)
      return;
    Oe$2.value = g2 ? Oe$2.value + 1 : Oe$2.value - 1, e3.value[Oe$2.value] ? e3.value[Oe$2.value] && !e3.value[Oe$2.value][He$1.value] && He$1.value !== 0 && (He$1.value = e3.value[Oe$2.value].length - 1) : Oe$2.value = g2 ? Oe$2.value - 1 : Oe$2.value + 1;
  }, a4 = (g2) => {
    let S4 = null;
    e3.value[Oe$2.value] && (S4 = e3.value[Oe$2.value][He$1.value]), S4 ? S4.focus({ preventScroll: !Zt.value }) : He$1.value = g2 ? He$1.value - 1 : He$1.value + 1;
  }, n2 = () => {
    t3(true), a4(true);
  }, o2 = () => {
    t3(false), a4(false);
  }, i3 = () => {
    r2(false), a4(true);
  }, c3 = () => {
    r2(true), a4(true);
  }, p2 = (g2, S4) => {
    $e$2[S4] = g2;
  }, T4 = (g2, S4) => {
    $e$2[S4] = g2;
  }, D3 = () => {
    He$1.value = 0, Oe$2.value = 0;
  };
  return {
    buildMatrix: p2,
    buildMultiLevelMatrix: T4,
    setTimePickerBackRef: (g2) => {
      kn.value = g2;
    },
    setSelectionGrid: (g2) => {
      Zt.value = g2, D3(), g2 || ($e$2.selectionGrid = []);
    },
    setTimePicker: (g2, S4 = false) => {
      wn.value = g2, Mn.value = S4, D3(), g2 || ($e$2.timePicker[0] = [], $e$2.timePicker[1] = []);
    },
    setTimePickerElements: (g2, S4 = 0) => {
      $e$2.timePicker[S4] = g2;
    },
    arrowRight: n2,
    arrowLeft: o2,
    arrowUp: i3,
    arrowDown: c3,
    clearArrowNav: () => {
      $e$2.monthYear = [], $e$2.calendar = [], $e$2.time = [], $e$2.actionRow = [], $e$2.selectionGrid = [], $e$2.timePicker[0] = [], $e$2.timePicker[1] = [], Zt.value = false, wn.value = false, Mn.value = false, Dn.value = false, D3(), kn.value = null;
    },
    setMonthPicker: (g2) => {
      Dn.value = g2, D3();
    },
    refSets: $e$2
    // exposed for testing
  };
}, ga = (e3) => ({
  menuAppearTop: "dp-menu-appear-top",
  menuAppearBottom: "dp-menu-appear-bottom",
  open: "dp-slide-down",
  close: "dp-slide-up",
  next: "calendar-next",
  previous: "calendar-prev",
  vNext: "dp-slide-up",
  vPrevious: "dp-slide-down",
  ...e3 ?? {}
}), tl = (e3) => ({
  toggleOverlay: "Toggle overlay",
  menu: "Datepicker menu",
  input: "Datepicker input",
  calendarWrap: "Calendar wrapper",
  calendarDays: "Calendar days",
  openTimePicker: "Open time picker",
  closeTimePicker: "Close time Picker",
  incrementValue: (t3) => `Increment ${t3}`,
  decrementValue: (t3) => `Decrement ${t3}`,
  openTpOverlay: (t3) => `Open ${t3} overlay`,
  amPmButton: "Switch AM/PM mode",
  openYearsOverlay: "Open years overlay",
  openMonthsOverlay: "Open months overlay",
  nextMonth: "Next month",
  prevMonth: "Previous month",
  nextYear: "Next year",
  prevYear: "Previous year",
  day: () => "",
  ...e3 ?? {}
}), ya = (e3) => e3 ? typeof e3 == "boolean" ? e3 ? 2 : 0 : +e3 >= 2 ? +e3 : 2 : 0, nl = (e3) => {
  const t3 = typeof e3 == "object" && e3, r2 = {
    static: true,
    solo: false
  };
  if (!e3)
    return { ...r2, count: ya(false) };
  const a4 = t3 ? e3 : {}, n2 = t3 ? a4.count ?? true : e3, o2 = ya(n2);
  return Object.assign(r2, a4, { count: o2 });
}, al = (e3, t3, r2) => e3 || (typeof r2 == "string" ? r2 : t3), rl = (e3) => typeof e3 == "boolean" ? e3 ? ga({}) : false : ga(e3), ll = (e3) => {
  const t3 = {
    enterSubmit: true,
    tabSubmit: true,
    openMenu: true,
    selectOnFocus: false,
    rangeSeparator: " - "
  };
  return typeof e3 == "object" ? { ...t3, ...e3 ?? {}, enabled: true } : { ...t3, enabled: e3 };
}, ol = (e3) => ({
  months: [],
  years: [],
  times: { hours: [], minutes: [], seconds: [] },
  ...e3 ?? {}
}), sl = (e3) => ({
  showSelect: true,
  showCancel: true,
  showNow: false,
  showPreview: true,
  ...e3 ?? {}
}), il = (e3) => {
  const t3 = { input: false };
  return typeof e3 == "object" ? { ...t3, ...e3 ?? {}, enabled: true } : {
    enabled: e3,
    ...t3
  };
}, ul = (e3) => ({ ...{
  allowStopPropagation: true,
  closeOnScroll: false,
  modeHeight: 255,
  allowPreventDefault: false,
  closeOnClearValue: true,
  closeOnAutoApply: true,
  noSwipe: false,
  keepActionRow: false,
  onClickOutside: void 0,
  tabOutClosesMenu: true
}, ...e3 ?? {} }), dl = (e3, t3, r2) => {
  const a4 = {
    dates: Array.isArray(e3) ? e3.map((n2) => B$1(n2)) : [],
    years: [],
    months: [],
    quarters: [],
    weeks: [],
    weekdays: t3,
    options: { highlightDisabled: r2 }
  };
  return typeof e3 == "function" ? e3 : { ...a4, ...e3 ?? {} };
}, cl = (e3) => typeof e3 == "object" ? {
  type: e3.type,
  hideOnOffsetDates: e3.hideOnOffsetDates ?? false
} : {
  type: e3,
  hideOnOffsetDates: false
}, Pe$1 = (e3) => {
  const t3 = () => {
    const g2 = e3.enableSeconds ? ":ss" : "";
    return e3.is24 ? `HH:mm${g2}` : `hh:mm${g2} aa`;
  }, r2 = () => e3.format ? e3.format : e3.monthPicker ? "MM/yyyy" : e3.timePicker ? t3() : e3.weekPicker ? "MM/dd/yyyy" : e3.yearPicker ? "yyyy" : e3.quarterPicker ? "QQQ/yyyy" : e3.enableTimePicker ? `MM/dd/yyyy, ${t3()}` : "MM/dd/yyyy", a4 = (g2) => Ba(g2, e3.enableSeconds), n2 = () => e3.range ? e3.startTime && Array.isArray(e3.startTime) ? [a4(e3.startTime[0]), a4(e3.startTime[1])] : null : e3.startTime && !Array.isArray(e3.startTime) ? a4(e3.startTime) : null, o2 = computed(() => nl(e3.multiCalendars)), i3 = computed(() => n2()), c3 = computed(() => tl(e3.ariaLabels)), p2 = computed(() => ol(e3.filters)), T4 = computed(() => rl(e3.transitions)), D3 = computed(() => sl(e3.actionRow)), R4 = computed(
    () => al(e3.previewFormat, e3.format, r2())
  ), P2 = computed(() => ll(e3.textInput)), M4 = computed(() => il(e3.inline)), C2 = computed(() => ul(e3.config)), A2 = computed(
    () => dl(e3.highlight, e3.highlightWeekDays, e3.highlightDisabledDays)
  ), q3 = computed(() => cl(e3.weekNumbers));
  return {
    defaultedTransitions: T4,
    defaultedMultiCalendars: o2,
    defaultedStartTime: i3,
    defaultedAriaLabels: c3,
    defaultedFilters: p2,
    defaultedActionRow: D3,
    defaultedPreviewFormat: R4,
    defaultedTextInput: P2,
    defaultedInline: M4,
    defaultedConfig: C2,
    defaultedHighlight: A2,
    defaultedWeekNumbers: q3,
    getDefaultPattern: r2,
    getDefaultStartTime: n2
  };
}, fl = (e3, t3, r2) => {
  const a4 = ref(), { defaultedTextInput: n2, getDefaultPattern: o2 } = Pe$1(t3), i3 = ref(""), c3 = toRef(t3, "format");
  watch(a4, () => {
    e3("internal-model-change", a4.value);
  }), watch(c3, () => {
    ne2();
  });
  const p2 = (s5) => Na(s5, t3.timezone), T4 = (s5) => et$1(s5, t3.timezone), D3 = (s5, J3, de2 = false) => Fa(
    s5,
    t3.format,
    t3.formatLocale,
    n2.value.rangeSeparator,
    t3.modelAuto,
    J3 ?? o2(),
    de2
  ), R4 = (s5) => s5 ? t3.modelType ? d4(s5) : {
    hours: getHours(s5),
    minutes: getMinutes(s5),
    seconds: t3.enableSeconds ? getSeconds(s5) : 0
  } : null, P2 = (s5) => t3.modelType ? d4(s5) : { month: getMonth(s5), year: getYear(s5) }, M4 = (s5) => Array.isArray(s5) ? t3.multiDates ? s5.map((J3) => C2(J3, setYear(B$1(), J3))) : qt(
    () => [
      setYear(B$1(), s5[0]),
      s5[1] ? setYear(B$1(), s5[1]) : Tt(t3.partialRange)
    ],
    t3.range
  ) : setYear(B$1(), +s5), C2 = (s5, J3) => (typeof s5 == "string" || typeof s5 == "number") && t3.modelType ? O4(s5) : J3, A2 = (s5) => Array.isArray(s5) ? [
    C2(
      s5[0],
      vt$1(null, +s5[0].hours, +s5[0].minutes, s5[0].seconds)
    ),
    C2(
      s5[1],
      vt$1(null, +s5[1].hours, +s5[1].minutes, s5[1].seconds)
    )
  ] : C2(s5, vt$1(null, s5.hours, s5.minutes, s5.seconds)), q3 = (s5) => Array.isArray(s5) ? t3.multiDates ? s5.map((J3) => C2(J3, ot$1(null, +J3.month, +J3.year))) : qt(
    () => [
      C2(s5[0], ot$1(null, +s5[0].month, +s5[0].year)),
      C2(
        s5[1],
        s5[1] ? ot$1(null, +s5[1].month, +s5[1].year) : Tt(t3.partialRange)
      )
    ],
    t3.range
  ) : C2(s5, ot$1(null, +s5.month, +s5.year)), g2 = (s5) => {
    if (Array.isArray(s5))
      return s5.map((J3) => O4(J3));
    throw new Error(tn.dateArr("multi-dates"));
  }, S4 = (s5) => {
    if (Array.isArray(s5))
      return [B$1(s5[0]), B$1(s5[1])];
    throw new Error(tn.dateArr("week-picker"));
  }, F2 = (s5) => t3.modelAuto ? Array.isArray(s5) ? [O4(s5[0]), O4(s5[1])] : t3.autoApply ? [O4(s5)] : [O4(s5), null] : Array.isArray(s5) ? qt(
    () => [
      O4(s5[0]),
      s5[1] ? O4(s5[1]) : Tt(t3.partialRange)
    ],
    t3.range
  ) : O4(s5), b4 = () => {
    Array.isArray(a4.value) && t3.range && a4.value.length === 1 && a4.value.push(Tt(t3.partialRange));
  }, _2 = () => {
    const s5 = a4.value;
    return [
      d4(s5[0]),
      s5[1] ? d4(s5[1]) : Tt(t3.partialRange)
    ];
  }, X4 = () => a4.value[1] ? _2() : d4(Ce$2(a4.value[0])), ae2 = () => (a4.value || []).map((s5) => d4(s5)), V3 = () => (b4(), t3.modelAuto ? X4() : t3.multiDates ? ae2() : Array.isArray(a4.value) ? qt(() => _2(), t3.range) : d4(Ce$2(a4.value))), ie2 = (s5) => !s5 || Array.isArray(s5) && !s5.length ? null : t3.timePicker ? A2(Ce$2(s5)) : t3.monthPicker ? q3(Ce$2(s5)) : t3.yearPicker ? M4(Ce$2(s5)) : t3.multiDates ? g2(Ce$2(s5)) : t3.weekPicker ? S4(Ce$2(s5)) : F2(Ce$2(s5)), E3 = (s5) => {
    const J3 = ie2(s5);
    On(Ce$2(J3)) ? (a4.value = Ce$2(J3), ne2()) : (a4.value = null, i3.value = "");
  }, f2 = () => {
    const s5 = (J3) => format$2(J3, n2.value.format);
    return `${s5(a4.value[0])} ${n2.value.rangeSeparator} ${a4.value[1] ? s5(a4.value[1]) : ""}`;
  }, w3 = () => r2.value && a4.value ? Array.isArray(a4.value) ? f2() : format$2(a4.value, n2.value.format) : D3(a4.value), L3 = () => a4.value ? t3.multiDates ? a4.value.map((s5) => D3(s5)).join("; ") : n2.value.enabled && typeof n2.value.format == "string" ? w3() : D3(a4.value) : "", ne2 = () => {
    !t3.format || typeof t3.format == "string" || n2.value.enabled && typeof n2.value.format == "string" ? i3.value = L3() : i3.value = t3.format(a4.value);
  }, O4 = (s5) => {
    if (t3.utc) {
      const J3 = new Date(s5);
      return t3.utc === "preserve" ? new Date(J3.getTime() + J3.getTimezoneOffset() * 6e4) : J3;
    }
    return t3.modelType ? t3.modelType === "date" || t3.modelType === "timestamp" ? T4(new Date(s5)) : t3.modelType === "format" && (typeof t3.format == "string" || !t3.format) ? parse$3(s5, o2(), /* @__PURE__ */ new Date()) : T4(parse$3(s5, t3.modelType, /* @__PURE__ */ new Date())) : T4(new Date(s5));
  }, d4 = (s5) => s5 ? t3.utc ? qr(s5, t3.utc === "preserve", t3.enableSeconds) : t3.modelType ? t3.modelType === "timestamp" ? +p2(s5) : t3.modelType === "format" && (typeof t3.format == "string" || !t3.format) ? D3(p2(s5)) : D3(p2(s5), t3.modelType, true) : p2(s5) : "", Y3 = (s5, J3 = false) => {
    if (e3("update:model-value", s5), t3.emitTimezone && J3) {
      const de2 = Array.isArray(s5) ? s5.map(($3) => et$1(Ce$2($3)), t3.emitTimezone) : et$1(Ce$2(s5), t3.emitTimezone);
      e3("update:model-timezone-value", de2);
    }
  }, Z3 = (s5) => Array.isArray(a4.value) ? t3.multiDates ? a4.value.map((J3) => s5(J3)) : [
    s5(a4.value[0]),
    a4.value[1] ? s5(a4.value[1]) : Tt(t3.partialRange)
  ] : s5(Ce$2(a4.value)), y4 = (s5) => Y3(Ce$2(Z3(s5)));
  return {
    inputValue: i3,
    internalModelValue: a4,
    checkBeforeEmit: () => a4.value ? t3.range ? t3.partialRange ? a4.value.length >= 1 : a4.value.length === 2 : !!a4.value : false,
    parseExternalModelValue: E3,
    formatInputValue: ne2,
    emitModelValue: () => (ne2(), t3.monthPicker ? y4(P2) : t3.timePicker ? y4(R4) : t3.yearPicker ? y4(getYear) : t3.weekPicker ? Y3(
      a4.value.map((s5) => d4(s5)),
      true
    ) : Y3(V3(), true))
  };
}, vl = (e3, t3) => {
  const { defaultedFilters: r2 } = Pe$1(e3), { validateMonthYearInRange: a4 } = $t$1(e3), n2 = (T4, D3) => {
    let R4 = T4;
    return r2.value.months.includes(getMonth(R4)) ? (R4 = D3 ? addMonths(T4, 1) : subMonths(T4, 1), n2(R4, D3)) : R4;
  }, o2 = (T4, D3) => {
    let R4 = T4;
    return r2.value.years.includes(getYear(R4)) ? (R4 = D3 ? addYears(T4, 1) : subYears(T4, 1), o2(R4, D3)) : R4;
  }, i3 = (T4, D3 = false) => {
    const R4 = set(/* @__PURE__ */ new Date(), { month: e3.month, year: e3.year });
    let P2 = T4 ? addMonths(R4, 1) : subMonths(R4, 1);
    e3.disableYearSelect && (P2 = setYear(P2, e3.year));
    let M4 = getMonth(P2), C2 = getYear(P2);
    r2.value.months.includes(M4) && (P2 = n2(P2, T4), M4 = getMonth(P2), C2 = getYear(P2)), r2.value.years.includes(C2) && (P2 = o2(P2, T4), C2 = getYear(P2)), a4(M4, C2, T4, e3.preventMinMaxNavigation) && c3(M4, C2, D3);
  }, c3 = (T4, D3, R4) => {
    t3("update-month-year", { month: T4, year: D3, fromNav: R4 });
  }, p2 = computed(() => (T4) => Ea(
    set(/* @__PURE__ */ new Date(), { month: e3.month, year: e3.year }),
    e3.maxDate,
    e3.minDate,
    e3.preventMinMaxNavigation,
    T4
  ));
  return { handleMonthYearChange: i3, isDisabled: p2, updateMonthYear: c3 };
};
var At = /* @__PURE__ */ ((e3) => (e3.center = "center", e3.left = "left", e3.right = "right", e3))(At || {}), Qe$1 = /* @__PURE__ */ ((e3) => (e3.month = "month", e3.year = "year", e3))(Qe$1 || {}), pt$1 = /* @__PURE__ */ ((e3) => (e3.top = "top", e3.bottom = "bottom", e3))(pt$1 || {}), Dt = /* @__PURE__ */ ((e3) => (e3.header = "header", e3.calendar = "calendar", e3.timePicker = "timePicker", e3))(Dt || {}), at$1 = /* @__PURE__ */ ((e3) => (e3.month = "month", e3.year = "year", e3.calendar = "calendar", e3.time = "time", e3.minutes = "minutes", e3.hours = "hours", e3.seconds = "seconds", e3))(at$1 || {});
const ml = ({
  menuRef: e3,
  menuRefInner: t3,
  inputRef: r2,
  pickerWrapperRef: a4,
  inline: n2,
  emit: o2,
  props: i3,
  slots: c3
}) => {
  const p2 = ref({}), T4 = ref(false), D3 = ref({
    top: "0",
    left: "0"
  }), R4 = ref(false), P2 = toRef(i3, "teleportCenter");
  watch(P2, () => {
    D3.value = JSON.parse(JSON.stringify({})), b4();
  });
  const M4 = (d4) => {
    if (i3.teleport) {
      const Y3 = d4.getBoundingClientRect();
      return {
        left: Y3.left + window.scrollX,
        top: Y3.top + window.scrollY
      };
    }
    return { top: 0, left: 0 };
  }, C2 = (d4, Y3) => {
    D3.value.left = `${d4 + Y3 - p2.value.width}px`;
  }, A2 = (d4) => {
    D3.value.left = `${d4}px`;
  }, q3 = (d4, Y3) => {
    i3.position === At.left && A2(d4), i3.position === At.right && C2(d4, Y3), i3.position === At.center && (D3.value.left = `${d4 + Y3 / 2 - p2.value.width / 2}px`);
  }, g2 = (d4) => {
    const { width: Y3, height: Z3 } = d4.getBoundingClientRect(), { top: y4, left: l2 } = i3.altPosition ? i3.altPosition(d4) : M4(d4);
    return { top: +y4, left: +l2, width: Y3, height: Z3 };
  }, S4 = () => {
    D3.value.left = "50%", D3.value.top = "50%", D3.value.transform = "translate(-50%, -50%)", D3.value.position = "fixed", delete D3.value.opacity;
  }, F2 = () => {
    const d4 = Re$2(r2), { top: Y3, left: Z3, transform: y4 } = i3.altPosition(d4);
    D3.value = { top: `${Y3}px`, left: `${Z3}px`, transform: y4 ?? "" };
  }, b4 = (d4 = true) => {
    var Y3;
    if (!n2.value.enabled) {
      if (P2.value)
        return S4();
      if (i3.altPosition !== null)
        return F2();
      if (d4) {
        const Z3 = i3.teleport ? (Y3 = t3.value) == null ? void 0 : Y3.$el : e3.value;
        Z3 && (p2.value = Z3.getBoundingClientRect()), o2("recalculate-position");
      }
      return f2();
    }
  }, _2 = ({ inputEl: d4, left: Y3, width: Z3 }) => {
    window.screen.width > 768 && !T4.value && q3(Y3, Z3), V3(d4);
  }, X4 = (d4) => {
    const { top: Y3, left: Z3, height: y4, width: l2 } = g2(d4);
    D3.value.top = `${y4 + Y3 + +i3.offset}px`, R4.value = false, T4.value || (D3.value.left = `${Z3 + l2 / 2 - p2.value.width / 2}px`), _2({ inputEl: d4, left: Z3, width: l2 });
  }, ae2 = (d4) => {
    const { top: Y3, left: Z3, width: y4 } = g2(d4);
    D3.value.top = `${Y3 - +i3.offset - p2.value.height}px`, R4.value = true, _2({ inputEl: d4, left: Z3, width: y4 });
  }, V3 = (d4) => {
    if (i3.autoPosition) {
      const { left: Y3, width: Z3 } = g2(d4), { left: y4, right: l2 } = p2.value;
      if (!T4.value) {
        if (Math.abs(y4) !== Math.abs(l2)) {
          if (y4 <= 0)
            return T4.value = true, A2(Y3);
          if (l2 >= document.documentElement.clientWidth)
            return T4.value = true, C2(Y3, Z3);
        }
        return q3(Y3, Z3);
      }
    }
  }, ie2 = () => {
    const d4 = Re$2(r2);
    if (d4) {
      const { height: Y3 } = p2.value, { top: Z3, height: y4 } = d4.getBoundingClientRect(), h4 = window.innerHeight - Z3 - y4, s5 = Z3;
      return Y3 <= h4 ? pt$1.bottom : Y3 > h4 && Y3 <= s5 ? pt$1.top : h4 >= s5 ? pt$1.bottom : pt$1.top;
    }
    return pt$1.bottom;
  }, E3 = (d4) => ie2() === pt$1.bottom ? X4(d4) : ae2(d4), f2 = () => {
    const d4 = Re$2(r2);
    if (d4)
      return i3.autoPosition ? E3(d4) : X4(d4);
  }, w3 = function(d4) {
    if (d4) {
      const Y3 = d4.scrollHeight > d4.clientHeight, y4 = window.getComputedStyle(d4).overflowY.indexOf("hidden") !== -1;
      return Y3 && !y4;
    }
    return true;
  }, L3 = function(d4) {
    return !d4 || d4 === document.body || d4.nodeType === Node.DOCUMENT_FRAGMENT_NODE ? window : w3(d4) ? d4 : L3(d4.parentNode);
  }, ne2 = (d4) => {
    if (d4)
      switch (i3.position) {
        case At.left:
          return { left: 0, transform: "translateX(0)" };
        case At.right:
          return { left: `${d4.width}px`, transform: "translateX(-100%)" };
        default:
          return { left: `${d4.width / 2}px`, transform: "translateX(-50%)" };
      }
    return {};
  };
  return {
    openOnTop: R4,
    menuStyle: D3,
    xCorrect: T4,
    setMenuPosition: b4,
    getScrollableParent: L3,
    shadowRender: (d4, Y3) => {
      var J3, de2, $3;
      const Z3 = document.createElement("div"), y4 = (J3 = Re$2(r2)) == null ? void 0 : J3.getBoundingClientRect();
      Z3.setAttribute("id", "dp--temp-container");
      const l2 = (de2 = a4.value) != null && de2.clientWidth ? a4.value : document.body;
      l2.append(Z3);
      const h4 = ne2(y4), s5 = h$3(
        d4,
        {
          ...Y3,
          shadow: true,
          style: { opacity: 0, position: "absolute", ...h4 }
        },
        Object.fromEntries(
          Object.keys(c3).filter((u3) => ["right-sidebar", "left-sidebar"].includes(u3)).map((u3) => [u3, c3[u3]])
        )
      );
      render$1(s5, Z3), p2.value = ($3 = s5.el) == null ? void 0 : $3.getBoundingClientRect(), render$1(null, Z3), l2.removeChild(Z3);
    }
  };
}, ut$1 = [
  { name: "clock-icon", use: ["time", "calendar", "shared"] },
  { name: "arrow-left", use: ["month-year", "calendar", "shared", "year-mode"] },
  { name: "arrow-right", use: ["month-year", "calendar", "shared", "year-mode"] },
  { name: "arrow-up", use: ["time", "calendar", "month-year", "shared"] },
  { name: "arrow-down", use: ["time", "calendar", "month-year", "shared"] },
  { name: "calendar-icon", use: ["month-year", "time", "calendar", "shared", "year-mode"] },
  { name: "day", use: ["calendar", "shared"] },
  { name: "month-overlay-value", use: ["calendar", "month-year", "shared"] },
  { name: "year-overlay-value", use: ["calendar", "month-year", "shared", "year-mode"] },
  { name: "year-overlay", use: ["month-year", "shared"] },
  { name: "month-overlay", use: ["month-year", "shared"] },
  { name: "month-overlay-header", use: ["month-year", "shared"] },
  { name: "year-overlay-header", use: ["month-year", "shared"] },
  { name: "hours-overlay-value", use: ["calendar", "time", "shared"] },
  { name: "minutes-overlay-value", use: ["calendar", "time", "shared"] },
  { name: "seconds-overlay-value", use: ["calendar", "time", "shared"] },
  { name: "hours", use: ["calendar", "time", "shared"] },
  { name: "minutes", use: ["calendar", "time", "shared"] },
  { name: "month", use: ["calendar", "month-year", "shared"] },
  { name: "year", use: ["calendar", "month-year", "shared", "year-mode"] },
  { name: "action-buttons", use: ["action"] },
  { name: "action-preview", use: ["action"] },
  { name: "calendar-header", use: ["calendar", "shared"] },
  { name: "marker-tooltip", use: ["calendar", "shared"] },
  { name: "action-extra", use: ["menu"] },
  { name: "time-picker-overlay", use: ["calendar", "time", "shared"] },
  { name: "am-pm-button", use: ["calendar", "time", "shared"] },
  { name: "left-sidebar", use: ["menu"] },
  { name: "right-sidebar", use: ["menu"] },
  { name: "month-year", use: ["month-year", "shared"] },
  { name: "time-picker", use: ["menu", "shared"] },
  { name: "action-row", use: ["action"] },
  { name: "marker", use: ["calendar", "shared"] },
  { name: "quarter", use: ["shared"] }
], gl = [{ name: "trigger" }, { name: "input-icon" }, { name: "clear-icon" }, { name: "dp-input" }], yl = {
  all: () => ut$1,
  monthYear: () => ut$1.filter((e3) => e3.use.includes("month-year")),
  input: () => gl,
  timePicker: () => ut$1.filter((e3) => e3.use.includes("time")),
  action: () => ut$1.filter((e3) => e3.use.includes("action")),
  calendar: () => ut$1.filter((e3) => e3.use.includes("calendar")),
  menu: () => ut$1.filter((e3) => e3.use.includes("menu")),
  shared: () => ut$1.filter((e3) => e3.use.includes("shared")),
  yearMode: () => ut$1.filter((e3) => e3.use.includes("year-mode"))
}, qe$1 = (e3, t3, r2) => {
  const a4 = [];
  return yl[t3]().forEach((n2) => {
    e3[n2.name] && a4.push(n2.name);
  }), r2 != null && r2.length && r2.forEach((n2) => {
    n2.slot && a4.push(n2.slot);
  }), a4;
}, Lt = (e3) => {
  const t3 = computed(() => (a4) => e3.value ? a4 ? e3.value.open : e3.value.close : ""), r2 = computed(() => (a4) => e3.value ? a4 ? e3.value.menuAppearTop : e3.value.menuAppearBottom : "");
  return { transitionName: t3, showTransition: !!e3.value, menuTransition: r2 };
}, Ut = (e3, t3) => {
  const r2 = B$1(et$1(/* @__PURE__ */ new Date(), e3.timezone)), a4 = ref([{ month: getMonth(r2), year: getYear(r2) }]), n2 = reactive({
    hours: e3.range ? [getHours(r2), getHours(r2)] : getHours(r2),
    minutes: e3.range ? [getMinutes(r2), getMinutes(r2)] : getMinutes(r2),
    seconds: e3.range ? [0, 0] : 0
  }), o2 = computed({
    get: () => e3.internalModelValue,
    set: (p2) => {
      !e3.readonly && !e3.disabled && t3("update:internal-model-value", p2);
    }
  }), i3 = computed(
    () => (p2) => a4.value[p2] ? a4.value[p2].month : 0
  ), c3 = computed(
    () => (p2) => a4.value[p2] ? a4.value[p2].year : 0
  );
  return {
    calendars: a4,
    time: n2,
    modelValue: o2,
    month: i3,
    year: c3
  };
}, hl = (e3, t3) => {
  const { defaultedMultiCalendars: r2, defaultedHighlight: a4 } = Pe$1(t3), { isDisabled: n2, matchDate: o2 } = $t$1(t3), i3 = ref(null), c3 = ref(B$1(et$1(/* @__PURE__ */ new Date(), t3.timezone))), p2 = (l2) => {
    !l2.current && t3.hideOffsetDates || (i3.value = l2.value);
  }, T4 = () => {
    i3.value = null;
  }, D3 = (l2) => Array.isArray(e3.value) && t3.range && e3.value[0] && i3.value ? l2 ? Ee$1(i3.value, e3.value[0]) : Ye$2(i3.value, e3.value[0]) : true, R4 = (l2, h4) => {
    const s5 = () => e3.value ? h4 ? e3.value[0] || null : e3.value[1] : null, J3 = e3.value && Array.isArray(e3.value) ? s5() : null;
    return ke$1(B$1(l2.value), J3);
  }, P2 = (l2) => {
    const h4 = Array.isArray(e3.value) ? e3.value[0] : null;
    return l2 ? !Ye$2(i3.value ?? null, h4) : true;
  }, M4 = (l2, h4 = true) => (t3.range || t3.weekPicker) && Array.isArray(e3.value) && e3.value.length === 2 ? t3.hideOffsetDates && !l2.current ? false : ke$1(B$1(l2.value), e3.value[h4 ? 0 : 1]) : t3.range ? R4(l2, h4) && P2(h4) || ke$1(l2.value, Array.isArray(e3.value) ? e3.value[0] : null) && D3(h4) : false, C2 = (l2, h4, s5) => Array.isArray(e3.value) && e3.value[0] && e3.value.length === 1 ? l2 ? false : s5 ? Ee$1(e3.value[0], h4.value) : Ye$2(e3.value[0], h4.value) : false, A2 = (l2) => !e3.value || t3.hideOffsetDates && !l2.current ? false : t3.range ? t3.modelAuto && Array.isArray(e3.value) ? ke$1(l2.value, e3.value[0] ? e3.value[0] : c3.value) : false : t3.multiDates && Array.isArray(e3.value) ? e3.value.some((h4) => ke$1(h4, l2.value)) : ke$1(l2.value, e3.value ? e3.value : c3.value), q3 = (l2) => {
    if (t3.autoRange || t3.weekPicker) {
      if (i3.value) {
        if (t3.hideOffsetDates && !l2.current)
          return false;
        const h4 = addDays(i3.value, +t3.autoRange), s5 = xt(B$1(i3.value), t3.timezone, t3.weekStart);
        return t3.weekPicker ? ke$1(s5[1], B$1(l2.value)) : ke$1(h4, B$1(l2.value));
      }
      return false;
    }
    return false;
  }, g2 = (l2) => {
    if (t3.autoRange || t3.weekPicker) {
      if (i3.value) {
        const h4 = addDays(i3.value, +t3.autoRange);
        if (t3.hideOffsetDates && !l2.current)
          return false;
        const s5 = xt(B$1(i3.value), t3.timezone, t3.weekStart);
        return t3.weekPicker ? Ee$1(l2.value, s5[0]) && Ye$2(l2.value, s5[1]) : Ee$1(l2.value, i3.value) && Ye$2(l2.value, h4);
      }
      return false;
    }
    return false;
  }, S4 = (l2) => {
    if (t3.autoRange || t3.weekPicker) {
      if (i3.value) {
        if (t3.hideOffsetDates && !l2.current)
          return false;
        const h4 = xt(B$1(i3.value), t3.timezone, t3.weekStart);
        return t3.weekPicker ? ke$1(h4[0], l2.value) : ke$1(i3.value, l2.value);
      }
      return false;
    }
    return false;
  }, F2 = (l2) => nn(e3.value, i3.value, l2.value), b4 = () => t3.modelAuto && Array.isArray(t3.internalModelValue) ? !!t3.internalModelValue[0] : false, _2 = () => t3.modelAuto ? Ra(t3.internalModelValue) : true, X4 = (l2) => {
    if (Array.isArray(e3.value) && e3.value.length || t3.weekPicker)
      return false;
    const h4 = t3.range ? !M4(l2) && !M4(l2, false) : true;
    return !n2(l2.value) && !A2(l2) && !(!l2.current && t3.hideOffsetDates) && h4;
  }, ae2 = (l2) => t3.range ? t3.modelAuto ? b4() && A2(l2) : false : A2(l2), V3 = (l2) => {
    var h4;
    return a4.value ? typeof a4.value == "function" ? a4.value(l2.value) : o2(
      l2.value,
      (h4 = t3.arrMapValues) != null && h4.highlightedDates ? t3.arrMapValues.highlightedDates : a4.value.dates
    ) : false;
  }, ie2 = (l2) => {
    const h4 = n2(l2.value);
    return h4 && (typeof a4.value == "function" ? !a4.value(l2.value, h4) : !a4.value.options.highlightDisabled);
  }, E3 = (l2) => {
    var h4;
    return typeof a4.value == "function" ? a4.value(l2.value) : (h4 = a4.value.weekdays) == null ? void 0 : h4.includes(l2.value.getDay());
  }, f2 = (l2) => (t3.range || t3.weekPicker) && (!(r2.value.count > 0) || l2.current) && _2() && !(!l2.current && t3.hideOffsetDates) && !A2(l2) ? F2(l2) : false, w3 = (l2) => {
    const { isRangeStart: h4, isRangeEnd: s5 } = O4(l2), J3 = t3.range ? h4 || s5 : false;
    return {
      dp__cell_offset: !l2.current,
      dp__pointer: !t3.disabled && !(!l2.current && t3.hideOffsetDates) && !n2(l2.value),
      dp__cell_disabled: n2(l2.value),
      dp__cell_highlight: !ie2(l2) && (V3(l2) || E3(l2)) && !ae2(l2) && !J3 && !S4(l2) && !(f2(l2) && t3.weekPicker) && !s5,
      dp__cell_highlight_active: !ie2(l2) && (V3(l2) || E3(l2)) && ae2(l2),
      dp__today: !t3.noToday && ke$1(l2.value, c3.value) && l2.current
    };
  }, L3 = (l2) => ({
    dp__active_date: ae2(l2),
    dp__date_hover: X4(l2)
  }), ne2 = (l2) => ({
    ...d4(l2),
    ...Y3(l2),
    dp__range_between_week: f2(l2) && t3.weekPicker
  }), O4 = (l2) => {
    const h4 = r2.value.count > 0 ? l2.current && M4(l2) && _2() : M4(l2) && _2(), s5 = r2.value.count > 0 ? l2.current && M4(l2, false) && _2() : M4(l2, false) && _2();
    return { isRangeStart: h4, isRangeEnd: s5 };
  }, d4 = (l2) => {
    const { isRangeStart: h4, isRangeEnd: s5 } = O4(l2);
    return {
      dp__range_start: h4,
      dp__range_end: s5,
      dp__range_between: f2(l2) && !t3.weekPicker,
      dp__date_hover_start: C2(X4(l2), l2, true),
      dp__date_hover_end: C2(X4(l2), l2, false)
    };
  }, Y3 = (l2) => ({
    ...d4(l2),
    dp__cell_auto_range: g2(l2),
    dp__cell_auto_range_start: S4(l2),
    dp__cell_auto_range_end: q3(l2)
  }), Z3 = (l2) => t3.range ? t3.autoRange ? Y3(l2) : t3.modelAuto ? { ...L3(l2), ...d4(l2) } : d4(l2) : t3.weekPicker ? ne2(l2) : L3(l2);
  return {
    setHoverDate: p2,
    clearHoverDate: T4,
    getDayClassData: (l2) => t3.hideOffsetDates && !l2.current ? {} : {
      ...w3(l2),
      ...Z3(l2),
      [t3.dayClass ? t3.dayClass(l2.value) : ""]: true,
      [t3.calendarCellClassName]: !!t3.calendarCellClassName
    }
  };
}, $t$1 = (e3) => {
  const { defaultedFilters: t3, defaultedHighlight: r2 } = Pe$1(e3), a4 = () => {
    if (e3.timezone)
      return e3.timezone;
    if (e3.utc)
      return "UTC";
  }, n2 = (f2) => {
    const w3 = Fe$2(o2(B$1(f2))).toISOString(), [L3] = w3.split("T");
    return L3;
  }, o2 = (f2) => e3.utc === "preserve" ? Na(f2, a4()) : et$1(f2, a4()), i3 = (f2) => {
    var h4;
    const w3 = e3.maxDate ? Ee$1(f2, o2(B$1(e3.maxDate))) : false, L3 = e3.minDate ? Ye$2(f2, o2(B$1(e3.minDate))) : false, ne2 = D3(
      o2(f2),
      (h4 = e3.arrMapValues) != null && h4.disabledDates ? e3.arrMapValues.disabledDates : e3.disabledDates
    ), d4 = t3.value.months.map((s5) => +s5).includes(getMonth(f2)), Y3 = e3.disabledWeekDays.length ? e3.disabledWeekDays.some((s5) => +s5 === getDay(f2)) : false, Z3 = P2(f2), y4 = getYear(f2), l2 = y4 < +e3.yearRange[0] || y4 > +e3.yearRange[1];
    return !(w3 || L3 || ne2 || d4 || l2 || Y3 || Z3);
  }, c3 = (f2, w3) => Ye$2(...dt$1(e3.minDate, f2, w3)) || ke$1(...dt$1(e3.minDate, f2, w3)), p2 = (f2, w3) => Ee$1(...dt$1(e3.maxDate, f2, w3)) || ke$1(...dt$1(e3.maxDate, f2, w3)), T4 = (f2, w3, L3) => {
    let ne2 = false;
    return e3.maxDate && L3 && p2(f2, w3) && (ne2 = true), e3.minDate && !L3 && c3(f2, w3) && (ne2 = true), ne2;
  }, D3 = (f2, w3) => f2 ? w3 instanceof Map ? !!w3.get(n2(f2)) : Array.isArray(w3) ? w3.some((L3) => ke$1(o2(B$1(L3)), f2)) : w3 ? w3(B$1(JSON.parse(JSON.stringify(f2)))) : false : true, R4 = (f2, w3, L3, ne2) => {
    let O4 = false;
    return ne2 ? e3.minDate && e3.maxDate ? O4 = T4(f2, w3, L3) : (e3.minDate && c3(f2, w3) || e3.maxDate && p2(f2, w3)) && (O4 = true) : O4 = true, O4;
  }, P2 = (f2) => {
    var w3, L3, ne2, O4, d4;
    return Array.isArray(e3.allowedDates) && !((w3 = e3.allowedDates) != null && w3.length) ? true : (L3 = e3.arrMapValues) != null && L3.allowedDates ? !D3(f2, (ne2 = e3.arrMapValues) == null ? void 0 : ne2.allowedDates) : (O4 = e3.allowedDates) != null && O4.length ? !((d4 = e3.allowedDates) != null && d4.some(
      (Y3) => ke$1(Fe$2(Y3), o2(Fe$2(f2)))
    )) : false;
  }, M4 = (f2) => !i3(f2), C2 = (f2) => e3.noDisabledRange ? !eachDayOfInterval({ start: f2[0], end: f2[1] }).some((L3) => M4(L3)) : true, A2 = (f2, w3, L3 = 0) => {
    if (Array.isArray(w3) && w3[L3]) {
      const ne2 = differenceInCalendarDays(f2, w3[L3]), O4 = Ia(w3[L3], f2), d4 = O4.length === 1 ? 0 : O4.filter((Z3) => M4(Z3)).length, Y3 = Math.abs(ne2) - d4;
      if (e3.minRange && e3.maxRange)
        return Y3 >= +e3.minRange && Y3 <= +e3.maxRange;
      if (e3.minRange)
        return Y3 >= +e3.minRange;
      if (e3.maxRange)
        return Y3 <= +e3.maxRange;
    }
    return true;
  }, q3 = (f2) => new Map(f2.map((w3) => [n2(w3), true])), g2 = (f2) => Array.isArray(f2) && f2.length > 0, S4 = () => {
    const f2 = {
      disabledDates: null,
      allowedDates: null,
      highlightedDates: null
    };
    return g2(e3.allowedDates) && (f2.allowedDates = q3(e3.allowedDates)), typeof r2.value != "function" && g2(r2.value.dates) && (f2.highlightedDates = q3(r2.value.dates)), g2(e3.disabledDates) && (f2.disabledDates = q3(e3.disabledDates)), f2;
  }, F2 = () => !e3.enableTimePicker || e3.monthPicker || e3.yearPicker || e3.ignoreTimeValidation, b4 = (f2) => Array.isArray(f2) ? [f2[0] ? bn(f2[0]) : null, f2[1] ? bn(f2[1]) : null] : bn(f2), _2 = (f2, w3, L3) => f2.find(
    (ne2) => +ne2.hours === getHours(w3) && ne2.minutes === "*" ? true : +ne2.minutes === getMinutes(w3) && +ne2.hours === getHours(w3)
  ) && L3, X4 = (f2, w3, L3) => {
    const [ne2, O4] = f2, [d4, Y3] = w3;
    return !_2(ne2, d4, L3) && !_2(O4, Y3, L3) && L3;
  }, ae2 = (f2, w3) => {
    const L3 = Array.isArray(w3) ? w3 : [w3];
    return Array.isArray(e3.disabledTimes) ? Array.isArray(e3.disabledTimes[0]) ? X4(e3.disabledTimes, L3, f2) : !L3.some((ne2) => _2(e3.disabledTimes, ne2, f2)) : f2;
  }, V3 = (f2, w3) => {
    const L3 = Array.isArray(w3) ? [wt$1(w3[0]), w3[1] ? wt$1(w3[1]) : void 0] : wt$1(w3), ne2 = !e3.disabledTimes(L3);
    return f2 && ne2;
  }, ie2 = (f2, w3) => e3.disabledTimes ? Array.isArray(e3.disabledTimes) ? ae2(w3, f2) : V3(w3, f2) : w3;
  return {
    isDisabled: M4,
    validateDate: i3,
    validateMonthYearInRange: R4,
    isDateRangeAllowed: C2,
    checkMinMaxRange: A2,
    matchDate: D3,
    mapDatesArrToMap: S4,
    isValidTime: (f2) => {
      let w3 = true;
      if (!f2 || F2())
        return true;
      const L3 = !e3.minDate && !e3.maxDate ? b4(f2) : f2;
      return (e3.maxTime || e3.maxDate) && (w3 = ma(
        e3.maxTime,
        e3.maxDate,
        "max",
        Ce$2(L3),
        w3
      )), (e3.minTime || e3.minDate) && (w3 = ma(
        e3.minTime,
        e3.minDate,
        "min",
        Ce$2(L3),
        w3
      )), ie2(f2, w3);
    }
  };
}, an = () => {
  const e3 = computed(() => (a4, n2) => a4 == null ? void 0 : a4.includes(n2)), t3 = computed(() => (a4, n2) => a4.count ? a4.solo ? true : n2 === 0 : true), r2 = computed(() => (a4, n2) => a4.count ? a4.solo ? true : n2 === a4.count - 1 : true);
  return { hideNavigationButtons: e3, showLeftIcon: t3, showRightIcon: r2 };
}, pl = (e3, t3, r2) => {
  const a4 = ref(0), n2 = reactive({
    [Dt.timePicker]: !e3.enableTimePicker || e3.timePicker || e3.monthPicker,
    [Dt.calendar]: false,
    [Dt.header]: false
  }), o2 = computed(() => e3.monthPicker), i3 = (R4) => {
    var P2;
    if ((P2 = e3.flow) != null && P2.length) {
      if (!R4 && o2.value)
        return D3();
      n2[R4] = true, Object.keys(n2).filter((M4) => !n2[M4]).length || D3();
    }
  }, c3 = () => {
    var R4;
    (R4 = e3.flow) != null && R4.length && a4.value !== -1 && (a4.value += 1, t3("flow-step", a4.value), D3());
  }, p2 = () => {
    a4.value = -1;
  }, T4 = (R4, P2, ...M4) => {
    e3.flow[a4.value] === R4 && r2.value && r2.value[P2](...M4);
  }, D3 = () => {
    T4(at$1.month, "toggleMonthPicker", true), T4(at$1.year, "toggleYearPicker", true), T4(at$1.calendar, "toggleTimePicker", false, true), T4(at$1.time, "toggleTimePicker", true, true);
    const R4 = e3.flow[a4.value];
    (R4 === at$1.hours || R4 === at$1.minutes || R4 === at$1.seconds) && T4(R4, "toggleTimePicker", true, true, R4);
  };
  return { childMount: i3, updateFlowStep: c3, resetFlow: p2, flowStep: a4 };
}, rn = {
  multiCalendars: { type: [Boolean, Number, String, Object], default: void 0 },
  modelValue: { type: [String, Date, Array, Object, Number], default: null },
  modelType: { type: String, default: null },
  position: { type: String, default: "center" },
  dark: { type: Boolean, default: false },
  format: {
    type: [String, Function],
    default: () => null
  },
  autoPosition: { type: Boolean, default: true },
  altPosition: { type: Function, default: null },
  transitions: { type: [Boolean, Object], default: true },
  formatLocale: { type: Object, default: null },
  utc: { type: [Boolean, String], default: false },
  ariaLabels: { type: Object, default: () => ({}) },
  offset: { type: [Number, String], default: 10 },
  hideNavigation: { type: Array, default: () => [] },
  timezone: { type: String, default: null },
  emitTimezone: { type: String, default: null },
  vertical: { type: Boolean, default: false },
  disableMonthYearSelect: { type: Boolean, default: false },
  disableYearSelect: { type: Boolean, default: false },
  menuClassName: { type: String, default: null },
  dayClass: { type: Function, default: null },
  yearRange: { type: Array, default: () => [1900, 2100] },
  calendarCellClassName: { type: String, default: null },
  enableTimePicker: { type: Boolean, default: true },
  autoApply: { type: Boolean, default: false },
  disabledDates: { type: [Array, Function], default: () => [] },
  monthNameFormat: { type: String, default: "short" },
  startDate: { type: [Date, String], default: null },
  startTime: { type: [Object, Array], default: null },
  hideOffsetDates: { type: Boolean, default: false },
  autoRange: { type: [Number, String], default: null },
  noToday: { type: Boolean, default: false },
  disabledWeekDays: { type: Array, default: () => [] },
  allowedDates: { type: Array, default: null },
  nowButtonLabel: { type: String, default: "Now" },
  markers: { type: Array, default: () => [] },
  escClose: { type: Boolean, default: true },
  spaceConfirm: { type: Boolean, default: true },
  monthChangeOnArrows: { type: Boolean, default: true },
  presetDates: { type: Array, default: () => [] },
  flow: { type: Array, default: () => [] },
  partialFlow: { type: Boolean, default: false },
  preventMinMaxNavigation: { type: Boolean, default: false },
  minRange: { type: [Number, String], default: null },
  maxRange: { type: [Number, String], default: null },
  multiDatesLimit: { type: [Number, String], default: null },
  reverseYears: { type: Boolean, default: false },
  weekPicker: { type: Boolean, default: false },
  filters: { type: Object, default: () => ({}) },
  arrowNavigation: { type: Boolean, default: false },
  disableTimeRangeValidation: { type: Boolean, default: false },
  highlight: {
    type: [Array, Function, Object],
    default: null
  },
  highlightWeekDays: {
    type: Array,
    default: null
  },
  highlightDisabledDays: { type: Boolean, default: false },
  teleport: { type: [String, Boolean, Object], default: null },
  teleportCenter: { type: Boolean, default: false },
  locale: { type: String, default: "en-Us" },
  weekNumName: { type: String, default: "W" },
  weekStart: { type: [Number, String], default: 1 },
  weekNumbers: {
    type: [String, Function, Object],
    default: null
  },
  calendarClassName: { type: String, default: null },
  monthChangeOnScroll: { type: [Boolean, String], default: true },
  dayNames: {
    type: [Function, Array],
    default: null
  },
  monthPicker: { type: Boolean, default: false },
  customProps: { type: Object, default: null },
  yearPicker: { type: Boolean, default: false },
  modelAuto: { type: Boolean, default: false },
  selectText: { type: String, default: "Select" },
  cancelText: { type: String, default: "Cancel" },
  previewFormat: {
    type: [String, Function],
    default: () => ""
  },
  multiDates: { type: Boolean, default: false },
  partialRange: { type: Boolean, default: true },
  ignoreTimeValidation: { type: Boolean, default: false },
  minDate: { type: [Date, String], default: null },
  maxDate: { type: [Date, String], default: null },
  minTime: { type: Object, default: null },
  maxTime: { type: Object, default: null },
  name: { type: String, default: null },
  placeholder: { type: String, default: "" },
  hideInputIcon: { type: Boolean, default: false },
  clearable: { type: Boolean, default: true },
  state: { type: Boolean, default: null },
  required: { type: Boolean, default: false },
  autocomplete: { type: String, default: "off" },
  inputClassName: { type: String, default: null },
  fixedStart: { type: Boolean, default: false },
  fixedEnd: { type: Boolean, default: false },
  timePicker: { type: Boolean, default: false },
  enableSeconds: { type: Boolean, default: false },
  is24: { type: Boolean, default: true },
  noHoursOverlay: { type: Boolean, default: false },
  noMinutesOverlay: { type: Boolean, default: false },
  noSecondsOverlay: { type: Boolean, default: false },
  hoursGridIncrement: { type: [String, Number], default: 1 },
  minutesGridIncrement: { type: [String, Number], default: 5 },
  secondsGridIncrement: { type: [String, Number], default: 5 },
  hoursIncrement: { type: [Number, String], default: 1 },
  minutesIncrement: { type: [Number, String], default: 1 },
  secondsIncrement: { type: [Number, String], default: 1 },
  range: { type: Boolean, default: false },
  uid: { type: String, default: null },
  disabled: { type: Boolean, default: false },
  readonly: { type: Boolean, default: false },
  inline: { type: [Boolean, Object], default: false },
  textInput: { type: [Boolean, Object], default: false },
  noDisabledRange: { type: Boolean, default: false },
  sixWeeks: { type: [Boolean, String], default: false },
  actionRow: { type: Object, default: () => ({}) },
  focusStartDate: { type: Boolean, default: false },
  disabledTimes: { type: [Function, Array], default: void 0 },
  showLastInRange: { type: Boolean, default: true },
  timePickerInline: { type: Boolean, default: false },
  calendar: { type: Function, default: null },
  config: { type: Object, default: void 0 },
  quarterPicker: { type: Boolean, default: false },
  yearFirst: { type: Boolean, default: false }
}, tt$1 = {
  ...rn,
  shadow: { type: Boolean, default: false },
  flowStep: { type: Number, default: 0 },
  internalModelValue: { type: [Date, Array], default: null },
  arrMapValues: { type: Object, default: () => ({}) },
  noOverlayFocus: { type: Boolean, default: false }
}, bl = {
  key: 1,
  class: "dp__input_wrap"
}, kl = ["id", "name", "inputmode", "placeholder", "disabled", "readonly", "required", "value", "autocomplete", "aria-label", "aria-disabled", "aria-invalid"], wl = {
  key: 2,
  class: "dp__clear_icon"
}, Dl = /* @__PURE__ */ defineComponent({
  compatConfig: {
    MODE: 3
  },
  __name: "DatepickerInput",
  props: {
    isMenuOpen: { type: Boolean, default: false },
    inputValue: { type: String, default: "" },
    ...rn
  },
  emits: [
    "clear",
    "open",
    "update:input-value",
    "set-input-date",
    "close",
    "select-date",
    "set-empty-date",
    "toggle",
    "focus-prev",
    "focus",
    "blur",
    "real-blur"
  ],
  setup(e3, { expose: t3, emit: r2 }) {
    const a4 = r2, n2 = e3, {
      defaultedTextInput: o2,
      defaultedAriaLabels: i3,
      defaultedInline: c3,
      defaultedConfig: p2,
      getDefaultPattern: T4,
      getDefaultStartTime: D3
    } = Pe$1(n2), { checkMinMaxRange: R4 } = $t$1(n2), P2 = ref(), M4 = ref(null), C2 = ref(false), A2 = ref(false), q3 = computed(
      () => ({
        dp__pointer: !n2.disabled && !n2.readonly && !o2.value.enabled,
        dp__disabled: n2.disabled,
        dp__input_readonly: !o2.value.enabled,
        dp__input: true,
        dp__input_icon_pad: !n2.hideInputIcon,
        dp__input_valid: !!n2.state,
        dp__input_invalid: n2.state === false,
        dp__input_focus: C2.value || n2.isMenuOpen,
        dp__input_reg: !o2.value.enabled,
        [n2.inputClassName]: !!n2.inputClassName
      })
    ), g2 = () => {
      a4("set-input-date", null), n2.autoApply && (a4("set-empty-date"), P2.value = null);
    }, S4 = (d4) => {
      const Y3 = D3();
      return Gr(
        d4,
        o2.value.format ?? T4(),
        Y3 ?? Ba({}, n2.enableSeconds),
        n2.inputValue,
        A2.value
      );
    }, F2 = (d4) => {
      const { rangeSeparator: Y3 } = o2.value, [Z3, y4] = d4.split(`${Y3}`);
      if (Z3) {
        const l2 = S4(Z3.trim()), h4 = y4 ? S4(y4.trim()) : null, s5 = l2 && h4 ? [l2, h4] : [l2];
        R4(h4, s5, 0) && (P2.value = l2 ? s5 : null);
      }
    }, b4 = () => {
      A2.value = true;
    }, _2 = (d4) => {
      if (n2.range)
        F2(d4);
      else if (n2.multiDates) {
        const Y3 = d4.split(";");
        P2.value = Y3.map((Z3) => S4(Z3.trim())).filter((Z3) => Z3);
      } else
        P2.value = S4(d4);
    }, X4 = (d4) => {
      var Z3;
      const Y3 = typeof d4 == "string" ? d4 : (Z3 = d4.target) == null ? void 0 : Z3.value;
      Y3 !== "" ? (o2.value.openMenu && !n2.isMenuOpen && a4("open"), _2(Y3), a4("set-input-date", P2.value)) : g2(), A2.value = false, a4("update:input-value", Y3);
    }, ae2 = (d4) => {
      o2.value.enabled ? (_2(d4.target.value), o2.value.enterSubmit && On(P2.value) && n2.inputValue !== "" ? (a4("set-input-date", P2.value, true), P2.value = null) : o2.value.enterSubmit && n2.inputValue === "" && (P2.value = null, a4("clear"))) : E3(d4);
    }, V3 = (d4) => {
      o2.value.enabled && o2.value.tabSubmit && _2(d4.target.value), o2.value.tabSubmit && On(P2.value) && n2.inputValue !== "" ? (a4("set-input-date", P2.value, true, true), P2.value = null) : o2.value.tabSubmit && n2.inputValue === "" && (P2.value = null, a4("clear", true));
    }, ie2 = () => {
      var d4;
      C2.value = true, a4("focus"), o2.value.enabled && o2.value.selectOnFocus && ((d4 = M4.value) == null || d4.select());
    }, E3 = (d4) => {
      d4.preventDefault(), ft$1(d4, p2.value, true), o2.value.enabled && o2.value.openMenu && !c3.value.input && !n2.isMenuOpen ? a4("open") : o2.value.enabled || a4("toggle");
    }, f2 = () => {
      a4("real-blur"), C2.value = false, (!n2.isMenuOpen || c3.value.enabled && c3.value.input) && a4("blur"), n2.autoApply && o2.value.enabled && P2.value && !n2.isMenuOpen && (a4("set-input-date", P2.value), a4("select-date"), P2.value = null);
    }, w3 = (d4) => {
      ft$1(d4, p2.value, true), a4("clear");
    }, L3 = (d4) => {
      if (!o2.value.enabled) {
        if (d4.code === "Tab")
          return;
        d4.preventDefault();
      }
    };
    return t3({
      focusInput: () => {
        var d4;
        (d4 = M4.value) == null || d4.focus({ preventScroll: true });
      },
      setParsedDate: (d4) => {
        P2.value = d4;
      }
    }), (d4, Y3) => {
      var Z3;
      return openBlock(), createElementBlock("div", { onClick: E3 }, [
        d4.$slots.trigger && !d4.$slots["dp-input"] && !unref(c3).enabled ? renderSlot(d4.$slots, "trigger", { key: 0 }) : createCommentVNode("", true),
        !d4.$slots.trigger && (!unref(c3).enabled || unref(c3).input) ? (openBlock(), createElementBlock("div", bl, [
          d4.$slots["dp-input"] && !d4.$slots.trigger && !unref(c3).enabled ? renderSlot(d4.$slots, "dp-input", {
            key: 0,
            value: e3.inputValue,
            isMenuOpen: e3.isMenuOpen,
            onInput: X4,
            onEnter: ae2,
            onTab: V3,
            onClear: w3,
            onBlur: f2,
            onKeypress: L3,
            onPaste: b4,
            openMenu: () => d4.$emit("open"),
            closeMenu: () => d4.$emit("close"),
            toggleMenu: () => d4.$emit("toggle")
          }) : createCommentVNode("", true),
          d4.$slots["dp-input"] ? createCommentVNode("", true) : (openBlock(), createElementBlock("input", {
            key: 1,
            id: d4.uid ? `dp-input-${d4.uid}` : void 0,
            ref_key: "inputRef",
            ref: M4,
            name: d4.name,
            class: normalizeClass(q3.value),
            inputmode: unref(o2).enabled ? "text" : "none",
            placeholder: d4.placeholder,
            disabled: d4.disabled,
            readonly: d4.readonly,
            required: d4.required,
            value: e3.inputValue,
            autocomplete: d4.autocomplete,
            "aria-label": (Z3 = unref(i3)) == null ? void 0 : Z3.input,
            "aria-disabled": d4.disabled || void 0,
            "aria-invalid": d4.state === false ? true : void 0,
            onInput: X4,
            onKeydown: [
              withKeys(ae2, ["enter"]),
              withKeys(V3, ["tab"]),
              L3
            ],
            onBlur: f2,
            onFocus: ie2,
            onKeypress: L3,
            onPaste: b4
          }, null, 42, kl)),
          createBaseVNode("div", {
            onClick: Y3[2] || (Y3[2] = (y4) => a4("toggle"))
          }, [
            d4.$slots["input-icon"] && !d4.hideInputIcon ? (openBlock(), createElementBlock("span", {
              key: 0,
              class: "dp__input_icon",
              onClick: Y3[0] || (Y3[0] = (y4) => a4("toggle"))
            }, [
              renderSlot(d4.$slots, "input-icon")
            ])) : createCommentVNode("", true),
            !d4.$slots["input-icon"] && !d4.hideInputIcon && !d4.$slots["dp-input"] ? (openBlock(), createBlock(unref(Ot), {
              key: 1,
              class: "dp__input_icon dp__input_icons",
              onClick: Y3[1] || (Y3[1] = (y4) => a4("toggle"))
            })) : createCommentVNode("", true)
          ]),
          d4.$slots["clear-icon"] && e3.inputValue && d4.clearable && !d4.disabled && !d4.readonly ? (openBlock(), createElementBlock("span", wl, [
            renderSlot(d4.$slots, "clear-icon", { clear: w3 })
          ])) : createCommentVNode("", true),
          d4.clearable && !d4.$slots["clear-icon"] && e3.inputValue && !d4.disabled && !d4.readonly ? (openBlock(), createBlock(unref(Aa), {
            key: 3,
            class: "dp__clear_icon dp__input_icons",
            onClick: Y3[3] || (Y3[3] = withModifiers((y4) => w3(y4), ["prevent"]))
          })) : createCommentVNode("", true)
        ])) : createCommentVNode("", true)
      ]);
    };
  }
}), Ml = ["title"], $l = { class: "dp__action_buttons" }, Tl = ["disabled"], Al = /* @__PURE__ */ defineComponent({
  compatConfig: {
    MODE: 3
  },
  __name: "ActionRow",
  props: {
    menuMount: { type: Boolean, default: false },
    calendarWidth: { type: Number, default: 0 },
    ...tt$1
  },
  emits: ["close-picker", "select-date", "select-now", "invalid-select"],
  setup(e3, { emit: t3 }) {
    const r2 = t3, a4 = e3, {
      defaultedActionRow: n2,
      defaultedPreviewFormat: o2,
      defaultedMultiCalendars: i3,
      defaultedTextInput: c3,
      defaultedInline: p2,
      getDefaultPattern: T4
    } = Pe$1(a4), { isValidTime: D3 } = $t$1(a4), { buildMatrix: R4 } = yt$1(), P2 = ref(null), M4 = ref(null);
    onMounted(() => {
      a4.arrowNavigation && R4([Re$2(P2), Re$2(M4)], "actionRow");
    });
    const C2 = computed(() => a4.range && !a4.partialRange && a4.internalModelValue ? a4.internalModelValue.length === 2 : true), A2 = computed(() => !q3.value || !g2.value || !C2.value), q3 = computed(() => !a4.enableTimePicker || a4.ignoreTimeValidation ? true : D3(a4.internalModelValue)), g2 = computed(() => a4.monthPicker ? a4.range && Array.isArray(a4.internalModelValue) ? !a4.internalModelValue.filter((f2) => !V3(f2)).length : V3(a4.internalModelValue) : true), S4 = () => {
      const E3 = o2.value;
      return a4.timePicker || a4.monthPicker, E3(Ce$2(a4.internalModelValue));
    }, F2 = () => {
      const E3 = a4.internalModelValue;
      return i3.value.count > 0 ? `${b4(E3[0])} - ${b4(E3[1])}` : [b4(E3[0]), b4(E3[1])];
    }, b4 = (E3) => Fa(
      E3,
      o2.value,
      a4.formatLocale,
      c3.value.rangeSeparator,
      a4.modelAuto,
      T4()
    ), _2 = computed(() => !a4.internalModelValue || !a4.menuMount ? "" : typeof o2.value == "string" ? Array.isArray(a4.internalModelValue) ? a4.internalModelValue.length === 2 && a4.internalModelValue[1] ? F2() : a4.multiDates ? a4.internalModelValue.map((E3) => `${b4(E3)}`) : a4.modelAuto ? `${b4(a4.internalModelValue[0])}` : `${b4(a4.internalModelValue[0])} -` : b4(a4.internalModelValue) : S4()), X4 = () => a4.multiDates ? "; " : " - ", ae2 = computed(
      () => Array.isArray(_2.value) ? _2.value.join(X4()) : _2.value
    ), V3 = (E3) => {
      if (!a4.monthPicker)
        return true;
      let f2 = true;
      const w3 = B$1(Xe$1(E3));
      if (a4.minDate && a4.maxDate) {
        const L3 = B$1(Xe$1(a4.minDate)), ne2 = B$1(Xe$1(a4.maxDate));
        return Ee$1(w3, L3) && Ye$2(w3, ne2) || ke$1(w3, L3) || ke$1(w3, ne2);
      }
      if (a4.minDate) {
        const L3 = B$1(Xe$1(a4.minDate));
        f2 = Ee$1(w3, L3) || ke$1(w3, L3);
      }
      if (a4.maxDate) {
        const L3 = B$1(Xe$1(a4.maxDate));
        f2 = Ye$2(w3, L3) || ke$1(w3, L3);
      }
      return f2;
    }, ie2 = () => {
      q3.value && g2.value && C2.value ? r2("select-date") : r2("invalid-select");
    };
    return (E3, f2) => (openBlock(), createElementBlock("div", {
      class: "dp__action_row",
      style: normalizeStyle(e3.calendarWidth ? { width: `${e3.calendarWidth}px` } : {})
    }, [
      E3.$slots["action-row"] ? renderSlot(E3.$slots, "action-row", normalizeProps(mergeProps({ key: 0 }, {
        internalModelValue: E3.internalModelValue,
        disabled: A2.value,
        selectDate: () => E3.$emit("select-date"),
        closePicker: () => E3.$emit("close-picker")
      }))) : (openBlock(), createElementBlock(Fragment, { key: 1 }, [
        unref(n2).showPreview ? (openBlock(), createElementBlock("div", {
          key: 0,
          class: "dp__selection_preview",
          title: ae2.value
        }, [
          E3.$slots["action-preview"] ? renderSlot(E3.$slots, "action-preview", {
            key: 0,
            value: E3.internalModelValue
          }) : createCommentVNode("", true),
          E3.$slots["action-preview"] ? createCommentVNode("", true) : (openBlock(), createElementBlock(Fragment, { key: 1 }, [
            createTextVNode(toDisplayString$1(ae2.value), 1)
          ], 64))
        ], 8, Ml)) : createCommentVNode("", true),
        createBaseVNode("div", $l, [
          E3.$slots["action-buttons"] ? renderSlot(E3.$slots, "action-buttons", {
            key: 0,
            value: E3.internalModelValue
          }) : createCommentVNode("", true),
          E3.$slots["action-buttons"] ? createCommentVNode("", true) : (openBlock(), createElementBlock(Fragment, { key: 1 }, [
            !unref(p2).enabled && unref(n2).showCancel ? (openBlock(), createElementBlock("button", {
              key: 0,
              ref_key: "cancelButtonRef",
              ref: P2,
              type: "button",
              class: "dp__action_button dp__action_cancel",
              onClick: f2[0] || (f2[0] = (w3) => E3.$emit("close-picker")),
              onKeydown: [
                f2[1] || (f2[1] = withKeys((w3) => E3.$emit("close-picker"), ["enter"])),
                f2[2] || (f2[2] = withKeys((w3) => E3.$emit("close-picker"), ["space"]))
              ]
            }, toDisplayString$1(E3.cancelText), 545)) : createCommentVNode("", true),
            unref(n2).showNow ? (openBlock(), createElementBlock("button", {
              key: 1,
              ref_key: "cancelButtonRef",
              ref: P2,
              type: "button",
              class: "dp__action_button dp__action_cancel",
              onClick: f2[3] || (f2[3] = (w3) => E3.$emit("select-now")),
              onKeydown: [
                f2[4] || (f2[4] = withKeys((w3) => E3.$emit("select-now"), ["enter"])),
                f2[5] || (f2[5] = withKeys((w3) => E3.$emit("select-now"), ["space"]))
              ]
            }, toDisplayString$1(E3.nowButtonLabel), 545)) : createCommentVNode("", true),
            unref(n2).showSelect ? (openBlock(), createElementBlock("button", {
              key: 2,
              ref_key: "selectButtonRef",
              ref: M4,
              type: "button",
              class: "dp__action_button dp__action_select",
              disabled: A2.value,
              onKeydown: [
                withKeys(ie2, ["enter"]),
                withKeys(ie2, ["space"])
              ],
              onClick: ie2
            }, toDisplayString$1(E3.selectText), 41, Tl)) : createCommentVNode("", true)
          ], 64))
        ])
      ], 64))
    ], 4));
  }
}), Sl = ["onKeydown"], Pl = { class: "dp__selection_grid_header" }, Cl = ["aria-selected", "aria-disabled", "onClick", "onKeydown", "onMouseover"], _l = ["aria-label"], zt = /* @__PURE__ */ defineComponent({
  __name: "SelectionOverlay",
  props: {
    items: {},
    type: {},
    isLast: { type: Boolean },
    arrowNavigation: { type: Boolean },
    skipButtonRef: { type: Boolean },
    headerRefs: {},
    hideNavigation: {},
    escClose: { type: Boolean },
    useRelative: { type: Boolean },
    height: {},
    textInput: { type: [Boolean, Object] },
    config: {},
    noOverlayFocus: { type: Boolean },
    focusValue: {}
  },
  emits: ["selected", "toggle", "reset-flow", "hover-value"],
  setup(e3, { expose: t3, emit: r2 }) {
    const { setSelectionGrid: a4, buildMultiLevelMatrix: n2, setMonthPicker: o2 } = yt$1(), i3 = r2, c3 = e3, { defaultedAriaLabels: p2, defaultedTextInput: T4, defaultedConfig: D3 } = Pe$1(
      c3
    ), { hideNavigationButtons: R4 } = an(), P2 = ref(false), M4 = ref(null), C2 = ref(null), A2 = ref([]), q3 = ref(), g2 = ref(null), S4 = ref(0), F2 = ref(null);
    onBeforeUpdate(() => {
      M4.value = null;
    }), onMounted(() => {
      nextTick().then(() => f2()), c3.noOverlayFocus || _2(), b4(true);
    }), onUnmounted(() => b4(false));
    const b4 = (y4) => {
      var l2;
      c3.arrowNavigation && ((l2 = c3.headerRefs) != null && l2.length ? o2(y4) : a4(y4));
    }, _2 = () => {
      var l2;
      const y4 = Re$2(C2);
      y4 && (T4.value.enabled || (M4.value ? (l2 = M4.value) == null || l2.focus({ preventScroll: true }) : y4.focus({ preventScroll: true })), P2.value = y4.clientHeight < y4.scrollHeight);
    }, X4 = computed(
      () => ({
        dp__overlay: true,
        "dp--overlay-absolute": !c3.useRelative,
        "dp--overlay-relative": c3.useRelative
      })
    ), ae2 = computed(
      () => c3.useRelative ? { height: `${c3.height}px`, width: "260px" } : void 0
    ), V3 = computed(() => ({
      dp__overlay_col: true
    })), ie2 = computed(
      () => ({
        dp__btn: true,
        dp__button: true,
        dp__overlay_action: true,
        dp__over_action_scroll: P2.value,
        dp__button_bottom: c3.isLast
      })
    ), E3 = computed(() => {
      var y4, l2;
      return {
        dp__overlay_container: true,
        dp__container_flex: ((y4 = c3.items) == null ? void 0 : y4.length) <= 6,
        dp__container_block: ((l2 = c3.items) == null ? void 0 : l2.length) > 6
      };
    });
    watch(
      () => c3.items,
      () => f2(),
      { deep: true }
    );
    const f2 = () => {
      nextTick().then(() => {
        const y4 = Re$2(M4), l2 = Re$2(C2), h4 = Re$2(g2), s5 = Re$2(F2), J3 = h4 ? h4.getBoundingClientRect().height : 0;
        l2 && (l2.getBoundingClientRect().height ? S4.value = l2.getBoundingClientRect().height - J3 : S4.value = D3.value.modeHeight - J3), y4 && s5 && (s5.scrollTop = y4.offsetTop - s5.offsetTop - (S4.value / 2 - y4.getBoundingClientRect().height) - J3);
      });
    }, w3 = (y4) => {
      y4.disabled || i3("selected", y4.value);
    }, L3 = () => {
      i3("toggle"), i3("reset-flow");
    }, ne2 = () => {
      c3.escClose && L3();
    }, O4 = (y4, l2, h4, s5) => {
      y4 && ((l2.active || l2.value === c3.focusValue) && (M4.value = y4), c3.arrowNavigation && (Array.isArray(A2.value[h4]) ? A2.value[h4][s5] = y4 : A2.value[h4] = [y4], d4()));
    }, d4 = () => {
      var l2, h4;
      const y4 = (l2 = c3.headerRefs) != null && l2.length ? [c3.headerRefs].concat(A2.value) : A2.value.concat([c3.skipButtonRef ? [] : [g2.value]]);
      n2(Ce$2(y4), (h4 = c3.headerRefs) != null && h4.length ? "monthPicker" : "selectionGrid");
    }, Y3 = (y4) => {
      c3.arrowNavigation || ft$1(y4, D3.value, true);
    }, Z3 = (y4) => {
      q3.value = y4, i3("hover-value", y4);
    };
    return t3({ focusGrid: _2 }), (y4, l2) => {
      var h4;
      return openBlock(), createElementBlock("div", {
        ref_key: "gridWrapRef",
        ref: C2,
        class: normalizeClass(X4.value),
        style: normalizeStyle(ae2.value),
        role: "dialog",
        tabindex: "0",
        onKeydown: [
          withKeys(withModifiers(ne2, ["prevent"]), ["esc"]),
          l2[0] || (l2[0] = withKeys(withModifiers((s5) => Y3(s5), ["prevent"]), ["left"])),
          l2[1] || (l2[1] = withKeys(withModifiers((s5) => Y3(s5), ["prevent"]), ["up"])),
          l2[2] || (l2[2] = withKeys(withModifiers((s5) => Y3(s5), ["prevent"]), ["down"])),
          l2[3] || (l2[3] = withKeys(withModifiers((s5) => Y3(s5), ["prevent"]), ["right"]))
        ]
      }, [
        createBaseVNode("div", {
          ref_key: "containerRef",
          ref: F2,
          class: normalizeClass(E3.value),
          role: "grid",
          style: normalizeStyle({ height: `${S4.value}px` })
        }, [
          createBaseVNode("div", Pl, [
            renderSlot(y4.$slots, "header")
          ]),
          y4.$slots.overlay ? renderSlot(y4.$slots, "overlay", { key: 0 }) : (openBlock(true), createElementBlock(Fragment, { key: 1 }, renderList(y4.items, (s5, J3) => (openBlock(), createElementBlock("div", {
            key: J3,
            class: normalizeClass(["dp__overlay_row", { dp__flex_row: y4.items.length >= 3 }]),
            role: "row"
          }, [
            (openBlock(true), createElementBlock(Fragment, null, renderList(s5, (de2, $3) => (openBlock(), createElementBlock("div", {
              key: de2.value,
              ref_for: true,
              ref: (u3) => O4(u3, de2, J3, $3),
              role: "gridcell",
              class: normalizeClass(V3.value),
              "aria-selected": de2.active,
              "aria-disabled": de2.disabled || void 0,
              tabindex: "0",
              onClick: (u3) => w3(de2),
              onKeydown: [
                withKeys(withModifiers((u3) => w3(de2), ["prevent"]), ["enter"]),
                withKeys(withModifiers((u3) => w3(de2), ["prevent"]), ["space"])
              ],
              onMouseover: (u3) => Z3(de2.value)
            }, [
              createBaseVNode("div", {
                class: normalizeClass(de2.className)
              }, [
                y4.$slots.item ? renderSlot(y4.$slots, "item", {
                  key: 0,
                  item: de2
                }) : createCommentVNode("", true),
                y4.$slots.item ? createCommentVNode("", true) : (openBlock(), createElementBlock(Fragment, { key: 1 }, [
                  createTextVNode(toDisplayString$1(de2.text), 1)
                ], 64))
              ], 2)
            ], 42, Cl))), 128))
          ], 2))), 128))
        ], 6),
        y4.$slots["button-icon"] ? withDirectives((openBlock(), createElementBlock("button", {
          key: 0,
          ref_key: "toggleButton",
          ref: g2,
          type: "button",
          "aria-label": (h4 = unref(p2)) == null ? void 0 : h4.toggleOverlay,
          class: normalizeClass(ie2.value),
          tabindex: "0",
          onClick: L3,
          onKeydown: [
            withKeys(L3, ["enter"]),
            withKeys(L3, ["tab"])
          ]
        }, [
          renderSlot(y4.$slots, "button-icon")
        ], 42, _l)), [
          [vShow, !unref(R4)(y4.hideNavigation, y4.type)]
        ]) : createCommentVNode("", true)
      ], 46, Sl);
    };
  }
}), ln = /* @__PURE__ */ defineComponent({
  __name: "InstanceWrap",
  props: {
    multiCalendars: {},
    stretch: { type: Boolean }
  },
  setup(e3) {
    const t3 = e3, r2 = computed(
      () => t3.multiCalendars > 0 ? [...Array(t3.multiCalendars).keys()] : [0]
    ), a4 = computed(() => ({
      dp__instance_calendar: t3.multiCalendars > 0
    }));
    return (n2, o2) => (openBlock(), createElementBlock("div", {
      class: normalizeClass({
        dp__menu_inner: !n2.stretch,
        "dp--menu--inner-stretched": n2.stretch,
        dp__flex_display: n2.multiCalendars > 0
      })
    }, [
      (openBlock(true), createElementBlock(Fragment, null, renderList(r2.value, (i3, c3) => (openBlock(), createElementBlock("div", {
        key: i3,
        class: normalizeClass(a4.value)
      }, [
        renderSlot(n2.$slots, "default", {
          instance: i3,
          index: c3
        })
      ], 2))), 128))
    ], 2));
  }
}), Rl = ["aria-label", "aria-disabled"], It = /* @__PURE__ */ defineComponent({
  compatConfig: {
    MODE: 3
  },
  __name: "ArrowBtn",
  props: {
    ariaLabel: {},
    disabled: { type: Boolean }
  },
  emits: ["activate", "set-ref"],
  setup(e3, { emit: t3 }) {
    const r2 = t3, a4 = ref(null);
    return onMounted(() => r2("set-ref", a4)), (n2, o2) => (openBlock(), createElementBlock("button", {
      ref_key: "elRef",
      ref: a4,
      type: "button",
      class: "dp__btn dp--arrow-btn-nav",
      tabindex: "0",
      "aria-label": n2.ariaLabel,
      "aria-disabled": n2.disabled || void 0,
      onClick: o2[0] || (o2[0] = (i3) => n2.$emit("activate")),
      onKeydown: [
        o2[1] || (o2[1] = withKeys(withModifiers((i3) => n2.$emit("activate"), ["prevent"]), ["enter"])),
        o2[2] || (o2[2] = withKeys(withModifiers((i3) => n2.$emit("activate"), ["prevent"]), ["space"]))
      ]
    }, [
      createBaseVNode("span", {
        class: normalizeClass(["dp__inner_nav", { dp__inner_nav_disabled: n2.disabled }])
      }, [
        renderSlot(n2.$slots, "default")
      ], 2)
    ], 40, Rl));
  }
}), Ol = { class: "dp--year-mode-picker" }, Yl = ["aria-label"], La = /* @__PURE__ */ defineComponent({
  __name: "YearModePicker",
  props: {
    ...tt$1,
    showYearPicker: { type: Boolean, default: false },
    items: { type: Array, default: () => [] },
    instance: { type: Number, default: 0 },
    year: { type: Number, default: 0 },
    isDisabled: { type: Function, default: () => false }
  },
  emits: ["toggle-year-picker", "year-select", "handle-year"],
  setup(e3, { emit: t3 }) {
    const r2 = t3, a4 = e3, { showRightIcon: n2, showLeftIcon: o2 } = an(), { defaultedConfig: i3, defaultedMultiCalendars: c3, defaultedAriaLabels: p2, defaultedTransitions: T4 } = Pe$1(a4), { showTransition: D3, transitionName: R4 } = Lt(T4), P2 = (A2 = false, q3) => {
      r2("toggle-year-picker", { flow: A2, show: q3 });
    }, M4 = (A2) => {
      r2("year-select", A2);
    }, C2 = (A2 = false) => {
      r2("handle-year", A2);
    };
    return (A2, q3) => {
      var g2, S4, F2;
      return openBlock(), createElementBlock("div", Ol, [
        unref(o2)(unref(c3), e3.instance) ? (openBlock(), createBlock(It, {
          key: 0,
          ref: "mpPrevIconRef",
          "aria-label": (g2 = unref(p2)) == null ? void 0 : g2.prevYear,
          disabled: e3.isDisabled(false),
          onActivate: q3[0] || (q3[0] = (b4) => C2(false))
        }, {
          default: withCtx(() => [
            A2.$slots["arrow-left"] ? renderSlot(A2.$slots, "arrow-left", { key: 0 }) : createCommentVNode("", true),
            A2.$slots["arrow-left"] ? createCommentVNode("", true) : (openBlock(), createBlock(unref(En), { key: 1 }))
          ]),
          _: 3
        }, 8, ["aria-label", "disabled"])) : createCommentVNode("", true),
        createBaseVNode("button", {
          ref: "mpYearButtonRef",
          class: "dp__btn dp--year-select",
          type: "button",
          "aria-label": (S4 = unref(p2)) == null ? void 0 : S4.openYearsOverlay,
          onClick: q3[1] || (q3[1] = () => P2(false)),
          onKeydown: q3[2] || (q3[2] = withKeys(() => P2(false), ["enter"]))
        }, [
          A2.$slots.year ? renderSlot(A2.$slots, "year", {
            key: 0,
            year: e3.year
          }) : createCommentVNode("", true),
          A2.$slots.year ? createCommentVNode("", true) : (openBlock(), createElementBlock(Fragment, { key: 1 }, [
            createTextVNode(toDisplayString$1(e3.year), 1)
          ], 64))
        ], 40, Yl),
        unref(n2)(unref(c3), e3.instance) ? (openBlock(), createBlock(It, {
          key: 1,
          ref: "mpNextIconRef",
          "aria-label": (F2 = unref(p2)) == null ? void 0 : F2.nextYear,
          disabled: e3.isDisabled(true),
          onActivate: q3[3] || (q3[3] = (b4) => C2(true))
        }, {
          default: withCtx(() => [
            A2.$slots["arrow-right"] ? renderSlot(A2.$slots, "arrow-right", { key: 0 }) : createCommentVNode("", true),
            A2.$slots["arrow-right"] ? createCommentVNode("", true) : (openBlock(), createBlock(unref(Fn), { key: 1 }))
          ]),
          _: 3
        }, 8, ["aria-label", "disabled"])) : createCommentVNode("", true),
        createVNode(Transition, {
          name: unref(R4)(e3.showYearPicker),
          css: unref(D3)
        }, {
          default: withCtx(() => [
            e3.showYearPicker ? (openBlock(), createBlock(zt, {
              key: 0,
              items: e3.items,
              "text-input": A2.textInput,
              "esc-close": A2.escClose,
              config: A2.config,
              "is-last": A2.autoApply && !unref(i3).keepActionRow,
              "hide-navigation": A2.hideNavigation,
              type: "year",
              onToggle: P2,
              onSelected: q3[4] || (q3[4] = (b4) => M4(b4))
            }, createSlots({
              "button-icon": withCtx(() => [
                A2.$slots["calendar-icon"] ? renderSlot(A2.$slots, "calendar-icon", { key: 0 }) : createCommentVNode("", true),
                A2.$slots["calendar-icon"] ? createCommentVNode("", true) : (openBlock(), createBlock(unref(Ot), { key: 1 }))
              ]),
              _: 2
            }, [
              A2.$slots["year-overlay-value"] ? {
                name: "item",
                fn: withCtx(({ item: b4 }) => [
                  renderSlot(A2.$slots, "year-overlay-value", {
                    text: b4.text,
                    value: b4.value
                  })
                ]),
                key: "0"
              } : void 0
            ]), 1032, ["items", "text-input", "esc-close", "config", "is-last", "hide-navigation"])) : createCommentVNode("", true)
          ]),
          _: 3
        }, 8, ["name", "css"])
      ]);
    };
  }
}), Gn = (e3, t3, r2) => {
  if (t3.value && Array.isArray(t3.value))
    if (t3.value.some((a4) => ke$1(e3, a4))) {
      const a4 = t3.value.filter((n2) => !ke$1(n2, e3));
      t3.value = a4.length ? a4 : null;
    } else
      (r2 && +r2 > t3.value.length || !r2) && t3.value.push(e3);
  else
    t3.value = [e3];
}, qn = (e3, t3, r2) => {
  let a4 = e3.value ? e3.value.slice() : [];
  return a4.length === 2 && a4[1] !== null && (a4 = []), a4.length ? Ye$2(t3, a4[0]) ? (a4.unshift(t3), r2("range-start", a4[0]), r2("range-start", a4[1])) : (a4[1] = t3, r2("range-end", t3)) : (a4 = [t3], r2("range-start", t3)), e3.value = a4, a4;
}, on = (e3, t3, r2, a4) => {
  e3[0] && e3[1] && r2 && t3("auto-apply"), e3[0] && !e3[1] && a4 && r2 && t3("auto-apply");
}, Ua = (e3) => {
  Array.isArray(e3.value) && e3.value.length <= 2 && e3.range ? e3.modelValue.value = e3.value.map((t3) => et$1(B$1(t3), e3.timezone)) : Array.isArray(e3.value) || (e3.modelValue.value = et$1(B$1(e3.value), e3.timezone));
}, za = ({
  multiCalendars: e3,
  highlight: t3,
  calendars: r2,
  modelValue: a4,
  props: n2,
  year: o2,
  month: i3,
  emit: c3
}) => {
  const p2 = computed(() => jn(n2.yearRange, n2.reverseYears)), T4 = ref([false]), D3 = computed(() => (b4, _2) => {
    const X4 = set(Xe$1(/* @__PURE__ */ new Date()), {
      month: i3.value(b4),
      year: o2.value(b4)
    });
    return Ea(X4, n2.maxDate, n2.minDate, n2.preventMinMaxNavigation, _2);
  }), R4 = () => {
    for (let b4 = 0; b4 < e3.value.count; b4++)
      if (b4 === 0)
        r2.value[b4] = r2.value[0];
      else {
        const _2 = set(B$1(), r2.value[b4 - 1]);
        r2.value[b4] = { month: getMonth(_2), year: getYear(addYears(_2, 1)) };
      }
  }, P2 = (b4) => {
    if (!b4)
      return R4();
    const _2 = set(B$1(), r2.value[b4]);
    return r2.value[0].year = getYear(subYears(_2, e3.value.count - 1)), R4();
  }, M4 = (b4) => n2.focusStartDate ? b4[0] : b4[1] ? b4[1] : b4[0], C2 = () => {
    if (a4.value) {
      const b4 = Array.isArray(a4.value) ? M4(a4.value) : a4.value;
      r2.value[0] = { month: getMonth(b4), year: getYear(b4) };
    }
  };
  onMounted(() => {
    C2(), e3.value.count && R4();
  });
  const A2 = (b4, _2) => {
    r2.value[_2].year = b4, e3.value.count && !e3.value.solo && P2(_2);
  }, q3 = computed(() => (b4) => Ct(p2.value, (_2) => {
    const X4 = o2.value(b4) === _2.value, ae2 = Ht(_2.value, _t(n2.minDate), _t(n2.maxDate)), V3 = Kn(t3.value, _2.value);
    return { active: X4, disabled: ae2, highlighted: V3 };
  })), g2 = (b4, _2) => {
    A2(b4, _2), F2(_2);
  }, S4 = (b4, _2 = false) => {
    if (!D3.value(b4, _2)) {
      const X4 = _2 ? o2.value(b4) + 1 : o2.value(b4) - 1;
      A2(X4, b4);
    }
  }, F2 = (b4, _2 = false, X4) => {
    _2 || c3("reset-flow"), X4 !== void 0 ? T4.value[b4] = X4 : T4.value[b4] = !T4.value[b4], T4.value || c3("overlay-closed");
  };
  return {
    isDisabled: D3,
    groupedYears: q3,
    showYearPicker: T4,
    selectYear: A2,
    toggleYearPicker: F2,
    handleYearSelect: g2,
    handleYear: S4
  };
}, Nl = (e3, t3) => {
  const { defaultedMultiCalendars: r2, defaultedAriaLabels: a4, defaultedTransitions: n2, defaultedConfig: o2, defaultedHighlight: i3 } = Pe$1(e3), { modelValue: c3, year: p2, month: T4, calendars: D3 } = Ut(e3, t3), R4 = computed(() => _a(e3.formatLocale, e3.locale, e3.monthNameFormat)), P2 = ref(null), {
    selectYear: M4,
    groupedYears: C2,
    showYearPicker: A2,
    toggleYearPicker: q3,
    handleYearSelect: g2,
    handleYear: S4,
    isDisabled: F2
  } = za({
    modelValue: c3,
    multiCalendars: r2,
    highlight: i3,
    calendars: D3,
    year: p2,
    month: T4,
    props: e3,
    emit: t3
  });
  onMounted(() => {
    e3.startDate && (c3.value && e3.focusStartDate || !c3.value) && M4(getYear(B$1(e3.startDate)), 0);
  });
  const b4 = (y4) => y4 ? { month: getMonth(y4), year: getYear(y4) } : { month: null, year: null }, _2 = () => c3.value ? Array.isArray(c3.value) ? c3.value.map((y4) => b4(y4)) : b4(c3.value) : b4(), X4 = (y4, l2) => {
    const h4 = D3.value[y4], s5 = _2();
    return Array.isArray(s5) ? s5.some((J3) => J3.year === (h4 == null ? void 0 : h4.year) && J3.month === l2) : (h4 == null ? void 0 : h4.year) === s5.year && l2 === s5.month;
  }, ae2 = (y4, l2, h4) => {
    var J3, de2;
    const s5 = _2();
    return Array.isArray(s5) ? p2.value(l2) === ((J3 = s5[h4]) == null ? void 0 : J3.year) && y4 === ((de2 = s5[h4]) == null ? void 0 : de2.month) : false;
  }, V3 = (y4, l2) => {
    if (e3.range) {
      const h4 = _2();
      if (Array.isArray(c3.value) && Array.isArray(h4)) {
        const s5 = ae2(y4, l2, 0) || ae2(y4, l2, 1), J3 = ot$1(Xe$1(B$1()), y4, p2.value(l2));
        return nn(c3.value, P2.value, J3) && !s5;
      }
      return false;
    }
    return false;
  }, ie2 = computed(() => (y4) => Ct(R4.value, (l2) => {
    const h4 = X4(y4, l2.value), s5 = Ht(
      l2.value,
      Oa(p2.value(y4), e3.minDate),
      Ya(p2.value(y4), e3.maxDate)
    ) || el(e3.disabledDates, p2.value(y4)).includes(l2.value), J3 = V3(l2.value, y4), de2 = Ha(i3.value, l2.value, p2.value(y4));
    return { active: h4, disabled: s5, isBetween: J3, highlighted: de2 };
  })), E3 = (y4, l2) => ot$1(Xe$1(B$1()), y4, p2.value(l2)), f2 = (y4, l2) => {
    const h4 = c3.value ? c3.value : Xe$1(/* @__PURE__ */ new Date());
    c3.value = ot$1(h4, y4, p2.value(l2)), t3("auto-apply");
  }, w3 = (y4, l2) => {
    const h4 = qn(c3, E3(y4, l2), t3);
    on(h4, t3, e3.autoApply, e3.modelAuto);
  }, L3 = (y4, l2) => {
    Gn(E3(y4, l2), c3, e3.multiDatesLimit), t3("auto-apply", true);
  }, ne2 = (y4, l2) => (D3.value[l2].month = y4, d4(l2, D3.value[l2].year, y4), e3.multiDates ? L3(y4, l2) : e3.range ? w3(y4, l2) : f2(y4, l2)), O4 = (y4, l2) => {
    M4(y4, l2), d4(l2, y4, null);
  }, d4 = (y4, l2, h4) => {
    let s5 = h4;
    if (!s5 && s5 !== 0) {
      const J3 = _2();
      s5 = Array.isArray(J3) ? J3[y4].month : J3.month;
    }
    t3("update-month-year", { instance: y4, year: l2, month: s5 });
  };
  return {
    groupedMonths: ie2,
    groupedYears: C2,
    year: p2,
    isDisabled: F2,
    defaultedMultiCalendars: r2,
    defaultedAriaLabels: a4,
    defaultedTransitions: n2,
    defaultedConfig: o2,
    showYearPicker: A2,
    modelValue: c3,
    presetDate: (y4, l2) => {
      Ua({ value: y4, modelValue: c3, range: e3.range, timezone: l2 ? void 0 : e3.timezone }), t3("auto-apply");
    },
    setHoverDate: (y4, l2) => {
      P2.value = E3(y4, l2);
    },
    selectMonth: ne2,
    selectYear: O4,
    toggleYearPicker: q3,
    handleYearSelect: g2,
    handleYear: S4,
    getModelMonthYear: _2
  };
}, Il = /* @__PURE__ */ defineComponent({
  compatConfig: {
    MODE: 3
  },
  __name: "MonthPicker",
  props: {
    ...tt$1
  },
  emits: [
    "update:internal-model-value",
    "overlay-closed",
    "reset-flow",
    "range-start",
    "range-end",
    "auto-apply",
    "update-month-year",
    "mount"
  ],
  setup(e3, { expose: t3, emit: r2 }) {
    const a4 = r2, n2 = useSlots(), o2 = qe$1(n2, "yearMode"), i3 = e3;
    onMounted(() => {
      i3.shadow || a4("mount", null);
    });
    const {
      groupedMonths: c3,
      groupedYears: p2,
      year: T4,
      isDisabled: D3,
      defaultedMultiCalendars: R4,
      defaultedConfig: P2,
      showYearPicker: M4,
      modelValue: C2,
      presetDate: A2,
      setHoverDate: q3,
      selectMonth: g2,
      selectYear: S4,
      toggleYearPicker: F2,
      handleYearSelect: b4,
      handleYear: _2,
      getModelMonthYear: X4
    } = Nl(i3, a4);
    return t3({ getSidebarProps: () => ({
      modelValue: C2,
      year: T4,
      getModelMonthYear: X4,
      selectMonth: g2,
      selectYear: S4,
      handleYear: _2
    }), presetDate: A2, toggleYearPicker: (V3) => F2(0, V3) }), (V3, ie2) => (openBlock(), createBlock(ln, {
      "multi-calendars": unref(R4).count,
      stretch: ""
    }, {
      default: withCtx(({ instance: E3 }) => [
        V3.$slots["month-year"] ? renderSlot(V3.$slots, "month-year", normalizeProps(mergeProps({ key: 0 }, {
          year: unref(T4),
          months: unref(c3)(E3),
          years: unref(p2)(E3),
          selectMonth: unref(g2),
          selectYear: unref(S4),
          instance: E3
        }))) : (openBlock(), createBlock(zt, {
          key: 1,
          items: unref(c3)(E3),
          "arrow-navigation": V3.arrowNavigation,
          "is-last": V3.autoApply && !unref(P2).keepActionRow,
          "esc-close": V3.escClose,
          height: unref(P2).modeHeight,
          config: V3.config,
          "no-overlay-focus": !!(V3.noOverlayFocus || V3.textInput),
          "use-relative": "",
          type: "month",
          onSelected: (f2) => unref(g2)(f2, E3),
          onHoverValue: (f2) => unref(q3)(f2, E3)
        }, {
          header: withCtx(() => [
            createVNode(La, mergeProps(V3.$props, {
              items: unref(p2)(E3),
              instance: E3,
              "show-year-picker": unref(M4)[E3],
              year: unref(T4)(E3),
              "is-disabled": (f2) => unref(D3)(E3, f2),
              onHandleYear: (f2) => unref(_2)(E3, f2),
              onYearSelect: (f2) => unref(b4)(f2, E3),
              onToggleYearPicker: (f2) => unref(F2)(E3, f2 == null ? void 0 : f2.flow, f2 == null ? void 0 : f2.show)
            }), createSlots({ _: 2 }, [
              renderList(unref(o2), (f2, w3) => ({
                name: f2,
                fn: withCtx((L3) => [
                  renderSlot(V3.$slots, f2, normalizeProps(guardReactiveProps(L3)))
                ])
              }))
            ]), 1040, ["items", "instance", "show-year-picker", "year", "is-disabled", "onHandleYear", "onYearSelect", "onToggleYearPicker"])
          ]),
          _: 2
        }, 1032, ["items", "arrow-navigation", "is-last", "esc-close", "height", "config", "no-overlay-focus", "onSelected", "onHoverValue"]))
      ]),
      _: 3
    }, 8, ["multi-calendars"]));
  }
}), Bl = (e3, t3) => {
  const { modelValue: r2 } = Ut(e3, t3), a4 = ref(null), { defaultedHighlight: n2, defaultedFilters: o2 } = Pe$1(e3), i3 = ref();
  onMounted(() => {
    e3.startDate && (r2.value && e3.focusStartDate || !r2.value) && (i3.value = getYear(B$1(e3.startDate)));
  });
  const c3 = (M4) => Array.isArray(r2.value) ? r2.value.some((C2) => getYear(C2) === M4) : r2.value ? getYear(r2.value) === M4 : false, p2 = (M4) => e3.range && Array.isArray(r2.value) ? nn(r2.value, a4.value, D3(M4)) : false, T4 = computed(() => Ct(jn(e3.yearRange, e3.reverseYears), (M4) => {
    const C2 = c3(M4.value), A2 = Ht(M4.value, _t(e3.minDate), _t(e3.maxDate)) || o2.value.years.includes(M4.value), q3 = p2(M4.value) && !C2, g2 = Kn(n2.value, M4.value);
    return { active: C2, disabled: A2, isBetween: q3, highlighted: g2 };
  })), D3 = (M4) => setYear(Xe$1(/* @__PURE__ */ new Date()), M4);
  return {
    groupedYears: T4,
    modelValue: r2,
    focusYear: i3,
    setHoverValue: (M4) => {
      a4.value = setYear(Xe$1(/* @__PURE__ */ new Date()), M4);
    },
    selectYear: (M4) => {
      var C2;
      if (e3.multiDates)
        return r2.value ? Array.isArray(r2.value) && (((C2 = r2.value) == null ? void 0 : C2.map((q3) => getYear(q3))).includes(M4) ? r2.value = r2.value.filter((q3) => getYear(q3) !== M4) : r2.value.push(setYear(Fe$2(B$1()), M4))) : r2.value = [setYear(Fe$2(B$1()), M4)], t3("auto-apply", true);
      if (e3.range) {
        const A2 = qn(r2, D3(M4), t3);
        return on(A2, t3, e3.autoApply, e3.modelAuto);
      }
      r2.value = D3(M4), t3("auto-apply");
    }
  };
}, El = /* @__PURE__ */ defineComponent({
  compatConfig: {
    MODE: 3
  },
  __name: "YearPicker",
  props: {
    ...tt$1
  },
  emits: ["update:internal-model-value", "reset-flow", "range-start", "range-end", "auto-apply"],
  setup(e3, { expose: t3, emit: r2 }) {
    const a4 = r2, n2 = e3, { groupedYears: o2, modelValue: i3, focusYear: c3, selectYear: p2, setHoverValue: T4 } = Bl(n2, a4), { defaultedConfig: D3 } = Pe$1(n2);
    return t3({ getSidebarProps: () => ({
      modelValue: i3,
      selectYear: p2
    }) }), (P2, M4) => (openBlock(), createElementBlock("div", null, [
      P2.$slots["month-year"] ? renderSlot(P2.$slots, "month-year", normalizeProps(mergeProps({ key: 0 }, {
        years: unref(o2),
        selectYear: unref(p2)
      }))) : (openBlock(), createBlock(zt, {
        key: 1,
        items: unref(o2),
        "is-last": P2.autoApply && !unref(D3).keepActionRow,
        height: unref(D3).modeHeight,
        config: P2.config,
        "no-overlay-focus": !!(P2.noOverlayFocus || P2.textInput),
        "focus-value": unref(c3),
        type: "year",
        "use-relative": "",
        onSelected: unref(p2),
        onHoverValue: unref(T4)
      }, createSlots({ _: 2 }, [
        P2.$slots["year-overlay-value"] ? {
          name: "item",
          fn: withCtx(({ item: C2 }) => [
            renderSlot(P2.$slots, "year-overlay-value", {
              text: C2.text,
              value: C2.value
            })
          ]),
          key: "0"
        } : void 0
      ]), 1032, ["items", "is-last", "height", "config", "no-overlay-focus", "focus-value", "onSelected", "onHoverValue"]))
    ]));
  }
}), Fl = {
  key: 0,
  class: "dp__time_input"
}, Hl = ["aria-label", "onKeydown", "onClick"], Vl = /* @__PURE__ */ createBaseVNode("span", { class: "dp__tp_inline_btn_bar dp__tp_btn_in_l" }, null, -1), Ll = /* @__PURE__ */ createBaseVNode("span", { class: "dp__tp_inline_btn_bar dp__tp_btn_in_r" }, null, -1), Ul = ["aria-label", "disabled", "onKeydown", "onClick"], zl = ["aria-label", "onKeydown", "onClick"], Wl = /* @__PURE__ */ createBaseVNode("span", { class: "dp__tp_inline_btn_bar dp__tp_btn_in_l" }, null, -1), jl = /* @__PURE__ */ createBaseVNode("span", { class: "dp__tp_inline_btn_bar dp__tp_btn_in_r" }, null, -1), Kl = { key: 0 }, Gl = ["aria-label", "onKeydown"], ql = /* @__PURE__ */ defineComponent({
  compatConfig: {
    MODE: 3
  },
  __name: "TimeInput",
  props: {
    hours: { type: Number, default: 0 },
    minutes: { type: Number, default: 0 },
    seconds: { type: Number, default: 0 },
    closeTimePickerBtn: { type: Object, default: null },
    order: { type: Number, default: 0 },
    disabledTimesConfig: { type: Function, default: null },
    validateTime: { type: Function, default: () => false },
    ...tt$1
  },
  emits: [
    "set-hours",
    "set-minutes",
    "update:hours",
    "update:minutes",
    "update:seconds",
    "reset-flow",
    "mounted",
    "overlay-closed",
    "am-pm-change"
  ],
  setup(e3, { expose: t3, emit: r2 }) {
    const a4 = r2, n2 = e3, { setTimePickerElements: o2, setTimePickerBackRef: i3 } = yt$1(), { defaultedAriaLabels: c3, defaultedTransitions: p2, defaultedFilters: T4, defaultedConfig: D3 } = Pe$1(n2), { transitionName: R4, showTransition: P2 } = Lt(p2), M4 = reactive({
      hours: false,
      minutes: false,
      seconds: false
    }), C2 = ref("AM"), A2 = ref(null), q3 = ref([]);
    onMounted(() => {
      a4("mounted");
    });
    const g2 = (u3) => set(/* @__PURE__ */ new Date(), {
      hours: u3.hours,
      minutes: u3.minutes,
      seconds: n2.enableSeconds ? u3.seconds : 0,
      milliseconds: 0
    }), S4 = computed(
      () => (u3) => ne2(u3, n2[u3]) || b4(u3, n2[u3])
    ), F2 = computed(() => ({ hours: n2.hours, minutes: n2.minutes, seconds: n2.seconds })), b4 = (u3, I3) => n2.range && !n2.disableTimeRangeValidation ? !n2.validateTime(u3, I3) : false, _2 = (u3, I3) => {
      if (n2.range && !n2.disableTimeRangeValidation) {
        const Q3 = I3 ? +n2[`${u3}Increment`] : -+n2[`${u3}Increment`], K3 = n2[u3] + Q3;
        return !n2.validateTime(u3, K3);
      }
      return false;
    }, X4 = computed(() => (u3) => !d4(+n2[u3] + +n2[`${u3}Increment`], u3) || _2(u3, true)), ae2 = computed(() => (u3) => !d4(+n2[u3] - +n2[`${u3}Increment`], u3) || _2(u3, false)), V3 = (u3, I3) => add(set(B$1(), u3), I3), ie2 = (u3, I3) => sub(set(B$1(), u3), I3), E3 = computed(
      () => ({
        dp__time_col: true,
        dp__time_col_block: !n2.timePickerInline,
        dp__time_col_reg_block: !n2.enableSeconds && n2.is24 && !n2.timePickerInline,
        dp__time_col_reg_inline: !n2.enableSeconds && n2.is24 && n2.timePickerInline,
        dp__time_col_reg_with_button: !n2.enableSeconds && !n2.is24,
        dp__time_col_sec: n2.enableSeconds && n2.is24,
        dp__time_col_sec_with_button: n2.enableSeconds && !n2.is24
      })
    ), f2 = computed(() => {
      const u3 = [{ type: "hours" }, { type: "", separator: true }, { type: "minutes" }];
      return n2.enableSeconds ? u3.concat([{ type: "", separator: true }, { type: "seconds" }]) : u3;
    }), w3 = computed(() => f2.value.filter((u3) => !u3.separator)), L3 = computed(() => (u3) => {
      if (u3 === "hours") {
        const I3 = h4(+n2.hours);
        return { text: I3 < 10 ? `0${I3}` : `${I3}`, value: I3 };
      }
      return { text: n2[u3] < 10 ? `0${n2[u3]}` : `${n2[u3]}`, value: n2[u3] };
    }), ne2 = (u3, I3) => {
      var K3;
      if (!n2.disabledTimesConfig)
        return false;
      const Q3 = n2.disabledTimesConfig(n2.order, u3 === "hours" ? I3 : void 0);
      return Q3[u3] ? !!((K3 = Q3[u3]) != null && K3.includes(I3)) : true;
    }, O4 = (u3) => {
      const I3 = n2.is24 ? 24 : 12, Q3 = u3 === "hours" ? I3 : 60, K3 = +n2[`${u3}GridIncrement`], te2 = u3 === "hours" && !n2.is24 ? K3 : 0, le2 = [];
      for (let be3 = te2; be3 < Q3; be3 += K3)
        le2.push({ value: be3, text: be3 < 10 ? `0${be3}` : `${be3}` });
      return u3 === "hours" && !n2.is24 && le2.push({ value: 0, text: "12" }), Ct(le2, (be3) => ({ active: false, disabled: T4.value.times[u3].includes(be3.value) || !d4(be3.value, u3) || ne2(u3, be3.value) || b4(u3, be3.value) }));
    }, d4 = (u3, I3) => {
      const Q3 = n2.minTime ? g2(yn(n2.minTime)) : null, K3 = n2.maxTime ? g2(yn(n2.maxTime)) : null, te2 = g2(yn(F2.value, I3, u3));
      return Q3 && K3 ? (isBefore(te2, K3) || isEqual(te2, K3)) && (isAfter(te2, Q3) || isEqual(te2, Q3)) : Q3 ? isAfter(te2, Q3) || isEqual(te2, Q3) : K3 ? isBefore(te2, K3) || isEqual(te2, K3) : true;
    }, Y3 = (u3) => n2[`no${u3[0].toUpperCase() + u3.slice(1)}Overlay`], Z3 = (u3) => {
      Y3(u3) || (M4[u3] = !M4[u3], M4[u3] || a4("overlay-closed"));
    }, y4 = (u3) => u3 === "hours" ? getHours : u3 === "minutes" ? getMinutes : getSeconds, l2 = (u3, I3 = true) => {
      const Q3 = I3 ? V3 : ie2, K3 = I3 ? +n2[`${u3}Increment`] : -+n2[`${u3}Increment`];
      d4(+n2[u3] + K3, u3) && a4(
        `update:${u3}`,
        y4(u3)(Q3({ [u3]: +n2[u3] }, { [u3]: +n2[`${u3}Increment`] }))
      );
    }, h4 = (u3) => n2.is24 ? u3 : (u3 >= 12 ? C2.value = "PM" : C2.value = "AM", Vr(u3)), s5 = () => {
      C2.value === "PM" ? (C2.value = "AM", a4("update:hours", n2.hours - 12)) : (C2.value = "PM", a4("update:hours", n2.hours + 12)), a4("am-pm-change", C2.value);
    }, J3 = (u3) => {
      M4[u3] = true;
    }, de2 = (u3, I3, Q3) => {
      if (u3 && n2.arrowNavigation) {
        Array.isArray(q3.value[I3]) ? q3.value[I3][Q3] = u3 : q3.value[I3] = [u3];
        const K3 = q3.value.reduce(
          (te2, le2) => le2.map((be3, N3) => [...te2[N3] || [], le2[N3]]),
          []
        );
        i3(n2.closeTimePickerBtn), A2.value && (K3[1] = K3[1].concat(A2.value)), o2(K3, n2.order);
      }
    }, $3 = (u3, I3) => (Z3(u3), u3 === "hours" && !n2.is24 ? a4(`update:${u3}`, C2.value === "PM" ? I3 + 12 : I3) : a4(`update:${u3}`, I3));
    return t3({ openChildCmp: J3 }), (u3, I3) => {
      var Q3;
      return u3.disabled ? createCommentVNode("", true) : (openBlock(), createElementBlock("div", Fl, [
        (openBlock(true), createElementBlock(Fragment, null, renderList(f2.value, (K3, te2) => {
          var le2, be3, N3;
          return openBlock(), createElementBlock("div", {
            key: te2,
            class: normalizeClass(E3.value)
          }, [
            K3.separator ? (openBlock(), createElementBlock(Fragment, { key: 0 }, [
              createTextVNode(" : ")
            ], 64)) : (openBlock(), createElementBlock(Fragment, { key: 1 }, [
              createBaseVNode("button", {
                ref_for: true,
                ref: (U2) => de2(U2, te2, 0),
                type: "button",
                class: normalizeClass({
                  dp__btn: true,
                  dp__inc_dec_button: !u3.timePickerInline,
                  dp__inc_dec_button_inline: u3.timePickerInline,
                  dp__tp_inline_btn_top: u3.timePickerInline,
                  dp__inc_dec_button_disabled: X4.value(K3.type)
                }),
                "aria-label": (le2 = unref(c3)) == null ? void 0 : le2.incrementValue(K3.type),
                tabindex: "0",
                onKeydown: [
                  withKeys(withModifiers((U2) => l2(K3.type), ["prevent"]), ["enter"]),
                  withKeys(withModifiers((U2) => l2(K3.type), ["prevent"]), ["space"])
                ],
                onClick: (U2) => l2(K3.type)
              }, [
                n2.timePickerInline ? (openBlock(), createElementBlock(Fragment, { key: 1 }, [
                  Vl,
                  Ll
                ], 64)) : (openBlock(), createElementBlock(Fragment, { key: 0 }, [
                  u3.$slots["arrow-up"] ? renderSlot(u3.$slots, "arrow-up", { key: 0 }) : createCommentVNode("", true),
                  u3.$slots["arrow-up"] ? createCommentVNode("", true) : (openBlock(), createBlock(unref(Vn), { key: 1 }))
                ], 64))
              ], 42, Hl),
              createBaseVNode("button", {
                ref_for: true,
                ref: (U2) => de2(U2, te2, 1),
                type: "button",
                "aria-label": (be3 = unref(c3)) == null ? void 0 : be3.openTpOverlay(K3.type),
                class: normalizeClass({
                  dp__time_display: true,
                  dp__time_display_block: !u3.timePickerInline,
                  dp__time_display_inline: u3.timePickerInline,
                  "dp--time-invalid": S4.value(K3.type),
                  "dp--time-overlay-btn": !S4.value(K3.type)
                }),
                disabled: Y3(K3.type),
                tabindex: "0",
                onKeydown: [
                  withKeys(withModifiers((U2) => Z3(K3.type), ["prevent"]), ["enter"]),
                  withKeys(withModifiers((U2) => Z3(K3.type), ["prevent"]), ["space"])
                ],
                onClick: (U2) => Z3(K3.type)
              }, [
                u3.$slots[K3.type] ? renderSlot(u3.$slots, K3.type, {
                  key: 0,
                  text: L3.value(K3.type).text,
                  value: L3.value(K3.type).value
                }) : createCommentVNode("", true),
                u3.$slots[K3.type] ? createCommentVNode("", true) : (openBlock(), createElementBlock(Fragment, { key: 1 }, [
                  createTextVNode(toDisplayString$1(L3.value(K3.type).text), 1)
                ], 64))
              ], 42, Ul),
              createBaseVNode("button", {
                ref_for: true,
                ref: (U2) => de2(U2, te2, 2),
                type: "button",
                class: normalizeClass({
                  dp__btn: true,
                  dp__inc_dec_button: !u3.timePickerInline,
                  dp__inc_dec_button_inline: u3.timePickerInline,
                  dp__tp_inline_btn_bottom: u3.timePickerInline,
                  dp__inc_dec_button_disabled: ae2.value(K3.type)
                }),
                "aria-label": (N3 = unref(c3)) == null ? void 0 : N3.decrementValue(K3.type),
                tabindex: "0",
                onKeydown: [
                  withKeys(withModifiers((U2) => l2(K3.type, false), ["prevent"]), ["enter"]),
                  withKeys(withModifiers((U2) => l2(K3.type, false), ["prevent"]), ["space"])
                ],
                onClick: (U2) => l2(K3.type, false)
              }, [
                n2.timePickerInline ? (openBlock(), createElementBlock(Fragment, { key: 1 }, [
                  Wl,
                  jl
                ], 64)) : (openBlock(), createElementBlock(Fragment, { key: 0 }, [
                  u3.$slots["arrow-down"] ? renderSlot(u3.$slots, "arrow-down", { key: 0 }) : createCommentVNode("", true),
                  u3.$slots["arrow-down"] ? createCommentVNode("", true) : (openBlock(), createBlock(unref(Ln), { key: 1 }))
                ], 64))
              ], 42, zl)
            ], 64))
          ], 2);
        }), 128)),
        u3.is24 ? createCommentVNode("", true) : (openBlock(), createElementBlock("div", Kl, [
          u3.$slots["am-pm-button"] ? renderSlot(u3.$slots, "am-pm-button", {
            key: 0,
            toggle: s5,
            value: C2.value
          }) : createCommentVNode("", true),
          u3.$slots["am-pm-button"] ? createCommentVNode("", true) : (openBlock(), createElementBlock("button", {
            key: 1,
            ref_key: "amPmButton",
            ref: A2,
            type: "button",
            class: "dp__pm_am_button",
            role: "button",
            "aria-label": (Q3 = unref(c3)) == null ? void 0 : Q3.amPmButton,
            tabindex: "0",
            onClick: s5,
            onKeydown: [
              withKeys(withModifiers(s5, ["prevent"]), ["enter"]),
              withKeys(withModifiers(s5, ["prevent"]), ["space"])
            ]
          }, toDisplayString$1(C2.value), 41, Gl))
        ])),
        (openBlock(true), createElementBlock(Fragment, null, renderList(w3.value, (K3, te2) => (openBlock(), createBlock(Transition, {
          key: te2,
          name: unref(R4)(M4[K3.type]),
          css: unref(P2)
        }, {
          default: withCtx(() => [
            M4[K3.type] ? (openBlock(), createBlock(zt, {
              key: 0,
              items: O4(K3.type),
              "is-last": u3.autoApply && !unref(D3).keepActionRow,
              "esc-close": u3.escClose,
              type: K3.type,
              "text-input": u3.textInput,
              config: u3.config,
              "arrow-navigation": u3.arrowNavigation,
              onSelected: (le2) => $3(K3.type, le2),
              onToggle: (le2) => Z3(K3.type),
              onResetFlow: I3[0] || (I3[0] = (le2) => u3.$emit("reset-flow"))
            }, createSlots({
              "button-icon": withCtx(() => [
                u3.$slots["clock-icon"] ? renderSlot(u3.$slots, "clock-icon", { key: 0 }) : createCommentVNode("", true),
                u3.$slots["clock-icon"] ? createCommentVNode("", true) : (openBlock(), createBlock(resolveDynamicComponent(u3.timePickerInline ? unref(Ot) : unref(Hn)), { key: 1 }))
              ]),
              _: 2
            }, [
              u3.$slots[`${K3.type}-overlay-value`] ? {
                name: "item",
                fn: withCtx(({ item: le2 }) => [
                  renderSlot(u3.$slots, `${K3.type}-overlay-value`, {
                    text: le2.text,
                    value: le2.value
                  })
                ]),
                key: "0"
              } : void 0
            ]), 1032, ["items", "is-last", "esc-close", "type", "text-input", "config", "arrow-navigation", "onSelected", "onToggle"])) : createCommentVNode("", true)
          ]),
          _: 2
        }, 1032, ["name", "css"]))), 128))
      ]));
    };
  }
}), Zl = { class: "dp--tp-wrap" }, Ql = ["aria-label", "tabindex"], Xl = ["tabindex"], Jl = ["aria-label"], Wa = /* @__PURE__ */ defineComponent({
  compatConfig: {
    MODE: 3
  },
  __name: "TimePicker",
  props: {
    hours: { type: [Number, Array], default: 0 },
    minutes: { type: [Number, Array], default: 0 },
    seconds: { type: [Number, Array], default: 0 },
    disabledTimesConfig: { type: Function, default: null },
    validateTime: {
      type: Function,
      default: () => false
    },
    ...tt$1
  },
  emits: [
    "update:hours",
    "update:minutes",
    "update:seconds",
    "mount",
    "reset-flow",
    "overlay-opened",
    "overlay-closed",
    "am-pm-change"
  ],
  setup(e3, { expose: t3, emit: r2 }) {
    const a4 = r2, n2 = e3, { buildMatrix: o2, setTimePicker: i3 } = yt$1(), c3 = useSlots(), { defaultedTransitions: p2, defaultedAriaLabels: T4, defaultedTextInput: D3, defaultedConfig: R4 } = Pe$1(n2), { transitionName: P2, showTransition: M4 } = Lt(p2), { hideNavigationButtons: C2 } = an(), A2 = ref(null), q3 = ref(null), g2 = ref([]), S4 = ref(null);
    onMounted(() => {
      a4("mount"), !n2.timePicker && n2.arrowNavigation ? o2([Re$2(A2.value)], "time") : i3(true, n2.timePicker);
    });
    const F2 = computed(() => n2.range && n2.modelAuto ? Ra(n2.internalModelValue) : true), b4 = ref(false), _2 = (O4) => ({
      hours: Array.isArray(n2.hours) ? n2.hours[O4] : n2.hours,
      minutes: Array.isArray(n2.minutes) ? n2.minutes[O4] : n2.minutes,
      seconds: Array.isArray(n2.seconds) ? n2.seconds[O4] : n2.seconds
    }), X4 = computed(() => {
      const O4 = [];
      if (n2.range)
        for (let d4 = 0; d4 < 2; d4++)
          O4.push(_2(d4));
      else
        O4.push(_2(0));
      return O4;
    }), ae2 = (O4, d4 = false, Y3 = "") => {
      d4 || a4("reset-flow"), b4.value = O4, a4(O4 ? "overlay-opened" : "overlay-closed"), n2.arrowNavigation && i3(O4), nextTick(() => {
        Y3 !== "" && g2.value[0] && g2.value[0].openChildCmp(Y3);
      });
    }, V3 = computed(() => ({
      dp__btn: true,
      dp__button: true,
      dp__button_bottom: n2.autoApply && !R4.value.keepActionRow
    })), ie2 = qe$1(c3, "timePicker"), E3 = (O4, d4, Y3) => n2.range ? d4 === 0 ? [O4, X4.value[1][Y3]] : [X4.value[0][Y3], O4] : O4, f2 = (O4) => {
      a4("update:hours", O4);
    }, w3 = (O4) => {
      a4("update:minutes", O4);
    }, L3 = (O4) => {
      a4("update:seconds", O4);
    }, ne2 = () => {
      if (S4.value && !D3.value.enabled && !n2.noOverlayFocus) {
        const O4 = Ur(S4.value);
        O4 && O4.focus({ preventScroll: true });
      }
    };
    return t3({ toggleTimePicker: ae2 }), (O4, d4) => {
      var Y3;
      return openBlock(), createElementBlock("div", Zl, [
        !O4.timePicker && !O4.timePickerInline ? withDirectives((openBlock(), createElementBlock("button", {
          key: 0,
          ref_key: "openTimePickerBtn",
          ref: A2,
          type: "button",
          class: normalizeClass(V3.value),
          "aria-label": (Y3 = unref(T4)) == null ? void 0 : Y3.openTimePicker,
          tabindex: O4.noOverlayFocus ? void 0 : 0,
          onKeydown: [
            d4[0] || (d4[0] = withKeys((Z3) => ae2(true), ["enter"])),
            d4[1] || (d4[1] = withKeys((Z3) => ae2(true), ["space"]))
          ],
          onClick: d4[2] || (d4[2] = (Z3) => ae2(true))
        }, [
          O4.$slots["clock-icon"] ? renderSlot(O4.$slots, "clock-icon", { key: 0 }) : createCommentVNode("", true),
          O4.$slots["clock-icon"] ? createCommentVNode("", true) : (openBlock(), createBlock(unref(Hn), { key: 1 }))
        ], 42, Ql)), [
          [vShow, !unref(C2)(O4.hideNavigation, "time")]
        ]) : createCommentVNode("", true),
        createVNode(Transition, {
          name: unref(P2)(b4.value),
          css: unref(M4) && !O4.timePickerInline
        }, {
          default: withCtx(() => {
            var Z3;
            return [
              b4.value || O4.timePicker || O4.timePickerInline ? (openBlock(), createElementBlock("div", {
                key: 0,
                ref_key: "overlayRef",
                ref: S4,
                class: normalizeClass({
                  dp__overlay: !O4.timePickerInline,
                  "dp--overlay-absolute": !n2.timePicker && !O4.timePickerInline,
                  "dp--overlay-relative": n2.timePicker
                }),
                style: normalizeStyle(O4.timePicker ? { height: `${unref(R4).modeHeight}px` } : void 0),
                tabindex: O4.timePickerInline ? void 0 : 0
              }, [
                createBaseVNode("div", {
                  class: normalizeClass(
                    O4.timePickerInline ? "dp__time_picker_inline_container" : "dp__overlay_container dp__container_flex dp__time_picker_overlay_container"
                  ),
                  style: { display: "flex" }
                }, [
                  O4.$slots["time-picker-overlay"] ? renderSlot(O4.$slots, "time-picker-overlay", {
                    key: 0,
                    hours: e3.hours,
                    minutes: e3.minutes,
                    seconds: e3.seconds,
                    setHours: f2,
                    setMinutes: w3,
                    setSeconds: L3
                  }) : createCommentVNode("", true),
                  O4.$slots["time-picker-overlay"] ? createCommentVNode("", true) : (openBlock(), createElementBlock("div", {
                    key: 1,
                    class: normalizeClass(O4.timePickerInline ? "dp__flex" : "dp__overlay_row dp__flex_row")
                  }, [
                    (openBlock(true), createElementBlock(Fragment, null, renderList(X4.value, (y4, l2) => withDirectives((openBlock(), createBlock(ql, mergeProps({ key: l2 }, {
                      ...O4.$props,
                      order: l2,
                      hours: y4.hours,
                      minutes: y4.minutes,
                      seconds: y4.seconds,
                      closeTimePickerBtn: q3.value,
                      disabledTimesConfig: e3.disabledTimesConfig,
                      disabled: l2 === 0 ? O4.fixedStart : O4.fixedEnd
                    }, {
                      ref_for: true,
                      ref_key: "timeInputRefs",
                      ref: g2,
                      "validate-time": (h4, s5) => e3.validateTime(h4, E3(s5, l2, h4)),
                      "onUpdate:hours": (h4) => f2(E3(h4, l2, "hours")),
                      "onUpdate:minutes": (h4) => w3(E3(h4, l2, "minutes")),
                      "onUpdate:seconds": (h4) => L3(E3(h4, l2, "seconds")),
                      onMounted: ne2,
                      onOverlayClosed: ne2,
                      onAmPmChange: d4[3] || (d4[3] = (h4) => O4.$emit("am-pm-change", h4))
                    }), createSlots({ _: 2 }, [
                      renderList(unref(ie2), (h4, s5) => ({
                        name: h4,
                        fn: withCtx((J3) => [
                          renderSlot(O4.$slots, h4, normalizeProps(guardReactiveProps(J3)))
                        ])
                      }))
                    ]), 1040, ["validate-time", "onUpdate:hours", "onUpdate:minutes", "onUpdate:seconds"])), [
                      [vShow, l2 === 0 ? true : F2.value]
                    ])), 128))
                  ], 2)),
                  !O4.timePicker && !O4.timePickerInline ? withDirectives((openBlock(), createElementBlock("button", {
                    key: 2,
                    ref_key: "closeTimePickerBtn",
                    ref: q3,
                    type: "button",
                    class: normalizeClass(V3.value),
                    "aria-label": (Z3 = unref(T4)) == null ? void 0 : Z3.closeTimePicker,
                    tabindex: "0",
                    onKeydown: [
                      d4[4] || (d4[4] = withKeys((y4) => ae2(false), ["enter"])),
                      d4[5] || (d4[5] = withKeys((y4) => ae2(false), ["space"]))
                    ],
                    onClick: d4[6] || (d4[6] = (y4) => ae2(false))
                  }, [
                    O4.$slots["calendar-icon"] ? renderSlot(O4.$slots, "calendar-icon", { key: 0 }) : createCommentVNode("", true),
                    O4.$slots["calendar-icon"] ? createCommentVNode("", true) : (openBlock(), createBlock(unref(Ot), { key: 1 }))
                  ], 42, Jl)), [
                    [vShow, !unref(C2)(O4.hideNavigation, "time")]
                  ]) : createCommentVNode("", true)
                ], 2)
              ], 14, Xl)) : createCommentVNode("", true)
            ];
          }),
          _: 3
        }, 8, ["name", "css"])
      ]);
    };
  }
}), ja = (e3, t3, r2, a4) => {
  const n2 = (g2, S4) => Array.isArray(t3[g2]) ? t3[g2][S4] : t3[g2], o2 = (g2) => e3.enableSeconds ? Array.isArray(t3.seconds) ? t3.seconds[g2] : t3.seconds : 0, i3 = (g2, S4) => g2 ? S4 !== void 0 ? vt$1(g2, n2("hours", S4), n2("minutes", S4), o2(S4)) : vt$1(g2, t3.hours, t3.minutes, o2()) : setSeconds(B$1(), o2(S4)), c3 = (g2, S4) => {
    t3[g2] = S4;
  }, p2 = (g2, S4) => {
    const F2 = Object.fromEntries(
      Object.keys(t3).map((b4) => b4 === g2 ? [b4, S4] : [b4, t3[b4]].slice())
    );
    if (e3.range && !e3.disableTimeRangeValidation) {
      const b4 = (X4) => r2.value ? vt$1(
        r2.value[X4],
        F2.hours[X4],
        F2.minutes[X4],
        F2.seconds[X4]
      ) : null, _2 = (X4) => setMilliseconds(r2.value[X4], 0);
      return !(ke$1(b4(0), b4(1)) && (isAfter(b4(0), _2(1)) || isBefore(b4(1), _2(0))));
    }
    return true;
  }, T4 = (g2, S4) => {
    p2(g2, S4) && (c3(g2, S4), a4 && a4());
  }, D3 = (g2) => {
    T4("hours", g2);
  }, R4 = (g2) => {
    T4("minutes", g2);
  }, P2 = (g2) => {
    T4("seconds", g2);
  }, M4 = (g2, S4, F2, b4) => {
    S4 && D3(g2), !S4 && !F2 && R4(g2), F2 && P2(g2), r2.value && b4(r2.value);
  }, C2 = (g2) => {
    if (g2) {
      const S4 = Array.isArray(g2), F2 = S4 ? [+g2[0].hours, +g2[1].hours] : +g2.hours, b4 = S4 ? [+g2[0].minutes, +g2[1].minutes] : +g2.minutes, _2 = S4 ? [+g2[0].seconds, +g2[1].seconds] : +g2.seconds;
      c3("hours", F2), c3("minutes", b4), e3.enableSeconds && c3("seconds", _2);
    }
  }, A2 = (g2, S4) => {
    const F2 = {
      hours: Array.isArray(t3.hours) ? t3.hours[g2] : t3.hours,
      disabledArr: []
    };
    return (S4 || S4 === 0) && (F2.hours = S4), Array.isArray(e3.disabledTimes) && (F2.disabledArr = e3.range && Array.isArray(e3.disabledTimes[g2]) ? e3.disabledTimes[g2] : e3.disabledTimes), F2;
  }, q3 = computed(() => (g2, S4) => {
    var F2;
    if (Array.isArray(e3.disabledTimes)) {
      const { disabledArr: b4, hours: _2 } = A2(g2, S4), X4 = b4.filter((ae2) => +ae2.hours === _2);
      return ((F2 = X4[0]) == null ? void 0 : F2.minutes) === "*" ? { hours: [_2], minutes: void 0, seconds: void 0 } : {
        hours: [],
        minutes: (X4 == null ? void 0 : X4.map((ae2) => +ae2.minutes)) ?? [],
        seconds: (X4 == null ? void 0 : X4.map((ae2) => ae2.seconds ? +ae2.seconds : void 0)) ?? []
      };
    }
    return { hours: [], minutes: [], seconds: [] };
  });
  return {
    setTime: c3,
    updateHours: D3,
    updateMinutes: R4,
    updateSeconds: P2,
    getSetDateTime: i3,
    updateTimeValues: M4,
    getSecondsValue: o2,
    assignStartTime: C2,
    validateTime: p2,
    disabledTimesConfig: q3
  };
}, xl = (e3, t3) => {
  const { modelValue: r2, time: a4 } = Ut(e3, t3), { defaultedStartTime: n2 } = Pe$1(e3), { updateTimeValues: o2, getSetDateTime: i3, setTime: c3, assignStartTime: p2, disabledTimesConfig: T4, validateTime: D3 } = ja(e3, a4, r2), R4 = (F2) => {
    const { hours: b4, minutes: _2, seconds: X4 } = F2;
    return { hours: +b4, minutes: +_2, seconds: X4 ? +X4 : 0 };
  }, P2 = () => {
    if (e3.startTime) {
      if (Array.isArray(e3.startTime)) {
        const b4 = R4(e3.startTime[0]), _2 = R4(e3.startTime[1]);
        return [set(B$1(), b4), set(B$1(), _2)];
      }
      const F2 = R4(e3.startTime);
      return set(B$1(), F2);
    }
    return e3.range ? [null, null] : null;
  }, M4 = () => {
    if (e3.range) {
      const [F2, b4] = P2();
      r2.value = [i3(F2, 0), i3(b4, 1)];
    } else
      r2.value = i3(P2());
  }, C2 = (F2) => Array.isArray(F2) ? [wt$1(B$1(F2[0])), wt$1(B$1(F2[1]))] : [wt$1(F2 ?? B$1())], A2 = (F2, b4, _2) => {
    c3("hours", F2), c3("minutes", b4), c3("seconds", e3.enableSeconds ? _2 : 0);
  }, q3 = () => {
    const [F2, b4] = C2(r2.value);
    return e3.range ? A2(
      [F2.hours, b4.hours],
      [F2.minutes, b4.minutes],
      [F2.seconds, b4.minutes]
    ) : A2(F2.hours, F2.minutes, F2.seconds);
  };
  onMounted(() => {
    if (!e3.shadow)
      return p2(n2.value), r2.value ? q3() : M4();
  });
  const g2 = () => {
    Array.isArray(r2.value) ? r2.value = r2.value.map((F2, b4) => F2 && i3(F2, b4)) : r2.value = i3(r2.value), t3("time-update");
  };
  return {
    modelValue: r2,
    time: a4,
    disabledTimesConfig: T4,
    updateTime: (F2, b4 = true, _2 = false) => {
      o2(F2, b4, _2, g2);
    },
    validateTime: D3
  };
}, eo = /* @__PURE__ */ defineComponent({
  compatConfig: {
    MODE: 3
  },
  __name: "TimePickerSolo",
  props: {
    ...tt$1
  },
  emits: ["update:internal-model-value", "time-update", "am-pm-change"],
  setup(e3, { expose: t3, emit: r2 }) {
    const a4 = r2, n2 = e3, o2 = useSlots(), i3 = qe$1(o2, "timePicker"), { time: c3, modelValue: p2, disabledTimesConfig: T4, updateTime: D3, validateTime: R4 } = xl(n2, a4);
    return t3({ getSidebarProps: () => ({
      modelValue: p2,
      time: c3,
      updateTime: D3
    }) }), (M4, C2) => (openBlock(), createBlock(ln, {
      "multi-calendars": 0,
      stretch: ""
    }, {
      default: withCtx(() => [
        createVNode(Wa, mergeProps(M4.$props, {
          hours: unref(c3).hours,
          minutes: unref(c3).minutes,
          seconds: unref(c3).seconds,
          "internal-model-value": M4.internalModelValue,
          "disabled-times-config": unref(T4),
          "validate-time": unref(R4),
          "onUpdate:hours": C2[0] || (C2[0] = (A2) => unref(D3)(A2)),
          "onUpdate:minutes": C2[1] || (C2[1] = (A2) => unref(D3)(A2, false)),
          "onUpdate:seconds": C2[2] || (C2[2] = (A2) => unref(D3)(A2, false, true)),
          onAmPmChange: C2[3] || (C2[3] = (A2) => M4.$emit("am-pm-change", A2))
        }), createSlots({ _: 2 }, [
          renderList(unref(i3), (A2, q3) => ({
            name: A2,
            fn: withCtx((g2) => [
              renderSlot(M4.$slots, A2, normalizeProps(guardReactiveProps(g2)))
            ])
          }))
        ]), 1040, ["hours", "minutes", "seconds", "internal-model-value", "disabled-times-config", "validate-time"])
      ]),
      _: 3
    }));
  }
}), to = { class: "dp__month_year_row" }, no = ["aria-label", "onClick", "onKeydown"], ao = /* @__PURE__ */ defineComponent({
  compatConfig: {
    MODE: 3
  },
  __name: "DpHeader",
  props: {
    month: { type: Number, default: 0 },
    year: { type: Number, default: 0 },
    instance: { type: Number, default: 0 },
    years: { type: Array, default: () => [] },
    months: { type: Array, default: () => [] },
    ...tt$1
  },
  emits: ["update-month-year", "mount", "reset-flow", "overlay-closed"],
  setup(e3, { expose: t3, emit: r2 }) {
    const a4 = r2, n2 = e3, {
      defaultedTransitions: o2,
      defaultedAriaLabels: i3,
      defaultedMultiCalendars: c3,
      defaultedFilters: p2,
      defaultedConfig: T4,
      defaultedHighlight: D3
    } = Pe$1(n2), { transitionName: R4, showTransition: P2 } = Lt(o2), { buildMatrix: M4 } = yt$1(), { handleMonthYearChange: C2, isDisabled: A2, updateMonthYear: q3 } = vl(n2, a4), { showLeftIcon: g2, showRightIcon: S4 } = an(), F2 = ref(false), b4 = ref(false), _2 = ref([null, null, null, null]);
    onMounted(() => {
      a4("mount");
    });
    const X4 = (l2) => ({
      get: () => n2[l2],
      set: (h4) => {
        const s5 = l2 === Qe$1.month ? Qe$1.year : Qe$1.month;
        a4("update-month-year", { [l2]: h4, [s5]: n2[s5] }), l2 === Qe$1.month ? ne2(true) : O4(true);
      }
    }), ae2 = computed(X4(Qe$1.month)), V3 = computed(X4(Qe$1.year)), ie2 = computed(() => (l2) => ({
      month: n2.month,
      year: n2.year,
      items: l2 === Qe$1.month ? n2.months : n2.years,
      instance: n2.instance,
      updateMonthYear: q3,
      toggle: l2 === Qe$1.month ? ne2 : O4
    })), E3 = computed(() => {
      const l2 = n2.months.find((h4) => h4.value === n2.month);
      return l2 || { text: "", value: 0 };
    }), f2 = computed(() => Ct(n2.months, (l2) => {
      const h4 = n2.month === l2.value, s5 = Ht(
        l2.value,
        Oa(n2.year, n2.minDate),
        Ya(n2.year, n2.maxDate)
      ) || p2.value.months.includes(l2.value), J3 = Ha(D3.value, l2.value, n2.year);
      return { active: h4, disabled: s5, highlighted: J3 };
    })), w3 = computed(() => Ct(n2.years, (l2) => {
      const h4 = n2.year === l2.value, s5 = Ht(l2.value, _t(n2.minDate), _t(n2.maxDate)) || p2.value.years.includes(l2.value), J3 = Kn(D3.value, l2.value);
      return { active: h4, disabled: s5, highlighted: J3 };
    })), L3 = (l2, h4) => {
      h4 !== void 0 ? l2.value = h4 : l2.value = !l2.value, l2.value || a4("overlay-closed");
    }, ne2 = (l2 = false, h4) => {
      d4(l2), L3(F2, h4);
    }, O4 = (l2 = false, h4) => {
      d4(l2), L3(b4, h4);
    }, d4 = (l2) => {
      l2 || a4("reset-flow");
    }, Y3 = (l2, h4) => {
      n2.arrowNavigation && (_2.value[h4] = Re$2(l2), M4(_2.value, "monthYear"));
    }, Z3 = computed(() => {
      var l2, h4;
      return [
        {
          type: Qe$1.month,
          index: 1,
          toggle: ne2,
          modelValue: ae2.value,
          updateModelValue: (s5) => ae2.value = s5,
          text: E3.value.text,
          showSelectionGrid: F2.value,
          items: f2.value,
          ariaLabel: (l2 = i3.value) == null ? void 0 : l2.openMonthsOverlay
        },
        {
          type: Qe$1.year,
          index: 2,
          toggle: O4,
          modelValue: V3.value,
          updateModelValue: (s5) => V3.value = s5,
          text: n2.year,
          showSelectionGrid: b4.value,
          items: w3.value,
          ariaLabel: (h4 = i3.value) == null ? void 0 : h4.openYearsOverlay
        }
      ];
    }), y4 = computed(() => n2.disableYearSelect ? [Z3.value[0]] : n2.yearFirst ? [...Z3.value].reverse() : Z3.value);
    return t3({
      toggleMonthPicker: ne2,
      toggleYearPicker: O4,
      handleMonthYearChange: C2
    }), (l2, h4) => {
      var s5, J3, de2;
      return openBlock(), createElementBlock("div", to, [
        l2.$slots["month-year"] ? renderSlot(l2.$slots, "month-year", normalizeProps(mergeProps({ key: 0 }, { month: e3.month, year: e3.year, months: e3.months, years: e3.years, updateMonthYear: unref(q3), handleMonthYearChange: unref(C2), instance: e3.instance }))) : (openBlock(), createElementBlock(Fragment, { key: 1 }, [
          unref(g2)(unref(c3), e3.instance) && !l2.vertical ? (openBlock(), createBlock(It, {
            key: 0,
            "aria-label": (s5 = unref(i3)) == null ? void 0 : s5.prevMonth,
            disabled: unref(A2)(false),
            onActivate: h4[0] || (h4[0] = ($3) => unref(C2)(false, true)),
            onSetRef: h4[1] || (h4[1] = ($3) => Y3($3, 0))
          }, {
            default: withCtx(() => [
              l2.$slots["arrow-left"] ? renderSlot(l2.$slots, "arrow-left", { key: 0 }) : createCommentVNode("", true),
              l2.$slots["arrow-left"] ? createCommentVNode("", true) : (openBlock(), createBlock(unref(En), { key: 1 }))
            ]),
            _: 3
          }, 8, ["aria-label", "disabled"])) : createCommentVNode("", true),
          createBaseVNode("div", {
            class: normalizeClass(["dp__month_year_wrap", {
              dp__year_disable_select: l2.disableYearSelect
            }])
          }, [
            (openBlock(true), createElementBlock(Fragment, null, renderList(y4.value, ($3, u3) => (openBlock(), createElementBlock(Fragment, {
              key: $3.type
            }, [
              createBaseVNode("button", {
                ref_for: true,
                ref: (I3) => Y3(I3, u3 + 1),
                type: "button",
                class: "dp__btn dp__month_year_select",
                tabindex: "0",
                "aria-label": $3.ariaLabel,
                onClick: $3.toggle,
                onKeydown: [
                  withKeys(withModifiers($3.toggle, ["prevent"]), ["enter"]),
                  withKeys(withModifiers($3.toggle, ["prevent"]), ["space"])
                ]
              }, [
                l2.$slots[$3.type] ? renderSlot(l2.$slots, $3.type, {
                  key: 0,
                  text: $3.text,
                  value: n2[$3.type]
                }) : createCommentVNode("", true),
                l2.$slots[$3.type] ? createCommentVNode("", true) : (openBlock(), createElementBlock(Fragment, { key: 1 }, [
                  createTextVNode(toDisplayString$1($3.text), 1)
                ], 64))
              ], 40, no),
              createVNode(Transition, {
                name: unref(R4)($3.showSelectionGrid),
                css: unref(P2)
              }, {
                default: withCtx(() => [
                  $3.showSelectionGrid ? (openBlock(), createBlock(zt, {
                    key: 0,
                    items: $3.items,
                    "arrow-navigation": l2.arrowNavigation,
                    "hide-navigation": l2.hideNavigation,
                    "is-last": l2.autoApply && !unref(T4).keepActionRow,
                    "skip-button-ref": false,
                    config: l2.config,
                    type: $3.type,
                    "header-refs": [],
                    "esc-close": l2.escClose,
                    "text-input": l2.textInput,
                    onSelected: $3.updateModelValue,
                    onToggle: $3.toggle
                  }, createSlots({
                    "button-icon": withCtx(() => [
                      l2.$slots["calendar-icon"] ? renderSlot(l2.$slots, "calendar-icon", { key: 0 }) : createCommentVNode("", true),
                      l2.$slots["calendar-icon"] ? createCommentVNode("", true) : (openBlock(), createBlock(unref(Ot), { key: 1 }))
                    ]),
                    _: 2
                  }, [
                    l2.$slots[`${$3.type}-overlay-value`] ? {
                      name: "item",
                      fn: withCtx(({ item: I3 }) => [
                        renderSlot(l2.$slots, `${$3.type}-overlay-value`, {
                          text: I3.text,
                          value: I3.value
                        })
                      ]),
                      key: "0"
                    } : void 0,
                    l2.$slots[`${$3.type}-overlay`] ? {
                      name: "overlay",
                      fn: withCtx(() => [
                        renderSlot(l2.$slots, `${$3.type}-overlay`, normalizeProps(guardReactiveProps(ie2.value($3.type))))
                      ]),
                      key: "1"
                    } : void 0,
                    l2.$slots[`${$3.type}-overlay-header`] ? {
                      name: "header",
                      fn: withCtx(() => [
                        renderSlot(l2.$slots, `${$3.type}-overlay-header`, {
                          toggle: $3.toggle
                        })
                      ]),
                      key: "2"
                    } : void 0
                  ]), 1032, ["items", "arrow-navigation", "hide-navigation", "is-last", "config", "type", "esc-close", "text-input", "onSelected", "onToggle"])) : createCommentVNode("", true)
                ]),
                _: 2
              }, 1032, ["name", "css"])
            ], 64))), 128))
          ], 2),
          unref(g2)(unref(c3), e3.instance) && l2.vertical ? (openBlock(), createBlock(It, {
            key: 1,
            "aria-label": (J3 = unref(i3)) == null ? void 0 : J3.prevMonth,
            disabled: unref(A2)(false),
            onActivate: h4[2] || (h4[2] = ($3) => unref(C2)(false, true))
          }, {
            default: withCtx(() => [
              l2.$slots["arrow-up"] ? renderSlot(l2.$slots, "arrow-up", { key: 0 }) : createCommentVNode("", true),
              l2.$slots["arrow-up"] ? createCommentVNode("", true) : (openBlock(), createBlock(unref(Vn), { key: 1 }))
            ]),
            _: 3
          }, 8, ["aria-label", "disabled"])) : createCommentVNode("", true),
          unref(S4)(unref(c3), e3.instance) ? (openBlock(), createBlock(It, {
            key: 2,
            ref: "rightIcon",
            disabled: unref(A2)(true),
            "aria-label": (de2 = unref(i3)) == null ? void 0 : de2.nextMonth,
            onActivate: h4[3] || (h4[3] = ($3) => unref(C2)(true, true)),
            onSetRef: h4[4] || (h4[4] = ($3) => Y3($3, l2.disableYearSelect ? 2 : 3))
          }, {
            default: withCtx(() => [
              l2.$slots[l2.vertical ? "arrow-down" : "arrow-right"] ? renderSlot(l2.$slots, l2.vertical ? "arrow-down" : "arrow-right", { key: 0 }) : createCommentVNode("", true),
              l2.$slots[l2.vertical ? "arrow-down" : "arrow-right"] ? createCommentVNode("", true) : (openBlock(), createBlock(resolveDynamicComponent(l2.vertical ? unref(Ln) : unref(Fn)), { key: 1 }))
            ]),
            _: 3
          }, 8, ["disabled", "aria-label"])) : createCommentVNode("", true)
        ], 64))
      ]);
    };
  }
}), ro = ["aria-label"], lo = {
  class: "dp__calendar_header",
  role: "row"
}, oo = {
  key: 0,
  class: "dp__calendar_header_item",
  role: "gridcell"
}, so = /* @__PURE__ */ createBaseVNode("div", { class: "dp__calendar_header_separator" }, null, -1), io = ["aria-label"], uo = {
  key: 0,
  role: "gridcell",
  class: "dp__calendar_item dp__week_num"
}, co = { class: "dp__cell_inner" }, fo = ["id", "aria-selected", "aria-disabled", "aria-label", "onClick", "onKeydown", "onMouseenter", "onMouseleave"], vo = /* @__PURE__ */ defineComponent({
  compatConfig: {
    MODE: 3
  },
  __name: "DpCalendar",
  props: {
    mappedDates: { type: Array, default: () => [] },
    instance: { type: Number, default: 0 },
    month: { type: Number, default: 0 },
    year: { type: Number, default: 0 },
    ...tt$1
  },
  emits: [
    "select-date",
    "set-hover-date",
    "handle-scroll",
    "mount",
    "handle-swipe",
    "handle-space",
    "tooltip-open",
    "tooltip-close"
  ],
  setup(e3, { expose: t3, emit: r2 }) {
    const a4 = r2, n2 = e3, { buildMultiLevelMatrix: o2 } = yt$1(), {
      defaultedTransitions: i3,
      defaultedConfig: c3,
      defaultedAriaLabels: p2,
      defaultedMultiCalendars: T4,
      defaultedWeekNumbers: D3
    } = Pe$1(n2), R4 = ref(null), P2 = ref({
      bottom: "",
      left: "",
      transform: ""
    }), M4 = ref([]), C2 = ref(null), A2 = ref(true), q3 = ref(""), g2 = ref({ startX: 0, endX: 0, startY: 0, endY: 0 }), S4 = ref([]), F2 = ref({ left: "50%" }), b4 = computed(() => n2.calendar ? n2.calendar(n2.mappedDates) : n2.mappedDates), _2 = computed(() => n2.dayNames ? Array.isArray(n2.dayNames) ? n2.dayNames : n2.dayNames(n2.locale, +n2.weekStart) : Hr(n2.formatLocale, n2.locale, +n2.weekStart));
    onMounted(() => {
      a4("mount", { cmp: "calendar", refs: M4 }), c3.value.noSwipe || C2.value && (C2.value.addEventListener("touchstart", O4, { passive: false }), C2.value.addEventListener("touchend", d4, { passive: false }), C2.value.addEventListener("touchmove", Y3, { passive: false })), n2.monthChangeOnScroll && C2.value && C2.value.addEventListener("wheel", l2, { passive: false });
    });
    const X4 = ($3) => $3 ? n2.vertical ? "vNext" : "next" : n2.vertical ? "vPrevious" : "previous", ae2 = ($3, u3) => {
      if (n2.transitions) {
        const I3 = Fe$2(ot$1(B$1(), n2.month, n2.year));
        q3.value = Ee$1(Fe$2(ot$1(B$1(), $3, u3)), I3) ? i3.value[X4(true)] : i3.value[X4(false)], A2.value = false, nextTick(() => {
          A2.value = true;
        });
      }
    }, V3 = computed(
      () => ({
        [n2.calendarClassName]: !!n2.calendarClassName
      })
    ), ie2 = computed(() => ($3) => {
      const u3 = Lr($3);
      return {
        dp__marker_dot: u3.type === "dot",
        dp__marker_line: u3.type === "line"
      };
    }), E3 = computed(() => ($3) => ke$1($3, R4.value)), f2 = computed(() => ({
      dp__calendar: true,
      dp__calendar_next: T4.value.count > 0 && n2.instance !== 0
    })), w3 = computed(() => ($3) => n2.hideOffsetDates ? $3.current : true), L3 = async ($3, u3, I3) => {
      var Q3, K3;
      if (a4("set-hover-date", $3), (K3 = (Q3 = $3.marker) == null ? void 0 : Q3.tooltip) != null && K3.length) {
        const te2 = Re$2(M4.value[u3][I3]);
        if (te2) {
          const { width: le2, height: be3 } = te2.getBoundingClientRect();
          R4.value = $3.value;
          let N3 = { left: `${le2 / 2}px` }, U2 = -50;
          if (await nextTick(), S4.value[0]) {
            const { left: Me2, width: G3 } = S4.value[0].getBoundingClientRect();
            Me2 < 0 && (N3 = { left: "0" }, U2 = 0, F2.value.left = `${le2 / 2}px`), window.innerWidth < Me2 + G3 && (N3 = { right: "0" }, U2 = 0, F2.value.left = `${G3 - le2 / 2}px`);
          }
          P2.value = {
            bottom: `${be3}px`,
            ...N3,
            transform: `translateX(${U2}%)`
          }, a4("tooltip-open", $3.marker);
        }
      }
    }, ne2 = ($3) => {
      R4.value && (R4.value = null, P2.value = JSON.parse(JSON.stringify({ bottom: "", left: "", transform: "" })), a4("tooltip-close", $3.marker));
    }, O4 = ($3) => {
      g2.value.startX = $3.changedTouches[0].screenX, g2.value.startY = $3.changedTouches[0].screenY;
    }, d4 = ($3) => {
      g2.value.endX = $3.changedTouches[0].screenX, g2.value.endY = $3.changedTouches[0].screenY, Z3();
    }, Y3 = ($3) => {
      n2.vertical && !n2.inline && $3.preventDefault();
    }, Z3 = () => {
      const $3 = n2.vertical ? "Y" : "X";
      Math.abs(g2.value[`start${$3}`] - g2.value[`end${$3}`]) > 10 && a4("handle-swipe", g2.value[`start${$3}`] > g2.value[`end${$3}`] ? "right" : "left");
    }, y4 = ($3, u3, I3) => {
      $3 && (Array.isArray(M4.value[u3]) ? M4.value[u3][I3] = $3 : M4.value[u3] = [$3]), n2.arrowNavigation && o2(M4.value, "calendar");
    }, l2 = ($3) => {
      n2.monthChangeOnScroll && ($3.preventDefault(), a4("handle-scroll", $3));
    }, h4 = ($3) => D3.value.type === "local" ? getWeek($3.value, { weekStartsOn: +n2.weekStart }) : D3.value.type === "iso" ? getISOWeek($3.value) : typeof D3.value.type == "function" ? D3.value.type($3.value) : "", s5 = ($3) => {
      const u3 = $3[0];
      return D3.value.hideOnOffsetDates ? $3.some((I3) => I3.current) ? h4(u3) : "" : h4(u3);
    }, J3 = ($3, u3) => {
      ft$1($3, c3.value), a4("select-date", u3);
    }, de2 = ($3) => {
      ft$1($3, c3.value);
    };
    return t3({ triggerTransition: ae2 }), ($3, u3) => {
      var I3;
      return openBlock(), createElementBlock("div", {
        class: normalizeClass(f2.value)
      }, [
        createBaseVNode("div", {
          ref_key: "calendarWrapRef",
          ref: C2,
          role: "grid",
          class: normalizeClass(V3.value),
          "aria-label": (I3 = unref(p2)) == null ? void 0 : I3.calendarWrap
        }, [
          (openBlock(), createElementBlock(Fragment, { key: 0 }, [
            createBaseVNode("div", lo, [
              $3.weekNumbers ? (openBlock(), createElementBlock("div", oo, toDisplayString$1($3.weekNumName), 1)) : createCommentVNode("", true),
              (openBlock(true), createElementBlock(Fragment, null, renderList(_2.value, (Q3, K3) => (openBlock(), createElementBlock("div", {
                key: K3,
                class: "dp__calendar_header_item",
                role: "gridcell"
              }, [
                $3.$slots["calendar-header"] ? renderSlot($3.$slots, "calendar-header", {
                  key: 0,
                  day: Q3,
                  index: K3
                }) : createCommentVNode("", true),
                $3.$slots["calendar-header"] ? createCommentVNode("", true) : (openBlock(), createElementBlock(Fragment, { key: 1 }, [
                  createTextVNode(toDisplayString$1(Q3), 1)
                ], 64))
              ]))), 128))
            ]),
            so,
            createVNode(Transition, {
              name: q3.value,
              css: !!$3.transitions
            }, {
              default: withCtx(() => {
                var Q3;
                return [
                  A2.value ? (openBlock(), createElementBlock("div", {
                    key: 0,
                    class: "dp__calendar",
                    role: "rowgroup",
                    "aria-label": ((Q3 = unref(p2)) == null ? void 0 : Q3.calendarDays) || void 0
                  }, [
                    (openBlock(true), createElementBlock(Fragment, null, renderList(b4.value, (K3, te2) => (openBlock(), createElementBlock("div", {
                      key: te2,
                      class: "dp__calendar_row",
                      role: "row"
                    }, [
                      $3.weekNumbers ? (openBlock(), createElementBlock("div", uo, [
                        createBaseVNode("div", co, toDisplayString$1(s5(K3.days)), 1)
                      ])) : createCommentVNode("", true),
                      (openBlock(true), createElementBlock(Fragment, null, renderList(K3.days, (le2, be3) => {
                        var N3, U2, Me2;
                        return openBlock(), createElementBlock("div", {
                          id: le2.value.toISOString().split("T")[0],
                          ref_for: true,
                          ref: (G3) => y4(G3, te2, be3),
                          key: be3 + te2,
                          role: "gridcell",
                          class: "dp__calendar_item",
                          "aria-selected": le2.classData.dp__active_date || le2.classData.dp__range_start || le2.classData.dp__range_start,
                          "aria-disabled": le2.classData.dp__cell_disabled || void 0,
                          "aria-label": (U2 = (N3 = unref(p2)) == null ? void 0 : N3.day) == null ? void 0 : U2.call(N3, le2),
                          tabindex: "0",
                          onClick: withModifiers((G3) => J3(G3, le2), ["prevent"]),
                          onKeydown: [
                            withKeys((G3) => $3.$emit("select-date", le2), ["enter"]),
                            withKeys((G3) => $3.$emit("handle-space", le2), ["space"])
                          ],
                          onMouseenter: (G3) => L3(le2, te2, be3),
                          onMouseleave: (G3) => ne2(le2)
                        }, [
                          createBaseVNode("div", {
                            class: normalizeClass(["dp__cell_inner", le2.classData])
                          }, [
                            $3.$slots.day && w3.value(le2) ? renderSlot($3.$slots, "day", {
                              key: 0,
                              day: +le2.text,
                              date: le2.value
                            }) : createCommentVNode("", true),
                            $3.$slots.day ? createCommentVNode("", true) : (openBlock(), createElementBlock(Fragment, { key: 1 }, [
                              createTextVNode(toDisplayString$1(le2.text), 1)
                            ], 64)),
                            le2.marker && w3.value(le2) ? (openBlock(), createElementBlock(Fragment, { key: 2 }, [
                              $3.$slots.marker ? renderSlot($3.$slots, "marker", {
                                key: 0,
                                marker: le2.marker,
                                day: +le2.text,
                                date: le2.value
                              }) : (openBlock(), createElementBlock("div", {
                                key: 1,
                                class: normalizeClass(ie2.value(le2.marker)),
                                style: normalizeStyle(le2.marker.color ? { backgroundColor: le2.marker.color } : {})
                              }, null, 6))
                            ], 64)) : createCommentVNode("", true),
                            E3.value(le2.value) ? (openBlock(), createElementBlock("div", {
                              key: 3,
                              ref_for: true,
                              ref_key: "activeTooltip",
                              ref: S4,
                              class: "dp__marker_tooltip",
                              style: normalizeStyle(P2.value)
                            }, [
                              (Me2 = le2.marker) != null && Me2.tooltip ? (openBlock(), createElementBlock("div", {
                                key: 0,
                                class: "dp__tooltip_content",
                                onClick: de2
                              }, [
                                (openBlock(true), createElementBlock(Fragment, null, renderList(le2.marker.tooltip, (G3, We2) => (openBlock(), createElementBlock("div", {
                                  key: We2,
                                  class: "dp__tooltip_text"
                                }, [
                                  $3.$slots["marker-tooltip"] ? renderSlot($3.$slots, "marker-tooltip", {
                                    key: 0,
                                    tooltip: G3,
                                    day: le2.value
                                  }) : createCommentVNode("", true),
                                  $3.$slots["marker-tooltip"] ? createCommentVNode("", true) : (openBlock(), createElementBlock(Fragment, { key: 1 }, [
                                    createBaseVNode("div", {
                                      class: "dp__tooltip_mark",
                                      style: normalizeStyle(G3.color ? { backgroundColor: G3.color } : {})
                                    }, null, 4),
                                    createBaseVNode("div", null, toDisplayString$1(G3.text), 1)
                                  ], 64))
                                ]))), 128)),
                                createBaseVNode("div", {
                                  class: "dp__arrow_bottom_tp",
                                  style: normalizeStyle(F2.value)
                                }, null, 4)
                              ])) : createCommentVNode("", true)
                            ], 4)) : createCommentVNode("", true)
                          ], 2)
                        ], 40, fo);
                      }), 128))
                    ]))), 128))
                  ], 8, io)) : createCommentVNode("", true)
                ];
              }),
              _: 3
            }, 8, ["name", "css"])
          ], 64))
        ], 10, ro)
      ], 2);
    };
  }
}), ha = (e3) => Array.isArray(e3), mo = (e3, t3, r2, a4) => {
  const n2 = ref([]), { modelValue: o2, calendars: i3, time: c3 } = Ut(e3, t3), { defaultedMultiCalendars: p2, defaultedStartTime: T4 } = Pe$1(e3), { validateMonthYearInRange: D3, isDisabled: R4, isDateRangeAllowed: P2, checkMinMaxRange: M4 } = $t$1(e3), { updateTimeValues: C2, getSetDateTime: A2, setTime: q3, assignStartTime: g2, validateTime: S4, disabledTimesConfig: F2 } = ja(e3, c3, o2, a4), b4 = computed(
    () => (m4) => i3.value[m4] ? i3.value[m4].month : 0
  ), _2 = computed(
    () => (m4) => i3.value[m4] ? i3.value[m4].year : 0
  ), X4 = (m4, W2, oe3) => {
    var me2, Se3;
    i3.value[m4] || (i3.value[m4] = { month: 0, year: 0 }), i3.value[m4].month = fa(W2) ? (me2 = i3.value[m4]) == null ? void 0 : me2.month : W2, i3.value[m4].year = fa(oe3) ? (Se3 = i3.value[m4]) == null ? void 0 : Se3.year : oe3;
  }, ae2 = () => {
    e3.autoApply && t3("select-date");
  };
  watch(o2, (m4, W2) => {
    JSON.stringify(m4) !== JSON.stringify(W2) && E3();
  }), onMounted(() => {
    e3.shadow || (o2.value || (l2(), T4.value && g2(T4.value)), E3(true), e3.focusStartDate && e3.startDate && l2());
  });
  const V3 = computed(() => {
    var m4;
    return (m4 = e3.flow) != null && m4.length && !e3.partialFlow ? e3.flowStep === e3.flow.length : true;
  }), ie2 = () => {
    e3.autoApply && V3.value && t3("auto-apply", e3.partialFlow);
  }, E3 = (m4 = false) => {
    if (o2.value)
      return Array.isArray(o2.value) ? (n2.value = o2.value, d4(m4)) : w3(o2.value, m4);
    if (p2.value.count && m4 && !e3.startDate)
      return f2(B$1(), m4);
  }, f2 = (m4, W2 = false) => {
    if ((!p2.value.count || !p2.value.static || W2) && X4(0, getMonth(m4), getYear(m4)), p2.value.count && (!p2.value.solo || !o2.value))
      for (let oe3 = 1; oe3 < p2.value.count; oe3++) {
        const me2 = set(B$1(), { month: b4.value(oe3 - 1), year: _2.value(oe3 - 1) }), Se3 = add(me2, { months: 1 });
        i3.value[oe3] = { month: getMonth(Se3), year: getYear(Se3) };
      }
  }, w3 = (m4, W2) => {
    f2(m4), q3("hours", getHours(m4)), q3("minutes", getMinutes(m4)), q3("seconds", getSeconds(m4)), p2.value.count && W2 && y4();
  }, L3 = (m4) => {
    if (p2.value.count) {
      if (p2.value.solo)
        return 0;
      const W2 = getMonth(m4[0]), oe3 = getMonth(m4[1]);
      return Math.abs(oe3 - W2) < p2.value.count ? 0 : 1;
    }
    return 1;
  }, ne2 = (m4, W2) => {
    m4[1] && e3.showLastInRange ? f2(m4[L3(m4)], W2) : f2(m4[0], W2);
    const oe3 = (me2, Se3) => [
      me2(m4[0]),
      m4[1] ? me2(m4[1]) : c3[Se3][1]
    ];
    q3("hours", oe3(getHours, "hours")), q3("minutes", oe3(getMinutes, "minutes")), q3("seconds", oe3(getSeconds, "seconds"));
  }, O4 = (m4, W2) => {
    if ((e3.range || e3.weekPicker) && !e3.multiDates)
      return ne2(m4, W2);
    if (e3.multiDates && W2) {
      const oe3 = m4[m4.length - 1];
      return w3(oe3, W2);
    }
  }, d4 = (m4) => {
    const W2 = o2.value;
    O4(W2, m4), p2.value.count && p2.value.solo && y4();
  }, Y3 = (m4, W2) => {
    const oe3 = set(B$1(), { month: b4.value(W2), year: _2.value(W2) }), me2 = m4 < 0 ? addMonths(oe3, 1) : subMonths(oe3, 1);
    D3(getMonth(me2), getYear(me2), m4 < 0, e3.preventMinMaxNavigation) && (X4(W2, getMonth(me2), getYear(me2)), t3("update-month-year", { instance: W2, month: getMonth(me2), year: getYear(me2) }), p2.value.count && !p2.value.solo && Z3(W2), r2());
  }, Z3 = (m4) => {
    for (let W2 = m4 - 1; W2 >= 0; W2--) {
      const oe3 = subMonths(set(B$1(), { month: b4.value(W2 + 1), year: _2.value(W2 + 1) }), 1);
      X4(W2, getMonth(oe3), getYear(oe3));
    }
    for (let W2 = m4 + 1; W2 <= p2.value.count - 1; W2++) {
      const oe3 = addMonths(set(B$1(), { month: b4.value(W2 - 1), year: _2.value(W2 - 1) }), 1);
      X4(W2, getMonth(oe3), getYear(oe3));
    }
  }, y4 = () => {
    if (Array.isArray(o2.value) && o2.value.length === 2) {
      const m4 = B$1(
        B$1(o2.value[1] ? o2.value[1] : addMonths(o2.value[0], 1))
      ), [W2, oe3] = [getMonth(o2.value[0]), getYear(o2.value[0])], [me2, Se3] = [getMonth(o2.value[1]), getYear(o2.value[1])];
      (W2 !== me2 || W2 === me2 && oe3 !== Se3) && p2.value.solo && X4(1, getMonth(m4), getYear(m4));
    } else
      o2.value && !Array.isArray(o2.value) && (X4(0, getMonth(o2.value), getYear(o2.value)), f2(B$1()));
  }, l2 = () => {
    e3.startDate && (X4(0, getMonth(B$1(e3.startDate)), getYear(B$1(e3.startDate))), p2.value.count && Z3(0));
  }, h4 = Kr((m4, W2) => {
    e3.monthChangeOnScroll && Y3(e3.monthChangeOnScroll !== "inverse" ? -m4.deltaY : m4.deltaY, W2);
  }, 50), s5 = (m4, W2, oe3 = false) => {
    e3.monthChangeOnArrows && e3.vertical === oe3 && J3(m4, W2);
  }, J3 = (m4, W2) => {
    Y3(m4 === "right" ? -1 : 1, W2);
  }, de2 = (m4) => e3.markers.find(
    (W2) => ke$1(Zr(m4.value), et$1(B$1(W2.date), e3.timezone))
  ), $3 = (m4, W2) => {
    switch (e3.sixWeeks === true ? "append" : e3.sixWeeks) {
      case "prepend":
        return [true, false];
      case "center":
        return [m4 == 0, true];
      case "fair":
        return [m4 == 0 || W2 > m4, true];
      case "append":
        return [false, false];
      default:
        return [false, false];
    }
  }, u3 = (m4, W2, oe3, me2) => {
    if (e3.sixWeeks && m4.length < 6) {
      const Se3 = 6 - m4.length, nt2 = (W2.getDay() + 7 - me2) % 7, ue3 = 6 - (oe3.getDay() + 7 - me2) % 7, [se, ht2] = $3(nt2, ue3);
      for (let Ke2 = 1; Ke2 <= Se3; Ke2++)
        if (ht2 ? !!(Ke2 % 2) == se : se) {
          const Gt2 = m4[0].days[0], cn2 = I3(addDays(Gt2.value, -7), getMonth(W2));
          m4.unshift({ days: cn2 });
        } else {
          const Gt2 = m4[m4.length - 1], cn2 = Gt2.days[Gt2.days.length - 1], Ga2 = I3(addDays(cn2.value, 1), getMonth(W2));
          m4.push({ days: Ga2 });
        }
    }
    return m4;
  }, I3 = (m4, W2) => {
    const oe3 = B$1(m4), me2 = [];
    for (let Se3 = 0; Se3 < 7; Se3++) {
      const nt2 = addDays(oe3, Se3), x3 = getMonth(nt2) !== W2;
      me2.push({
        text: e3.hideOffsetDates && x3 ? "" : nt2.getDate(),
        value: nt2,
        current: !x3,
        classData: {}
      });
    }
    return me2;
  }, Q3 = (m4, W2) => {
    const oe3 = [], me2 = new Date(W2, m4), Se3 = new Date(W2, m4 + 1, 0), nt2 = e3.weekStart, x3 = startOfWeek(me2, { weekStartsOn: nt2 }), ue3 = (se) => {
      const ht2 = I3(se, m4);
      if (oe3.push({ days: ht2 }), !oe3[oe3.length - 1].days.some(
        (Ke2) => ke$1(Fe$2(Ke2.value), Fe$2(Se3))
      )) {
        const Ke2 = addDays(se, 7);
        ue3(Ke2);
      }
    };
    return ue3(x3), u3(oe3, me2, Se3, nt2);
  }, K3 = (m4) => (o2.value = xt(B$1(m4.value), e3.timezone, e3.weekStart), t3("date-update", m4.value), ie2()), te2 = (m4) => {
    const W2 = vt$1(B$1(m4.value), c3.hours, c3.minutes, je3());
    t3("date-update", W2), e3.multiDates ? Gn(W2, o2, e3.multiDatesLimit) : o2.value = W2, a4(), nextTick().then(() => {
      ie2();
    });
  }, le2 = (m4) => e3.noDisabledRange ? Ia(n2.value[0], m4).some((oe3) => R4(oe3)) : false, be3 = () => {
    n2.value = o2.value ? o2.value.slice() : [], n2.value.length === 2 && !(e3.fixedStart || e3.fixedEnd) && (n2.value = []);
  }, N3 = (m4, W2) => {
    const oe3 = [B$1(m4.value), addDays(B$1(m4.value), +e3.autoRange)];
    P2(oe3) ? (W2 && U2(m4.value), n2.value = oe3) : t3("invalid-date", m4.value);
  }, U2 = (m4) => {
    const W2 = getMonth(B$1(m4)), oe3 = getYear(B$1(m4));
    if (X4(0, W2, oe3), p2.value.count > 0)
      for (let me2 = 1; me2 < p2.value.count; me2++) {
        const Se3 = Qr(
          set(B$1(m4), { year: b4.value(me2 - 1), month: _2.value(me2 - 1) })
        );
        X4(me2, Se3.month, Se3.year);
      }
  }, Me2 = (m4) => Array.isArray(o2.value) && o2.value.length === 2 ? e3.fixedStart && (Ee$1(m4, o2.value[0]) || ke$1(m4, o2.value[0])) ? [o2.value[0], m4] : e3.fixedEnd && (Ye$2(m4, o2.value[1]) || ke$1(m4, o2.value[1])) ? [m4, o2.value[1]] : (t3("invalid-fixed-range", m4), o2.value) : [], G3 = (m4) => {
    if (le2(m4.value) || !M4(m4.value, o2.value, e3.fixedStart ? 0 : 1))
      return t3("invalid-date", m4.value);
    n2.value = Me2(B$1(m4.value));
  }, We2 = (m4, W2) => {
    if (be3(), e3.autoRange)
      return N3(m4, W2);
    if (e3.fixedStart || e3.fixedEnd)
      return G3(m4);
    n2.value[0] ? M4(B$1(m4.value), o2.value) && !le2(m4.value) ? Ye$2(B$1(m4.value), B$1(n2.value[0])) ? (n2.value.unshift(B$1(m4.value)), t3("range-end", n2.value[0])) : (n2.value[1] = B$1(m4.value), t3("range-end", n2.value[1])) : (e3.autoApply && t3("auto-apply-invalid", m4.value), t3("invalid-date", m4.value)) : (n2.value[0] = B$1(m4.value), t3("range-start", n2.value[0]));
  }, je3 = (m4 = true) => e3.enableSeconds ? Array.isArray(c3.seconds) ? m4 ? c3.seconds[0] : c3.seconds[1] : c3.seconds : 0, it3 = (m4) => {
    n2.value[m4] = vt$1(
      n2.value[m4],
      c3.hours[m4],
      c3.minutes[m4],
      je3(m4 !== 1)
    );
  }, Wt2 = () => {
    var m4, W2;
    n2.value[0] && n2.value[1] && +((m4 = n2.value) == null ? void 0 : m4[0]) > +((W2 = n2.value) == null ? void 0 : W2[1]) && (n2.value.reverse(), t3("range-start", n2.value[0]), t3("range-end", n2.value[1]));
  }, jt2 = () => {
    n2.value.length && (n2.value[0] && !n2.value[1] ? it3(0) : (it3(0), it3(1), a4()), Wt2(), o2.value = n2.value.slice(), on(n2.value, t3, e3.autoApply, e3.modelAuto));
  }, sn2 = (m4, W2 = false) => {
    if (R4(m4.value) || !m4.current && e3.hideOffsetDates)
      return t3("invalid-date", m4.value);
    if (e3.weekPicker)
      return K3(m4);
    if (!e3.range)
      return te2(m4);
    ha(c3.hours) && ha(c3.minutes) && !e3.multiDates && (We2(m4, W2), jt2());
  }, Yt2 = (m4, W2) => {
    var me2;
    X4(m4, W2.month, W2.year), p2.value.count && !p2.value.solo && Z3(m4), t3("update-month-year", { instance: m4, month: W2.month, year: W2.year }), r2(p2.value.solo ? m4 : void 0);
    const oe3 = (me2 = e3.flow) != null && me2.length ? e3.flow[e3.flowStep] : void 0;
    !W2.fromNav && (oe3 === at$1.month || oe3 === at$1.year) && a4();
  }, Ze2 = (m4, W2) => {
    Ua({ value: m4, modelValue: o2, range: e3.range, timezone: W2 ? void 0 : e3.timezone }), ae2(), e3.multiCalendars && nextTick().then(() => E3(true));
  }, un2 = () => {
    e3.range ? o2.value && Array.isArray(o2.value) && o2.value[0] ? o2.value = Ye$2(B$1(), o2.value[0]) ? [B$1(), o2.value[0]] : [o2.value[0], B$1()] : o2.value = [B$1()] : o2.value = B$1(), ae2();
  }, dn2 = () => {
    if (Array.isArray(o2.value))
      if (e3.multiDates) {
        const m4 = Kt2();
        o2.value[o2.value.length - 1] = A2(m4);
      } else
        o2.value = o2.value.map((m4, W2) => m4 && A2(m4, W2));
    else
      o2.value = A2(o2.value);
    t3("time-update");
  }, Kt2 = () => Array.isArray(o2.value) && o2.value.length ? o2.value[o2.value.length - 1] : null;
  return {
    calendars: i3,
    modelValue: o2,
    month: b4,
    year: _2,
    time: c3,
    disabledTimesConfig: F2,
    validateTime: S4,
    getCalendarDays: Q3,
    getMarker: de2,
    handleScroll: h4,
    handleSwipe: J3,
    handleArrow: s5,
    selectDate: sn2,
    updateMonthYear: Yt2,
    presetDate: Ze2,
    selectCurrentDate: un2,
    updateTime: (m4, W2 = true, oe3 = false) => {
      C2(m4, W2, oe3, dn2);
    }
  };
}, go = { key: 0 }, yo = /* @__PURE__ */ defineComponent({
  __name: "DatePicker",
  props: {
    ...tt$1
  },
  emits: [
    "tooltip-open",
    "tooltip-close",
    "mount",
    "update:internal-model-value",
    "update-flow-step",
    "reset-flow",
    "auto-apply",
    "focus-menu",
    "select-date",
    "range-start",
    "range-end",
    "invalid-fixed-range",
    "time-update",
    "am-pm-change",
    "time-picker-open",
    "time-picker-close",
    "recalculate-position",
    "update-month-year",
    "auto-apply-invalid",
    "date-update",
    "invalid-date"
  ],
  setup(e3, { expose: t3, emit: r2 }) {
    const a4 = r2, n2 = e3, {
      calendars: o2,
      month: i3,
      year: c3,
      modelValue: p2,
      time: T4,
      disabledTimesConfig: D3,
      validateTime: R4,
      getCalendarDays: P2,
      getMarker: M4,
      handleArrow: C2,
      handleScroll: A2,
      handleSwipe: q3,
      selectDate: g2,
      updateMonthYear: S4,
      presetDate: F2,
      selectCurrentDate: b4,
      updateTime: _2
    } = mo(n2, a4, y4, l2), X4 = useSlots(), { setHoverDate: ae2, getDayClassData: V3, clearHoverDate: ie2 } = hl(p2, n2), { defaultedMultiCalendars: E3 } = Pe$1(n2), f2 = ref([]), w3 = ref([]), L3 = ref(null), ne2 = qe$1(X4, "calendar"), O4 = qe$1(X4, "monthYear"), d4 = qe$1(X4, "timePicker"), Y3 = (u3) => {
      n2.shadow || a4("mount", u3);
    };
    watch(
      o2,
      () => {
        n2.shadow || setTimeout(() => {
          a4("recalculate-position");
        }, 0);
      },
      { deep: true }
    );
    const Z3 = computed(() => (u3) => P2(i3.value(u3), c3.value(u3)).map((I3) => ({
      ...I3,
      days: I3.days.map((Q3) => (Q3.marker = M4(Q3), Q3.classData = V3(Q3), Q3))
    })));
    function y4(u3) {
      var I3;
      u3 || u3 === 0 ? (I3 = w3.value[u3]) == null || I3.triggerTransition(i3.value(u3), c3.value(u3)) : w3.value.forEach((Q3, K3) => Q3.triggerTransition(i3.value(K3), c3.value(K3)));
    }
    function l2() {
      a4("update-flow-step");
    }
    const h4 = (u3, I3 = false) => {
      g2(u3, I3), n2.spaceConfirm && a4("select-date");
    };
    return t3({
      clearHoverDate: ie2,
      presetDate: F2,
      selectCurrentDate: b4,
      toggleMonthPicker: (u3, I3, Q3 = 0) => {
        var K3;
        (K3 = f2.value[Q3]) == null || K3.toggleMonthPicker(u3, I3);
      },
      toggleYearPicker: (u3, I3, Q3 = 0) => {
        var K3;
        (K3 = f2.value[Q3]) == null || K3.toggleYearPicker(u3, I3);
      },
      toggleTimePicker: (u3, I3, Q3) => {
        var K3;
        (K3 = L3.value) == null || K3.toggleTimePicker(u3, I3, Q3);
      },
      handleArrow: C2,
      updateMonthYear: S4,
      getSidebarProps: () => ({
        modelValue: p2,
        month: i3,
        year: c3,
        time: T4,
        updateTime: _2,
        updateMonthYear: S4,
        selectDate: g2,
        presetDate: F2
      })
    }), (u3, I3) => (openBlock(), createElementBlock(Fragment, null, [
      createVNode(ln, {
        "multi-calendars": unref(E3).count
      }, {
        default: withCtx(({ instance: Q3, index: K3 }) => [
          u3.disableMonthYearSelect ? createCommentVNode("", true) : (openBlock(), createBlock(ao, mergeProps({
            key: 0,
            ref: (te2) => {
              te2 && (f2.value[K3] = te2);
            },
            months: unref(_a)(u3.formatLocale, u3.locale, u3.monthNameFormat),
            years: unref(jn)(u3.yearRange, u3.reverseYears),
            month: unref(i3)(Q3),
            year: unref(c3)(Q3),
            instance: Q3
          }, u3.$props, {
            onMount: I3[0] || (I3[0] = (te2) => Y3(unref(Dt).header)),
            onResetFlow: I3[1] || (I3[1] = (te2) => u3.$emit("reset-flow")),
            onUpdateMonthYear: (te2) => unref(S4)(Q3, te2),
            onOverlayClosed: I3[2] || (I3[2] = (te2) => u3.$emit("focus-menu"))
          }), createSlots({ _: 2 }, [
            renderList(unref(O4), (te2, le2) => ({
              name: te2,
              fn: withCtx((be3) => [
                renderSlot(u3.$slots, te2, normalizeProps(guardReactiveProps(be3)))
              ])
            }))
          ]), 1040, ["months", "years", "month", "year", "instance", "onUpdateMonthYear"])),
          createVNode(vo, mergeProps({
            ref: (te2) => {
              te2 && (w3.value[K3] = te2);
            },
            "mapped-dates": Z3.value(Q3),
            month: unref(i3)(Q3),
            year: unref(c3)(Q3),
            instance: Q3
          }, u3.$props, {
            onSelectDate: (te2) => unref(g2)(te2, Q3 !== 1),
            onHandleSpace: (te2) => h4(te2, Q3 !== 1),
            onSetHoverDate: I3[3] || (I3[3] = (te2) => unref(ae2)(te2)),
            onHandleScroll: (te2) => unref(A2)(te2, Q3),
            onHandleSwipe: (te2) => unref(q3)(te2, Q3),
            onMount: I3[4] || (I3[4] = (te2) => Y3(unref(Dt).calendar)),
            onResetFlow: I3[5] || (I3[5] = (te2) => u3.$emit("reset-flow")),
            onTooltipOpen: I3[6] || (I3[6] = (te2) => u3.$emit("tooltip-open", te2)),
            onTooltipClose: I3[7] || (I3[7] = (te2) => u3.$emit("tooltip-close", te2))
          }), createSlots({ _: 2 }, [
            renderList(unref(ne2), (te2, le2) => ({
              name: te2,
              fn: withCtx((be3) => [
                renderSlot(u3.$slots, te2, normalizeProps(guardReactiveProps({ ...be3 })))
              ])
            }))
          ]), 1040, ["mapped-dates", "month", "year", "instance", "onSelectDate", "onHandleSpace", "onHandleScroll", "onHandleSwipe"])
        ]),
        _: 3
      }, 8, ["multi-calendars"]),
      u3.enableTimePicker ? (openBlock(), createElementBlock("div", go, [
        u3.$slots["time-picker"] ? renderSlot(u3.$slots, "time-picker", normalizeProps(mergeProps({ key: 0 }, { time: unref(T4), updateTime: unref(_2) }))) : (openBlock(), createBlock(Wa, mergeProps({
          key: 1,
          ref_key: "timePickerRef",
          ref: L3
        }, u3.$props, {
          hours: unref(T4).hours,
          minutes: unref(T4).minutes,
          seconds: unref(T4).seconds,
          "internal-model-value": u3.internalModelValue,
          "disabled-times-config": unref(D3),
          "validate-time": unref(R4),
          onMount: I3[8] || (I3[8] = (Q3) => Y3(unref(Dt).timePicker)),
          "onUpdate:hours": I3[9] || (I3[9] = (Q3) => unref(_2)(Q3)),
          "onUpdate:minutes": I3[10] || (I3[10] = (Q3) => unref(_2)(Q3, false)),
          "onUpdate:seconds": I3[11] || (I3[11] = (Q3) => unref(_2)(Q3, false, true)),
          onResetFlow: I3[12] || (I3[12] = (Q3) => u3.$emit("reset-flow")),
          onOverlayClosed: I3[13] || (I3[13] = (Q3) => u3.$emit("time-picker-close")),
          onOverlayOpened: I3[14] || (I3[14] = (Q3) => u3.$emit("time-picker-open", Q3)),
          onAmPmChange: I3[15] || (I3[15] = (Q3) => u3.$emit("am-pm-change", Q3))
        }), createSlots({ _: 2 }, [
          renderList(unref(d4), (Q3, K3) => ({
            name: Q3,
            fn: withCtx((te2) => [
              renderSlot(u3.$slots, Q3, normalizeProps(guardReactiveProps(te2)))
            ])
          }))
        ]), 1040, ["hours", "minutes", "seconds", "internal-model-value", "disabled-times-config", "validate-time"]))
      ])) : createCommentVNode("", true)
    ], 64));
  }
}), ho = (e3, t3) => {
  const r2 = ref(), { defaultedMultiCalendars: a4, defaultedConfig: n2, defaultedHighlight: o2 } = Pe$1(e3), { modelValue: i3, year: c3, month: p2, calendars: T4 } = Ut(e3, t3), { isDisabled: D3 } = $t$1(e3), { selectYear: R4, groupedYears: P2, showYearPicker: M4, isDisabled: C2, toggleYearPicker: A2, handleYearSelect: q3, handleYear: g2 } = za({
    modelValue: i3,
    multiCalendars: a4,
    highlight: o2,
    calendars: T4,
    month: p2,
    year: c3,
    props: e3,
    emit: t3
  }), S4 = (f2, w3) => [f2, w3].map((L3) => format$2(L3, "MMMM", { locale: e3.formatLocale })).join("-"), F2 = computed(() => (f2) => i3.value ? Array.isArray(i3.value) ? i3.value.some((w3) => isSameQuarter(f2, w3)) : isSameQuarter(i3.value, f2) : false), b4 = (f2) => {
    if (e3.range) {
      if (Array.isArray(i3.value)) {
        const w3 = ke$1(f2, i3.value[0]) || ke$1(f2, i3.value[1]);
        return nn(i3.value, r2.value, f2) && !w3;
      }
      return false;
    }
    return false;
  }, _2 = computed(() => (f2) => {
    const w3 = set(/* @__PURE__ */ new Date(), { year: c3.value(f2) });
    return eachQuarterOfInterval({
      start: startOfYear(w3),
      end: endOfYear(w3)
    }).map((L3) => {
      const ne2 = startOfQuarter(L3), O4 = endOfQuarter(L3), d4 = D3(L3), Y3 = b4(ne2), Z3 = typeof o2.value == "function" ? o2.value({ quarter: getQuarter(ne2), year: getYear(ne2) }) : !!o2.value.quarters.find(
        (y4) => y4.quarter === getQuarter(ne2) && y4.year === getYear(ne2)
      );
      return {
        text: S4(ne2, O4),
        value: ne2,
        active: F2.value(ne2),
        highlighted: Z3,
        disabled: d4,
        isBetween: Y3
      };
    });
  }), X4 = (f2) => {
    Gn(f2, i3, e3.multiDatesLimit), t3("auto-apply", true);
  }, ae2 = (f2) => {
    const w3 = qn(i3, f2, t3);
    on(w3, t3, e3.autoApply, e3.modelAuto);
  }, V3 = (f2) => {
    i3.value = f2, t3("auto-apply");
  };
  return {
    defaultedConfig: n2,
    defaultedMultiCalendars: a4,
    groupedYears: P2,
    year: c3,
    isDisabled: C2,
    quarters: _2,
    showYearPicker: M4,
    modelValue: i3,
    setHoverDate: (f2) => {
      r2.value = f2;
    },
    selectYear: R4,
    selectQuarter: (f2, w3, L3) => {
      if (!L3)
        return T4.value[w3].month = getMonth(endOfQuarter(f2)), e3.multiDates ? X4(f2) : e3.range ? ae2(f2) : V3(f2);
    },
    toggleYearPicker: A2,
    handleYearSelect: q3,
    handleYear: g2
  };
}, po = { class: "dp--quarter-items" }, bo = ["disabled", "onClick", "onMouseover"], ko = /* @__PURE__ */ defineComponent({
  compatConfig: {
    MODE: 3
  },
  __name: "QuarterPicker",
  props: {
    ...tt$1
  },
  emits: [
    "update:internal-model-value",
    "reset-flow",
    "overlay-closed",
    "auto-apply",
    "range-start",
    "range-end"
  ],
  setup(e3, { expose: t3, emit: r2 }) {
    const a4 = r2, n2 = e3, o2 = useSlots(), i3 = qe$1(o2, "yearMode"), {
      defaultedMultiCalendars: c3,
      defaultedConfig: p2,
      groupedYears: T4,
      year: D3,
      isDisabled: R4,
      quarters: P2,
      modelValue: M4,
      showYearPicker: C2,
      setHoverDate: A2,
      selectQuarter: q3,
      toggleYearPicker: g2,
      handleYearSelect: S4,
      handleYear: F2
    } = ho(n2, a4);
    return t3({ getSidebarProps: () => ({
      modelValue: M4,
      year: D3,
      selectQuarter: q3,
      handleYearSelect: S4,
      handleYear: F2
    }) }), (_2, X4) => (openBlock(), createBlock(ln, {
      "multi-calendars": unref(c3).count,
      stretch: ""
    }, {
      default: withCtx(({ instance: ae2 }) => [
        createBaseVNode("div", {
          class: "dp-quarter-picker-wrap",
          style: normalizeStyle({ minHeight: `${unref(p2).modeHeight}px` })
        }, [
          createBaseVNode("div", null, [
            createVNode(La, mergeProps(_2.$props, {
              items: unref(T4)(ae2),
              instance: ae2,
              "show-year-picker": unref(C2)[ae2],
              year: unref(D3)(ae2),
              "is-disabled": (V3) => unref(R4)(ae2, V3),
              onHandleYear: (V3) => unref(F2)(ae2, V3),
              onYearSelect: (V3) => unref(S4)(V3, ae2),
              onToggleYearPicker: (V3) => unref(g2)(ae2, V3 == null ? void 0 : V3.flow, V3 == null ? void 0 : V3.show)
            }), createSlots({ _: 2 }, [
              renderList(unref(i3), (V3, ie2) => ({
                name: V3,
                fn: withCtx((E3) => [
                  renderSlot(_2.$slots, V3, normalizeProps(guardReactiveProps(E3)))
                ])
              }))
            ]), 1040, ["items", "instance", "show-year-picker", "year", "is-disabled", "onHandleYear", "onYearSelect", "onToggleYearPicker"])
          ]),
          createBaseVNode("div", po, [
            (openBlock(true), createElementBlock(Fragment, null, renderList(unref(P2)(ae2), (V3, ie2) => (openBlock(), createElementBlock("div", { key: ie2 }, [
              createBaseVNode("button", {
                type: "button",
                class: normalizeClass(["dp--qr-btn", {
                  "dp--qr-btn-active": V3.active,
                  "dp--qr-btn-between": V3.isBetween,
                  "dp--qr-btn-disabled": V3.disabled,
                  "dp--highlighted": V3.highlighted
                }]),
                disabled: V3.disabled,
                onClick: (E3) => unref(q3)(V3.value, ae2, V3.disabled),
                onMouseover: (E3) => unref(A2)(V3.value)
              }, [
                _2.$slots.quarter ? renderSlot(_2.$slots, "quarter", {
                  key: 0,
                  value: V3.value,
                  text: V3.text
                }) : (openBlock(), createElementBlock(Fragment, { key: 1 }, [
                  createTextVNode(toDisplayString$1(V3.text), 1)
                ], 64))
              ], 42, bo)
            ]))), 128))
          ])
        ], 4)
      ]),
      _: 3
    }, 8, ["multi-calendars"]));
  }
}), wo = ["id"], Do = {
  key: 0,
  class: "dp__sidebar_left"
}, Mo = {
  key: 1,
  class: "dp--preset-dates"
}, $o = ["onClick", "onKeydown"], To = {
  key: 2,
  class: "dp__sidebar_right"
}, Ao = {
  key: 3,
  class: "dp__action_extra"
}, pa = /* @__PURE__ */ defineComponent({
  compatConfig: {
    MODE: 3
  },
  __name: "DatepickerMenu",
  props: {
    ...rn,
    shadow: { type: Boolean, default: false },
    openOnTop: { type: Boolean, default: false },
    internalModelValue: { type: [Date, Array], default: null },
    arrMapValues: { type: Object, default: () => ({}) },
    noOverlayFocus: { type: Boolean, default: false }
  },
  emits: [
    "close-picker",
    "select-date",
    "auto-apply",
    "time-update",
    "flow-step",
    "update-month-year",
    "invalid-select",
    "update:internal-model-value",
    "recalculate-position",
    "invalid-fixed-range",
    "tooltip-open",
    "tooltip-close",
    "time-picker-open",
    "time-picker-close",
    "am-pm-change",
    "range-start",
    "range-end",
    "auto-apply-invalid",
    "date-update",
    "invalid-date"
  ],
  setup(e3, { expose: t3, emit: r2 }) {
    const a4 = r2, n2 = e3, o2 = computed(() => {
      const { openOnTop: N3, ...U2 } = n2;
      return {
        ...U2,
        flowStep: V3.value,
        noOverlayFocus: n2.noOverlayFocus
      };
    }), { setMenuFocused: i3, setShiftKey: c3, control: p2 } = Va(), T4 = useSlots(), { defaultedTextInput: D3, defaultedInline: R4, defaultedConfig: P2 } = Pe$1(n2), M4 = ref(null), C2 = ref(0), A2 = ref(null), q3 = ref(null), g2 = ref(false), S4 = ref(null);
    onMounted(() => {
      if (!n2.shadow) {
        g2.value = true, F2(), window.addEventListener("resize", F2);
        const N3 = Re$2(A2);
        if (N3 && !D3.value.enabled && !R4.value.enabled && (i3(true), L3()), N3) {
          const U2 = (Me2) => {
            P2.value.allowPreventDefault && Me2.preventDefault(), ft$1(Me2, P2.value, true);
          };
          N3.addEventListener("pointerdown", U2), N3.addEventListener("mousedown", U2);
        }
      }
    }), onUnmounted(() => {
      window.removeEventListener("resize", F2);
    });
    const F2 = () => {
      const N3 = Re$2(q3);
      N3 && (C2.value = N3.getBoundingClientRect().width);
    }, { arrowRight: b4, arrowLeft: _2, arrowDown: X4, arrowUp: ae2 } = yt$1(), { flowStep: V3, updateFlowStep: ie2, childMount: E3, resetFlow: f2 } = pl(n2, a4, S4), w3 = computed(() => n2.monthPicker ? Il : n2.yearPicker ? El : n2.timePicker ? eo : n2.quarterPicker ? ko : yo), L3 = () => {
      const N3 = Re$2(A2);
      N3 && N3.focus({ preventScroll: true });
    }, ne2 = computed(() => {
      var N3;
      return ((N3 = S4.value) == null ? void 0 : N3.getSidebarProps()) || {};
    }), O4 = () => {
      n2.openOnTop && a4("recalculate-position");
    }, d4 = qe$1(T4, "action"), Y3 = computed(() => n2.monthPicker || n2.yearPicker ? qe$1(T4, "monthYear") : n2.timePicker ? qe$1(T4, "timePicker") : qe$1(T4, "shared")), Z3 = computed(() => n2.openOnTop ? "dp__arrow_bottom" : "dp__arrow_top"), y4 = computed(() => ({
      dp__menu_disabled: n2.disabled,
      dp__menu_readonly: n2.readonly
    })), l2 = computed(
      () => ({
        dp__menu: true,
        dp__menu_index: !R4.value.enabled,
        dp__relative: R4.value.enabled,
        [n2.menuClassName]: !!n2.menuClassName
      })
    ), h4 = (N3) => {
      ft$1(N3, P2.value, true);
    }, s5 = () => {
      n2.escClose && a4("close-picker");
    }, J3 = (N3) => {
      if (n2.arrowNavigation) {
        if (N3 === "up")
          return ae2();
        if (N3 === "down")
          return X4();
        if (N3 === "left")
          return _2();
        if (N3 === "right")
          return b4();
      } else
        N3 === "left" || N3 === "up" ? Q3("handleArrow", "left", 0, N3 === "up") : Q3("handleArrow", "right", 0, N3 === "down");
    }, de2 = (N3) => {
      c3(N3.shiftKey), !n2.disableMonthYearSelect && N3.code === "Tab" && N3.target.classList.contains("dp__menu") && p2.value.shiftKeyInMenu && (N3.preventDefault(), ft$1(N3, P2.value, true), a4("close-picker"));
    }, $3 = () => {
      L3(), a4("time-picker-close");
    }, u3 = (N3) => {
      var U2, Me2, G3;
      (U2 = S4.value) == null || U2.toggleTimePicker(false, false), (Me2 = S4.value) == null || Me2.toggleMonthPicker(false, false, N3), (G3 = S4.value) == null || G3.toggleYearPicker(false, false, N3);
    }, I3 = (N3, U2 = 0) => {
      var Me2, G3, We2;
      return N3 === "month" ? (Me2 = S4.value) == null ? void 0 : Me2.toggleMonthPicker(false, true, U2) : N3 === "year" ? (G3 = S4.value) == null ? void 0 : G3.toggleYearPicker(false, true, U2) : N3 === "time" ? (We2 = S4.value) == null ? void 0 : We2.toggleTimePicker(true, false) : u3(U2);
    }, Q3 = (N3, ...U2) => {
      var Me2, G3;
      (Me2 = S4.value) != null && Me2[N3] && ((G3 = S4.value) == null || G3[N3](...U2));
    }, K3 = () => {
      Q3("selectCurrentDate");
    }, te2 = (N3, U2) => {
      Q3("presetDate", N3, U2);
    }, le2 = () => {
      Q3("clearHoverDate");
    };
    return t3({
      updateMonthYear: (N3, U2) => {
        Q3("updateMonthYear", N3, U2);
      },
      switchView: I3
    }), (N3, U2) => {
      var Me2;
      return openBlock(), createElementBlock("div", {
        id: N3.uid ? `dp-menu-${N3.uid}` : void 0,
        ref_key: "dpMenuRef",
        ref: A2,
        tabindex: "0",
        role: "dialog",
        class: normalizeClass(l2.value),
        onMouseleave: le2,
        onClick: h4,
        onKeydown: [
          withKeys(s5, ["esc"]),
          U2[18] || (U2[18] = withKeys(withModifiers((G3) => J3("left"), ["prevent"]), ["left"])),
          U2[19] || (U2[19] = withKeys(withModifiers((G3) => J3("up"), ["prevent"]), ["up"])),
          U2[20] || (U2[20] = withKeys(withModifiers((G3) => J3("down"), ["prevent"]), ["down"])),
          U2[21] || (U2[21] = withKeys(withModifiers((G3) => J3("right"), ["prevent"]), ["right"])),
          de2
        ]
      }, [
        (N3.disabled || N3.readonly) && unref(R4).enabled ? (openBlock(), createElementBlock("div", {
          key: 0,
          class: normalizeClass(y4.value)
        }, null, 2)) : createCommentVNode("", true),
        !unref(R4).enabled && !N3.teleportCenter ? (openBlock(), createElementBlock("div", {
          key: 1,
          class: normalizeClass(Z3.value)
        }, null, 2)) : createCommentVNode("", true),
        createBaseVNode("div", {
          ref_key: "innerMenuRef",
          ref: q3,
          class: normalizeClass({
            dp__menu_content_wrapper: ((Me2 = N3.presetDates) == null ? void 0 : Me2.length) || !!N3.$slots["left-sidebar"] || !!N3.$slots["right-sidebar"]
          }),
          style: normalizeStyle({ "--dp-menu-width": `${C2.value}px` })
        }, [
          N3.$slots["left-sidebar"] ? (openBlock(), createElementBlock("div", Do, [
            renderSlot(N3.$slots, "left-sidebar", normalizeProps(guardReactiveProps(ne2.value)))
          ])) : createCommentVNode("", true),
          N3.presetDates.length ? (openBlock(), createElementBlock("div", Mo, [
            (openBlock(true), createElementBlock(Fragment, null, renderList(N3.presetDates, (G3, We2) => (openBlock(), createElementBlock(Fragment, { key: We2 }, [
              G3.slot ? renderSlot(N3.$slots, G3.slot, {
                key: 0,
                presetDate: te2,
                label: G3.label,
                value: G3.value
              }) : (openBlock(), createElementBlock("button", {
                key: 1,
                type: "button",
                style: normalizeStyle(G3.style || {}),
                class: "dp__btn dp--preset-range",
                onClick: withModifiers((je3) => te2(G3.value, G3.noTz), ["prevent"]),
                onKeydown: [
                  withKeys(withModifiers((je3) => te2(G3.value, G3.noTz), ["prevent"]), ["enter"]),
                  withKeys(withModifiers((je3) => te2(G3.value, G3.noTz), ["prevent"]), ["space"])
                ]
              }, toDisplayString$1(G3.label), 45, $o))
            ], 64))), 128))
          ])) : createCommentVNode("", true),
          createBaseVNode("div", {
            ref_key: "calendarWrapperRef",
            ref: M4,
            class: "dp__instance_calendar",
            role: "document"
          }, [
            (openBlock(), createBlock(resolveDynamicComponent(w3.value), mergeProps({
              ref_key: "dynCmpRef",
              ref: S4
            }, o2.value, {
              "flow-step": unref(V3),
              onMount: unref(E3),
              onUpdateFlowStep: unref(ie2),
              onResetFlow: unref(f2),
              onFocusMenu: L3,
              onSelectDate: U2[0] || (U2[0] = (G3) => N3.$emit("select-date")),
              onDateUpdate: U2[1] || (U2[1] = (G3) => N3.$emit("date-update", G3)),
              onTooltipOpen: U2[2] || (U2[2] = (G3) => N3.$emit("tooltip-open", G3)),
              onTooltipClose: U2[3] || (U2[3] = (G3) => N3.$emit("tooltip-close", G3)),
              onAutoApply: U2[4] || (U2[4] = (G3) => N3.$emit("auto-apply", G3)),
              onRangeStart: U2[5] || (U2[5] = (G3) => N3.$emit("range-start", G3)),
              onRangeEnd: U2[6] || (U2[6] = (G3) => N3.$emit("range-end", G3)),
              onInvalidFixedRange: U2[7] || (U2[7] = (G3) => N3.$emit("invalid-fixed-range", G3)),
              onTimeUpdate: U2[8] || (U2[8] = (G3) => N3.$emit("time-update")),
              onAmPmChange: U2[9] || (U2[9] = (G3) => N3.$emit("am-pm-change", G3)),
              onTimePickerOpen: U2[10] || (U2[10] = (G3) => N3.$emit("time-picker-open", G3)),
              onTimePickerClose: $3,
              onRecalculatePosition: O4,
              onUpdateMonthYear: U2[11] || (U2[11] = (G3) => N3.$emit("update-month-year", G3)),
              onAutoApplyInvalid: U2[12] || (U2[12] = (G3) => N3.$emit("auto-apply-invalid", G3)),
              onInvalidDate: U2[13] || (U2[13] = (G3) => N3.$emit("invalid-date", G3)),
              "onUpdate:internalModelValue": U2[14] || (U2[14] = (G3) => N3.$emit("update:internal-model-value", G3))
            }), createSlots({ _: 2 }, [
              renderList(Y3.value, (G3, We2) => ({
                name: G3,
                fn: withCtx((je3) => [
                  renderSlot(N3.$slots, G3, normalizeProps(guardReactiveProps({ ...je3 })))
                ])
              }))
            ]), 1040, ["flow-step", "onMount", "onUpdateFlowStep", "onResetFlow"]))
          ], 512),
          N3.$slots["right-sidebar"] ? (openBlock(), createElementBlock("div", To, [
            renderSlot(N3.$slots, "right-sidebar", normalizeProps(guardReactiveProps(ne2.value)))
          ])) : createCommentVNode("", true),
          N3.$slots["action-extra"] ? (openBlock(), createElementBlock("div", Ao, [
            N3.$slots["action-extra"] ? renderSlot(N3.$slots, "action-extra", {
              key: 0,
              selectCurrentDate: K3
            }) : createCommentVNode("", true)
          ])) : createCommentVNode("", true)
        ], 6),
        !N3.autoApply || unref(P2).keepActionRow ? (openBlock(), createBlock(Al, mergeProps({
          key: 2,
          "menu-mount": g2.value
        }, o2.value, {
          "calendar-width": C2.value,
          onClosePicker: U2[15] || (U2[15] = (G3) => N3.$emit("close-picker")),
          onSelectDate: U2[16] || (U2[16] = (G3) => N3.$emit("select-date")),
          onInvalidSelect: U2[17] || (U2[17] = (G3) => N3.$emit("invalid-select")),
          onSelectNow: K3
        }), createSlots({ _: 2 }, [
          renderList(unref(d4), (G3, We2) => ({
            name: G3,
            fn: withCtx((je3) => [
              renderSlot(N3.$slots, G3, normalizeProps(guardReactiveProps({ ...je3 })))
            ])
          }))
        ]), 1040, ["menu-mount", "calendar-width"])) : createCommentVNode("", true)
      ], 42, wo);
    };
  }
}), So = typeof window < "u" ? window : void 0, $n = () => {
}, Po = (e3) => getCurrentScope() ? (onScopeDispose(e3), true) : false, Co = (e3, t3, r2, a4) => {
  if (!e3)
    return $n;
  let n2 = $n;
  const o2 = watch(
    () => unref(e3),
    (c3) => {
      n2(), c3 && (c3.addEventListener(t3, r2, a4), n2 = () => {
        c3.removeEventListener(t3, r2, a4), n2 = $n;
      });
    },
    { immediate: true, flush: "post" }
  ), i3 = () => {
    o2(), n2();
  };
  return Po(i3), i3;
}, _o = (e3, t3, r2, a4 = {}) => {
  const { window: n2 = So, event: o2 = "pointerdown" } = a4;
  return n2 ? Co(n2, o2, (c3) => {
    const p2 = Re$2(e3), T4 = Re$2(t3);
    !p2 || !T4 || p2 === c3.target || c3.composedPath().includes(p2) || c3.composedPath().includes(T4) || r2(c3);
  }, { passive: true }) : void 0;
}, Ro = /* @__PURE__ */ defineComponent({
  compatConfig: {
    MODE: 3
  },
  __name: "VueDatePicker",
  props: {
    ...rn
  },
  emits: [
    "update:model-value",
    "update:model-timezone-value",
    "text-submit",
    "closed",
    "cleared",
    "open",
    "focus",
    "blur",
    "internal-model-change",
    "recalculate-position",
    "flow-step",
    "update-month-year",
    "invalid-select",
    "invalid-fixed-range",
    "tooltip-open",
    "tooltip-close",
    "time-picker-open",
    "time-picker-close",
    "am-pm-change",
    "range-start",
    "range-end",
    "date-update",
    "invalid-date"
  ],
  setup(e3, { expose: t3, emit: r2 }) {
    const a4 = r2, n2 = e3, o2 = useSlots(), i3 = ref(false), c3 = toRef(n2, "modelValue"), p2 = toRef(n2, "timezone"), T4 = ref(null), D3 = ref(null), R4 = ref(null), P2 = ref(false), M4 = ref(null), C2 = ref(false), A2 = ref(false), { setMenuFocused: q3, setShiftKey: g2 } = Va(), { clearArrowNav: S4 } = yt$1(), { mapDatesArrToMap: F2, validateDate: b4, isValidTime: _2 } = $t$1(n2), { defaultedTransitions: X4, defaultedTextInput: ae2, defaultedInline: V3, defaultedConfig: ie2 } = Pe$1(n2), { menuTransition: E3, showTransition: f2 } = Lt(X4);
    onMounted(() => {
      J3(n2.modelValue), nextTick().then(() => {
        if (!V3.value.enabled) {
          const x3 = y4(M4.value);
          x3 == null || x3.addEventListener("scroll", be3), window == null || window.addEventListener("resize", N3);
        }
      }), V3.value.enabled && (i3.value = true), window == null || window.addEventListener("keyup", U2), window == null || window.addEventListener("keydown", Me2);
    });
    const w3 = computed(() => F2());
    onUnmounted(() => {
      if (!V3.value.enabled) {
        const x3 = y4(M4.value);
        x3 == null || x3.removeEventListener("scroll", be3), window == null || window.removeEventListener("resize", N3);
      }
      window == null || window.removeEventListener("keyup", U2), window == null || window.removeEventListener("keydown", Me2);
    });
    const L3 = qe$1(o2, "all", n2.presetDates), ne2 = qe$1(o2, "input");
    watch(
      [c3, p2],
      () => {
        J3(c3.value);
      },
      { deep: true }
    );
    const { openOnTop: O4, menuStyle: d4, xCorrect: Y3, setMenuPosition: Z3, getScrollableParent: y4, shadowRender: l2 } = ml({
      menuRef: T4,
      menuRefInner: D3,
      inputRef: R4,
      pickerWrapperRef: M4,
      inline: V3,
      emit: a4,
      props: n2,
      slots: o2
    }), {
      inputValue: h4,
      internalModelValue: s5,
      parseExternalModelValue: J3,
      emitModelValue: de2,
      formatInputValue: $3,
      checkBeforeEmit: u3
    } = fl(a4, n2, P2), I3 = computed(
      () => ({
        dp__main: true,
        dp__theme_dark: n2.dark,
        dp__theme_light: !n2.dark,
        dp__flex_display: V3.value.enabled,
        dp__flex_display_with_input: V3.value.input
      })
    ), Q3 = computed(() => n2.dark ? "dp__theme_dark" : "dp__theme_light"), K3 = computed(() => ({
      to: typeof n2.teleport == "boolean" ? "body" : n2.teleport,
      disabled: !n2.teleport || V3.value.enabled
    })), te2 = computed(() => ({ class: "dp__outer_menu_wrap" })), le2 = computed(() => V3.value.enabled && (n2.timePicker || n2.monthPicker || n2.yearPicker || n2.quarterPicker)), be3 = () => {
      i3.value && (ie2.value.closeOnScroll ? Ze2() : Z3());
    }, N3 = () => {
      i3.value && Z3();
    }, U2 = (x3) => {
      x3.key === "Tab" && !V3.value.enabled && !n2.teleport && ie2.value.tabOutClosesMenu && (M4.value.contains(document.activeElement) || Ze2()), A2.value = x3.shiftKey;
    }, Me2 = (x3) => {
      A2.value = x3.shiftKey;
    }, G3 = () => {
      !n2.disabled && !n2.readonly && (l2(pa, n2), Z3(false), i3.value = true, i3.value && a4("open"), i3.value || Yt2(), J3(n2.modelValue));
    }, We2 = () => {
      var x3;
      h4.value = "", Yt2(), (x3 = R4.value) == null || x3.setParsedDate(null), a4("update:model-value", null), a4("update:model-timezone-value", null), a4("cleared"), ie2.value.closeOnClearValue && Ze2();
    }, je3 = () => {
      const x3 = s5.value;
      return !x3 || !Array.isArray(x3) && b4(x3) ? true : Array.isArray(x3) ? n2.multiDates || x3.length === 2 && b4(x3[0]) && b4(x3[1]) ? true : n2.partialRange && !n2.timePicker ? b4(x3[0]) : false : false;
    }, it3 = () => {
      u3() && je3() ? (de2(), Ze2()) : a4("invalid-select", s5.value);
    }, Wt2 = (x3) => {
      jt2(), de2(), ie2.value.closeOnAutoApply && !x3 && Ze2();
    }, jt2 = () => {
      R4.value && ae2.value.enabled && R4.value.setParsedDate(s5.value);
    }, sn2 = (x3 = false) => {
      n2.autoApply && _2(s5.value) && je3() && (n2.range && Array.isArray(s5.value) ? (n2.partialRange || s5.value.length === 2) && Wt2(x3) : Wt2(x3));
    }, Yt2 = () => {
      ae2.value.enabled || (s5.value = null);
    }, Ze2 = () => {
      V3.value.enabled || (i3.value && (i3.value = false, Y3.value = false, q3(false), g2(false), S4(), a4("closed"), h4.value && J3(c3.value)), Yt2(), a4("blur"));
    }, un2 = (x3, ue3, se = false) => {
      if (!x3) {
        s5.value = null;
        return;
      }
      const ht2 = Array.isArray(x3) ? !x3.some((Qn2) => !b4(Qn2)) : b4(x3), Ke2 = _2(x3);
      ht2 && Ke2 && (s5.value = x3, ue3 && (C2.value = se, it3(), a4("text-submit")));
    }, dn2 = () => {
      n2.autoApply && _2(s5.value) && de2(), jt2();
    }, Kt2 = () => i3.value ? Ze2() : G3(), Zn2 = (x3) => {
      s5.value = x3;
    }, m4 = () => {
      ae2.value.enabled && (P2.value = true, $3()), a4("focus");
    }, W2 = () => {
      if (ae2.value.enabled && (P2.value = false, J3(n2.modelValue), C2.value)) {
        const x3 = jr(M4.value, A2.value);
        x3 == null || x3.focus();
      }
      a4("blur");
    }, oe3 = (x3) => {
      D3.value && D3.value.updateMonthYear(0, {
        month: ca(x3.month),
        year: ca(x3.year)
      });
    }, me2 = (x3) => {
      J3(x3 ?? n2.modelValue);
    }, Se3 = (x3, ue3) => {
      var se;
      (se = D3.value) == null || se.switchView(x3, ue3);
    }, nt2 = (x3) => ie2.value.onClickOutside ? ie2.value.onClickOutside(x3) : Ze2();
    return _o(T4, R4, () => nt2(je3)), t3({
      closeMenu: Ze2,
      selectDate: it3,
      clearValue: We2,
      openMenu: G3,
      onScroll: be3,
      formatInputValue: $3,
      // exposed for testing purposes
      updateInternalModelValue: Zn2,
      // modify internal modelValue
      setMonthYear: oe3,
      parseModel: me2,
      switchView: Se3,
      toggleMenu: Kt2
    }), (x3, ue3) => (openBlock(), createElementBlock("div", {
      ref_key: "pickerWrapperRef",
      ref: M4,
      class: normalizeClass(I3.value),
      "data-datepicker-instance": ""
    }, [
      createVNode(Dl, mergeProps({
        ref_key: "inputRef",
        ref: R4,
        "input-value": unref(h4),
        "onUpdate:inputValue": ue3[0] || (ue3[0] = (se) => isRef(h4) ? h4.value = se : null),
        "is-menu-open": i3.value
      }, x3.$props, {
        onClear: We2,
        onOpen: G3,
        onSetInputDate: un2,
        onSetEmptyDate: unref(de2),
        onSelectDate: it3,
        onToggle: Kt2,
        onClose: Ze2,
        onFocus: m4,
        onBlur: W2,
        onRealBlur: ue3[1] || (ue3[1] = (se) => P2.value = false)
      }), createSlots({ _: 2 }, [
        renderList(unref(ne2), (se, ht2) => ({
          name: se,
          fn: withCtx((Ke2) => [
            renderSlot(x3.$slots, se, normalizeProps(guardReactiveProps(Ke2)))
          ])
        }))
      ]), 1040, ["input-value", "is-menu-open", "onSetEmptyDate"]),
      createVNode(Teleport, normalizeProps(guardReactiveProps(K3.value)), {
        default: withCtx(() => [
          createVNode(Transition, {
            name: unref(E3)(unref(O4)),
            css: unref(f2) && !unref(V3).enabled
          }, {
            default: withCtx(() => [
              i3.value ? (openBlock(), createElementBlock("div", mergeProps({
                key: 0,
                ref_key: "dpWrapMenuRef",
                ref: T4
              }, te2.value, {
                class: { "dp--menu-wrapper": !unref(V3).enabled },
                style: unref(V3).enabled ? void 0 : unref(d4)
              }), [
                createVNode(pa, mergeProps({
                  ref_key: "dpMenuRef",
                  ref: D3
                }, x3.$props, {
                  "internal-model-value": unref(s5),
                  "onUpdate:internalModelValue": ue3[2] || (ue3[2] = (se) => isRef(s5) ? s5.value = se : null),
                  class: { [Q3.value]: true, "dp--menu-wrapper": x3.teleport },
                  "open-on-top": unref(O4),
                  "arr-map-values": w3.value,
                  "no-overlay-focus": le2.value,
                  onClosePicker: Ze2,
                  onSelectDate: it3,
                  onAutoApply: sn2,
                  onTimeUpdate: dn2,
                  onFlowStep: ue3[3] || (ue3[3] = (se) => x3.$emit("flow-step", se)),
                  onUpdateMonthYear: ue3[4] || (ue3[4] = (se) => x3.$emit("update-month-year", se)),
                  onInvalidSelect: ue3[5] || (ue3[5] = (se) => x3.$emit("invalid-select", unref(s5))),
                  onAutoApplyInvalid: ue3[6] || (ue3[6] = (se) => x3.$emit("invalid-select", se)),
                  onInvalidFixedRange: ue3[7] || (ue3[7] = (se) => x3.$emit("invalid-fixed-range", se)),
                  onRecalculatePosition: unref(Z3),
                  onTooltipOpen: ue3[8] || (ue3[8] = (se) => x3.$emit("tooltip-open", se)),
                  onTooltipClose: ue3[9] || (ue3[9] = (se) => x3.$emit("tooltip-close", se)),
                  onTimePickerOpen: ue3[10] || (ue3[10] = (se) => x3.$emit("time-picker-open", se)),
                  onTimePickerClose: ue3[11] || (ue3[11] = (se) => x3.$emit("time-picker-close", se)),
                  onAmPmChange: ue3[12] || (ue3[12] = (se) => x3.$emit("am-pm-change", se)),
                  onRangeStart: ue3[13] || (ue3[13] = (se) => x3.$emit("range-start", se)),
                  onRangeEnd: ue3[14] || (ue3[14] = (se) => x3.$emit("range-end", se)),
                  onDateUpdate: ue3[15] || (ue3[15] = (se) => x3.$emit("date-update", se)),
                  onInvalidDate: ue3[16] || (ue3[16] = (se) => x3.$emit("invalid-date", se))
                }), createSlots({ _: 2 }, [
                  renderList(unref(L3), (se, ht2) => ({
                    name: se,
                    fn: withCtx((Ke2) => [
                      renderSlot(x3.$slots, se, normalizeProps(guardReactiveProps({ ...Ke2 })))
                    ])
                  }))
                ]), 1040, ["internal-model-value", "class", "open-on-top", "arr-map-values", "no-overlay-focus", "onRecalculatePosition"])
              ], 16)) : createCommentVNode("", true)
            ]),
            _: 3
          }, 8, ["name", "css"])
        ]),
        _: 3
      }, 16)
    ], 2));
  }
}), Ka = /* @__PURE__ */ (() => {
  const e3 = Ro;
  return e3.install = (t3) => {
    t3.component("Vue3DatePicker", e3);
  }, e3;
})(), Oo = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  default: Ka
}, Symbol.toStringTag, { value: "Module" }));
Object.entries(Oo).forEach(([e3, t3]) => {
  e3 !== "default" && (Ka[e3] = t3);
});
function d$6(u3, e3, r2) {
  let i3 = ref(r2 == null ? void 0 : r2.value), f2 = computed(() => u3.value !== void 0);
  return [computed(() => f2.value ? u3.value : i3.value), function(t3) {
    return f2.value || (i3.value = t3), e3 == null ? void 0 : e3(t3);
  }];
}
let e$2 = 0;
function n$6() {
  return ++e$2;
}
function t$6() {
  return n$6();
}
function o$6(e3) {
  var l2;
  if (e3 == null || e3.value == null)
    return null;
  let n2 = (l2 = e3.value.$el) != null ? l2 : e3.value;
  return n2 instanceof Node ? n2 : null;
}
function u$5(r2, n2, ...a4) {
  if (r2 in n2) {
    let e3 = n2[r2];
    return typeof e3 == "function" ? e3(...a4) : e3;
  }
  let t3 = new Error(`Tried to handle "${r2}" but there is no handler defined. Only defined handlers are: ${Object.keys(n2).map((e3) => `"${e3}"`).join(", ")}.`);
  throw Error.captureStackTrace && Error.captureStackTrace(t3, u$5), t3;
}
var i$7 = Object.defineProperty;
var d$5 = (t3, e3, r2) => e3 in t3 ? i$7(t3, e3, { enumerable: true, configurable: true, writable: true, value: r2 }) : t3[e3] = r2;
var n$5 = (t3, e3, r2) => (d$5(t3, typeof e3 != "symbol" ? e3 + "" : e3, r2), r2);
let s$5 = class s4 {
  constructor() {
    n$5(this, "current", this.detect());
    n$5(this, "currentId", 0);
  }
  set(e3) {
    this.current !== e3 && (this.currentId = 0, this.current = e3);
  }
  reset() {
    this.set(this.detect());
  }
  nextId() {
    return ++this.currentId;
  }
  get isServer() {
    return this.current === "server";
  }
  get isClient() {
    return this.current === "client";
  }
  detect() {
    return typeof window == "undefined" || typeof document == "undefined" ? "server" : "client";
  }
};
let c$3 = new s$5();
function i$6(r2) {
  if (c$3.isServer)
    return null;
  if (r2 instanceof Node)
    return r2.ownerDocument;
  if (r2 != null && r2.hasOwnProperty("value")) {
    let n2 = o$6(r2);
    if (n2)
      return n2.ownerDocument;
  }
  return document;
}
let c$2 = ["[contentEditable=true]", "[tabindex]", "a[href]", "area[href]", "button:not([disabled])", "iframe", "input:not([disabled])", "select:not([disabled])", "textarea:not([disabled])"].map((e3) => `${e3}:not([tabindex='-1'])`).join(",");
var N$4 = ((n2) => (n2[n2.First = 1] = "First", n2[n2.Previous = 2] = "Previous", n2[n2.Next = 4] = "Next", n2[n2.Last = 8] = "Last", n2[n2.WrapAround = 16] = "WrapAround", n2[n2.NoScroll = 32] = "NoScroll", n2))(N$4 || {}), T$3 = ((o2) => (o2[o2.Error = 0] = "Error", o2[o2.Overflow = 1] = "Overflow", o2[o2.Success = 2] = "Success", o2[o2.Underflow = 3] = "Underflow", o2))(T$3 || {}), F$1 = ((t3) => (t3[t3.Previous = -1] = "Previous", t3[t3.Next = 1] = "Next", t3))(F$1 || {});
function E$3(e3 = document.body) {
  return e3 == null ? [] : Array.from(e3.querySelectorAll(c$2)).sort((r2, t3) => Math.sign((r2.tabIndex || Number.MAX_SAFE_INTEGER) - (t3.tabIndex || Number.MAX_SAFE_INTEGER)));
}
var h$2 = ((t3) => (t3[t3.Strict = 0] = "Strict", t3[t3.Loose = 1] = "Loose", t3))(h$2 || {});
function w$3(e3, r2 = 0) {
  var t3;
  return e3 === ((t3 = i$6(e3)) == null ? void 0 : t3.body) ? false : u$5(r2, { [0]() {
    return e3.matches(c$2);
  }, [1]() {
    let l2 = e3;
    for (; l2 !== null; ) {
      if (l2.matches(c$2))
        return true;
      l2 = l2.parentElement;
    }
    return false;
  } });
}
function _$3(e3) {
  let r2 = i$6(e3);
  nextTick(() => {
    r2 && !w$3(r2.activeElement, 0) && S$4(e3);
  });
}
var y$3 = ((t3) => (t3[t3.Keyboard = 0] = "Keyboard", t3[t3.Mouse = 1] = "Mouse", t3))(y$3 || {});
typeof window != "undefined" && typeof document != "undefined" && (document.addEventListener("keydown", (e3) => {
  e3.metaKey || e3.altKey || e3.ctrlKey || (document.documentElement.dataset.headlessuiFocusVisible = "");
}, true), document.addEventListener("click", (e3) => {
  e3.detail === 1 ? delete document.documentElement.dataset.headlessuiFocusVisible : e3.detail === 0 && (document.documentElement.dataset.headlessuiFocusVisible = "");
}, true));
function S$4(e3) {
  e3 == null || e3.focus({ preventScroll: true });
}
let H$1 = ["textarea", "input"].join(",");
function I$1(e3) {
  var r2, t3;
  return (t3 = (r2 = e3 == null ? void 0 : e3.matches) == null ? void 0 : r2.call(e3, H$1)) != null ? t3 : false;
}
function O$1(e3, r2 = (t3) => t3) {
  return e3.slice().sort((t3, l2) => {
    let o2 = r2(t3), i3 = r2(l2);
    if (o2 === null || i3 === null)
      return 0;
    let n2 = o2.compareDocumentPosition(i3);
    return n2 & Node.DOCUMENT_POSITION_FOLLOWING ? -1 : n2 & Node.DOCUMENT_POSITION_PRECEDING ? 1 : 0;
  });
}
function v$4(e3, r2) {
  return P$1(E$3(), r2, { relativeTo: e3 });
}
function P$1(e3, r2, { sorted: t3 = true, relativeTo: l2 = null, skipElements: o2 = [] } = {}) {
  var m4;
  let i3 = (m4 = Array.isArray(e3) ? e3.length > 0 ? e3[0].ownerDocument : document : e3 == null ? void 0 : e3.ownerDocument) != null ? m4 : document, n2 = Array.isArray(e3) ? t3 ? O$1(e3) : e3 : E$3(e3);
  o2.length > 0 && n2.length > 1 && (n2 = n2.filter((s5) => !o2.includes(s5))), l2 = l2 != null ? l2 : i3.activeElement;
  let x3 = (() => {
    if (r2 & 5)
      return 1;
    if (r2 & 10)
      return -1;
    throw new Error("Missing Focus.First, Focus.Previous, Focus.Next or Focus.Last");
  })(), p2 = (() => {
    if (r2 & 1)
      return 0;
    if (r2 & 2)
      return Math.max(0, n2.indexOf(l2)) - 1;
    if (r2 & 4)
      return Math.max(0, n2.indexOf(l2)) + 1;
    if (r2 & 8)
      return n2.length - 1;
    throw new Error("Missing Focus.First, Focus.Previous, Focus.Next or Focus.Last");
  })(), L3 = r2 & 32 ? { preventScroll: true } : {}, a4 = 0, d4 = n2.length, u3;
  do {
    if (a4 >= d4 || a4 + d4 <= 0)
      return 0;
    let s5 = p2 + a4;
    if (r2 & 16)
      s5 = (s5 + d4) % d4;
    else {
      if (s5 < 0)
        return 3;
      if (s5 >= d4)
        return 1;
    }
    u3 = n2[s5], u3 == null || u3.focus(L3), a4 += x3;
  } while (u3 !== i3.activeElement);
  return r2 & 6 && I$1(u3) && u3.select(), 2;
}
function t$5() {
  return /iPhone/gi.test(window.navigator.platform) || /Mac/gi.test(window.navigator.platform) && window.navigator.maxTouchPoints > 0;
}
function i$5() {
  return /Android/gi.test(window.navigator.userAgent);
}
function n$4() {
  return t$5() || i$5();
}
function u$4(e3, t3, n2) {
  c$3.isServer || watchEffect((o2) => {
    document.addEventListener(e3, t3, n2), o2(() => document.removeEventListener(e3, t3, n2));
  });
}
function w$2(e3, n2, t3) {
  c$3.isServer || watchEffect((o2) => {
    window.addEventListener(e3, n2, t3), o2(() => window.removeEventListener(e3, n2, t3));
  });
}
function w$1(f2, m4, l2 = computed(() => true)) {
  function a4(e3, r2) {
    if (!l2.value || e3.defaultPrevented)
      return;
    let t3 = r2(e3);
    if (t3 === null || !t3.getRootNode().contains(t3))
      return;
    let c3 = function o2(n2) {
      return typeof n2 == "function" ? o2(n2()) : Array.isArray(n2) || n2 instanceof Set ? n2 : [n2];
    }(f2);
    for (let o2 of c3) {
      if (o2 === null)
        continue;
      let n2 = o2 instanceof HTMLElement ? o2 : o$6(o2);
      if (n2 != null && n2.contains(t3) || e3.composed && e3.composedPath().includes(n2))
        return;
    }
    return !w$3(t3, h$2.Loose) && t3.tabIndex !== -1 && e3.preventDefault(), m4(e3, t3);
  }
  let u3 = ref(null);
  u$4("pointerdown", (e3) => {
    var r2, t3;
    l2.value && (u3.value = ((t3 = (r2 = e3.composedPath) == null ? void 0 : r2.call(e3)) == null ? void 0 : t3[0]) || e3.target);
  }, true), u$4("mousedown", (e3) => {
    var r2, t3;
    l2.value && (u3.value = ((t3 = (r2 = e3.composedPath) == null ? void 0 : r2.call(e3)) == null ? void 0 : t3[0]) || e3.target);
  }, true), u$4("click", (e3) => {
    n$4() || u3.value && (a4(e3, () => u3.value), u3.value = null);
  }, true), u$4("touchend", (e3) => a4(e3, () => e3.target instanceof HTMLElement ? e3.target : null), true), w$2("blur", (e3) => a4(e3, () => window.document.activeElement instanceof HTMLIFrameElement ? window.document.activeElement : null), true);
}
function r$2(t3, e3) {
  if (t3)
    return t3;
  let n2 = e3 != null ? e3 : "button";
  if (typeof n2 == "string" && n2.toLowerCase() === "button")
    return "button";
}
function s$4(t3, e3) {
  let n2 = ref(r$2(t3.value.type, t3.value.as));
  return onMounted(() => {
    n2.value = r$2(t3.value.type, t3.value.as);
  }), watchEffect(() => {
    var u3;
    n2.value || o$6(e3) && o$6(e3) instanceof HTMLButtonElement && !((u3 = o$6(e3)) != null && u3.hasAttribute("type")) && (n2.value = "button");
  }), n2;
}
function r$1(e3) {
  return [e3.screenX, e3.screenY];
}
function u$3() {
  let e3 = ref([-1, -1]);
  return { wasMoved(n2) {
    let t3 = r$1(n2);
    return e3.value[0] === t3[0] && e3.value[1] === t3[1] ? false : (e3.value = t3, true);
  }, update(n2) {
    e3.value = r$1(n2);
  } };
}
function i$4({ container: e3, accept: t3, walk: d4, enabled: o2 }) {
  watchEffect(() => {
    let r2 = e3.value;
    if (!r2 || o2 !== void 0 && !o2.value)
      return;
    let l2 = i$6(e3);
    if (!l2)
      return;
    let c3 = Object.assign((f2) => t3(f2), { acceptNode: t3 }), n2 = l2.createTreeWalker(r2, NodeFilter.SHOW_ELEMENT, c3, false);
    for (; n2.nextNode(); )
      d4(n2.currentNode);
  });
}
var N$3 = ((o2) => (o2[o2.None = 0] = "None", o2[o2.RenderStrategy = 1] = "RenderStrategy", o2[o2.Static = 2] = "Static", o2))(N$3 || {}), S$3 = ((e3) => (e3[e3.Unmount = 0] = "Unmount", e3[e3.Hidden = 1] = "Hidden", e3))(S$3 || {});
function A$6({ visible: r2 = true, features: t3 = 0, ourProps: e3, theirProps: o2, ...i3 }) {
  var a4;
  let n2 = j$2(o2, e3), l2 = Object.assign(i3, { props: n2 });
  if (r2 || t3 & 2 && n2.static)
    return y$2(l2);
  if (t3 & 1) {
    let d4 = (a4 = n2.unmount) == null || a4 ? 0 : 1;
    return u$5(d4, { [0]() {
      return null;
    }, [1]() {
      return y$2({ ...i3, props: { ...n2, hidden: true, style: { display: "none" } } });
    } });
  }
  return y$2(l2);
}
function y$2({ props: r2, attrs: t3, slots: e3, slot: o2, name: i3 }) {
  var m4, h4;
  let { as: n2, ...l2 } = T$2(r2, ["unmount", "static"]), a4 = (m4 = e3.default) == null ? void 0 : m4.call(e3, o2), d4 = {};
  if (o2) {
    let u3 = false, c3 = [];
    for (let [p2, f2] of Object.entries(o2))
      typeof f2 == "boolean" && (u3 = true), f2 === true && c3.push(p2);
    u3 && (d4["data-headlessui-state"] = c3.join(" "));
  }
  if (n2 === "template") {
    if (a4 = b(a4 != null ? a4 : []), Object.keys(l2).length > 0 || Object.keys(t3).length > 0) {
      let [u3, ...c3] = a4 != null ? a4 : [];
      if (!v$3(u3) || c3.length > 0)
        throw new Error(['Passing props on "template"!', "", `The current component <${i3} /> is rendering a "template".`, "However we need to passthrough the following props:", Object.keys(l2).concat(Object.keys(t3)).map((s5) => s5.trim()).filter((s5, g2, R4) => R4.indexOf(s5) === g2).sort((s5, g2) => s5.localeCompare(g2)).map((s5) => `  - ${s5}`).join(`
`), "", "You can apply a few solutions:", ['Add an `as="..."` prop, to ensure that we render an actual element instead of a "template".', "Render a single element as the child so that we can forward the props onto that element."].map((s5) => `  - ${s5}`).join(`
`)].join(`
`));
      let p2 = j$2((h4 = u3.props) != null ? h4 : {}, l2), f2 = cloneVNode(u3, p2, true);
      for (let s5 in p2)
        s5.startsWith("on") && (f2.props || (f2.props = {}), f2.props[s5] = p2[s5]);
      return f2;
    }
    return Array.isArray(a4) && a4.length === 1 ? a4[0] : a4;
  }
  return h$3(n2, Object.assign({}, l2, d4), { default: () => a4 });
}
function b(r2) {
  return r2.flatMap((t3) => t3.type === Fragment ? b(t3.children) : [t3]);
}
function j$2(...r2) {
  if (r2.length === 0)
    return {};
  if (r2.length === 1)
    return r2[0];
  let t3 = {}, e3 = {};
  for (let i3 of r2)
    for (let n2 in i3)
      n2.startsWith("on") && typeof i3[n2] == "function" ? (e3[n2] != null || (e3[n2] = []), e3[n2].push(i3[n2])) : t3[n2] = i3[n2];
  if (t3.disabled || t3["aria-disabled"])
    return Object.assign(t3, Object.fromEntries(Object.keys(e3).map((i3) => [i3, void 0])));
  for (let i3 in e3)
    Object.assign(t3, { [i3](n2, ...l2) {
      let a4 = e3[i3];
      for (let d4 of a4) {
        if (n2 instanceof Event && n2.defaultPrevented)
          return;
        d4(n2, ...l2);
      }
    } });
  return t3;
}
function E$2(r2) {
  let t3 = Object.assign({}, r2);
  for (let e3 in t3)
    t3[e3] === void 0 && delete t3[e3];
  return t3;
}
function T$2(r2, t3 = []) {
  let e3 = Object.assign({}, r2);
  for (let o2 of t3)
    o2 in e3 && delete e3[o2];
  return e3;
}
function v$3(r2) {
  return r2 == null ? false : typeof r2.type == "string" || typeof r2.type == "object" || typeof r2.type == "function";
}
var s$3 = ((e3) => (e3[e3.None = 1] = "None", e3[e3.Focusable = 2] = "Focusable", e3[e3.Hidden = 4] = "Hidden", e3))(s$3 || {});
let f$3 = /* @__PURE__ */ defineComponent({ name: "Hidden", props: { as: { type: [Object, String], default: "div" }, features: { type: Number, default: 1 } }, setup(d4, { slots: o2, attrs: i3 }) {
  return () => {
    var t3;
    let { features: e3, ...r2 } = d4, n2 = { "aria-hidden": (e3 & 2) === 2 ? true : (t3 = r2["aria-hidden"]) != null ? t3 : void 0, style: { position: "fixed", top: 1, left: 1, width: 1, height: 0, padding: 0, margin: -1, overflow: "hidden", clip: "rect(0, 0, 0, 0)", whiteSpace: "nowrap", borderWidth: "0", ...(e3 & 4) === 4 && (e3 & 2) !== 2 && { display: "none" } } };
    return A$6({ ourProps: n2, theirProps: r2, slot: {}, attrs: i3, slots: o2, name: "Hidden" });
  };
} });
let n$3 = Symbol("Context");
var i$3 = ((e3) => (e3[e3.Open = 1] = "Open", e3[e3.Closed = 2] = "Closed", e3[e3.Closing = 4] = "Closing", e3[e3.Opening = 8] = "Opening", e3))(i$3 || {});
function s$2() {
  return l$2() !== null;
}
function l$2() {
  return inject(n$3, null);
}
function t$4(o2) {
  provide(n$3, o2);
}
var o$5 = ((r2) => (r2.Space = " ", r2.Enter = "Enter", r2.Escape = "Escape", r2.Backspace = "Backspace", r2.Delete = "Delete", r2.ArrowLeft = "ArrowLeft", r2.ArrowUp = "ArrowUp", r2.ArrowRight = "ArrowRight", r2.ArrowDown = "ArrowDown", r2.Home = "Home", r2.End = "End", r2.PageUp = "PageUp", r2.PageDown = "PageDown", r2.Tab = "Tab", r2))(o$5 || {});
function t$3(n2) {
  function e3() {
    document.readyState !== "loading" && (n2(), document.removeEventListener("DOMContentLoaded", e3));
  }
  typeof window != "undefined" && typeof document != "undefined" && (document.addEventListener("DOMContentLoaded", e3), e3());
}
let t$2 = [];
t$3(() => {
  function e3(n2) {
    n2.target instanceof HTMLElement && n2.target !== document.body && t$2[0] !== n2.target && (t$2.unshift(n2.target), t$2 = t$2.filter((r2) => r2 != null && r2.isConnected), t$2.splice(10));
  }
  window.addEventListener("click", e3, { capture: true }), window.addEventListener("mousedown", e3, { capture: true }), window.addEventListener("focus", e3, { capture: true }), document.body.addEventListener("click", e3, { capture: true }), document.body.addEventListener("mousedown", e3, { capture: true }), document.body.addEventListener("focus", e3, { capture: true });
});
function f$2(r2) {
  throw new Error("Unexpected object: " + r2);
}
var a$4 = ((e3) => (e3[e3.First = 0] = "First", e3[e3.Previous = 1] = "Previous", e3[e3.Next = 2] = "Next", e3[e3.Last = 3] = "Last", e3[e3.Specific = 4] = "Specific", e3[e3.Nothing = 5] = "Nothing", e3))(a$4 || {});
function x$1(r2, n2) {
  let t3 = n2.resolveItems();
  if (t3.length <= 0)
    return null;
  let l2 = n2.resolveActiveIndex(), s5 = l2 != null ? l2 : -1, d4 = (() => {
    switch (r2.focus) {
      case 0:
        return t3.findIndex((e3) => !n2.resolveDisabled(e3));
      case 1: {
        let e3 = t3.slice().reverse().findIndex((i3, c3, u3) => s5 !== -1 && u3.length - c3 - 1 >= s5 ? false : !n2.resolveDisabled(i3));
        return e3 === -1 ? e3 : t3.length - 1 - e3;
      }
      case 2:
        return t3.findIndex((e3, i3) => i3 <= s5 ? false : !n2.resolveDisabled(e3));
      case 3: {
        let e3 = t3.slice().reverse().findIndex((i3) => !n2.resolveDisabled(i3));
        return e3 === -1 ? e3 : t3.length - 1 - e3;
      }
      case 4:
        return t3.findIndex((e3) => n2.resolveId(e3) === r2.id);
      case 5:
        return null;
      default:
        f$2(r2);
    }
  })();
  return d4 === -1 ? l2 : d4;
}
function t$1(e3) {
  typeof queueMicrotask == "function" ? queueMicrotask(e3) : Promise.resolve().then(e3).catch((o2) => setTimeout(() => {
    throw o2;
  }));
}
function o$4() {
  let a4 = [], s5 = { addEventListener(e3, t3, r2, i3) {
    return e3.addEventListener(t3, r2, i3), s5.add(() => e3.removeEventListener(t3, r2, i3));
  }, requestAnimationFrame(...e3) {
    let t3 = requestAnimationFrame(...e3);
    s5.add(() => cancelAnimationFrame(t3));
  }, nextFrame(...e3) {
    s5.requestAnimationFrame(() => {
      s5.requestAnimationFrame(...e3);
    });
  }, setTimeout(...e3) {
    let t3 = setTimeout(...e3);
    s5.add(() => clearTimeout(t3));
  }, microTask(...e3) {
    let t3 = { current: true };
    return t$1(() => {
      t3.current && e3[0]();
    }), s5.add(() => {
      t3.current = false;
    });
  }, style(e3, t3, r2) {
    let i3 = e3.style.getPropertyValue(t3);
    return Object.assign(e3.style, { [t3]: r2 }), this.add(() => {
      Object.assign(e3.style, { [t3]: i3 });
    });
  }, group(e3) {
    let t3 = o$4();
    return e3(t3), this.add(() => t3.dispose());
  }, add(e3) {
    return a4.push(e3), () => {
      let t3 = a4.indexOf(e3);
      if (t3 >= 0)
        for (let r2 of a4.splice(t3, 1))
          r2();
    };
  }, dispose() {
    for (let e3 of a4.splice(0))
      e3();
  } };
  return s5;
}
function e$1(i3 = {}, s5 = null, t3 = []) {
  for (let [r2, n2] of Object.entries(i3))
    o$3(t3, f$1(s5, r2), n2);
  return t3;
}
function f$1(i3, s5) {
  return i3 ? i3 + "[" + s5 + "]" : s5;
}
function o$3(i3, s5, t3) {
  if (Array.isArray(t3))
    for (let [r2, n2] of t3.entries())
      o$3(i3, f$1(s5, r2.toString()), n2);
  else
    t3 instanceof Date ? i3.push([s5, t3.toISOString()]) : typeof t3 == "boolean" ? i3.push([s5, t3 ? "1" : "0"]) : typeof t3 == "string" ? i3.push([s5, t3]) : typeof t3 == "number" ? i3.push([s5, `${t3}`]) : t3 == null ? i3.push([s5, ""]) : e$1(t3, s5, i3);
}
function p$1(i3) {
  var t3, r2;
  let s5 = (t3 = i3 == null ? void 0 : i3.form) != null ? t3 : i3.closest("form");
  if (s5) {
    for (let n2 of s5.elements)
      if (n2 !== i3 && (n2.tagName === "INPUT" && n2.type === "submit" || n2.tagName === "BUTTON" && n2.type === "submit" || n2.nodeName === "INPUT" && n2.type === "image")) {
        n2.click();
        return;
      }
    (r2 = s5.requestSubmit) == null || r2.call(s5);
  }
}
function Se$4(a4, T4) {
  return a4 === T4;
}
var Ce$1 = ((p2) => (p2[p2.Open = 0] = "Open", p2[p2.Closed = 1] = "Closed", p2))(Ce$1 || {}), Oe$1 = ((p2) => (p2[p2.Single = 0] = "Single", p2[p2.Multi = 1] = "Multi", p2))(Oe$1 || {}), Re$1 = ((O4) => (O4[O4.Pointer = 0] = "Pointer", O4[O4.Focus = 1] = "Focus", O4[O4.Other = 2] = "Other", O4))(Re$1 || {});
let z$3 = Symbol("ComboboxContext");
function $$2(a4) {
  let T4 = inject(z$3, null);
  if (T4 === null) {
    let p2 = new Error(`<${a4} /> is missing a parent <Combobox /> component.`);
    throw Error.captureStackTrace && Error.captureStackTrace(p2, $$2), p2;
  }
  return T4;
}
let Ue$2 = /* @__PURE__ */ defineComponent({ name: "Combobox", emits: { "update:modelValue": (a4) => true }, props: { as: { type: [Object, String], default: "template" }, disabled: { type: [Boolean], default: false }, by: { type: [String, Function], default: () => Se$4 }, modelValue: { type: [Object, String, Number, Boolean], default: void 0 }, defaultValue: { type: [Object, String, Number, Boolean], default: void 0 }, form: { type: String, optional: true }, name: { type: String, optional: true }, nullable: { type: Boolean, default: false }, multiple: { type: [Boolean], default: false }, immediate: { type: [Boolean], default: false } }, inheritAttrs: false, setup(a4, { slots: T4, attrs: p2, emit: O4 }) {
  let t3 = ref(1), e3 = ref(null), y4 = ref(null), f2 = ref(null), r2 = ref(null), b4 = ref({ static: false, hold: false }), v2 = ref([]), R4 = ref(null), h4 = ref(2), V3 = ref(false);
  function L3(n2 = (u3) => u3) {
    let u3 = R4.value !== null ? v2.value[R4.value] : null, s5 = O$1(n2(v2.value.slice()), (d4) => o$6(d4.dataRef.domRef)), i3 = u3 ? s5.indexOf(u3) : null;
    return i3 === -1 && (i3 = null), { options: s5, activeOptionIndex: i3 };
  }
  let k3 = computed(() => a4.multiple ? 1 : 0), S4 = computed(() => a4.nullable), [F2, o2] = d$6(computed(() => a4.modelValue), (n2) => O4("update:modelValue", n2), computed(() => a4.defaultValue)), m4 = computed(() => F2.value === void 0 ? u$5(k3.value, { [1]: [], [0]: void 0 }) : F2.value), c3 = null, I3 = null, l2 = { comboboxState: t3, value: m4, mode: k3, compare(n2, u3) {
    if (typeof a4.by == "string") {
      let s5 = a4.by;
      return (n2 == null ? void 0 : n2[s5]) === (u3 == null ? void 0 : u3[s5]);
    }
    return a4.by(n2, u3);
  }, defaultValue: computed(() => a4.defaultValue), nullable: S4, immediate: computed(() => a4.immediate), inputRef: y4, labelRef: e3, buttonRef: f2, optionsRef: r2, disabled: computed(() => a4.disabled), options: v2, change(n2) {
    o2(n2);
  }, activeOptionIndex: computed(() => {
    if (V3.value && R4.value === null && v2.value.length > 0) {
      let n2 = v2.value.findIndex((u3) => !u3.dataRef.disabled);
      n2 !== -1 && (R4.value = n2);
    }
    return R4.value;
  }), activationTrigger: h4, optionsPropsRef: b4, closeCombobox() {
    V3.value = false, !a4.disabled && t3.value !== 1 && (t3.value = 1, R4.value = null);
  }, openCombobox() {
    if (V3.value = true, a4.disabled || t3.value === 0)
      return;
    let n2 = v2.value.findIndex((u3) => {
      let s5 = toRaw(u3.dataRef.value);
      return u$5(k3.value, { [0]: () => l2.compare(toRaw(l2.value.value), toRaw(s5)), [1]: () => toRaw(l2.value.value).some((d4) => l2.compare(toRaw(d4), toRaw(s5))) });
    });
    n2 !== -1 && (R4.value = n2), t3.value = 0;
  }, setActivationTrigger(n2) {
    h4.value = n2;
  }, goToOption(n2, u3, s5) {
    V3.value = false, c3 !== null && cancelAnimationFrame(c3), c3 = requestAnimationFrame(() => {
      if (a4.disabled || r2.value && !b4.value.static && t3.value === 1)
        return;
      let i3 = L3();
      if (i3.activeOptionIndex === null) {
        let P2 = i3.options.findIndex((B3) => !B3.dataRef.disabled);
        P2 !== -1 && (i3.activeOptionIndex = P2);
      }
      let d4 = x$1(n2 === a$4.Specific ? { focus: a$4.Specific, id: u3 } : { focus: n2 }, { resolveItems: () => i3.options, resolveActiveIndex: () => i3.activeOptionIndex, resolveId: (P2) => P2.id, resolveDisabled: (P2) => P2.dataRef.disabled });
      R4.value = d4, h4.value = s5 != null ? s5 : 2, v2.value = i3.options;
    });
  }, selectOption(n2) {
    let u3 = v2.value.find((i3) => i3.id === n2);
    if (!u3)
      return;
    let { dataRef: s5 } = u3;
    o2(u$5(k3.value, { [0]: () => s5.value, [1]: () => {
      let i3 = toRaw(l2.value.value).slice(), d4 = toRaw(s5.value), P2 = i3.findIndex((B3) => l2.compare(d4, toRaw(B3)));
      return P2 === -1 ? i3.push(d4) : i3.splice(P2, 1), i3;
    } }));
  }, selectActiveOption() {
    if (l2.activeOptionIndex.value === null)
      return;
    let { dataRef: n2, id: u3 } = v2.value[l2.activeOptionIndex.value];
    o2(u$5(k3.value, { [0]: () => n2.value, [1]: () => {
      let s5 = toRaw(l2.value.value).slice(), i3 = toRaw(n2.value), d4 = s5.findIndex((P2) => l2.compare(i3, toRaw(P2)));
      return d4 === -1 ? s5.push(i3) : s5.splice(d4, 1), s5;
    } })), l2.goToOption(a$4.Specific, u3);
  }, registerOption(n2, u3) {
    I3 && cancelAnimationFrame(I3);
    let s5 = { id: n2, dataRef: u3 }, i3 = L3((d4) => (d4.push(s5), d4));
    if (R4.value === null) {
      let d4 = u3.value.value;
      u$5(k3.value, { [0]: () => l2.compare(toRaw(l2.value.value), toRaw(d4)), [1]: () => toRaw(l2.value.value).some((B3) => l2.compare(toRaw(B3), toRaw(d4))) }) && (i3.activeOptionIndex = i3.options.indexOf(s5));
    }
    v2.value = i3.options, R4.value = i3.activeOptionIndex, h4.value = 2, i3.options.some((d4) => !o$6(d4.dataRef.domRef)) && (I3 = requestAnimationFrame(() => {
      let d4 = L3();
      v2.value = d4.options, R4.value = d4.activeOptionIndex;
    }));
  }, unregisterOption(n2) {
    var s5;
    l2.activeOptionIndex.value !== null && ((s5 = l2.options.value[l2.activeOptionIndex.value]) == null ? void 0 : s5.id) === n2 && (V3.value = true);
    let u3 = L3((i3) => {
      let d4 = i3.findIndex((P2) => P2.id === n2);
      return d4 !== -1 && i3.splice(d4, 1), i3;
    });
    v2.value = u3.options, R4.value = u3.activeOptionIndex, h4.value = 2;
  } };
  w$1([y4, f2, r2], () => l2.closeCombobox(), computed(() => t3.value === 0)), provide(z$3, l2), t$4(computed(() => u$5(t3.value, { [0]: i$3.Open, [1]: i$3.Closed })));
  let w3 = computed(() => l2.activeOptionIndex.value === null ? null : v2.value[l2.activeOptionIndex.value].dataRef.value), D3 = computed(() => {
    var n2;
    return (n2 = o$6(y4)) == null ? void 0 : n2.closest("form");
  });
  return onMounted(() => {
    watch([D3], () => {
      if (!D3.value || a4.defaultValue === void 0)
        return;
      function n2() {
        l2.change(a4.defaultValue);
      }
      return D3.value.addEventListener("reset", n2), () => {
        var u3;
        (u3 = D3.value) == null || u3.removeEventListener("reset", n2);
      };
    }, { immediate: true });
  }), () => {
    let { name: n2, disabled: u3, form: s5, ...i3 } = a4, d4 = { open: t3.value === 0, disabled: u3, activeIndex: l2.activeOptionIndex.value, activeOption: w3.value, value: m4.value };
    return h$3(Fragment, [...n2 != null && m4.value != null ? e$1({ [n2]: m4.value }).map(([P2, B3]) => h$3(f$3, E$2({ features: s$3.Hidden, key: P2, as: "input", type: "hidden", hidden: true, readOnly: true, form: s5, name: P2, value: B3 }))) : [], A$6({ theirProps: { ...p2, ...T$2(i3, ["modelValue", "defaultValue", "nullable", "multiple", "immediate", "onUpdate:modelValue", "by"]) }, ourProps: {}, slot: d4, slots: T4, attrs: p2, name: "Combobox" })]);
  };
} }), _e$2 = /* @__PURE__ */ defineComponent({ name: "ComboboxButton", props: { as: { type: [Object, String], default: "button" }, id: { type: String, default: () => `headlessui-combobox-button-${t$6()}` } }, setup(a4, { attrs: T4, slots: p2, expose: O4 }) {
  let t3 = $$2("ComboboxButton");
  O4({ el: t3.buttonRef, $el: t3.buttonRef });
  function e3(r2) {
    t3.disabled.value || (t3.comboboxState.value === 0 ? t3.closeCombobox() : (r2.preventDefault(), t3.openCombobox()), nextTick(() => {
      var b4;
      return (b4 = o$6(t3.inputRef)) == null ? void 0 : b4.focus({ preventScroll: true });
    }));
  }
  function y4(r2) {
    switch (r2.key) {
      case o$5.ArrowDown:
        r2.preventDefault(), r2.stopPropagation(), t3.comboboxState.value === 1 && t3.openCombobox(), nextTick(() => {
          var b4;
          return (b4 = t3.inputRef.value) == null ? void 0 : b4.focus({ preventScroll: true });
        });
        return;
      case o$5.ArrowUp:
        r2.preventDefault(), r2.stopPropagation(), t3.comboboxState.value === 1 && (t3.openCombobox(), nextTick(() => {
          t3.value.value || t3.goToOption(a$4.Last);
        })), nextTick(() => {
          var b4;
          return (b4 = t3.inputRef.value) == null ? void 0 : b4.focus({ preventScroll: true });
        });
        return;
      case o$5.Escape:
        if (t3.comboboxState.value !== 0)
          return;
        r2.preventDefault(), t3.optionsRef.value && !t3.optionsPropsRef.value.static && r2.stopPropagation(), t3.closeCombobox(), nextTick(() => {
          var b4;
          return (b4 = t3.inputRef.value) == null ? void 0 : b4.focus({ preventScroll: true });
        });
        return;
    }
  }
  let f2 = s$4(computed(() => ({ as: a4.as, type: T4.type })), t3.buttonRef);
  return () => {
    var h4, V3;
    let r2 = { open: t3.comboboxState.value === 0, disabled: t3.disabled.value, value: t3.value.value }, { id: b4, ...v2 } = a4, R4 = { ref: t3.buttonRef, id: b4, type: f2.value, tabindex: "-1", "aria-haspopup": "listbox", "aria-controls": (h4 = o$6(t3.optionsRef)) == null ? void 0 : h4.id, "aria-expanded": t3.comboboxState.value === 0, "aria-labelledby": t3.labelRef.value ? [(V3 = o$6(t3.labelRef)) == null ? void 0 : V3.id, b4].join(" ") : void 0, disabled: t3.disabled.value === true ? true : void 0, onKeydown: y4, onClick: e3 };
    return A$6({ ourProps: R4, theirProps: v2, slot: r2, attrs: T4, slots: p2, name: "ComboboxButton" });
  };
} }), Je$1 = /* @__PURE__ */ defineComponent({ name: "ComboboxInput", props: { as: { type: [Object, String], default: "input" }, static: { type: Boolean, default: false }, unmount: { type: Boolean, default: true }, displayValue: { type: Function }, defaultValue: { type: String, default: void 0 }, id: { type: String, default: () => `headlessui-combobox-input-${t$6()}` } }, emits: { change: (a4) => true }, setup(a4, { emit: T4, attrs: p2, slots: O4, expose: t3 }) {
  let e3 = $$2("ComboboxInput"), y4 = computed(() => i$6(o$6(e3.inputRef))), f2 = { value: false };
  t3({ el: e3.inputRef, $el: e3.inputRef });
  function r2() {
    e3.change(null);
    let o2 = o$6(e3.optionsRef);
    o2 && (o2.scrollTop = 0), e3.goToOption(a$4.Nothing);
  }
  let b4 = computed(() => {
    var m4;
    let o2 = e3.value.value;
    return o$6(e3.inputRef) ? typeof a4.displayValue != "undefined" && o2 !== void 0 ? (m4 = a4.displayValue(o2)) != null ? m4 : "" : typeof o2 == "string" ? o2 : "" : "";
  });
  onMounted(() => {
    watch([b4, e3.comboboxState, y4], ([o2, m4], [c3, I3]) => {
      if (f2.value)
        return;
      let l2 = o$6(e3.inputRef);
      l2 && ((I3 === 0 && m4 === 1 || o2 !== c3) && (l2.value = o2), requestAnimationFrame(() => {
        var n2;
        if (f2.value || !l2 || ((n2 = y4.value) == null ? void 0 : n2.activeElement) !== l2)
          return;
        let { selectionStart: w3, selectionEnd: D3 } = l2;
        Math.abs((D3 != null ? D3 : 0) - (w3 != null ? w3 : 0)) === 0 && w3 === 0 && l2.setSelectionRange(l2.value.length, l2.value.length);
      }));
    }, { immediate: true }), watch([e3.comboboxState], ([o2], [m4]) => {
      if (o2 === 0 && m4 === 1) {
        if (f2.value)
          return;
        let c3 = o$6(e3.inputRef);
        if (!c3)
          return;
        let I3 = c3.value, { selectionStart: l2, selectionEnd: w3, selectionDirection: D3 } = c3;
        c3.value = "", c3.value = I3, D3 !== null ? c3.setSelectionRange(l2, w3, D3) : c3.setSelectionRange(l2, w3);
      }
    });
  });
  let v2 = ref(false);
  function R4() {
    v2.value = true;
  }
  function h4() {
    o$4().nextFrame(() => {
      v2.value = false;
    });
  }
  function V3(o2) {
    switch (f2.value = true, o2.key) {
      case o$5.Enter:
        if (f2.value = false, e3.comboboxState.value !== 0 || v2.value)
          return;
        if (o2.preventDefault(), o2.stopPropagation(), e3.activeOptionIndex.value === null) {
          e3.closeCombobox();
          return;
        }
        e3.selectActiveOption(), e3.mode.value === 0 && e3.closeCombobox();
        break;
      case o$5.ArrowDown:
        return f2.value = false, o2.preventDefault(), o2.stopPropagation(), u$5(e3.comboboxState.value, { [0]: () => e3.goToOption(a$4.Next), [1]: () => e3.openCombobox() });
      case o$5.ArrowUp:
        return f2.value = false, o2.preventDefault(), o2.stopPropagation(), u$5(e3.comboboxState.value, { [0]: () => e3.goToOption(a$4.Previous), [1]: () => {
          e3.openCombobox(), nextTick(() => {
            e3.value.value || e3.goToOption(a$4.Last);
          });
        } });
      case o$5.Home:
        if (o2.shiftKey)
          break;
        return f2.value = false, o2.preventDefault(), o2.stopPropagation(), e3.goToOption(a$4.First);
      case o$5.PageUp:
        return f2.value = false, o2.preventDefault(), o2.stopPropagation(), e3.goToOption(a$4.First);
      case o$5.End:
        if (o2.shiftKey)
          break;
        return f2.value = false, o2.preventDefault(), o2.stopPropagation(), e3.goToOption(a$4.Last);
      case o$5.PageDown:
        return f2.value = false, o2.preventDefault(), o2.stopPropagation(), e3.goToOption(a$4.Last);
      case o$5.Escape:
        if (f2.value = false, e3.comboboxState.value !== 0)
          return;
        o2.preventDefault(), e3.optionsRef.value && !e3.optionsPropsRef.value.static && o2.stopPropagation(), e3.nullable.value && e3.mode.value === 0 && e3.value.value === null && r2(), e3.closeCombobox();
        break;
      case o$5.Tab:
        if (f2.value = false, e3.comboboxState.value !== 0)
          return;
        e3.mode.value === 0 && e3.activationTrigger.value !== 1 && e3.selectActiveOption(), e3.closeCombobox();
        break;
    }
  }
  function L3(o2) {
    T4("change", o2), e3.nullable.value && e3.mode.value === 0 && o2.target.value === "" && r2(), e3.openCombobox();
  }
  function k3(o2) {
    var c3, I3, l2;
    let m4 = (c3 = o2.relatedTarget) != null ? c3 : t$2.find((w3) => w3 !== o2.currentTarget);
    if (f2.value = false, !((I3 = o$6(e3.optionsRef)) != null && I3.contains(m4)) && !((l2 = o$6(e3.buttonRef)) != null && l2.contains(m4)) && e3.comboboxState.value === 0)
      return o2.preventDefault(), e3.mode.value === 0 && (e3.nullable.value && e3.value.value === null ? r2() : e3.activationTrigger.value !== 1 && e3.selectActiveOption()), e3.closeCombobox();
  }
  function S4(o2) {
    var c3, I3, l2;
    let m4 = (c3 = o2.relatedTarget) != null ? c3 : t$2.find((w3) => w3 !== o2.currentTarget);
    (I3 = o$6(e3.buttonRef)) != null && I3.contains(m4) || (l2 = o$6(e3.optionsRef)) != null && l2.contains(m4) || e3.disabled.value || e3.immediate.value && e3.comboboxState.value !== 0 && (e3.openCombobox(), o$4().nextFrame(() => {
      e3.setActivationTrigger(1);
    }));
  }
  let F2 = computed(() => {
    var o2, m4, c3, I3;
    return (I3 = (c3 = (m4 = a4.defaultValue) != null ? m4 : e3.defaultValue.value !== void 0 ? (o2 = a4.displayValue) == null ? void 0 : o2.call(a4, e3.defaultValue.value) : null) != null ? c3 : e3.defaultValue.value) != null ? I3 : "";
  });
  return () => {
    var D3, n2, u3, s5, i3, d4;
    let o2 = { open: e3.comboboxState.value === 0 }, { id: m4, displayValue: c3, onChange: I3, ...l2 } = a4, w3 = { "aria-controls": (D3 = e3.optionsRef.value) == null ? void 0 : D3.id, "aria-expanded": e3.comboboxState.value === 0, "aria-activedescendant": e3.activeOptionIndex.value === null || (n2 = e3.options.value[e3.activeOptionIndex.value]) == null ? void 0 : n2.id, "aria-labelledby": (i3 = (u3 = o$6(e3.labelRef)) == null ? void 0 : u3.id) != null ? i3 : (s5 = o$6(e3.buttonRef)) == null ? void 0 : s5.id, "aria-autocomplete": "list", id: m4, onCompositionstart: R4, onCompositionend: h4, onKeydown: V3, onInput: L3, onFocus: S4, onBlur: k3, role: "combobox", type: (d4 = p2.type) != null ? d4 : "text", tabIndex: 0, ref: e3.inputRef, defaultValue: F2.value, disabled: e3.disabled.value === true ? true : void 0 };
    return A$6({ ourProps: w3, theirProps: l2, slot: o2, attrs: p2, slots: O4, features: N$3.RenderStrategy | N$3.Static, name: "ComboboxInput" });
  };
} }), We$1 = /* @__PURE__ */ defineComponent({ name: "ComboboxOptions", props: { as: { type: [Object, String], default: "ul" }, static: { type: Boolean, default: false }, unmount: { type: Boolean, default: true }, hold: { type: [Boolean], default: false } }, setup(a4, { attrs: T4, slots: p2, expose: O4 }) {
  let t3 = $$2("ComboboxOptions"), e3 = `headlessui-combobox-options-${t$6()}`;
  O4({ el: t3.optionsRef, $el: t3.optionsRef }), watchEffect(() => {
    t3.optionsPropsRef.value.static = a4.static;
  }), watchEffect(() => {
    t3.optionsPropsRef.value.hold = a4.hold;
  });
  let y4 = l$2(), f2 = computed(() => y4 !== null ? (y4.value & i$3.Open) === i$3.Open : t3.comboboxState.value === 0);
  return i$4({ container: computed(() => o$6(t3.optionsRef)), enabled: computed(() => t3.comboboxState.value === 0), accept(r2) {
    return r2.getAttribute("role") === "option" ? NodeFilter.FILTER_REJECT : r2.hasAttribute("role") ? NodeFilter.FILTER_SKIP : NodeFilter.FILTER_ACCEPT;
  }, walk(r2) {
    r2.setAttribute("role", "none");
  } }), () => {
    var R4, h4, V3;
    let r2 = { open: t3.comboboxState.value === 0 }, b4 = { "aria-labelledby": (V3 = (R4 = o$6(t3.labelRef)) == null ? void 0 : R4.id) != null ? V3 : (h4 = o$6(t3.buttonRef)) == null ? void 0 : h4.id, id: e3, ref: t3.optionsRef, role: "listbox", "aria-multiselectable": t3.mode.value === 1 ? true : void 0 }, v2 = T$2(a4, ["hold"]);
    return A$6({ ourProps: b4, theirProps: v2, slot: r2, attrs: T4, slots: p2, features: N$3.RenderStrategy | N$3.Static, visible: f2.value, name: "ComboboxOptions" });
  };
} }), Ge$2 = /* @__PURE__ */ defineComponent({ name: "ComboboxOption", props: { as: { type: [Object, String], default: "li" }, value: { type: [Object, String, Number, Boolean] }, disabled: { type: Boolean, default: false } }, setup(a4, { slots: T4, attrs: p2, expose: O4 }) {
  let t3 = $$2("ComboboxOption"), e3 = `headlessui-combobox-option-${t$6()}`, y4 = ref(null);
  O4({ el: y4, $el: y4 });
  let f2 = computed(() => t3.activeOptionIndex.value !== null ? t3.options.value[t3.activeOptionIndex.value].id === e3 : false), r2 = computed(() => u$5(t3.mode.value, { [0]: () => t3.compare(toRaw(t3.value.value), toRaw(a4.value)), [1]: () => toRaw(t3.value.value).some((S4) => t3.compare(toRaw(S4), toRaw(a4.value))) })), b4 = computed(() => ({ disabled: a4.disabled, value: a4.value, domRef: y4 }));
  onMounted(() => t3.registerOption(e3, b4)), onUnmounted(() => t3.unregisterOption(e3)), watchEffect(() => {
    t3.comboboxState.value === 0 && f2.value && t3.activationTrigger.value !== 0 && nextTick(() => {
      var S4, F2;
      return (F2 = (S4 = o$6(y4)) == null ? void 0 : S4.scrollIntoView) == null ? void 0 : F2.call(S4, { block: "nearest" });
    });
  });
  function v2(S4) {
    if (a4.disabled)
      return S4.preventDefault();
    t3.selectOption(e3), n$4() || requestAnimationFrame(() => {
      var F2;
      return (F2 = o$6(t3.inputRef)) == null ? void 0 : F2.focus({ preventScroll: true });
    }), t3.mode.value === 0 && requestAnimationFrame(() => t3.closeCombobox());
  }
  function R4() {
    if (a4.disabled)
      return t3.goToOption(a$4.Nothing);
    t3.goToOption(a$4.Specific, e3);
  }
  let h4 = u$3();
  function V3(S4) {
    h4.update(S4);
  }
  function L3(S4) {
    h4.wasMoved(S4) && (a4.disabled || f2.value || t3.goToOption(a$4.Specific, e3, 0));
  }
  function k3(S4) {
    h4.wasMoved(S4) && (a4.disabled || f2.value && (t3.optionsPropsRef.value.hold || t3.goToOption(a$4.Nothing)));
  }
  return () => {
    let { disabled: S4 } = a4, F2 = { active: f2.value, selected: r2.value, disabled: S4 }, o2 = { id: e3, ref: y4, role: "option", tabIndex: S4 === true ? void 0 : -1, "aria-disabled": S4 === true ? true : void 0, "aria-selected": r2.value, disabled: void 0, onClick: v2, onFocus: R4, onPointerenter: V3, onMouseenter: V3, onPointermove: L3, onMousemove: L3, onPointerleave: k3, onMouseleave: k3 };
    return A$6({ ourProps: o2, theirProps: a4, slot: F2, attrs: p2, slots: T4, name: "ComboboxOption" });
  };
} });
function E$1(n2, e3, o2, r2) {
  c$3.isServer || watchEffect((t3) => {
    n2 = n2 != null ? n2 : window, n2.addEventListener(e3, o2, r2), t3(() => n2.removeEventListener(e3, o2, r2));
  });
}
var d$4 = ((r2) => (r2[r2.Forwards = 0] = "Forwards", r2[r2.Backwards = 1] = "Backwards", r2))(d$4 || {});
function n$2() {
  let o2 = ref(0);
  return w$2("keydown", (e3) => {
    e3.key === "Tab" && (o2.value = e3.shiftKey ? 1 : 0);
  }), o2;
}
function B(t3) {
  if (!t3)
    return /* @__PURE__ */ new Set();
  if (typeof t3 == "function")
    return new Set(t3());
  let n2 = /* @__PURE__ */ new Set();
  for (let r2 of t3.value) {
    let l2 = o$6(r2);
    l2 instanceof HTMLElement && n2.add(l2);
  }
  return n2;
}
var A$5 = ((e3) => (e3[e3.None = 1] = "None", e3[e3.InitialFocus = 2] = "InitialFocus", e3[e3.TabLock = 4] = "TabLock", e3[e3.FocusLock = 8] = "FocusLock", e3[e3.RestoreFocus = 16] = "RestoreFocus", e3[e3.All = 30] = "All", e3))(A$5 || {});
let ue$2 = Object.assign(/* @__PURE__ */ defineComponent({ name: "FocusTrap", props: { as: { type: [Object, String], default: "div" }, initialFocus: { type: Object, default: null }, features: { type: Number, default: 30 }, containers: { type: [Object, Function], default: ref(/* @__PURE__ */ new Set()) } }, inheritAttrs: false, setup(t3, { attrs: n2, slots: r2, expose: l2 }) {
  let o2 = ref(null);
  l2({ el: o2, $el: o2 });
  let i3 = computed(() => i$6(o2)), e3 = ref(false);
  onMounted(() => e3.value = true), onUnmounted(() => e3.value = false), $$1({ ownerDocument: i3 }, computed(() => e3.value && Boolean(t3.features & 16)));
  let m4 = z$2({ ownerDocument: i3, container: o2, initialFocus: computed(() => t3.initialFocus) }, computed(() => e3.value && Boolean(t3.features & 2)));
  J$1({ ownerDocument: i3, container: o2, containers: t3.containers, previousActiveElement: m4 }, computed(() => e3.value && Boolean(t3.features & 8)));
  let f2 = n$2();
  function a4(u3) {
    let T4 = o$6(o2);
    if (!T4)
      return;
    ((w3) => w3())(() => {
      u$5(f2.value, { [d$4.Forwards]: () => {
        P$1(T4, N$4.First, { skipElements: [u3.relatedTarget] });
      }, [d$4.Backwards]: () => {
        P$1(T4, N$4.Last, { skipElements: [u3.relatedTarget] });
      } });
    });
  }
  let s5 = ref(false);
  function F2(u3) {
    u3.key === "Tab" && (s5.value = true, requestAnimationFrame(() => {
      s5.value = false;
    }));
  }
  function H5(u3) {
    if (!e3.value)
      return;
    let T4 = B(t3.containers);
    o$6(o2) instanceof HTMLElement && T4.add(o$6(o2));
    let d4 = u3.relatedTarget;
    d4 instanceof HTMLElement && d4.dataset.headlessuiFocusGuard !== "true" && (N$2(T4, d4) || (s5.value ? P$1(o$6(o2), u$5(f2.value, { [d$4.Forwards]: () => N$4.Next, [d$4.Backwards]: () => N$4.Previous }) | N$4.WrapAround, { relativeTo: u3.target }) : u3.target instanceof HTMLElement && S$4(u3.target)));
  }
  return () => {
    let u3 = {}, T4 = { ref: o2, onKeydown: F2, onFocusout: H5 }, { features: d4, initialFocus: w3, containers: Q3, ...O4 } = t3;
    return h$3(Fragment, [Boolean(d4 & 4) && h$3(f$3, { as: "button", type: "button", "data-headlessui-focus-guard": true, onFocus: a4, features: s$3.Focusable }), A$6({ ourProps: T4, theirProps: { ...n2, ...O4 }, slot: u3, attrs: n2, slots: r2, name: "FocusTrap" }), Boolean(d4 & 4) && h$3(f$3, { as: "button", type: "button", "data-headlessui-focus-guard": true, onFocus: a4, features: s$3.Focusable })]);
  };
} }), { features: A$5 });
function W$2(t3) {
  let n2 = ref(t$2.slice());
  return watch([t3], ([r2], [l2]) => {
    l2 === true && r2 === false ? t$1(() => {
      n2.value.splice(0);
    }) : l2 === false && r2 === true && (n2.value = t$2.slice());
  }, { flush: "post" }), () => {
    var r2;
    return (r2 = n2.value.find((l2) => l2 != null && l2.isConnected)) != null ? r2 : null;
  };
}
function $$1({ ownerDocument: t3 }, n2) {
  let r2 = W$2(n2);
  onMounted(() => {
    watchEffect(() => {
      var l2, o2;
      n2.value || ((l2 = t3.value) == null ? void 0 : l2.activeElement) === ((o2 = t3.value) == null ? void 0 : o2.body) && S$4(r2());
    }, { flush: "post" });
  }), onUnmounted(() => {
    n2.value && S$4(r2());
  });
}
function z$2({ ownerDocument: t3, container: n2, initialFocus: r2 }, l2) {
  let o2 = ref(null), i3 = ref(false);
  return onMounted(() => i3.value = true), onUnmounted(() => i3.value = false), onMounted(() => {
    watch([n2, r2, l2], (e3, m4) => {
      if (e3.every((a4, s5) => (m4 == null ? void 0 : m4[s5]) === a4) || !l2.value)
        return;
      let f2 = o$6(n2);
      f2 && t$1(() => {
        var F2, H5;
        if (!i3.value)
          return;
        let a4 = o$6(r2), s5 = (F2 = t3.value) == null ? void 0 : F2.activeElement;
        if (a4) {
          if (a4 === s5) {
            o2.value = s5;
            return;
          }
        } else if (f2.contains(s5)) {
          o2.value = s5;
          return;
        }
        a4 ? S$4(a4) : P$1(f2, N$4.First | N$4.NoScroll) === T$3.Error && console.warn("There are no focusable elements inside the <FocusTrap />"), o2.value = (H5 = t3.value) == null ? void 0 : H5.activeElement;
      });
    }, { immediate: true, flush: "post" });
  }), o2;
}
function J$1({ ownerDocument: t3, container: n2, containers: r2, previousActiveElement: l2 }, o2) {
  var i3;
  E$1((i3 = t3.value) == null ? void 0 : i3.defaultView, "focus", (e3) => {
    if (!o2.value)
      return;
    let m4 = B(r2);
    o$6(n2) instanceof HTMLElement && m4.add(o$6(n2));
    let f2 = l2.value;
    if (!f2)
      return;
    let a4 = e3.target;
    a4 && a4 instanceof HTMLElement ? N$2(m4, a4) ? (l2.value = a4, S$4(a4)) : (e3.preventDefault(), e3.stopPropagation(), S$4(f2)) : S$4(l2.value);
  }, true);
}
function N$2(t3, n2) {
  for (let r2 of t3)
    if (r2.contains(n2))
      return true;
  return false;
}
function m$5(t3) {
  let e3 = shallowRef(t3.getSnapshot());
  return onUnmounted(t3.subscribe(() => {
    e3.value = t3.getSnapshot();
  })), e3;
}
function a$3(o2, r2) {
  let t3 = o2(), n2 = /* @__PURE__ */ new Set();
  return { getSnapshot() {
    return t3;
  }, subscribe(e3) {
    return n2.add(e3), () => n2.delete(e3);
  }, dispatch(e3, ...s5) {
    let i3 = r2[e3].call(t3, ...s5);
    i3 && (t3 = i3, n2.forEach((c3) => c3()));
  } };
}
function c$1() {
  let o2;
  return { before({ doc: e3 }) {
    var l2;
    let n2 = e3.documentElement;
    o2 = ((l2 = e3.defaultView) != null ? l2 : window).innerWidth - n2.clientWidth;
  }, after({ doc: e3, d: n2 }) {
    let t3 = e3.documentElement, l2 = t3.clientWidth - t3.offsetWidth, r2 = o2 - l2;
    n2.style(t3, "paddingRight", `${r2}px`);
  } };
}
function w() {
  if (!t$5())
    return {};
  let r2;
  return { before() {
    r2 = window.pageYOffset;
  }, after({ doc: n2, d: o2, meta: s5 }) {
    function i3(e3) {
      return s5.containers.flatMap((t3) => t3()).some((t3) => t3.contains(e3));
    }
    if (window.getComputedStyle(n2.documentElement).scrollBehavior !== "auto") {
      let e3 = o$4();
      e3.style(n2.documentElement, "scroll-behavior", "auto"), o2.add(() => o2.microTask(() => e3.dispose()));
    }
    o2.style(n2.body, "marginTop", `-${r2}px`), window.scrollTo(0, 0);
    let l2 = null;
    o2.addEventListener(n2, "click", (e3) => {
      if (e3.target instanceof HTMLElement)
        try {
          let t3 = e3.target.closest("a");
          if (!t3)
            return;
          let { hash: c3 } = new URL(t3.href), a4 = n2.querySelector(c3);
          a4 && !i3(a4) && (l2 = a4);
        } catch {
        }
    }, true), o2.addEventListener(n2, "touchmove", (e3) => {
      e3.target instanceof HTMLElement && !i3(e3.target) && e3.preventDefault();
    }, { passive: false }), o2.add(() => {
      window.scrollTo(0, window.pageYOffset + r2), l2 && l2.isConnected && (l2.scrollIntoView({ block: "nearest" }), l2 = null);
    });
  } };
}
function l$1() {
  return { before({ doc: e3, d: o2 }) {
    o2.style(e3.documentElement, "overflow", "hidden");
  } };
}
function m$4(e3) {
  let n2 = {};
  for (let t3 of e3)
    Object.assign(n2, t3(n2));
  return n2;
}
let a$2 = a$3(() => /* @__PURE__ */ new Map(), { PUSH(e3, n2) {
  var o2;
  let t3 = (o2 = this.get(e3)) != null ? o2 : { doc: e3, count: 0, d: o$4(), meta: /* @__PURE__ */ new Set() };
  return t3.count++, t3.meta.add(n2), this.set(e3, t3), this;
}, POP(e3, n2) {
  let t3 = this.get(e3);
  return t3 && (t3.count--, t3.meta.delete(n2)), this;
}, SCROLL_PREVENT({ doc: e3, d: n2, meta: t3 }) {
  let o2 = { doc: e3, d: n2, meta: m$4(t3) }, c3 = [w(), c$1(), l$1()];
  c3.forEach(({ before: r2 }) => r2 == null ? void 0 : r2(o2)), c3.forEach(({ after: r2 }) => r2 == null ? void 0 : r2(o2));
}, SCROLL_ALLOW({ d: e3 }) {
  e3.dispose();
}, TEARDOWN({ doc: e3 }) {
  this.delete(e3);
} });
a$2.subscribe(() => {
  let e3 = a$2.getSnapshot(), n2 = /* @__PURE__ */ new Map();
  for (let [t3] of e3)
    n2.set(t3, t3.documentElement.style.overflow);
  for (let t3 of e3.values()) {
    let o2 = n2.get(t3.doc) === "hidden", c3 = t3.count !== 0;
    (c3 && !o2 || !c3 && o2) && a$2.dispatch(t3.count > 0 ? "SCROLL_PREVENT" : "SCROLL_ALLOW", t3), t3.count === 0 && a$2.dispatch("TEARDOWN", t3);
  }
});
function d$3(t3, a4, n2) {
  let i3 = m$5(a$2), l2 = computed(() => {
    let e3 = t3.value ? i3.value.get(t3.value) : void 0;
    return e3 ? e3.count > 0 : false;
  });
  return watch([t3, a4], ([e3, m4], [r2], o2) => {
    if (!e3 || !m4)
      return;
    a$2.dispatch("PUSH", e3, n2);
    let f2 = false;
    o2(() => {
      f2 || (a$2.dispatch("POP", r2 != null ? r2 : e3, n2), f2 = true);
    });
  }, { immediate: true }), l2;
}
let i$2 = /* @__PURE__ */ new Map(), t = /* @__PURE__ */ new Map();
function E(d4, f2 = ref(true)) {
  watchEffect((o2) => {
    var a4;
    if (!f2.value)
      return;
    let e3 = o$6(d4);
    if (!e3)
      return;
    o2(function() {
      var u3;
      if (!e3)
        return;
      let r2 = (u3 = t.get(e3)) != null ? u3 : 1;
      if (r2 === 1 ? t.delete(e3) : t.set(e3, r2 - 1), r2 !== 1)
        return;
      let n2 = i$2.get(e3);
      n2 && (n2["aria-hidden"] === null ? e3.removeAttribute("aria-hidden") : e3.setAttribute("aria-hidden", n2["aria-hidden"]), e3.inert = n2.inert, i$2.delete(e3));
    });
    let l2 = (a4 = t.get(e3)) != null ? a4 : 0;
    t.set(e3, l2 + 1), l2 === 0 && (i$2.set(e3, { "aria-hidden": e3.getAttribute("aria-hidden"), inert: e3.inert }), e3.setAttribute("aria-hidden", "true"), e3.inert = true);
  });
}
function R$4({ defaultContainers: t3 = [], portals: o2, mainTreeNodeRef: s5 } = {}) {
  let i3 = ref(null), r2 = i$6(i3);
  function u3() {
    var l2;
    let n2 = [];
    for (let e3 of t3)
      e3 !== null && (e3 instanceof HTMLElement ? n2.push(e3) : "value" in e3 && e3.value instanceof HTMLElement && n2.push(e3.value));
    if (o2 != null && o2.value)
      for (let e3 of o2.value)
        n2.push(e3);
    for (let e3 of (l2 = r2 == null ? void 0 : r2.querySelectorAll("html > *, body > *")) != null ? l2 : [])
      e3 !== document.body && e3 !== document.head && e3 instanceof HTMLElement && e3.id !== "headlessui-portal-root" && (e3.contains(o$6(i3)) || n2.some((c3) => e3.contains(c3)) || n2.push(e3));
    return n2;
  }
  return { resolveContainers: u3, contains(n2) {
    return u3().some((l2) => l2.contains(n2));
  }, mainTreeNodeRef: i3, MainTreeNode() {
    return s5 != null ? null : h$3(f$3, { features: s$3.Hidden, ref: i3 });
  } };
}
let e = Symbol("ForcePortalRootContext");
function s$1() {
  return inject(e, false);
}
let u$2 = /* @__PURE__ */ defineComponent({ name: "ForcePortalRoot", props: { as: { type: [Object, String], default: "template" }, force: { type: Boolean, default: false } }, setup(o2, { slots: t3, attrs: r2 }) {
  return provide(e, o2.force), () => {
    let { force: f2, ...n2 } = o2;
    return A$6({ theirProps: n2, ourProps: {}, slot: {}, slots: t3, attrs: r2, name: "ForcePortalRoot" });
  };
} });
let u$1 = Symbol("StackContext");
var s = ((e3) => (e3[e3.Add = 0] = "Add", e3[e3.Remove = 1] = "Remove", e3))(s || {});
function y$1() {
  return inject(u$1, () => {
  });
}
function R$3({ type: o2, enabled: r2, element: e3, onUpdate: i3 }) {
  let a4 = y$1();
  function t3(...n2) {
    i3 == null || i3(...n2), a4(...n2);
  }
  onMounted(() => {
    watch(r2, (n2, d4) => {
      n2 ? t3(0, o2, e3) : d4 === true && t3(1, o2, e3);
    }, { immediate: true, flush: "sync" });
  }), onUnmounted(() => {
    r2.value && t3(1, o2, e3);
  }), provide(u$1, t3);
}
let u = Symbol("DescriptionContext");
function S$2({ slot: t3 = ref({}), name: i3 = "Description", props: o2 = {} } = {}) {
  let e3 = ref([]);
  function s5(n2) {
    return e3.value.push(n2), () => {
      let r2 = e3.value.indexOf(n2);
      r2 !== -1 && e3.value.splice(r2, 1);
    };
  }
  return provide(u, { register: s5, slot: t3, name: i3, props: o2 }), computed(() => e3.value.length > 0 ? e3.value.join(" ") : void 0);
}
function x(r2) {
  let e3 = i$6(r2);
  if (!e3) {
    if (r2 === null)
      return null;
    throw new Error(`[Headless UI]: Cannot find ownerDocument for contextElement: ${r2}`);
  }
  let u3 = e3.getElementById("headlessui-portal-root");
  if (u3)
    return u3;
  let t3 = e3.createElement("div");
  return t3.setAttribute("id", "headlessui-portal-root"), e3.body.appendChild(t3);
}
let _$2 = /* @__PURE__ */ defineComponent({ name: "Portal", props: { as: { type: [Object, String], default: "div" } }, setup(r2, { slots: e3, attrs: u3 }) {
  let t3 = ref(null), i3 = computed(() => i$6(t3)), l2 = s$1(), n2 = inject(C$1, null), o2 = ref(l2 === true || n2 == null ? x(t3.value) : n2.resolveTarget()), d4 = ref(false);
  onMounted(() => {
    d4.value = true;
  }), watchEffect(() => {
    l2 || n2 != null && (o2.value = n2.resolveTarget());
  });
  let c3 = inject(m$3, null), v2 = false, H5 = getCurrentInstance();
  return watch(t3, () => {
    if (v2 || !c3)
      return;
    let a4 = o$6(t3);
    a4 && (onUnmounted(c3.register(a4), H5), v2 = true);
  }), onUnmounted(() => {
    var g2, P2;
    let a4 = (g2 = i3.value) == null ? void 0 : g2.getElementById("headlessui-portal-root");
    a4 && o2.value === a4 && o2.value.children.length <= 0 && ((P2 = o2.value.parentElement) == null || P2.removeChild(o2.value));
  }), () => {
    if (!d4.value || o2.value === null)
      return null;
    let a4 = { ref: t3, "data-headlessui-portal": "" };
    return h$3(Teleport, { to: o2.value }, A$6({ ourProps: a4, theirProps: r2, slot: {}, attrs: u3, slots: e3, name: "Portal" }));
  };
} }), m$3 = Symbol("PortalParentContext");
function A$4() {
  let r2 = inject(m$3, null), e3 = ref([]);
  function u3(l2) {
    return e3.value.push(l2), r2 && r2.register(l2), () => t3(l2);
  }
  function t3(l2) {
    let n2 = e3.value.indexOf(l2);
    n2 !== -1 && e3.value.splice(n2, 1), r2 && r2.unregister(l2);
  }
  let i3 = { register: u3, unregister: t3, portals: e3 };
  return [e3, /* @__PURE__ */ defineComponent({ name: "PortalWrapper", setup(l2, { slots: n2 }) {
    return provide(m$3, i3), () => {
      var o2;
      return (o2 = n2.default) == null ? void 0 : o2.call(n2);
    };
  } })];
}
let C$1 = Symbol("PortalGroupContext"), N$1 = /* @__PURE__ */ defineComponent({ name: "PortalGroup", props: { as: { type: [Object, String], default: "template" }, target: { type: Object, default: null } }, setup(r2, { attrs: e3, slots: u3 }) {
  let t3 = reactive({ resolveTarget() {
    return r2.target;
  } });
  return provide(C$1, t3), () => {
    let { target: i3, ...l2 } = r2;
    return A$6({ theirProps: l2, ourProps: {}, slot: {}, attrs: e3, slots: u3, name: "PortalGroup" });
  };
} });
var be$2 = ((l2) => (l2[l2.Open = 0] = "Open", l2[l2.Closed = 1] = "Closed", l2))(be$2 || {});
let j$1 = Symbol("DialogContext");
function T$1(t3) {
  let n2 = inject(j$1, null);
  if (n2 === null) {
    let l2 = new Error(`<${t3} /> is missing a parent <Dialog /> component.`);
    throw Error.captureStackTrace && Error.captureStackTrace(l2, T$1), l2;
  }
  return n2;
}
let I = "DC8F892D-2EBD-447C-A4C8-A03058436FF4", _e$1 = /* @__PURE__ */ defineComponent({ name: "Dialog", inheritAttrs: false, props: { as: { type: [Object, String], default: "div" }, static: { type: Boolean, default: false }, unmount: { type: Boolean, default: true }, open: { type: [Boolean, String], default: I }, initialFocus: { type: Object, default: null }, id: { type: String, default: () => `headlessui-dialog-${t$6()}` }, role: { type: String, default: "dialog" } }, emits: { close: (t3) => true }, setup(t3, { emit: n2, attrs: l2, slots: u3, expose: i3 }) {
  var U2;
  let r2 = ref(false);
  onMounted(() => {
    r2.value = true;
  });
  let s$12 = false, v2 = computed(() => t3.role === "dialog" || t3.role === "alertdialog" ? t3.role : (s$12 || (s$12 = true, console.warn(`Invalid role [${v2}] passed to <Dialog />. Only \`dialog\` and and \`alertdialog\` are supported. Using \`dialog\` instead.`)), "dialog")), m4 = ref(0), S4 = l$2(), R4 = computed(() => t3.open === I && S4 !== null ? (S4.value & i$3.Open) === i$3.Open : t3.open), c3 = ref(null), E$22 = computed(() => i$6(c3));
  if (i3({ el: c3, $el: c3 }), !(t3.open !== I || S4 !== null))
    throw new Error("You forgot to provide an `open` prop to the `Dialog`.");
  if (typeof R4.value != "boolean")
    throw new Error(`You provided an \`open\` prop to the \`Dialog\`, but the value is not a boolean. Received: ${R4.value === I ? void 0 : t3.open}`);
  let f2 = computed(() => r2.value && R4.value ? 0 : 1), k3 = computed(() => f2.value === 0), w3 = computed(() => m4.value > 1), H5 = inject(j$1, null) !== null, [V3, J3] = A$4(), { resolveContainers: A2, mainTreeNodeRef: N3, MainTreeNode: Q3 } = R$4({ portals: V3, defaultContainers: [computed(() => {
    var e3;
    return (e3 = h4.panelRef.value) != null ? e3 : c3.value;
  })] }), X4 = computed(() => w3.value ? "parent" : "leaf"), K3 = computed(() => S4 !== null ? (S4.value & i$3.Closing) === i$3.Closing : false), Z3 = computed(() => H5 || K3.value ? false : k3.value), ee3 = computed(() => {
    var e3, a4, p2;
    return (p2 = Array.from((a4 = (e3 = E$22.value) == null ? void 0 : e3.querySelectorAll("body > *")) != null ? a4 : []).find((d4) => d4.id === "headlessui-portal-root" ? false : d4.contains(o$6(N3)) && d4 instanceof HTMLElement)) != null ? p2 : null;
  });
  E(ee3, Z3);
  let te2 = computed(() => w3.value ? true : k3.value), le2 = computed(() => {
    var e3, a4, p2;
    return (p2 = Array.from((a4 = (e3 = E$22.value) == null ? void 0 : e3.querySelectorAll("[data-headlessui-portal]")) != null ? a4 : []).find((d4) => d4.contains(o$6(N3)) && d4 instanceof HTMLElement)) != null ? p2 : null;
  });
  E(le2, te2), R$3({ type: "Dialog", enabled: computed(() => f2.value === 0), element: c3, onUpdate: (e3, a4) => {
    if (a4 === "Dialog")
      return u$5(e3, { [s.Add]: () => m4.value += 1, [s.Remove]: () => m4.value -= 1 });
  } });
  let ae2 = S$2({ name: "DialogDescription", slot: computed(() => ({ open: R4.value })) }), M4 = ref(null), h4 = { titleId: M4, panelRef: ref(null), dialogState: f2, setTitleId(e3) {
    M4.value !== e3 && (M4.value = e3);
  }, close() {
    n2("close", false);
  } };
  provide(j$1, h4);
  let oe3 = computed(() => !(!k3.value || w3.value));
  w$1(A2, (e3, a4) => {
    h4.close(), nextTick(() => a4 == null ? void 0 : a4.focus());
  }, oe3);
  let re3 = computed(() => !(w3.value || f2.value !== 0));
  E$1((U2 = E$22.value) == null ? void 0 : U2.defaultView, "keydown", (e3) => {
    re3.value && (e3.defaultPrevented || e3.key === o$5.Escape && (e3.preventDefault(), e3.stopPropagation(), h4.close()));
  });
  let ne2 = computed(() => !(K3.value || f2.value !== 0 || H5));
  return d$3(E$22, ne2, (e3) => {
    var a4;
    return { containers: [...(a4 = e3.containers) != null ? a4 : [], A2] };
  }), watchEffect((e3) => {
    if (f2.value !== 0)
      return;
    let a4 = o$6(c3);
    if (!a4)
      return;
    let p2 = new ResizeObserver((d4) => {
      for (let B3 of d4) {
        let D3 = B3.target.getBoundingClientRect();
        D3.x === 0 && D3.y === 0 && D3.width === 0 && D3.height === 0 && h4.close();
      }
    });
    p2.observe(a4), e3(() => p2.disconnect());
  }), () => {
    let { id: e3, open: a4, initialFocus: p2, ...d4 } = t3, B3 = { ...l2, ref: c3, id: e3, role: v2.value, "aria-modal": f2.value === 0 ? true : void 0, "aria-labelledby": M4.value, "aria-describedby": ae2.value }, D3 = { open: f2.value === 0 };
    return h$3(u$2, { force: true }, () => [h$3(_$2, () => h$3(N$1, { target: c3.value }, () => h$3(u$2, { force: false }, () => h$3(ue$2, { initialFocus: p2, containers: A2, features: k3.value ? u$5(X4.value, { parent: ue$2.features.RestoreFocus, leaf: ue$2.features.All & ~ue$2.features.FocusLock }) : ue$2.features.None }, () => h$3(J3, {}, () => A$6({ ourProps: B3, theirProps: { ...d4, ...l2 }, slot: D3, attrs: l2, slots: u3, visible: f2.value === 0, features: N$3.RenderStrategy | N$3.Static, name: "Dialog" })))))), h$3(Q3)]);
  };
} }), Ye$1 = /* @__PURE__ */ defineComponent({ name: "DialogPanel", props: { as: { type: [Object, String], default: "div" }, id: { type: String, default: () => `headlessui-dialog-panel-${t$6()}` } }, setup(t3, { attrs: n2, slots: l2, expose: u3 }) {
  let i3 = T$1("DialogPanel");
  u3({ el: i3.panelRef, $el: i3.panelRef });
  function r2(s5) {
    s5.stopPropagation();
  }
  return () => {
    let { id: s5, ...v2 } = t3, m4 = { id: s5, ref: i3.panelRef, onClick: r2 };
    return A$6({ ourProps: m4, theirProps: v2, slot: { open: i3.dialogState.value === 0 }, attrs: n2, slots: l2, name: "DialogPanel" });
  };
} }), ze$2 = /* @__PURE__ */ defineComponent({ name: "DialogTitle", props: { as: { type: [Object, String], default: "h2" }, id: { type: String, default: () => `headlessui-dialog-title-${t$6()}` } }, setup(t3, { attrs: n2, slots: l2 }) {
  let u3 = T$1("DialogTitle");
  return onMounted(() => {
    u3.setTitleId(t3.id), onUnmounted(() => u3.setTitleId(null));
  }), () => {
    let { id: i3, ...r2 } = t3;
    return A$6({ ourProps: { id: i3 }, theirProps: r2, slot: { open: u3.dialogState.value === 0 }, attrs: n2, slots: l2, name: "DialogTitle" });
  };
} });
let a$1 = /([\u2700-\u27BF]|[\uE000-\uF8FF]|\uD83C[\uDC00-\uDFFF]|\uD83D[\uDC00-\uDFFF]|[\u2011-\u26FF]|\uD83E[\uDD10-\uDDFF])/g;
function o$2(e3) {
  var r2, i3;
  let n2 = (r2 = e3.innerText) != null ? r2 : "", t3 = e3.cloneNode(true);
  if (!(t3 instanceof HTMLElement))
    return n2;
  let u3 = false;
  for (let f2 of t3.querySelectorAll('[hidden],[aria-hidden],[role="img"]'))
    f2.remove(), u3 = true;
  let l2 = u3 ? (i3 = t3.innerText) != null ? i3 : "" : n2;
  return a$1.test(l2) && (l2 = l2.replace(a$1, "")), l2;
}
function g$2(e3) {
  let n2 = e3.getAttribute("aria-label");
  if (typeof n2 == "string")
    return n2.trim();
  let t3 = e3.getAttribute("aria-labelledby");
  if (t3) {
    let u3 = t3.split(" ").map((l2) => {
      let r2 = document.getElementById(l2);
      if (r2) {
        let i3 = r2.getAttribute("aria-label");
        return typeof i3 == "string" ? i3.trim() : o$2(r2).trim();
      }
      return null;
    }).filter(Boolean);
    if (u3.length > 0)
      return u3.join(", ");
  }
  return o$2(e3).trim();
}
function p(a4) {
  let t3 = ref(""), r2 = ref("");
  return () => {
    let e3 = o$6(a4);
    if (!e3)
      return "";
    let l2 = e3.innerText;
    if (t3.value === l2)
      return r2.value;
    let u3 = g$2(e3).trim().toLowerCase();
    return t3.value = l2, r2.value = u3, u3;
  };
}
function pe$3(t3, v2) {
  return t3 === v2;
}
var ce$1 = ((l2) => (l2[l2.Open = 0] = "Open", l2[l2.Closed = 1] = "Closed", l2))(ce$1 || {}), ve$1 = ((l2) => (l2[l2.Single = 0] = "Single", l2[l2.Multi = 1] = "Multi", l2))(ve$1 || {}), be$1 = ((l2) => (l2[l2.Pointer = 0] = "Pointer", l2[l2.Other = 1] = "Other", l2))(be$1 || {});
function me$3(t3) {
  requestAnimationFrame(() => requestAnimationFrame(t3));
}
let $ = Symbol("ListboxContext");
function A$3(t3) {
  let v2 = inject($, null);
  if (v2 === null) {
    let l2 = new Error(`<${t3} /> is missing a parent <Listbox /> component.`);
    throw Error.captureStackTrace && Error.captureStackTrace(l2, A$3), l2;
  }
  return v2;
}
let Ie$4 = /* @__PURE__ */ defineComponent({ name: "Listbox", emits: { "update:modelValue": (t3) => true }, props: { as: { type: [Object, String], default: "template" }, disabled: { type: [Boolean], default: false }, by: { type: [String, Function], default: () => pe$3 }, horizontal: { type: [Boolean], default: false }, modelValue: { type: [Object, String, Number, Boolean], default: void 0 }, defaultValue: { type: [Object, String, Number, Boolean], default: void 0 }, form: { type: String, optional: true }, name: { type: String, optional: true }, multiple: { type: [Boolean], default: false } }, inheritAttrs: false, setup(t3, { slots: v2, attrs: l2, emit: L3 }) {
  let e3 = ref(1), d4 = ref(null), b4 = ref(null), m4 = ref(null), f2 = ref([]), o2 = ref(""), i3 = ref(null), T4 = ref(1);
  function k3(a4 = (n2) => n2) {
    let n2 = i3.value !== null ? f2.value[i3.value] : null, u3 = O$1(a4(f2.value.slice()), (O4) => o$6(O4.dataRef.domRef)), s5 = n2 ? u3.indexOf(n2) : null;
    return s5 === -1 && (s5 = null), { options: u3, activeOptionIndex: s5 };
  }
  let y4 = computed(() => t3.multiple ? 1 : 0), [h4, M4] = d$6(computed(() => t3.modelValue), (a4) => L3("update:modelValue", a4), computed(() => t3.defaultValue)), w3 = computed(() => h4.value === void 0 ? u$5(y4.value, { [1]: [], [0]: void 0 }) : h4.value), r2 = { listboxState: e3, value: w3, mode: y4, compare(a4, n2) {
    if (typeof t3.by == "string") {
      let u3 = t3.by;
      return (a4 == null ? void 0 : a4[u3]) === (n2 == null ? void 0 : n2[u3]);
    }
    return t3.by(a4, n2);
  }, orientation: computed(() => t3.horizontal ? "horizontal" : "vertical"), labelRef: d4, buttonRef: b4, optionsRef: m4, disabled: computed(() => t3.disabled), options: f2, searchQuery: o2, activeOptionIndex: i3, activationTrigger: T4, closeListbox() {
    t3.disabled || e3.value !== 1 && (e3.value = 1, i3.value = null);
  }, openListbox() {
    t3.disabled || e3.value !== 0 && (e3.value = 0);
  }, goToOption(a4, n2, u3) {
    if (t3.disabled || e3.value === 1)
      return;
    let s5 = k3(), O4 = x$1(a4 === a$4.Specific ? { focus: a$4.Specific, id: n2 } : { focus: a4 }, { resolveItems: () => s5.options, resolveActiveIndex: () => s5.activeOptionIndex, resolveId: (P2) => P2.id, resolveDisabled: (P2) => P2.dataRef.disabled });
    o2.value = "", i3.value = O4, T4.value = u3 != null ? u3 : 1, f2.value = s5.options;
  }, search(a4) {
    if (t3.disabled || e3.value === 1)
      return;
    let u3 = o2.value !== "" ? 0 : 1;
    o2.value += a4.toLowerCase();
    let O4 = (i3.value !== null ? f2.value.slice(i3.value + u3).concat(f2.value.slice(0, i3.value + u3)) : f2.value).find((I3) => I3.dataRef.textValue.startsWith(o2.value) && !I3.dataRef.disabled), P2 = O4 ? f2.value.indexOf(O4) : -1;
    P2 === -1 || P2 === i3.value || (i3.value = P2, T4.value = 1);
  }, clearSearch() {
    t3.disabled || e3.value !== 1 && o2.value !== "" && (o2.value = "");
  }, registerOption(a4, n2) {
    let u3 = k3((s5) => [...s5, { id: a4, dataRef: n2 }]);
    f2.value = u3.options, i3.value = u3.activeOptionIndex;
  }, unregisterOption(a4) {
    let n2 = k3((u3) => {
      let s5 = u3.findIndex((O4) => O4.id === a4);
      return s5 !== -1 && u3.splice(s5, 1), u3;
    });
    f2.value = n2.options, i3.value = n2.activeOptionIndex, T4.value = 1;
  }, theirOnChange(a4) {
    t3.disabled || M4(a4);
  }, select(a4) {
    t3.disabled || M4(u$5(y4.value, { [0]: () => a4, [1]: () => {
      let n2 = toRaw(r2.value.value).slice(), u3 = toRaw(a4), s5 = n2.findIndex((O4) => r2.compare(u3, toRaw(O4)));
      return s5 === -1 ? n2.push(u3) : n2.splice(s5, 1), n2;
    } }));
  } };
  w$1([b4, m4], (a4, n2) => {
    var u3;
    r2.closeListbox(), w$3(n2, h$2.Loose) || (a4.preventDefault(), (u3 = o$6(b4)) == null || u3.focus());
  }, computed(() => e3.value === 0)), provide($, r2), t$4(computed(() => u$5(e3.value, { [0]: i$3.Open, [1]: i$3.Closed })));
  let x3 = computed(() => {
    var a4;
    return (a4 = o$6(b4)) == null ? void 0 : a4.closest("form");
  });
  return onMounted(() => {
    watch([x3], () => {
      if (!x3.value || t3.defaultValue === void 0)
        return;
      function a4() {
        r2.theirOnChange(t3.defaultValue);
      }
      return x3.value.addEventListener("reset", a4), () => {
        var n2;
        (n2 = x3.value) == null || n2.removeEventListener("reset", a4);
      };
    }, { immediate: true });
  }), () => {
    let { name: a4, modelValue: n2, disabled: u3, form: s5, ...O4 } = t3, P2 = { open: e3.value === 0, disabled: u3, value: w3.value };
    return h$3(Fragment, [...a4 != null && w3.value != null ? e$1({ [a4]: w3.value }).map(([I3, Q3]) => h$3(f$3, E$2({ features: s$3.Hidden, key: I3, as: "input", type: "hidden", hidden: true, readOnly: true, form: s5, name: I3, value: Q3 }))) : [], A$6({ ourProps: {}, theirProps: { ...l2, ...T$2(O4, ["defaultValue", "onUpdate:modelValue", "horizontal", "multiple", "by"]) }, slot: P2, slots: v2, attrs: l2, name: "Listbox" })]);
  };
} }), je$3 = /* @__PURE__ */ defineComponent({ name: "ListboxButton", props: { as: { type: [Object, String], default: "button" }, id: { type: String, default: () => `headlessui-listbox-button-${t$6()}` } }, setup(t3, { attrs: v2, slots: l2, expose: L3 }) {
  let e3 = A$3("ListboxButton");
  L3({ el: e3.buttonRef, $el: e3.buttonRef });
  function d4(o2) {
    switch (o2.key) {
      case o$5.Space:
      case o$5.Enter:
      case o$5.ArrowDown:
        o2.preventDefault(), e3.openListbox(), nextTick(() => {
          var i3;
          (i3 = o$6(e3.optionsRef)) == null || i3.focus({ preventScroll: true }), e3.value.value || e3.goToOption(a$4.First);
        });
        break;
      case o$5.ArrowUp:
        o2.preventDefault(), e3.openListbox(), nextTick(() => {
          var i3;
          (i3 = o$6(e3.optionsRef)) == null || i3.focus({ preventScroll: true }), e3.value.value || e3.goToOption(a$4.Last);
        });
        break;
    }
  }
  function b4(o2) {
    switch (o2.key) {
      case o$5.Space:
        o2.preventDefault();
        break;
    }
  }
  function m4(o2) {
    e3.disabled.value || (e3.listboxState.value === 0 ? (e3.closeListbox(), nextTick(() => {
      var i3;
      return (i3 = o$6(e3.buttonRef)) == null ? void 0 : i3.focus({ preventScroll: true });
    })) : (o2.preventDefault(), e3.openListbox(), me$3(() => {
      var i3;
      return (i3 = o$6(e3.optionsRef)) == null ? void 0 : i3.focus({ preventScroll: true });
    })));
  }
  let f2 = s$4(computed(() => ({ as: t3.as, type: v2.type })), e3.buttonRef);
  return () => {
    var y4, h4;
    let o2 = { open: e3.listboxState.value === 0, disabled: e3.disabled.value, value: e3.value.value }, { id: i3, ...T4 } = t3, k3 = { ref: e3.buttonRef, id: i3, type: f2.value, "aria-haspopup": "listbox", "aria-controls": (y4 = o$6(e3.optionsRef)) == null ? void 0 : y4.id, "aria-expanded": e3.listboxState.value === 0, "aria-labelledby": e3.labelRef.value ? [(h4 = o$6(e3.labelRef)) == null ? void 0 : h4.id, i3].join(" ") : void 0, disabled: e3.disabled.value === true ? true : void 0, onKeydown: d4, onKeyup: b4, onClick: m4 };
    return A$6({ ourProps: k3, theirProps: T4, slot: o2, attrs: v2, slots: l2, name: "ListboxButton" });
  };
} }), Ae$1 = /* @__PURE__ */ defineComponent({ name: "ListboxOptions", props: { as: { type: [Object, String], default: "ul" }, static: { type: Boolean, default: false }, unmount: { type: Boolean, default: true }, id: { type: String, default: () => `headlessui-listbox-options-${t$6()}` } }, setup(t3, { attrs: v2, slots: l2, expose: L3 }) {
  let e3 = A$3("ListboxOptions"), d4 = ref(null);
  L3({ el: e3.optionsRef, $el: e3.optionsRef });
  function b4(o2) {
    switch (d4.value && clearTimeout(d4.value), o2.key) {
      case o$5.Space:
        if (e3.searchQuery.value !== "")
          return o2.preventDefault(), o2.stopPropagation(), e3.search(o2.key);
      case o$5.Enter:
        if (o2.preventDefault(), o2.stopPropagation(), e3.activeOptionIndex.value !== null) {
          let i3 = e3.options.value[e3.activeOptionIndex.value];
          e3.select(i3.dataRef.value);
        }
        e3.mode.value === 0 && (e3.closeListbox(), nextTick(() => {
          var i3;
          return (i3 = o$6(e3.buttonRef)) == null ? void 0 : i3.focus({ preventScroll: true });
        }));
        break;
      case u$5(e3.orientation.value, { vertical: o$5.ArrowDown, horizontal: o$5.ArrowRight }):
        return o2.preventDefault(), o2.stopPropagation(), e3.goToOption(a$4.Next);
      case u$5(e3.orientation.value, { vertical: o$5.ArrowUp, horizontal: o$5.ArrowLeft }):
        return o2.preventDefault(), o2.stopPropagation(), e3.goToOption(a$4.Previous);
      case o$5.Home:
      case o$5.PageUp:
        return o2.preventDefault(), o2.stopPropagation(), e3.goToOption(a$4.First);
      case o$5.End:
      case o$5.PageDown:
        return o2.preventDefault(), o2.stopPropagation(), e3.goToOption(a$4.Last);
      case o$5.Escape:
        o2.preventDefault(), o2.stopPropagation(), e3.closeListbox(), nextTick(() => {
          var i3;
          return (i3 = o$6(e3.buttonRef)) == null ? void 0 : i3.focus({ preventScroll: true });
        });
        break;
      case o$5.Tab:
        o2.preventDefault(), o2.stopPropagation();
        break;
      default:
        o2.key.length === 1 && (e3.search(o2.key), d4.value = setTimeout(() => e3.clearSearch(), 350));
        break;
    }
  }
  let m4 = l$2(), f2 = computed(() => m4 !== null ? (m4.value & i$3.Open) === i$3.Open : e3.listboxState.value === 0);
  return () => {
    var y4, h4, M4, w3;
    let o2 = { open: e3.listboxState.value === 0 }, { id: i3, ...T4 } = t3, k3 = { "aria-activedescendant": e3.activeOptionIndex.value === null || (y4 = e3.options.value[e3.activeOptionIndex.value]) == null ? void 0 : y4.id, "aria-multiselectable": e3.mode.value === 1 ? true : void 0, "aria-labelledby": (w3 = (h4 = o$6(e3.labelRef)) == null ? void 0 : h4.id) != null ? w3 : (M4 = o$6(e3.buttonRef)) == null ? void 0 : M4.id, "aria-orientation": e3.orientation.value, id: i3, onKeydown: b4, role: "listbox", tabIndex: 0, ref: e3.optionsRef };
    return A$6({ ourProps: k3, theirProps: T4, slot: o2, attrs: v2, slots: l2, features: N$3.RenderStrategy | N$3.Static, visible: f2.value, name: "ListboxOptions" });
  };
} }), Fe$1 = /* @__PURE__ */ defineComponent({ name: "ListboxOption", props: { as: { type: [Object, String], default: "li" }, value: { type: [Object, String, Number, Boolean] }, disabled: { type: Boolean, default: false }, id: { type: String, default: () => `headlessui-listbox.option-${t$6()}` } }, setup(t3, { slots: v2, attrs: l2, expose: L3 }) {
  let e3 = A$3("ListboxOption"), d4 = ref(null);
  L3({ el: d4, $el: d4 });
  let b4 = computed(() => e3.activeOptionIndex.value !== null ? e3.options.value[e3.activeOptionIndex.value].id === t3.id : false), m4 = computed(() => u$5(e3.mode.value, { [0]: () => e3.compare(toRaw(e3.value.value), toRaw(t3.value)), [1]: () => toRaw(e3.value.value).some((r2) => e3.compare(toRaw(r2), toRaw(t3.value))) })), f2 = computed(() => u$5(e3.mode.value, { [1]: () => {
    var x3;
    let r2 = toRaw(e3.value.value);
    return ((x3 = e3.options.value.find((a4) => r2.some((n2) => e3.compare(toRaw(n2), toRaw(a4.dataRef.value))))) == null ? void 0 : x3.id) === t3.id;
  }, [0]: () => m4.value })), o2 = p(d4), i3 = computed(() => ({ disabled: t3.disabled, value: t3.value, get textValue() {
    return o2();
  }, domRef: d4 }));
  onMounted(() => e3.registerOption(t3.id, i3)), onUnmounted(() => e3.unregisterOption(t3.id)), onMounted(() => {
    watch([e3.listboxState, m4], () => {
      e3.listboxState.value === 0 && m4.value && u$5(e3.mode.value, { [1]: () => {
        f2.value && e3.goToOption(a$4.Specific, t3.id);
      }, [0]: () => {
        e3.goToOption(a$4.Specific, t3.id);
      } });
    }, { immediate: true });
  }), watchEffect(() => {
    e3.listboxState.value === 0 && b4.value && e3.activationTrigger.value !== 0 && nextTick(() => {
      var r2, x3;
      return (x3 = (r2 = o$6(d4)) == null ? void 0 : r2.scrollIntoView) == null ? void 0 : x3.call(r2, { block: "nearest" });
    });
  });
  function T4(r2) {
    if (t3.disabled)
      return r2.preventDefault();
    e3.select(t3.value), e3.mode.value === 0 && (e3.closeListbox(), nextTick(() => {
      var x3;
      return (x3 = o$6(e3.buttonRef)) == null ? void 0 : x3.focus({ preventScroll: true });
    }));
  }
  function k3() {
    if (t3.disabled)
      return e3.goToOption(a$4.Nothing);
    e3.goToOption(a$4.Specific, t3.id);
  }
  let y4 = u$3();
  function h4(r2) {
    y4.update(r2);
  }
  function M4(r2) {
    y4.wasMoved(r2) && (t3.disabled || b4.value || e3.goToOption(a$4.Specific, t3.id, 0));
  }
  function w3(r2) {
    y4.wasMoved(r2) && (t3.disabled || b4.value && e3.goToOption(a$4.Nothing));
  }
  return () => {
    let { disabled: r2 } = t3, x3 = { active: b4.value, selected: m4.value, disabled: r2 }, { id: a4, value: n2, disabled: u3, ...s5 } = t3, O4 = { id: a4, ref: d4, role: "option", tabIndex: r2 === true ? void 0 : -1, "aria-disabled": r2 === true ? true : void 0, "aria-selected": m4.value, disabled: void 0, onClick: T4, onFocus: k3, onPointerenter: h4, onMouseenter: h4, onPointermove: M4, onMousemove: M4, onPointerleave: w3, onMouseleave: w3 };
    return A$6({ ourProps: O4, theirProps: s5, slot: x3, attrs: l2, slots: v2, name: "ListboxOption" });
  };
} });
var Y$1 = ((l2) => (l2[l2.Open = 0] = "Open", l2[l2.Closed = 1] = "Closed", l2))(Y$1 || {}), Z$1 = ((l2) => (l2[l2.Pointer = 0] = "Pointer", l2[l2.Other = 1] = "Other", l2))(Z$1 || {});
function ee(r2) {
  requestAnimationFrame(() => requestAnimationFrame(r2));
}
let A$2 = Symbol("MenuContext");
function O(r2) {
  let b4 = inject(A$2, null);
  if (b4 === null) {
    let l2 = new Error(`<${r2} /> is missing a parent <Menu /> component.`);
    throw Error.captureStackTrace && Error.captureStackTrace(l2, O), l2;
  }
  return b4;
}
let Ie$3 = /* @__PURE__ */ defineComponent({ name: "Menu", props: { as: { type: [Object, String], default: "template" } }, setup(r2, { slots: b4, attrs: l2 }) {
  let I3 = ref(1), e3 = ref(null), f2 = ref(null), s5 = ref([]), g2 = ref(""), d4 = ref(null), o2 = ref(1);
  function t3(a4 = (i3) => i3) {
    let i3 = d4.value !== null ? s5.value[d4.value] : null, u3 = O$1(a4(s5.value.slice()), (v2) => o$6(v2.dataRef.domRef)), n2 = i3 ? u3.indexOf(i3) : null;
    return n2 === -1 && (n2 = null), { items: u3, activeItemIndex: n2 };
  }
  let p2 = { menuState: I3, buttonRef: e3, itemsRef: f2, items: s5, searchQuery: g2, activeItemIndex: d4, activationTrigger: o2, closeMenu: () => {
    I3.value = 1, d4.value = null;
  }, openMenu: () => I3.value = 0, goToItem(a4, i3, u3) {
    let n2 = t3(), v2 = x$1(a4 === a$4.Specific ? { focus: a$4.Specific, id: i3 } : { focus: a4 }, { resolveItems: () => n2.items, resolveActiveIndex: () => n2.activeItemIndex, resolveId: (M4) => M4.id, resolveDisabled: (M4) => M4.dataRef.disabled });
    g2.value = "", d4.value = v2, o2.value = u3 != null ? u3 : 1, s5.value = n2.items;
  }, search(a4) {
    let u3 = g2.value !== "" ? 0 : 1;
    g2.value += a4.toLowerCase();
    let v2 = (d4.value !== null ? s5.value.slice(d4.value + u3).concat(s5.value.slice(0, d4.value + u3)) : s5.value).find((x3) => x3.dataRef.textValue.startsWith(g2.value) && !x3.dataRef.disabled), M4 = v2 ? s5.value.indexOf(v2) : -1;
    M4 === -1 || M4 === d4.value || (d4.value = M4, o2.value = 1);
  }, clearSearch() {
    g2.value = "";
  }, registerItem(a4, i3) {
    let u3 = t3((n2) => [...n2, { id: a4, dataRef: i3 }]);
    s5.value = u3.items, d4.value = u3.activeItemIndex, o2.value = 1;
  }, unregisterItem(a4) {
    let i3 = t3((u3) => {
      let n2 = u3.findIndex((v2) => v2.id === a4);
      return n2 !== -1 && u3.splice(n2, 1), u3;
    });
    s5.value = i3.items, d4.value = i3.activeItemIndex, o2.value = 1;
  } };
  return w$1([e3, f2], (a4, i3) => {
    var u3;
    p2.closeMenu(), w$3(i3, h$2.Loose) || (a4.preventDefault(), (u3 = o$6(e3)) == null || u3.focus());
  }, computed(() => I3.value === 0)), provide(A$2, p2), t$4(computed(() => u$5(I3.value, { [0]: i$3.Open, [1]: i$3.Closed }))), () => {
    let a4 = { open: I3.value === 0, close: p2.closeMenu };
    return A$6({ ourProps: {}, theirProps: r2, slot: a4, slots: b4, attrs: l2, name: "Menu" });
  };
} }), ge$3 = /* @__PURE__ */ defineComponent({ name: "MenuButton", props: { disabled: { type: Boolean, default: false }, as: { type: [Object, String], default: "button" }, id: { type: String, default: () => `headlessui-menu-button-${t$6()}` } }, setup(r2, { attrs: b4, slots: l2, expose: I3 }) {
  let e3 = O("MenuButton");
  I3({ el: e3.buttonRef, $el: e3.buttonRef });
  function f2(o2) {
    switch (o2.key) {
      case o$5.Space:
      case o$5.Enter:
      case o$5.ArrowDown:
        o2.preventDefault(), o2.stopPropagation(), e3.openMenu(), nextTick(() => {
          var t3;
          (t3 = o$6(e3.itemsRef)) == null || t3.focus({ preventScroll: true }), e3.goToItem(a$4.First);
        });
        break;
      case o$5.ArrowUp:
        o2.preventDefault(), o2.stopPropagation(), e3.openMenu(), nextTick(() => {
          var t3;
          (t3 = o$6(e3.itemsRef)) == null || t3.focus({ preventScroll: true }), e3.goToItem(a$4.Last);
        });
        break;
    }
  }
  function s5(o2) {
    switch (o2.key) {
      case o$5.Space:
        o2.preventDefault();
        break;
    }
  }
  function g2(o2) {
    r2.disabled || (e3.menuState.value === 0 ? (e3.closeMenu(), nextTick(() => {
      var t3;
      return (t3 = o$6(e3.buttonRef)) == null ? void 0 : t3.focus({ preventScroll: true });
    })) : (o2.preventDefault(), e3.openMenu(), ee(() => {
      var t3;
      return (t3 = o$6(e3.itemsRef)) == null ? void 0 : t3.focus({ preventScroll: true });
    })));
  }
  let d4 = s$4(computed(() => ({ as: r2.as, type: b4.type })), e3.buttonRef);
  return () => {
    var i3;
    let o2 = { open: e3.menuState.value === 0 }, { id: t3, ...p2 } = r2, a4 = { ref: e3.buttonRef, id: t3, type: d4.value, "aria-haspopup": "menu", "aria-controls": (i3 = o$6(e3.itemsRef)) == null ? void 0 : i3.id, "aria-expanded": e3.menuState.value === 0, onKeydown: f2, onKeyup: s5, onClick: g2 };
    return A$6({ ourProps: a4, theirProps: p2, slot: o2, attrs: b4, slots: l2, name: "MenuButton" });
  };
} }), Se$3 = /* @__PURE__ */ defineComponent({ name: "MenuItems", props: { as: { type: [Object, String], default: "div" }, static: { type: Boolean, default: false }, unmount: { type: Boolean, default: true }, id: { type: String, default: () => `headlessui-menu-items-${t$6()}` } }, setup(r2, { attrs: b4, slots: l2, expose: I3 }) {
  let e3 = O("MenuItems"), f2 = ref(null);
  I3({ el: e3.itemsRef, $el: e3.itemsRef }), i$4({ container: computed(() => o$6(e3.itemsRef)), enabled: computed(() => e3.menuState.value === 0), accept(t3) {
    return t3.getAttribute("role") === "menuitem" ? NodeFilter.FILTER_REJECT : t3.hasAttribute("role") ? NodeFilter.FILTER_SKIP : NodeFilter.FILTER_ACCEPT;
  }, walk(t3) {
    t3.setAttribute("role", "none");
  } });
  function s5(t3) {
    var p2;
    switch (f2.value && clearTimeout(f2.value), t3.key) {
      case o$5.Space:
        if (e3.searchQuery.value !== "")
          return t3.preventDefault(), t3.stopPropagation(), e3.search(t3.key);
      case o$5.Enter:
        if (t3.preventDefault(), t3.stopPropagation(), e3.activeItemIndex.value !== null) {
          let i3 = e3.items.value[e3.activeItemIndex.value];
          (p2 = o$6(i3.dataRef.domRef)) == null || p2.click();
        }
        e3.closeMenu(), _$3(o$6(e3.buttonRef));
        break;
      case o$5.ArrowDown:
        return t3.preventDefault(), t3.stopPropagation(), e3.goToItem(a$4.Next);
      case o$5.ArrowUp:
        return t3.preventDefault(), t3.stopPropagation(), e3.goToItem(a$4.Previous);
      case o$5.Home:
      case o$5.PageUp:
        return t3.preventDefault(), t3.stopPropagation(), e3.goToItem(a$4.First);
      case o$5.End:
      case o$5.PageDown:
        return t3.preventDefault(), t3.stopPropagation(), e3.goToItem(a$4.Last);
      case o$5.Escape:
        t3.preventDefault(), t3.stopPropagation(), e3.closeMenu(), nextTick(() => {
          var a4;
          return (a4 = o$6(e3.buttonRef)) == null ? void 0 : a4.focus({ preventScroll: true });
        });
        break;
      case o$5.Tab:
        t3.preventDefault(), t3.stopPropagation(), e3.closeMenu(), nextTick(() => v$4(o$6(e3.buttonRef), t3.shiftKey ? N$4.Previous : N$4.Next));
        break;
      default:
        t3.key.length === 1 && (e3.search(t3.key), f2.value = setTimeout(() => e3.clearSearch(), 350));
        break;
    }
  }
  function g2(t3) {
    switch (t3.key) {
      case o$5.Space:
        t3.preventDefault();
        break;
    }
  }
  let d4 = l$2(), o2 = computed(() => d4 !== null ? (d4.value & i$3.Open) === i$3.Open : e3.menuState.value === 0);
  return () => {
    var u3, n2;
    let t3 = { open: e3.menuState.value === 0 }, { id: p2, ...a4 } = r2, i3 = { "aria-activedescendant": e3.activeItemIndex.value === null || (u3 = e3.items.value[e3.activeItemIndex.value]) == null ? void 0 : u3.id, "aria-labelledby": (n2 = o$6(e3.buttonRef)) == null ? void 0 : n2.id, id: p2, onKeydown: s5, onKeyup: g2, role: "menu", tabIndex: 0, ref: e3.itemsRef };
    return A$6({ ourProps: i3, theirProps: a4, slot: t3, attrs: b4, slots: l2, features: N$3.RenderStrategy | N$3.Static, visible: o2.value, name: "MenuItems" });
  };
} }), be = /* @__PURE__ */ defineComponent({ name: "MenuItem", inheritAttrs: false, props: { as: { type: [Object, String], default: "template" }, disabled: { type: Boolean, default: false }, id: { type: String, default: () => `headlessui-menu-item-${t$6()}` } }, setup(r2, { slots: b4, attrs: l2, expose: I3 }) {
  let e3 = O("MenuItem"), f2 = ref(null);
  I3({ el: f2, $el: f2 });
  let s5 = computed(() => e3.activeItemIndex.value !== null ? e3.items.value[e3.activeItemIndex.value].id === r2.id : false), g2 = p(f2), d4 = computed(() => ({ disabled: r2.disabled, get textValue() {
    return g2();
  }, domRef: f2 }));
  onMounted(() => e3.registerItem(r2.id, d4)), onUnmounted(() => e3.unregisterItem(r2.id)), watchEffect(() => {
    e3.menuState.value === 0 && s5.value && e3.activationTrigger.value !== 0 && nextTick(() => {
      var n2, v2;
      return (v2 = (n2 = o$6(f2)) == null ? void 0 : n2.scrollIntoView) == null ? void 0 : v2.call(n2, { block: "nearest" });
    });
  });
  function o2(n2) {
    if (r2.disabled)
      return n2.preventDefault();
    e3.closeMenu(), _$3(o$6(e3.buttonRef));
  }
  function t3() {
    if (r2.disabled)
      return e3.goToItem(a$4.Nothing);
    e3.goToItem(a$4.Specific, r2.id);
  }
  let p$12 = u$3();
  function a4(n2) {
    p$12.update(n2);
  }
  function i3(n2) {
    p$12.wasMoved(n2) && (r2.disabled || s5.value || e3.goToItem(a$4.Specific, r2.id, 0));
  }
  function u3(n2) {
    p$12.wasMoved(n2) && (r2.disabled || s5.value && e3.goToItem(a$4.Nothing));
  }
  return () => {
    let { disabled: n2 } = r2, v2 = { active: s5.value, disabled: n2, close: e3.closeMenu }, { id: M4, ...x3 } = r2;
    return A$6({ ourProps: { id: M4, ref: f2, role: "menuitem", tabIndex: n2 === true ? void 0 : -1, "aria-disabled": n2 === true ? true : void 0, disabled: void 0, onClick: o2, onFocus: t3, onPointerenter: a4, onMouseenter: a4, onPointermove: i3, onMousemove: i3, onPointerleave: u3, onMouseleave: u3 }, theirProps: { ...l2, ...x3 }, slot: v2, attrs: l2, slots: b4, name: "MenuItem" });
  };
} });
var Se$2 = ((p2) => (p2[p2.Open = 0] = "Open", p2[p2.Closed = 1] = "Closed", p2))(Se$2 || {});
let re$1 = Symbol("PopoverContext");
function V$1(P2) {
  let b4 = inject(re$1, null);
  if (b4 === null) {
    let p2 = new Error(`<${P2} /> is missing a parent <${ye$1.name} /> component.`);
    throw Error.captureStackTrace && Error.captureStackTrace(p2, V$1), p2;
  }
  return b4;
}
let le$1 = Symbol("PopoverGroupContext");
function ae$1() {
  return inject(le$1, null);
}
let ue$1 = Symbol("PopoverPanelContext");
function ge$2() {
  return inject(ue$1, null);
}
let ye$1 = /* @__PURE__ */ defineComponent({ name: "Popover", inheritAttrs: false, props: { as: { type: [Object, String], default: "div" } }, setup(P2, { slots: b4, attrs: p2, expose: h4 }) {
  var v2;
  let t3 = ref(null);
  h4({ el: t3, $el: t3 });
  let e3 = ref(1), c3 = ref(null), d4 = ref(null), O4 = ref(null), f2 = ref(null), y4 = computed(() => i$6(t3)), M4 = computed(() => {
    var Y3, Z3;
    if (!o$6(c3) || !o$6(f2))
      return false;
    for (let B3 of document.querySelectorAll("body > *"))
      if (Number(B3 == null ? void 0 : B3.contains(o$6(c3))) ^ Number(B3 == null ? void 0 : B3.contains(o$6(f2))))
        return true;
    let o2 = E$3(), a4 = o2.indexOf(o$6(c3)), g2 = (a4 + o2.length - 1) % o2.length, E3 = (a4 + 1) % o2.length, N3 = o2[g2], $3 = o2[E3];
    return !((Y3 = o$6(f2)) != null && Y3.contains(N3)) && !((Z3 = o$6(f2)) != null && Z3.contains($3));
  }), l2 = { popoverState: e3, buttonId: ref(null), panelId: ref(null), panel: f2, button: c3, isPortalled: M4, beforePanelSentinel: d4, afterPanelSentinel: O4, togglePopover() {
    e3.value = u$5(e3.value, { [0]: 1, [1]: 0 });
  }, closePopover() {
    e3.value !== 1 && (e3.value = 1);
  }, close(o2) {
    l2.closePopover();
    let a4 = (() => o2 ? o2 instanceof HTMLElement ? o2 : o2.value instanceof HTMLElement ? o$6(o2) : o$6(l2.button) : o$6(l2.button))();
    a4 == null || a4.focus();
  } };
  provide(re$1, l2), t$4(computed(() => u$5(e3.value, { [0]: i$3.Open, [1]: i$3.Closed })));
  let m4 = { buttonId: l2.buttonId, panelId: l2.panelId, close() {
    l2.closePopover();
  } }, S4 = ae$1(), I3 = S4 == null ? void 0 : S4.registerPopover, [s5, u3] = A$4(), i3 = R$4({ mainTreeNodeRef: S4 == null ? void 0 : S4.mainTreeNodeRef, portals: s5, defaultContainers: [c3, f2] });
  function n2() {
    var o2, a4, g2, E3;
    return (E3 = S4 == null ? void 0 : S4.isFocusWithinPopoverGroup()) != null ? E3 : ((o2 = y4.value) == null ? void 0 : o2.activeElement) && (((a4 = o$6(c3)) == null ? void 0 : a4.contains(y4.value.activeElement)) || ((g2 = o$6(f2)) == null ? void 0 : g2.contains(y4.value.activeElement)));
  }
  return watchEffect(() => I3 == null ? void 0 : I3(m4)), E$1((v2 = y4.value) == null ? void 0 : v2.defaultView, "focus", (o2) => {
    var a4, g2;
    o2.target !== window && o2.target instanceof HTMLElement && e3.value === 0 && (n2() || c3 && f2 && (i3.contains(o2.target) || (a4 = o$6(l2.beforePanelSentinel)) != null && a4.contains(o2.target) || (g2 = o$6(l2.afterPanelSentinel)) != null && g2.contains(o2.target) || l2.closePopover()));
  }, true), w$1(i3.resolveContainers, (o2, a4) => {
    var g2;
    l2.closePopover(), w$3(a4, h$2.Loose) || (o2.preventDefault(), (g2 = o$6(c3)) == null || g2.focus());
  }, computed(() => e3.value === 0)), () => {
    let o2 = { open: e3.value === 0, close: l2.close };
    return h$3(Fragment, [h$3(u3, {}, () => A$6({ theirProps: { ...P2, ...p2 }, ourProps: { ref: t3 }, slot: o2, slots: b4, attrs: p2, name: "Popover" })), h$3(i3.MainTreeNode)]);
  };
} }), Ge$1 = /* @__PURE__ */ defineComponent({ name: "PopoverButton", props: { as: { type: [Object, String], default: "button" }, disabled: { type: [Boolean], default: false }, id: { type: String, default: () => `headlessui-popover-button-${t$6()}` } }, inheritAttrs: false, setup(P2, { attrs: b4, slots: p2, expose: h4 }) {
  let t3 = V$1("PopoverButton"), e3 = computed(() => i$6(t3.button));
  h4({ el: t3.button, $el: t3.button }), onMounted(() => {
    t3.buttonId.value = P2.id;
  }), onUnmounted(() => {
    t3.buttonId.value = null;
  });
  let c3 = ae$1(), d4 = c3 == null ? void 0 : c3.closeOthers, O4 = ge$2(), f2 = computed(() => O4 === null ? false : O4.value === t3.panelId.value), y4 = ref(null), M4 = `headlessui-focus-sentinel-${t$6()}`;
  f2.value || watchEffect(() => {
    t3.button.value = o$6(y4);
  });
  let l2 = s$4(computed(() => ({ as: P2.as, type: b4.type })), y4);
  function m4(n2) {
    var v2, o2, a4, g2, E3;
    if (f2.value) {
      if (t3.popoverState.value === 1)
        return;
      switch (n2.key) {
        case o$5.Space:
        case o$5.Enter:
          n2.preventDefault(), (o2 = (v2 = n2.target).click) == null || o2.call(v2), t3.closePopover(), (a4 = o$6(t3.button)) == null || a4.focus();
          break;
      }
    } else
      switch (n2.key) {
        case o$5.Space:
        case o$5.Enter:
          n2.preventDefault(), n2.stopPropagation(), t3.popoverState.value === 1 && (d4 == null || d4(t3.buttonId.value)), t3.togglePopover();
          break;
        case o$5.Escape:
          if (t3.popoverState.value !== 0)
            return d4 == null ? void 0 : d4(t3.buttonId.value);
          if (!o$6(t3.button) || (g2 = e3.value) != null && g2.activeElement && !((E3 = o$6(t3.button)) != null && E3.contains(e3.value.activeElement)))
            return;
          n2.preventDefault(), n2.stopPropagation(), t3.closePopover();
          break;
      }
  }
  function S4(n2) {
    f2.value || n2.key === o$5.Space && n2.preventDefault();
  }
  function I3(n2) {
    var v2, o2;
    P2.disabled || (f2.value ? (t3.closePopover(), (v2 = o$6(t3.button)) == null || v2.focus()) : (n2.preventDefault(), n2.stopPropagation(), t3.popoverState.value === 1 && (d4 == null || d4(t3.buttonId.value)), t3.togglePopover(), (o2 = o$6(t3.button)) == null || o2.focus()));
  }
  function s5(n2) {
    n2.preventDefault(), n2.stopPropagation();
  }
  let u3 = n$2();
  function i3() {
    let n2 = o$6(t3.panel);
    if (!n2)
      return;
    function v2() {
      u$5(u3.value, { [d$4.Forwards]: () => P$1(n2, N$4.First), [d$4.Backwards]: () => P$1(n2, N$4.Last) }) === T$3.Error && P$1(E$3().filter((a4) => a4.dataset.headlessuiFocusGuard !== "true"), u$5(u3.value, { [d$4.Forwards]: N$4.Next, [d$4.Backwards]: N$4.Previous }), { relativeTo: o$6(t3.button) });
    }
    v2();
  }
  return () => {
    let n2 = t3.popoverState.value === 0, v2 = { open: n2 }, { id: o2, ...a4 } = P2, g2 = f2.value ? { ref: y4, type: l2.value, onKeydown: m4, onClick: I3 } : { ref: y4, id: o2, type: l2.value, "aria-expanded": t3.popoverState.value === 0, "aria-controls": o$6(t3.panel) ? t3.panelId.value : void 0, disabled: P2.disabled ? true : void 0, onKeydown: m4, onKeyup: S4, onClick: I3, onMousedown: s5 };
    return h$3(Fragment, [A$6({ ourProps: g2, theirProps: { ...b4, ...a4 }, slot: v2, attrs: b4, slots: p2, name: "PopoverButton" }), n2 && !f2.value && t3.isPortalled.value && h$3(f$3, { id: M4, features: s$3.Focusable, "data-headlessui-focus-guard": true, as: "button", type: "button", onFocus: i3 })]);
  };
} }), je$2 = /* @__PURE__ */ defineComponent({ name: "PopoverPanel", props: { as: { type: [Object, String], default: "div" }, static: { type: Boolean, default: false }, unmount: { type: Boolean, default: true }, focus: { type: Boolean, default: false }, id: { type: String, default: () => `headlessui-popover-panel-${t$6()}` } }, inheritAttrs: false, setup(P2, { attrs: b4, slots: p2, expose: h4 }) {
  let { focus: t3 } = P2, e3 = V$1("PopoverPanel"), c3 = computed(() => i$6(e3.panel)), d4 = `headlessui-focus-sentinel-before-${t$6()}`, O4 = `headlessui-focus-sentinel-after-${t$6()}`;
  h4({ el: e3.panel, $el: e3.panel }), onMounted(() => {
    e3.panelId.value = P2.id;
  }), onUnmounted(() => {
    e3.panelId.value = null;
  }), provide(ue$1, e3.panelId), watchEffect(() => {
    var u3, i3;
    if (!t3 || e3.popoverState.value !== 0 || !e3.panel)
      return;
    let s5 = (u3 = c3.value) == null ? void 0 : u3.activeElement;
    (i3 = o$6(e3.panel)) != null && i3.contains(s5) || P$1(o$6(e3.panel), N$4.First);
  });
  let f2 = l$2(), y4 = computed(() => f2 !== null ? (f2.value & i$3.Open) === i$3.Open : e3.popoverState.value === 0);
  function M4(s5) {
    var u3, i3;
    switch (s5.key) {
      case o$5.Escape:
        if (e3.popoverState.value !== 0 || !o$6(e3.panel) || c3.value && !((u3 = o$6(e3.panel)) != null && u3.contains(c3.value.activeElement)))
          return;
        s5.preventDefault(), s5.stopPropagation(), e3.closePopover(), (i3 = o$6(e3.button)) == null || i3.focus();
        break;
    }
  }
  function l2(s5) {
    var i3, n2, v2, o2, a4;
    let u3 = s5.relatedTarget;
    u3 && o$6(e3.panel) && ((i3 = o$6(e3.panel)) != null && i3.contains(u3) || (e3.closePopover(), ((v2 = (n2 = o$6(e3.beforePanelSentinel)) == null ? void 0 : n2.contains) != null && v2.call(n2, u3) || (a4 = (o2 = o$6(e3.afterPanelSentinel)) == null ? void 0 : o2.contains) != null && a4.call(o2, u3)) && u3.focus({ preventScroll: true })));
  }
  let m4 = n$2();
  function S4() {
    let s5 = o$6(e3.panel);
    if (!s5)
      return;
    function u3() {
      u$5(m4.value, { [d$4.Forwards]: () => {
        var n2;
        P$1(s5, N$4.First) === T$3.Error && ((n2 = o$6(e3.afterPanelSentinel)) == null || n2.focus());
      }, [d$4.Backwards]: () => {
        var i3;
        (i3 = o$6(e3.button)) == null || i3.focus({ preventScroll: true });
      } });
    }
    u3();
  }
  function I3() {
    let s5 = o$6(e3.panel);
    if (!s5)
      return;
    function u3() {
      u$5(m4.value, { [d$4.Forwards]: () => {
        let i3 = o$6(e3.button), n2 = o$6(e3.panel);
        if (!i3)
          return;
        let v2 = E$3(), o2 = v2.indexOf(i3), a4 = v2.slice(0, o2 + 1), E3 = [...v2.slice(o2 + 1), ...a4];
        for (let N3 of E3.slice())
          if (N3.dataset.headlessuiFocusGuard === "true" || n2 != null && n2.contains(N3)) {
            let $3 = E3.indexOf(N3);
            $3 !== -1 && E3.splice($3, 1);
          }
        P$1(E3, N$4.First, { sorted: false });
      }, [d$4.Backwards]: () => {
        var n2;
        P$1(s5, N$4.Previous) === T$3.Error && ((n2 = o$6(e3.button)) == null || n2.focus());
      } });
    }
    u3();
  }
  return () => {
    let s5 = { open: e3.popoverState.value === 0, close: e3.close }, { id: u3, focus: i3, ...n2 } = P2, v2 = { ref: e3.panel, id: u3, onKeydown: M4, onFocusout: t3 && e3.popoverState.value === 0 ? l2 : void 0, tabIndex: -1 };
    return A$6({ ourProps: v2, theirProps: { ...b4, ...n2 }, attrs: b4, slot: s5, slots: { ...p2, default: (...o2) => {
      var a4;
      return [h$3(Fragment, [y4.value && e3.isPortalled.value && h$3(f$3, { id: d4, ref: e3.beforePanelSentinel, features: s$3.Focusable, "data-headlessui-focus-guard": true, as: "button", type: "button", onFocus: S4 }), (a4 = p2.default) == null ? void 0 : a4.call(p2, ...o2), y4.value && e3.isPortalled.value && h$3(f$3, { id: O4, ref: e3.afterPanelSentinel, features: s$3.Focusable, "data-headlessui-focus-guard": true, as: "button", type: "button", onFocus: I3 })])];
    } }, features: N$3.RenderStrategy | N$3.Static, visible: y4.value, name: "PopoverPanel" });
  };
} });
let S$1 = Symbol("GroupContext"), ie$1 = /* @__PURE__ */ defineComponent({ name: "Switch", emits: { "update:modelValue": (l2) => true }, props: { as: { type: [Object, String], default: "button" }, modelValue: { type: Boolean, default: void 0 }, defaultChecked: { type: Boolean, optional: true }, form: { type: String, optional: true }, name: { type: String, optional: true }, value: { type: String, optional: true }, id: { type: String, default: () => `headlessui-switch-${t$6()}` } }, inheritAttrs: false, setup(l2, { emit: p2, attrs: a4, slots: o2, expose: f2 }) {
  let t3 = inject(S$1, null), [i3, r2] = d$6(computed(() => l2.modelValue), (e3) => p2("update:modelValue", e3), computed(() => l2.defaultChecked));
  function s5() {
    r2(!i3.value);
  }
  let w3 = ref(null), u3 = t3 === null ? w3 : t3.switchRef, g2 = s$4(computed(() => ({ as: l2.as, type: a4.type })), u3);
  f2({ el: u3, $el: u3 });
  function k3(e3) {
    e3.preventDefault(), s5();
  }
  function C2(e3) {
    e3.key === o$5.Space ? (e3.preventDefault(), s5()) : e3.key === o$5.Enter && p$1(e3.currentTarget);
  }
  function E3(e3) {
    e3.preventDefault();
  }
  let c3 = computed(() => {
    var e3, n2;
    return (n2 = (e3 = o$6(u3)) == null ? void 0 : e3.closest) == null ? void 0 : n2.call(e3, "form");
  });
  return onMounted(() => {
    watch([c3], () => {
      if (!c3.value || l2.defaultChecked === void 0)
        return;
      function e3() {
        r2(l2.defaultChecked);
      }
      return c3.value.addEventListener("reset", e3), () => {
        var n2;
        (n2 = c3.value) == null || n2.removeEventListener("reset", e3);
      };
    }, { immediate: true });
  }), () => {
    let { id: e3, name: n2, value: L3, form: D3, ...R4 } = l2, K3 = { checked: i3.value }, x3 = { id: e3, ref: u3, role: "switch", type: g2.value, tabIndex: 0, "aria-checked": i3.value, "aria-labelledby": t3 == null ? void 0 : t3.labelledby.value, "aria-describedby": t3 == null ? void 0 : t3.describedby.value, onClick: k3, onKeyup: C2, onKeypress: E3 };
    return h$3(Fragment, [n2 != null && i3.value != null ? h$3(f$3, E$2({ features: s$3.Hidden, as: "input", type: "checkbox", hidden: true, readOnly: true, checked: i3.value, form: D3, name: n2, value: L3 })) : null, A$6({ ourProps: x3, theirProps: { ...a4, ...T$2(R4, ["modelValue", "defaultChecked"]) }, slot: K3, attrs: a4, slots: o2, name: "Switch" })]);
  };
} });
let d$2 = /* @__PURE__ */ defineComponent({ props: { onFocus: { type: Function, required: true } }, setup(t3) {
  let n2 = ref(true);
  return () => n2.value ? h$3(f$3, { as: "button", type: "button", features: s$3.Focusable, onFocus(o2) {
    o2.preventDefault();
    let e3, a4 = 50;
    function r2() {
      var u3;
      if (a4-- <= 0) {
        e3 && cancelAnimationFrame(e3);
        return;
      }
      if ((u3 = t3.onFocus) != null && u3.call(t3)) {
        n2.value = false, cancelAnimationFrame(e3);
        return;
      }
      e3 = requestAnimationFrame(r2);
    }
    e3 = requestAnimationFrame(r2);
  } }) : null;
} });
var te$1 = ((i3) => (i3[i3.Forwards = 0] = "Forwards", i3[i3.Backwards = 1] = "Backwards", i3))(te$1 || {}), le = ((s5) => (s5[s5.Less = -1] = "Less", s5[s5.Equal = 0] = "Equal", s5[s5.Greater = 1] = "Greater", s5))(le || {});
let U$1 = Symbol("TabsContext");
function k$2(a4) {
  let v2 = inject(U$1, null);
  if (v2 === null) {
    let i3 = new Error(`<${a4} /> is missing a parent <TabGroup /> component.`);
    throw Error.captureStackTrace && Error.captureStackTrace(i3, k$2), i3;
  }
  return v2;
}
let j = Symbol("TabsSSRContext"), me$2 = /* @__PURE__ */ defineComponent({ name: "TabGroup", emits: { change: (a4) => true }, props: { as: { type: [Object, String], default: "template" }, selectedIndex: { type: [Number], default: null }, defaultIndex: { type: [Number], default: 0 }, vertical: { type: [Boolean], default: false }, manual: { type: [Boolean], default: false } }, inheritAttrs: false, setup(a4, { slots: v2, attrs: i3, emit: s5 }) {
  var P2;
  let l2 = ref((P2 = a4.selectedIndex) != null ? P2 : a4.defaultIndex), n2 = ref([]), d4 = ref([]), h4 = computed(() => a4.selectedIndex !== null), b4 = computed(() => h4.value ? a4.selectedIndex : l2.value);
  function m4(t3) {
    var S4;
    let e3 = O$1(r2.tabs.value, o$6), u3 = O$1(r2.panels.value, o$6), f2 = e3.filter((p2) => {
      var g2;
      return !((g2 = o$6(p2)) != null && g2.hasAttribute("disabled"));
    });
    if (t3 < 0 || t3 > e3.length - 1) {
      let p2 = u$5(l2.value === null ? 0 : Math.sign(t3 - l2.value), { [-1]: () => 1, [0]: () => u$5(Math.sign(t3), { [-1]: () => 0, [0]: () => 0, [1]: () => 1 }), [1]: () => 0 }), g2 = u$5(p2, { [0]: () => e3.indexOf(f2[0]), [1]: () => e3.indexOf(f2[f2.length - 1]) });
      g2 !== -1 && (l2.value = g2), r2.tabs.value = e3, r2.panels.value = u3;
    } else {
      let p2 = e3.slice(0, t3), G3 = [...e3.slice(t3), ...p2].find((W2) => f2.includes(W2));
      if (!G3)
        return;
      let B3 = (S4 = e3.indexOf(G3)) != null ? S4 : r2.selectedIndex.value;
      B3 === -1 && (B3 = r2.selectedIndex.value), l2.value = B3, r2.tabs.value = e3, r2.panels.value = u3;
    }
  }
  let r2 = { selectedIndex: computed(() => {
    var t3, e3;
    return (e3 = (t3 = l2.value) != null ? t3 : a4.defaultIndex) != null ? e3 : null;
  }), orientation: computed(() => a4.vertical ? "vertical" : "horizontal"), activation: computed(() => a4.manual ? "manual" : "auto"), tabs: n2, panels: d4, setSelectedIndex(t3) {
    b4.value !== t3 && s5("change", t3), h4.value || m4(t3);
  }, registerTab(t3) {
    var f2;
    if (n2.value.includes(t3))
      return;
    let e3 = n2.value[l2.value];
    n2.value.push(t3), n2.value = O$1(n2.value, o$6);
    let u3 = (f2 = n2.value.indexOf(e3)) != null ? f2 : l2.value;
    u3 !== -1 && (l2.value = u3);
  }, unregisterTab(t3) {
    let e3 = n2.value.indexOf(t3);
    e3 !== -1 && n2.value.splice(e3, 1);
  }, registerPanel(t3) {
    d4.value.includes(t3) || (d4.value.push(t3), d4.value = O$1(d4.value, o$6));
  }, unregisterPanel(t3) {
    let e3 = d4.value.indexOf(t3);
    e3 !== -1 && d4.value.splice(e3, 1);
  } };
  provide(U$1, r2);
  let w3 = ref({ tabs: [], panels: [] }), y4 = ref(false);
  onMounted(() => {
    y4.value = true;
  }), provide(j, computed(() => y4.value ? null : w3.value));
  let E3 = computed(() => a4.selectedIndex);
  return onMounted(() => {
    watch([E3], () => {
      var t3;
      return m4((t3 = a4.selectedIndex) != null ? t3 : a4.defaultIndex);
    }, { immediate: true });
  }), watchEffect(() => {
    if (!h4.value || b4.value == null || r2.tabs.value.length <= 0)
      return;
    let t3 = O$1(r2.tabs.value, o$6);
    t3.some((u3, f2) => o$6(r2.tabs.value[f2]) !== o$6(u3)) && r2.setSelectedIndex(t3.findIndex((u3) => o$6(u3) === o$6(r2.tabs.value[b4.value])));
  }), () => {
    let t3 = { selectedIndex: l2.value };
    return h$3(Fragment, [n2.value.length <= 0 && h$3(d$2, { onFocus: () => {
      for (let e3 of n2.value) {
        let u3 = o$6(e3);
        if ((u3 == null ? void 0 : u3.tabIndex) === 0)
          return u3.focus(), true;
      }
      return false;
    } }), A$6({ theirProps: { ...i3, ...T$2(a4, ["selectedIndex", "defaultIndex", "manual", "vertical", "onChange"]) }, ourProps: {}, slot: t3, slots: v2, attrs: i3, name: "TabGroup" })]);
  };
} }), pe$2 = /* @__PURE__ */ defineComponent({ name: "TabList", props: { as: { type: [Object, String], default: "div" } }, setup(a4, { attrs: v2, slots: i3 }) {
  let s5 = k$2("TabList");
  return () => {
    let l2 = { selectedIndex: s5.selectedIndex.value }, n2 = { role: "tablist", "aria-orientation": s5.orientation.value };
    return A$6({ ourProps: n2, theirProps: a4, slot: l2, attrs: v2, slots: i3, name: "TabList" });
  };
} }), xe$1 = /* @__PURE__ */ defineComponent({ name: "Tab", props: { as: { type: [Object, String], default: "button" }, disabled: { type: [Boolean], default: false }, id: { type: String, default: () => `headlessui-tabs-tab-${t$6()}` } }, setup(a4, { attrs: v2, slots: i3, expose: s5 }) {
  let l2 = k$2("Tab"), n2 = ref(null);
  s5({ el: n2, $el: n2 }), onMounted(() => l2.registerTab(n2)), onUnmounted(() => l2.unregisterTab(n2));
  let d4 = inject(j), h4 = computed(() => {
    if (d4.value) {
      let e3 = d4.value.tabs.indexOf(a4.id);
      return e3 === -1 ? d4.value.tabs.push(a4.id) - 1 : e3;
    }
    return -1;
  }), b4 = computed(() => {
    let e3 = l2.tabs.value.indexOf(n2);
    return e3 === -1 ? h4.value : e3;
  }), m4 = computed(() => b4.value === l2.selectedIndex.value);
  function r2(e3) {
    var f2;
    let u3 = e3();
    if (u3 === T$3.Success && l2.activation.value === "auto") {
      let S4 = (f2 = i$6(n2)) == null ? void 0 : f2.activeElement, p2 = l2.tabs.value.findIndex((g2) => o$6(g2) === S4);
      p2 !== -1 && l2.setSelectedIndex(p2);
    }
    return u3;
  }
  function w3(e3) {
    let u3 = l2.tabs.value.map((S4) => o$6(S4)).filter(Boolean);
    if (e3.key === o$5.Space || e3.key === o$5.Enter) {
      e3.preventDefault(), e3.stopPropagation(), l2.setSelectedIndex(b4.value);
      return;
    }
    switch (e3.key) {
      case o$5.Home:
      case o$5.PageUp:
        return e3.preventDefault(), e3.stopPropagation(), r2(() => P$1(u3, N$4.First));
      case o$5.End:
      case o$5.PageDown:
        return e3.preventDefault(), e3.stopPropagation(), r2(() => P$1(u3, N$4.Last));
    }
    if (r2(() => u$5(l2.orientation.value, { vertical() {
      return e3.key === o$5.ArrowUp ? P$1(u3, N$4.Previous | N$4.WrapAround) : e3.key === o$5.ArrowDown ? P$1(u3, N$4.Next | N$4.WrapAround) : T$3.Error;
    }, horizontal() {
      return e3.key === o$5.ArrowLeft ? P$1(u3, N$4.Previous | N$4.WrapAround) : e3.key === o$5.ArrowRight ? P$1(u3, N$4.Next | N$4.WrapAround) : T$3.Error;
    } })) === T$3.Success)
      return e3.preventDefault();
  }
  let y4 = ref(false);
  function E3() {
    var e3;
    y4.value || (y4.value = true, !a4.disabled && ((e3 = o$6(n2)) == null || e3.focus({ preventScroll: true }), l2.setSelectedIndex(b4.value), t$1(() => {
      y4.value = false;
    })));
  }
  function P2(e3) {
    e3.preventDefault();
  }
  let t3 = s$4(computed(() => ({ as: a4.as, type: v2.type })), n2);
  return () => {
    var p2;
    let e3 = { selected: m4.value }, { id: u3, ...f2 } = a4, S4 = { ref: n2, onKeydown: w3, onMousedown: P2, onClick: E3, id: u3, role: "tab", type: t3.value, "aria-controls": (p2 = o$6(l2.panels.value[b4.value])) == null ? void 0 : p2.id, "aria-selected": m4.value, tabIndex: m4.value ? 0 : -1, disabled: a4.disabled ? true : void 0 };
    return A$6({ ourProps: S4, theirProps: f2, slot: e3, attrs: v2, slots: i3, name: "Tab" });
  };
} }), Ie$2 = /* @__PURE__ */ defineComponent({ name: "TabPanels", props: { as: { type: [Object, String], default: "div" } }, setup(a4, { slots: v2, attrs: i3 }) {
  let s5 = k$2("TabPanels");
  return () => {
    let l2 = { selectedIndex: s5.selectedIndex.value };
    return A$6({ theirProps: a4, ourProps: {}, slot: l2, attrs: i3, slots: v2, name: "TabPanels" });
  };
} }), ye = /* @__PURE__ */ defineComponent({ name: "TabPanel", props: { as: { type: [Object, String], default: "div" }, static: { type: Boolean, default: false }, unmount: { type: Boolean, default: true }, id: { type: String, default: () => `headlessui-tabs-panel-${t$6()}` }, tabIndex: { type: Number, default: 0 } }, setup(a4, { attrs: v2, slots: i3, expose: s5 }) {
  let l2 = k$2("TabPanel"), n2 = ref(null);
  s5({ el: n2, $el: n2 }), onMounted(() => l2.registerPanel(n2)), onUnmounted(() => l2.unregisterPanel(n2));
  let d4 = inject(j), h4 = computed(() => {
    if (d4.value) {
      let r2 = d4.value.panels.indexOf(a4.id);
      return r2 === -1 ? d4.value.panels.push(a4.id) - 1 : r2;
    }
    return -1;
  }), b4 = computed(() => {
    let r2 = l2.panels.value.indexOf(n2);
    return r2 === -1 ? h4.value : r2;
  }), m4 = computed(() => b4.value === l2.selectedIndex.value);
  return () => {
    var t3;
    let r2 = { selected: m4.value }, { id: w3, tabIndex: y4, ...E3 } = a4, P2 = { ref: n2, id: w3, role: "tabpanel", "aria-labelledby": (t3 = o$6(l2.tabs.value[b4.value])) == null ? void 0 : t3.id, tabIndex: m4.value ? y4 : -1 };
    return !m4.value && a4.unmount && !a4.static ? h$3(f$3, { as: "span", "aria-hidden": true, ...P2 }) : A$6({ ourProps: P2, theirProps: E3, slot: r2, attrs: v2, slots: i3, features: N$3.Static | N$3.RenderStrategy, visible: m4.value, name: "TabPanel" });
  };
} });
function l(r2) {
  let e3 = { called: false };
  return (...t3) => {
    if (!e3.called)
      return e3.called = true, r2(...t3);
  };
}
function m$2(e3, ...t3) {
  e3 && t3.length > 0 && e3.classList.add(...t3);
}
function d$1(e3, ...t3) {
  e3 && t3.length > 0 && e3.classList.remove(...t3);
}
var g$1 = ((i3) => (i3.Finished = "finished", i3.Cancelled = "cancelled", i3))(g$1 || {});
function F(e3, t3) {
  let i3 = o$4();
  if (!e3)
    return i3.dispose;
  let { transitionDuration: n2, transitionDelay: a4 } = getComputedStyle(e3), [l2, s5] = [n2, a4].map((o2) => {
    let [u3 = 0] = o2.split(",").filter(Boolean).map((r2) => r2.includes("ms") ? parseFloat(r2) : parseFloat(r2) * 1e3).sort((r2, c3) => c3 - r2);
    return u3;
  });
  return l2 !== 0 ? i3.setTimeout(() => t3("finished"), l2 + s5) : t3("finished"), i3.add(() => t3("cancelled")), i3.dispose;
}
function L$1(e3, t3, i3, n2, a4, l$12) {
  let s5 = o$4(), o2 = l$12 !== void 0 ? l(l$12) : () => {
  };
  return d$1(e3, ...a4), m$2(e3, ...t3, ...i3), s5.nextFrame(() => {
    d$1(e3, ...i3), m$2(e3, ...n2), s5.add(F(e3, (u3) => (d$1(e3, ...n2, ...t3), m$2(e3, ...a4), o2(u3))));
  }), s5.add(() => d$1(e3, ...t3, ...i3, ...n2, ...a4)), s5.add(() => o2("cancelled")), s5.dispose;
}
function g(e3 = "") {
  return e3.split(" ").filter((t3) => t3.trim().length > 1);
}
let R$2 = Symbol("TransitionContext");
var pe$1 = ((a4) => (a4.Visible = "visible", a4.Hidden = "hidden", a4))(pe$1 || {});
function me$1() {
  return inject(R$2, null) !== null;
}
function Te() {
  let e3 = inject(R$2, null);
  if (e3 === null)
    throw new Error("A <TransitionChild /> is used but it is missing a parent <TransitionRoot />.");
  return e3;
}
function ge$1() {
  let e3 = inject(N, null);
  if (e3 === null)
    throw new Error("A <TransitionChild /> is used but it is missing a parent <TransitionRoot />.");
  return e3;
}
let N = Symbol("NestingContext");
function L(e3) {
  return "children" in e3 ? L(e3.children) : e3.value.filter(({ state: t3 }) => t3 === "visible").length > 0;
}
function Q$1(e3) {
  let t3 = ref([]), a4 = ref(false);
  onMounted(() => a4.value = true), onUnmounted(() => a4.value = false);
  function s5(n2, r2 = S$3.Hidden) {
    let l2 = t3.value.findIndex(({ id: f2 }) => f2 === n2);
    l2 !== -1 && (u$5(r2, { [S$3.Unmount]() {
      t3.value.splice(l2, 1);
    }, [S$3.Hidden]() {
      t3.value[l2].state = "hidden";
    } }), !L(t3) && a4.value && (e3 == null || e3()));
  }
  function h4(n2) {
    let r2 = t3.value.find(({ id: l2 }) => l2 === n2);
    return r2 ? r2.state !== "visible" && (r2.state = "visible") : t3.value.push({ id: n2, state: "visible" }), () => s5(n2, S$3.Unmount);
  }
  return { children: t3, register: h4, unregister: s5 };
}
let W$1 = N$3.RenderStrategy, he = /* @__PURE__ */ defineComponent({ props: { as: { type: [Object, String], default: "div" }, show: { type: [Boolean], default: null }, unmount: { type: [Boolean], default: true }, appear: { type: [Boolean], default: false }, enter: { type: [String], default: "" }, enterFrom: { type: [String], default: "" }, enterTo: { type: [String], default: "" }, entered: { type: [String], default: "" }, leave: { type: [String], default: "" }, leaveFrom: { type: [String], default: "" }, leaveTo: { type: [String], default: "" } }, emits: { beforeEnter: () => true, afterEnter: () => true, beforeLeave: () => true, afterLeave: () => true }, setup(e3, { emit: t3, attrs: a4, slots: s5, expose: h4 }) {
  let n2 = ref(0);
  function r2() {
    n2.value |= i$3.Opening, t3("beforeEnter");
  }
  function l2() {
    n2.value &= ~i$3.Opening, t3("afterEnter");
  }
  function f2() {
    n2.value |= i$3.Closing, t3("beforeLeave");
  }
  function S4() {
    n2.value &= ~i$3.Closing, t3("afterLeave");
  }
  if (!me$1() && s$2())
    return () => h$3(Se$1, { ...e3, onBeforeEnter: r2, onAfterEnter: l2, onBeforeLeave: f2, onAfterLeave: S4 }, s5);
  let d4 = ref(null), y4 = computed(() => e3.unmount ? S$3.Unmount : S$3.Hidden);
  h4({ el: d4, $el: d4 });
  let { show: v2, appear: A2 } = Te(), { register: D3, unregister: H5 } = ge$1(), i3 = ref(v2.value ? "visible" : "hidden"), I3 = { value: true }, c3 = t$6(), b4 = { value: false }, P2 = Q$1(() => {
    !b4.value && i3.value !== "hidden" && (i3.value = "hidden", H5(c3), S4());
  });
  onMounted(() => {
    let o2 = D3(c3);
    onUnmounted(o2);
  }), watchEffect(() => {
    if (y4.value === S$3.Hidden && c3) {
      if (v2.value && i3.value !== "visible") {
        i3.value = "visible";
        return;
      }
      u$5(i3.value, { ["hidden"]: () => H5(c3), ["visible"]: () => D3(c3) });
    }
  });
  let j2 = g(e3.enter), M4 = g(e3.enterFrom), X4 = g(e3.enterTo), _2 = g(e3.entered), Y3 = g(e3.leave), Z3 = g(e3.leaveFrom), ee3 = g(e3.leaveTo);
  onMounted(() => {
    watchEffect(() => {
      if (i3.value === "visible") {
        let o2 = o$6(d4);
        if (o2 instanceof Comment && o2.data === "")
          throw new Error("Did you forget to passthrough the `ref` to the actual DOM node?");
      }
    });
  });
  function te2(o2) {
    let E3 = I3.value && !A2.value, p2 = o$6(d4);
    !p2 || !(p2 instanceof HTMLElement) || E3 || (b4.value = true, v2.value && r2(), v2.value || f2(), o2(v2.value ? L$1(p2, j2, M4, X4, _2, (V3) => {
      b4.value = false, V3 === g$1.Finished && l2();
    }) : L$1(p2, Y3, Z3, ee3, _2, (V3) => {
      b4.value = false, V3 === g$1.Finished && (L(P2) || (i3.value = "hidden", H5(c3), S4()));
    })));
  }
  return onMounted(() => {
    watch([v2], (o2, E3, p2) => {
      te2(p2), I3.value = false;
    }, { immediate: true });
  }), provide(N, P2), t$4(computed(() => u$5(i3.value, { ["visible"]: i$3.Open, ["hidden"]: i$3.Closed }) | n2.value)), () => {
    let { appear: o2, show: E3, enter: p2, enterFrom: V3, enterTo: Ce2, entered: ye2, leave: be3, leaveFrom: Ee3, leaveTo: Ve2, ...U2 } = e3, ne2 = { ref: d4 }, re3 = { ...U2, ...A2.value && v2.value && c$3.isServer ? { class: normalizeClass([a4.class, U2.class, ...j2, ...M4]) } : {} };
    return A$6({ theirProps: re3, ourProps: ne2, slot: {}, slots: s5, attrs: a4, features: W$1, visible: i3.value === "visible", name: "TransitionChild" });
  };
} }), ce = he, Se$1 = /* @__PURE__ */ defineComponent({ inheritAttrs: false, props: { as: { type: [Object, String], default: "div" }, show: { type: [Boolean], default: null }, unmount: { type: [Boolean], default: true }, appear: { type: [Boolean], default: false }, enter: { type: [String], default: "" }, enterFrom: { type: [String], default: "" }, enterTo: { type: [String], default: "" }, entered: { type: [String], default: "" }, leave: { type: [String], default: "" }, leaveFrom: { type: [String], default: "" }, leaveTo: { type: [String], default: "" } }, emits: { beforeEnter: () => true, afterEnter: () => true, beforeLeave: () => true, afterLeave: () => true }, setup(e3, { emit: t3, attrs: a4, slots: s5 }) {
  let h4 = l$2(), n2 = computed(() => e3.show === null && h4 !== null ? (h4.value & i$3.Open) === i$3.Open : e3.show);
  watchEffect(() => {
    if (![true, false].includes(n2.value))
      throw new Error('A <Transition /> is used but it is missing a `:show="true | false"` prop.');
  });
  let r2 = ref(n2.value ? "visible" : "hidden"), l2 = Q$1(() => {
    r2.value = "hidden";
  }), f2 = ref(true), S4 = { show: n2, appear: computed(() => e3.appear || !f2.value) };
  return onMounted(() => {
    watchEffect(() => {
      f2.value = false, n2.value ? r2.value = "visible" : L(l2) || (r2.value = "hidden");
    });
  }), provide(N, l2), provide(R$2, S4), () => {
    let d4 = T$2(e3, ["show", "appear", "unmount", "onBeforeEnter", "onBeforeLeave", "onAfterEnter", "onAfterLeave"]), y4 = { unmount: e3.unmount };
    return A$6({ ourProps: { ...y4, as: "template" }, theirProps: {}, slot: {}, slots: { ...s5, default: () => [h$3(ce, { onBeforeEnter: () => t3("beforeEnter"), onAfterEnter: () => t3("afterEnter"), onBeforeLeave: () => t3("beforeLeave"), onAfterLeave: () => t3("afterLeave"), ...a4, ...y4, ...d4 }, s5.default)] }, attrs: {}, features: W$1, visible: r2.value === "visible", name: "Transition" });
  };
} });
const sides = ["top", "right", "bottom", "left"];
const alignments = ["start", "end"];
const placements = /* @__PURE__ */ sides.reduce((acc, side) => acc.concat(side, side + "-" + alignments[0], side + "-" + alignments[1]), []);
const min = Math.min;
const max = Math.max;
const round = Math.round;
const floor = Math.floor;
const createCoords = (v2) => ({
  x: v2,
  y: v2
});
const oppositeSideMap = {
  left: "right",
  right: "left",
  bottom: "top",
  top: "bottom"
};
const oppositeAlignmentMap = {
  start: "end",
  end: "start"
};
function clamp(start, value, end) {
  return max(start, min(value, end));
}
function evaluate(value, param) {
  return typeof value === "function" ? value(param) : value;
}
function getSide(placement) {
  return placement.split("-")[0];
}
function getAlignment(placement) {
  return placement.split("-")[1];
}
function getOppositeAxis(axis) {
  return axis === "x" ? "y" : "x";
}
function getAxisLength(axis) {
  return axis === "y" ? "height" : "width";
}
function getSideAxis(placement) {
  return ["top", "bottom"].includes(getSide(placement)) ? "y" : "x";
}
function getAlignmentAxis(placement) {
  return getOppositeAxis(getSideAxis(placement));
}
function getAlignmentSides(placement, rects, rtl) {
  if (rtl === void 0) {
    rtl = false;
  }
  const alignment = getAlignment(placement);
  const alignmentAxis = getAlignmentAxis(placement);
  const length = getAxisLength(alignmentAxis);
  let mainAlignmentSide = alignmentAxis === "x" ? alignment === (rtl ? "end" : "start") ? "right" : "left" : alignment === "start" ? "bottom" : "top";
  if (rects.reference[length] > rects.floating[length]) {
    mainAlignmentSide = getOppositePlacement(mainAlignmentSide);
  }
  return [mainAlignmentSide, getOppositePlacement(mainAlignmentSide)];
}
function getExpandedPlacements(placement) {
  const oppositePlacement = getOppositePlacement(placement);
  return [getOppositeAlignmentPlacement(placement), oppositePlacement, getOppositeAlignmentPlacement(oppositePlacement)];
}
function getOppositeAlignmentPlacement(placement) {
  return placement.replace(/start|end/g, (alignment) => oppositeAlignmentMap[alignment]);
}
function getSideList(side, isStart, rtl) {
  const lr2 = ["left", "right"];
  const rl2 = ["right", "left"];
  const tb = ["top", "bottom"];
  const bt3 = ["bottom", "top"];
  switch (side) {
    case "top":
    case "bottom":
      if (rtl)
        return isStart ? rl2 : lr2;
      return isStart ? lr2 : rl2;
    case "left":
    case "right":
      return isStart ? tb : bt3;
    default:
      return [];
  }
}
function getOppositeAxisPlacements(placement, flipAlignment, direction, rtl) {
  const alignment = getAlignment(placement);
  let list = getSideList(getSide(placement), direction === "start", rtl);
  if (alignment) {
    list = list.map((side) => side + "-" + alignment);
    if (flipAlignment) {
      list = list.concat(list.map(getOppositeAlignmentPlacement));
    }
  }
  return list;
}
function getOppositePlacement(placement) {
  return placement.replace(/left|right|bottom|top/g, (side) => oppositeSideMap[side]);
}
function expandPaddingObject(padding) {
  return {
    top: 0,
    right: 0,
    bottom: 0,
    left: 0,
    ...padding
  };
}
function getPaddingObject(padding) {
  return typeof padding !== "number" ? expandPaddingObject(padding) : {
    top: padding,
    right: padding,
    bottom: padding,
    left: padding
  };
}
function rectToClientRect(rect) {
  return {
    ...rect,
    top: rect.y,
    left: rect.x,
    right: rect.x + rect.width,
    bottom: rect.y + rect.height
  };
}
function computeCoordsFromPlacement(_ref, placement, rtl) {
  let {
    reference,
    floating
  } = _ref;
  const sideAxis = getSideAxis(placement);
  const alignmentAxis = getAlignmentAxis(placement);
  const alignLength = getAxisLength(alignmentAxis);
  const side = getSide(placement);
  const isVertical = sideAxis === "y";
  const commonX = reference.x + reference.width / 2 - floating.width / 2;
  const commonY = reference.y + reference.height / 2 - floating.height / 2;
  const commonAlign = reference[alignLength] / 2 - floating[alignLength] / 2;
  let coords;
  switch (side) {
    case "top":
      coords = {
        x: commonX,
        y: reference.y - floating.height
      };
      break;
    case "bottom":
      coords = {
        x: commonX,
        y: reference.y + reference.height
      };
      break;
    case "right":
      coords = {
        x: reference.x + reference.width,
        y: commonY
      };
      break;
    case "left":
      coords = {
        x: reference.x - floating.width,
        y: commonY
      };
      break;
    default:
      coords = {
        x: reference.x,
        y: reference.y
      };
  }
  switch (getAlignment(placement)) {
    case "start":
      coords[alignmentAxis] -= commonAlign * (rtl && isVertical ? -1 : 1);
      break;
    case "end":
      coords[alignmentAxis] += commonAlign * (rtl && isVertical ? -1 : 1);
      break;
  }
  return coords;
}
const computePosition$1 = async (reference, floating, config2) => {
  const {
    placement = "bottom",
    strategy = "absolute",
    middleware = [],
    platform: platform2
  } = config2;
  const validMiddleware = middleware.filter(Boolean);
  const rtl = await (platform2.isRTL == null ? void 0 : platform2.isRTL(floating));
  let rects = await platform2.getElementRects({
    reference,
    floating,
    strategy
  });
  let {
    x: x3,
    y: y4
  } = computeCoordsFromPlacement(rects, placement, rtl);
  let statefulPlacement = placement;
  let middlewareData = {};
  let resetCount = 0;
  for (let i3 = 0; i3 < validMiddleware.length; i3++) {
    const {
      name,
      fn: fn2
    } = validMiddleware[i3];
    const {
      x: nextX,
      y: nextY,
      data,
      reset
    } = await fn2({
      x: x3,
      y: y4,
      initialPlacement: placement,
      placement: statefulPlacement,
      strategy,
      middlewareData,
      rects,
      platform: platform2,
      elements: {
        reference,
        floating
      }
    });
    x3 = nextX != null ? nextX : x3;
    y4 = nextY != null ? nextY : y4;
    middlewareData = {
      ...middlewareData,
      [name]: {
        ...middlewareData[name],
        ...data
      }
    };
    if (reset && resetCount <= 50) {
      resetCount++;
      if (typeof reset === "object") {
        if (reset.placement) {
          statefulPlacement = reset.placement;
        }
        if (reset.rects) {
          rects = reset.rects === true ? await platform2.getElementRects({
            reference,
            floating,
            strategy
          }) : reset.rects;
        }
        ({
          x: x3,
          y: y4
        } = computeCoordsFromPlacement(rects, statefulPlacement, rtl));
      }
      i3 = -1;
      continue;
    }
  }
  return {
    x: x3,
    y: y4,
    placement: statefulPlacement,
    strategy,
    middlewareData
  };
};
async function detectOverflow(state, options) {
  var _await$platform$isEle;
  if (options === void 0) {
    options = {};
  }
  const {
    x: x3,
    y: y4,
    platform: platform2,
    rects,
    elements,
    strategy
  } = state;
  const {
    boundary = "clippingAncestors",
    rootBoundary = "viewport",
    elementContext = "floating",
    altBoundary = false,
    padding = 0
  } = evaluate(options, state);
  const paddingObject = getPaddingObject(padding);
  const altContext = elementContext === "floating" ? "reference" : "floating";
  const element = elements[altBoundary ? altContext : elementContext];
  const clippingClientRect = rectToClientRect(await platform2.getClippingRect({
    element: ((_await$platform$isEle = await (platform2.isElement == null ? void 0 : platform2.isElement(element))) != null ? _await$platform$isEle : true) ? element : element.contextElement || await (platform2.getDocumentElement == null ? void 0 : platform2.getDocumentElement(elements.floating)),
    boundary,
    rootBoundary,
    strategy
  }));
  const rect = elementContext === "floating" ? {
    ...rects.floating,
    x: x3,
    y: y4
  } : rects.reference;
  const offsetParent = await (platform2.getOffsetParent == null ? void 0 : platform2.getOffsetParent(elements.floating));
  const offsetScale = await (platform2.isElement == null ? void 0 : platform2.isElement(offsetParent)) ? await (platform2.getScale == null ? void 0 : platform2.getScale(offsetParent)) || {
    x: 1,
    y: 1
  } : {
    x: 1,
    y: 1
  };
  const elementClientRect = rectToClientRect(platform2.convertOffsetParentRelativeRectToViewportRelativeRect ? await platform2.convertOffsetParentRelativeRectToViewportRelativeRect({
    rect,
    offsetParent,
    strategy
  }) : rect);
  return {
    top: (clippingClientRect.top - elementClientRect.top + paddingObject.top) / offsetScale.y,
    bottom: (elementClientRect.bottom - clippingClientRect.bottom + paddingObject.bottom) / offsetScale.y,
    left: (clippingClientRect.left - elementClientRect.left + paddingObject.left) / offsetScale.x,
    right: (elementClientRect.right - clippingClientRect.right + paddingObject.right) / offsetScale.x
  };
}
const arrow$2 = (options) => ({
  name: "arrow",
  options,
  async fn(state) {
    const {
      x: x3,
      y: y4,
      placement,
      rects,
      platform: platform2,
      elements,
      middlewareData
    } = state;
    const {
      element,
      padding = 0
    } = evaluate(options, state) || {};
    if (element == null) {
      return {};
    }
    const paddingObject = getPaddingObject(padding);
    const coords = {
      x: x3,
      y: y4
    };
    const axis = getAlignmentAxis(placement);
    const length = getAxisLength(axis);
    const arrowDimensions = await platform2.getDimensions(element);
    const isYAxis = axis === "y";
    const minProp = isYAxis ? "top" : "left";
    const maxProp = isYAxis ? "bottom" : "right";
    const clientProp = isYAxis ? "clientHeight" : "clientWidth";
    const endDiff = rects.reference[length] + rects.reference[axis] - coords[axis] - rects.floating[length];
    const startDiff = coords[axis] - rects.reference[axis];
    const arrowOffsetParent = await (platform2.getOffsetParent == null ? void 0 : platform2.getOffsetParent(element));
    let clientSize = arrowOffsetParent ? arrowOffsetParent[clientProp] : 0;
    if (!clientSize || !await (platform2.isElement == null ? void 0 : platform2.isElement(arrowOffsetParent))) {
      clientSize = elements.floating[clientProp] || rects.floating[length];
    }
    const centerToReference = endDiff / 2 - startDiff / 2;
    const largestPossiblePadding = clientSize / 2 - arrowDimensions[length] / 2 - 1;
    const minPadding = min(paddingObject[minProp], largestPossiblePadding);
    const maxPadding = min(paddingObject[maxProp], largestPossiblePadding);
    const min$12 = minPadding;
    const max2 = clientSize - arrowDimensions[length] - maxPadding;
    const center = clientSize / 2 - arrowDimensions[length] / 2 + centerToReference;
    const offset2 = clamp(min$12, center, max2);
    const shouldAddOffset = !middlewareData.arrow && getAlignment(placement) != null && center != offset2 && rects.reference[length] / 2 - (center < min$12 ? minPadding : maxPadding) - arrowDimensions[length] / 2 < 0;
    const alignmentOffset = shouldAddOffset ? center < min$12 ? center - min$12 : center - max2 : 0;
    return {
      [axis]: coords[axis] + alignmentOffset,
      data: {
        [axis]: offset2,
        centerOffset: center - offset2 - alignmentOffset,
        ...shouldAddOffset && {
          alignmentOffset
        }
      },
      reset: shouldAddOffset
    };
  }
});
function getPlacementList(alignment, autoAlignment, allowedPlacements) {
  const allowedPlacementsSortedByAlignment = alignment ? [...allowedPlacements.filter((placement) => getAlignment(placement) === alignment), ...allowedPlacements.filter((placement) => getAlignment(placement) !== alignment)] : allowedPlacements.filter((placement) => getSide(placement) === placement);
  return allowedPlacementsSortedByAlignment.filter((placement) => {
    if (alignment) {
      return getAlignment(placement) === alignment || (autoAlignment ? getOppositeAlignmentPlacement(placement) !== placement : false);
    }
    return true;
  });
}
const autoPlacement$1 = function(options) {
  if (options === void 0) {
    options = {};
  }
  return {
    name: "autoPlacement",
    options,
    async fn(state) {
      var _middlewareData$autoP, _middlewareData$autoP2, _placementsThatFitOnE;
      const {
        rects,
        middlewareData,
        placement,
        platform: platform2,
        elements
      } = state;
      const {
        crossAxis = false,
        alignment,
        allowedPlacements = placements,
        autoAlignment = true,
        ...detectOverflowOptions
      } = evaluate(options, state);
      const placements$12 = alignment !== void 0 || allowedPlacements === placements ? getPlacementList(alignment || null, autoAlignment, allowedPlacements) : allowedPlacements;
      const overflow = await detectOverflow(state, detectOverflowOptions);
      const currentIndex = ((_middlewareData$autoP = middlewareData.autoPlacement) == null ? void 0 : _middlewareData$autoP.index) || 0;
      const currentPlacement = placements$12[currentIndex];
      if (currentPlacement == null) {
        return {};
      }
      const alignmentSides = getAlignmentSides(currentPlacement, rects, await (platform2.isRTL == null ? void 0 : platform2.isRTL(elements.floating)));
      if (placement !== currentPlacement) {
        return {
          reset: {
            placement: placements$12[0]
          }
        };
      }
      const currentOverflows = [overflow[getSide(currentPlacement)], overflow[alignmentSides[0]], overflow[alignmentSides[1]]];
      const allOverflows = [...((_middlewareData$autoP2 = middlewareData.autoPlacement) == null ? void 0 : _middlewareData$autoP2.overflows) || [], {
        placement: currentPlacement,
        overflows: currentOverflows
      }];
      const nextPlacement = placements$12[currentIndex + 1];
      if (nextPlacement) {
        return {
          data: {
            index: currentIndex + 1,
            overflows: allOverflows
          },
          reset: {
            placement: nextPlacement
          }
        };
      }
      const placementsSortedByMostSpace = allOverflows.map((d4) => {
        const alignment2 = getAlignment(d4.placement);
        return [d4.placement, alignment2 && crossAxis ? (
          // Check along the mainAxis and main crossAxis side.
          d4.overflows.slice(0, 2).reduce((acc, v2) => acc + v2, 0)
        ) : (
          // Check only the mainAxis.
          d4.overflows[0]
        ), d4.overflows];
      }).sort((a4, b4) => a4[1] - b4[1]);
      const placementsThatFitOnEachSide = placementsSortedByMostSpace.filter((d4) => d4[2].slice(
        0,
        // Aligned placements should not check their opposite crossAxis
        // side.
        getAlignment(d4[0]) ? 2 : 3
      ).every((v2) => v2 <= 0));
      const resetPlacement = ((_placementsThatFitOnE = placementsThatFitOnEachSide[0]) == null ? void 0 : _placementsThatFitOnE[0]) || placementsSortedByMostSpace[0][0];
      if (resetPlacement !== placement) {
        return {
          data: {
            index: currentIndex + 1,
            overflows: allOverflows
          },
          reset: {
            placement: resetPlacement
          }
        };
      }
      return {};
    }
  };
};
const flip$1 = function(options) {
  if (options === void 0) {
    options = {};
  }
  return {
    name: "flip",
    options,
    async fn(state) {
      var _middlewareData$arrow, _middlewareData$flip;
      const {
        placement,
        middlewareData,
        rects,
        initialPlacement,
        platform: platform2,
        elements
      } = state;
      const {
        mainAxis: checkMainAxis = true,
        crossAxis: checkCrossAxis = true,
        fallbackPlacements: specifiedFallbackPlacements,
        fallbackStrategy = "bestFit",
        fallbackAxisSideDirection = "none",
        flipAlignment = true,
        ...detectOverflowOptions
      } = evaluate(options, state);
      if ((_middlewareData$arrow = middlewareData.arrow) != null && _middlewareData$arrow.alignmentOffset) {
        return {};
      }
      const side = getSide(placement);
      const isBasePlacement = getSide(initialPlacement) === initialPlacement;
      const rtl = await (platform2.isRTL == null ? void 0 : platform2.isRTL(elements.floating));
      const fallbackPlacements = specifiedFallbackPlacements || (isBasePlacement || !flipAlignment ? [getOppositePlacement(initialPlacement)] : getExpandedPlacements(initialPlacement));
      if (!specifiedFallbackPlacements && fallbackAxisSideDirection !== "none") {
        fallbackPlacements.push(...getOppositeAxisPlacements(initialPlacement, flipAlignment, fallbackAxisSideDirection, rtl));
      }
      const placements2 = [initialPlacement, ...fallbackPlacements];
      const overflow = await detectOverflow(state, detectOverflowOptions);
      const overflows = [];
      let overflowsData = ((_middlewareData$flip = middlewareData.flip) == null ? void 0 : _middlewareData$flip.overflows) || [];
      if (checkMainAxis) {
        overflows.push(overflow[side]);
      }
      if (checkCrossAxis) {
        const sides2 = getAlignmentSides(placement, rects, rtl);
        overflows.push(overflow[sides2[0]], overflow[sides2[1]]);
      }
      overflowsData = [...overflowsData, {
        placement,
        overflows
      }];
      if (!overflows.every((side2) => side2 <= 0)) {
        var _middlewareData$flip2, _overflowsData$filter;
        const nextIndex = (((_middlewareData$flip2 = middlewareData.flip) == null ? void 0 : _middlewareData$flip2.index) || 0) + 1;
        const nextPlacement = placements2[nextIndex];
        if (nextPlacement) {
          return {
            data: {
              index: nextIndex,
              overflows: overflowsData
            },
            reset: {
              placement: nextPlacement
            }
          };
        }
        let resetPlacement = (_overflowsData$filter = overflowsData.filter((d4) => d4.overflows[0] <= 0).sort((a4, b4) => a4.overflows[1] - b4.overflows[1])[0]) == null ? void 0 : _overflowsData$filter.placement;
        if (!resetPlacement) {
          switch (fallbackStrategy) {
            case "bestFit": {
              var _overflowsData$map$so;
              const placement2 = (_overflowsData$map$so = overflowsData.map((d4) => [d4.placement, d4.overflows.filter((overflow2) => overflow2 > 0).reduce((acc, overflow2) => acc + overflow2, 0)]).sort((a4, b4) => a4[1] - b4[1])[0]) == null ? void 0 : _overflowsData$map$so[0];
              if (placement2) {
                resetPlacement = placement2;
              }
              break;
            }
            case "initialPlacement":
              resetPlacement = initialPlacement;
              break;
          }
        }
        if (placement !== resetPlacement) {
          return {
            reset: {
              placement: resetPlacement
            }
          };
        }
      }
      return {};
    }
  };
};
function getSideOffsets(overflow, rect) {
  return {
    top: overflow.top - rect.height,
    right: overflow.right - rect.width,
    bottom: overflow.bottom - rect.height,
    left: overflow.left - rect.width
  };
}
function isAnySideFullyClipped(overflow) {
  return sides.some((side) => overflow[side] >= 0);
}
const hide$1 = function(options) {
  if (options === void 0) {
    options = {};
  }
  return {
    name: "hide",
    options,
    async fn(state) {
      const {
        rects
      } = state;
      const {
        strategy = "referenceHidden",
        ...detectOverflowOptions
      } = evaluate(options, state);
      switch (strategy) {
        case "referenceHidden": {
          const overflow = await detectOverflow(state, {
            ...detectOverflowOptions,
            elementContext: "reference"
          });
          const offsets = getSideOffsets(overflow, rects.reference);
          return {
            data: {
              referenceHiddenOffsets: offsets,
              referenceHidden: isAnySideFullyClipped(offsets)
            }
          };
        }
        case "escaped": {
          const overflow = await detectOverflow(state, {
            ...detectOverflowOptions,
            altBoundary: true
          });
          const offsets = getSideOffsets(overflow, rects.floating);
          return {
            data: {
              escapedOffsets: offsets,
              escaped: isAnySideFullyClipped(offsets)
            }
          };
        }
        default: {
          return {};
        }
      }
    }
  };
};
async function convertValueToCoords(state, options) {
  const {
    placement,
    platform: platform2,
    elements
  } = state;
  const rtl = await (platform2.isRTL == null ? void 0 : platform2.isRTL(elements.floating));
  const side = getSide(placement);
  const alignment = getAlignment(placement);
  const isVertical = getSideAxis(placement) === "y";
  const mainAxisMulti = ["left", "top"].includes(side) ? -1 : 1;
  const crossAxisMulti = rtl && isVertical ? -1 : 1;
  const rawValue = evaluate(options, state);
  let {
    mainAxis,
    crossAxis,
    alignmentAxis
  } = typeof rawValue === "number" ? {
    mainAxis: rawValue,
    crossAxis: 0,
    alignmentAxis: null
  } : {
    mainAxis: 0,
    crossAxis: 0,
    alignmentAxis: null,
    ...rawValue
  };
  if (alignment && typeof alignmentAxis === "number") {
    crossAxis = alignment === "end" ? alignmentAxis * -1 : alignmentAxis;
  }
  return isVertical ? {
    x: crossAxis * crossAxisMulti,
    y: mainAxis * mainAxisMulti
  } : {
    x: mainAxis * mainAxisMulti,
    y: crossAxis * crossAxisMulti
  };
}
const offset = function(options) {
  if (options === void 0) {
    options = 0;
  }
  return {
    name: "offset",
    options,
    async fn(state) {
      var _middlewareData$offse, _middlewareData$arrow;
      const {
        x: x3,
        y: y4,
        placement,
        middlewareData
      } = state;
      const diffCoords = await convertValueToCoords(state, options);
      if (placement === ((_middlewareData$offse = middlewareData.offset) == null ? void 0 : _middlewareData$offse.placement) && (_middlewareData$arrow = middlewareData.arrow) != null && _middlewareData$arrow.alignmentOffset) {
        return {};
      }
      return {
        x: x3 + diffCoords.x,
        y: y4 + diffCoords.y,
        data: {
          ...diffCoords,
          placement
        }
      };
    }
  };
};
const shift$1 = function(options) {
  if (options === void 0) {
    options = {};
  }
  return {
    name: "shift",
    options,
    async fn(state) {
      const {
        x: x3,
        y: y4,
        placement
      } = state;
      const {
        mainAxis: checkMainAxis = true,
        crossAxis: checkCrossAxis = false,
        limiter = {
          fn: (_ref) => {
            let {
              x: x4,
              y: y5
            } = _ref;
            return {
              x: x4,
              y: y5
            };
          }
        },
        ...detectOverflowOptions
      } = evaluate(options, state);
      const coords = {
        x: x3,
        y: y4
      };
      const overflow = await detectOverflow(state, detectOverflowOptions);
      const crossAxis = getSideAxis(getSide(placement));
      const mainAxis = getOppositeAxis(crossAxis);
      let mainAxisCoord = coords[mainAxis];
      let crossAxisCoord = coords[crossAxis];
      if (checkMainAxis) {
        const minSide = mainAxis === "y" ? "top" : "left";
        const maxSide = mainAxis === "y" ? "bottom" : "right";
        const min2 = mainAxisCoord + overflow[minSide];
        const max2 = mainAxisCoord - overflow[maxSide];
        mainAxisCoord = clamp(min2, mainAxisCoord, max2);
      }
      if (checkCrossAxis) {
        const minSide = crossAxis === "y" ? "top" : "left";
        const maxSide = crossAxis === "y" ? "bottom" : "right";
        const min2 = crossAxisCoord + overflow[minSide];
        const max2 = crossAxisCoord - overflow[maxSide];
        crossAxisCoord = clamp(min2, crossAxisCoord, max2);
      }
      const limitedCoords = limiter.fn({
        ...state,
        [mainAxis]: mainAxisCoord,
        [crossAxis]: crossAxisCoord
      });
      return {
        ...limitedCoords,
        data: {
          x: limitedCoords.x - x3,
          y: limitedCoords.y - y4
        }
      };
    }
  };
};
function getNodeName(node) {
  if (isNode(node)) {
    return (node.nodeName || "").toLowerCase();
  }
  return "#document";
}
function getWindow(node) {
  var _node$ownerDocument;
  return (node == null || (_node$ownerDocument = node.ownerDocument) == null ? void 0 : _node$ownerDocument.defaultView) || window;
}
function getDocumentElement(node) {
  var _ref;
  return (_ref = (isNode(node) ? node.ownerDocument : node.document) || window.document) == null ? void 0 : _ref.documentElement;
}
function isNode(value) {
  return value instanceof Node || value instanceof getWindow(value).Node;
}
function isElement(value) {
  return value instanceof Element || value instanceof getWindow(value).Element;
}
function isHTMLElement(value) {
  return value instanceof HTMLElement || value instanceof getWindow(value).HTMLElement;
}
function isShadowRoot(value) {
  if (typeof ShadowRoot === "undefined") {
    return false;
  }
  return value instanceof ShadowRoot || value instanceof getWindow(value).ShadowRoot;
}
function isOverflowElement(element) {
  const {
    overflow,
    overflowX,
    overflowY,
    display
  } = getComputedStyle$1(element);
  return /auto|scroll|overlay|hidden|clip/.test(overflow + overflowY + overflowX) && !["inline", "contents"].includes(display);
}
function isTableElement(element) {
  return ["table", "td", "th"].includes(getNodeName(element));
}
function isContainingBlock(element) {
  const webkit = isWebKit();
  const css = getComputedStyle$1(element);
  return css.transform !== "none" || css.perspective !== "none" || (css.containerType ? css.containerType !== "normal" : false) || !webkit && (css.backdropFilter ? css.backdropFilter !== "none" : false) || !webkit && (css.filter ? css.filter !== "none" : false) || ["transform", "perspective", "filter"].some((value) => (css.willChange || "").includes(value)) || ["paint", "layout", "strict", "content"].some((value) => (css.contain || "").includes(value));
}
function getContainingBlock(element) {
  let currentNode = getParentNode(element);
  while (isHTMLElement(currentNode) && !isLastTraversableNode(currentNode)) {
    if (isContainingBlock(currentNode)) {
      return currentNode;
    } else {
      currentNode = getParentNode(currentNode);
    }
  }
  return null;
}
function isWebKit() {
  if (typeof CSS === "undefined" || !CSS.supports)
    return false;
  return CSS.supports("-webkit-backdrop-filter", "none");
}
function isLastTraversableNode(node) {
  return ["html", "body", "#document"].includes(getNodeName(node));
}
function getComputedStyle$1(element) {
  return getWindow(element).getComputedStyle(element);
}
function getNodeScroll(element) {
  if (isElement(element)) {
    return {
      scrollLeft: element.scrollLeft,
      scrollTop: element.scrollTop
    };
  }
  return {
    scrollLeft: element.pageXOffset,
    scrollTop: element.pageYOffset
  };
}
function getParentNode(node) {
  if (getNodeName(node) === "html") {
    return node;
  }
  const result = (
    // Step into the shadow DOM of the parent of a slotted node.
    node.assignedSlot || // DOM Element detected.
    node.parentNode || // ShadowRoot detected.
    isShadowRoot(node) && node.host || // Fallback.
    getDocumentElement(node)
  );
  return isShadowRoot(result) ? result.host : result;
}
function getNearestOverflowAncestor(node) {
  const parentNode = getParentNode(node);
  if (isLastTraversableNode(parentNode)) {
    return node.ownerDocument ? node.ownerDocument.body : node.body;
  }
  if (isHTMLElement(parentNode) && isOverflowElement(parentNode)) {
    return parentNode;
  }
  return getNearestOverflowAncestor(parentNode);
}
function getOverflowAncestors(node, list, traverseIframes) {
  var _node$ownerDocument2;
  if (list === void 0) {
    list = [];
  }
  if (traverseIframes === void 0) {
    traverseIframes = true;
  }
  const scrollableAncestor = getNearestOverflowAncestor(node);
  const isBody = scrollableAncestor === ((_node$ownerDocument2 = node.ownerDocument) == null ? void 0 : _node$ownerDocument2.body);
  const win = getWindow(scrollableAncestor);
  if (isBody) {
    return list.concat(win, win.visualViewport || [], isOverflowElement(scrollableAncestor) ? scrollableAncestor : [], win.frameElement && traverseIframes ? getOverflowAncestors(win.frameElement) : []);
  }
  return list.concat(scrollableAncestor, getOverflowAncestors(scrollableAncestor, [], traverseIframes));
}
function getCssDimensions(element) {
  const css = getComputedStyle$1(element);
  let width = parseFloat(css.width) || 0;
  let height = parseFloat(css.height) || 0;
  const hasOffset = isHTMLElement(element);
  const offsetWidth = hasOffset ? element.offsetWidth : width;
  const offsetHeight = hasOffset ? element.offsetHeight : height;
  const shouldFallback = round(width) !== offsetWidth || round(height) !== offsetHeight;
  if (shouldFallback) {
    width = offsetWidth;
    height = offsetHeight;
  }
  return {
    width,
    height,
    $: shouldFallback
  };
}
function unwrapElement$1(element) {
  return !isElement(element) ? element.contextElement : element;
}
function getScale(element) {
  const domElement = unwrapElement$1(element);
  if (!isHTMLElement(domElement)) {
    return createCoords(1);
  }
  const rect = domElement.getBoundingClientRect();
  const {
    width,
    height,
    $: $3
  } = getCssDimensions(domElement);
  let x3 = ($3 ? round(rect.width) : rect.width) / width;
  let y4 = ($3 ? round(rect.height) : rect.height) / height;
  if (!x3 || !Number.isFinite(x3)) {
    x3 = 1;
  }
  if (!y4 || !Number.isFinite(y4)) {
    y4 = 1;
  }
  return {
    x: x3,
    y: y4
  };
}
const noOffsets = /* @__PURE__ */ createCoords(0);
function getVisualOffsets(element) {
  const win = getWindow(element);
  if (!isWebKit() || !win.visualViewport) {
    return noOffsets;
  }
  return {
    x: win.visualViewport.offsetLeft,
    y: win.visualViewport.offsetTop
  };
}
function shouldAddVisualOffsets(element, isFixed, floatingOffsetParent) {
  if (isFixed === void 0) {
    isFixed = false;
  }
  if (!floatingOffsetParent || isFixed && floatingOffsetParent !== getWindow(element)) {
    return false;
  }
  return isFixed;
}
function getBoundingClientRect(element, includeScale, isFixedStrategy, offsetParent) {
  if (includeScale === void 0) {
    includeScale = false;
  }
  if (isFixedStrategy === void 0) {
    isFixedStrategy = false;
  }
  const clientRect = element.getBoundingClientRect();
  const domElement = unwrapElement$1(element);
  let scale = createCoords(1);
  if (includeScale) {
    if (offsetParent) {
      if (isElement(offsetParent)) {
        scale = getScale(offsetParent);
      }
    } else {
      scale = getScale(element);
    }
  }
  const visualOffsets = shouldAddVisualOffsets(domElement, isFixedStrategy, offsetParent) ? getVisualOffsets(domElement) : createCoords(0);
  let x3 = (clientRect.left + visualOffsets.x) / scale.x;
  let y4 = (clientRect.top + visualOffsets.y) / scale.y;
  let width = clientRect.width / scale.x;
  let height = clientRect.height / scale.y;
  if (domElement) {
    const win = getWindow(domElement);
    const offsetWin = offsetParent && isElement(offsetParent) ? getWindow(offsetParent) : offsetParent;
    let currentIFrame = win.frameElement;
    while (currentIFrame && offsetParent && offsetWin !== win) {
      const iframeScale = getScale(currentIFrame);
      const iframeRect = currentIFrame.getBoundingClientRect();
      const css = getComputedStyle$1(currentIFrame);
      const left = iframeRect.left + (currentIFrame.clientLeft + parseFloat(css.paddingLeft)) * iframeScale.x;
      const top = iframeRect.top + (currentIFrame.clientTop + parseFloat(css.paddingTop)) * iframeScale.y;
      x3 *= iframeScale.x;
      y4 *= iframeScale.y;
      width *= iframeScale.x;
      height *= iframeScale.y;
      x3 += left;
      y4 += top;
      currentIFrame = getWindow(currentIFrame).frameElement;
    }
  }
  return rectToClientRect({
    width,
    height,
    x: x3,
    y: y4
  });
}
function convertOffsetParentRelativeRectToViewportRelativeRect(_ref) {
  let {
    rect,
    offsetParent,
    strategy
  } = _ref;
  const isOffsetParentAnElement = isHTMLElement(offsetParent);
  const documentElement = getDocumentElement(offsetParent);
  if (offsetParent === documentElement) {
    return rect;
  }
  let scroll = {
    scrollLeft: 0,
    scrollTop: 0
  };
  let scale = createCoords(1);
  const offsets = createCoords(0);
  if (isOffsetParentAnElement || !isOffsetParentAnElement && strategy !== "fixed") {
    if (getNodeName(offsetParent) !== "body" || isOverflowElement(documentElement)) {
      scroll = getNodeScroll(offsetParent);
    }
    if (isHTMLElement(offsetParent)) {
      const offsetRect = getBoundingClientRect(offsetParent);
      scale = getScale(offsetParent);
      offsets.x = offsetRect.x + offsetParent.clientLeft;
      offsets.y = offsetRect.y + offsetParent.clientTop;
    }
  }
  return {
    width: rect.width * scale.x,
    height: rect.height * scale.y,
    x: rect.x * scale.x - scroll.scrollLeft * scale.x + offsets.x,
    y: rect.y * scale.y - scroll.scrollTop * scale.y + offsets.y
  };
}
function getClientRects(element) {
  return Array.from(element.getClientRects());
}
function getWindowScrollBarX(element) {
  return getBoundingClientRect(getDocumentElement(element)).left + getNodeScroll(element).scrollLeft;
}
function getDocumentRect(element) {
  const html = getDocumentElement(element);
  const scroll = getNodeScroll(element);
  const body = element.ownerDocument.body;
  const width = max(html.scrollWidth, html.clientWidth, body.scrollWidth, body.clientWidth);
  const height = max(html.scrollHeight, html.clientHeight, body.scrollHeight, body.clientHeight);
  let x3 = -scroll.scrollLeft + getWindowScrollBarX(element);
  const y4 = -scroll.scrollTop;
  if (getComputedStyle$1(body).direction === "rtl") {
    x3 += max(html.clientWidth, body.clientWidth) - width;
  }
  return {
    width,
    height,
    x: x3,
    y: y4
  };
}
function getViewportRect(element, strategy) {
  const win = getWindow(element);
  const html = getDocumentElement(element);
  const visualViewport = win.visualViewport;
  let width = html.clientWidth;
  let height = html.clientHeight;
  let x3 = 0;
  let y4 = 0;
  if (visualViewport) {
    width = visualViewport.width;
    height = visualViewport.height;
    const visualViewportBased = isWebKit();
    if (!visualViewportBased || visualViewportBased && strategy === "fixed") {
      x3 = visualViewport.offsetLeft;
      y4 = visualViewport.offsetTop;
    }
  }
  return {
    width,
    height,
    x: x3,
    y: y4
  };
}
function getInnerBoundingClientRect(element, strategy) {
  const clientRect = getBoundingClientRect(element, true, strategy === "fixed");
  const top = clientRect.top + element.clientTop;
  const left = clientRect.left + element.clientLeft;
  const scale = isHTMLElement(element) ? getScale(element) : createCoords(1);
  const width = element.clientWidth * scale.x;
  const height = element.clientHeight * scale.y;
  const x3 = left * scale.x;
  const y4 = top * scale.y;
  return {
    width,
    height,
    x: x3,
    y: y4
  };
}
function getClientRectFromClippingAncestor(element, clippingAncestor, strategy) {
  let rect;
  if (clippingAncestor === "viewport") {
    rect = getViewportRect(element, strategy);
  } else if (clippingAncestor === "document") {
    rect = getDocumentRect(getDocumentElement(element));
  } else if (isElement(clippingAncestor)) {
    rect = getInnerBoundingClientRect(clippingAncestor, strategy);
  } else {
    const visualOffsets = getVisualOffsets(element);
    rect = {
      ...clippingAncestor,
      x: clippingAncestor.x - visualOffsets.x,
      y: clippingAncestor.y - visualOffsets.y
    };
  }
  return rectToClientRect(rect);
}
function hasFixedPositionAncestor(element, stopNode) {
  const parentNode = getParentNode(element);
  if (parentNode === stopNode || !isElement(parentNode) || isLastTraversableNode(parentNode)) {
    return false;
  }
  return getComputedStyle$1(parentNode).position === "fixed" || hasFixedPositionAncestor(parentNode, stopNode);
}
function getClippingElementAncestors(element, cache2) {
  const cachedResult = cache2.get(element);
  if (cachedResult) {
    return cachedResult;
  }
  let result = getOverflowAncestors(element, [], false).filter((el3) => isElement(el3) && getNodeName(el3) !== "body");
  let currentContainingBlockComputedStyle = null;
  const elementIsFixed = getComputedStyle$1(element).position === "fixed";
  let currentNode = elementIsFixed ? getParentNode(element) : element;
  while (isElement(currentNode) && !isLastTraversableNode(currentNode)) {
    const computedStyle = getComputedStyle$1(currentNode);
    const currentNodeIsContaining = isContainingBlock(currentNode);
    if (!currentNodeIsContaining && computedStyle.position === "fixed") {
      currentContainingBlockComputedStyle = null;
    }
    const shouldDropCurrentNode = elementIsFixed ? !currentNodeIsContaining && !currentContainingBlockComputedStyle : !currentNodeIsContaining && computedStyle.position === "static" && !!currentContainingBlockComputedStyle && ["absolute", "fixed"].includes(currentContainingBlockComputedStyle.position) || isOverflowElement(currentNode) && !currentNodeIsContaining && hasFixedPositionAncestor(element, currentNode);
    if (shouldDropCurrentNode) {
      result = result.filter((ancestor) => ancestor !== currentNode);
    } else {
      currentContainingBlockComputedStyle = computedStyle;
    }
    currentNode = getParentNode(currentNode);
  }
  cache2.set(element, result);
  return result;
}
function getClippingRect(_ref) {
  let {
    element,
    boundary,
    rootBoundary,
    strategy
  } = _ref;
  const elementClippingAncestors = boundary === "clippingAncestors" ? getClippingElementAncestors(element, this._c) : [].concat(boundary);
  const clippingAncestors = [...elementClippingAncestors, rootBoundary];
  const firstClippingAncestor = clippingAncestors[0];
  const clippingRect = clippingAncestors.reduce((accRect, clippingAncestor) => {
    const rect = getClientRectFromClippingAncestor(element, clippingAncestor, strategy);
    accRect.top = max(rect.top, accRect.top);
    accRect.right = min(rect.right, accRect.right);
    accRect.bottom = min(rect.bottom, accRect.bottom);
    accRect.left = max(rect.left, accRect.left);
    return accRect;
  }, getClientRectFromClippingAncestor(element, firstClippingAncestor, strategy));
  return {
    width: clippingRect.right - clippingRect.left,
    height: clippingRect.bottom - clippingRect.top,
    x: clippingRect.left,
    y: clippingRect.top
  };
}
function getDimensions(element) {
  const {
    width,
    height
  } = getCssDimensions(element);
  return {
    width,
    height
  };
}
function getRectRelativeToOffsetParent(element, offsetParent, strategy) {
  const isOffsetParentAnElement = isHTMLElement(offsetParent);
  const documentElement = getDocumentElement(offsetParent);
  const isFixed = strategy === "fixed";
  const rect = getBoundingClientRect(element, true, isFixed, offsetParent);
  let scroll = {
    scrollLeft: 0,
    scrollTop: 0
  };
  const offsets = createCoords(0);
  if (isOffsetParentAnElement || !isOffsetParentAnElement && !isFixed) {
    if (getNodeName(offsetParent) !== "body" || isOverflowElement(documentElement)) {
      scroll = getNodeScroll(offsetParent);
    }
    if (isOffsetParentAnElement) {
      const offsetRect = getBoundingClientRect(offsetParent, true, isFixed, offsetParent);
      offsets.x = offsetRect.x + offsetParent.clientLeft;
      offsets.y = offsetRect.y + offsetParent.clientTop;
    } else if (documentElement) {
      offsets.x = getWindowScrollBarX(documentElement);
    }
  }
  return {
    x: rect.left + scroll.scrollLeft - offsets.x,
    y: rect.top + scroll.scrollTop - offsets.y,
    width: rect.width,
    height: rect.height
  };
}
function getTrueOffsetParent(element, polyfill) {
  if (!isHTMLElement(element) || getComputedStyle$1(element).position === "fixed") {
    return null;
  }
  if (polyfill) {
    return polyfill(element);
  }
  return element.offsetParent;
}
function getOffsetParent(element, polyfill) {
  const window2 = getWindow(element);
  if (!isHTMLElement(element)) {
    return window2;
  }
  let offsetParent = getTrueOffsetParent(element, polyfill);
  while (offsetParent && isTableElement(offsetParent) && getComputedStyle$1(offsetParent).position === "static") {
    offsetParent = getTrueOffsetParent(offsetParent, polyfill);
  }
  if (offsetParent && (getNodeName(offsetParent) === "html" || getNodeName(offsetParent) === "body" && getComputedStyle$1(offsetParent).position === "static" && !isContainingBlock(offsetParent))) {
    return window2;
  }
  return offsetParent || getContainingBlock(element) || window2;
}
const getElementRects = async function(_ref) {
  let {
    reference,
    floating,
    strategy
  } = _ref;
  const getOffsetParentFn = this.getOffsetParent || getOffsetParent;
  const getDimensionsFn = this.getDimensions;
  return {
    reference: getRectRelativeToOffsetParent(reference, await getOffsetParentFn(floating), strategy),
    floating: {
      x: 0,
      y: 0,
      ...await getDimensionsFn(floating)
    }
  };
};
function isRTL(element) {
  return getComputedStyle$1(element).direction === "rtl";
}
const platform = {
  convertOffsetParentRelativeRectToViewportRelativeRect,
  getDocumentElement,
  getClippingRect,
  getOffsetParent,
  getElementRects,
  getClientRects,
  getDimensions,
  getScale,
  isElement,
  isRTL
};
function observeMove(element, onMove) {
  let io2 = null;
  let timeoutId;
  const root = getDocumentElement(element);
  function cleanup() {
    clearTimeout(timeoutId);
    io2 && io2.disconnect();
    io2 = null;
  }
  function refresh(skip, threshold) {
    if (skip === void 0) {
      skip = false;
    }
    if (threshold === void 0) {
      threshold = 1;
    }
    cleanup();
    const {
      left,
      top,
      width,
      height
    } = element.getBoundingClientRect();
    if (!skip) {
      onMove();
    }
    if (!width || !height) {
      return;
    }
    const insetTop = floor(top);
    const insetRight = floor(root.clientWidth - (left + width));
    const insetBottom = floor(root.clientHeight - (top + height));
    const insetLeft = floor(left);
    const rootMargin = -insetTop + "px " + -insetRight + "px " + -insetBottom + "px " + -insetLeft + "px";
    const options = {
      rootMargin,
      threshold: max(0, min(1, threshold)) || 1
    };
    let isFirstUpdate = true;
    function handleObserve(entries) {
      const ratio = entries[0].intersectionRatio;
      if (ratio !== threshold) {
        if (!isFirstUpdate) {
          return refresh();
        }
        if (!ratio) {
          timeoutId = setTimeout(() => {
            refresh(false, 1e-7);
          }, 100);
        } else {
          refresh(false, ratio);
        }
      }
      isFirstUpdate = false;
    }
    try {
      io2 = new IntersectionObserver(handleObserve, {
        ...options,
        // Handle <iframe>s
        root: root.ownerDocument
      });
    } catch (e3) {
      io2 = new IntersectionObserver(handleObserve, options);
    }
    io2.observe(element);
  }
  refresh(true);
  return cleanup;
}
function autoUpdate(reference, floating, update, options) {
  if (options === void 0) {
    options = {};
  }
  const {
    ancestorScroll = true,
    ancestorResize = true,
    elementResize = typeof ResizeObserver === "function",
    layoutShift = typeof IntersectionObserver === "function",
    animationFrame = false
  } = options;
  const referenceEl = unwrapElement$1(reference);
  const ancestors = ancestorScroll || ancestorResize ? [...referenceEl ? getOverflowAncestors(referenceEl) : [], ...getOverflowAncestors(floating)] : [];
  ancestors.forEach((ancestor) => {
    ancestorScroll && ancestor.addEventListener("scroll", update, {
      passive: true
    });
    ancestorResize && ancestor.addEventListener("resize", update);
  });
  const cleanupIo = referenceEl && layoutShift ? observeMove(referenceEl, update) : null;
  let reobserveFrame = -1;
  let resizeObserver = null;
  if (elementResize) {
    resizeObserver = new ResizeObserver((_ref) => {
      let [firstEntry] = _ref;
      if (firstEntry && firstEntry.target === referenceEl && resizeObserver) {
        resizeObserver.unobserve(floating);
        cancelAnimationFrame(reobserveFrame);
        reobserveFrame = requestAnimationFrame(() => {
          resizeObserver && resizeObserver.observe(floating);
        });
      }
      update();
    });
    if (referenceEl && !animationFrame) {
      resizeObserver.observe(referenceEl);
    }
    resizeObserver.observe(floating);
  }
  let frameId;
  let prevRefRect = animationFrame ? getBoundingClientRect(reference) : null;
  if (animationFrame) {
    frameLoop();
  }
  function frameLoop() {
    const nextRefRect = getBoundingClientRect(reference);
    if (prevRefRect && (nextRefRect.x !== prevRefRect.x || nextRefRect.y !== prevRefRect.y || nextRefRect.width !== prevRefRect.width || nextRefRect.height !== prevRefRect.height)) {
      update();
    }
    prevRefRect = nextRefRect;
    frameId = requestAnimationFrame(frameLoop);
  }
  update();
  return () => {
    ancestors.forEach((ancestor) => {
      ancestorScroll && ancestor.removeEventListener("scroll", update);
      ancestorResize && ancestor.removeEventListener("resize", update);
    });
    cleanupIo && cleanupIo();
    resizeObserver && resizeObserver.disconnect();
    resizeObserver = null;
    if (animationFrame) {
      cancelAnimationFrame(frameId);
    }
  };
}
const autoPlacement = autoPlacement$1;
const shift = shift$1;
const flip = flip$1;
const hide = hide$1;
const arrow$1 = arrow$2;
const computePosition = (reference, floating, options) => {
  const cache2 = /* @__PURE__ */ new Map();
  const mergedOptions = {
    platform,
    ...options
  };
  const platformWithCache = {
    ...mergedOptions.platform,
    _c: cache2
  };
  return computePosition$1(reference, floating, {
    ...mergedOptions,
    platform: platformWithCache
  });
};
var isVue2 = false;
function unwrapElement(element) {
  var _$el;
  return (_$el = element == null ? void 0 : element.$el) != null ? _$el : element;
}
function arrow(options) {
  return {
    name: "arrow",
    options,
    fn(args) {
      const element = unwrapElement(unref(options.element));
      if (element == null) {
        return {};
      }
      return arrow$1({
        element,
        padding: options.padding
      }).fn(args);
    }
  };
}
function getDPR(element) {
  if (typeof window === "undefined") {
    return 1;
  }
  const win = element.ownerDocument.defaultView || window;
  return win.devicePixelRatio || 1;
}
function roundByDPR(element, value) {
  const dpr = getDPR(element);
  return Math.round(value * dpr) / dpr;
}
function useFloating(reference, floating, options) {
  if (options === void 0) {
    options = {};
  }
  const whileElementsMountedOption = options.whileElementsMounted;
  const openOption = computed(() => {
    var _unref;
    return (_unref = unref(options.open)) != null ? _unref : true;
  });
  const middlewareOption = computed(() => unref(options.middleware));
  const placementOption = computed(() => {
    var _unref2;
    return (_unref2 = unref(options.placement)) != null ? _unref2 : "bottom";
  });
  const strategyOption = computed(() => {
    var _unref3;
    return (_unref3 = unref(options.strategy)) != null ? _unref3 : "absolute";
  });
  const transformOption = computed(() => {
    var _unref4;
    return (_unref4 = unref(options.transform)) != null ? _unref4 : true;
  });
  const referenceElement = computed(() => unwrapElement(reference.value));
  const floatingElement = computed(() => unwrapElement(floating.value));
  const x3 = ref(0);
  const y4 = ref(0);
  const strategy = ref(strategyOption.value);
  const placement = ref(placementOption.value);
  const middlewareData = shallowRef({});
  const isPositioned = ref(false);
  const floatingStyles = computed(() => {
    const initialStyles = {
      position: strategy.value,
      left: "0",
      top: "0"
    };
    if (!floatingElement.value) {
      return initialStyles;
    }
    const xVal = roundByDPR(floatingElement.value, x3.value);
    const yVal = roundByDPR(floatingElement.value, y4.value);
    if (transformOption.value) {
      return {
        ...initialStyles,
        transform: "translate(" + xVal + "px, " + yVal + "px)",
        ...getDPR(floatingElement.value) >= 1.5 && {
          willChange: "transform"
        }
      };
    }
    return {
      position: strategy.value,
      left: xVal + "px",
      top: yVal + "px"
    };
  });
  let whileElementsMountedCleanup;
  function update() {
    if (referenceElement.value == null || floatingElement.value == null) {
      return;
    }
    computePosition(referenceElement.value, floatingElement.value, {
      middleware: middlewareOption.value,
      placement: placementOption.value,
      strategy: strategyOption.value
    }).then((position) => {
      x3.value = position.x;
      y4.value = position.y;
      strategy.value = position.strategy;
      placement.value = position.placement;
      middlewareData.value = position.middlewareData;
      isPositioned.value = true;
    });
  }
  function cleanup() {
    if (typeof whileElementsMountedCleanup === "function") {
      whileElementsMountedCleanup();
      whileElementsMountedCleanup = void 0;
    }
  }
  function attach() {
    cleanup();
    if (whileElementsMountedOption === void 0) {
      update();
      return;
    }
    if (referenceElement.value != null && floatingElement.value != null) {
      whileElementsMountedCleanup = whileElementsMountedOption(referenceElement.value, floatingElement.value, update);
      return;
    }
  }
  function reset() {
    if (!openOption.value) {
      isPositioned.value = false;
    }
  }
  watch([middlewareOption, placementOption, strategyOption], update, {
    flush: "sync"
  });
  watch([referenceElement, floatingElement], attach, {
    flush: "sync"
  });
  watch(openOption, reset, {
    flush: "sync"
  });
  if (getCurrentScope()) {
    onScopeDispose(cleanup);
  }
  return {
    x: shallowReadonly(x3),
    y: shallowReadonly(y4),
    strategy: shallowReadonly(strategy),
    placement: shallowReadonly(placement),
    middlewareData: shallowReadonly(middlewareData),
    isPositioned: shallowReadonly(isPositioned),
    floatingStyles,
    update
  };
}
var ge = Object.defineProperty;
var ve = (e3, r2, o2) => r2 in e3 ? ge(e3, r2, { enumerable: true, configurable: true, writable: true, value: o2 }) : e3[r2] = o2;
var _$1 = (e3, r2, o2) => (ve(e3, typeof r2 != "symbol" ? r2 + "" : r2, o2), o2);
function V(e3) {
  return e3 == null || e3.value == null ? null : e3.value instanceof Node ? e3.value : "$el" in e3.value && e3.value.$el ? V(ref(e3.value.$el)) : "getBoundingClientRect" in e3.value ? e3.value : null;
}
function X(e3) {
  return e3.reduce((r2, o2) => o2.type === Fragment ? r2.concat(X(o2.children)) : r2.concat(o2), []);
}
function z$1(e3) {
  return e3 == null ? false : typeof e3.type == "string" || typeof e3.type == "object" || typeof e3.type == "function";
}
function J(e3) {
  return e3 = unref(e3), e3 && (e3 == null ? void 0 : e3.nodeType) !== Node.COMMENT_NODE;
}
let je$1 = class je2 {
  constructor() {
    _$1(this, "current", this.detect());
  }
  set(r2) {
    this.current !== r2 && (this.current = r2);
  }
  reset() {
    this.set(this.detect());
  }
  get isServer() {
    return this.current === "server";
  }
  get isClient() {
    return this.current === "client";
  }
  detect() {
    return typeof window > "u" || typeof document > "u" ? "server" : "client";
  }
};
const Y = new je$1();
function Ve$1(e3, r2, o2, a4, t3) {
  watch([
    () => t3.offset,
    () => t3.flip,
    () => t3.shift,
    () => t3.autoPlacement,
    () => t3.arrow,
    () => t3.hide,
    () => t3.middleware
  ], () => {
    const i3 = [];
    (typeof t3.offset == "number" || typeof t3.offset == "object" || typeof t3.offset == "function") && i3.push(offset(t3.offset)), (t3.flip === true || typeof t3.flip == "number" || typeof t3.flip == "object") && i3.push(flip({
      padding: typeof t3.flip == "number" ? t3.flip : void 0,
      ...typeof t3.flip == "object" ? t3.flip : {}
    })), (t3.shift === true || typeof t3.shift == "number" || typeof t3.shift == "object") && i3.push(shift({
      padding: typeof t3.shift == "number" ? t3.shift : void 0,
      ...typeof t3.shift == "object" ? t3.shift : {}
    })), (t3.autoPlacement === true || typeof t3.autoPlacement == "object") && i3.push(autoPlacement(
      typeof t3.autoPlacement == "object" ? t3.autoPlacement : void 0
    )), i3.push(...typeof t3.middleware == "function" ? t3.middleware({
      referenceEl: r2,
      floatingEl: o2
    }) : t3.middleware || []), (t3.arrow === true || typeof t3.arrow == "number") && i3.push(arrow({
      element: a4,
      padding: t3.arrow === true ? 0 : t3.arrow
    })), (t3.hide === true || typeof t3.hide == "object" || Array.isArray(t3.hide)) && (Array.isArray(t3.hide) ? t3.hide : [t3.hide]).forEach((u3) => {
      i3.push(hide(
        typeof u3 == "object" ? u3 : void 0
      ));
    }), e3.value = i3;
  }, { immediate: true });
}
function Ie$1(e3, r2, o2) {
  let a4 = () => {
  };
  onMounted(() => {
    if (e3 && Y.isClient && typeof ResizeObserver < "u" && r2.value && r2.value instanceof Element) {
      const t3 = new ResizeObserver(([i3]) => {
        o2.value = i3.borderBoxSize.reduce((u3, { inlineSize: s5 }) => u3 + s5, 0);
      });
      t3.observe(r2.value), a4 = () => {
        t3.disconnect(), o2.value = null;
      };
    }
  }), onBeforeUnmount(() => {
    a4();
  });
}
const Ue$1 = (e3) => {
  switch (e3) {
    case "top":
      return "origin-bottom";
    case "bottom":
      return "origin-top";
    case "left":
      return "origin-right";
    case "right":
      return "origin-left";
    case "top-start":
    case "right-end":
      return "origin-bottom-left";
    case "top-end":
    case "left-end":
      return "origin-bottom-right";
    case "right-start":
    case "bottom-start":
      return "origin-top-left";
    case "left-start":
    case "bottom-end":
      return "origin-top-right";
    default:
      return "origin-center";
  }
};
function ze$1(e3, r2) {
  const o2 = computed(() => {
    if (typeof e3.originClass == "function")
      return e3.originClass(r2.value);
    if (typeof e3.originClass == "string")
      return e3.originClass;
    if (e3.tailwindcssOriginClass)
      return Ue$1(r2.value);
  }), a4 = computed(
    () => e3.enter || o2.value ? `${e3.enter || ""} ${o2.value || ""}` : void 0
  ), t3 = computed(
    () => e3.leave || o2.value ? `${e3.leave || ""} ${o2.value || ""}` : void 0
  );
  return { originClassRef: o2, enterActiveClassRef: a4, leaveActiveClassRef: t3 };
}
const re = Symbol("ReferenceContext"), oe = Symbol("FloatingContext"), ae = Symbol("ArrowContext");
const n$1 = {
  as: {
    type: [String, Function],
    default: "template"
  },
  floatingAs: {
    type: [String, Function],
    default: "div"
  },
  show: {
    type: Boolean,
    default: null
  },
  placement: {
    type: String,
    default: "bottom-start"
  },
  strategy: {
    type: String,
    default: "absolute"
  },
  offset: [Number, Function, Object],
  shift: {
    type: [Boolean, Number, Object],
    default: false
  },
  flip: {
    type: [Boolean, Number, Object],
    default: false
  },
  arrow: {
    type: [Boolean, Number],
    default: false
  },
  autoPlacement: {
    type: [Boolean, Object],
    default: false
  },
  hide: {
    type: [Boolean, Object, Array],
    default: false
  },
  referenceHiddenClass: String,
  escapedClass: String,
  autoUpdate: {
    type: [Boolean, Object],
    default: true
  },
  zIndex: {
    type: [Number, String],
    default: 9999
  },
  transitionName: String,
  transitionType: String,
  enter: String,
  enterFrom: String,
  enterTo: String,
  leave: String,
  leaveFrom: String,
  leaveTo: String,
  originClass: [String, Function],
  tailwindcssOriginClass: {
    type: Boolean,
    default: false
  },
  portal: {
    type: Boolean,
    default: false
  },
  transform: {
    type: Boolean,
    default: false
  },
  adaptiveWidth: {
    type: Boolean,
    default: false
  },
  composable: {
    type: Boolean,
    default: false
  },
  dialog: {
    type: Boolean,
    default: false
  },
  middleware: {
    type: [Array, Function],
    default: () => []
  }
};
function ue(e3, r2, o2, a4) {
  const { referenceRef: t3 } = a4, i3 = r2, u3 = mergeProps(o2, {
    ref: t3
  }), s5 = cloneVNode(
    e3,
    i3.as === "template" ? u3 : {}
  );
  return i3.as === "template" ? s5 : typeof i3.as == "string" ? h$3(i3.as, u3, [s5]) : h$3(i3.as, u3, () => [s5]);
}
function W(e3, r2, o2, a4) {
  const { floatingRef: t3, props: i3, mounted: u3, show: s5, referenceHidden: d4, escaped: f2, placement: c3, floatingStyles: h4, referenceElWidth: p2, updateFloating: x3 } = a4, l2 = mergeProps(
    { ...i3, as: i3.floatingAs },
    r2
  ), { enterActiveClassRef: g2, leaveActiveClassRef: m4 } = ze$1(l2, c3), F2 = {
    enterActiveClass: g2.value,
    enterFromClass: l2.enterFrom,
    enterToClass: l2.enterTo,
    leaveActiveClass: m4.value,
    leaveFromClass: l2.leaveFrom,
    leaveToClass: l2.leaveTo
  }, C2 = {
    name: l2.transitionName,
    type: l2.transitionType,
    appear: true,
    ...l2.transitionName ? {} : F2,
    onBeforeEnter() {
      s5.value = true;
    },
    onAfterLeave() {
      s5.value = false;
    }
  }, P2 = {
    enter: g2.value,
    enterFrom: l2.enterFrom,
    enterTo: l2.enterTo,
    leave: m4.value,
    leaveFrom: l2.leaveFrom,
    leaveTo: l2.leaveTo,
    onBeforeEnter: C2.onBeforeEnter,
    onAfterLeave: C2.onAfterLeave
  }, I3 = {
    class: [
      d4.value ? l2.referenceHiddenClass : void 0,
      f2.value ? l2.escapedClass : void 0
    ].filter((y4) => !!y4).join(" "),
    style: {
      ...h4.value,
      zIndex: l2.zIndex,
      width: l2.adaptiveWidth && typeof p2.value == "number" ? `${p2.value}px` : void 0
    }
  };
  function H5(y4) {
    return l2.portal ? u3.value ? h$3(_$2, () => y4) : createCommentVNode() : y4;
  }
  function U2(y4) {
    const R4 = mergeProps(
      I3,
      o2,
      l2.dialog ? {} : { ref: t3 }
    );
    return l2.as === "template" ? y4 : typeof l2.as == "string" ? h$3(l2.as, R4, y4) : h$3(l2.as, R4, () => y4);
  }
  function S4() {
    function y4() {
      var j2;
      const R4 = l2.as === "template" ? mergeProps(
        I3,
        o2,
        l2.dialog ? {} : { ref: t3 }
      ) : null, B3 = cloneVNode(e3, R4);
      return ((j2 = B3.props) == null ? void 0 : j2.unmount) === false ? (x3(), B3) : typeof l2.show != "boolean" || l2.show ? B3 : createCommentVNode();
    }
    return u3.value ? l2.transitionChild ? h$3(he, {
      key: `placement-${c3.value}`,
      ...l2.dialog ? { ref: t3 } : {},
      as: "template",
      ...P2
    }, y4) : h$3(Transition, {
      ...l2.dialog ? { ref: t3 } : {},
      ...C2
    }, y4) : createCommentVNode();
  }
  return H5(
    U2(
      S4()
    )
  );
}
function fe(e3, r2, o2, a4, t3) {
  const i3 = ref(false), u3 = toRef(a4, "placement"), s5 = toRef(a4, "strategy"), d4 = shallowRef({}), f2 = ref(void 0), c3 = ref(void 0), h4 = ref(null), p2 = ref(void 0), x3 = ref(void 0), l2 = computed(() => V(r2)), g2 = computed(() => V(o2)), m4 = computed(
    () => J(l2) && J(g2)
  ), { placement: F2, middlewareData: C2, isPositioned: P2, floatingStyles: I3, update: H5 } = useFloating(l2, g2, {
    placement: u3,
    strategy: s5,
    middleware: d4,
    transform: a4.dialog ? false : a4.transform
    // If enable dialog mode, then set `transform` to false.
  }), U2 = ref(null);
  onMounted(() => {
    i3.value = true;
  }), watch(e3, (w3, O4) => {
    w3 && !O4 ? t3("show") : !w3 && O4 && t3("hide");
  }, { immediate: true });
  function S4() {
    m4.value && (H5(), t3("update"));
  }
  watch([u3, s5, d4], S4, { flush: "sync" }), Ve$1(
    d4,
    l2,
    g2,
    h4,
    a4
  ), watch([C2, () => a4.hide, P2], () => {
    var w3, O4;
    (a4.hide === true || typeof a4.hide == "object" || Array.isArray(a4.hide)) && (f2.value = ((w3 = C2.value.hide) == null ? void 0 : w3.referenceHidden) || !P2.value, c3.value = (O4 = C2.value.hide) == null ? void 0 : O4.escaped);
  }), watch(C2, () => {
    const w3 = C2.value.arrow;
    p2.value = w3 == null ? void 0 : w3.x, x3.value = w3 == null ? void 0 : w3.y;
  }), Ie$1(a4.adaptiveWidth, l2, U2), watch([e3, m4], async (w3, O4, de2) => {
    if (await nextTick(), e3.value && m4.value && a4.autoUpdate) {
      const me2 = autoUpdate(
        l2.value,
        g2.value,
        S4,
        typeof a4.autoUpdate == "object" ? a4.autoUpdate : void 0
      );
      de2(me2);
    }
  }, { flush: "post", immediate: true });
  const y4 = ref(true);
  watch(l2, () => {
    !(l2.value instanceof Element) && m4.value && y4.value && (y4.value = false, window.requestAnimationFrame(() => {
      y4.value = true, S4();
    }));
  }, { flush: "sync" });
  const R4 = {
    referenceRef: r2,
    placement: F2
  }, B3 = {
    floatingRef: o2,
    props: a4,
    mounted: i3,
    show: e3,
    referenceHidden: f2,
    escaped: c3,
    placement: F2,
    floatingStyles: I3,
    referenceElWidth: U2,
    updateFloating: S4
  }, j2 = {
    ref: h4,
    placement: F2,
    x: p2,
    y: x3
  };
  return provide(ae, j2), { referenceApi: R4, floatingApi: B3, arrowApi: j2, placement: F2, referenceEl: l2, floatingEl: g2, middlewareData: C2, update: S4 };
}
const $e$1 = {
  name: "Float",
  inheritAttrs: false,
  props: n$1,
  emits: ["show", "hide", "update"],
  setup(e3, { emit: r2, slots: o2, attrs: a4 }) {
    const t3 = ref(e3.show ?? false), i3 = ref(null), u3 = ref(null), {
      referenceApi: s5,
      floatingApi: d4,
      placement: f2
    } = fe(t3, i3, u3, e3, r2);
    function c3(p2) {
      return e3.as === "template" ? p2 : typeof e3.as == "string" ? h$3(e3.as, a4, p2) : h$3(e3.as, a4, () => p2);
    }
    const h4 = {
      placement: f2.value
    };
    return e3.composable || e3.dialog ? (provide(re, s5), provide(oe, d4), () => {
      if (o2.default)
        return c3(o2.default(h4));
    }) : () => {
      if (!o2.default)
        return;
      const [p2, x3] = X(o2.default(h4)).filter(z$1);
      if (!z$1(p2))
        return;
      const l2 = ue(
        p2,
        { as: "template" },
        {},
        s5
      ), g2 = W(
        x3,
        { as: e3.floatingAs },
        {},
        d4
      );
      return c3([
        l2,
        g2
      ]);
    };
  }
};
({
  as: n$1.as
});
({
  as: n$1.floatingAs,
  transitionName: n$1.transitionName,
  transitionType: n$1.transitionType,
  enter: n$1.enter,
  enterFrom: n$1.enterFrom,
  enterTo: n$1.enterTo,
  leave: n$1.leave,
  leaveFrom: n$1.leaveFrom,
  leaveTo: n$1.leaveTo,
  originClass: n$1.originClass,
  tailwindcssOriginClass: n$1.tailwindcssOriginClass,
  transitionChild: {
    type: Boolean,
    default: false
  }
});
({
  as: {
    ...n$1.as,
    default: "div"
  },
  offset: {
    type: Number,
    default: 4
  }
});
({
  as: n$1.as,
  show: n$1.show,
  placement: n$1.placement,
  strategy: n$1.strategy,
  offset: n$1.offset,
  shift: n$1.shift,
  flip: n$1.flip,
  arrow: n$1.arrow,
  autoPlacement: n$1.autoPlacement,
  autoUpdate: n$1.autoUpdate,
  zIndex: n$1.zIndex,
  transitionName: n$1.transitionName,
  transitionType: n$1.transitionType,
  enter: n$1.enter,
  enterFrom: n$1.enterFrom,
  enterTo: n$1.enterTo,
  leave: n$1.leave,
  leaveFrom: n$1.leaveFrom,
  leaveTo: n$1.leaveTo,
  originClass: n$1.originClass,
  tailwindcssOriginClass: n$1.tailwindcssOriginClass,
  portal: n$1.portal,
  transform: n$1.transform,
  middleware: n$1.middleware
});
({
  as: n$1.as,
  placement: n$1.placement,
  strategy: n$1.strategy,
  offset: n$1.offset,
  shift: n$1.shift,
  flip: {
    ...n$1.flip,
    default: true
  },
  arrow: n$1.arrow,
  autoPlacement: n$1.autoPlacement,
  autoUpdate: n$1.autoUpdate,
  zIndex: n$1.zIndex,
  transitionName: n$1.transitionName,
  transitionType: n$1.transitionType,
  enter: n$1.enter,
  enterFrom: n$1.enterFrom,
  enterTo: n$1.enterTo,
  leave: n$1.leave,
  leaveFrom: n$1.leaveFrom,
  leaveTo: n$1.leaveTo,
  originClass: n$1.originClass,
  tailwindcssOriginClass: n$1.tailwindcssOriginClass,
  transform: n$1.transform,
  middleware: n$1.middleware
});
({
  as: n$1.as,
  placement: n$1.placement,
  strategy: n$1.strategy,
  offset: n$1.offset,
  shift: n$1.shift,
  flip: n$1.flip,
  arrow: n$1.arrow,
  autoPlacement: n$1.autoPlacement,
  autoUpdate: n$1.autoUpdate,
  zIndex: n$1.zIndex,
  transitionName: n$1.transitionName,
  transitionType: n$1.transitionType,
  enter: n$1.enter,
  enterFrom: n$1.enterFrom,
  enterTo: n$1.enterTo,
  leave: n$1.leave,
  leaveFrom: n$1.leaveFrom,
  leaveTo: n$1.leaveTo,
  originClass: n$1.originClass,
  tailwindcssOriginClass: n$1.tailwindcssOriginClass,
  transform: n$1.transform,
  middleware: n$1.middleware,
  globalHideCursor: {
    type: Boolean,
    default: true
  }
});
/*!
  * shared v9.9.0
  * (c) 2024 kazuya kawaguchi
  * Released under the MIT License.
  */
const inBrowser = typeof window !== "undefined";
let mark;
let measure;
{
  const perf2 = inBrowser && window.performance;
  if (perf2 && perf2.mark && perf2.measure && perf2.clearMarks && // @ts-ignore browser compat
  perf2.clearMeasures) {
    mark = (tag) => {
      perf2.mark(tag);
    };
    measure = (name, startTag, endTag) => {
      perf2.measure(name, startTag, endTag);
      perf2.clearMarks(startTag);
      perf2.clearMarks(endTag);
    };
  }
}
const RE_ARGS$1 = /\{([0-9a-zA-Z]+)\}/g;
function format$1(message, ...args) {
  if (args.length === 1 && isObject$2(args[0])) {
    args = args[0];
  }
  if (!args || !args.hasOwnProperty) {
    args = {};
  }
  return message.replace(RE_ARGS$1, (match2, identifier) => {
    return args.hasOwnProperty(identifier) ? args[identifier] : "";
  });
}
const makeSymbol = (name, shareable = false) => !shareable ? Symbol(name) : Symbol.for(name);
const generateFormatCacheKey = (locale2, key, source) => friendlyJSONstringify({ l: locale2, k: key, s: source });
const friendlyJSONstringify = (json) => JSON.stringify(json).replace(/\u2028/g, "\\u2028").replace(/\u2029/g, "\\u2029").replace(/\u0027/g, "\\u0027");
const isNumber = (val) => typeof val === "number" && isFinite(val);
const isDate = (val) => toTypeString(val) === "[object Date]";
const isRegExp = (val) => toTypeString(val) === "[object RegExp]";
const isEmptyObject = (val) => isPlainObject(val) && Object.keys(val).length === 0;
const assign = Object.assign;
let _globalThis;
const getGlobalThis = () => {
  return _globalThis || (_globalThis = typeof globalThis !== "undefined" ? globalThis : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : typeof global !== "undefined" ? global : {});
};
function escapeHtml$1(rawText) {
  return rawText.replace(/</g, "&lt;").replace(/>/g, "&gt;").replace(/"/g, "&quot;").replace(/'/g, "&apos;");
}
const hasOwnProperty = Object.prototype.hasOwnProperty;
function hasOwn(obj, key) {
  return hasOwnProperty.call(obj, key);
}
const isArray = Array.isArray;
const isFunction = (val) => typeof val === "function";
const isString = (val) => typeof val === "string";
const isBoolean = (val) => typeof val === "boolean";
const isObject$2 = (val) => val !== null && typeof val === "object";
const isPromise = (val) => {
  return isObject$2(val) && isFunction(val.then) && isFunction(val.catch);
};
const objectToString = Object.prototype.toString;
const toTypeString = (value) => objectToString.call(value);
const isPlainObject = (val) => {
  if (!isObject$2(val))
    return false;
  const proto = Object.getPrototypeOf(val);
  return proto === null || proto.constructor === Object;
};
const toDisplayString = (val) => {
  return val == null ? "" : isArray(val) || isPlainObject(val) && val.toString === objectToString ? JSON.stringify(val, null, 2) : String(val);
};
function join$1(items, separator2 = "") {
  return items.reduce((str, item, index) => index === 0 ? str + item : str + separator2 + item, "");
}
const RANGE = 2;
function generateCodeFrame(source, start = 0, end = source.length) {
  const lines = source.split(/\r?\n/);
  let count2 = 0;
  const res = [];
  for (let i3 = 0; i3 < lines.length; i3++) {
    count2 += lines[i3].length + 1;
    if (count2 >= start) {
      for (let j2 = i3 - RANGE; j2 <= i3 + RANGE || end > count2; j2++) {
        if (j2 < 0 || j2 >= lines.length)
          continue;
        const line = j2 + 1;
        res.push(`${line}${" ".repeat(3 - String(line).length)}|  ${lines[j2]}`);
        const lineLength = lines[j2].length;
        if (j2 === i3) {
          const pad = start - (count2 - lineLength) + 1;
          const length = Math.max(1, end > count2 ? lineLength - pad : end - start);
          res.push(`   |  ` + " ".repeat(pad) + "^".repeat(length));
        } else if (j2 > i3) {
          if (end > count2) {
            const length = Math.max(Math.min(end - count2, lineLength), 1);
            res.push(`   |  ` + "^".repeat(length));
          }
          count2 += lineLength + 1;
        }
      }
      break;
    }
  }
  return res.join("\n");
}
function incrementer(code2) {
  let current = code2;
  return () => ++current;
}
function warn(msg, err) {
  if (typeof console !== "undefined") {
    console.warn(`[intlify] ` + msg);
    if (err) {
      console.warn(err.stack);
    }
  }
}
const hasWarned = {};
function warnOnce(msg) {
  if (!hasWarned[msg]) {
    hasWarned[msg] = true;
    warn(msg);
  }
}
function createEmitter() {
  const events = /* @__PURE__ */ new Map();
  const emitter = {
    events,
    on(event, handler) {
      const handlers2 = events.get(event);
      const added = handlers2 && handlers2.push(handler);
      if (!added) {
        events.set(event, [handler]);
      }
    },
    off(event, handler) {
      const handlers2 = events.get(event);
      if (handlers2) {
        handlers2.splice(handlers2.indexOf(handler) >>> 0, 1);
      }
    },
    emit(event, payload) {
      (events.get(event) || []).slice().map((handler) => handler(payload));
      (events.get("*") || []).slice().map((handler) => handler(event, payload));
    }
  };
  return emitter;
}
const isNotObjectOrIsArray = (val) => !isObject$2(val) || isArray(val);
function deepCopy(src, des) {
  if (isNotObjectOrIsArray(src) || isNotObjectOrIsArray(des)) {
    throw new Error("Invalid value");
  }
  const stack2 = [{ src, des }];
  while (stack2.length) {
    const { src: src2, des: des2 } = stack2.pop();
    Object.keys(src2).forEach((key) => {
      if (isNotObjectOrIsArray(src2[key]) || isNotObjectOrIsArray(des2[key])) {
        des2[key] = src2[key];
      } else {
        stack2.push({ src: src2[key], des: des2[key] });
      }
    });
  }
}
/*!
  * message-compiler v9.9.0
  * (c) 2024 kazuya kawaguchi
  * Released under the MIT License.
  */
const RE_ARGS = /\{([0-9a-zA-Z]+)\}/g;
function format(message, ...args) {
  if (args.length === 1 && isObject$1(args[0])) {
    args = args[0];
  }
  if (!args || !args.hasOwnProperty) {
    args = {};
  }
  return message.replace(RE_ARGS, (match2, identifier) => {
    return args.hasOwnProperty(identifier) ? args[identifier] : "";
  });
}
const isObject$1 = (val) => val !== null && typeof val === "object";
const CompileErrorCodes = {
  // tokenizer error codes
  EXPECTED_TOKEN: 1,
  INVALID_TOKEN_IN_PLACEHOLDER: 2,
  UNTERMINATED_SINGLE_QUOTE_IN_PLACEHOLDER: 3,
  UNKNOWN_ESCAPE_SEQUENCE: 4,
  INVALID_UNICODE_ESCAPE_SEQUENCE: 5,
  UNBALANCED_CLOSING_BRACE: 6,
  UNTERMINATED_CLOSING_BRACE: 7,
  EMPTY_PLACEHOLDER: 8,
  NOT_ALLOW_NEST_PLACEHOLDER: 9,
  INVALID_LINKED_FORMAT: 10,
  // parser error codes
  MUST_HAVE_MESSAGES_IN_PLURAL: 11,
  UNEXPECTED_EMPTY_LINKED_MODIFIER: 12,
  UNEXPECTED_EMPTY_LINKED_KEY: 13,
  UNEXPECTED_LEXICAL_ANALYSIS: 14,
  // generator error codes
  UNHANDLED_CODEGEN_NODE_TYPE: 15,
  // minifier error codes
  UNHANDLED_MINIFIER_NODE_TYPE: 16,
  // Special value for higher-order compilers to pick up the last code
  // to avoid collision of error codes. This should always be kept as the last
  // item.
  __EXTEND_POINT__: 17
};
const errorMessages$2 = {
  // tokenizer error messages
  [CompileErrorCodes.EXPECTED_TOKEN]: `Expected token: '{0}'`,
  [CompileErrorCodes.INVALID_TOKEN_IN_PLACEHOLDER]: `Invalid token in placeholder: '{0}'`,
  [CompileErrorCodes.UNTERMINATED_SINGLE_QUOTE_IN_PLACEHOLDER]: `Unterminated single quote in placeholder`,
  [CompileErrorCodes.UNKNOWN_ESCAPE_SEQUENCE]: `Unknown escape sequence: \\{0}`,
  [CompileErrorCodes.INVALID_UNICODE_ESCAPE_SEQUENCE]: `Invalid unicode escape sequence: {0}`,
  [CompileErrorCodes.UNBALANCED_CLOSING_BRACE]: `Unbalanced closing brace`,
  [CompileErrorCodes.UNTERMINATED_CLOSING_BRACE]: `Unterminated closing brace`,
  [CompileErrorCodes.EMPTY_PLACEHOLDER]: `Empty placeholder`,
  [CompileErrorCodes.NOT_ALLOW_NEST_PLACEHOLDER]: `Not allowed nest placeholder`,
  [CompileErrorCodes.INVALID_LINKED_FORMAT]: `Invalid linked format`,
  // parser error messages
  [CompileErrorCodes.MUST_HAVE_MESSAGES_IN_PLURAL]: `Plural must have messages`,
  [CompileErrorCodes.UNEXPECTED_EMPTY_LINKED_MODIFIER]: `Unexpected empty linked modifier`,
  [CompileErrorCodes.UNEXPECTED_EMPTY_LINKED_KEY]: `Unexpected empty linked key`,
  [CompileErrorCodes.UNEXPECTED_LEXICAL_ANALYSIS]: `Unexpected lexical analysis in token: '{0}'`,
  // generator error messages
  [CompileErrorCodes.UNHANDLED_CODEGEN_NODE_TYPE]: `unhandled codegen node type: '{0}'`,
  // minimizer error messages
  [CompileErrorCodes.UNHANDLED_MINIFIER_NODE_TYPE]: `unhandled mimifier node type: '{0}'`
};
function createCompileError(code2, loc, options = {}) {
  const { domain, messages, args } = options;
  const msg = format((messages || errorMessages$2)[code2] || "", ...args || []);
  const error = new SyntaxError(String(msg));
  error.code = code2;
  if (loc) {
    error.location = loc;
  }
  error.domain = domain;
  return error;
}
/*!
  * core-base v9.9.0
  * (c) 2024 kazuya kawaguchi
  * Released under the MIT License.
  */
function initFeatureFlags$1() {
  if (typeof __INTLIFY_PROD_DEVTOOLS__ !== "boolean") {
    getGlobalThis().__INTLIFY_PROD_DEVTOOLS__ = false;
  }
}
const pathStateMachine = [];
pathStateMachine[
  0
  /* States.BEFORE_PATH */
] = {
  [
    "w"
    /* PathCharTypes.WORKSPACE */
  ]: [
    0
    /* States.BEFORE_PATH */
  ],
  [
    "i"
    /* PathCharTypes.IDENT */
  ]: [
    3,
    0
    /* Actions.APPEND */
  ],
  [
    "["
    /* PathCharTypes.LEFT_BRACKET */
  ]: [
    4
    /* States.IN_SUB_PATH */
  ],
  [
    "o"
    /* PathCharTypes.END_OF_FAIL */
  ]: [
    7
    /* States.AFTER_PATH */
  ]
};
pathStateMachine[
  1
  /* States.IN_PATH */
] = {
  [
    "w"
    /* PathCharTypes.WORKSPACE */
  ]: [
    1
    /* States.IN_PATH */
  ],
  [
    "."
    /* PathCharTypes.DOT */
  ]: [
    2
    /* States.BEFORE_IDENT */
  ],
  [
    "["
    /* PathCharTypes.LEFT_BRACKET */
  ]: [
    4
    /* States.IN_SUB_PATH */
  ],
  [
    "o"
    /* PathCharTypes.END_OF_FAIL */
  ]: [
    7
    /* States.AFTER_PATH */
  ]
};
pathStateMachine[
  2
  /* States.BEFORE_IDENT */
] = {
  [
    "w"
    /* PathCharTypes.WORKSPACE */
  ]: [
    2
    /* States.BEFORE_IDENT */
  ],
  [
    "i"
    /* PathCharTypes.IDENT */
  ]: [
    3,
    0
    /* Actions.APPEND */
  ],
  [
    "0"
    /* PathCharTypes.ZERO */
  ]: [
    3,
    0
    /* Actions.APPEND */
  ]
};
pathStateMachine[
  3
  /* States.IN_IDENT */
] = {
  [
    "i"
    /* PathCharTypes.IDENT */
  ]: [
    3,
    0
    /* Actions.APPEND */
  ],
  [
    "0"
    /* PathCharTypes.ZERO */
  ]: [
    3,
    0
    /* Actions.APPEND */
  ],
  [
    "w"
    /* PathCharTypes.WORKSPACE */
  ]: [
    1,
    1
    /* Actions.PUSH */
  ],
  [
    "."
    /* PathCharTypes.DOT */
  ]: [
    2,
    1
    /* Actions.PUSH */
  ],
  [
    "["
    /* PathCharTypes.LEFT_BRACKET */
  ]: [
    4,
    1
    /* Actions.PUSH */
  ],
  [
    "o"
    /* PathCharTypes.END_OF_FAIL */
  ]: [
    7,
    1
    /* Actions.PUSH */
  ]
};
pathStateMachine[
  4
  /* States.IN_SUB_PATH */
] = {
  [
    "'"
    /* PathCharTypes.SINGLE_QUOTE */
  ]: [
    5,
    0
    /* Actions.APPEND */
  ],
  [
    '"'
    /* PathCharTypes.DOUBLE_QUOTE */
  ]: [
    6,
    0
    /* Actions.APPEND */
  ],
  [
    "["
    /* PathCharTypes.LEFT_BRACKET */
  ]: [
    4,
    2
    /* Actions.INC_SUB_PATH_DEPTH */
  ],
  [
    "]"
    /* PathCharTypes.RIGHT_BRACKET */
  ]: [
    1,
    3
    /* Actions.PUSH_SUB_PATH */
  ],
  [
    "o"
    /* PathCharTypes.END_OF_FAIL */
  ]: 8,
  [
    "l"
    /* PathCharTypes.ELSE */
  ]: [
    4,
    0
    /* Actions.APPEND */
  ]
};
pathStateMachine[
  5
  /* States.IN_SINGLE_QUOTE */
] = {
  [
    "'"
    /* PathCharTypes.SINGLE_QUOTE */
  ]: [
    4,
    0
    /* Actions.APPEND */
  ],
  [
    "o"
    /* PathCharTypes.END_OF_FAIL */
  ]: 8,
  [
    "l"
    /* PathCharTypes.ELSE */
  ]: [
    5,
    0
    /* Actions.APPEND */
  ]
};
pathStateMachine[
  6
  /* States.IN_DOUBLE_QUOTE */
] = {
  [
    '"'
    /* PathCharTypes.DOUBLE_QUOTE */
  ]: [
    4,
    0
    /* Actions.APPEND */
  ],
  [
    "o"
    /* PathCharTypes.END_OF_FAIL */
  ]: 8,
  [
    "l"
    /* PathCharTypes.ELSE */
  ]: [
    6,
    0
    /* Actions.APPEND */
  ]
};
const literalValueRE = /^\s?(?:true|false|-?[\d.]+|'[^']*'|"[^"]*")\s?$/;
function isLiteral(exp) {
  return literalValueRE.test(exp);
}
function stripQuotes(str) {
  const a4 = str.charCodeAt(0);
  const b4 = str.charCodeAt(str.length - 1);
  return a4 === b4 && (a4 === 34 || a4 === 39) ? str.slice(1, -1) : str;
}
function getPathCharType(ch2) {
  if (ch2 === void 0 || ch2 === null) {
    return "o";
  }
  const code2 = ch2.charCodeAt(0);
  switch (code2) {
    case 91:
    case 93:
    case 46:
    case 34:
    case 39:
      return ch2;
    case 95:
    case 36:
    case 45:
      return "i";
    case 9:
    case 10:
    case 13:
    case 160:
    case 65279:
    case 8232:
    case 8233:
      return "w";
  }
  return "i";
}
function formatSubPath(path) {
  const trimmed = path.trim();
  if (path.charAt(0) === "0" && isNaN(parseInt(path))) {
    return false;
  }
  return isLiteral(trimmed) ? stripQuotes(trimmed) : "*" + trimmed;
}
function parse$2(path) {
  const keys = [];
  let index = -1;
  let mode = 0;
  let subPathDepth = 0;
  let c3;
  let key;
  let newChar;
  let type;
  let transition;
  let action;
  let typeMap;
  const actions = [];
  actions[
    0
    /* Actions.APPEND */
  ] = () => {
    if (key === void 0) {
      key = newChar;
    } else {
      key += newChar;
    }
  };
  actions[
    1
    /* Actions.PUSH */
  ] = () => {
    if (key !== void 0) {
      keys.push(key);
      key = void 0;
    }
  };
  actions[
    2
    /* Actions.INC_SUB_PATH_DEPTH */
  ] = () => {
    actions[
      0
      /* Actions.APPEND */
    ]();
    subPathDepth++;
  };
  actions[
    3
    /* Actions.PUSH_SUB_PATH */
  ] = () => {
    if (subPathDepth > 0) {
      subPathDepth--;
      mode = 4;
      actions[
        0
        /* Actions.APPEND */
      ]();
    } else {
      subPathDepth = 0;
      if (key === void 0) {
        return false;
      }
      key = formatSubPath(key);
      if (key === false) {
        return false;
      } else {
        actions[
          1
          /* Actions.PUSH */
        ]();
      }
    }
  };
  function maybeUnescapeQuote() {
    const nextChar = path[index + 1];
    if (mode === 5 && nextChar === "'" || mode === 6 && nextChar === '"') {
      index++;
      newChar = "\\" + nextChar;
      actions[
        0
        /* Actions.APPEND */
      ]();
      return true;
    }
  }
  while (mode !== null) {
    index++;
    c3 = path[index];
    if (c3 === "\\" && maybeUnescapeQuote()) {
      continue;
    }
    type = getPathCharType(c3);
    typeMap = pathStateMachine[mode];
    transition = typeMap[type] || typeMap[
      "l"
      /* PathCharTypes.ELSE */
    ] || 8;
    if (transition === 8) {
      return;
    }
    mode = transition[0];
    if (transition[1] !== void 0) {
      action = actions[transition[1]];
      if (action) {
        newChar = c3;
        if (action() === false) {
          return;
        }
      }
    }
    if (mode === 7) {
      return keys;
    }
  }
}
const cache = /* @__PURE__ */ new Map();
function resolveWithKeyValue(obj, path) {
  return isObject$2(obj) ? obj[path] : null;
}
function resolveValue(obj, path) {
  if (!isObject$2(obj)) {
    return null;
  }
  let hit = cache.get(path);
  if (!hit) {
    hit = parse$2(path);
    if (hit) {
      cache.set(path, hit);
    }
  }
  if (!hit) {
    return null;
  }
  const len = hit.length;
  let last = obj;
  let i3 = 0;
  while (i3 < len) {
    const val = last[hit[i3]];
    if (val === void 0) {
      return null;
    }
    if (isFunction(last)) {
      return null;
    }
    last = val;
    i3++;
  }
  return last;
}
const DEFAULT_MODIFIER = (str) => str;
const DEFAULT_MESSAGE = (ctx) => "";
const DEFAULT_MESSAGE_DATA_TYPE = "text";
const DEFAULT_NORMALIZE = (values) => values.length === 0 ? "" : join$1(values);
const DEFAULT_INTERPOLATE = toDisplayString;
function pluralDefault(choice, choicesLength) {
  choice = Math.abs(choice);
  if (choicesLength === 2) {
    return choice ? choice > 1 ? 1 : 0 : 1;
  }
  return choice ? Math.min(choice, 2) : 0;
}
function getPluralIndex(options) {
  const index = isNumber(options.pluralIndex) ? options.pluralIndex : -1;
  return options.named && (isNumber(options.named.count) || isNumber(options.named.n)) ? isNumber(options.named.count) ? options.named.count : isNumber(options.named.n) ? options.named.n : index : index;
}
function normalizeNamed(pluralIndex, props) {
  if (!props.count) {
    props.count = pluralIndex;
  }
  if (!props.n) {
    props.n = pluralIndex;
  }
}
function createMessageContext(options = {}) {
  const locale2 = options.locale;
  const pluralIndex = getPluralIndex(options);
  const pluralRule = isObject$2(options.pluralRules) && isString(locale2) && isFunction(options.pluralRules[locale2]) ? options.pluralRules[locale2] : pluralDefault;
  const orgPluralRule = isObject$2(options.pluralRules) && isString(locale2) && isFunction(options.pluralRules[locale2]) ? pluralDefault : void 0;
  const plural = (messages) => {
    return messages[pluralRule(pluralIndex, messages.length, orgPluralRule)];
  };
  const _list = options.list || [];
  const list = (index) => _list[index];
  const _named = options.named || {};
  isNumber(options.pluralIndex) && normalizeNamed(pluralIndex, _named);
  const named = (key) => _named[key];
  function message(key) {
    const msg = isFunction(options.messages) ? options.messages(key) : isObject$2(options.messages) ? options.messages[key] : false;
    return !msg ? options.parent ? options.parent.message(key) : DEFAULT_MESSAGE : msg;
  }
  const _modifier = (name) => options.modifiers ? options.modifiers[name] : DEFAULT_MODIFIER;
  const normalize = isPlainObject(options.processor) && isFunction(options.processor.normalize) ? options.processor.normalize : DEFAULT_NORMALIZE;
  const interpolate = isPlainObject(options.processor) && isFunction(options.processor.interpolate) ? options.processor.interpolate : DEFAULT_INTERPOLATE;
  const type = isPlainObject(options.processor) && isString(options.processor.type) ? options.processor.type : DEFAULT_MESSAGE_DATA_TYPE;
  const linked = (key, ...args) => {
    const [arg1, arg2] = args;
    let type2 = "text";
    let modifier = "";
    if (args.length === 1) {
      if (isObject$2(arg1)) {
        modifier = arg1.modifier || modifier;
        type2 = arg1.type || type2;
      } else if (isString(arg1)) {
        modifier = arg1 || modifier;
      }
    } else if (args.length === 2) {
      if (isString(arg1)) {
        modifier = arg1 || modifier;
      }
      if (isString(arg2)) {
        type2 = arg2 || type2;
      }
    }
    const ret = message(key)(ctx);
    const msg = (
      // The message in vnode resolved with linked are returned as an array by processor.nomalize
      type2 === "vnode" && isArray(ret) && modifier ? ret[0] : ret
    );
    return modifier ? _modifier(modifier)(msg, type2) : msg;
  };
  const ctx = {
    [
      "list"
      /* HelperNameMap.LIST */
    ]: list,
    [
      "named"
      /* HelperNameMap.NAMED */
    ]: named,
    [
      "plural"
      /* HelperNameMap.PLURAL */
    ]: plural,
    [
      "linked"
      /* HelperNameMap.LINKED */
    ]: linked,
    [
      "message"
      /* HelperNameMap.MESSAGE */
    ]: message,
    [
      "type"
      /* HelperNameMap.TYPE */
    ]: type,
    [
      "interpolate"
      /* HelperNameMap.INTERPOLATE */
    ]: interpolate,
    [
      "normalize"
      /* HelperNameMap.NORMALIZE */
    ]: normalize,
    [
      "values"
      /* HelperNameMap.VALUES */
    ]: assign({}, _list, _named)
  };
  return ctx;
}
let devtools = null;
function setDevToolsHook(hook) {
  devtools = hook;
}
function initI18nDevTools(i18n, version2, meta) {
  devtools && devtools.emit("i18n:init", {
    timestamp: Date.now(),
    i18n,
    version: version2,
    meta
  });
}
const translateDevTools = /* @__PURE__ */ createDevToolsHook(
  "function:translate"
  /* IntlifyDevToolsHooks.FunctionTranslate */
);
function createDevToolsHook(hook) {
  return (payloads) => devtools && devtools.emit(hook, payloads);
}
const CoreWarnCodes = {
  NOT_FOUND_KEY: 1,
  FALLBACK_TO_TRANSLATE: 2,
  CANNOT_FORMAT_NUMBER: 3,
  FALLBACK_TO_NUMBER_FORMAT: 4,
  CANNOT_FORMAT_DATE: 5,
  FALLBACK_TO_DATE_FORMAT: 6,
  EXPERIMENTAL_CUSTOM_MESSAGE_COMPILER: 7,
  __EXTEND_POINT__: 8
};
const warnMessages$1 = {
  [CoreWarnCodes.NOT_FOUND_KEY]: `Not found '{key}' key in '{locale}' locale messages.`,
  [CoreWarnCodes.FALLBACK_TO_TRANSLATE]: `Fall back to translate '{key}' key with '{target}' locale.`,
  [CoreWarnCodes.CANNOT_FORMAT_NUMBER]: `Cannot format a number value due to not supported Intl.NumberFormat.`,
  [CoreWarnCodes.FALLBACK_TO_NUMBER_FORMAT]: `Fall back to number format '{key}' key with '{target}' locale.`,
  [CoreWarnCodes.CANNOT_FORMAT_DATE]: `Cannot format a date value due to not supported Intl.DateTimeFormat.`,
  [CoreWarnCodes.FALLBACK_TO_DATE_FORMAT]: `Fall back to datetime format '{key}' key with '{target}' locale.`,
  [CoreWarnCodes.EXPERIMENTAL_CUSTOM_MESSAGE_COMPILER]: `This project is using Custom Message Compiler, which is an experimental feature. It may receive breaking changes or be removed in the future.`
};
function getWarnMessage$1(code2, ...args) {
  return format$1(warnMessages$1[code2], ...args);
}
const code$2 = CompileErrorCodes.__EXTEND_POINT__;
const inc$2 = incrementer(code$2);
const CoreErrorCodes = {
  INVALID_ARGUMENT: code$2,
  INVALID_DATE_ARGUMENT: inc$2(),
  INVALID_ISO_DATE_ARGUMENT: inc$2(),
  NOT_SUPPORT_NON_STRING_MESSAGE: inc$2(),
  NOT_SUPPORT_LOCALE_PROMISE_VALUE: inc$2(),
  NOT_SUPPORT_LOCALE_ASYNC_FUNCTION: inc$2(),
  NOT_SUPPORT_LOCALE_TYPE: inc$2(),
  __EXTEND_POINT__: inc$2()
  // 25
};
function createCoreError(code2) {
  return createCompileError(code2, null, { messages: errorMessages$1 });
}
const errorMessages$1 = {
  [CoreErrorCodes.INVALID_ARGUMENT]: "Invalid arguments",
  [CoreErrorCodes.INVALID_DATE_ARGUMENT]: "The date provided is an invalid Date object.Make sure your Date represents a valid date.",
  [CoreErrorCodes.INVALID_ISO_DATE_ARGUMENT]: "The argument provided is not a valid ISO date string",
  [CoreErrorCodes.NOT_SUPPORT_NON_STRING_MESSAGE]: "Not support non-string message",
  [CoreErrorCodes.NOT_SUPPORT_LOCALE_PROMISE_VALUE]: "cannot support promise value",
  [CoreErrorCodes.NOT_SUPPORT_LOCALE_ASYNC_FUNCTION]: "cannot support async function",
  [CoreErrorCodes.NOT_SUPPORT_LOCALE_TYPE]: "cannot support locale type"
};
function getLocale(context, options) {
  return options.locale != null ? resolveLocale(options.locale) : resolveLocale(context.locale);
}
let _resolveLocale;
function resolveLocale(locale2) {
  if (isString(locale2)) {
    return locale2;
  } else {
    if (isFunction(locale2)) {
      if (locale2.resolvedOnce && _resolveLocale != null) {
        return _resolveLocale;
      } else if (locale2.constructor.name === "Function") {
        const resolve2 = locale2();
        if (isPromise(resolve2)) {
          throw createCoreError(CoreErrorCodes.NOT_SUPPORT_LOCALE_PROMISE_VALUE);
        }
        return _resolveLocale = resolve2;
      } else {
        throw createCoreError(CoreErrorCodes.NOT_SUPPORT_LOCALE_ASYNC_FUNCTION);
      }
    } else {
      throw createCoreError(CoreErrorCodes.NOT_SUPPORT_LOCALE_TYPE);
    }
  }
}
function fallbackWithSimple(ctx, fallback, start) {
  return [.../* @__PURE__ */ new Set([
    start,
    ...isArray(fallback) ? fallback : isObject$2(fallback) ? Object.keys(fallback) : isString(fallback) ? [fallback] : [start]
  ])];
}
function fallbackWithLocaleChain(ctx, fallback, start) {
  const startLocale = isString(start) ? start : DEFAULT_LOCALE;
  const context = ctx;
  if (!context.__localeChainCache) {
    context.__localeChainCache = /* @__PURE__ */ new Map();
  }
  let chain = context.__localeChainCache.get(startLocale);
  if (!chain) {
    chain = [];
    let block = [start];
    while (isArray(block)) {
      block = appendBlockToChain(chain, block, fallback);
    }
    const defaults2 = isArray(fallback) || !isPlainObject(fallback) ? fallback : fallback["default"] ? fallback["default"] : null;
    block = isString(defaults2) ? [defaults2] : defaults2;
    if (isArray(block)) {
      appendBlockToChain(chain, block, false);
    }
    context.__localeChainCache.set(startLocale, chain);
  }
  return chain;
}
function appendBlockToChain(chain, block, blocks) {
  let follow = true;
  for (let i3 = 0; i3 < block.length && isBoolean(follow); i3++) {
    const locale2 = block[i3];
    if (isString(locale2)) {
      follow = appendLocaleToChain(chain, block[i3], blocks);
    }
  }
  return follow;
}
function appendLocaleToChain(chain, locale2, blocks) {
  let follow;
  const tokens = locale2.split("-");
  do {
    const target = tokens.join("-");
    follow = appendItemToChain(chain, target, blocks);
    tokens.splice(-1, 1);
  } while (tokens.length && follow === true);
  return follow;
}
function appendItemToChain(chain, target, blocks) {
  let follow = false;
  if (!chain.includes(target)) {
    follow = true;
    if (target) {
      follow = target[target.length - 1] !== "!";
      const locale2 = target.replace(/!/g, "");
      chain.push(locale2);
      if ((isArray(blocks) || isPlainObject(blocks)) && blocks[locale2]) {
        follow = blocks[locale2];
      }
    }
  }
  return follow;
}
const VERSION$1 = "9.9.0";
const NOT_REOSLVED = -1;
const DEFAULT_LOCALE = "en-US";
const MISSING_RESOLVE_VALUE = "";
const capitalize = (str) => `${str.charAt(0).toLocaleUpperCase()}${str.substr(1)}`;
function getDefaultLinkedModifiers() {
  return {
    upper: (val, type) => {
      return type === "text" && isString(val) ? val.toUpperCase() : type === "vnode" && isObject$2(val) && "__v_isVNode" in val ? val.children.toUpperCase() : val;
    },
    lower: (val, type) => {
      return type === "text" && isString(val) ? val.toLowerCase() : type === "vnode" && isObject$2(val) && "__v_isVNode" in val ? val.children.toLowerCase() : val;
    },
    capitalize: (val, type) => {
      return type === "text" && isString(val) ? capitalize(val) : type === "vnode" && isObject$2(val) && "__v_isVNode" in val ? capitalize(val.children) : val;
    }
  };
}
let _compiler;
let _resolver;
function registerMessageResolver(resolver) {
  _resolver = resolver;
}
let _fallbacker;
function registerLocaleFallbacker(fallbacker) {
  _fallbacker = fallbacker;
}
let _additionalMeta = null;
const setAdditionalMeta = /* @__NO_SIDE_EFFECTS__ */ (meta) => {
  _additionalMeta = meta;
};
const getAdditionalMeta = /* @__NO_SIDE_EFFECTS__ */ () => _additionalMeta;
let _fallbackContext = null;
const setFallbackContext = (context) => {
  _fallbackContext = context;
};
const getFallbackContext = () => _fallbackContext;
let _cid = 0;
function createCoreContext(options = {}) {
  const onWarn = isFunction(options.onWarn) ? options.onWarn : warn;
  const version2 = isString(options.version) ? options.version : VERSION$1;
  const locale2 = isString(options.locale) || isFunction(options.locale) ? options.locale : DEFAULT_LOCALE;
  const _locale = isFunction(locale2) ? DEFAULT_LOCALE : locale2;
  const fallbackLocale = isArray(options.fallbackLocale) || isPlainObject(options.fallbackLocale) || isString(options.fallbackLocale) || options.fallbackLocale === false ? options.fallbackLocale : _locale;
  const messages = isPlainObject(options.messages) ? options.messages : { [_locale]: {} };
  const datetimeFormats = isPlainObject(options.datetimeFormats) ? options.datetimeFormats : { [_locale]: {} };
  const numberFormats = isPlainObject(options.numberFormats) ? options.numberFormats : { [_locale]: {} };
  const modifiers = assign({}, options.modifiers || {}, getDefaultLinkedModifiers());
  const pluralRules = options.pluralRules || {};
  const missing = isFunction(options.missing) ? options.missing : null;
  const missingWarn = isBoolean(options.missingWarn) || isRegExp(options.missingWarn) ? options.missingWarn : true;
  const fallbackWarn = isBoolean(options.fallbackWarn) || isRegExp(options.fallbackWarn) ? options.fallbackWarn : true;
  const fallbackFormat = !!options.fallbackFormat;
  const unresolving = !!options.unresolving;
  const postTranslation = isFunction(options.postTranslation) ? options.postTranslation : null;
  const processor = isPlainObject(options.processor) ? options.processor : null;
  const warnHtmlMessage = isBoolean(options.warnHtmlMessage) ? options.warnHtmlMessage : true;
  const escapeParameter = !!options.escapeParameter;
  const messageCompiler = isFunction(options.messageCompiler) ? options.messageCompiler : _compiler;
  if (isFunction(options.messageCompiler)) {
    warnOnce(getWarnMessage$1(CoreWarnCodes.EXPERIMENTAL_CUSTOM_MESSAGE_COMPILER));
  }
  const messageResolver = isFunction(options.messageResolver) ? options.messageResolver : _resolver || resolveWithKeyValue;
  const localeFallbacker = isFunction(options.localeFallbacker) ? options.localeFallbacker : _fallbacker || fallbackWithSimple;
  const fallbackContext = isObject$2(options.fallbackContext) ? options.fallbackContext : void 0;
  const internalOptions = options;
  const __datetimeFormatters = isObject$2(internalOptions.__datetimeFormatters) ? internalOptions.__datetimeFormatters : /* @__PURE__ */ new Map();
  const __numberFormatters = isObject$2(internalOptions.__numberFormatters) ? internalOptions.__numberFormatters : /* @__PURE__ */ new Map();
  const __meta = isObject$2(internalOptions.__meta) ? internalOptions.__meta : {};
  _cid++;
  const context = {
    version: version2,
    cid: _cid,
    locale: locale2,
    fallbackLocale,
    messages,
    modifiers,
    pluralRules,
    missing,
    missingWarn,
    fallbackWarn,
    fallbackFormat,
    unresolving,
    postTranslation,
    processor,
    warnHtmlMessage,
    escapeParameter,
    messageCompiler,
    messageResolver,
    localeFallbacker,
    fallbackContext,
    onWarn,
    __meta
  };
  {
    context.datetimeFormats = datetimeFormats;
    context.numberFormats = numberFormats;
    context.__datetimeFormatters = __datetimeFormatters;
    context.__numberFormatters = __numberFormatters;
  }
  {
    context.__v_emitter = internalOptions.__v_emitter != null ? internalOptions.__v_emitter : void 0;
  }
  {
    initI18nDevTools(context, version2, __meta);
  }
  return context;
}
function isTranslateFallbackWarn(fallback, key) {
  return fallback instanceof RegExp ? fallback.test(key) : fallback;
}
function isTranslateMissingWarn(missing, key) {
  return missing instanceof RegExp ? missing.test(key) : missing;
}
function handleMissing(context, key, locale2, missingWarn, type) {
  const { missing, onWarn } = context;
  {
    const emitter = context.__v_emitter;
    if (emitter) {
      emitter.emit("missing", {
        locale: locale2,
        key,
        type,
        groupId: `${type}:${key}`
      });
    }
  }
  if (missing !== null) {
    const ret = missing(context, locale2, key, type);
    return isString(ret) ? ret : key;
  } else {
    if (isTranslateMissingWarn(missingWarn, key)) {
      onWarn(getWarnMessage$1(CoreWarnCodes.NOT_FOUND_KEY, { key, locale: locale2 }));
    }
    return key;
  }
}
function updateFallbackLocale(ctx, locale2, fallback) {
  const context = ctx;
  context.__localeChainCache = /* @__PURE__ */ new Map();
  ctx.localeFallbacker(ctx, fallback, locale2);
}
const isMessageAST = (val) => isObject$2(val) && (val.t === 0 || val.type === 0) && ("b" in val || "body" in val);
const NOOP_MESSAGE_FUNCTION = () => "";
const isMessageFunction = (val) => isFunction(val);
function translate(context, ...args) {
  const { fallbackFormat, postTranslation, unresolving, messageCompiler, fallbackLocale, messages } = context;
  const [key, options] = parseTranslateArgs(...args);
  const missingWarn = isBoolean(options.missingWarn) ? options.missingWarn : context.missingWarn;
  const fallbackWarn = isBoolean(options.fallbackWarn) ? options.fallbackWarn : context.fallbackWarn;
  const escapeParameter = isBoolean(options.escapeParameter) ? options.escapeParameter : context.escapeParameter;
  const resolvedMessage = !!options.resolvedMessage;
  const defaultMsgOrKey = isString(options.default) || isBoolean(options.default) ? !isBoolean(options.default) ? options.default : !messageCompiler ? () => key : key : fallbackFormat ? !messageCompiler ? () => key : key : "";
  const enableDefaultMsg = fallbackFormat || defaultMsgOrKey !== "";
  const locale2 = getLocale(context, options);
  escapeParameter && escapeParams(options);
  let [formatScope, targetLocale, message] = !resolvedMessage ? resolveMessageFormat(context, key, locale2, fallbackLocale, fallbackWarn, missingWarn) : [
    key,
    locale2,
    messages[locale2] || {}
  ];
  let format2 = formatScope;
  let cacheBaseKey = key;
  if (!resolvedMessage && !(isString(format2) || isMessageAST(format2) || isMessageFunction(format2))) {
    if (enableDefaultMsg) {
      format2 = defaultMsgOrKey;
      cacheBaseKey = format2;
    }
  }
  if (!resolvedMessage && (!(isString(format2) || isMessageAST(format2) || isMessageFunction(format2)) || !isString(targetLocale))) {
    return unresolving ? NOT_REOSLVED : key;
  }
  if (isString(format2) && context.messageCompiler == null) {
    warn(`The message format compilation is not supported in this build. Because message compiler isn't included. You need to pre-compilation all message format. So translate function return '${key}'.`);
    return key;
  }
  let occurred = false;
  const onError = () => {
    occurred = true;
  };
  const msg = !isMessageFunction(format2) ? compileMessageFormat(context, key, targetLocale, format2, cacheBaseKey, onError) : format2;
  if (occurred) {
    return format2;
  }
  const ctxOptions = getMessageContextOptions(context, targetLocale, message, options);
  const msgContext = createMessageContext(ctxOptions);
  const messaged = evaluateMessage(context, msg, msgContext);
  const ret = postTranslation ? postTranslation(messaged, key) : messaged;
  {
    const payloads = {
      timestamp: Date.now(),
      key: isString(key) ? key : isMessageFunction(format2) ? format2.key : "",
      locale: targetLocale || (isMessageFunction(format2) ? format2.locale : ""),
      format: isString(format2) ? format2 : isMessageFunction(format2) ? format2.source : "",
      message: ret
    };
    payloads.meta = assign({}, context.__meta, /* @__PURE__ */ getAdditionalMeta() || {});
    translateDevTools(payloads);
  }
  return ret;
}
function escapeParams(options) {
  if (isArray(options.list)) {
    options.list = options.list.map((item) => isString(item) ? escapeHtml$1(item) : item);
  } else if (isObject$2(options.named)) {
    Object.keys(options.named).forEach((key) => {
      if (isString(options.named[key])) {
        options.named[key] = escapeHtml$1(options.named[key]);
      }
    });
  }
}
function resolveMessageFormat(context, key, locale2, fallbackLocale, fallbackWarn, missingWarn) {
  const { messages, onWarn, messageResolver: resolveValue2, localeFallbacker } = context;
  const locales = localeFallbacker(context, fallbackLocale, locale2);
  let message = {};
  let targetLocale;
  let format2 = null;
  let from = locale2;
  let to2 = null;
  const type = "translate";
  for (let i3 = 0; i3 < locales.length; i3++) {
    targetLocale = to2 = locales[i3];
    if (locale2 !== targetLocale && isTranslateFallbackWarn(fallbackWarn, key)) {
      onWarn(getWarnMessage$1(CoreWarnCodes.FALLBACK_TO_TRANSLATE, {
        key,
        target: targetLocale
      }));
    }
    if (locale2 !== targetLocale) {
      const emitter = context.__v_emitter;
      if (emitter) {
        emitter.emit("fallback", {
          type,
          key,
          from,
          to: to2,
          groupId: `${type}:${key}`
        });
      }
    }
    message = messages[targetLocale] || {};
    let start = null;
    let startTag;
    let endTag;
    if (inBrowser) {
      start = window.performance.now();
      startTag = "intlify-message-resolve-start";
      endTag = "intlify-message-resolve-end";
      mark && mark(startTag);
    }
    if ((format2 = resolveValue2(message, key)) === null) {
      format2 = message[key];
    }
    if (inBrowser) {
      const end = window.performance.now();
      const emitter = context.__v_emitter;
      if (emitter && start && format2) {
        emitter.emit("message-resolve", {
          type: "message-resolve",
          key,
          message: format2,
          time: end - start,
          groupId: `${type}:${key}`
        });
      }
      if (startTag && endTag && mark && measure) {
        mark(endTag);
        measure("intlify message resolve", startTag, endTag);
      }
    }
    if (isString(format2) || isMessageAST(format2) || isMessageFunction(format2)) {
      break;
    }
    const missingRet = handleMissing(
      context,
      // eslint-disable-line @typescript-eslint/no-explicit-any
      key,
      targetLocale,
      missingWarn,
      type
    );
    if (missingRet !== key) {
      format2 = missingRet;
    }
    from = to2;
  }
  return [format2, targetLocale, message];
}
function compileMessageFormat(context, key, targetLocale, format2, cacheBaseKey, onError) {
  const { messageCompiler, warnHtmlMessage } = context;
  if (isMessageFunction(format2)) {
    const msg2 = format2;
    msg2.locale = msg2.locale || targetLocale;
    msg2.key = msg2.key || key;
    return msg2;
  }
  if (messageCompiler == null) {
    const msg2 = () => format2;
    msg2.locale = targetLocale;
    msg2.key = key;
    return msg2;
  }
  let start = null;
  let startTag;
  let endTag;
  if (inBrowser) {
    start = window.performance.now();
    startTag = "intlify-message-compilation-start";
    endTag = "intlify-message-compilation-end";
    mark && mark(startTag);
  }
  const msg = messageCompiler(format2, getCompileContext(context, targetLocale, cacheBaseKey, format2, warnHtmlMessage, onError));
  if (inBrowser) {
    const end = window.performance.now();
    const emitter = context.__v_emitter;
    if (emitter && start) {
      emitter.emit("message-compilation", {
        type: "message-compilation",
        message: format2,
        time: end - start,
        groupId: `${"translate"}:${key}`
      });
    }
    if (startTag && endTag && mark && measure) {
      mark(endTag);
      measure("intlify message compilation", startTag, endTag);
    }
  }
  msg.locale = targetLocale;
  msg.key = key;
  msg.source = format2;
  return msg;
}
function evaluateMessage(context, msg, msgCtx) {
  let start = null;
  let startTag;
  let endTag;
  if (inBrowser) {
    start = window.performance.now();
    startTag = "intlify-message-evaluation-start";
    endTag = "intlify-message-evaluation-end";
    mark && mark(startTag);
  }
  const messaged = msg(msgCtx);
  if (inBrowser) {
    const end = window.performance.now();
    const emitter = context.__v_emitter;
    if (emitter && start) {
      emitter.emit("message-evaluation", {
        type: "message-evaluation",
        value: messaged,
        time: end - start,
        groupId: `${"translate"}:${msg.key}`
      });
    }
    if (startTag && endTag && mark && measure) {
      mark(endTag);
      measure("intlify message evaluation", startTag, endTag);
    }
  }
  return messaged;
}
function parseTranslateArgs(...args) {
  const [arg1, arg2, arg3] = args;
  const options = {};
  if (!isString(arg1) && !isNumber(arg1) && !isMessageFunction(arg1) && !isMessageAST(arg1)) {
    throw createCoreError(CoreErrorCodes.INVALID_ARGUMENT);
  }
  const key = isNumber(arg1) ? String(arg1) : isMessageFunction(arg1) ? arg1 : arg1;
  if (isNumber(arg2)) {
    options.plural = arg2;
  } else if (isString(arg2)) {
    options.default = arg2;
  } else if (isPlainObject(arg2) && !isEmptyObject(arg2)) {
    options.named = arg2;
  } else if (isArray(arg2)) {
    options.list = arg2;
  }
  if (isNumber(arg3)) {
    options.plural = arg3;
  } else if (isString(arg3)) {
    options.default = arg3;
  } else if (isPlainObject(arg3)) {
    assign(options, arg3);
  }
  return [key, options];
}
function getCompileContext(context, locale2, key, source, warnHtmlMessage, onError) {
  return {
    locale: locale2,
    key,
    warnHtmlMessage,
    onError: (err) => {
      onError && onError(err);
      {
        const _source = getSourceForCodeFrame(source);
        const message = `Message compilation error: ${err.message}`;
        const codeFrame = err.location && _source && generateCodeFrame(_source, err.location.start.offset, err.location.end.offset);
        const emitter = context.__v_emitter;
        if (emitter && _source) {
          emitter.emit("compile-error", {
            message: _source,
            error: err.message,
            start: err.location && err.location.start.offset,
            end: err.location && err.location.end.offset,
            groupId: `${"translate"}:${key}`
          });
        }
        console.error(codeFrame ? `${message}
${codeFrame}` : message);
      }
    },
    onCacheKey: (source2) => generateFormatCacheKey(locale2, key, source2)
  };
}
function getSourceForCodeFrame(source) {
  if (isString(source)) {
    return source;
  } else {
    if (source.loc && source.loc.source) {
      return source.loc.source;
    }
  }
}
function getMessageContextOptions(context, locale2, message, options) {
  const { modifiers, pluralRules, messageResolver: resolveValue2, fallbackLocale, fallbackWarn, missingWarn, fallbackContext } = context;
  const resolveMessage = (key) => {
    let val = resolveValue2(message, key);
    if (val == null && fallbackContext) {
      const [, , message2] = resolveMessageFormat(fallbackContext, key, locale2, fallbackLocale, fallbackWarn, missingWarn);
      val = resolveValue2(message2, key);
    }
    if (isString(val) || isMessageAST(val)) {
      let occurred = false;
      const onError = () => {
        occurred = true;
      };
      const msg = compileMessageFormat(context, key, locale2, val, key, onError);
      return !occurred ? msg : NOOP_MESSAGE_FUNCTION;
    } else if (isMessageFunction(val)) {
      return val;
    } else {
      return NOOP_MESSAGE_FUNCTION;
    }
  };
  const ctxOptions = {
    locale: locale2,
    modifiers,
    pluralRules,
    messages: resolveMessage
  };
  if (context.processor) {
    ctxOptions.processor = context.processor;
  }
  if (options.list) {
    ctxOptions.list = options.list;
  }
  if (options.named) {
    ctxOptions.named = options.named;
  }
  if (isNumber(options.plural)) {
    ctxOptions.pluralIndex = options.plural;
  }
  return ctxOptions;
}
const intlDefined = typeof Intl !== "undefined";
const Availabilities = {
  dateTimeFormat: intlDefined && typeof Intl.DateTimeFormat !== "undefined",
  numberFormat: intlDefined && typeof Intl.NumberFormat !== "undefined"
};
function datetime(context, ...args) {
  const { datetimeFormats, unresolving, fallbackLocale, onWarn, localeFallbacker } = context;
  const { __datetimeFormatters } = context;
  if (!Availabilities.dateTimeFormat) {
    onWarn(getWarnMessage$1(CoreWarnCodes.CANNOT_FORMAT_DATE));
    return MISSING_RESOLVE_VALUE;
  }
  const [key, value, options, overrides] = parseDateTimeArgs(...args);
  const missingWarn = isBoolean(options.missingWarn) ? options.missingWarn : context.missingWarn;
  const fallbackWarn = isBoolean(options.fallbackWarn) ? options.fallbackWarn : context.fallbackWarn;
  const part = !!options.part;
  const locale2 = getLocale(context, options);
  const locales = localeFallbacker(
    context,
    // eslint-disable-line @typescript-eslint/no-explicit-any
    fallbackLocale,
    locale2
  );
  if (!isString(key) || key === "") {
    return new Intl.DateTimeFormat(locale2, overrides).format(value);
  }
  let datetimeFormat = {};
  let targetLocale;
  let format2 = null;
  let from = locale2;
  let to2 = null;
  const type = "datetime format";
  for (let i3 = 0; i3 < locales.length; i3++) {
    targetLocale = to2 = locales[i3];
    if (locale2 !== targetLocale && isTranslateFallbackWarn(fallbackWarn, key)) {
      onWarn(getWarnMessage$1(CoreWarnCodes.FALLBACK_TO_DATE_FORMAT, {
        key,
        target: targetLocale
      }));
    }
    if (locale2 !== targetLocale) {
      const emitter = context.__v_emitter;
      if (emitter) {
        emitter.emit("fallback", {
          type,
          key,
          from,
          to: to2,
          groupId: `${type}:${key}`
        });
      }
    }
    datetimeFormat = datetimeFormats[targetLocale] || {};
    format2 = datetimeFormat[key];
    if (isPlainObject(format2))
      break;
    handleMissing(context, key, targetLocale, missingWarn, type);
    from = to2;
  }
  if (!isPlainObject(format2) || !isString(targetLocale)) {
    return unresolving ? NOT_REOSLVED : key;
  }
  let id2 = `${targetLocale}__${key}`;
  if (!isEmptyObject(overrides)) {
    id2 = `${id2}__${JSON.stringify(overrides)}`;
  }
  let formatter = __datetimeFormatters.get(id2);
  if (!formatter) {
    formatter = new Intl.DateTimeFormat(targetLocale, assign({}, format2, overrides));
    __datetimeFormatters.set(id2, formatter);
  }
  return !part ? formatter.format(value) : formatter.formatToParts(value);
}
const DATETIME_FORMAT_OPTIONS_KEYS = [
  "localeMatcher",
  "weekday",
  "era",
  "year",
  "month",
  "day",
  "hour",
  "minute",
  "second",
  "timeZoneName",
  "formatMatcher",
  "hour12",
  "timeZone",
  "dateStyle",
  "timeStyle",
  "calendar",
  "dayPeriod",
  "numberingSystem",
  "hourCycle",
  "fractionalSecondDigits"
];
function parseDateTimeArgs(...args) {
  const [arg1, arg2, arg3, arg4] = args;
  const options = {};
  let overrides = {};
  let value;
  if (isString(arg1)) {
    const matches2 = arg1.match(/(\d{4}-\d{2}-\d{2})(T|\s)?(.*)/);
    if (!matches2) {
      throw createCoreError(CoreErrorCodes.INVALID_ISO_DATE_ARGUMENT);
    }
    const dateTime = matches2[3] ? matches2[3].trim().startsWith("T") ? `${matches2[1].trim()}${matches2[3].trim()}` : `${matches2[1].trim()}T${matches2[3].trim()}` : matches2[1].trim();
    value = new Date(dateTime);
    try {
      value.toISOString();
    } catch (e3) {
      throw createCoreError(CoreErrorCodes.INVALID_ISO_DATE_ARGUMENT);
    }
  } else if (isDate(arg1)) {
    if (isNaN(arg1.getTime())) {
      throw createCoreError(CoreErrorCodes.INVALID_DATE_ARGUMENT);
    }
    value = arg1;
  } else if (isNumber(arg1)) {
    value = arg1;
  } else {
    throw createCoreError(CoreErrorCodes.INVALID_ARGUMENT);
  }
  if (isString(arg2)) {
    options.key = arg2;
  } else if (isPlainObject(arg2)) {
    Object.keys(arg2).forEach((key) => {
      if (DATETIME_FORMAT_OPTIONS_KEYS.includes(key)) {
        overrides[key] = arg2[key];
      } else {
        options[key] = arg2[key];
      }
    });
  }
  if (isString(arg3)) {
    options.locale = arg3;
  } else if (isPlainObject(arg3)) {
    overrides = arg3;
  }
  if (isPlainObject(arg4)) {
    overrides = arg4;
  }
  return [options.key || "", value, options, overrides];
}
function clearDateTimeFormat(ctx, locale2, format2) {
  const context = ctx;
  for (const key in format2) {
    const id2 = `${locale2}__${key}`;
    if (!context.__datetimeFormatters.has(id2)) {
      continue;
    }
    context.__datetimeFormatters.delete(id2);
  }
}
function number(context, ...args) {
  const { numberFormats, unresolving, fallbackLocale, onWarn, localeFallbacker } = context;
  const { __numberFormatters } = context;
  if (!Availabilities.numberFormat) {
    onWarn(getWarnMessage$1(CoreWarnCodes.CANNOT_FORMAT_NUMBER));
    return MISSING_RESOLVE_VALUE;
  }
  const [key, value, options, overrides] = parseNumberArgs(...args);
  const missingWarn = isBoolean(options.missingWarn) ? options.missingWarn : context.missingWarn;
  const fallbackWarn = isBoolean(options.fallbackWarn) ? options.fallbackWarn : context.fallbackWarn;
  const part = !!options.part;
  const locale2 = getLocale(context, options);
  const locales = localeFallbacker(
    context,
    // eslint-disable-line @typescript-eslint/no-explicit-any
    fallbackLocale,
    locale2
  );
  if (!isString(key) || key === "") {
    return new Intl.NumberFormat(locale2, overrides).format(value);
  }
  let numberFormat = {};
  let targetLocale;
  let format2 = null;
  let from = locale2;
  let to2 = null;
  const type = "number format";
  for (let i3 = 0; i3 < locales.length; i3++) {
    targetLocale = to2 = locales[i3];
    if (locale2 !== targetLocale && isTranslateFallbackWarn(fallbackWarn, key)) {
      onWarn(getWarnMessage$1(CoreWarnCodes.FALLBACK_TO_NUMBER_FORMAT, {
        key,
        target: targetLocale
      }));
    }
    if (locale2 !== targetLocale) {
      const emitter = context.__v_emitter;
      if (emitter) {
        emitter.emit("fallback", {
          type,
          key,
          from,
          to: to2,
          groupId: `${type}:${key}`
        });
      }
    }
    numberFormat = numberFormats[targetLocale] || {};
    format2 = numberFormat[key];
    if (isPlainObject(format2))
      break;
    handleMissing(context, key, targetLocale, missingWarn, type);
    from = to2;
  }
  if (!isPlainObject(format2) || !isString(targetLocale)) {
    return unresolving ? NOT_REOSLVED : key;
  }
  let id2 = `${targetLocale}__${key}`;
  if (!isEmptyObject(overrides)) {
    id2 = `${id2}__${JSON.stringify(overrides)}`;
  }
  let formatter = __numberFormatters.get(id2);
  if (!formatter) {
    formatter = new Intl.NumberFormat(targetLocale, assign({}, format2, overrides));
    __numberFormatters.set(id2, formatter);
  }
  return !part ? formatter.format(value) : formatter.formatToParts(value);
}
const NUMBER_FORMAT_OPTIONS_KEYS = [
  "localeMatcher",
  "style",
  "currency",
  "currencyDisplay",
  "currencySign",
  "useGrouping",
  "minimumIntegerDigits",
  "minimumFractionDigits",
  "maximumFractionDigits",
  "minimumSignificantDigits",
  "maximumSignificantDigits",
  "compactDisplay",
  "notation",
  "signDisplay",
  "unit",
  "unitDisplay",
  "roundingMode",
  "roundingPriority",
  "roundingIncrement",
  "trailingZeroDisplay"
];
function parseNumberArgs(...args) {
  const [arg1, arg2, arg3, arg4] = args;
  const options = {};
  let overrides = {};
  if (!isNumber(arg1)) {
    throw createCoreError(CoreErrorCodes.INVALID_ARGUMENT);
  }
  const value = arg1;
  if (isString(arg2)) {
    options.key = arg2;
  } else if (isPlainObject(arg2)) {
    Object.keys(arg2).forEach((key) => {
      if (NUMBER_FORMAT_OPTIONS_KEYS.includes(key)) {
        overrides[key] = arg2[key];
      } else {
        options[key] = arg2[key];
      }
    });
  }
  if (isString(arg3)) {
    options.locale = arg3;
  } else if (isPlainObject(arg3)) {
    overrides = arg3;
  }
  if (isPlainObject(arg4)) {
    overrides = arg4;
  }
  return [options.key || "", value, options, overrides];
}
function clearNumberFormat(ctx, locale2, format2) {
  const context = ctx;
  for (const key in format2) {
    const id2 = `${locale2}__${key}`;
    if (!context.__numberFormatters.has(id2)) {
      continue;
    }
    context.__numberFormatters.delete(id2);
  }
}
{
  initFeatureFlags$1();
}
/*!
  * vue-i18n v9.9.0
  * (c) 2024 kazuya kawaguchi
  * Released under the MIT License.
  */
const VERSION = "9.9.0";
function initFeatureFlags() {
  if (typeof __INTLIFY_PROD_DEVTOOLS__ !== "boolean") {
    getGlobalThis().__INTLIFY_PROD_DEVTOOLS__ = false;
  }
}
const code$1 = CoreWarnCodes.__EXTEND_POINT__;
const inc$1 = incrementer(code$1);
const I18nWarnCodes = {
  FALLBACK_TO_ROOT: code$1,
  NOT_SUPPORTED_PRESERVE: inc$1(),
  NOT_SUPPORTED_FORMATTER: inc$1(),
  NOT_SUPPORTED_PRESERVE_DIRECTIVE: inc$1(),
  NOT_SUPPORTED_GET_CHOICE_INDEX: inc$1(),
  COMPONENT_NAME_LEGACY_COMPATIBLE: inc$1(),
  NOT_FOUND_PARENT_SCOPE: inc$1(),
  IGNORE_OBJ_FLATTEN: inc$1(),
  NOTICE_DROP_ALLOW_COMPOSITION: inc$1()
  // 17
};
const warnMessages = {
  [I18nWarnCodes.FALLBACK_TO_ROOT]: `Fall back to {type} '{key}' with root locale.`,
  [I18nWarnCodes.NOT_SUPPORTED_PRESERVE]: `Not supported 'preserve'.`,
  [I18nWarnCodes.NOT_SUPPORTED_FORMATTER]: `Not supported 'formatter'.`,
  [I18nWarnCodes.NOT_SUPPORTED_PRESERVE_DIRECTIVE]: `Not supported 'preserveDirectiveContent'.`,
  [I18nWarnCodes.NOT_SUPPORTED_GET_CHOICE_INDEX]: `Not supported 'getChoiceIndex'.`,
  [I18nWarnCodes.COMPONENT_NAME_LEGACY_COMPATIBLE]: `Component name legacy compatible: '{name}' -> 'i18n'`,
  [I18nWarnCodes.NOT_FOUND_PARENT_SCOPE]: `Not found parent scope. use the global scope.`,
  [I18nWarnCodes.IGNORE_OBJ_FLATTEN]: `Ignore object flatten: '{key}' key has an string value`,
  [I18nWarnCodes.NOTICE_DROP_ALLOW_COMPOSITION]: `'allowComposition' option will be dropped in the next major version. For more information, please see 👉 https://tinyurl.com/2p97mcze`
};
function getWarnMessage(code2, ...args) {
  return format$1(warnMessages[code2], ...args);
}
const code = CoreErrorCodes.__EXTEND_POINT__;
const inc = incrementer(code);
const I18nErrorCodes = {
  // composer module errors
  UNEXPECTED_RETURN_TYPE: code,
  // legacy module errors
  INVALID_ARGUMENT: inc(),
  // i18n module errors
  MUST_BE_CALL_SETUP_TOP: inc(),
  NOT_INSTALLED: inc(),
  NOT_AVAILABLE_IN_LEGACY_MODE: inc(),
  // directive module errors
  REQUIRED_VALUE: inc(),
  INVALID_VALUE: inc(),
  // vue-devtools errors
  CANNOT_SETUP_VUE_DEVTOOLS_PLUGIN: inc(),
  NOT_INSTALLED_WITH_PROVIDE: inc(),
  // unexpected error
  UNEXPECTED_ERROR: inc(),
  // not compatible legacy vue-i18n constructor
  NOT_COMPATIBLE_LEGACY_VUE_I18N: inc(),
  // bridge support vue 2.x only
  BRIDGE_SUPPORT_VUE_2_ONLY: inc(),
  // need to define `i18n` option in `allowComposition: true` and `useScope: 'local' at `useI18n``
  MUST_DEFINE_I18N_OPTION_IN_ALLOW_COMPOSITION: inc(),
  // Not available Compostion API in Legacy API mode. Please make sure that the legacy API mode is working properly
  NOT_AVAILABLE_COMPOSITION_IN_LEGACY: inc(),
  // for enhancement
  __EXTEND_POINT__: inc()
  // 40
};
function createI18nError(code2, ...args) {
  return createCompileError(code2, null, { messages: errorMessages, args });
}
const errorMessages = {
  [I18nErrorCodes.UNEXPECTED_RETURN_TYPE]: "Unexpected return type in composer",
  [I18nErrorCodes.INVALID_ARGUMENT]: "Invalid argument",
  [I18nErrorCodes.MUST_BE_CALL_SETUP_TOP]: "Must be called at the top of a `setup` function",
  [I18nErrorCodes.NOT_INSTALLED]: "Need to install with `app.use` function",
  [I18nErrorCodes.UNEXPECTED_ERROR]: "Unexpected error",
  [I18nErrorCodes.NOT_AVAILABLE_IN_LEGACY_MODE]: "Not available in legacy mode",
  [I18nErrorCodes.REQUIRED_VALUE]: `Required in value: {0}`,
  [I18nErrorCodes.INVALID_VALUE]: `Invalid value`,
  [I18nErrorCodes.CANNOT_SETUP_VUE_DEVTOOLS_PLUGIN]: `Cannot setup vue-devtools plugin`,
  [I18nErrorCodes.NOT_INSTALLED_WITH_PROVIDE]: "Need to install with `provide` function",
  [I18nErrorCodes.NOT_COMPATIBLE_LEGACY_VUE_I18N]: "Not compatible legacy VueI18n.",
  [I18nErrorCodes.BRIDGE_SUPPORT_VUE_2_ONLY]: "vue-i18n-bridge support Vue 2.x only",
  [I18nErrorCodes.MUST_DEFINE_I18N_OPTION_IN_ALLOW_COMPOSITION]: "Must define ‘i18n’ option or custom block in Composition API with using local scope in Legacy API mode",
  [I18nErrorCodes.NOT_AVAILABLE_COMPOSITION_IN_LEGACY]: "Not available Compostion API in Legacy API mode. Please make sure that the legacy API mode is working properly"
};
const TranslateVNodeSymbol = /* @__PURE__ */ makeSymbol("__translateVNode");
const DatetimePartsSymbol = /* @__PURE__ */ makeSymbol("__datetimeParts");
const NumberPartsSymbol = /* @__PURE__ */ makeSymbol("__numberParts");
const EnableEmitter = /* @__PURE__ */ makeSymbol("__enableEmitter");
const DisableEmitter = /* @__PURE__ */ makeSymbol("__disableEmitter");
const SetPluralRulesSymbol = makeSymbol("__setPluralRules");
const InejctWithOptionSymbol = /* @__PURE__ */ makeSymbol("__injectWithOption");
const DisposeSymbol = /* @__PURE__ */ makeSymbol("__dispose");
function handleFlatJson(obj) {
  if (!isObject$2(obj)) {
    return obj;
  }
  for (const key in obj) {
    if (!hasOwn(obj, key)) {
      continue;
    }
    if (!key.includes(".")) {
      if (isObject$2(obj[key])) {
        handleFlatJson(obj[key]);
      }
    } else {
      const subKeys = key.split(".");
      const lastIndex = subKeys.length - 1;
      let currentObj = obj;
      let hasStringValue = false;
      for (let i3 = 0; i3 < lastIndex; i3++) {
        if (!(subKeys[i3] in currentObj)) {
          currentObj[subKeys[i3]] = {};
        }
        if (!isObject$2(currentObj[subKeys[i3]])) {
          warn(getWarnMessage(I18nWarnCodes.IGNORE_OBJ_FLATTEN, {
            key: subKeys[i3]
          }));
          hasStringValue = true;
          break;
        }
        currentObj = currentObj[subKeys[i3]];
      }
      if (!hasStringValue) {
        currentObj[subKeys[lastIndex]] = obj[key];
        delete obj[key];
      }
      if (isObject$2(currentObj[subKeys[lastIndex]])) {
        handleFlatJson(currentObj[subKeys[lastIndex]]);
      }
    }
  }
  return obj;
}
function getLocaleMessages(locale2, options) {
  const { messages, __i18n, messageResolver, flatJson } = options;
  const ret = isPlainObject(messages) ? messages : isArray(__i18n) ? {} : { [locale2]: {} };
  if (isArray(__i18n)) {
    __i18n.forEach((custom) => {
      if ("locale" in custom && "resource" in custom) {
        const { locale: locale22, resource: resource2 } = custom;
        if (locale22) {
          ret[locale22] = ret[locale22] || {};
          deepCopy(resource2, ret[locale22]);
        } else {
          deepCopy(resource2, ret);
        }
      } else {
        isString(custom) && deepCopy(JSON.parse(custom), ret);
      }
    });
  }
  if (messageResolver == null && flatJson) {
    for (const key in ret) {
      if (hasOwn(ret, key)) {
        handleFlatJson(ret[key]);
      }
    }
  }
  return ret;
}
function getComponentOptions(instance) {
  return instance.type;
}
function adjustI18nResources(gl2, options, componentOptions) {
  let messages = isObject$2(options.messages) ? options.messages : {};
  if ("__i18nGlobal" in componentOptions) {
    messages = getLocaleMessages(gl2.locale.value, {
      messages,
      __i18n: componentOptions.__i18nGlobal
    });
  }
  const locales = Object.keys(messages);
  if (locales.length) {
    locales.forEach((locale2) => {
      gl2.mergeLocaleMessage(locale2, messages[locale2]);
    });
  }
  {
    if (isObject$2(options.datetimeFormats)) {
      const locales2 = Object.keys(options.datetimeFormats);
      if (locales2.length) {
        locales2.forEach((locale2) => {
          gl2.mergeDateTimeFormat(locale2, options.datetimeFormats[locale2]);
        });
      }
    }
    if (isObject$2(options.numberFormats)) {
      const locales2 = Object.keys(options.numberFormats);
      if (locales2.length) {
        locales2.forEach((locale2) => {
          gl2.mergeNumberFormat(locale2, options.numberFormats[locale2]);
        });
      }
    }
  }
}
function createTextNode(key) {
  return createVNode(Text, null, key, 0);
}
const DEVTOOLS_META = "__INTLIFY_META__";
const NOOP_RETURN_ARRAY = () => [];
const NOOP_RETURN_FALSE = () => false;
let composerID = 0;
function defineCoreMissingHandler(missing) {
  return (ctx, locale2, key, type) => {
    return missing(locale2, key, getCurrentInstance() || void 0, type);
  };
}
const getMetaInfo = /* @__NO_SIDE_EFFECTS__ */ () => {
  const instance = getCurrentInstance();
  let meta = null;
  return instance && (meta = getComponentOptions(instance)[DEVTOOLS_META]) ? { [DEVTOOLS_META]: meta } : null;
};
function createComposer(options = {}, VueI18nLegacy) {
  const { __root, __injectWithOption } = options;
  const _isGlobal = __root === void 0;
  const flatJson = options.flatJson;
  const _ref = inBrowser ? ref : shallowRef;
  let _inheritLocale = isBoolean(options.inheritLocale) ? options.inheritLocale : true;
  const _locale = _ref(
    // prettier-ignore
    __root && _inheritLocale ? __root.locale.value : isString(options.locale) ? options.locale : DEFAULT_LOCALE
  );
  const _fallbackLocale = _ref(
    // prettier-ignore
    __root && _inheritLocale ? __root.fallbackLocale.value : isString(options.fallbackLocale) || isArray(options.fallbackLocale) || isPlainObject(options.fallbackLocale) || options.fallbackLocale === false ? options.fallbackLocale : _locale.value
  );
  const _messages = _ref(getLocaleMessages(_locale.value, options));
  const _datetimeFormats = _ref(isPlainObject(options.datetimeFormats) ? options.datetimeFormats : { [_locale.value]: {} });
  const _numberFormats = _ref(isPlainObject(options.numberFormats) ? options.numberFormats : { [_locale.value]: {} });
  let _missingWarn = __root ? __root.missingWarn : isBoolean(options.missingWarn) || isRegExp(options.missingWarn) ? options.missingWarn : true;
  let _fallbackWarn = __root ? __root.fallbackWarn : isBoolean(options.fallbackWarn) || isRegExp(options.fallbackWarn) ? options.fallbackWarn : true;
  let _fallbackRoot = __root ? __root.fallbackRoot : isBoolean(options.fallbackRoot) ? options.fallbackRoot : true;
  let _fallbackFormat = !!options.fallbackFormat;
  let _missing = isFunction(options.missing) ? options.missing : null;
  let _runtimeMissing = isFunction(options.missing) ? defineCoreMissingHandler(options.missing) : null;
  let _postTranslation = isFunction(options.postTranslation) ? options.postTranslation : null;
  let _warnHtmlMessage = __root ? __root.warnHtmlMessage : isBoolean(options.warnHtmlMessage) ? options.warnHtmlMessage : true;
  let _escapeParameter = !!options.escapeParameter;
  const _modifiers = __root ? __root.modifiers : isPlainObject(options.modifiers) ? options.modifiers : {};
  let _pluralRules = options.pluralRules || __root && __root.pluralRules;
  let _context;
  const getCoreContext = () => {
    _isGlobal && setFallbackContext(null);
    const ctxOptions = {
      version: VERSION,
      locale: _locale.value,
      fallbackLocale: _fallbackLocale.value,
      messages: _messages.value,
      modifiers: _modifiers,
      pluralRules: _pluralRules,
      missing: _runtimeMissing === null ? void 0 : _runtimeMissing,
      missingWarn: _missingWarn,
      fallbackWarn: _fallbackWarn,
      fallbackFormat: _fallbackFormat,
      unresolving: true,
      postTranslation: _postTranslation === null ? void 0 : _postTranslation,
      warnHtmlMessage: _warnHtmlMessage,
      escapeParameter: _escapeParameter,
      messageResolver: options.messageResolver,
      messageCompiler: options.messageCompiler,
      __meta: { framework: "vue" }
    };
    {
      ctxOptions.datetimeFormats = _datetimeFormats.value;
      ctxOptions.numberFormats = _numberFormats.value;
      ctxOptions.__datetimeFormatters = isPlainObject(_context) ? _context.__datetimeFormatters : void 0;
      ctxOptions.__numberFormatters = isPlainObject(_context) ? _context.__numberFormatters : void 0;
    }
    {
      ctxOptions.__v_emitter = isPlainObject(_context) ? _context.__v_emitter : void 0;
    }
    const ctx = createCoreContext(ctxOptions);
    _isGlobal && setFallbackContext(ctx);
    return ctx;
  };
  _context = getCoreContext();
  updateFallbackLocale(_context, _locale.value, _fallbackLocale.value);
  function trackReactivityValues() {
    return [
      _locale.value,
      _fallbackLocale.value,
      _messages.value,
      _datetimeFormats.value,
      _numberFormats.value
    ];
  }
  const locale2 = computed({
    get: () => _locale.value,
    set: (val) => {
      _locale.value = val;
      _context.locale = _locale.value;
    }
  });
  const fallbackLocale = computed({
    get: () => _fallbackLocale.value,
    set: (val) => {
      _fallbackLocale.value = val;
      _context.fallbackLocale = _fallbackLocale.value;
      updateFallbackLocale(_context, _locale.value, val);
    }
  });
  const messages = computed(() => _messages.value);
  const datetimeFormats = /* @__PURE__ */ computed(() => _datetimeFormats.value);
  const numberFormats = /* @__PURE__ */ computed(() => _numberFormats.value);
  function getPostTranslationHandler() {
    return isFunction(_postTranslation) ? _postTranslation : null;
  }
  function setPostTranslationHandler(handler) {
    _postTranslation = handler;
    _context.postTranslation = handler;
  }
  function getMissingHandler() {
    return _missing;
  }
  function setMissingHandler(handler) {
    if (handler !== null) {
      _runtimeMissing = defineCoreMissingHandler(handler);
    }
    _missing = handler;
    _context.missing = _runtimeMissing;
  }
  function isResolvedTranslateMessage(type, arg) {
    return type !== "translate" || !arg.resolvedMessage;
  }
  const wrapWithDeps = (fn2, argumentParser, warnType, fallbackSuccess, fallbackFail, successCondition) => {
    trackReactivityValues();
    let ret;
    try {
      if (true) {
        /* @__PURE__ */ setAdditionalMeta(/* @__PURE__ */ getMetaInfo());
      }
      if (!_isGlobal) {
        _context.fallbackContext = __root ? getFallbackContext() : void 0;
      }
      ret = fn2(_context);
    } finally {
      if (!_isGlobal) {
        _context.fallbackContext = void 0;
      }
    }
    if (warnType !== "translate exists" && // for not `te` (e.g `t`)
    isNumber(ret) && ret === NOT_REOSLVED || warnType === "translate exists" && !ret) {
      const [key, arg2] = argumentParser();
      if (__root && isString(key) && isResolvedTranslateMessage(warnType, arg2)) {
        if (_fallbackRoot && (isTranslateFallbackWarn(_fallbackWarn, key) || isTranslateMissingWarn(_missingWarn, key))) {
          warn(getWarnMessage(I18nWarnCodes.FALLBACK_TO_ROOT, {
            key,
            type: warnType
          }));
        }
        {
          const { __v_emitter: emitter } = _context;
          if (emitter && _fallbackRoot) {
            emitter.emit("fallback", {
              type: warnType,
              key,
              to: "global",
              groupId: `${warnType}:${key}`
            });
          }
        }
      }
      return __root && _fallbackRoot ? fallbackSuccess(__root) : fallbackFail(key);
    } else if (successCondition(ret)) {
      return ret;
    } else {
      throw createI18nError(I18nErrorCodes.UNEXPECTED_RETURN_TYPE);
    }
  };
  function t3(...args) {
    return wrapWithDeps((context) => Reflect.apply(translate, null, [context, ...args]), () => parseTranslateArgs(...args), "translate", (root) => Reflect.apply(root.t, root, [...args]), (key) => key, (val) => isString(val));
  }
  function rt2(...args) {
    const [arg1, arg2, arg3] = args;
    if (arg3 && !isObject$2(arg3)) {
      throw createI18nError(I18nErrorCodes.INVALID_ARGUMENT);
    }
    return t3(...[arg1, arg2, assign({ resolvedMessage: true }, arg3 || {})]);
  }
  function d4(...args) {
    return wrapWithDeps((context) => Reflect.apply(datetime, null, [context, ...args]), () => parseDateTimeArgs(...args), "datetime format", (root) => Reflect.apply(root.d, root, [...args]), () => MISSING_RESOLVE_VALUE, (val) => isString(val));
  }
  function n2(...args) {
    return wrapWithDeps((context) => Reflect.apply(number, null, [context, ...args]), () => parseNumberArgs(...args), "number format", (root) => Reflect.apply(root.n, root, [...args]), () => MISSING_RESOLVE_VALUE, (val) => isString(val));
  }
  function normalize(values) {
    return values.map((val) => isString(val) || isNumber(val) || isBoolean(val) ? createTextNode(String(val)) : val);
  }
  const interpolate = (val) => val;
  const processor = {
    normalize,
    interpolate,
    type: "vnode"
  };
  function translateVNode(...args) {
    return wrapWithDeps(
      (context) => {
        let ret;
        const _context2 = context;
        try {
          _context2.processor = processor;
          ret = Reflect.apply(translate, null, [_context2, ...args]);
        } finally {
          _context2.processor = null;
        }
        return ret;
      },
      () => parseTranslateArgs(...args),
      "translate",
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      (root) => root[TranslateVNodeSymbol](...args),
      (key) => [createTextNode(key)],
      (val) => isArray(val)
    );
  }
  function numberParts(...args) {
    return wrapWithDeps(
      (context) => Reflect.apply(number, null, [context, ...args]),
      () => parseNumberArgs(...args),
      "number format",
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      (root) => root[NumberPartsSymbol](...args),
      NOOP_RETURN_ARRAY,
      (val) => isString(val) || isArray(val)
    );
  }
  function datetimeParts(...args) {
    return wrapWithDeps(
      (context) => Reflect.apply(datetime, null, [context, ...args]),
      () => parseDateTimeArgs(...args),
      "datetime format",
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      (root) => root[DatetimePartsSymbol](...args),
      NOOP_RETURN_ARRAY,
      (val) => isString(val) || isArray(val)
    );
  }
  function setPluralRules(rules) {
    _pluralRules = rules;
    _context.pluralRules = _pluralRules;
  }
  function te2(key, locale22) {
    return wrapWithDeps(() => {
      if (!key) {
        return false;
      }
      const targetLocale = isString(locale22) ? locale22 : _locale.value;
      const message = getLocaleMessage(targetLocale);
      const resolved = _context.messageResolver(message, key);
      return isMessageAST(resolved) || isMessageFunction(resolved) || isString(resolved);
    }, () => [key], "translate exists", (root) => {
      return Reflect.apply(root.te, root, [key, locale22]);
    }, NOOP_RETURN_FALSE, (val) => isBoolean(val));
  }
  function resolveMessages(key) {
    let messages2 = null;
    const locales = fallbackWithLocaleChain(_context, _fallbackLocale.value, _locale.value);
    for (let i3 = 0; i3 < locales.length; i3++) {
      const targetLocaleMessages = _messages.value[locales[i3]] || {};
      const messageValue = _context.messageResolver(targetLocaleMessages, key);
      if (messageValue != null) {
        messages2 = messageValue;
        break;
      }
    }
    return messages2;
  }
  function tm2(key) {
    const messages2 = resolveMessages(key);
    return messages2 != null ? messages2 : __root ? __root.tm(key) || {} : {};
  }
  function getLocaleMessage(locale22) {
    return _messages.value[locale22] || {};
  }
  function setLocaleMessage(locale22, message) {
    if (flatJson) {
      const _message = { [locale22]: message };
      for (const key in _message) {
        if (hasOwn(_message, key)) {
          handleFlatJson(_message[key]);
        }
      }
      message = _message[locale22];
    }
    _messages.value[locale22] = message;
    _context.messages = _messages.value;
  }
  function mergeLocaleMessage(locale22, message) {
    _messages.value[locale22] = _messages.value[locale22] || {};
    const _message = { [locale22]: message };
    for (const key in _message) {
      if (hasOwn(_message, key)) {
        handleFlatJson(_message[key]);
      }
    }
    message = _message[locale22];
    deepCopy(message, _messages.value[locale22]);
    _context.messages = _messages.value;
  }
  function getDateTimeFormat(locale22) {
    return _datetimeFormats.value[locale22] || {};
  }
  function setDateTimeFormat(locale22, format2) {
    _datetimeFormats.value[locale22] = format2;
    _context.datetimeFormats = _datetimeFormats.value;
    clearDateTimeFormat(_context, locale22, format2);
  }
  function mergeDateTimeFormat(locale22, format2) {
    _datetimeFormats.value[locale22] = assign(_datetimeFormats.value[locale22] || {}, format2);
    _context.datetimeFormats = _datetimeFormats.value;
    clearDateTimeFormat(_context, locale22, format2);
  }
  function getNumberFormat(locale22) {
    return _numberFormats.value[locale22] || {};
  }
  function setNumberFormat(locale22, format2) {
    _numberFormats.value[locale22] = format2;
    _context.numberFormats = _numberFormats.value;
    clearNumberFormat(_context, locale22, format2);
  }
  function mergeNumberFormat(locale22, format2) {
    _numberFormats.value[locale22] = assign(_numberFormats.value[locale22] || {}, format2);
    _context.numberFormats = _numberFormats.value;
    clearNumberFormat(_context, locale22, format2);
  }
  composerID++;
  if (__root && inBrowser) {
    watch(__root.locale, (val) => {
      if (_inheritLocale) {
        _locale.value = val;
        _context.locale = val;
        updateFallbackLocale(_context, _locale.value, _fallbackLocale.value);
      }
    });
    watch(__root.fallbackLocale, (val) => {
      if (_inheritLocale) {
        _fallbackLocale.value = val;
        _context.fallbackLocale = val;
        updateFallbackLocale(_context, _locale.value, _fallbackLocale.value);
      }
    });
  }
  const composer = {
    id: composerID,
    locale: locale2,
    fallbackLocale,
    get inheritLocale() {
      return _inheritLocale;
    },
    set inheritLocale(val) {
      _inheritLocale = val;
      if (val && __root) {
        _locale.value = __root.locale.value;
        _fallbackLocale.value = __root.fallbackLocale.value;
        updateFallbackLocale(_context, _locale.value, _fallbackLocale.value);
      }
    },
    get availableLocales() {
      return Object.keys(_messages.value).sort();
    },
    messages,
    get modifiers() {
      return _modifiers;
    },
    get pluralRules() {
      return _pluralRules || {};
    },
    get isGlobal() {
      return _isGlobal;
    },
    get missingWarn() {
      return _missingWarn;
    },
    set missingWarn(val) {
      _missingWarn = val;
      _context.missingWarn = _missingWarn;
    },
    get fallbackWarn() {
      return _fallbackWarn;
    },
    set fallbackWarn(val) {
      _fallbackWarn = val;
      _context.fallbackWarn = _fallbackWarn;
    },
    get fallbackRoot() {
      return _fallbackRoot;
    },
    set fallbackRoot(val) {
      _fallbackRoot = val;
    },
    get fallbackFormat() {
      return _fallbackFormat;
    },
    set fallbackFormat(val) {
      _fallbackFormat = val;
      _context.fallbackFormat = _fallbackFormat;
    },
    get warnHtmlMessage() {
      return _warnHtmlMessage;
    },
    set warnHtmlMessage(val) {
      _warnHtmlMessage = val;
      _context.warnHtmlMessage = val;
    },
    get escapeParameter() {
      return _escapeParameter;
    },
    set escapeParameter(val) {
      _escapeParameter = val;
      _context.escapeParameter = val;
    },
    t: t3,
    getLocaleMessage,
    setLocaleMessage,
    mergeLocaleMessage,
    getPostTranslationHandler,
    setPostTranslationHandler,
    getMissingHandler,
    setMissingHandler,
    [SetPluralRulesSymbol]: setPluralRules
  };
  {
    composer.datetimeFormats = datetimeFormats;
    composer.numberFormats = numberFormats;
    composer.rt = rt2;
    composer.te = te2;
    composer.tm = tm2;
    composer.d = d4;
    composer.n = n2;
    composer.getDateTimeFormat = getDateTimeFormat;
    composer.setDateTimeFormat = setDateTimeFormat;
    composer.mergeDateTimeFormat = mergeDateTimeFormat;
    composer.getNumberFormat = getNumberFormat;
    composer.setNumberFormat = setNumberFormat;
    composer.mergeNumberFormat = mergeNumberFormat;
    composer[InejctWithOptionSymbol] = __injectWithOption;
    composer[TranslateVNodeSymbol] = translateVNode;
    composer[DatetimePartsSymbol] = datetimeParts;
    composer[NumberPartsSymbol] = numberParts;
  }
  {
    composer[EnableEmitter] = (emitter) => {
      _context.__v_emitter = emitter;
    };
    composer[DisableEmitter] = () => {
      _context.__v_emitter = void 0;
    };
  }
  return composer;
}
const baseFormatProps = {
  tag: {
    type: [String, Object]
  },
  locale: {
    type: String
  },
  scope: {
    type: String,
    // NOTE: avoid https://github.com/microsoft/rushstack/issues/1050
    validator: (val) => val === "parent" || val === "global",
    default: "parent"
    /* ComponentI18nScope */
  },
  i18n: {
    type: Object
  }
};
function getInterpolateArg({ slots }, keys) {
  if (keys.length === 1 && keys[0] === "default") {
    const ret = slots.default ? slots.default() : [];
    return ret.reduce((slot, current) => {
      return [
        ...slot,
        // prettier-ignore
        ...current.type === Fragment ? current.children : [current]
      ];
    }, []);
  } else {
    return keys.reduce((arg, key) => {
      const slot = slots[key];
      if (slot) {
        arg[key] = slot();
      }
      return arg;
    }, {});
  }
}
function getFragmentableTag(tag) {
  return Fragment;
}
const TranslationImpl = /* @__PURE__ */ defineComponent({
  /* eslint-disable */
  name: "i18n-t",
  props: assign({
    keypath: {
      type: String,
      required: true
    },
    plural: {
      type: [Number, String],
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      validator: (val) => isNumber(val) || !isNaN(val)
    }
  }, baseFormatProps),
  /* eslint-enable */
  // eslint-disable-next-line @typescript-eslint/no-explicit-any
  setup(props, context) {
    const { slots, attrs } = context;
    const i18n = props.i18n || useI18n({
      useScope: props.scope,
      __useComponent: true
    });
    return () => {
      const keys = Object.keys(slots).filter((key) => key !== "_");
      const options = {};
      if (props.locale) {
        options.locale = props.locale;
      }
      if (props.plural !== void 0) {
        options.plural = isString(props.plural) ? +props.plural : props.plural;
      }
      const arg = getInterpolateArg(context, keys);
      const children = i18n[TranslateVNodeSymbol](props.keypath, arg, options);
      const assignedAttrs = assign({}, attrs);
      const tag = isString(props.tag) || isObject$2(props.tag) ? props.tag : getFragmentableTag();
      return h$3(tag, assignedAttrs, children);
    };
  }
});
const Translation = TranslationImpl;
function isVNode(target) {
  return isArray(target) && !isString(target[0]);
}
function renderFormatter(props, context, slotKeys, partFormatter) {
  const { slots, attrs } = context;
  return () => {
    const options = { part: true };
    let overrides = {};
    if (props.locale) {
      options.locale = props.locale;
    }
    if (isString(props.format)) {
      options.key = props.format;
    } else if (isObject$2(props.format)) {
      if (isString(props.format.key)) {
        options.key = props.format.key;
      }
      overrides = Object.keys(props.format).reduce((options2, prop) => {
        return slotKeys.includes(prop) ? assign({}, options2, { [prop]: props.format[prop] }) : options2;
      }, {});
    }
    const parts = partFormatter(...[props.value, options, overrides]);
    let children = [options.key];
    if (isArray(parts)) {
      children = parts.map((part, index) => {
        const slot = slots[part.type];
        const node = slot ? slot({ [part.type]: part.value, index, parts }) : [part.value];
        if (isVNode(node)) {
          node[0].key = `${part.type}-${index}`;
        }
        return node;
      });
    } else if (isString(parts)) {
      children = [parts];
    }
    const assignedAttrs = assign({}, attrs);
    const tag = isString(props.tag) || isObject$2(props.tag) ? props.tag : getFragmentableTag();
    return h$3(tag, assignedAttrs, children);
  };
}
const NumberFormatImpl = /* @__PURE__ */ defineComponent({
  /* eslint-disable */
  name: "i18n-n",
  props: assign({
    value: {
      type: Number,
      required: true
    },
    format: {
      type: [String, Object]
    }
  }, baseFormatProps),
  /* eslint-enable */
  // eslint-disable-next-line @typescript-eslint/no-explicit-any
  setup(props, context) {
    const i18n = props.i18n || useI18n({
      useScope: "parent",
      __useComponent: true
    });
    return renderFormatter(props, context, NUMBER_FORMAT_OPTIONS_KEYS, (...args) => (
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      i18n[NumberPartsSymbol](...args)
    ));
  }
});
const NumberFormat = NumberFormatImpl;
const DatetimeFormatImpl = /* @__PURE__ */ defineComponent({
  /* eslint-disable */
  name: "i18n-d",
  props: assign({
    value: {
      type: [Number, Date],
      required: true
    },
    format: {
      type: [String, Object]
    }
  }, baseFormatProps),
  /* eslint-enable */
  // eslint-disable-next-line @typescript-eslint/no-explicit-any
  setup(props, context) {
    const i18n = props.i18n || useI18n({
      useScope: "parent",
      __useComponent: true
    });
    return renderFormatter(props, context, DATETIME_FORMAT_OPTIONS_KEYS, (...args) => (
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      i18n[DatetimePartsSymbol](...args)
    ));
  }
});
const DatetimeFormat = DatetimeFormatImpl;
function getComposer$2(i18n, instance) {
  const i18nInternal = i18n;
  if (i18n.mode === "composition") {
    return i18nInternal.__getInstance(instance) || i18n.global;
  } else {
    const vueI18n = i18nInternal.__getInstance(instance);
    return vueI18n != null ? vueI18n.__composer : i18n.global.__composer;
  }
}
function vTDirective(i18n) {
  const _process = (binding) => {
    const { instance, modifiers, value } = binding;
    if (!instance || !instance.$) {
      throw createI18nError(I18nErrorCodes.UNEXPECTED_ERROR);
    }
    const composer = getComposer$2(i18n, instance.$);
    if (modifiers.preserve) {
      warn(getWarnMessage(I18nWarnCodes.NOT_SUPPORTED_PRESERVE));
    }
    const parsedValue = parseValue(value);
    return [
      Reflect.apply(composer.t, composer, [...makeParams(parsedValue)]),
      composer
    ];
  };
  const register = (el3, binding) => {
    const [textContent, composer] = _process(binding);
    if (inBrowser && i18n.global === composer) {
      el3.__i18nWatcher = watch(composer.locale, () => {
        binding.instance && binding.instance.$forceUpdate();
      });
    }
    el3.__composer = composer;
    el3.textContent = textContent;
  };
  const unregister = (el3) => {
    if (inBrowser && el3.__i18nWatcher) {
      el3.__i18nWatcher();
      el3.__i18nWatcher = void 0;
      delete el3.__i18nWatcher;
    }
    if (el3.__composer) {
      el3.__composer = void 0;
      delete el3.__composer;
    }
  };
  const update = (el3, { value }) => {
    if (el3.__composer) {
      const composer = el3.__composer;
      const parsedValue = parseValue(value);
      el3.textContent = Reflect.apply(composer.t, composer, [
        ...makeParams(parsedValue)
      ]);
    }
  };
  const getSSRProps = (binding) => {
    const [textContent] = _process(binding);
    return { textContent };
  };
  return {
    created: register,
    unmounted: unregister,
    beforeUpdate: update,
    getSSRProps
  };
}
function parseValue(value) {
  if (isString(value)) {
    return { path: value };
  } else if (isPlainObject(value)) {
    if (!("path" in value)) {
      throw createI18nError(I18nErrorCodes.REQUIRED_VALUE, "path");
    }
    return value;
  } else {
    throw createI18nError(I18nErrorCodes.INVALID_VALUE);
  }
}
function makeParams(value) {
  const { path, locale: locale2, args, choice, plural } = value;
  const options = {};
  const named = args || {};
  if (isString(locale2)) {
    options.locale = locale2;
  }
  if (isNumber(choice)) {
    options.plural = choice;
  }
  if (isNumber(plural)) {
    options.plural = plural;
  }
  return [path, named, options];
}
function apply(app, i18n, ...options) {
  const pluginOptions = isPlainObject(options[0]) ? options[0] : {};
  const useI18nComponentName = !!pluginOptions.useI18nComponentName;
  const globalInstall = isBoolean(pluginOptions.globalInstall) ? pluginOptions.globalInstall : true;
  if (globalInstall && useI18nComponentName) {
    warn(getWarnMessage(I18nWarnCodes.COMPONENT_NAME_LEGACY_COMPATIBLE, {
      name: Translation.name
    }));
  }
  if (globalInstall) {
    [!useI18nComponentName ? Translation.name : "i18n", "I18nT"].forEach((name) => app.component(name, Translation));
    [NumberFormat.name, "I18nN"].forEach((name) => app.component(name, NumberFormat));
    [DatetimeFormat.name, "I18nD"].forEach((name) => app.component(name, DatetimeFormat));
  }
  {
    app.directive("t", vTDirective(i18n));
  }
}
const VueDevToolsLabels = {
  [
    "vue-devtools-plugin-vue-i18n"
    /* VueDevToolsIDs.PLUGIN */
  ]: "Vue I18n devtools",
  [
    "vue-i18n-resource-inspector"
    /* VueDevToolsIDs.CUSTOM_INSPECTOR */
  ]: "I18n Resources",
  [
    "vue-i18n-timeline"
    /* VueDevToolsIDs.TIMELINE */
  ]: "Vue I18n"
};
const VueDevToolsPlaceholders = {
  [
    "vue-i18n-resource-inspector"
    /* VueDevToolsIDs.CUSTOM_INSPECTOR */
  ]: "Search for scopes ..."
};
const VueDevToolsTimelineColors = {
  [
    "vue-i18n-timeline"
    /* VueDevToolsIDs.TIMELINE */
  ]: 16764185
};
const VUE_I18N_COMPONENT_TYPES = "vue-i18n: composer properties";
let devtoolsApi;
async function enableDevTools(app, i18n) {
  return new Promise((resolve2, reject) => {
    try {
      setupDevtoolsPlugin({
        id: "vue-devtools-plugin-vue-i18n",
        label: VueDevToolsLabels[
          "vue-devtools-plugin-vue-i18n"
          /* VueDevToolsIDs.PLUGIN */
        ],
        packageName: "vue-i18n",
        homepage: "https://vue-i18n.intlify.dev",
        logo: "https://vue-i18n.intlify.dev/vue-i18n-devtools-logo.png",
        componentStateTypes: [VUE_I18N_COMPONENT_TYPES],
        app
        // eslint-disable-line @typescript-eslint/no-explicit-any
      }, (api) => {
        devtoolsApi = api;
        api.on.visitComponentTree(({ componentInstance, treeNode }) => {
          updateComponentTreeTags(componentInstance, treeNode, i18n);
        });
        api.on.inspectComponent(({ componentInstance, instanceData }) => {
          if (componentInstance.vnode.el && componentInstance.vnode.el.__VUE_I18N__ && instanceData) {
            if (i18n.mode === "legacy") {
              if (componentInstance.vnode.el.__VUE_I18N__ !== i18n.global.__composer) {
                inspectComposer(instanceData, componentInstance.vnode.el.__VUE_I18N__);
              }
            } else {
              inspectComposer(instanceData, componentInstance.vnode.el.__VUE_I18N__);
            }
          }
        });
        api.addInspector({
          id: "vue-i18n-resource-inspector",
          label: VueDevToolsLabels[
            "vue-i18n-resource-inspector"
            /* VueDevToolsIDs.CUSTOM_INSPECTOR */
          ],
          icon: "language",
          treeFilterPlaceholder: VueDevToolsPlaceholders[
            "vue-i18n-resource-inspector"
            /* VueDevToolsIDs.CUSTOM_INSPECTOR */
          ]
        });
        api.on.getInspectorTree((payload) => {
          if (payload.app === app && payload.inspectorId === "vue-i18n-resource-inspector") {
            registerScope(payload, i18n);
          }
        });
        const roots = /* @__PURE__ */ new Map();
        api.on.getInspectorState(async (payload) => {
          if (payload.app === app && payload.inspectorId === "vue-i18n-resource-inspector") {
            api.unhighlightElement();
            inspectScope(payload, i18n);
            if (payload.nodeId === "global") {
              if (!roots.has(payload.app)) {
                const [root] = await api.getComponentInstances(payload.app);
                roots.set(payload.app, root);
              }
              api.highlightElement(roots.get(payload.app));
            } else {
              const instance = getComponentInstance(payload.nodeId, i18n);
              instance && api.highlightElement(instance);
            }
          }
        });
        api.on.editInspectorState((payload) => {
          if (payload.app === app && payload.inspectorId === "vue-i18n-resource-inspector") {
            editScope(payload, i18n);
          }
        });
        api.addTimelineLayer({
          id: "vue-i18n-timeline",
          label: VueDevToolsLabels[
            "vue-i18n-timeline"
            /* VueDevToolsIDs.TIMELINE */
          ],
          color: VueDevToolsTimelineColors[
            "vue-i18n-timeline"
            /* VueDevToolsIDs.TIMELINE */
          ]
        });
        resolve2(true);
      });
    } catch (e3) {
      console.error(e3);
      reject(false);
    }
  });
}
function getI18nScopeLable(instance) {
  return instance.type.name || instance.type.displayName || instance.type.__file || "Anonymous";
}
function updateComponentTreeTags(instance, treeNode, i18n) {
  const global2 = i18n.mode === "composition" ? i18n.global : i18n.global.__composer;
  if (instance && instance.vnode.el && instance.vnode.el.__VUE_I18N__) {
    if (instance.vnode.el.__VUE_I18N__ !== global2) {
      const tag = {
        label: `i18n (${getI18nScopeLable(instance)} Scope)`,
        textColor: 0,
        backgroundColor: 16764185
      };
      treeNode.tags.push(tag);
    }
  }
}
function inspectComposer(instanceData, composer) {
  const type = VUE_I18N_COMPONENT_TYPES;
  instanceData.state.push({
    type,
    key: "locale",
    editable: true,
    value: composer.locale.value
  });
  instanceData.state.push({
    type,
    key: "availableLocales",
    editable: false,
    value: composer.availableLocales
  });
  instanceData.state.push({
    type,
    key: "fallbackLocale",
    editable: true,
    value: composer.fallbackLocale.value
  });
  instanceData.state.push({
    type,
    key: "inheritLocale",
    editable: true,
    value: composer.inheritLocale
  });
  instanceData.state.push({
    type,
    key: "messages",
    editable: false,
    value: getLocaleMessageValue(composer.messages.value)
  });
  {
    instanceData.state.push({
      type,
      key: "datetimeFormats",
      editable: false,
      value: composer.datetimeFormats.value
    });
    instanceData.state.push({
      type,
      key: "numberFormats",
      editable: false,
      value: composer.numberFormats.value
    });
  }
}
function getLocaleMessageValue(messages) {
  const value = {};
  Object.keys(messages).forEach((key) => {
    const v2 = messages[key];
    if (isFunction(v2) && "source" in v2) {
      value[key] = getMessageFunctionDetails(v2);
    } else if (isMessageAST(v2) && v2.loc && v2.loc.source) {
      value[key] = v2.loc.source;
    } else if (isObject$2(v2)) {
      value[key] = getLocaleMessageValue(v2);
    } else {
      value[key] = v2;
    }
  });
  return value;
}
const ESC = {
  "<": "&lt;",
  ">": "&gt;",
  '"': "&quot;",
  "&": "&amp;"
};
function escape(s5) {
  return s5.replace(/[<>"&]/g, escapeChar);
}
function escapeChar(a4) {
  return ESC[a4] || a4;
}
function getMessageFunctionDetails(func) {
  const argString = func.source ? `("${escape(func.source)}")` : `(?)`;
  return {
    _custom: {
      type: "function",
      display: `<span>ƒ</span> ${argString}`
    }
  };
}
function registerScope(payload, i18n) {
  payload.rootNodes.push({
    id: "global",
    label: "Global Scope"
  });
  const global2 = i18n.mode === "composition" ? i18n.global : i18n.global.__composer;
  for (const [keyInstance, instance] of i18n.__instances) {
    const composer = i18n.mode === "composition" ? instance : instance.__composer;
    if (global2 === composer) {
      continue;
    }
    payload.rootNodes.push({
      id: composer.id.toString(),
      label: `${getI18nScopeLable(keyInstance)} Scope`
    });
  }
}
function getComponentInstance(nodeId, i18n) {
  let instance = null;
  if (nodeId !== "global") {
    for (const [component, composer] of i18n.__instances.entries()) {
      if (composer.id.toString() === nodeId) {
        instance = component;
        break;
      }
    }
  }
  return instance;
}
function getComposer$1(nodeId, i18n) {
  if (nodeId === "global") {
    return i18n.mode === "composition" ? i18n.global : i18n.global.__composer;
  } else {
    const instance = Array.from(i18n.__instances.values()).find((item) => item.id.toString() === nodeId);
    if (instance) {
      return i18n.mode === "composition" ? instance : instance.__composer;
    } else {
      return null;
    }
  }
}
function inspectScope(payload, i18n) {
  const composer = getComposer$1(payload.nodeId, i18n);
  if (composer) {
    payload.state = makeScopeInspectState(composer);
  }
  return null;
}
function makeScopeInspectState(composer) {
  const state = {};
  const localeType = "Locale related info";
  const localeStates = [
    {
      type: localeType,
      key: "locale",
      editable: true,
      value: composer.locale.value
    },
    {
      type: localeType,
      key: "fallbackLocale",
      editable: true,
      value: composer.fallbackLocale.value
    },
    {
      type: localeType,
      key: "availableLocales",
      editable: false,
      value: composer.availableLocales
    },
    {
      type: localeType,
      key: "inheritLocale",
      editable: true,
      value: composer.inheritLocale
    }
  ];
  state[localeType] = localeStates;
  const localeMessagesType = "Locale messages info";
  const localeMessagesStates = [
    {
      type: localeMessagesType,
      key: "messages",
      editable: false,
      value: getLocaleMessageValue(composer.messages.value)
    }
  ];
  state[localeMessagesType] = localeMessagesStates;
  {
    const datetimeFormatsType = "Datetime formats info";
    const datetimeFormatsStates = [
      {
        type: datetimeFormatsType,
        key: "datetimeFormats",
        editable: false,
        value: composer.datetimeFormats.value
      }
    ];
    state[datetimeFormatsType] = datetimeFormatsStates;
    const numberFormatsType = "Datetime formats info";
    const numberFormatsStates = [
      {
        type: numberFormatsType,
        key: "numberFormats",
        editable: false,
        value: composer.numberFormats.value
      }
    ];
    state[numberFormatsType] = numberFormatsStates;
  }
  return state;
}
function addTimelineEvent(event, payload) {
  if (devtoolsApi) {
    let groupId;
    if (payload && "groupId" in payload) {
      groupId = payload.groupId;
      delete payload.groupId;
    }
    devtoolsApi.addTimelineEvent({
      layerId: "vue-i18n-timeline",
      event: {
        title: event,
        groupId,
        time: Date.now(),
        meta: {},
        data: payload || {},
        logType: event === "compile-error" ? "error" : event === "fallback" || event === "missing" ? "warning" : "default"
      }
    });
  }
}
function editScope(payload, i18n) {
  const composer = getComposer$1(payload.nodeId, i18n);
  if (composer) {
    const [field] = payload.path;
    if (field === "locale" && isString(payload.state.value)) {
      composer.locale.value = payload.state.value;
    } else if (field === "fallbackLocale" && (isString(payload.state.value) || isArray(payload.state.value) || isObject$2(payload.state.value))) {
      composer.fallbackLocale.value = payload.state.value;
    } else if (field === "inheritLocale" && isBoolean(payload.state.value)) {
      composer.inheritLocale = payload.state.value;
    }
  }
}
const I18nInjectionKey = /* @__PURE__ */ makeSymbol("global-vue-i18n");
function createI18n(options = {}, VueI18nLegacy) {
  const __globalInjection = isBoolean(options.globalInjection) ? options.globalInjection : true;
  const __allowComposition = true;
  const __instances = /* @__PURE__ */ new Map();
  const [globalScope, __global] = createGlobal(options);
  const symbol = /* @__PURE__ */ makeSymbol("vue-i18n");
  function __getInstance(component) {
    return __instances.get(component) || null;
  }
  function __setInstance(component, instance) {
    __instances.set(component, instance);
  }
  function __deleteInstance(component) {
    __instances.delete(component);
  }
  {
    const i18n = {
      // mode
      get mode() {
        return "composition";
      },
      // allowComposition
      get allowComposition() {
        return __allowComposition;
      },
      // install plugin
      async install(app, ...options2) {
        {
          app.__VUE_I18N__ = i18n;
        }
        app.__VUE_I18N_SYMBOL__ = symbol;
        app.provide(app.__VUE_I18N_SYMBOL__, i18n);
        if (isPlainObject(options2[0])) {
          const opts = options2[0];
          i18n.__composerExtend = opts.__composerExtend;
          i18n.__vueI18nExtend = opts.__vueI18nExtend;
        }
        let globalReleaseHandler = null;
        if (__globalInjection) {
          globalReleaseHandler = injectGlobalFields(app, i18n.global);
        }
        {
          apply(app, i18n, ...options2);
        }
        const unmountApp = app.unmount;
        app.unmount = () => {
          globalReleaseHandler && globalReleaseHandler();
          i18n.dispose();
          unmountApp();
        };
        {
          const ret = await enableDevTools(app, i18n);
          if (!ret) {
            throw createI18nError(I18nErrorCodes.CANNOT_SETUP_VUE_DEVTOOLS_PLUGIN);
          }
          const emitter = createEmitter();
          {
            const _composer = __global;
            _composer[EnableEmitter] && _composer[EnableEmitter](emitter);
          }
          emitter.on("*", addTimelineEvent);
        }
      },
      // global accessor
      get global() {
        return __global;
      },
      dispose() {
        globalScope.stop();
      },
      // @internal
      __instances,
      // @internal
      __getInstance,
      // @internal
      __setInstance,
      // @internal
      __deleteInstance
    };
    return i18n;
  }
}
function useI18n(options = {}) {
  const instance = getCurrentInstance();
  if (instance == null) {
    throw createI18nError(I18nErrorCodes.MUST_BE_CALL_SETUP_TOP);
  }
  if (!instance.isCE && instance.appContext.app != null && !instance.appContext.app.__VUE_I18N_SYMBOL__) {
    throw createI18nError(I18nErrorCodes.NOT_INSTALLED);
  }
  const i18n = getI18nInstance(instance);
  const gl2 = getGlobalComposer(i18n);
  const componentOptions = getComponentOptions(instance);
  const scope = getScope(options, componentOptions);
  if (scope === "global") {
    adjustI18nResources(gl2, options, componentOptions);
    return gl2;
  }
  if (scope === "parent") {
    let composer2 = getComposer(i18n, instance, options.__useComponent);
    if (composer2 == null) {
      {
        warn(getWarnMessage(I18nWarnCodes.NOT_FOUND_PARENT_SCOPE));
      }
      composer2 = gl2;
    }
    return composer2;
  }
  const i18nInternal = i18n;
  let composer = i18nInternal.__getInstance(instance);
  if (composer == null) {
    const composerOptions = assign({}, options);
    if ("__i18n" in componentOptions) {
      composerOptions.__i18n = componentOptions.__i18n;
    }
    if (gl2) {
      composerOptions.__root = gl2;
    }
    composer = createComposer(composerOptions);
    if (i18nInternal.__composerExtend) {
      composer[DisposeSymbol] = i18nInternal.__composerExtend(composer);
    }
    setupLifeCycle(i18nInternal, instance, composer);
    i18nInternal.__setInstance(instance, composer);
  }
  return composer;
}
function createGlobal(options, legacyMode, VueI18nLegacy) {
  const scope = effectScope();
  {
    const obj = scope.run(() => createComposer(options));
    if (obj == null) {
      throw createI18nError(I18nErrorCodes.UNEXPECTED_ERROR);
    }
    return [scope, obj];
  }
}
function getI18nInstance(instance) {
  {
    const i18n = inject(!instance.isCE ? instance.appContext.app.__VUE_I18N_SYMBOL__ : I18nInjectionKey);
    if (!i18n) {
      throw createI18nError(!instance.isCE ? I18nErrorCodes.UNEXPECTED_ERROR : I18nErrorCodes.NOT_INSTALLED_WITH_PROVIDE);
    }
    return i18n;
  }
}
function getScope(options, componentOptions) {
  return isEmptyObject(options) ? "__i18n" in componentOptions ? "local" : "global" : !options.useScope ? "local" : options.useScope;
}
function getGlobalComposer(i18n) {
  return i18n.mode === "composition" ? i18n.global : i18n.global.__composer;
}
function getComposer(i18n, target, useComponent = false) {
  let composer = null;
  const root = target.root;
  let current = getParentComponentInstance(target, useComponent);
  while (current != null) {
    const i18nInternal = i18n;
    if (i18n.mode === "composition") {
      composer = i18nInternal.__getInstance(current);
    }
    if (composer != null) {
      break;
    }
    if (root === current) {
      break;
    }
    current = current.parent;
  }
  return composer;
}
function getParentComponentInstance(target, useComponent = false) {
  if (target == null) {
    return null;
  }
  {
    return !useComponent ? target.parent : target.vnode.ctx || target.parent;
  }
}
function setupLifeCycle(i18n, target, composer) {
  let emitter = null;
  {
    onMounted(() => {
      if (target.vnode.el) {
        target.vnode.el.__VUE_I18N__ = composer;
        emitter = createEmitter();
        const _composer = composer;
        _composer[EnableEmitter] && _composer[EnableEmitter](emitter);
        emitter.on("*", addTimelineEvent);
      }
    }, target);
    onUnmounted(() => {
      const _composer = composer;
      if (target.vnode.el && target.vnode.el.__VUE_I18N__) {
        emitter && emitter.off("*", addTimelineEvent);
        _composer[DisableEmitter] && _composer[DisableEmitter]();
        delete target.vnode.el.__VUE_I18N__;
      }
      i18n.__deleteInstance(target);
      const dispose = _composer[DisposeSymbol];
      if (dispose) {
        dispose();
        delete _composer[DisposeSymbol];
      }
    }, target);
  }
}
const globalExportProps = [
  "locale",
  "fallbackLocale",
  "availableLocales"
];
const globalExportMethods = ["t", "rt", "d", "n", "tm", "te"];
function injectGlobalFields(app, composer) {
  const i18n = /* @__PURE__ */ Object.create(null);
  globalExportProps.forEach((prop) => {
    const desc = Object.getOwnPropertyDescriptor(composer, prop);
    if (!desc) {
      throw createI18nError(I18nErrorCodes.UNEXPECTED_ERROR);
    }
    const wrap2 = isRef(desc.value) ? {
      get() {
        return desc.value.value;
      },
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      set(val) {
        desc.value.value = val;
      }
    } : {
      get() {
        return desc.get && desc.get();
      }
    };
    Object.defineProperty(i18n, prop, wrap2);
  });
  app.config.globalProperties.$i18n = i18n;
  globalExportMethods.forEach((method) => {
    const desc = Object.getOwnPropertyDescriptor(composer, method);
    if (!desc || !desc.value) {
      throw createI18nError(I18nErrorCodes.UNEXPECTED_ERROR);
    }
    Object.defineProperty(app.config.globalProperties, `$${method}`, desc);
  });
  const dispose = () => {
    delete app.config.globalProperties.$i18n;
    globalExportMethods.forEach((method) => {
      delete app.config.globalProperties[`$${method}`];
    });
  };
  return dispose;
}
{
  initFeatureFlags();
}
registerMessageResolver(resolveValue);
registerLocaleFallbacker(fallbackWithLocaleChain);
{
  const target = getGlobalThis();
  target.__INTLIFY__ = true;
  setDevToolsHook(target.__INTLIFY_DEVTOOLS_GLOBAL_HOOK__);
}
function computedWithControl(source, fn2) {
  let v2 = void 0;
  let track2;
  let trigger2;
  const dirty = ref(true);
  const update = () => {
    dirty.value = true;
    trigger2();
  };
  watch(source, update, { flush: "sync" });
  const get2 = typeof fn2 === "function" ? fn2 : fn2.get;
  const set2 = typeof fn2 === "function" ? void 0 : fn2.set;
  const result = customRef((_track, _trigger) => {
    track2 = _track;
    trigger2 = _trigger;
    return {
      get() {
        if (dirty.value) {
          v2 = get2();
          dirty.value = false;
        }
        track2();
        return v2;
      },
      set(v22) {
        set2 == null ? void 0 : set2(v22);
      }
    };
  });
  if (Object.isExtensible(result))
    result.trigger = update;
  return result;
}
function tryOnScopeDispose(fn2) {
  if (getCurrentScope()) {
    onScopeDispose(fn2);
    return true;
  }
  return false;
}
function toValue(r2) {
  return typeof r2 === "function" ? r2() : unref(r2);
}
const isClient = typeof window !== "undefined" && typeof document !== "undefined";
typeof WorkerGlobalScope !== "undefined" && globalThis instanceof WorkerGlobalScope;
const toString = Object.prototype.toString;
const isObject = (val) => toString.call(val) === "[object Object]";
const noop = () => {
};
function createFilterWrapper(filter, fn2) {
  function wrapper(...args) {
    return new Promise((resolve2, reject) => {
      Promise.resolve(filter(() => fn2.apply(this, args), { fn: fn2, thisArg: this, args })).then(resolve2).catch(reject);
    });
  }
  return wrapper;
}
function debounceFilter(ms2, options = {}) {
  let timer;
  let maxTimer;
  let lastRejector = noop;
  const _clearTimeout = (timer2) => {
    clearTimeout(timer2);
    lastRejector();
    lastRejector = noop;
  };
  const filter = (invoke2) => {
    const duration = toValue(ms2);
    const maxDuration = toValue(options.maxWait);
    if (timer)
      _clearTimeout(timer);
    if (duration <= 0 || maxDuration !== void 0 && maxDuration <= 0) {
      if (maxTimer) {
        _clearTimeout(maxTimer);
        maxTimer = null;
      }
      return Promise.resolve(invoke2());
    }
    return new Promise((resolve2, reject) => {
      lastRejector = options.rejectOnCancel ? reject : resolve2;
      if (maxDuration && !maxTimer) {
        maxTimer = setTimeout(() => {
          if (timer)
            _clearTimeout(timer);
          maxTimer = null;
          resolve2(invoke2());
        }, maxDuration);
      }
      timer = setTimeout(() => {
        if (maxTimer)
          _clearTimeout(maxTimer);
        maxTimer = null;
        resolve2(invoke2());
      }, duration);
    });
  };
  return filter;
}
function useDebounceFn(fn2, ms2 = 200, options = {}) {
  return createFilterWrapper(
    debounceFilter(ms2, options),
    fn2
  );
}
function refDebounced(value, ms2 = 200, options = {}) {
  const debounced = ref(value.value);
  const updater = useDebounceFn(() => {
    debounced.value = value.value;
  }, ms2, options);
  watch(value, () => updater());
  return debounced;
}
const _queue = /* @__PURE__ */ new WeakMap();
function useRouteQuery(name, defaultValue, options = {}) {
  const {
    mode = "replace",
    route = useRoute(),
    router: router2 = useRouter(),
    transform = (value) => value
  } = options;
  if (!_queue.has(router2))
    _queue.set(router2, /* @__PURE__ */ new Map());
  const _queriesQueue = _queue.get(router2);
  let query = route.query[name];
  tryOnScopeDispose(() => {
    query = void 0;
  });
  let _trigger;
  const proxy = customRef((track2, trigger2) => {
    _trigger = trigger2;
    return {
      get() {
        track2();
        return transform(query !== void 0 ? query : toValue(defaultValue));
      },
      set(v2) {
        if (query === v2)
          return;
        query = v2;
        _queriesQueue.set(name, v2);
        trigger2();
        nextTick(() => {
          if (_queriesQueue.size === 0)
            return;
          const newQueries = Object.fromEntries(_queriesQueue.entries());
          _queriesQueue.clear();
          const { params, query: query2, hash: hash2 } = route;
          router2[toValue(mode)]({
            params,
            query: { ...query2, ...newQueries },
            hash: hash2
          });
        });
      }
    };
  });
  watch(
    () => route.query[name],
    (v2) => {
      query = v2;
      _trigger();
    },
    { flush: "sync" }
  );
  return proxy;
}
var me = Object.defineProperty;
var pe = (s5, t3, e3) => t3 in s5 ? me(s5, t3, { enumerable: true, configurable: true, writable: true, value: e3 }) : s5[t3] = e3;
var y = (s5, t3, e3) => (pe(s5, typeof t3 != "symbol" ? t3 + "" : t3, e3), e3);
let Z = 1;
class xe {
  constructor() {
    y(this, "subscribers");
    y(this, "toasts");
    y(this, "subscribe", (t3) => (this.subscribers.push(t3), () => {
      const e3 = this.subscribers.indexOf(t3);
      this.subscribers.splice(e3, 1);
    }));
    y(this, "publish", (t3) => {
      this.subscribers.forEach((e3) => e3(t3));
    });
    y(this, "addToast", (t3) => {
      this.publish(t3), this.toasts = [...this.toasts, t3];
    });
    y(this, "create", (t3) => {
      var p2;
      const { message: e3, ...i3 } = t3, u3 = typeof (t3 == null ? void 0 : t3.id) == "number" || ((p2 = t3.id) == null ? void 0 : p2.length) > 0 ? t3.id : Z++, m4 = this.toasts.findIndex((v2) => v2.id === u3), d4 = t3.dismissible === void 0 ? true : t3.dismissible;
      return m4 !== -1 ? this.toasts = this.toasts.map((v2) => v2.id === u3 ? (this.publish({ ...v2, ...t3, id: u3, title: e3 }), {
        ...v2,
        ...t3,
        id: u3,
        dismissible: d4,
        title: e3
      }) : v2) : this.addToast({ title: e3, ...i3, dismissible: d4, id: u3 }), u3;
    });
    y(this, "dismiss", (t3) => (t3 || this.toasts.forEach((e3) => {
      this.subscribers.forEach(
        (i3) => i3({ id: e3.id, dismiss: true })
      );
    }), this.subscribers.forEach((e3) => e3({ id: t3, dismiss: true })), t3));
    y(this, "message", (t3, e3) => this.create({ ...e3, message: t3 }));
    y(this, "error", (t3, e3) => this.create({ ...e3, type: "error", message: t3 }));
    y(this, "success", (t3, e3) => this.create({ ...e3, type: "success", message: t3 }));
    y(this, "info", (t3, e3) => this.create({ ...e3, type: "info", message: t3 }));
    y(this, "warning", (t3, e3) => this.create({ ...e3, type: "warning", message: t3 }));
    y(this, "loading", (t3, e3) => this.create({ ...e3, type: "loading", message: t3 }));
    y(this, "promise", (t3, e3) => {
      if (!e3)
        return;
      let i3;
      e3.loading !== void 0 && (i3 = this.create({
        ...e3,
        promise: t3,
        type: "loading",
        message: e3.loading
      }));
      const u3 = t3 instanceof Promise ? t3 : t3();
      let m4 = i3 !== void 0;
      return u3.then((d4) => {
        if (e3.success !== void 0) {
          m4 = false;
          const p2 = typeof e3.success == "function" ? e3.success(d4) : e3.success;
          this.create({ id: i3, type: "success", message: p2 });
        }
      }).catch((d4) => {
        if (e3.error !== void 0) {
          m4 = false;
          const p2 = typeof e3.error == "function" ? e3.error(d4) : e3.error;
          this.create({ id: i3, type: "error", message: p2 });
        }
      }).finally(() => {
        var d4;
        m4 && (this.dismiss(i3), i3 = void 0), (d4 = e3.finally) == null || d4.call(e3);
      }), i3;
    });
    y(this, "custom", (t3, e3) => {
      const i3 = (e3 == null ? void 0 : e3.id) || Z++;
      return this.publish({ ...e3, id: i3, title: t3 }), i3;
    });
    this.subscribers = [], this.toasts = [];
  }
}
const T = new xe(), ke = (s5, t3) => {
  const e3 = (t3 == null ? void 0 : t3.id) || Z++;
  return T.publish({
    title: s5,
    ...t3,
    id: e3
  }), e3;
}, $e = ke, $t = Object.assign($e, {
  success: T.success,
  info: T.info,
  warning: T.warning,
  error: T.error,
  custom: T.custom,
  message: T.message,
  promise: T.promise,
  dismiss: T.dismiss,
  loading: T.loading
}), Be = ["data-visible"], Ce = { className: "sonner-spinner" }, _e = /* @__PURE__ */ defineComponent({
  __name: "Loader",
  props: {
    visible: Boolean
  },
  setup(s5) {
    const t3 = Array(12).fill(0);
    return (e3, i3) => (openBlock(), createElementBlock("div", {
      className: "sonner-loading-wrapper",
      "data-visible": s5.visible
    }, [
      createBaseVNode("div", Ce, [
        (openBlock(true), createElementBlock(Fragment, null, renderList(unref(t3), (u3) => (openBlock(), createElementBlock("div", {
          key: `spinner-bar-${u3}`,
          className: "sonner-loading-bar"
        }))), 128))
      ])
    ], 8, Be));
  }
}), H = (s5, t3) => {
  const e3 = s5.__vccOpts || s5;
  for (const [i3, u3] of t3)
    e3[i3] = u3;
  return e3;
}, Ee = {}, Ie = {
  xmlns: "http://www.w3.org/2000/svg",
  viewBox: "0 0 20 20",
  fill: "currentColor",
  height: "20",
  width: "20"
}, Ne = /* @__PURE__ */ createBaseVNode("path", {
  "fill-rule": "evenodd",
  d: "M10 18a8 8 0 100-16 8 8 0 000 16zm3.857-9.809a.75.75 0 00-1.214-.882l-3.483 4.79-1.88-1.88a.75.75 0 10-1.06 1.061l2.5 2.5a.75.75 0 001.137-.089l4-5.5z",
  "clip-rule": "evenodd"
}, null, -1), Oe = [
  Ne
];
function Se(s5, t3) {
  return openBlock(), createElementBlock("svg", Ie, Oe);
}
const Me = /* @__PURE__ */ H(Ee, [["render", Se]]), Pe = {}, Ae = {
  xmlns: "http://www.w3.org/2000/svg",
  viewBox: "0 0 20 20",
  fill: "currentColor",
  height: "20",
  width: "20"
}, De = /* @__PURE__ */ createBaseVNode("path", {
  "fill-rule": "evenodd",
  d: "M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7-4a1 1 0 11-2 0 1 1 0 012 0zM9 9a.75.75 0 000 1.5h.253a.25.25 0 01.244.304l-.459 2.066A1.75 1.75 0 0010.747 15H11a.75.75 0 000-1.5h-.253a.25.25 0 01-.244-.304l.459-2.066A1.75 1.75 0 009.253 9H9z",
  "clip-rule": "evenodd"
}, null, -1), Re = [
  De
];
function ze(s5, t3) {
  return openBlock(), createElementBlock("svg", Ae, Re);
}
const qe = /* @__PURE__ */ H(Pe, [["render", ze]]), He = {}, Le = {
  xmlns: "http://www.w3.org/2000/svg",
  viewBox: "0 0 24 24",
  fill: "currentColor",
  height: "20",
  width: "20"
}, Ve = /* @__PURE__ */ createBaseVNode("path", {
  "fill-rule": "evenodd",
  d: "M9.401 3.003c1.155-2 4.043-2 5.197 0l7.355 12.748c1.154 2-.29 4.5-2.599 4.5H4.645c-2.309 0-3.752-2.5-2.598-4.5L9.4 3.003zM12 8.25a.75.75 0 01.75.75v3.75a.75.75 0 01-1.5 0V9a.75.75 0 01.75-.75zm0 8.25a.75.75 0 100-1.5.75.75 0 000 1.5z",
  "clip-rule": "evenodd"
}, null, -1), Fe = [
  Ve
];
function Ue(s5, t3) {
  return openBlock(), createElementBlock("svg", Le, Fe);
}
const je = /* @__PURE__ */ H(He, [["render", Ue]]), Ke = {}, We = {
  xmlns: "http://www.w3.org/2000/svg",
  viewBox: "0 0 20 20",
  fill: "currentColor",
  height: "20",
  width: "20"
}, Ye = /* @__PURE__ */ createBaseVNode("path", {
  "fill-rule": "evenodd",
  d: "M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-8-5a.75.75 0 01.75.75v4.5a.75.75 0 01-1.5 0v-4.5A.75.75 0 0110 5zm0 10a1 1 0 100-2 1 1 0 000 2z",
  "clip-rule": "evenodd"
}, null, -1), Ge = [
  Ye
];
function Je(s5, t3) {
  return openBlock(), createElementBlock("svg", We, Ge);
}
const Qe = /* @__PURE__ */ H(Ke, [["render", Je]]), Xe = {}, Ze = {
  xmlns: "http://www.w3.org/2000/svg",
  width: "12",
  height: "12",
  viewBox: "0 0 24 24",
  fill: "none",
  stroke: "currentColor",
  "stoke-width": "1.5",
  "stroke-linecap": "round",
  "stroke-linejoin": "round"
}, et = /* @__PURE__ */ createBaseVNode("line", {
  x1: "18",
  y1: "6",
  x2: "6",
  y2: "18"
}, null, -1), tt = /* @__PURE__ */ createBaseVNode("line", {
  x1: "6",
  y1: "6",
  x2: "18",
  y2: "18"
}, null, -1), st = [
  et,
  tt
];
function ot(s5, t3) {
  return openBlock(), createElementBlock("svg", Ze, st);
}
const it = /* @__PURE__ */ H(Xe, [["render", ot]]), nt = ["aria-live", "data-styled", "data-mounted", "data-promise", "data-removed", "data-visible", "data-y-position", "data-x-position", "data-index", "data-front", "data-swiping", "data-type", "data-invert", "data-swipe-out", "data-expanded"], at = ["data-disabled"], rt = {
  key: 1,
  "data-icon": ""
}, lt = { "data-content": "" }, ut = { "data-title": "" }, ct = 4e3, dt = 14, vt = 20, ft = 200, ht = /* @__PURE__ */ defineComponent({
  __name: "Toast",
  props: {
    toast: {
      type: Object,
      required: true
    },
    toasts: {
      type: Array,
      required: true
    },
    index: {
      type: Number,
      required: true
    },
    expanded: {
      type: Boolean,
      required: true
    },
    invert: {
      type: Boolean,
      required: true
    },
    heights: {
      type: Array,
      required: true
    },
    position: {
      type: String,
      required: true
    },
    visibleToasts: {
      type: Number,
      required: true
    },
    expandByDefault: {
      type: Boolean,
      required: true
    },
    closeButton: {
      type: Boolean,
      required: true
    },
    interacting: {
      type: Boolean,
      required: true
    },
    duration: {
      type: Number,
      required: false
    },
    descriptionClass: {
      type: String,
      required: false
    }
  },
  emits: ["update:heights", "removeToast"],
  setup(s5, { emit: t3 }) {
    const e3 = s5, i3 = (a4) => !!a4.promise, u3 = ref(false), m4 = ref(false), d4 = ref(false), p2 = ref(false), v2 = ref(null), B3 = ref(0), L3 = ref(0), V3 = ref(null), x3 = ref(null), o2 = computed(() => e3.index === 0), n2 = computed(() => e3.index + 1 <= e3.visibleToasts), f2 = computed(() => e3.toast.type), b4 = computed(() => e3.toast.dismissible), S4 = e3.toast.className || "", _2 = e3.toast.descriptionClassName || "", E3 = e3.toast.style || {}, P2 = computed(
      () => e3.heights.findIndex((a4) => a4.toastId === e3.toast.id) || 0
    ), F2 = computed(
      () => e3.toast.duration || e3.duration || ct
    ), A2 = ref(0), D3 = ref(0), W2 = ref(F2.value), te2 = ref(0), U2 = ref(null), Y3 = computed(() => e3.position.split("-")), le2 = computed(() => e3.heights.reduce((a4, r2, g2) => g2 >= P2.value ? a4 : a4 + r2.height, 0)), ue3 = computed(() => e3.toast.invert || e3.invert), G3 = computed(() => v2.value === "loading"), j2 = computed(
      () => v2.value ?? (e3.toast.type || null)
    ), J3 = computed(() => !i3(e3.toast) && typeof e3.toast.title == "object"), ce2 = computed(() => {
      if (!i3(e3.toast))
        return null;
      switch (v2.value) {
        case "loading":
          return e3.toast.loading;
        case "success":
          return typeof e3.toast.success == "function" ? V3.value : e3.toast.success;
        case "error":
          return typeof e3.toast.error == "function" ? V3.value : e3.toast.error;
        default:
          return null;
      }
    });
    onMounted(() => u3.value = true), watchEffect(() => {
      D3.value = P2.value * dt + le2.value;
    });
    function de2() {
      var a4, r2;
      (!G3.value || b4.value) && (I3(), (r2 = (a4 = e3.toast).onDismiss) == null || r2.call(a4, e3.toast));
    }
    function I3() {
      m4.value = true, B3.value = D3.value;
      const a4 = e3.heights.filter(
        (r2) => r2.toastId !== e3.toast.id
      );
      t3("update:heights", a4), setTimeout(() => {
        t3("removeToast", e3.toast);
      }, ft);
    }
    const ve2 = (a4) => {
      G3 || (B3.value = D3.value, a4.target.setPointerCapture(a4.pointerId), a4.target.tagName !== "BUTTON" && (d4.value = true, U2.value = a4.clientY));
    }, fe3 = (a4) => {
      var g2, N3, k3, R4;
      if (p2.value)
        return;
      const r2 = Number(
        ((g2 = x3.value) == null ? void 0 : g2.style.getPropertyValue("--swipe-amount").replace("px", "")) || 0
      );
      if (Math.abs(r2) >= vt) {
        B3.value = D3.value, (k3 = (N3 = e3.toast).onDismiss) == null || k3.call(N3, e3.toast), I3(), p2.value = true;
        return;
      }
      (R4 = x3.value) == null || R4.style.setProperty("--swipe-amount", "0px"), U2.value = null, d4.value = true;
    }, he2 = (a4) => {
      var N3, k3;
      if (!U2.value)
        return;
      const r2 = a4.clientY - U2.value;
      if (!(Y3.value[0] === "top" ? r2 < 0 : r2 > 0)) {
        (N3 = x3.value) == null || N3.style.setProperty("--swipe-amount", "0px");
        return;
      }
      (k3 = x3.value) == null || k3.style.setProperty("--swipe-amount", `${r2}px`);
    };
    return watchEffect((a4) => {
      if (e3.toast.promise && v2.value === "loading" || e3.toast.duration === 1 / 0)
        return;
      let r2;
      const g2 = () => {
        if (te2.value < A2.value) {
          const k3 = (/* @__PURE__ */ new Date()).getTime() - A2.value;
          W2.value = W2.value - k3;
        }
        te2.value = (/* @__PURE__ */ new Date()).getTime();
      }, N3 = () => {
        A2.value = (/* @__PURE__ */ new Date()).getTime(), r2 = setTimeout(() => {
          var k3, R4;
          (R4 = (k3 = e3.toast).onAutoClose) == null || R4.call(k3, e3.toast), I3();
        }, W2.value);
      };
      e3.expanded || e3.interacting ? g2() : N3(), a4(() => {
        clearTimeout(r2);
      });
    }), onMounted(() => {
      if (x3.value) {
        const a4 = x3.value.getBoundingClientRect().height;
        L3.value = a4;
        const r2 = [{ toastId: e3.toast.id, height: a4 }, ...e3.heights];
        t3("update:heights", r2);
      }
    }), onUnmounted(() => {
      if (x3.value) {
        const a4 = e3.heights.filter(
          (r2) => r2.toastId !== e3.toast.id
        );
        t3("update:heights", a4);
      }
    }), watchEffect(() => {
      e3.toast.delete && I3();
    }), (a4, r2) => (openBlock(), createElementBlock("li", {
      "aria-live": s5.toast.important ? "assertive" : "polite",
      "aria-atomic": "",
      role: "status",
      tabindex: "0",
      ref_key: "toastRef",
      ref: x3,
      "data-sonner-toast": "",
      class: normalizeClass(unref(S4)),
      "data-styled": !J3.value,
      "data-mounted": u3.value,
      "data-promise": !!s5.toast.promise,
      "data-removed": m4.value,
      "data-visible": n2.value,
      "data-y-position": Y3.value[0],
      "data-x-position": Y3.value[1],
      "data-index": e3.index,
      "data-front": o2.value,
      "data-swiping": d4.value,
      "data-type": v2.value !== "loading" && v2.value ? v2.value : f2.value,
      "data-invert": ue3.value,
      "data-swipe-out": p2.value,
      "data-expanded": !!(e3.expanded || e3.expandByDefault && u3.value),
      style: normalizeStyle({
        "--index": e3.index,
        "--toasts-before": e3.index,
        "--z-index": s5.toasts.length - e3.index,
        "--offset": `${m4.value ? B3.value : D3.value}px`,
        "--initial-height": e3.expandByDefault ? "auto" : `${L3.value}px`,
        ...unref(E3)
      }),
      onPointerdown: ve2,
      onPointerup: fe3,
      onPointermove: he2
    }, [
      e3.closeButton && !J3.value ? (openBlock(), createElementBlock("button", {
        key: 0,
        "aria-label": "Close toast",
        "data-close-button": "",
        "data-disabled": G3.value,
        onClick: de2
      }, [
        createVNode(it)
      ], 8, at)) : createCommentVNode("", true),
      f2.value || s5.toast.icon || s5.toast.promise ? (openBlock(), createElementBlock("div", rt, [
        typeof s5.toast.promise == "function" || f2.value === "loading" ? (openBlock(), createBlock(_e, {
          key: 0,
          visible: v2.value === "loading" || f2.value === "loading"
        }, null, 8, ["visible"])) : createCommentVNode("", true),
        j2.value === "success" ? (openBlock(), createBlock(Me, { key: 1 })) : j2.value === "info" ? (openBlock(), createBlock(qe, { key: 2 })) : j2.value === "warning" ? (openBlock(), createBlock(je, { key: 3 })) : j2.value === "error" ? (openBlock(), createBlock(Qe, { key: 4 })) : createCommentVNode("", true)
      ])) : createCommentVNode("", true),
      createBaseVNode("div", lt, [
        createBaseVNode("div", ut, [
          typeof s5.toast.title == "string" ? (openBlock(), createElementBlock(Fragment, { key: 0 }, [
            createTextVNode(toDisplayString$1(s5.toast.title), 1)
          ], 64)) : s5.toast.title === void 0 || s5.toast.title === null ? (openBlock(), createElementBlock(Fragment, { key: 1 }, [
            createTextVNode(toDisplayString$1(ce2.value), 1)
          ], 64)) : J3.value ? (openBlock(), createBlock(resolveDynamicComponent(s5.toast.title), {
            key: 2,
            onCloseToast: r2[0] || (r2[0] = () => {
              var g2;
              I3(), (g2 = s5.toast.cancel) != null && g2.onClick && s5.toast.cancel.onClick();
            })
          }, null, 32)) : createCommentVNode("", true)
        ]),
        s5.toast.description ? (openBlock(), createElementBlock("div", {
          key: 0,
          "data-description": "",
          class: normalizeClass(s5.descriptionClass + unref(_2))
        }, toDisplayString$1(s5.toast.description), 3)) : createCommentVNode("", true)
      ]),
      s5.toast.cancel ? (openBlock(), createElementBlock("button", {
        key: 2,
        "data-button": "",
        "data-cancel": "",
        onClick: r2[1] || (r2[1] = () => {
          var g2;
          I3(), (g2 = s5.toast.cancel) != null && g2.onClick && s5.toast.cancel.onClick();
        })
      }, toDisplayString$1(s5.toast.cancel.label), 1)) : createCommentVNode("", true),
      s5.toast.action ? (openBlock(), createElementBlock("button", {
        key: 3,
        "data-button": "",
        onClick: r2[2] || (r2[2] = () => {
          var g2;
          I3(), (g2 = s5.toast.action) == null || g2.onClick();
        })
      }, toDisplayString$1(s5.toast.action.label), 1)) : createCommentVNode("", true)
    ], 46, nt));
  }
});
const mt = ["aria-label"], pt = ["dir", "data-theme", "data-rich-colors", "data-y-position", "data-x-position"], gt = 3, ie = "32px", yt = 4e3, wt = 356, ne = 14, bt = /* @__PURE__ */ defineComponent({
  name: "Toaster",
  inheritAttrs: false,
  __name: "Toaster",
  props: {
    invert: { type: Boolean, default: false },
    theme: { default: "light" },
    position: { default: "bottom-right" },
    hotkey: { default: () => ["altKey", "KeyT"] },
    richColors: { type: Boolean, default: false },
    expand: { type: Boolean, default: false },
    duration: { default: yt },
    gap: { default: ne },
    visibleToasts: { default: gt },
    closeButton: { type: Boolean, default: false },
    toastOptions: { default: () => ({}) },
    className: { default: "" },
    style: { default: () => ({}) },
    offset: { default: ie },
    dir: { default: "auto" }
  },
  setup(s5) {
    const t3 = s5, e3 = useAttrs(), i3 = ref([]), u3 = ref([]), m4 = ref(false), d4 = ref(false), p2 = ref(
      t3.theme !== "system" ? t3.theme : typeof window < "u" && window.matchMedia && window.matchMedia("(prefers-color-scheme: dark)").matches ? "dark" : "light"
    ), v2 = computed(() => t3.position.split("-")), B3 = ref(null), L3 = t3.hotkey.join("+").replace(/Key/g, "").replace(/Digit/g, "");
    function V3(o2) {
      i3.value = i3.value.filter(({ id: n2 }) => n2 !== o2.id);
    }
    function x3() {
      if (typeof window > "u")
        return "ltr";
      const o2 = document.documentElement.getAttribute("dir");
      return o2 === "auto" || !o2 ? window.getComputedStyle(document.documentElement).direction : o2;
    }
    return onMounted(() => {
      const o2 = T.subscribe((n2) => {
        if (n2.dismiss) {
          i3.value = i3.value.map(
            (f2) => f2.id === n2.id ? { ...f2, delete: true } : f2
          );
          return;
        }
        nextTick(() => {
          const f2 = i3.value.findIndex((b4) => b4.id === n2.id);
          f2 !== -1 ? i3.value.splice(f2, 1, n2) : i3.value = [n2, ...i3.value];
        });
      });
      onUnmounted(() => {
        o2();
      });
    }), watch(
      () => t3.theme,
      (o2) => {
        if (o2 !== "system") {
          p2.value = o2;
          return;
        }
        o2 === "system" && (window.matchMedia && window.matchMedia("(prefers-color-scheme: dark)").matches ? p2.value = "dark" : p2.value = "light"), !(typeof window > "u") && window.matchMedia("(prefers-color-scheme: dark)").addEventListener("change", ({ matches: n2 }) => {
          n2 ? p2.value = "dark" : p2.value = "light";
        });
      }
    ), watchEffect(() => {
      i3.value.length <= 1 && (m4.value = false);
    }), watchEffect((o2) => {
      function n2(f2) {
        var S4, _2;
        t3.hotkey.every(
          (E3) => f2[E3] || f2.code === E3
        ) && (m4.value = true, (S4 = B3.value) == null || S4.focus()), f2.code === "Escape" && (document.activeElement === B3.value || (_2 = B3.value) != null && _2.contains(document.activeElement)) && (m4.value = false);
      }
      document.addEventListener("keydown", n2), o2(() => {
        document.removeEventListener("keydown", n2);
      });
    }), (o2, n2) => {
      var f2;
      return openBlock(), createElementBlock("section", {
        "aria-label": `Notifications ${unref(L3)}`,
        tabIndex: -1
      }, [
        createBaseVNode("ol", {
          ref_key: "listRef",
          ref: B3,
          "data-sonner-toaster": "",
          dir: o2.dir === "auto" ? x3() : o2.dir,
          tabIndex: -1,
          "data-theme": o2.theme,
          "data-rich-colors": o2.richColors,
          "data-y-position": v2.value[0],
          "data-x-position": v2.value[1],
          style: normalizeStyle(
            {
              "--front-toast-height": `${(f2 = u3.value[0]) == null ? void 0 : f2.height}px`,
              "--offset": typeof o2.offset == "number" ? `${o2.offset}px` : o2.offset || ie,
              "--width": `${wt}px`,
              "--gap": `${ne}px`,
              ...unref(e3).style
            }
          ),
          onMouseenter: n2[1] || (n2[1] = (b4) => m4.value = true),
          onMousemove: n2[2] || (n2[2] = (b4) => m4.value = true),
          onMouseleave: n2[3] || (n2[3] = () => {
            d4.value || (m4.value = false);
          }),
          onPointerdown: n2[4] || (n2[4] = (b4) => d4.value = false),
          onPointerup: n2[5] || (n2[5] = (b4) => d4.value = false)
        }, [
          (openBlock(true), createElementBlock(Fragment, null, renderList(i3.value, (b4, S4) => {
            var _2, E3, P2, F2;
            return openBlock(), createBlock(ht, {
              key: b4.id,
              index: S4,
              toast: b4,
              duration: ((_2 = o2.toastOptions) == null ? void 0 : _2.duration) ?? o2.duration,
              className: (E3 = o2.toastOptions) == null ? void 0 : E3.className,
              descriptionClassName: (P2 = o2.toastOptions) == null ? void 0 : P2.descriptionClassName,
              invert: o2.invert,
              visibleToasts: o2.visibleToasts,
              closeButton: o2.closeButton,
              interacting: d4.value,
              position: o2.position,
              style: normalizeStyle((F2 = o2.toastOptions) == null ? void 0 : F2.style),
              toasts: i3.value,
              expandByDefault: o2.expand,
              gap: o2.gap,
              expanded: m4.value,
              heights: u3.value,
              "onUpdate:heights": n2[0] || (n2[0] = (A2) => u3.value = A2),
              onRemoveToast: V3
            }, null, 8, ["index", "toast", "duration", "className", "descriptionClassName", "invert", "visibleToasts", "closeButton", "interacting", "position", "style", "toasts", "expandByDefault", "gap", "expanded", "heights"]);
          }), 128))
        ], 44, pt)
      ], 8, mt);
    };
  }
});
function unrefElement(elRef) {
  var _a2;
  const plain = toValue(elRef);
  return (_a2 = plain == null ? void 0 : plain.$el) != null ? _a2 : plain;
}
const defaultWindow = isClient ? window : void 0;
function useEventListener(...args) {
  let target;
  let events2;
  let listeners;
  let options;
  if (typeof args[0] === "string" || Array.isArray(args[0])) {
    [events2, listeners, options] = args;
    target = defaultWindow;
  } else {
    [target, events2, listeners, options] = args;
  }
  if (!target)
    return noop;
  if (!Array.isArray(events2))
    events2 = [events2];
  if (!Array.isArray(listeners))
    listeners = [listeners];
  const cleanups = [];
  const cleanup = () => {
    cleanups.forEach((fn2) => fn2());
    cleanups.length = 0;
  };
  const register = (el3, event, listener, options2) => {
    el3.addEventListener(event, listener, options2);
    return () => el3.removeEventListener(event, listener, options2);
  };
  const stopWatch = watch(
    () => [unrefElement(target), toValue(options)],
    ([el3, options2]) => {
      cleanup();
      if (!el3)
        return;
      const optionsClone = isObject(options2) ? { ...options2 } : options2;
      cleanups.push(
        ...events2.flatMap((event) => {
          return listeners.map((listener) => register(el3, event, listener, optionsClone));
        })
      );
    },
    { immediate: true, flush: "post" }
  );
  const stop = () => {
    stopWatch();
    cleanup();
  };
  tryOnScopeDispose(stop);
  return stop;
}
function createKeyPredicate(keyFilter) {
  if (typeof keyFilter === "function")
    return keyFilter;
  else if (typeof keyFilter === "string")
    return (event) => event.key === keyFilter;
  else if (Array.isArray(keyFilter))
    return (event) => keyFilter.includes(event.key);
  return () => true;
}
function onKeyStroke(...args) {
  let key;
  let handler;
  let options = {};
  if (args.length === 3) {
    key = args[0];
    handler = args[1];
    options = args[2];
  } else if (args.length === 2) {
    if (typeof args[1] === "object") {
      key = true;
      handler = args[0];
      options = args[1];
    } else {
      key = args[0];
      handler = args[1];
    }
  } else {
    key = true;
    handler = args[0];
  }
  const {
    target = defaultWindow,
    eventName = "keydown",
    passive = false,
    dedupe = false
  } = options;
  const predicate = createKeyPredicate(key);
  const listener = (e3) => {
    if (e3.repeat && toValue(dedupe))
      return;
    if (predicate(e3))
      handler(e3);
  };
  return useEventListener(target, eventName, listener, passive);
}
function onKeyDown(key, handler, options = {}) {
  return onKeyStroke(key, handler, { ...options, eventName: "keydown" });
}
function useActiveElement(options = {}) {
  var _a2;
  const {
    window: window2 = defaultWindow,
    deep = true
  } = options;
  const document2 = (_a2 = options.document) != null ? _a2 : window2 == null ? void 0 : window2.document;
  const getDeepActiveElement = () => {
    var _a22;
    let element = document2 == null ? void 0 : document2.activeElement;
    if (deep) {
      while (element == null ? void 0 : element.shadowRoot)
        element = (_a22 = element == null ? void 0 : element.shadowRoot) == null ? void 0 : _a22.activeElement;
    }
    return element;
  };
  const activeElement = computedWithControl(
    () => null,
    () => getDeepActiveElement()
  );
  if (window2) {
    useEventListener(window2, "blur", (event) => {
      if (event.relatedTarget !== null)
        return;
      activeElement.trigger();
    }, true);
    useEventListener(window2, "focus", activeElement.trigger, true);
  }
  return activeElement;
}
function useFocusWithin(target, options = {}) {
  const activeElement = useActiveElement(options);
  const targetElement = computed(() => unrefElement(target));
  const focused = computed(() => targetElement.value && activeElement.value ? targetElement.value.contains(activeElement.value) : false);
  return { focused };
}
function useSwipe(target, options = {}) {
  const {
    threshold = 50,
    onSwipe,
    onSwipeEnd,
    onSwipeStart,
    passive = true,
    window: window2 = defaultWindow
  } = options;
  const coordsStart = reactive({ x: 0, y: 0 });
  const coordsEnd = reactive({ x: 0, y: 0 });
  const diffX = computed(() => coordsStart.x - coordsEnd.x);
  const diffY = computed(() => coordsStart.y - coordsEnd.y);
  const { max: max2, abs } = Math;
  const isThresholdExceeded = computed(() => max2(abs(diffX.value), abs(diffY.value)) >= threshold);
  const isSwiping = ref(false);
  const direction = computed(() => {
    if (!isThresholdExceeded.value)
      return "none";
    if (abs(diffX.value) > abs(diffY.value)) {
      return diffX.value > 0 ? "left" : "right";
    } else {
      return diffY.value > 0 ? "up" : "down";
    }
  });
  const getTouchEventCoords = (e3) => [e3.touches[0].clientX, e3.touches[0].clientY];
  const updateCoordsStart = (x3, y4) => {
    coordsStart.x = x3;
    coordsStart.y = y4;
  };
  const updateCoordsEnd = (x3, y4) => {
    coordsEnd.x = x3;
    coordsEnd.y = y4;
  };
  let listenerOptions;
  const isPassiveEventSupported = checkPassiveEventSupport(window2 == null ? void 0 : window2.document);
  if (!passive)
    listenerOptions = isPassiveEventSupported ? { passive: false, capture: true } : { capture: true };
  else
    listenerOptions = isPassiveEventSupported ? { passive: true } : { capture: false };
  const onTouchEnd2 = (e3) => {
    if (isSwiping.value)
      onSwipeEnd == null ? void 0 : onSwipeEnd(e3, direction.value);
    isSwiping.value = false;
  };
  const stops = [
    useEventListener(target, "touchstart", (e3) => {
      if (e3.touches.length !== 1)
        return;
      if (listenerOptions.capture && !listenerOptions.passive)
        e3.preventDefault();
      const [x3, y4] = getTouchEventCoords(e3);
      updateCoordsStart(x3, y4);
      updateCoordsEnd(x3, y4);
      onSwipeStart == null ? void 0 : onSwipeStart(e3);
    }, listenerOptions),
    useEventListener(target, "touchmove", (e3) => {
      if (e3.touches.length !== 1)
        return;
      const [x3, y4] = getTouchEventCoords(e3);
      updateCoordsEnd(x3, y4);
      if (!isSwiping.value && isThresholdExceeded.value)
        isSwiping.value = true;
      if (isSwiping.value)
        onSwipe == null ? void 0 : onSwipe(e3);
    }, listenerOptions),
    useEventListener(target, ["touchend", "touchcancel"], onTouchEnd2, listenerOptions)
  ];
  const stop = () => stops.forEach((s5) => s5());
  return {
    isPassiveEventSupported,
    isSwiping,
    direction,
    coordsStart,
    coordsEnd,
    lengthX: diffX,
    lengthY: diffY,
    stop
  };
}
function checkPassiveEventSupport(document2) {
  if (!document2)
    return false;
  let supportsPassive2 = false;
  const optionsBlock = {
    get passive() {
      supportsPassive2 = true;
      return false;
    }
  };
  document2.addEventListener("x", noop, optionsBlock);
  document2.removeEventListener("x", noop);
  return supportsPassive2;
}
var define_process_env_default = {};
var commonjsGlobal$1 = typeof globalThis !== "undefined" ? globalThis : typeof {} !== "undefined" ? {} : typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : {};
var mainExports$1 = {};
var main$1 = {
  get exports() {
    return mainExports$1;
  },
  set exports(v2) {
    mainExports$1 = v2;
  }
};
(function(module2, exports) {
  !function(t3, n2) {
    module2.exports = n2();
  }(commonjsGlobal$1, () => {
    return t3 = { 770: function(t22, n22, e3) {
      var r2 = this && this.__importDefault || function(t32) {
        return t32 && t32.__esModule ? t32 : { default: t32 };
      };
      Object.defineProperty(n22, "__esModule", { value: true }), n22.setDefaultDebugCall = n22.createOnigScanner = n22.createOnigString = n22.loadWASM = n22.OnigScanner = n22.OnigString = void 0;
      const i3 = r2(e3(418));
      let o2 = null, a4 = false;
      class f2 {
        static _utf8ByteLength(t32) {
          let n3 = 0;
          for (let e22 = 0, r22 = t32.length; e22 < r22; e22++) {
            const i22 = t32.charCodeAt(e22);
            let o22 = i22, a22 = false;
            if (i22 >= 55296 && i22 <= 56319 && e22 + 1 < r22) {
              const n4 = t32.charCodeAt(e22 + 1);
              n4 >= 56320 && n4 <= 57343 && (o22 = 65536 + (i22 - 55296 << 10) | n4 - 56320, a22 = true);
            }
            n3 += o22 <= 127 ? 1 : o22 <= 2047 ? 2 : o22 <= 65535 ? 3 : 4, a22 && e22++;
          }
          return n3;
        }
        constructor(t32) {
          const n3 = t32.length, e22 = f2._utf8ByteLength(t32), r22 = e22 !== n3, i22 = r22 ? new Uint32Array(n3 + 1) : null;
          r22 && (i22[n3] = e22);
          const o22 = r22 ? new Uint32Array(e22 + 1) : null;
          r22 && (o22[e22] = n3);
          const a22 = new Uint8Array(e22);
          let s22 = 0;
          for (let e32 = 0; e32 < n3; e32++) {
            const f22 = t32.charCodeAt(e32);
            let u22 = f22, c22 = false;
            if (f22 >= 55296 && f22 <= 56319 && e32 + 1 < n3) {
              const n4 = t32.charCodeAt(e32 + 1);
              n4 >= 56320 && n4 <= 57343 && (u22 = 65536 + (f22 - 55296 << 10) | n4 - 56320, c22 = true);
            }
            r22 && (i22[e32] = s22, c22 && (i22[e32 + 1] = s22), u22 <= 127 ? o22[s22 + 0] = e32 : u22 <= 2047 ? (o22[s22 + 0] = e32, o22[s22 + 1] = e32) : u22 <= 65535 ? (o22[s22 + 0] = e32, o22[s22 + 1] = e32, o22[s22 + 2] = e32) : (o22[s22 + 0] = e32, o22[s22 + 1] = e32, o22[s22 + 2] = e32, o22[s22 + 3] = e32)), u22 <= 127 ? a22[s22++] = u22 : u22 <= 2047 ? (a22[s22++] = 192 | (1984 & u22) >>> 6, a22[s22++] = 128 | (63 & u22) >>> 0) : u22 <= 65535 ? (a22[s22++] = 224 | (61440 & u22) >>> 12, a22[s22++] = 128 | (4032 & u22) >>> 6, a22[s22++] = 128 | (63 & u22) >>> 0) : (a22[s22++] = 240 | (1835008 & u22) >>> 18, a22[s22++] = 128 | (258048 & u22) >>> 12, a22[s22++] = 128 | (4032 & u22) >>> 6, a22[s22++] = 128 | (63 & u22) >>> 0), c22 && e32++;
          }
          this.utf16Length = n3, this.utf8Length = e22, this.utf16Value = t32, this.utf8Value = a22, this.utf16OffsetToUtf8 = i22, this.utf8OffsetToUtf16 = o22;
        }
        createString(t32) {
          const n3 = t32._omalloc(this.utf8Length);
          return t32.HEAPU8.set(this.utf8Value, n3), n3;
        }
      }
      class s5 {
        constructor(t32) {
          if (this.id = ++s5.LAST_ID, !o2)
            throw new Error("Must invoke loadWASM first.");
          this._onigBinding = o2, this.content = t32;
          const n3 = new f2(t32);
          this.utf16Length = n3.utf16Length, this.utf8Length = n3.utf8Length, this.utf16OffsetToUtf8 = n3.utf16OffsetToUtf8, this.utf8OffsetToUtf16 = n3.utf8OffsetToUtf16, this.utf8Length < 1e4 && !s5._sharedPtrInUse ? (s5._sharedPtr || (s5._sharedPtr = o2._omalloc(1e4)), s5._sharedPtrInUse = true, o2.HEAPU8.set(n3.utf8Value, s5._sharedPtr), this.ptr = s5._sharedPtr) : this.ptr = n3.createString(o2);
        }
        convertUtf8OffsetToUtf16(t32) {
          return this.utf8OffsetToUtf16 ? t32 < 0 ? 0 : t32 > this.utf8Length ? this.utf16Length : this.utf8OffsetToUtf16[t32] : t32;
        }
        convertUtf16OffsetToUtf8(t32) {
          return this.utf16OffsetToUtf8 ? t32 < 0 ? 0 : t32 > this.utf16Length ? this.utf8Length : this.utf16OffsetToUtf8[t32] : t32;
        }
        dispose() {
          this.ptr === s5._sharedPtr ? s5._sharedPtrInUse = false : this._onigBinding._ofree(this.ptr);
        }
      }
      n22.OnigString = s5, s5.LAST_ID = 0, s5._sharedPtr = 0, s5._sharedPtrInUse = false;
      class u3 {
        constructor(t32) {
          if (!o2)
            throw new Error("Must invoke loadWASM first.");
          const n3 = [], e22 = [];
          for (let r3 = 0, i32 = t32.length; r3 < i32; r3++) {
            const i4 = new f2(t32[r3]);
            n3[r3] = i4.createString(o2), e22[r3] = i4.utf8Length;
          }
          const r22 = o2._omalloc(4 * t32.length);
          o2.HEAPU32.set(n3, r22 / 4);
          const i22 = o2._omalloc(4 * t32.length);
          o2.HEAPU32.set(e22, i22 / 4);
          const a22 = o2._createOnigScanner(r22, i22, t32.length);
          for (let e32 = 0, r3 = t32.length; e32 < r3; e32++)
            o2._ofree(n3[e32]);
          o2._ofree(i22), o2._ofree(r22), 0 === a22 && function(t4) {
            throw new Error(t4.UTF8ToString(t4._getLastOnigError()));
          }(o2), this._onigBinding = o2, this._ptr = a22;
        }
        dispose() {
          this._onigBinding._freeOnigScanner(this._ptr);
        }
        findNextMatchSync(t32, n3, e22) {
          let r22 = a4, i22 = 0;
          if ("number" == typeof e22 ? (8 & e22 && (r22 = true), i22 = e22) : "boolean" == typeof e22 && (r22 = e22), "string" == typeof t32) {
            t32 = new s5(t32);
            const e32 = this._findNextMatchSync(t32, n3, r22, i22);
            return t32.dispose(), e32;
          }
          return this._findNextMatchSync(t32, n3, r22, i22);
        }
        _findNextMatchSync(t32, n3, e22, r22) {
          const i22 = this._onigBinding;
          let o22;
          if (o22 = e22 ? i22._findNextOnigScannerMatchDbg(this._ptr, t32.id, t32.ptr, t32.utf8Length, t32.convertUtf16OffsetToUtf8(n3), r22) : i22._findNextOnigScannerMatch(this._ptr, t32.id, t32.ptr, t32.utf8Length, t32.convertUtf16OffsetToUtf8(n3), r22), 0 === o22)
            return null;
          const a22 = i22.HEAPU32;
          let f22 = o22 / 4;
          const s22 = a22[f22++], u22 = a22[f22++];
          let c22 = [];
          for (let n4 = 0; n4 < u22; n4++) {
            const e32 = t32.convertUtf8OffsetToUtf16(a22[f22++]), r3 = t32.convertUtf8OffsetToUtf16(a22[f22++]);
            c22[n4] = { start: e32, end: r3, length: r3 - e32 };
          }
          return { index: s22, captureIndices: c22 };
        }
      }
      n22.OnigScanner = u3;
      let c3 = false, l2 = null;
      n22.loadWASM = function(t32) {
        if (c3)
          return l2;
        let n3, e22, r22, a22;
        if (c3 = true, function(t4) {
          return "function" == typeof t4.instantiator;
        }(t32))
          n3 = t32.instantiator, e22 = t32.print;
        else {
          let r3;
          !function(t4) {
            return void 0 !== t4.data;
          }(t32) ? r3 = t32 : (r3 = t32.data, e22 = t32.print), n3 = function(t4) {
            return "undefined" != typeof Response && t4 instanceof Response;
          }(r3) ? "function" == typeof WebAssembly.instantiateStreaming ? /* @__PURE__ */ function(t4) {
            return (n4) => WebAssembly.instantiateStreaming(t4, n4);
          }(r3) : /* @__PURE__ */ function(t4) {
            return async (n4) => {
              const e32 = await t4.arrayBuffer();
              return WebAssembly.instantiate(e32, n4);
            };
          }(r3) : /* @__PURE__ */ function(t4) {
            return (n4) => WebAssembly.instantiate(t4, n4);
          }(r3);
        }
        return l2 = new Promise((t4, n4) => {
          r22 = t4, a22 = n4;
        }), function(t4, n4, e32, r3) {
          (0, i3.default)({ print: n4, instantiateWasm: (n5, e4) => {
            if ("undefined" == typeof performance) {
              const t5 = () => Date.now();
              n5.env.emscripten_get_now = t5, n5.wasi_snapshot_preview1.emscripten_get_now = t5;
            }
            return t4(n5).then((t5) => e4(t5.instance), r3), {};
          } }).then((t5) => {
            o2 = t5, e32();
          });
        }(n3, e22, r22, a22), l2;
      }, n22.createOnigString = function(t32) {
        return new s5(t32);
      }, n22.createOnigScanner = function(t32) {
        return new u3(t32);
      }, n22.setDefaultDebugCall = function(t32) {
        a4 = t32;
      };
    }, 418: (t22) => {
      var n22 = ("undefined" != typeof document && document.currentScript && document.currentScript.src, function(t32) {
        var n3, e3, r2 = void 0 !== (t32 = t32 || {}) ? t32 : {};
        r2.ready = new Promise(function(t4, r22) {
          n3 = t4, e3 = r22;
        });
        var i3, o2 = Object.assign({}, r2), s5 = false, c3 = "";
        function l2(t4) {
          return r2.locateFile ? r2.locateFile(t4, c3) : c3 + t4;
        }
        i3 = function(t4) {
          let n4;
          return "function" == typeof readbuffer ? new Uint8Array(readbuffer(t4)) : (n4 = read(t4, "binary"), m4("object" == typeof n4), n4);
        }, "undefined" != typeof scriptArgs ? scriptArgs : void 0 !== arguments && arguments, "undefined" != typeof onig_print && ("undefined" == typeof console && (console = {}), console.log = onig_print, console.warn = console.error = "undefined" != typeof printErr ? printErr : onig_print);
        var h4, p2, d4 = r2.print || console.log.bind(console), g2 = r2.printErr || console.warn.bind(console);
        Object.assign(r2, o2), o2 = null, r2.arguments && r2.arguments, r2.thisProgram && r2.thisProgram, r2.quit && r2.quit, r2.wasmBinary && (h4 = r2.wasmBinary), r2.noExitRuntime, "object" != typeof WebAssembly && k3("no native wasm support detected");
        var _2 = false;
        function m4(t4, n4) {
          t4 || k3(n4);
        }
        var y4, w3, S4, v2 = "undefined" != typeof TextDecoder ? new TextDecoder("utf8") : void 0;
        function A2(t4, n4, e22) {
          for (var r22 = n4 + e22, i22 = n4; t4[i22] && !(i22 >= r22); )
            ++i22;
          if (i22 - n4 > 16 && t4.buffer && v2)
            return v2.decode(t4.subarray(n4, i22));
          for (var o22 = ""; n4 < i22; ) {
            var a4 = t4[n4++];
            if (128 & a4) {
              var f2 = 63 & t4[n4++];
              if (192 != (224 & a4)) {
                var s22 = 63 & t4[n4++];
                if ((a4 = 224 == (240 & a4) ? (15 & a4) << 12 | f2 << 6 | s22 : (7 & a4) << 18 | f2 << 12 | s22 << 6 | 63 & t4[n4++]) < 65536)
                  o22 += String.fromCharCode(a4);
                else {
                  var u3 = a4 - 65536;
                  o22 += String.fromCharCode(55296 | u3 >> 10, 56320 | 1023 & u3);
                }
              } else
                o22 += String.fromCharCode((31 & a4) << 6 | f2);
            } else
              o22 += String.fromCharCode(a4);
          }
          return o22;
        }
        function b4(t4, n4) {
          return t4 ? A2(w3, t4, n4) : "";
        }
        function O4(t4) {
          y4 = t4, r2.HEAP8 = new Int8Array(t4), r2.HEAP16 = new Int16Array(t4), r2.HEAP32 = new Int32Array(t4), r2.HEAPU8 = w3 = new Uint8Array(t4), r2.HEAPU16 = new Uint16Array(t4), r2.HEAPU32 = S4 = new Uint32Array(t4), r2.HEAPF32 = new Float32Array(t4), r2.HEAPF64 = new Float64Array(t4);
        }
        r2.INITIAL_MEMORY;
        var U2 = [], P2 = [], R4 = [];
        function x3() {
          if (r2.preRun)
            for ("function" == typeof r2.preRun && (r2.preRun = [r2.preRun]); r2.preRun.length; )
              M4(r2.preRun.shift());
          G3(U2);
        }
        function T4() {
          G3(P2);
        }
        function E3() {
          if (r2.postRun)
            for ("function" == typeof r2.postRun && (r2.postRun = [r2.postRun]); r2.postRun.length; )
              I3(r2.postRun.shift());
          G3(R4);
        }
        function M4(t4) {
          U2.unshift(t4);
        }
        function L3(t4) {
          P2.unshift(t4);
        }
        function I3(t4) {
          R4.unshift(t4);
        }
        var W2 = 0, C2 = null;
        function N3(t4) {
          W2++, r2.monitorRunDependencies && r2.monitorRunDependencies(W2);
        }
        function j2(t4) {
          if (W2--, r2.monitorRunDependencies && r2.monitorRunDependencies(W2), 0 == W2 && C2) {
            var n4 = C2;
            C2 = null, n4();
          }
        }
        function k3(t4) {
          r2.onAbort && r2.onAbort(t4), g2(t4 = "Aborted(" + t4 + ")"), _2 = true, t4 += ". Build with -sASSERTIONS for more info.";
          var n4 = new WebAssembly.RuntimeError(t4);
          throw e3(n4), n4;
        }
        var B3, H5, F2 = "data:application/octet-stream;base64,";
        function V3(t4) {
          return t4.startsWith(F2);
        }
        function z4(t4) {
          try {
            if (t4 == B3 && h4)
              return new Uint8Array(h4);
            if (i3)
              return i3(t4);
            throw "both async and sync fetching of the wasm failed";
          } catch (t5) {
            k3(t5);
          }
        }
        function q3() {
          return h4 || !s5 || "function" != typeof fetch ? Promise.resolve().then(function() {
            return z4(B3);
          }) : fetch(B3, { credentials: "same-origin" }).then(function(t4) {
            if (!t4.ok)
              throw "failed to load wasm binary file at '" + B3 + "'";
            return t4.arrayBuffer();
          }).catch(function() {
            return z4(B3);
          });
        }
        function Y3() {
          var t4 = { env: nt2, wasi_snapshot_preview1: nt2 };
          function n4(t5, n5) {
            var e22 = t5.exports;
            r2.asm = e22, O4((p2 = r2.asm.memory).buffer), r2.asm.__indirect_function_table, L3(r2.asm.__wasm_call_ctors), j2();
          }
          function i22(t5) {
            n4(t5.instance);
          }
          function o22(n5) {
            return q3().then(function(n6) {
              return WebAssembly.instantiate(n6, t4);
            }).then(function(t5) {
              return t5;
            }).then(n5, function(t5) {
              g2("failed to asynchronously prepare wasm: " + t5), k3(t5);
            });
          }
          if (N3(), r2.instantiateWasm)
            try {
              return r2.instantiateWasm(t4, n4);
            } catch (t5) {
              g2("Module.instantiateWasm callback failed with error: " + t5), e3(t5);
            }
          return (h4 || "function" != typeof WebAssembly.instantiateStreaming || V3(B3) || "function" != typeof fetch ? o22(i22) : fetch(B3, { credentials: "same-origin" }).then(function(n5) {
            return WebAssembly.instantiateStreaming(n5, t4).then(i22, function(t5) {
              return g2("wasm streaming compile failed: " + t5), g2("falling back to ArrayBuffer instantiation"), o22(i22);
            });
          })).catch(e3), {};
        }
        function G3(t4) {
          for (; t4.length > 0; )
            t4.shift()(r2);
        }
        function J3(t4, n4, e22) {
          w3.copyWithin(t4, n4, n4 + e22);
        }
        function K3(t4) {
          try {
            return p2.grow(t4 - y4.byteLength + 65535 >>> 16), O4(p2.buffer), 1;
          } catch (t5) {
          }
        }
        function Q3(t4) {
          var n4, e22 = w3.length, r22 = 2147483648;
          if ((t4 >>>= 0) > r22)
            return false;
          for (var i22 = 1; i22 <= 4; i22 *= 2) {
            var o22 = e22 * (1 + 0.2 / i22);
            if (o22 = Math.min(o22, t4 + 100663296), K3(Math.min(r22, (n4 = Math.max(t4, o22)) + (65536 - n4 % 65536) % 65536)))
              return true;
          }
          return false;
        }
        V3(B3 = "onig.wasm") || (B3 = l2(B3)), H5 = "undefined" != typeof dateNow ? dateNow : () => performance.now();
        var X4 = [null, [], []];
        function Z3(t4, n4) {
          var e22 = X4[t4];
          0 === n4 || 10 === n4 ? ((1 === t4 ? d4 : g2)(A2(e22, 0)), e22.length = 0) : e22.push(n4);
        }
        function $3(t4, n4, e22, r22) {
          for (var i22 = 0, o22 = 0; o22 < e22; o22++) {
            var a4 = S4[n4 >> 2], f2 = S4[n4 + 4 >> 2];
            n4 += 8;
            for (var s22 = 0; s22 < f2; s22++)
              Z3(t4, w3[a4 + s22]);
            i22 += f2;
          }
          return S4[r22 >> 2] = i22, 0;
        }
        var tt2, nt2 = { emscripten_get_now: H5, emscripten_memcpy_big: J3, emscripten_resize_heap: Q3, fd_write: $3 };
        function et2(t4) {
          function e22() {
            tt2 || (tt2 = true, r2.calledRun = true, _2 || (T4(), n3(r2), r2.onRuntimeInitialized && r2.onRuntimeInitialized(), E3()));
          }
          W2 > 0 || (x3(), W2 > 0 || (r2.setStatus ? (r2.setStatus("Running..."), setTimeout(function() {
            setTimeout(function() {
              r2.setStatus("");
            }, 1), e22();
          }, 1)) : e22()));
        }
        if (Y3(), r2.___wasm_call_ctors = function() {
          return (r2.___wasm_call_ctors = r2.asm.__wasm_call_ctors).apply(null, arguments);
        }, r2.___errno_location = function() {
          return (r2.___errno_location = r2.asm.__errno_location).apply(null, arguments);
        }, r2._omalloc = function() {
          return (r2._omalloc = r2.asm.omalloc).apply(null, arguments);
        }, r2._ofree = function() {
          return (r2._ofree = r2.asm.ofree).apply(null, arguments);
        }, r2._getLastOnigError = function() {
          return (r2._getLastOnigError = r2.asm.getLastOnigError).apply(null, arguments);
        }, r2._createOnigScanner = function() {
          return (r2._createOnigScanner = r2.asm.createOnigScanner).apply(null, arguments);
        }, r2._freeOnigScanner = function() {
          return (r2._freeOnigScanner = r2.asm.freeOnigScanner).apply(null, arguments);
        }, r2._findNextOnigScannerMatch = function() {
          return (r2._findNextOnigScannerMatch = r2.asm.findNextOnigScannerMatch).apply(null, arguments);
        }, r2._findNextOnigScannerMatchDbg = function() {
          return (r2._findNextOnigScannerMatchDbg = r2.asm.findNextOnigScannerMatchDbg).apply(null, arguments);
        }, r2.stackSave = function() {
          return (r2.stackSave = r2.asm.stackSave).apply(null, arguments);
        }, r2.stackRestore = function() {
          return (r2.stackRestore = r2.asm.stackRestore).apply(null, arguments);
        }, r2.stackAlloc = function() {
          return (r2.stackAlloc = r2.asm.stackAlloc).apply(null, arguments);
        }, r2.dynCall_jiji = function() {
          return (r2.dynCall_jiji = r2.asm.dynCall_jiji).apply(null, arguments);
        }, r2.UTF8ToString = b4, C2 = function t4() {
          tt2 || et2(), tt2 || (C2 = t4);
        }, r2.preInit)
          for ("function" == typeof r2.preInit && (r2.preInit = [r2.preInit]); r2.preInit.length > 0; )
            r2.preInit.pop()();
        return et2(), t32.ready;
      });
      t22.exports = n22;
    } }, n2 = {}, function e3(r2) {
      var i3 = n2[r2];
      if (void 0 !== i3)
        return i3.exports;
      var o2 = n2[r2] = { exports: {} };
      return t3[r2].call(o2.exports, o2, o2.exports, e3), o2.exports;
    }(770);
    var t3, n2;
  });
})(main$1);
var mainExports = {};
var main = {
  get exports() {
    return mainExports;
  },
  set exports(v2) {
    mainExports = v2;
  }
};
(function(module2, exports) {
  !function(e3, t3) {
    module2.exports = t3();
  }(commonjsGlobal$1, function() {
    return (() => {
      var e3 = { 350: (e22, t22) => {
        Object.defineProperty(t22, "__esModule", { value: true }), t22.UseOnigurumaFindOptions = t22.DebugFlags = void 0, t22.DebugFlags = { InDebugMode: "undefined" != typeof process && !!define_process_env_default.VSCODE_TEXTMATE_DEBUG }, t22.UseOnigurumaFindOptions = false;
      }, 36: (e22, t22) => {
        var n2;
        Object.defineProperty(t22, "__esModule", { value: true }), t22.toOptionalTokenType = t22.EncodedTokenAttributes = void 0, (n2 = t22.EncodedTokenAttributes || (t22.EncodedTokenAttributes = {})).toBinaryStr = function(e32) {
          let t32 = e32.toString(2);
          for (; t32.length < 32; )
            t32 = "0" + t32;
          return t32;
        }, n2.print = function(e32) {
          const t32 = n2.getLanguageId(e32), s5 = n2.getTokenType(e32), r2 = n2.getFontStyle(e32), i3 = n2.getForeground(e32), o2 = n2.getBackground(e32);
          console.log({ languageId: t32, tokenType: s5, fontStyle: r2, foreground: i3, background: o2 });
        }, n2.getLanguageId = function(e32) {
          return (255 & e32) >>> 0;
        }, n2.getTokenType = function(e32) {
          return (768 & e32) >>> 8;
        }, n2.containsBalancedBrackets = function(e32) {
          return 0 != (1024 & e32);
        }, n2.getFontStyle = function(e32) {
          return (30720 & e32) >>> 11;
        }, n2.getForeground = function(e32) {
          return (16744448 & e32) >>> 15;
        }, n2.getBackground = function(e32) {
          return (4278190080 & e32) >>> 24;
        }, n2.set = function(e32, t32, s5, r2, i3, o2, c3) {
          let a4 = n2.getLanguageId(e32), l2 = n2.getTokenType(e32), u3 = n2.containsBalancedBrackets(e32) ? 1 : 0, h4 = n2.getFontStyle(e32), p2 = n2.getForeground(e32), d4 = n2.getBackground(e32);
          return 0 !== t32 && (a4 = t32), 8 !== s5 && (l2 = s5), null !== r2 && (u3 = r2 ? 1 : 0), -1 !== i3 && (h4 = i3), 0 !== o2 && (p2 = o2), 0 !== c3 && (d4 = c3), (a4 << 0 | l2 << 8 | u3 << 10 | h4 << 11 | p2 << 15 | d4 << 24) >>> 0;
        }, t22.toOptionalTokenType = function(e32) {
          return e32;
        };
      }, 996: (e22, t22, n2) => {
        Object.defineProperty(t22, "__esModule", { value: true }), t22.BasicScopeAttributesProvider = t22.BasicScopeAttributes = void 0;
        const s5 = n2(878);
        class r2 {
          constructor(e32, t32) {
            this.languageId = e32, this.tokenType = t32;
          }
        }
        t22.BasicScopeAttributes = r2;
        class i3 {
          constructor(e32, t32) {
            this._getBasicScopeAttributes = new s5.CachedFn((e4) => {
              const t4 = this._scopeToLanguage(e4), n22 = this._toStandardTokenType(e4);
              return new r2(t4, n22);
            }), this._defaultAttributes = new r2(e32, 8), this._embeddedLanguagesMatcher = new o2(Object.entries(t32 || {}));
          }
          getDefaultAttributes() {
            return this._defaultAttributes;
          }
          getBasicScopeAttributes(e32) {
            return null === e32 ? i3._NULL_SCOPE_METADATA : this._getBasicScopeAttributes.get(e32);
          }
          _scopeToLanguage(e32) {
            return this._embeddedLanguagesMatcher.match(e32) || 0;
          }
          _toStandardTokenType(e32) {
            const t32 = e32.match(i3.STANDARD_TOKEN_TYPE_REGEXP);
            if (!t32)
              return 8;
            switch (t32[1]) {
              case "comment":
                return 1;
              case "string":
                return 2;
              case "regex":
                return 3;
              case "meta.embedded":
                return 0;
            }
            throw new Error("Unexpected match for standard token type!");
          }
        }
        t22.BasicScopeAttributesProvider = i3, i3._NULL_SCOPE_METADATA = new r2(0, 0), i3.STANDARD_TOKEN_TYPE_REGEXP = /\b(comment|string|regex|meta\.embedded)\b/;
        class o2 {
          constructor(e32) {
            if (0 === e32.length)
              this.values = null, this.scopesRegExp = null;
            else {
              this.values = new Map(e32);
              const t32 = e32.map(([e4, t4]) => s5.escapeRegExpCharacters(e4));
              t32.sort(), t32.reverse(), this.scopesRegExp = new RegExp(`^((${t32.join(")|(")}))($|\\.)`, "");
            }
          }
          match(e32) {
            if (!this.scopesRegExp)
              return;
            const t32 = e32.match(this.scopesRegExp);
            return t32 ? this.values.get(t32[1]) : void 0;
          }
        }
      }, 947: (e22, t22, n2) => {
        Object.defineProperty(t22, "__esModule", { value: true }), t22.LineTokens = t22.BalancedBracketSelectors = t22.StateStack = t22.AttributedScopeStack = t22.Grammar = t22.createGrammar = void 0;
        const s5 = n2(350), r2 = n2(36), i3 = n2(736), o2 = n2(44), c3 = n2(792), a4 = n2(583), l2 = n2(878), u3 = n2(996), h4 = n2(47);
        function p2(e32, t32, n22, s22, r22) {
          const o22 = i3.createMatchers(t32, d4), a22 = c3.RuleFactory.getCompiledRuleId(n22, s22, r22.repository);
          for (const n3 of o22)
            e32.push({ debugSelector: t32, matcher: n3.matcher, ruleId: a22, grammar: r22, priority: n3.priority });
        }
        function d4(e32, t32) {
          if (t32.length < e32.length)
            return false;
          let n22 = 0;
          return e32.every((e4) => {
            for (let s22 = n22; s22 < t32.length; s22++)
              if (f2(t32[s22], e4))
                return n22 = s22 + 1, true;
            return false;
          });
        }
        function f2(e32, t32) {
          if (!e32)
            return false;
          if (e32 === t32)
            return true;
          const n22 = t32.length;
          return e32.length > n22 && e32.substr(0, n22) === t32 && "." === e32[n22];
        }
        t22.createGrammar = function(e32, t32, n22, s22, r22, i22, o22, c22) {
          return new g2(e32, t32, n22, s22, r22, i22, o22, c22);
        };
        class g2 {
          constructor(e32, t32, n22, s22, r22, o22, c22, a22) {
            if (this._rootScopeName = e32, this.balancedBracketSelectors = o22, this._onigLib = a22, this._basicScopeAttributesProvider = new u3.BasicScopeAttributesProvider(n22, s22), this._rootId = -1, this._lastRuleId = 0, this._ruleId2desc = [null], this._includedGrammars = {}, this._grammarRepository = c22, this._grammar = m4(t32, null), this._injections = null, this._tokenTypeMatchers = [], r22)
              for (const e4 of Object.keys(r22)) {
                const t4 = i3.createMatchers(e4, d4);
                for (const n3 of t4)
                  this._tokenTypeMatchers.push({ matcher: n3.matcher, type: r22[e4] });
              }
          }
          get themeProvider() {
            return this._grammarRepository;
          }
          dispose() {
            for (const e32 of this._ruleId2desc)
              e32 && e32.dispose();
          }
          createOnigScanner(e32) {
            return this._onigLib.createOnigScanner(e32);
          }
          createOnigString(e32) {
            return this._onigLib.createOnigString(e32);
          }
          getMetadataForScope(e32) {
            return this._basicScopeAttributesProvider.getBasicScopeAttributes(e32);
          }
          _collectInjections() {
            const e32 = [], t32 = this._rootScopeName, n22 = ((e4) => e4 === this._rootScopeName ? this._grammar : this.getExternalGrammar(e4))(t32);
            if (n22) {
              const s22 = n22.injections;
              if (s22)
                for (let t4 in s22)
                  p2(e32, t4, s22[t4], this, n22);
              const r22 = this._grammarRepository.injections(t32);
              r22 && r22.forEach((t4) => {
                const n3 = this.getExternalGrammar(t4);
                if (n3) {
                  const t5 = n3.injectionSelector;
                  t5 && p2(e32, t5, n3, this, n3);
                }
              });
            }
            return e32.sort((e4, t4) => e4.priority - t4.priority), e32;
          }
          getInjections() {
            if (null === this._injections && (this._injections = this._collectInjections(), s5.DebugFlags.InDebugMode && this._injections.length > 0)) {
              console.log(`Grammar ${this._rootScopeName} contains the following injections:`);
              for (const e32 of this._injections)
                console.log(`  - ${e32.debugSelector}`);
            }
            return this._injections;
          }
          registerRule(e32) {
            const t32 = ++this._lastRuleId, n22 = e32(c3.ruleIdFromNumber(t32));
            return this._ruleId2desc[t32] = n22, n22;
          }
          getRule(e32) {
            return this._ruleId2desc[c3.ruleIdToNumber(e32)];
          }
          getExternalGrammar(e32, t32) {
            if (this._includedGrammars[e32])
              return this._includedGrammars[e32];
            if (this._grammarRepository) {
              const n22 = this._grammarRepository.lookup(e32);
              if (n22)
                return this._includedGrammars[e32] = m4(n22, t32 && t32.$base), this._includedGrammars[e32];
            }
          }
          tokenizeLine(e32, t32, n22 = 0) {
            const s22 = this._tokenize(e32, t32, false, n22);
            return { tokens: s22.lineTokens.getResult(s22.ruleStack, s22.lineLength), ruleStack: s22.ruleStack, stoppedEarly: s22.stoppedEarly };
          }
          tokenizeLine2(e32, t32, n22 = 0) {
            const s22 = this._tokenize(e32, t32, true, n22);
            return { tokens: s22.lineTokens.getBinaryResult(s22.ruleStack, s22.lineLength), ruleStack: s22.ruleStack, stoppedEarly: s22.stoppedEarly };
          }
          _tokenize(e32, t32, n22, s22) {
            let i22;
            if (-1 === this._rootId && (this._rootId = c3.RuleFactory.getCompiledRuleId(this._grammar.repository.$self, this, this._grammar.repository)), t32 && t32 !== b4.NULL)
              i22 = false, t32.reset();
            else {
              i22 = true;
              const e4 = this._basicScopeAttributesProvider.getDefaultAttributes(), n3 = this.themeProvider.getDefaults(), s32 = r2.EncodedTokenAttributes.set(0, e4.languageId, e4.tokenType, null, n3.fontStyle, n3.foregroundId, n3.backgroundId), o22 = this.getRule(this._rootId).getName(null, null);
              let c22;
              c22 = o22 ? _2.createRootAndLookUpScopeName(o22, s32, this) : _2.createRoot("unknown", s32), t32 = new b4(null, this._rootId, -1, -1, false, null, c22, c22);
            }
            e32 += "\n";
            const a22 = this.createOnigString(e32), l22 = a22.content.length, u22 = new y4(n22, e32, this._tokenTypeMatchers, this.balancedBracketSelectors), p22 = h4._tokenizeString(this, a22, i22, 0, t32, u22, true, s22);
            return o2.disposeOnigString(a22), { lineLength: l22, lineTokens: u22, ruleStack: p22.stack, stoppedEarly: p22.stoppedEarly };
          }
        }
        function m4(e32, t32) {
          return (e32 = l2.clone(e32)).repository = e32.repository || {}, e32.repository.$self = { $vscodeTextmateLocation: e32.$vscodeTextmateLocation, patterns: e32.patterns, name: e32.scopeName }, e32.repository.$base = t32 || e32.repository.$self, e32;
        }
        t22.Grammar = g2;
        class _2 {
          constructor(e32, t32, n22) {
            this.parent = e32, this.scopePath = t32, this.tokenAttributes = n22;
          }
          static createRoot(e32, t32) {
            return new _2(null, new a4.ScopeStack(null, e32), t32);
          }
          static createRootAndLookUpScopeName(e32, t32, n22) {
            const s22 = n22.getMetadataForScope(e32), r22 = new a4.ScopeStack(null, e32), i22 = n22.themeProvider.themeMatch(r22), o22 = _2.mergeAttributes(t32, s22, i22);
            return new _2(null, r22, o22);
          }
          get scopeName() {
            return this.scopePath.scopeName;
          }
          equals(e32) {
            return _2._equals(this, e32);
          }
          static _equals(e32, t32) {
            for (; ; ) {
              if (e32 === t32)
                return true;
              if (!e32 && !t32)
                return true;
              if (!e32 || !t32)
                return false;
              if (e32.scopeName !== t32.scopeName || e32.tokenAttributes !== t32.tokenAttributes)
                return false;
              e32 = e32.parent, t32 = t32.parent;
            }
          }
          static mergeAttributes(e32, t32, n22) {
            let s22 = -1, i22 = 0, o22 = 0;
            return null !== n22 && (s22 = n22.fontStyle, i22 = n22.foregroundId, o22 = n22.backgroundId), r2.EncodedTokenAttributes.set(e32, t32.languageId, t32.tokenType, null, s22, i22, o22);
          }
          pushAttributed(e32, t32) {
            if (null === e32)
              return this;
            if (-1 === e32.indexOf(" "))
              return _2._pushAttributed(this, e32, t32);
            const n22 = e32.split(/ /g);
            let s22 = this;
            for (const e4 of n22)
              s22 = _2._pushAttributed(s22, e4, t32);
            return s22;
          }
          static _pushAttributed(e32, t32, n22) {
            const s22 = n22.getMetadataForScope(t32), r22 = e32.scopePath.push(t32), i22 = n22.themeProvider.themeMatch(r22), o22 = _2.mergeAttributes(e32.tokenAttributes, s22, i22);
            return new _2(e32, r22, o22);
          }
          getScopeNames() {
            return this.scopePath.getSegments();
          }
        }
        t22.AttributedScopeStack = _2;
        class b4 {
          constructor(e32, t32, n22, s22, r22, i22, o22, c22) {
            this.parent = e32, this.ruleId = t32, this.beginRuleCapturedEOL = r22, this.endRule = i22, this.nameScopesList = o22, this.contentNameScopesList = c22, this._stackElementBrand = void 0, this.depth = this.parent ? this.parent.depth + 1 : 1, this._enterPos = n22, this._anchorPos = s22;
          }
          equals(e32) {
            return null !== e32 && b4._equals(this, e32);
          }
          static _equals(e32, t32) {
            return e32 === t32 || !!this._structuralEquals(e32, t32) && e32.contentNameScopesList.equals(t32.contentNameScopesList);
          }
          static _structuralEquals(e32, t32) {
            for (; ; ) {
              if (e32 === t32)
                return true;
              if (!e32 && !t32)
                return true;
              if (!e32 || !t32)
                return false;
              if (e32.depth !== t32.depth || e32.ruleId !== t32.ruleId || e32.endRule !== t32.endRule)
                return false;
              e32 = e32.parent, t32 = t32.parent;
            }
          }
          clone() {
            return this;
          }
          static _reset(e32) {
            for (; e32; )
              e32._enterPos = -1, e32._anchorPos = -1, e32 = e32.parent;
          }
          reset() {
            b4._reset(this);
          }
          pop() {
            return this.parent;
          }
          safePop() {
            return this.parent ? this.parent : this;
          }
          push(e32, t32, n22, s22, r22, i22, o22) {
            return new b4(this, e32, t32, n22, s22, r22, i22, o22);
          }
          getEnterPos() {
            return this._enterPos;
          }
          getAnchorPos() {
            return this._anchorPos;
          }
          getRule(e32) {
            return e32.getRule(this.ruleId);
          }
          toString() {
            const e32 = [];
            return this._writeString(e32, 0), "[" + e32.join(",") + "]";
          }
          _writeString(e32, t32) {
            return this.parent && (t32 = this.parent._writeString(e32, t32)), e32[t32++] = `(${this.ruleId}, TODO-${this.nameScopesList}, TODO-${this.contentNameScopesList})`, t32;
          }
          withContentNameScopesList(e32) {
            return this.contentNameScopesList === e32 ? this : this.parent.push(this.ruleId, this._enterPos, this._anchorPos, this.beginRuleCapturedEOL, this.endRule, this.nameScopesList, e32);
          }
          withEndRule(e32) {
            return this.endRule === e32 ? this : new b4(this.parent, this.ruleId, this._enterPos, this._anchorPos, this.beginRuleCapturedEOL, e32, this.nameScopesList, this.contentNameScopesList);
          }
          hasSameRuleAs(e32) {
            let t32 = this;
            for (; t32 && t32._enterPos === e32._enterPos; ) {
              if (t32.ruleId === e32.ruleId)
                return true;
              t32 = t32.parent;
            }
            return false;
          }
        }
        t22.StateStack = b4, b4.NULL = new b4(null, 0, 0, 0, false, null, null, null), t22.BalancedBracketSelectors = class {
          constructor(e32, t32) {
            this.allowAny = false, this.balancedBracketScopes = e32.flatMap((e4) => "*" === e4 ? (this.allowAny = true, []) : i3.createMatchers(e4, d4).map((e5) => e5.matcher)), this.unbalancedBracketScopes = t32.flatMap((e4) => i3.createMatchers(e4, d4).map((e5) => e5.matcher));
          }
          get matchesAlways() {
            return this.allowAny && 0 === this.unbalancedBracketScopes.length;
          }
          get matchesNever() {
            return 0 === this.balancedBracketScopes.length && !this.allowAny;
          }
          match(e32) {
            for (const t32 of this.unbalancedBracketScopes)
              if (t32(e32))
                return false;
            for (const t32 of this.balancedBracketScopes)
              if (t32(e32))
                return true;
            return this.allowAny;
          }
        };
        class y4 {
          constructor(e32, t32, n22, r22) {
            this.balancedBracketSelectors = r22, this._emitBinaryTokens = e32, this._tokenTypeOverrides = n22, s5.DebugFlags.InDebugMode ? this._lineText = t32 : this._lineText = null, this._tokens = [], this._binaryTokens = [], this._lastTokenEndIndex = 0;
          }
          produce(e32, t32) {
            this.produceFromScopes(e32.contentNameScopesList, t32);
          }
          produceFromScopes(e32, t32) {
            var _a2;
            if (this._lastTokenEndIndex >= t32)
              return;
            if (this._emitBinaryTokens) {
              let n3 = e32.tokenAttributes, i22 = false;
              if (((_a2 = this.balancedBracketSelectors) == null ? void 0 : _a2.matchesAlways) && (i22 = true), this._tokenTypeOverrides.length > 0 || this.balancedBracketSelectors && !this.balancedBracketSelectors.matchesAlways && !this.balancedBracketSelectors.matchesNever) {
                const t4 = e32.getScopeNames();
                for (const e4 of this._tokenTypeOverrides)
                  e4.matcher(t4) && (n3 = r2.EncodedTokenAttributes.set(n3, 0, r2.toOptionalTokenType(e4.type), null, -1, 0, 0));
                this.balancedBracketSelectors && (i22 = this.balancedBracketSelectors.match(t4));
              }
              if (i22 && (n3 = r2.EncodedTokenAttributes.set(n3, 0, 8, i22, -1, 0, 0)), this._binaryTokens.length > 0 && this._binaryTokens[this._binaryTokens.length - 1] === n3)
                return void (this._lastTokenEndIndex = t32);
              if (s5.DebugFlags.InDebugMode) {
                const n4 = e32.getScopeNames();
                console.log("  token: |" + this._lineText.substring(this._lastTokenEndIndex, t32).replace(/\n$/, "\\n") + "|");
                for (let e4 = 0; e4 < n4.length; e4++)
                  console.log("      * " + n4[e4]);
              }
              return this._binaryTokens.push(this._lastTokenEndIndex), this._binaryTokens.push(n3), void (this._lastTokenEndIndex = t32);
            }
            const n22 = e32.getScopeNames();
            if (s5.DebugFlags.InDebugMode) {
              console.log("  token: |" + this._lineText.substring(this._lastTokenEndIndex, t32).replace(/\n$/, "\\n") + "|");
              for (let e4 = 0; e4 < n22.length; e4++)
                console.log("      * " + n22[e4]);
            }
            this._tokens.push({ startIndex: this._lastTokenEndIndex, endIndex: t32, scopes: n22 }), this._lastTokenEndIndex = t32;
          }
          getResult(e32, t32) {
            return this._tokens.length > 0 && this._tokens[this._tokens.length - 1].startIndex === t32 - 1 && this._tokens.pop(), 0 === this._tokens.length && (this._lastTokenEndIndex = -1, this.produce(e32, t32), this._tokens[this._tokens.length - 1].startIndex = 0), this._tokens;
          }
          getBinaryResult(e32, t32) {
            this._binaryTokens.length > 0 && this._binaryTokens[this._binaryTokens.length - 2] === t32 - 1 && (this._binaryTokens.pop(), this._binaryTokens.pop()), 0 === this._binaryTokens.length && (this._lastTokenEndIndex = -1, this.produce(e32, t32), this._binaryTokens[this._binaryTokens.length - 2] = 0);
            const n22 = new Uint32Array(this._binaryTokens.length);
            for (let e4 = 0, t4 = this._binaryTokens.length; e4 < t4; e4++)
              n22[e4] = this._binaryTokens[e4];
            return n22;
          }
        }
        t22.LineTokens = y4;
      }, 965: (e22, t22, n2) => {
        Object.defineProperty(t22, "__esModule", { value: true }), t22.parseInclude = t22.TopLevelRepositoryReference = t22.TopLevelReference = t22.RelativeReference = t22.SelfReference = t22.BaseReference = t22.ScopeDependencyProcessor = t22.ExternalReferenceCollector = t22.TopLevelRepositoryRuleReference = t22.TopLevelRuleReference = void 0;
        const s5 = n2(878);
        class r2 {
          constructor(e32) {
            this.scopeName = e32;
          }
          toKey() {
            return this.scopeName;
          }
        }
        t22.TopLevelRuleReference = r2;
        class i3 {
          constructor(e32, t32) {
            this.scopeName = e32, this.ruleName = t32;
          }
          toKey() {
            return `${this.scopeName}#${this.ruleName}`;
          }
        }
        t22.TopLevelRepositoryRuleReference = i3;
        class o2 {
          constructor() {
            this._references = [], this._seenReferenceKeys = /* @__PURE__ */ new Set(), this.visitedRule = /* @__PURE__ */ new Set();
          }
          get references() {
            return this._references;
          }
          add(e32) {
            const t32 = e32.toKey();
            this._seenReferenceKeys.has(t32) || (this._seenReferenceKeys.add(t32), this._references.push(e32));
          }
        }
        function c3(e32, t32, n22, s22) {
          const i22 = n22.lookup(e32.scopeName);
          if (!i22) {
            if (e32.scopeName === t32)
              throw new Error(`No grammar provided for <${t32}>`);
            return;
          }
          const o22 = n22.lookup(t32);
          e32 instanceof r2 ? l2({ baseGrammar: o22, selfGrammar: i22 }, s22) : a4(e32.ruleName, { baseGrammar: o22, selfGrammar: i22, repository: i22.repository }, s22);
          const c22 = n22.injections(e32.scopeName);
          if (c22)
            for (const e4 of c22)
              s22.add(new r2(e4));
        }
        function a4(e32, t32, n22) {
          t32.repository && t32.repository[e32] && u3([t32.repository[e32]], t32, n22);
        }
        function l2(e32, t32) {
          e32.selfGrammar.patterns && Array.isArray(e32.selfGrammar.patterns) && u3(e32.selfGrammar.patterns, { ...e32, repository: e32.selfGrammar.repository }, t32), e32.selfGrammar.injections && u3(Object.values(e32.selfGrammar.injections), { ...e32, repository: e32.selfGrammar.repository }, t32);
        }
        function u3(e32, t32, n22) {
          for (const o22 of e32) {
            if (n22.visitedRule.has(o22))
              continue;
            n22.visitedRule.add(o22);
            const e4 = o22.repository ? s5.mergeObjects({}, t32.repository, o22.repository) : t32.repository;
            Array.isArray(o22.patterns) && u3(o22.patterns, { ...t32, repository: e4 }, n22);
            const c22 = o22.include;
            if (!c22)
              continue;
            const h22 = m4(c22);
            switch (h22.kind) {
              case 0:
                l2({ ...t32, selfGrammar: t32.baseGrammar }, n22);
                break;
              case 1:
                l2(t32, n22);
                break;
              case 2:
                a4(h22.ruleName, { ...t32, repository: e4 }, n22);
                break;
              case 3:
              case 4:
                const s22 = h22.scopeName === t32.selfGrammar.scopeName ? t32.selfGrammar : h22.scopeName === t32.baseGrammar.scopeName ? t32.baseGrammar : void 0;
                if (s22) {
                  const r22 = { baseGrammar: t32.baseGrammar, selfGrammar: s22, repository: e4 };
                  4 === h22.kind ? a4(h22.ruleName, r22, n22) : l2(r22, n22);
                } else
                  4 === h22.kind ? n22.add(new i3(h22.scopeName, h22.ruleName)) : n22.add(new r2(h22.scopeName));
            }
          }
        }
        t22.ExternalReferenceCollector = o2, t22.ScopeDependencyProcessor = class {
          constructor(e32, t32) {
            this.repo = e32, this.initialScopeName = t32, this.seenFullScopeRequests = /* @__PURE__ */ new Set(), this.seenPartialScopeRequests = /* @__PURE__ */ new Set(), this.seenFullScopeRequests.add(this.initialScopeName), this.Q = [new r2(this.initialScopeName)];
          }
          processQueue() {
            const e32 = this.Q;
            this.Q = [];
            const t32 = new o2();
            for (const n22 of e32)
              c3(n22, this.initialScopeName, this.repo, t32);
            for (const e4 of t32.references)
              if (e4 instanceof r2) {
                if (this.seenFullScopeRequests.has(e4.scopeName))
                  continue;
                this.seenFullScopeRequests.add(e4.scopeName), this.Q.push(e4);
              } else {
                if (this.seenFullScopeRequests.has(e4.scopeName))
                  continue;
                if (this.seenPartialScopeRequests.has(e4.toKey()))
                  continue;
                this.seenPartialScopeRequests.add(e4.toKey()), this.Q.push(e4);
              }
          }
        };
        class h4 {
          constructor() {
            this.kind = 0;
          }
        }
        t22.BaseReference = h4;
        class p2 {
          constructor() {
            this.kind = 1;
          }
        }
        t22.SelfReference = p2;
        class d4 {
          constructor(e32) {
            this.ruleName = e32, this.kind = 2;
          }
        }
        t22.RelativeReference = d4;
        class f2 {
          constructor(e32) {
            this.scopeName = e32, this.kind = 3;
          }
        }
        t22.TopLevelReference = f2;
        class g2 {
          constructor(e32, t32) {
            this.scopeName = e32, this.ruleName = t32, this.kind = 4;
          }
        }
        function m4(e32) {
          if ("$base" === e32)
            return new h4();
          if ("$self" === e32)
            return new p2();
          const t32 = e32.indexOf("#");
          if (-1 === t32)
            return new f2(e32);
          if (0 === t32)
            return new d4(e32.substring(1));
          {
            const n22 = e32.substring(0, t32), s22 = e32.substring(t32 + 1);
            return new g2(n22, s22);
          }
        }
        t22.TopLevelRepositoryReference = g2, t22.parseInclude = m4;
      }, 391: function(e22, t22, n2) {
        var s5 = this && this.__createBinding || (Object.create ? function(e32, t32, n22, s22) {
          void 0 === s22 && (s22 = n22), Object.defineProperty(e32, s22, { enumerable: true, get: function() {
            return t32[n22];
          } });
        } : function(e32, t32, n22, s22) {
          void 0 === s22 && (s22 = n22), e32[s22] = t32[n22];
        }), r2 = this && this.__exportStar || function(e32, t32) {
          for (var n22 in e32)
            "default" === n22 || Object.prototype.hasOwnProperty.call(t32, n22) || s5(t32, e32, n22);
        };
        Object.defineProperty(t22, "__esModule", { value: true }), r2(n2(947), t22);
      }, 47: (e22, t22, n2) => {
        Object.defineProperty(t22, "__esModule", { value: true }), t22.LocalStackElement = t22._tokenizeString = void 0;
        const s5 = n2(350), r2 = n2(44), i3 = n2(792), o2 = n2(878);
        class c3 {
          constructor(e32, t32) {
            this.stack = e32, this.stoppedEarly = t32;
          }
        }
        function a4(e32, t32, n22, r22, a22, h22, d22, f2) {
          const g2 = t32.content.length;
          let m4 = false, _2 = -1;
          if (d22) {
            const o22 = function(e4, t4, n3, r3, o3, c22) {
              let a32 = o3.beginRuleCapturedEOL ? 0 : -1;
              const l22 = [];
              for (let t5 = o3; t5; t5 = t5.pop()) {
                const n4 = t5.getRule(e4);
                n4 instanceof i3.BeginWhileRule && l22.push({ rule: n4, stack: t5 });
              }
              for (let h32 = l22.pop(); h32; h32 = l22.pop()) {
                const { ruleScanner: l3, findOptions: d32 } = u3(h32.rule, e4, h32.stack.endRule, n3, r3 === a32), f22 = l3.findNextMatchSync(t4, r3, d32);
                if (s5.DebugFlags.InDebugMode && (console.log("  scanning for while rule"), console.log(l3.toString())), !f22) {
                  s5.DebugFlags.InDebugMode && console.log("  popping " + h32.rule.debugName + " - " + h32.rule.debugWhileRegExp), o3 = h32.stack.pop();
                  break;
                }
                if (f22.ruleId !== i3.whileRuleId) {
                  o3 = h32.stack.pop();
                  break;
                }
                f22.captureIndices && f22.captureIndices.length && (c22.produce(h32.stack, f22.captureIndices[0].start), p2(e4, t4, n3, h32.stack, c22, h32.rule.whileCaptures, f22.captureIndices), c22.produce(h32.stack, f22.captureIndices[0].end), a32 = f22.captureIndices[0].end, f22.captureIndices[0].end > r3 && (r3 = f22.captureIndices[0].end, n3 = false));
              }
              return { stack: o3, linePos: r3, anchorPosition: a32, isFirstLine: n3 };
            }(e32, t32, n22, r22, a22, h22);
            a22 = o22.stack, r22 = o22.linePos, n22 = o22.isFirstLine, _2 = o22.anchorPosition;
          }
          const b4 = Date.now();
          for (; !m4; ) {
            if (0 !== f2 && Date.now() - b4 > f2)
              return new c3(a22, true);
            y4();
          }
          return new c3(a22, false);
          function y4() {
            s5.DebugFlags.InDebugMode && (console.log(""), console.log(`@@scanNext ${r22}: |${t32.content.substr(r22).replace(/\n$/, "\\n")}|`));
            const c22 = function(e4, t4, n3, r3, i22, c32) {
              const a32 = function(e5, t5, n4, r4, i32, c4) {
                const a42 = i32.getRule(e5), { ruleScanner: u4, findOptions: h42 } = l2(a42, e5, i32.endRule, n4, r4 === c4);
                let p3 = 0;
                s5.DebugFlags.InDebugMode && (p3 = o2.performanceNow());
                const d5 = u4.findNextMatchSync(t5, r4, h42);
                if (s5.DebugFlags.InDebugMode) {
                  const e6 = o2.performanceNow() - p3;
                  e6 > 5 && console.warn(`Rule ${a42.debugName} (${a42.id}) matching took ${e6} against '${t5}'`), console.log(`  scanning for (linePos: ${r4}, anchorPosition: ${c4})`), console.log(u4.toString()), d5 && console.log(`matched rule id: ${d5.ruleId} from ${d5.captureIndices[0].start} to ${d5.captureIndices[0].end}`);
                }
                return d5 ? { captureIndices: d5.captureIndices, matchedRuleId: d5.ruleId } : null;
              }(e4, t4, n3, r3, i22, c32), u32 = e4.getInjections();
              if (0 === u32.length)
                return a32;
              const h32 = function(e5, t5, n4, r4, i32, o22, c4) {
                let a42, u4 = Number.MAX_VALUE, h42 = null, p3 = 0;
                const d5 = o22.contentNameScopesList.getScopeNames();
                for (let o3 = 0, f3 = e5.length; o3 < f3; o3++) {
                  const f4 = e5[o3];
                  if (!f4.matcher(d5))
                    continue;
                  const g22 = t5.getRule(f4.ruleId), { ruleScanner: m22, findOptions: _22 } = l2(g22, t5, null, r4, i32 === c4), b22 = m22.findNextMatchSync(n4, i32, _22);
                  if (!b22)
                    continue;
                  s5.DebugFlags.InDebugMode && (console.log(`  matched injection: ${f4.debugSelector}`), console.log(m22.toString()));
                  const y22 = b22.captureIndices[0].start;
                  if (!(y22 >= u4) && (u4 = y22, h42 = b22.captureIndices, a42 = b22.ruleId, p3 = f4.priority, u4 === i32))
                    break;
                }
                return h42 ? { priorityMatch: -1 === p3, captureIndices: h42, matchedRuleId: a42 } : null;
              }(u32, e4, t4, n3, r3, i22, c32);
              if (!h32)
                return a32;
              if (!a32)
                return h32;
              const p22 = a32.captureIndices[0].start, d42 = h32.captureIndices[0].start;
              return d42 < p22 || h32.priorityMatch && d42 === p22 ? h32 : a32;
            }(e32, t32, n22, r22, a22, _2);
            if (!c22)
              return s5.DebugFlags.InDebugMode && console.log("  no more matches."), h22.produce(a22, g2), void (m4 = true);
            const u22 = c22.captureIndices, d32 = c22.matchedRuleId, f22 = !!(u22 && u22.length > 0) && u22[0].end > r22;
            if (d32 === i3.endRuleId) {
              const i22 = a22.getRule(e32);
              s5.DebugFlags.InDebugMode && console.log("  popping " + i22.debugName + " - " + i22.debugEndRegExp), h22.produce(a22, u22[0].start), a22 = a22.withContentNameScopesList(a22.nameScopesList), p2(e32, t32, n22, a22, h22, i22.endCaptures, u22), h22.produce(a22, u22[0].end);
              const o22 = a22;
              if (a22 = a22.parent, _2 = o22.getAnchorPos(), !f22 && o22.getEnterPos() === r22)
                return s5.DebugFlags.InDebugMode && console.error("[1] - Grammar is in an endless loop - Grammar pushed & popped a rule without advancing"), a22 = o22, h22.produce(a22, g2), void (m4 = true);
            } else {
              const o22 = e32.getRule(d32);
              h22.produce(a22, u22[0].start);
              const c32 = a22, l22 = o22.getName(t32.content, u22), b22 = a22.contentNameScopesList.pushAttributed(l22, e32);
              if (a22 = a22.push(d32, r22, _2, u22[0].end === g2, null, b22, b22), o22 instanceof i3.BeginEndRule) {
                const r3 = o22;
                s5.DebugFlags.InDebugMode && console.log("  pushing " + r3.debugName + " - " + r3.debugBeginRegExp), p2(e32, t32, n22, a22, h22, r3.beginCaptures, u22), h22.produce(a22, u22[0].end), _2 = u22[0].end;
                const i22 = r3.getContentName(t32.content, u22), l3 = b22.pushAttributed(i22, e32);
                if (a22 = a22.withContentNameScopesList(l3), r3.endHasBackReferences && (a22 = a22.withEndRule(r3.getEndWithResolvedBackReferences(t32.content, u22))), !f22 && c32.hasSameRuleAs(a22))
                  return s5.DebugFlags.InDebugMode && console.error("[2] - Grammar is in an endless loop - Grammar pushed the same rule without advancing"), a22 = a22.pop(), h22.produce(a22, g2), void (m4 = true);
              } else if (o22 instanceof i3.BeginWhileRule) {
                const r3 = o22;
                s5.DebugFlags.InDebugMode && console.log("  pushing " + r3.debugName), p2(e32, t32, n22, a22, h22, r3.beginCaptures, u22), h22.produce(a22, u22[0].end), _2 = u22[0].end;
                const i22 = r3.getContentName(t32.content, u22), l3 = b22.pushAttributed(i22, e32);
                if (a22 = a22.withContentNameScopesList(l3), r3.whileHasBackReferences && (a22 = a22.withEndRule(r3.getWhileWithResolvedBackReferences(t32.content, u22))), !f22 && c32.hasSameRuleAs(a22))
                  return s5.DebugFlags.InDebugMode && console.error("[3] - Grammar is in an endless loop - Grammar pushed the same rule without advancing"), a22 = a22.pop(), h22.produce(a22, g2), void (m4 = true);
              } else {
                const r3 = o22;
                if (s5.DebugFlags.InDebugMode && console.log("  matched " + r3.debugName + " - " + r3.debugMatchRegExp), p2(e32, t32, n22, a22, h22, r3.captures, u22), h22.produce(a22, u22[0].end), a22 = a22.pop(), !f22)
                  return s5.DebugFlags.InDebugMode && console.error("[4] - Grammar is in an endless loop - Grammar is not advancing, nor is it pushing/popping"), a22 = a22.safePop(), h22.produce(a22, g2), void (m4 = true);
              }
            }
            u22[0].end > r22 && (r22 = u22[0].end, n22 = false);
          }
        }
        function l2(e32, t32, n22, r22, i22) {
          return s5.UseOnigurumaFindOptions ? { ruleScanner: e32.compile(t32, n22), findOptions: h4(r22, i22) } : { ruleScanner: e32.compileAG(t32, n22, r22, i22), findOptions: 0 };
        }
        function u3(e32, t32, n22, r22, i22) {
          return s5.UseOnigurumaFindOptions ? { ruleScanner: e32.compileWhile(t32, n22), findOptions: h4(r22, i22) } : { ruleScanner: e32.compileWhileAG(t32, n22, r22, i22), findOptions: 0 };
        }
        function h4(e32, t32) {
          let n22 = 0;
          return e32 || (n22 |= 1), t32 || (n22 |= 4), n22;
        }
        function p2(e32, t32, n22, s22, i22, o22, c22) {
          if (0 === o22.length)
            return;
          const l22 = t32.content, u22 = Math.min(o22.length, c22.length), h22 = [], p22 = c22[0].end;
          for (let t4 = 0; t4 < u22; t4++) {
            const u32 = o22[t4];
            if (null === u32)
              continue;
            const f2 = c22[t4];
            if (0 === f2.length)
              continue;
            if (f2.start > p22)
              break;
            for (; h22.length > 0 && h22[h22.length - 1].endPos <= f2.start; )
              i22.produceFromScopes(h22[h22.length - 1].scopes, h22[h22.length - 1].endPos), h22.pop();
            if (h22.length > 0 ? i22.produceFromScopes(h22[h22.length - 1].scopes, f2.start) : i22.produce(s22, f2.start), u32.retokenizeCapturedWithRuleId) {
              const t5 = u32.getName(l22, c22), o3 = s22.contentNameScopesList.pushAttributed(t5, e32), h32 = u32.getContentName(l22, c22), p3 = o3.pushAttributed(h32, e32), d22 = s22.push(u32.retokenizeCapturedWithRuleId, f2.start, -1, false, null, o3, p3), g22 = e32.createOnigString(l22.substring(0, f2.end));
              a4(e32, g22, n22 && 0 === f2.start, f2.start, d22, i22, false, 0), r2.disposeOnigString(g22);
              continue;
            }
            const g2 = u32.getName(l22, c22);
            if (null !== g2) {
              const t5 = (h22.length > 0 ? h22[h22.length - 1].scopes : s22.contentNameScopesList).pushAttributed(g2, e32);
              h22.push(new d4(t5, f2.end));
            }
          }
          for (; h22.length > 0; )
            i22.produceFromScopes(h22[h22.length - 1].scopes, h22[h22.length - 1].endPos), h22.pop();
        }
        t22._tokenizeString = a4;
        class d4 {
          constructor(e32, t32) {
            this.scopes = e32, this.endPos = t32;
          }
        }
        t22.LocalStackElement = d4;
      }, 974: (e22, t22) => {
        function n2(e32, t32) {
          throw new Error("Near offset " + e32.pos + ": " + t32 + " ~~~" + e32.source.substr(e32.pos, 50) + "~~~");
        }
        Object.defineProperty(t22, "__esModule", { value: true }), t22.parseJSON = void 0, t22.parseJSON = function(e32, t32, o2) {
          let c3 = new s5(e32), a4 = new r2(), l2 = 0, u3 = null, h4 = [], p2 = [];
          function d4() {
            h4.push(l2), p2.push(u3);
          }
          function f2() {
            l2 = h4.pop(), u3 = p2.pop();
          }
          function g2(e4) {
            n2(c3, e4);
          }
          for (; i3(c3, a4); ) {
            if (0 === l2) {
              if (null !== u3 && g2("too many constructs in root"), 3 === a4.type) {
                u3 = {}, o2 && (u3.$vscodeTextmateLocation = a4.toLocation(t32)), d4(), l2 = 1;
                continue;
              }
              if (2 === a4.type) {
                u3 = [], d4(), l2 = 4;
                continue;
              }
              g2("unexpected token in root");
            }
            if (2 === l2) {
              if (5 === a4.type) {
                f2();
                continue;
              }
              if (7 === a4.type) {
                l2 = 3;
                continue;
              }
              g2("expected , or }");
            }
            if (1 === l2 || 3 === l2) {
              if (1 === l2 && 5 === a4.type) {
                f2();
                continue;
              }
              if (1 === a4.type) {
                let e4 = a4.value;
                if (i3(c3, a4) && 6 === a4.type || g2("expected colon"), i3(c3, a4) || g2("expected value"), l2 = 2, 1 === a4.type) {
                  u3[e4] = a4.value;
                  continue;
                }
                if (8 === a4.type) {
                  u3[e4] = null;
                  continue;
                }
                if (9 === a4.type) {
                  u3[e4] = true;
                  continue;
                }
                if (10 === a4.type) {
                  u3[e4] = false;
                  continue;
                }
                if (11 === a4.type) {
                  u3[e4] = parseFloat(a4.value);
                  continue;
                }
                if (2 === a4.type) {
                  let t4 = [];
                  u3[e4] = t4, d4(), l2 = 4, u3 = t4;
                  continue;
                }
                if (3 === a4.type) {
                  let n22 = {};
                  o2 && (n22.$vscodeTextmateLocation = a4.toLocation(t32)), u3[e4] = n22, d4(), l2 = 1, u3 = n22;
                  continue;
                }
              }
              g2("unexpected token in dict");
            }
            if (5 === l2) {
              if (4 === a4.type) {
                f2();
                continue;
              }
              if (7 === a4.type) {
                l2 = 6;
                continue;
              }
              g2("expected , or ]");
            }
            if (4 === l2 || 6 === l2) {
              if (4 === l2 && 4 === a4.type) {
                f2();
                continue;
              }
              if (l2 = 5, 1 === a4.type) {
                u3.push(a4.value);
                continue;
              }
              if (8 === a4.type) {
                u3.push(null);
                continue;
              }
              if (9 === a4.type) {
                u3.push(true);
                continue;
              }
              if (10 === a4.type) {
                u3.push(false);
                continue;
              }
              if (11 === a4.type) {
                u3.push(parseFloat(a4.value));
                continue;
              }
              if (2 === a4.type) {
                let e4 = [];
                u3.push(e4), d4(), l2 = 4, u3 = e4;
                continue;
              }
              if (3 === a4.type) {
                let e4 = {};
                o2 && (e4.$vscodeTextmateLocation = a4.toLocation(t32)), u3.push(e4), d4(), l2 = 1, u3 = e4;
                continue;
              }
              g2("unexpected token in array");
            }
            g2("unknown state");
          }
          return 0 !== p2.length && g2("unclosed constructs"), u3;
        };
        class s5 {
          constructor(e32) {
            this.source = e32, this.pos = 0, this.len = e32.length, this.line = 1, this.char = 0;
          }
        }
        class r2 {
          constructor() {
            this.value = null, this.type = 0, this.offset = -1, this.len = -1, this.line = -1, this.char = -1;
          }
          toLocation(e32) {
            return { filename: e32, line: this.line, char: this.char };
          }
        }
        function i3(e32, t32) {
          t32.value = null, t32.type = 0, t32.offset = -1, t32.len = -1, t32.line = -1, t32.char = -1;
          let s22, r22 = e32.source, i22 = e32.pos, o2 = e32.len, c3 = e32.line, a4 = e32.char;
          for (; ; ) {
            if (i22 >= o2)
              return false;
            if (s22 = r22.charCodeAt(i22), 32 !== s22 && 9 !== s22 && 13 !== s22) {
              if (10 !== s22)
                break;
              i22++, c3++, a4 = 0;
            } else
              i22++, a4++;
          }
          if (t32.offset = i22, t32.line = c3, t32.char = a4, 34 === s22) {
            for (t32.type = 1, i22++, a4++; ; ) {
              if (i22 >= o2)
                return false;
              if (s22 = r22.charCodeAt(i22), i22++, a4++, 92 !== s22) {
                if (34 === s22)
                  break;
              } else
                i22++, a4++;
            }
            t32.value = r22.substring(t32.offset + 1, i22 - 1).replace(/\\u([0-9A-Fa-f]{4})/g, (e4, t4) => String.fromCodePoint(parseInt(t4, 16))).replace(/\\(.)/g, (t4, s32) => {
              switch (s32) {
                case '"':
                  return '"';
                case "\\":
                  return "\\";
                case "/":
                  return "/";
                case "b":
                  return "\b";
                case "f":
                  return "\f";
                case "n":
                  return "\n";
                case "r":
                  return "\r";
                case "t":
                  return "	";
                default:
                  n2(e32, "invalid escape sequence");
              }
              throw new Error("unreachable");
            });
          } else if (91 === s22)
            t32.type = 2, i22++, a4++;
          else if (123 === s22)
            t32.type = 3, i22++, a4++;
          else if (93 === s22)
            t32.type = 4, i22++, a4++;
          else if (125 === s22)
            t32.type = 5, i22++, a4++;
          else if (58 === s22)
            t32.type = 6, i22++, a4++;
          else if (44 === s22)
            t32.type = 7, i22++, a4++;
          else if (110 === s22) {
            if (t32.type = 8, i22++, a4++, s22 = r22.charCodeAt(i22), 117 !== s22)
              return false;
            if (i22++, a4++, s22 = r22.charCodeAt(i22), 108 !== s22)
              return false;
            if (i22++, a4++, s22 = r22.charCodeAt(i22), 108 !== s22)
              return false;
            i22++, a4++;
          } else if (116 === s22) {
            if (t32.type = 9, i22++, a4++, s22 = r22.charCodeAt(i22), 114 !== s22)
              return false;
            if (i22++, a4++, s22 = r22.charCodeAt(i22), 117 !== s22)
              return false;
            if (i22++, a4++, s22 = r22.charCodeAt(i22), 101 !== s22)
              return false;
            i22++, a4++;
          } else if (102 === s22) {
            if (t32.type = 10, i22++, a4++, s22 = r22.charCodeAt(i22), 97 !== s22)
              return false;
            if (i22++, a4++, s22 = r22.charCodeAt(i22), 108 !== s22)
              return false;
            if (i22++, a4++, s22 = r22.charCodeAt(i22), 115 !== s22)
              return false;
            if (i22++, a4++, s22 = r22.charCodeAt(i22), 101 !== s22)
              return false;
            i22++, a4++;
          } else
            for (t32.type = 11; ; ) {
              if (i22 >= o2)
                return false;
              if (s22 = r22.charCodeAt(i22), !(46 === s22 || s22 >= 48 && s22 <= 57 || 101 === s22 || 69 === s22 || 45 === s22 || 43 === s22))
                break;
              i22++, a4++;
            }
          return t32.len = i22 - t32.offset, null === t32.value && (t32.value = r22.substr(t32.offset, t32.len)), e32.pos = i22, e32.line = c3, e32.char = a4, true;
        }
      }, 787: function(e22, t22, n2) {
        var s5 = this && this.__createBinding || (Object.create ? function(e32, t32, n22, s22) {
          void 0 === s22 && (s22 = n22), Object.defineProperty(e32, s22, { enumerable: true, get: function() {
            return t32[n22];
          } });
        } : function(e32, t32, n22, s22) {
          void 0 === s22 && (s22 = n22), e32[s22] = t32[n22];
        }), r2 = this && this.__exportStar || function(e32, t32) {
          for (var n22 in e32)
            "default" === n22 || Object.prototype.hasOwnProperty.call(t32, n22) || s5(t32, e32, n22);
        };
        Object.defineProperty(t22, "__esModule", { value: true }), t22.parseRawGrammar = t22.INITIAL = t22.Registry = void 0;
        const i3 = n2(391), o2 = n2(50), c3 = n2(652), a4 = n2(583), l2 = n2(965);
        r2(n2(44), t22), t22.Registry = class {
          constructor(e32) {
            this._options = e32, this._syncRegistry = new c3.SyncRegistry(a4.Theme.createFromRawTheme(e32.theme, e32.colorMap), e32.onigLib), this._ensureGrammarCache = /* @__PURE__ */ new Map();
          }
          dispose() {
            this._syncRegistry.dispose();
          }
          setTheme(e32, t32) {
            this._syncRegistry.setTheme(a4.Theme.createFromRawTheme(e32, t32));
          }
          getColorMap() {
            return this._syncRegistry.getColorMap();
          }
          loadGrammarWithEmbeddedLanguages(e32, t32, n22) {
            return this.loadGrammarWithConfiguration(e32, t32, { embeddedLanguages: n22 });
          }
          loadGrammarWithConfiguration(e32, t32, n22) {
            return this._loadGrammar(e32, t32, n22.embeddedLanguages, n22.tokenTypes, new i3.BalancedBracketSelectors(n22.balancedBracketSelectors || [], n22.unbalancedBracketSelectors || []));
          }
          loadGrammar(e32) {
            return this._loadGrammar(e32, 0, null, null, null);
          }
          async _loadGrammar(e32, t32, n22, s22, r22) {
            const i22 = new l2.ScopeDependencyProcessor(this._syncRegistry, e32);
            for (; i22.Q.length > 0; )
              await Promise.all(i22.Q.map((e4) => this._loadSingleGrammar(e4.scopeName))), i22.processQueue();
            return this._grammarForScopeName(e32, t32, n22, s22, r22);
          }
          async _loadSingleGrammar(e32) {
            return this._ensureGrammarCache.has(e32) || this._ensureGrammarCache.set(e32, this._doLoadSingleGrammar(e32)), this._ensureGrammarCache.get(e32);
          }
          async _doLoadSingleGrammar(e32) {
            const t32 = await this._options.loadGrammar(e32);
            if (t32) {
              const n22 = "function" == typeof this._options.getInjections ? this._options.getInjections(e32) : void 0;
              this._syncRegistry.addGrammar(t32, n22);
            }
          }
          async addGrammar(e32, t32 = [], n22 = 0, s22 = null) {
            return this._syncRegistry.addGrammar(e32, t32), await this._grammarForScopeName(e32.scopeName, n22, s22);
          }
          _grammarForScopeName(e32, t32 = 0, n22 = null, s22 = null, r22 = null) {
            return this._syncRegistry.grammarForScopeName(e32, t32, n22, s22, r22);
          }
        }, t22.INITIAL = i3.StateStack.NULL, t22.parseRawGrammar = o2.parseRawGrammar;
      }, 736: (e22, t22) => {
        function n2(e32) {
          return !!e32 && !!e32.match(/[\w\.:]+/);
        }
        Object.defineProperty(t22, "__esModule", { value: true }), t22.createMatchers = void 0, t22.createMatchers = function(e32, t32) {
          const s5 = [], r2 = function(e4) {
            let t4 = /([LR]:|[\w\.:][\w\.:\-]*|[\,\|\-\(\)])/g, n22 = t4.exec(e4);
            return { next: () => {
              if (!n22)
                return null;
              const s22 = n22[0];
              return n22 = t4.exec(e4), s22;
            } };
          }(e32);
          let i3 = r2.next();
          for (; null !== i3; ) {
            let e4 = 0;
            if (2 === i3.length && ":" === i3.charAt(1)) {
              switch (i3.charAt(0)) {
                case "R":
                  e4 = 1;
                  break;
                case "L":
                  e4 = -1;
                  break;
                default:
                  console.log(`Unknown priority ${i3} in scope selector`);
              }
              i3 = r2.next();
            }
            let t4 = c3();
            if (s5.push({ matcher: t4, priority: e4 }), "," !== i3)
              break;
            i3 = r2.next();
          }
          return s5;
          function o2() {
            if ("-" === i3) {
              i3 = r2.next();
              const e4 = o2();
              return (t4) => !!e4 && !e4(t4);
            }
            if ("(" === i3) {
              i3 = r2.next();
              const e4 = function() {
                const e5 = [];
                let t4 = c3();
                for (; t4 && (e5.push(t4), "|" === i3 || "," === i3); ) {
                  do {
                    i3 = r2.next();
                  } while ("|" === i3 || "," === i3);
                  t4 = c3();
                }
                return (t5) => e5.some((e6) => e6(t5));
              }();
              return ")" === i3 && (i3 = r2.next()), e4;
            }
            if (n2(i3)) {
              const e4 = [];
              do {
                e4.push(i3), i3 = r2.next();
              } while (n2(i3));
              return (n22) => t32(e4, n22);
            }
            return null;
          }
          function c3() {
            const e4 = [];
            let t4 = o2();
            for (; t4; )
              e4.push(t4), t4 = o2();
            return (t5) => e4.every((e5) => e5(t5));
          }
        };
      }, 44: (e22, t22) => {
        Object.defineProperty(t22, "__esModule", { value: true }), t22.disposeOnigString = void 0, t22.disposeOnigString = function(e32) {
          "function" == typeof e32.dispose && e32.dispose();
        };
      }, 50: (e22, t22, n2) => {
        Object.defineProperty(t22, "__esModule", { value: true }), t22.parseRawGrammar = void 0;
        const s5 = n2(69), r2 = n2(350), i3 = n2(974);
        t22.parseRawGrammar = function(e32, t32 = null) {
          return null !== t32 && /\.json$/.test(t32) ? (n22 = e32, o2 = t32, r2.DebugFlags.InDebugMode ? i3.parseJSON(n22, o2, true) : JSON.parse(n22)) : function(e4, t4) {
            return r2.DebugFlags.InDebugMode ? s5.parseWithLocation(e4, t4, "$vscodeTextmateLocation") : s5.parsePLIST(e4);
          }(e32, t32);
          var n22, o2;
        };
      }, 69: (e22, t22) => {
        function n2(e32, t32, n22) {
          const s5 = e32.length;
          let r2 = 0, i3 = 1, o2 = 0;
          function c3(t4) {
            if (null === n22)
              r2 += t4;
            else
              for (; t4 > 0; )
                10 === e32.charCodeAt(r2) ? (r2++, i3++, o2 = 0) : (r2++, o2++), t4--;
          }
          function a4(e4) {
            null === n22 ? r2 = e4 : c3(e4 - r2);
          }
          function l2() {
            for (; r2 < s5; ) {
              let t4 = e32.charCodeAt(r2);
              if (32 !== t4 && 9 !== t4 && 13 !== t4 && 10 !== t4)
                break;
              c3(1);
            }
          }
          function u3(t4) {
            return e32.substr(r2, t4.length) === t4 && (c3(t4.length), true);
          }
          function h4(t4) {
            let n3 = e32.indexOf(t4, r2);
            a4(-1 !== n3 ? n3 + t4.length : s5);
          }
          function p2(t4) {
            let n3 = e32.indexOf(t4, r2);
            if (-1 !== n3) {
              let s22 = e32.substring(r2, n3);
              return a4(n3 + t4.length), s22;
            }
            {
              let t5 = e32.substr(r2);
              return a4(s5), t5;
            }
          }
          s5 > 0 && 65279 === e32.charCodeAt(0) && (r2 = 1);
          let d4 = 0, f2 = null, g2 = [], m4 = [], _2 = null;
          function b4(e4, t4) {
            g2.push(d4), m4.push(f2), d4 = e4, f2 = t4;
          }
          function y4() {
            if (0 === g2.length)
              return S4("illegal state stack");
            d4 = g2.pop(), f2 = m4.pop();
          }
          function S4(t4) {
            throw new Error("Near offset " + r2 + ": " + t4 + " ~~~" + e32.substr(r2, 50) + "~~~");
          }
          const k3 = function() {
            if (null === _2)
              return S4("missing <key>");
            let e4 = {};
            null !== n22 && (e4[n22] = { filename: t32, line: i3, char: o2 }), f2[_2] = e4, _2 = null, b4(1, e4);
          }, C2 = function() {
            if (null === _2)
              return S4("missing <key>");
            let e4 = [];
            f2[_2] = e4, _2 = null, b4(2, e4);
          }, R4 = function() {
            let e4 = {};
            null !== n22 && (e4[n22] = { filename: t32, line: i3, char: o2 }), f2.push(e4), b4(1, e4);
          }, A2 = function() {
            let e4 = [];
            f2.push(e4), b4(2, e4);
          };
          function w3() {
            if (1 !== d4)
              return S4("unexpected </dict>");
            y4();
          }
          function P2() {
            return 1 === d4 || 2 !== d4 ? S4("unexpected </array>") : void y4();
          }
          function I3(e4) {
            if (1 === d4) {
              if (null === _2)
                return S4("missing <key>");
              f2[_2] = e4, _2 = null;
            } else
              2 === d4 ? f2.push(e4) : f2 = e4;
          }
          function v2(e4) {
            if (isNaN(e4))
              return S4("cannot parse float");
            if (1 === d4) {
              if (null === _2)
                return S4("missing <key>");
              f2[_2] = e4, _2 = null;
            } else
              2 === d4 ? f2.push(e4) : f2 = e4;
          }
          function N3(e4) {
            if (isNaN(e4))
              return S4("cannot parse integer");
            if (1 === d4) {
              if (null === _2)
                return S4("missing <key>");
              f2[_2] = e4, _2 = null;
            } else
              2 === d4 ? f2.push(e4) : f2 = e4;
          }
          function T4(e4) {
            if (1 === d4) {
              if (null === _2)
                return S4("missing <key>");
              f2[_2] = e4, _2 = null;
            } else
              2 === d4 ? f2.push(e4) : f2 = e4;
          }
          function x3(e4) {
            if (1 === d4) {
              if (null === _2)
                return S4("missing <key>");
              f2[_2] = e4, _2 = null;
            } else
              2 === d4 ? f2.push(e4) : f2 = e4;
          }
          function G3(e4) {
            if (1 === d4) {
              if (null === _2)
                return S4("missing <key>");
              f2[_2] = e4, _2 = null;
            } else
              2 === d4 ? f2.push(e4) : f2 = e4;
          }
          function E3() {
            let e4 = p2(">"), t4 = false;
            return 47 === e4.charCodeAt(e4.length - 1) && (t4 = true, e4 = e4.substring(0, e4.length - 1)), { name: e4.trim(), isClosed: t4 };
          }
          function L3(e4) {
            if (e4.isClosed)
              return "";
            let t4 = p2("</");
            return h4(">"), t4.replace(/&#([0-9]+);/g, function(e5, t5) {
              return String.fromCodePoint(parseInt(t5, 10));
            }).replace(/&#x([0-9a-f]+);/g, function(e5, t5) {
              return String.fromCodePoint(parseInt(t5, 16));
            }).replace(/&amp;|&lt;|&gt;|&quot;|&apos;/g, function(e5) {
              switch (e5) {
                case "&amp;":
                  return "&";
                case "&lt;":
                  return "<";
                case "&gt;":
                  return ">";
                case "&quot;":
                  return '"';
                case "&apos;":
                  return "'";
              }
              return e5;
            });
          }
          for (; r2 < s5 && (l2(), !(r2 >= s5)); ) {
            const a22 = e32.charCodeAt(r2);
            if (c3(1), 60 !== a22)
              return S4("expected <");
            if (r2 >= s5)
              return S4("unexpected end of input");
            const p22 = e32.charCodeAt(r2);
            if (63 === p22) {
              c3(1), h4("?>");
              continue;
            }
            if (33 === p22) {
              if (c3(1), u3("--")) {
                h4("-->");
                continue;
              }
              h4(">");
              continue;
            }
            if (47 === p22) {
              if (c3(1), l2(), u3("plist")) {
                h4(">");
                continue;
              }
              if (u3("dict")) {
                h4(">"), w3();
                continue;
              }
              if (u3("array")) {
                h4(">"), P2();
                continue;
              }
              return S4("unexpected closed tag");
            }
            let g22 = E3();
            switch (g22.name) {
              case "dict":
                1 === d4 ? k3() : 2 === d4 ? R4() : (f2 = {}, null !== n22 && (f2[n22] = { filename: t32, line: i3, char: o2 }), b4(1, f2)), g22.isClosed && w3();
                continue;
              case "array":
                1 === d4 ? C2() : 2 === d4 ? A2() : (f2 = [], b4(2, f2)), g22.isClosed && P2();
                continue;
              case "key":
                M4 = L3(g22), 1 !== d4 ? S4("unexpected <key>") : null !== _2 ? S4("too many <key>") : _2 = M4;
                continue;
              case "string":
                I3(L3(g22));
                continue;
              case "real":
                v2(parseFloat(L3(g22)));
                continue;
              case "integer":
                N3(parseInt(L3(g22), 10));
                continue;
              case "date":
                T4(new Date(L3(g22)));
                continue;
              case "data":
                x3(L3(g22));
                continue;
              case "true":
                L3(g22), G3(true);
                continue;
              case "false":
                L3(g22), G3(false);
                continue;
            }
            if (!/^plist/.test(g22.name))
              return S4("unexpected opened tag " + g22.name);
          }
          var M4;
          return f2;
        }
        Object.defineProperty(t22, "__esModule", { value: true }), t22.parsePLIST = t22.parseWithLocation = void 0, t22.parseWithLocation = function(e32, t32, s5) {
          return n2(e32, t32, s5);
        }, t22.parsePLIST = function(e32) {
          return n2(e32, null, null);
        };
      }, 652: (e22, t22, n2) => {
        Object.defineProperty(t22, "__esModule", { value: true }), t22.SyncRegistry = void 0;
        const s5 = n2(391);
        t22.SyncRegistry = class {
          constructor(e32, t32) {
            this._onigLibPromise = t32, this._grammars = /* @__PURE__ */ new Map(), this._rawGrammars = /* @__PURE__ */ new Map(), this._injectionGrammars = /* @__PURE__ */ new Map(), this._theme = e32;
          }
          dispose() {
            for (const e32 of this._grammars.values())
              e32.dispose();
          }
          setTheme(e32) {
            this._theme = e32;
          }
          getColorMap() {
            return this._theme.getColorMap();
          }
          addGrammar(e32, t32) {
            this._rawGrammars.set(e32.scopeName, e32), t32 && this._injectionGrammars.set(e32.scopeName, t32);
          }
          lookup(e32) {
            return this._rawGrammars.get(e32);
          }
          injections(e32) {
            return this._injectionGrammars.get(e32);
          }
          getDefaults() {
            return this._theme.getDefaults();
          }
          themeMatch(e32) {
            return this._theme.match(e32);
          }
          async grammarForScopeName(e32, t32, n22, r2, i3) {
            if (!this._grammars.has(e32)) {
              let o2 = this._rawGrammars.get(e32);
              if (!o2)
                return null;
              this._grammars.set(e32, s5.createGrammar(e32, o2, t32, n22, r2, i3, this, await this._onigLibPromise));
            }
            return this._grammars.get(e32);
          }
        };
      }, 792: (e22, t22, n2) => {
        Object.defineProperty(t22, "__esModule", { value: true }), t22.CompiledRule = t22.RegExpSourceList = t22.RegExpSource = t22.RuleFactory = t22.BeginWhileRule = t22.BeginEndRule = t22.IncludeOnlyRule = t22.MatchRule = t22.CaptureRule = t22.Rule = t22.ruleIdToNumber = t22.ruleIdFromNumber = t22.whileRuleId = t22.endRuleId = void 0;
        const s5 = n2(878), r2 = n2(965), i3 = /\\(\d+)/, o2 = /\\(\d+)/g;
        t22.endRuleId = -1, t22.whileRuleId = -2, t22.ruleIdFromNumber = function(e32) {
          return e32;
        }, t22.ruleIdToNumber = function(e32) {
          return e32;
        };
        class c3 {
          constructor(e32, t32, n22, r22) {
            this.$location = e32, this.id = t32, this._name = n22 || null, this._nameIsCapturing = s5.RegexSource.hasCaptures(this._name), this._contentName = r22 || null, this._contentNameIsCapturing = s5.RegexSource.hasCaptures(this._contentName);
          }
          get debugName() {
            const e32 = this.$location ? `${s5.basename(this.$location.filename)}:${this.$location.line}` : "unknown";
            return `${this.constructor.name}#${this.id} @ ${e32}`;
          }
          getName(e32, t32) {
            return this._nameIsCapturing && null !== this._name && null !== e32 && null !== t32 ? s5.RegexSource.replaceCaptures(this._name, e32, t32) : this._name;
          }
          getContentName(e32, t32) {
            return this._contentNameIsCapturing && null !== this._contentName ? s5.RegexSource.replaceCaptures(this._contentName, e32, t32) : this._contentName;
          }
        }
        t22.Rule = c3;
        class a4 extends c3 {
          constructor(e32, t32, n22, s22, r22) {
            super(e32, t32, n22, s22), this.retokenizeCapturedWithRuleId = r22;
          }
          dispose() {
          }
          collectPatterns(e32, t32) {
            throw new Error("Not supported!");
          }
          compile(e32, t32) {
            throw new Error("Not supported!");
          }
          compileAG(e32, t32, n22, s22) {
            throw new Error("Not supported!");
          }
        }
        t22.CaptureRule = a4;
        class l2 extends c3 {
          constructor(e32, t32, n22, s22, r22) {
            super(e32, t32, n22, null), this._match = new f2(s22, this.id), this.captures = r22, this._cachedCompiledPatterns = null;
          }
          dispose() {
            this._cachedCompiledPatterns && (this._cachedCompiledPatterns.dispose(), this._cachedCompiledPatterns = null);
          }
          get debugMatchRegExp() {
            return `${this._match.source}`;
          }
          collectPatterns(e32, t32) {
            t32.push(this._match);
          }
          compile(e32, t32) {
            return this._getCachedCompiledPatterns(e32).compile(e32);
          }
          compileAG(e32, t32, n22, s22) {
            return this._getCachedCompiledPatterns(e32).compileAG(e32, n22, s22);
          }
          _getCachedCompiledPatterns(e32) {
            return this._cachedCompiledPatterns || (this._cachedCompiledPatterns = new g2(), this.collectPatterns(e32, this._cachedCompiledPatterns)), this._cachedCompiledPatterns;
          }
        }
        t22.MatchRule = l2;
        class u3 extends c3 {
          constructor(e32, t32, n22, s22, r22) {
            super(e32, t32, n22, s22), this.patterns = r22.patterns, this.hasMissingPatterns = r22.hasMissingPatterns, this._cachedCompiledPatterns = null;
          }
          dispose() {
            this._cachedCompiledPatterns && (this._cachedCompiledPatterns.dispose(), this._cachedCompiledPatterns = null);
          }
          collectPatterns(e32, t32) {
            for (const n22 of this.patterns)
              e32.getRule(n22).collectPatterns(e32, t32);
          }
          compile(e32, t32) {
            return this._getCachedCompiledPatterns(e32).compile(e32);
          }
          compileAG(e32, t32, n22, s22) {
            return this._getCachedCompiledPatterns(e32).compileAG(e32, n22, s22);
          }
          _getCachedCompiledPatterns(e32) {
            return this._cachedCompiledPatterns || (this._cachedCompiledPatterns = new g2(), this.collectPatterns(e32, this._cachedCompiledPatterns)), this._cachedCompiledPatterns;
          }
        }
        t22.IncludeOnlyRule = u3;
        class h4 extends c3 {
          constructor(e32, t32, n22, s22, r22, i22, o22, c22, a22, l22) {
            super(e32, t32, n22, s22), this._begin = new f2(r22, this.id), this.beginCaptures = i22, this._end = new f2(o22 || "￿", -1), this.endHasBackReferences = this._end.hasBackReferences, this.endCaptures = c22, this.applyEndPatternLast = a22 || false, this.patterns = l22.patterns, this.hasMissingPatterns = l22.hasMissingPatterns, this._cachedCompiledPatterns = null;
          }
          dispose() {
            this._cachedCompiledPatterns && (this._cachedCompiledPatterns.dispose(), this._cachedCompiledPatterns = null);
          }
          get debugBeginRegExp() {
            return `${this._begin.source}`;
          }
          get debugEndRegExp() {
            return `${this._end.source}`;
          }
          getEndWithResolvedBackReferences(e32, t32) {
            return this._end.resolveBackReferences(e32, t32);
          }
          collectPatterns(e32, t32) {
            t32.push(this._begin);
          }
          compile(e32, t32) {
            return this._getCachedCompiledPatterns(e32, t32).compile(e32);
          }
          compileAG(e32, t32, n22, s22) {
            return this._getCachedCompiledPatterns(e32, t32).compileAG(e32, n22, s22);
          }
          _getCachedCompiledPatterns(e32, t32) {
            if (!this._cachedCompiledPatterns) {
              this._cachedCompiledPatterns = new g2();
              for (const t4 of this.patterns)
                e32.getRule(t4).collectPatterns(e32, this._cachedCompiledPatterns);
              this.applyEndPatternLast ? this._cachedCompiledPatterns.push(this._end.hasBackReferences ? this._end.clone() : this._end) : this._cachedCompiledPatterns.unshift(this._end.hasBackReferences ? this._end.clone() : this._end);
            }
            return this._end.hasBackReferences && (this.applyEndPatternLast ? this._cachedCompiledPatterns.setSource(this._cachedCompiledPatterns.length() - 1, t32) : this._cachedCompiledPatterns.setSource(0, t32)), this._cachedCompiledPatterns;
          }
        }
        t22.BeginEndRule = h4;
        class p2 extends c3 {
          constructor(e32, n22, s22, r22, i22, o22, c22, a22, l22) {
            super(e32, n22, s22, r22), this._begin = new f2(i22, this.id), this.beginCaptures = o22, this.whileCaptures = a22, this._while = new f2(c22, t22.whileRuleId), this.whileHasBackReferences = this._while.hasBackReferences, this.patterns = l22.patterns, this.hasMissingPatterns = l22.hasMissingPatterns, this._cachedCompiledPatterns = null, this._cachedCompiledWhilePatterns = null;
          }
          dispose() {
            this._cachedCompiledPatterns && (this._cachedCompiledPatterns.dispose(), this._cachedCompiledPatterns = null), this._cachedCompiledWhilePatterns && (this._cachedCompiledWhilePatterns.dispose(), this._cachedCompiledWhilePatterns = null);
          }
          get debugBeginRegExp() {
            return `${this._begin.source}`;
          }
          get debugWhileRegExp() {
            return `${this._while.source}`;
          }
          getWhileWithResolvedBackReferences(e32, t32) {
            return this._while.resolveBackReferences(e32, t32);
          }
          collectPatterns(e32, t32) {
            t32.push(this._begin);
          }
          compile(e32, t32) {
            return this._getCachedCompiledPatterns(e32).compile(e32);
          }
          compileAG(e32, t32, n22, s22) {
            return this._getCachedCompiledPatterns(e32).compileAG(e32, n22, s22);
          }
          _getCachedCompiledPatterns(e32) {
            if (!this._cachedCompiledPatterns) {
              this._cachedCompiledPatterns = new g2();
              for (const t32 of this.patterns)
                e32.getRule(t32).collectPatterns(e32, this._cachedCompiledPatterns);
            }
            return this._cachedCompiledPatterns;
          }
          compileWhile(e32, t32) {
            return this._getCachedCompiledWhilePatterns(e32, t32).compile(e32);
          }
          compileWhileAG(e32, t32, n22, s22) {
            return this._getCachedCompiledWhilePatterns(e32, t32).compileAG(e32, n22, s22);
          }
          _getCachedCompiledWhilePatterns(e32, t32) {
            return this._cachedCompiledWhilePatterns || (this._cachedCompiledWhilePatterns = new g2(), this._cachedCompiledWhilePatterns.push(this._while.hasBackReferences ? this._while.clone() : this._while)), this._while.hasBackReferences && this._cachedCompiledWhilePatterns.setSource(0, t32 || "￿"), this._cachedCompiledWhilePatterns;
          }
        }
        t22.BeginWhileRule = p2;
        class d4 {
          static createCaptureRule(e32, t32, n22, s22, r22) {
            return e32.registerRule((e4) => new a4(t32, e4, n22, s22, r22));
          }
          static getCompiledRuleId(e32, t32, n22) {
            return e32.id || t32.registerRule((r22) => {
              if (e32.id = r22, e32.match)
                return new l2(e32.$vscodeTextmateLocation, e32.id, e32.name, e32.match, d4._compileCaptures(e32.captures, t32, n22));
              if (void 0 === e32.begin) {
                e32.repository && (n22 = s5.mergeObjects({}, n22, e32.repository));
                let r3 = e32.patterns;
                return void 0 === r3 && e32.include && (r3 = [{ include: e32.include }]), new u3(e32.$vscodeTextmateLocation, e32.id, e32.name, e32.contentName, d4._compilePatterns(r3, t32, n22));
              }
              return e32.while ? new p2(e32.$vscodeTextmateLocation, e32.id, e32.name, e32.contentName, e32.begin, d4._compileCaptures(e32.beginCaptures || e32.captures, t32, n22), e32.while, d4._compileCaptures(e32.whileCaptures || e32.captures, t32, n22), d4._compilePatterns(e32.patterns, t32, n22)) : new h4(e32.$vscodeTextmateLocation, e32.id, e32.name, e32.contentName, e32.begin, d4._compileCaptures(e32.beginCaptures || e32.captures, t32, n22), e32.end, d4._compileCaptures(e32.endCaptures || e32.captures, t32, n22), e32.applyEndPatternLast, d4._compilePatterns(e32.patterns, t32, n22));
            }), e32.id;
          }
          static _compileCaptures(e32, t32, n22) {
            let s22 = [];
            if (e32) {
              let r22 = 0;
              for (const t4 in e32) {
                if ("$vscodeTextmateLocation" === t4)
                  continue;
                const e4 = parseInt(t4, 10);
                e4 > r22 && (r22 = e4);
              }
              for (let e4 = 0; e4 <= r22; e4++)
                s22[e4] = null;
              for (const r3 in e32) {
                if ("$vscodeTextmateLocation" === r3)
                  continue;
                const i22 = parseInt(r3, 10);
                let o22 = 0;
                e32[r3].patterns && (o22 = d4.getCompiledRuleId(e32[r3], t32, n22)), s22[i22] = d4.createCaptureRule(t32, e32[r3].$vscodeTextmateLocation, e32[r3].name, e32[r3].contentName, o22);
              }
            }
            return s22;
          }
          static _compilePatterns(e32, t32, n22) {
            let s22 = [];
            if (e32)
              for (let i22 = 0, o22 = e32.length; i22 < o22; i22++) {
                const o3 = e32[i22];
                let c22 = -1;
                if (o3.include) {
                  const e4 = r2.parseInclude(o3.include);
                  switch (e4.kind) {
                    case 0:
                    case 1:
                      c22 = d4.getCompiledRuleId(n22[o3.include], t32, n22);
                      break;
                    case 2:
                      let s32 = n22[e4.ruleName];
                      s32 && (c22 = d4.getCompiledRuleId(s32, t32, n22));
                      break;
                    case 3:
                    case 4:
                      const r22 = e4.scopeName, i32 = 4 === e4.kind ? e4.ruleName : null, a22 = t32.getExternalGrammar(r22, n22);
                      if (a22)
                        if (i32) {
                          let e5 = a22.repository[i32];
                          e5 && (c22 = d4.getCompiledRuleId(e5, t32, a22.repository));
                        } else
                          c22 = d4.getCompiledRuleId(a22.repository.$self, t32, a22.repository);
                  }
                } else
                  c22 = d4.getCompiledRuleId(o3, t32, n22);
                if (-1 !== c22) {
                  const e4 = t32.getRule(c22);
                  let n3 = false;
                  if ((e4 instanceof u3 || e4 instanceof h4 || e4 instanceof p2) && e4.hasMissingPatterns && 0 === e4.patterns.length && (n3 = true), n3)
                    continue;
                  s22.push(c22);
                }
              }
            return { patterns: s22, hasMissingPatterns: (e32 ? e32.length : 0) !== s22.length };
          }
        }
        t22.RuleFactory = d4;
        class f2 {
          constructor(e32, t32) {
            if (e32) {
              const t4 = e32.length;
              let n22 = 0, s22 = [], r22 = false;
              for (let i22 = 0; i22 < t4; i22++)
                if ("\\" === e32.charAt(i22) && i22 + 1 < t4) {
                  const t5 = e32.charAt(i22 + 1);
                  "z" === t5 ? (s22.push(e32.substring(n22, i22)), s22.push("$(?!\\n)(?<!\\n)"), n22 = i22 + 2) : "A" !== t5 && "G" !== t5 || (r22 = true), i22++;
                }
              this.hasAnchor = r22, 0 === n22 ? this.source = e32 : (s22.push(e32.substring(n22, t4)), this.source = s22.join(""));
            } else
              this.hasAnchor = false, this.source = e32;
            this.hasAnchor ? this._anchorCache = this._buildAnchorCache() : this._anchorCache = null, this.ruleId = t32, this.hasBackReferences = i3.test(this.source);
          }
          clone() {
            return new f2(this.source, this.ruleId);
          }
          setSource(e32) {
            this.source !== e32 && (this.source = e32, this.hasAnchor && (this._anchorCache = this._buildAnchorCache()));
          }
          resolveBackReferences(e32, t32) {
            let n22 = t32.map((t4) => e32.substring(t4.start, t4.end));
            return o2.lastIndex = 0, this.source.replace(o2, (e4, t4) => s5.escapeRegExpCharacters(n22[parseInt(t4, 10)] || ""));
          }
          _buildAnchorCache() {
            let e32, t32, n22, s22, r22 = [], i22 = [], o22 = [], c22 = [];
            for (e32 = 0, t32 = this.source.length; e32 < t32; e32++)
              n22 = this.source.charAt(e32), r22[e32] = n22, i22[e32] = n22, o22[e32] = n22, c22[e32] = n22, "\\" === n22 && e32 + 1 < t32 && (s22 = this.source.charAt(e32 + 1), "A" === s22 ? (r22[e32 + 1] = "￿", i22[e32 + 1] = "￿", o22[e32 + 1] = "A", c22[e32 + 1] = "A") : "G" === s22 ? (r22[e32 + 1] = "￿", i22[e32 + 1] = "G", o22[e32 + 1] = "￿", c22[e32 + 1] = "G") : (r22[e32 + 1] = s22, i22[e32 + 1] = s22, o22[e32 + 1] = s22, c22[e32 + 1] = s22), e32++);
            return { A0_G0: r22.join(""), A0_G1: i22.join(""), A1_G0: o22.join(""), A1_G1: c22.join("") };
          }
          resolveAnchors(e32, t32) {
            return this.hasAnchor && this._anchorCache ? e32 ? t32 ? this._anchorCache.A1_G1 : this._anchorCache.A1_G0 : t32 ? this._anchorCache.A0_G1 : this._anchorCache.A0_G0 : this.source;
          }
        }
        t22.RegExpSource = f2;
        class g2 {
          constructor() {
            this._items = [], this._hasAnchors = false, this._cached = null, this._anchorCache = { A0_G0: null, A0_G1: null, A1_G0: null, A1_G1: null };
          }
          dispose() {
            this._disposeCaches();
          }
          _disposeCaches() {
            this._cached && (this._cached.dispose(), this._cached = null), this._anchorCache.A0_G0 && (this._anchorCache.A0_G0.dispose(), this._anchorCache.A0_G0 = null), this._anchorCache.A0_G1 && (this._anchorCache.A0_G1.dispose(), this._anchorCache.A0_G1 = null), this._anchorCache.A1_G0 && (this._anchorCache.A1_G0.dispose(), this._anchorCache.A1_G0 = null), this._anchorCache.A1_G1 && (this._anchorCache.A1_G1.dispose(), this._anchorCache.A1_G1 = null);
          }
          push(e32) {
            this._items.push(e32), this._hasAnchors = this._hasAnchors || e32.hasAnchor;
          }
          unshift(e32) {
            this._items.unshift(e32), this._hasAnchors = this._hasAnchors || e32.hasAnchor;
          }
          length() {
            return this._items.length;
          }
          setSource(e32, t32) {
            this._items[e32].source !== t32 && (this._disposeCaches(), this._items[e32].setSource(t32));
          }
          compile(e32) {
            if (!this._cached) {
              let t32 = this._items.map((e4) => e4.source);
              this._cached = new m4(e32, t32, this._items.map((e4) => e4.ruleId));
            }
            return this._cached;
          }
          compileAG(e32, t32, n22) {
            return this._hasAnchors ? t32 ? n22 ? (this._anchorCache.A1_G1 || (this._anchorCache.A1_G1 = this._resolveAnchors(e32, t32, n22)), this._anchorCache.A1_G1) : (this._anchorCache.A1_G0 || (this._anchorCache.A1_G0 = this._resolveAnchors(e32, t32, n22)), this._anchorCache.A1_G0) : n22 ? (this._anchorCache.A0_G1 || (this._anchorCache.A0_G1 = this._resolveAnchors(e32, t32, n22)), this._anchorCache.A0_G1) : (this._anchorCache.A0_G0 || (this._anchorCache.A0_G0 = this._resolveAnchors(e32, t32, n22)), this._anchorCache.A0_G0) : this.compile(e32);
          }
          _resolveAnchors(e32, t32, n22) {
            let s22 = this._items.map((e4) => e4.resolveAnchors(t32, n22));
            return new m4(e32, s22, this._items.map((e4) => e4.ruleId));
          }
        }
        t22.RegExpSourceList = g2;
        class m4 {
          constructor(e32, t32, n22) {
            this.regExps = t32, this.rules = n22, this.scanner = e32.createOnigScanner(t32);
          }
          dispose() {
            "function" == typeof this.scanner.dispose && this.scanner.dispose();
          }
          toString() {
            const e32 = [];
            for (let t32 = 0, n22 = this.rules.length; t32 < n22; t32++)
              e32.push("   - " + this.rules[t32] + ": " + this.regExps[t32]);
            return e32.join("\n");
          }
          findNextMatchSync(e32, t32, n22) {
            const s22 = this.scanner.findNextMatchSync(e32, t32, n22);
            return s22 ? { ruleId: this.rules[s22.index], captureIndices: s22.captureIndices } : null;
          }
        }
        t22.CompiledRule = m4;
      }, 583: (e22, t22, n2) => {
        Object.defineProperty(t22, "__esModule", { value: true }), t22.ThemeTrieElement = t22.ThemeTrieElementRule = t22.ColorMap = t22.fontStyleToString = t22.ParsedThemeRule = t22.parseTheme = t22.StyleAttributes = t22.ScopeStack = t22.Theme = void 0;
        const s5 = n2(878);
        class r2 {
          constructor(e32, t32, n22) {
            this._colorMap = e32, this._defaults = t32, this._root = n22, this._cachedMatchRoot = new s5.CachedFn((e4) => this._root.match(e4));
          }
          static createFromRawTheme(e32, t32) {
            return this.createFromParsedTheme(a4(e32), t32);
          }
          static createFromParsedTheme(e32, t32) {
            return function(e4, t4) {
              e4.sort((e5, t5) => {
                let n3 = s5.strcmp(e5.scope, t5.scope);
                return 0 !== n3 ? n3 : (n3 = s5.strArrCmp(e5.parentScopes, t5.parentScopes), 0 !== n3 ? n3 : e5.index - t5.index);
              });
              let n22 = 0, i22 = "#000000", o22 = "#ffffff";
              for (; e4.length >= 1 && "" === e4[0].scope; ) {
                let t5 = e4.shift();
                -1 !== t5.fontStyle && (n22 = t5.fontStyle), null !== t5.foreground && (i22 = t5.foreground), null !== t5.background && (o22 = t5.background);
              }
              let a22 = new u3(t4), l22 = new c3(n22, a22.getId(i22), a22.getId(o22)), d4 = new p2(new h4(0, null, -1, 0, 0), []);
              for (let t5 = 0, n3 = e4.length; t5 < n3; t5++) {
                let n4 = e4[t5];
                d4.insert(0, n4.scope, n4.parentScopes, n4.fontStyle, a22.getId(n4.foreground), a22.getId(n4.background));
              }
              return new r2(a22, l22, d4);
            }(e32, t32);
          }
          getColorMap() {
            return this._colorMap.getColorMap();
          }
          getDefaults() {
            return this._defaults;
          }
          match(e32) {
            if (null === e32)
              return this._defaults;
            const t32 = e32.scopeName, n22 = this._cachedMatchRoot.get(t32).find((t4) => function(e4, t5) {
              if (null === t5)
                return true;
              let n3 = 0, s22 = t5[n3];
              for (; e4; ) {
                if (o2(e4.scopeName, s22)) {
                  if (n3++, n3 === t5.length)
                    return true;
                  s22 = t5[n3];
                }
                e4 = e4.parent;
              }
              return false;
            }(e32.parent, t4.parentScopes));
            return n22 ? new c3(n22.fontStyle, n22.foreground, n22.background) : null;
          }
        }
        t22.Theme = r2;
        class i3 {
          constructor(e32, t32) {
            this.parent = e32, this.scopeName = t32;
          }
          static from(...e32) {
            let t32 = null;
            for (let n22 = 0; n22 < e32.length; n22++)
              t32 = new i3(t32, e32[n22]);
            return t32;
          }
          push(e32) {
            return new i3(this, e32);
          }
          getSegments() {
            let e32 = this;
            const t32 = [];
            for (; e32; )
              t32.push(e32.scopeName), e32 = e32.parent;
            return t32.reverse(), t32;
          }
          toString() {
            return this.getSegments().join(" ");
          }
        }
        function o2(e32, t32) {
          return t32 === e32 || e32.startsWith(t32) && "." === e32[t32.length];
        }
        t22.ScopeStack = i3;
        class c3 {
          constructor(e32, t32, n22) {
            this.fontStyle = e32, this.foregroundId = t32, this.backgroundId = n22;
          }
        }
        function a4(e32) {
          if (!e32)
            return [];
          if (!e32.settings || !Array.isArray(e32.settings))
            return [];
          let t32 = e32.settings, n22 = [], r22 = 0;
          for (let e4 = 0, i22 = t32.length; e4 < i22; e4++) {
            let i32, o22 = t32[e4];
            if (!o22.settings)
              continue;
            if ("string" == typeof o22.scope) {
              let e5 = o22.scope;
              e5 = e5.replace(/^[,]+/, ""), e5 = e5.replace(/[,]+$/, ""), i32 = e5.split(",");
            } else
              i32 = Array.isArray(o22.scope) ? o22.scope : [""];
            let c22 = -1;
            if ("string" == typeof o22.settings.fontStyle) {
              c22 = 0;
              let e5 = o22.settings.fontStyle.split(" ");
              for (let t4 = 0, n3 = e5.length; t4 < n3; t4++)
                switch (e5[t4]) {
                  case "italic":
                    c22 |= 1;
                    break;
                  case "bold":
                    c22 |= 2;
                    break;
                  case "underline":
                    c22 |= 4;
                    break;
                  case "strikethrough":
                    c22 |= 8;
                }
            }
            let a22 = null;
            "string" == typeof o22.settings.foreground && s5.isValidHexColor(o22.settings.foreground) && (a22 = o22.settings.foreground);
            let u22 = null;
            "string" == typeof o22.settings.background && s5.isValidHexColor(o22.settings.background) && (u22 = o22.settings.background);
            for (let t4 = 0, s22 = i32.length; t4 < s22; t4++) {
              let s32 = i32[t4].trim().split(" "), o3 = s32[s32.length - 1], h22 = null;
              s32.length > 1 && (h22 = s32.slice(0, s32.length - 1), h22.reverse()), n22[r22++] = new l2(o3, h22, e4, c22, a22, u22);
            }
          }
          return n22;
        }
        t22.StyleAttributes = c3, t22.parseTheme = a4;
        class l2 {
          constructor(e32, t32, n22, s22, r22, i22) {
            this.scope = e32, this.parentScopes = t32, this.index = n22, this.fontStyle = s22, this.foreground = r22, this.background = i22;
          }
        }
        t22.ParsedThemeRule = l2, t22.fontStyleToString = function(e32) {
          if (-1 === e32)
            return "not set";
          let t32 = "";
          return 1 & e32 && (t32 += "italic "), 2 & e32 && (t32 += "bold "), 4 & e32 && (t32 += "underline "), 8 & e32 && (t32 += "strikethrough "), "" === t32 && (t32 = "none"), t32.trim();
        };
        class u3 {
          constructor(e32) {
            if (this._lastColorId = 0, this._id2color = [], this._color2id = /* @__PURE__ */ Object.create(null), Array.isArray(e32)) {
              this._isFrozen = true;
              for (let t32 = 0, n22 = e32.length; t32 < n22; t32++)
                this._color2id[e32[t32]] = t32, this._id2color[t32] = e32[t32];
            } else
              this._isFrozen = false;
          }
          getId(e32) {
            if (null === e32)
              return 0;
            e32 = e32.toUpperCase();
            let t32 = this._color2id[e32];
            if (t32)
              return t32;
            if (this._isFrozen)
              throw new Error(`Missing color in color map - ${e32}`);
            return t32 = ++this._lastColorId, this._color2id[e32] = t32, this._id2color[t32] = e32, t32;
          }
          getColorMap() {
            return this._id2color.slice(0);
          }
        }
        t22.ColorMap = u3;
        class h4 {
          constructor(e32, t32, n22, s22, r22) {
            this.scopeDepth = e32, this.parentScopes = t32, this.fontStyle = n22, this.foreground = s22, this.background = r22;
          }
          clone() {
            return new h4(this.scopeDepth, this.parentScopes, this.fontStyle, this.foreground, this.background);
          }
          static cloneArr(e32) {
            let t32 = [];
            for (let n22 = 0, s22 = e32.length; n22 < s22; n22++)
              t32[n22] = e32[n22].clone();
            return t32;
          }
          acceptOverwrite(e32, t32, n22, s22) {
            this.scopeDepth > e32 ? console.log("how did this happen?") : this.scopeDepth = e32, -1 !== t32 && (this.fontStyle = t32), 0 !== n22 && (this.foreground = n22), 0 !== s22 && (this.background = s22);
          }
        }
        t22.ThemeTrieElementRule = h4;
        class p2 {
          constructor(e32, t32 = [], n22 = {}) {
            this._mainRule = e32, this._children = n22, this._rulesWithParentScopes = t32;
          }
          static _sortBySpecificity(e32) {
            return 1 === e32.length || e32.sort(this._cmpBySpecificity), e32;
          }
          static _cmpBySpecificity(e32, t32) {
            if (e32.scopeDepth === t32.scopeDepth) {
              const n22 = e32.parentScopes, s22 = t32.parentScopes;
              let r22 = null === n22 ? 0 : n22.length, i22 = null === s22 ? 0 : s22.length;
              if (r22 === i22)
                for (let e4 = 0; e4 < r22; e4++) {
                  const t4 = n22[e4].length, r3 = s22[e4].length;
                  if (t4 !== r3)
                    return r3 - t4;
                }
              return i22 - r22;
            }
            return t32.scopeDepth - e32.scopeDepth;
          }
          match(e32) {
            if ("" === e32)
              return p2._sortBySpecificity([].concat(this._mainRule).concat(this._rulesWithParentScopes));
            let t32, n22, s22 = e32.indexOf(".");
            return -1 === s22 ? (t32 = e32, n22 = "") : (t32 = e32.substring(0, s22), n22 = e32.substring(s22 + 1)), this._children.hasOwnProperty(t32) ? this._children[t32].match(n22) : p2._sortBySpecificity([].concat(this._mainRule).concat(this._rulesWithParentScopes));
          }
          insert(e32, t32, n22, s22, r22, i22) {
            if ("" === t32)
              return void this._doInsertHere(e32, n22, s22, r22, i22);
            let o22, c22, a22, l22 = t32.indexOf(".");
            -1 === l22 ? (o22 = t32, c22 = "") : (o22 = t32.substring(0, l22), c22 = t32.substring(l22 + 1)), this._children.hasOwnProperty(o22) ? a22 = this._children[o22] : (a22 = new p2(this._mainRule.clone(), h4.cloneArr(this._rulesWithParentScopes)), this._children[o22] = a22), a22.insert(e32 + 1, c22, n22, s22, r22, i22);
          }
          _doInsertHere(e32, t32, n22, r22, i22) {
            if (null !== t32) {
              for (let o22 = 0, c22 = this._rulesWithParentScopes.length; o22 < c22; o22++) {
                let c32 = this._rulesWithParentScopes[o22];
                if (0 === s5.strArrCmp(c32.parentScopes, t32))
                  return void c32.acceptOverwrite(e32, n22, r22, i22);
              }
              -1 === n22 && (n22 = this._mainRule.fontStyle), 0 === r22 && (r22 = this._mainRule.foreground), 0 === i22 && (i22 = this._mainRule.background), this._rulesWithParentScopes.push(new h4(e32, t32, n22, r22, i22));
            } else
              this._mainRule.acceptOverwrite(e32, n22, r22, i22);
          }
        }
        t22.ThemeTrieElement = p2;
      }, 878: (e22, t22) => {
        function n2(e32) {
          return Array.isArray(e32) ? function(e4) {
            let t32 = [];
            for (let s22 = 0, r22 = e4.length; s22 < r22; s22++)
              t32[s22] = n2(e4[s22]);
            return t32;
          }(e32) : "object" == typeof e32 ? function(e4) {
            let t32 = {};
            for (let s22 in e4)
              t32[s22] = n2(e4[s22]);
            return t32;
          }(e32) : e32;
        }
        Object.defineProperty(t22, "__esModule", { value: true }), t22.performanceNow = t22.CachedFn = t22.escapeRegExpCharacters = t22.isValidHexColor = t22.strArrCmp = t22.strcmp = t22.RegexSource = t22.basename = t22.mergeObjects = t22.clone = void 0, t22.clone = function(e32) {
          return n2(e32);
        }, t22.mergeObjects = function(e32, ...t32) {
          return t32.forEach((t4) => {
            for (let n22 in t4)
              e32[n22] = t4[n22];
          }), e32;
        }, t22.basename = function e32(t32) {
          const n22 = ~t32.lastIndexOf("/") || ~t32.lastIndexOf("\\");
          return 0 === n22 ? t32 : ~n22 == t32.length - 1 ? e32(t32.substring(0, t32.length - 1)) : t32.substr(1 + ~n22);
        };
        let s5 = /\$(\d+)|\${(\d+):\/(downcase|upcase)}/g;
        function r2(e32, t32) {
          return e32 < t32 ? -1 : e32 > t32 ? 1 : 0;
        }
        t22.RegexSource = class {
          static hasCaptures(e32) {
            return null !== e32 && (s5.lastIndex = 0, s5.test(e32));
          }
          static replaceCaptures(e32, t32, n22) {
            return e32.replace(s5, (e4, s22, r22, i3) => {
              let o2 = n22[parseInt(s22 || r22, 10)];
              if (!o2)
                return e4;
              {
                let e5 = t32.substring(o2.start, o2.end);
                for (; "." === e5[0]; )
                  e5 = e5.substring(1);
                switch (i3) {
                  case "downcase":
                    return e5.toLowerCase();
                  case "upcase":
                    return e5.toUpperCase();
                  default:
                    return e5;
                }
              }
            });
          }
        }, t22.strcmp = r2, t22.strArrCmp = function(e32, t32) {
          if (null === e32 && null === t32)
            return 0;
          if (!e32)
            return -1;
          if (!t32)
            return 1;
          let n22 = e32.length, s22 = t32.length;
          if (n22 === s22) {
            for (let s32 = 0; s32 < n22; s32++) {
              let n3 = r2(e32[s32], t32[s32]);
              if (0 !== n3)
                return n3;
            }
            return 0;
          }
          return n22 - s22;
        }, t22.isValidHexColor = function(e32) {
          return !!(/^#[0-9a-f]{6}$/i.test(e32) || /^#[0-9a-f]{8}$/i.test(e32) || /^#[0-9a-f]{3}$/i.test(e32) || /^#[0-9a-f]{4}$/i.test(e32));
        }, t22.escapeRegExpCharacters = function(e32) {
          return e32.replace(/[\-\\\{\}\*\+\?\|\^\$\.\,\[\]\(\)\#\s]/g, "\\$&");
        }, t22.CachedFn = class {
          constructor(e32) {
            this.fn = e32, this.cache = /* @__PURE__ */ new Map();
          }
          get(e32) {
            if (this.cache.has(e32))
              return this.cache.get(e32);
            const t32 = this.fn(e32);
            return this.cache.set(e32, t32), t32;
          }
        }, t22.performanceNow = "undefined" == typeof performance ? function() {
          return Date.now();
        } : function() {
          return performance.now();
        };
      } }, t3 = {};
      return function n2(s5) {
        var r2 = t3[s5];
        if (void 0 !== r2)
          return r2.exports;
        var i3 = t3[s5] = { exports: {} };
        return e3[s5].call(i3.exports, i3, i3.exports, n2), i3.exports;
      }(787);
    })();
  });
})(main);
const languages = [
  {
    id: "abap",
    scopeName: "source.abap",
    path: "abap.tmLanguage.json",
    samplePath: "abap.sample"
  },
  {
    id: "actionscript-3",
    scopeName: "source.actionscript.3",
    path: "actionscript-3.tmLanguage.json",
    samplePath: "actionscript-3.sample"
  },
  {
    id: "ada",
    scopeName: "source.ada",
    path: "ada.tmLanguage.json",
    samplePath: "ada.sample"
  },
  {
    id: "apache",
    scopeName: "source.apacheconf",
    path: "apache.tmLanguage.json"
  },
  {
    id: "apex",
    scopeName: "source.apex",
    path: "apex.tmLanguage.json",
    samplePath: "apex.sample"
  },
  {
    id: "apl",
    scopeName: "source.apl",
    path: "apl.tmLanguage.json",
    embeddedLangs: ["html", "xml", "css", "javascript", "json"]
  },
  {
    id: "applescript",
    scopeName: "source.applescript",
    path: "applescript.tmLanguage.json",
    samplePath: "applescript.sample"
  },
  {
    id: "asm",
    scopeName: "source.asm.x86_64",
    path: "asm.tmLanguage.json",
    samplePath: "asm.sample"
  },
  {
    id: "astro",
    scopeName: "source.astro",
    path: "astro.tmLanguage.json",
    samplePath: "astro.sample",
    embeddedLangs: ["json", "javascript", "typescript", "tsx", "css", "less", "sass", "scss", "stylus"]
  },
  {
    id: "awk",
    scopeName: "source.awk",
    path: "awk.tmLanguage.json",
    samplePath: "awk.sample"
  },
  {
    id: "ballerina",
    scopeName: "source.ballerina",
    path: "ballerina.tmLanguage.json",
    samplePath: "ballerina.sample"
  },
  {
    id: "bat",
    scopeName: "source.batchfile",
    path: "bat.tmLanguage.json",
    samplePath: "bat.sample",
    aliases: ["batch"]
  },
  {
    id: "berry",
    scopeName: "source.berry",
    path: "berry.tmLanguage.json",
    samplePath: "berry.sample",
    aliases: ["be"]
  },
  {
    id: "bibtex",
    scopeName: "text.bibtex",
    path: "bibtex.tmLanguage.json"
  },
  {
    id: "bicep",
    scopeName: "source.bicep",
    path: "bicep.tmLanguage.json",
    samplePath: "bicep.sample"
  },
  {
    id: "blade",
    scopeName: "text.html.php.blade",
    path: "blade.tmLanguage.json",
    samplePath: "blade.sample",
    embeddedLangs: ["html", "xml", "sql", "javascript", "json", "css"]
  },
  {
    id: "c",
    scopeName: "source.c",
    path: "c.tmLanguage.json",
    samplePath: "c.sample"
  },
  {
    id: "cadence",
    scopeName: "source.cadence",
    path: "cadence.tmLanguage.json",
    samplePath: "cadence.sample",
    aliases: ["cdc"]
  },
  {
    id: "clarity",
    scopeName: "source.clar",
    path: "clarity.tmLanguage.json",
    samplePath: "clarity.sample"
  },
  {
    id: "clojure",
    scopeName: "source.clojure",
    path: "clojure.tmLanguage.json",
    samplePath: "clojure.sample",
    aliases: ["clj"]
  },
  {
    id: "cmake",
    scopeName: "source.cmake",
    path: "cmake.tmLanguage.json",
    samplePath: "cmake.sample"
  },
  {
    id: "cobol",
    scopeName: "source.cobol",
    path: "cobol.tmLanguage.json",
    samplePath: "cobol.sample",
    embeddedLangs: ["sql", "html", "java"]
  },
  {
    id: "codeql",
    scopeName: "source.ql",
    path: "codeql.tmLanguage.json",
    samplePath: "codeql.sample",
    aliases: ["ql"],
    embeddedLangs: ["markdown"]
  },
  {
    id: "coffee",
    scopeName: "source.coffee",
    path: "coffee.tmLanguage.json",
    samplePath: "coffee.sample",
    embeddedLangs: ["javascript"]
  },
  {
    id: "cpp",
    scopeName: "source.cpp",
    path: "cpp.tmLanguage.json",
    samplePath: "cpp.sample",
    embeddedLangs: ["glsl", "sql"]
  },
  {
    id: "crystal",
    scopeName: "source.crystal",
    path: "crystal.tmLanguage.json",
    samplePath: "crystal.sample",
    embeddedLangs: ["html", "sql", "css", "c", "javascript", "shellscript"]
  },
  {
    id: "csharp",
    scopeName: "source.cs",
    path: "csharp.tmLanguage.json",
    samplePath: "csharp.sample",
    aliases: ["c#", "cs"]
  },
  {
    id: "css",
    scopeName: "source.css",
    path: "css.tmLanguage.json",
    samplePath: "css.sample"
  },
  {
    id: "cue",
    scopeName: "source.cue",
    path: "cue.tmLanguage.json",
    samplePath: "cue.sample"
  },
  {
    id: "d",
    scopeName: "source.d",
    path: "d.tmLanguage.json",
    samplePath: "d.sample"
  },
  {
    id: "dart",
    scopeName: "source.dart",
    path: "dart.tmLanguage.json",
    samplePath: "dart.sample"
  },
  {
    id: "diff",
    scopeName: "source.diff",
    path: "diff.tmLanguage.json",
    samplePath: "diff.sample"
  },
  {
    id: "docker",
    scopeName: "source.dockerfile",
    path: "docker.tmLanguage.json",
    samplePath: "docker.sample"
  },
  {
    id: "dream-maker",
    scopeName: "source.dm",
    path: "dream-maker.tmLanguage.json"
  },
  {
    id: "elixir",
    scopeName: "source.elixir",
    path: "elixir.tmLanguage.json",
    samplePath: "elixir.sample",
    embeddedLangs: ["html"]
  },
  {
    id: "elm",
    scopeName: "source.elm",
    path: "elm.tmLanguage.json",
    samplePath: "elm.sample",
    embeddedLangs: ["glsl"]
  },
  {
    id: "erb",
    scopeName: "text.html.erb",
    path: "erb.tmLanguage.json",
    samplePath: "erb.sample",
    embeddedLangs: ["html", "ruby"]
  },
  {
    id: "erlang",
    scopeName: "source.erlang",
    path: "erlang.tmLanguage.json",
    samplePath: "erlang.sample",
    aliases: ["erl"]
  },
  {
    id: "fish",
    scopeName: "source.fish",
    path: "fish.tmLanguage.json",
    samplePath: "fish.sample"
  },
  {
    id: "fsharp",
    scopeName: "source.fsharp",
    path: "fsharp.tmLanguage.json",
    samplePath: "fsharp.sample",
    aliases: ["f#", "fs"],
    embeddedLangs: ["markdown"]
  },
  {
    id: "gherkin",
    scopeName: "text.gherkin.feature",
    path: "gherkin.tmLanguage.json"
  },
  {
    id: "git-commit",
    scopeName: "text.git-commit",
    path: "git-commit.tmLanguage.json",
    embeddedLangs: ["diff"]
  },
  {
    id: "git-rebase",
    scopeName: "text.git-rebase",
    path: "git-rebase.tmLanguage.json",
    embeddedLangs: ["shellscript"]
  },
  {
    id: "glsl",
    scopeName: "source.glsl",
    path: "glsl.tmLanguage.json",
    samplePath: "glsl.sample",
    embeddedLangs: ["c"]
  },
  {
    id: "gnuplot",
    scopeName: "source.gnuplot",
    path: "gnuplot.tmLanguage.json"
  },
  {
    id: "go",
    scopeName: "source.go",
    path: "go.tmLanguage.json",
    samplePath: "go.sample"
  },
  {
    id: "graphql",
    scopeName: "source.graphql",
    path: "graphql.tmLanguage.json",
    embeddedLangs: ["javascript", "typescript", "jsx", "tsx"]
  },
  {
    id: "groovy",
    scopeName: "source.groovy",
    path: "groovy.tmLanguage.json"
  },
  {
    id: "hack",
    scopeName: "source.hack",
    path: "hack.tmLanguage.json",
    embeddedLangs: ["html", "sql"]
  },
  {
    id: "haml",
    scopeName: "text.haml",
    path: "haml.tmLanguage.json",
    embeddedLangs: ["ruby", "javascript", "sass", "coffee", "markdown", "css"]
  },
  {
    id: "handlebars",
    scopeName: "text.html.handlebars",
    path: "handlebars.tmLanguage.json",
    aliases: ["hbs"],
    embeddedLangs: ["html", "css", "javascript", "yaml"]
  },
  {
    id: "haskell",
    scopeName: "source.haskell",
    path: "haskell.tmLanguage.json",
    aliases: ["hs"]
  },
  {
    id: "hcl",
    scopeName: "source.hcl",
    path: "hcl.tmLanguage.json",
    samplePath: "hcl.sample"
  },
  {
    id: "hlsl",
    scopeName: "source.hlsl",
    path: "hlsl.tmLanguage.json"
  },
  {
    id: "html",
    scopeName: "text.html.basic",
    path: "html.tmLanguage.json",
    samplePath: "html.sample",
    embeddedLangs: ["javascript", "css"]
  },
  {
    id: "imba",
    scopeName: "source.imba",
    path: "imba.tmLanguage.json",
    samplePath: "imba.sample"
  },
  {
    id: "ini",
    scopeName: "source.ini",
    path: "ini.tmLanguage.json"
  },
  {
    id: "java",
    scopeName: "source.java",
    path: "java.tmLanguage.json",
    samplePath: "java.sample"
  },
  {
    id: "javascript",
    scopeName: "source.js",
    path: "javascript.tmLanguage.json",
    samplePath: "javascript.sample",
    aliases: ["js"]
  },
  {
    id: "jinja-html",
    scopeName: "text.html.jinja",
    path: "jinja-html.tmLanguage.json",
    embeddedLangs: ["html"]
  },
  {
    id: "json",
    scopeName: "source.json",
    path: "json.tmLanguage.json"
  },
  {
    id: "json5",
    scopeName: "source.json5",
    path: "json5.tmLanguage.json",
    samplePath: "json5.sample"
  },
  {
    id: "jsonc",
    scopeName: "source.json.comments",
    path: "jsonc.tmLanguage.json"
  },
  {
    id: "jsonnet",
    scopeName: "source.jsonnet",
    path: "jsonnet.tmLanguage.json"
  },
  {
    id: "jssm",
    scopeName: "source.jssm",
    path: "jssm.tmLanguage.json",
    samplePath: "jssm.sample",
    aliases: ["fsl"]
  },
  {
    id: "jsx",
    scopeName: "source.js.jsx",
    path: "jsx.tmLanguage.json"
  },
  {
    id: "julia",
    scopeName: "source.julia",
    path: "julia.tmLanguage.json",
    embeddedLangs: ["cpp", "python", "javascript", "r", "sql"]
  },
  {
    id: "kotlin",
    scopeName: "source.kotlin",
    path: "kotlin.tmLanguage.json"
  },
  {
    id: "latex",
    scopeName: "text.tex.latex",
    path: "latex.tmLanguage.json",
    embeddedLangs: ["tex", "css", "haskell", "html", "xml", "java", "lua", "julia", "ruby", "javascript", "typescript", "python", "yaml", "rust", "scala", "gnuplot"]
  },
  {
    id: "less",
    scopeName: "source.css.less",
    path: "less.tmLanguage.json",
    embeddedLangs: ["css"]
  },
  {
    id: "liquid",
    scopeName: "text.html.liquid",
    path: "liquid.tmLanguage.json",
    samplePath: "liquid.sample",
    embeddedLangs: ["html", "css", "json", "javascript"]
  },
  {
    id: "lisp",
    scopeName: "source.lisp",
    path: "lisp.tmLanguage.json"
  },
  {
    id: "logo",
    scopeName: "source.logo",
    path: "logo.tmLanguage.json"
  },
  {
    id: "lua",
    scopeName: "source.lua",
    path: "lua.tmLanguage.json",
    embeddedLangs: ["c"]
  },
  {
    id: "make",
    scopeName: "source.makefile",
    path: "make.tmLanguage.json",
    aliases: ["makefile"]
  },
  {
    id: "markdown",
    scopeName: "text.html.markdown",
    path: "markdown.tmLanguage.json",
    aliases: ["md"],
    embeddedLangs: ["css", "html", "ini", "java", "lua", "make", "perl", "r", "ruby", "php", "sql", "vb", "xml", "xsl", "yaml", "bat", "clojure", "coffee", "c", "cpp", "diff", "docker", "git-commit", "git-rebase", "go", "groovy", "pug", "javascript", "json", "jsonc", "less", "objective-c", "swift", "scss", "raku", "powershell", "python", "julia", "rust", "scala", "shellscript", "typescript", "tsx", "csharp", "fsharp", "dart", "handlebars", "erlang", "elixir", "latex", "bibtex"]
  },
  {
    id: "marko",
    scopeName: "text.marko",
    path: "marko.tmLanguage.json",
    embeddedLangs: ["css", "less", "scss", "typescript"]
  },
  {
    id: "matlab",
    scopeName: "source.matlab",
    path: "matlab.tmLanguage.json"
  },
  {
    id: "mdx",
    scopeName: "text.html.markdown.jsx",
    path: "mdx.tmLanguage.json",
    embeddedLangs: ["jsx", "markdown"]
  },
  {
    id: "mermaid",
    scopeName: "source.mermaid",
    path: "mermaid.tmLanguage.json"
  },
  {
    id: "nginx",
    scopeName: "source.nginx",
    path: "nginx.tmLanguage.json",
    embeddedLangs: ["lua"]
  },
  {
    id: "nim",
    scopeName: "source.nim",
    path: "nim.tmLanguage.json",
    embeddedLangs: ["c", "html", "xml", "javascript", "css", "glsl", "markdown"]
  },
  {
    id: "nix",
    scopeName: "source.nix",
    path: "nix.tmLanguage.json"
  },
  {
    id: "objective-c",
    scopeName: "source.objc",
    path: "objective-c.tmLanguage.json",
    aliases: ["objc"]
  },
  {
    id: "objective-cpp",
    scopeName: "source.objcpp",
    path: "objective-cpp.tmLanguage.json"
  },
  {
    id: "ocaml",
    scopeName: "source.ocaml",
    path: "ocaml.tmLanguage.json"
  },
  {
    id: "pascal",
    scopeName: "source.pascal",
    path: "pascal.tmLanguage.json"
  },
  {
    id: "perl",
    scopeName: "source.perl",
    path: "perl.tmLanguage.json",
    embeddedLangs: ["html", "xml", "css", "javascript", "sql"]
  },
  {
    id: "php",
    scopeName: "source.php",
    path: "php.tmLanguage.json",
    embeddedLangs: ["html", "xml", "sql", "javascript", "json", "css"]
  },
  {
    id: "plsql",
    scopeName: "source.plsql.oracle",
    path: "plsql.tmLanguage.json"
  },
  {
    id: "postcss",
    scopeName: "source.css.postcss",
    path: "postcss.tmLanguage.json"
  },
  {
    id: "powershell",
    scopeName: "source.powershell",
    path: "powershell.tmLanguage.json",
    aliases: ["ps", "ps1"]
  },
  {
    id: "prisma",
    scopeName: "source.prisma",
    path: "prisma.tmLanguage.json",
    samplePath: "prisma.sample"
  },
  {
    id: "prolog",
    scopeName: "source.prolog",
    path: "prolog.tmLanguage.json"
  },
  {
    id: "proto",
    scopeName: "source.proto",
    path: "proto.tmLanguage.json",
    samplePath: "proto.sample"
  },
  {
    id: "pug",
    scopeName: "text.pug",
    path: "pug.tmLanguage.json",
    aliases: ["jade"],
    embeddedLangs: ["javascript", "css", "sass", "scss", "stylus", "coffee", "html"]
  },
  {
    id: "puppet",
    scopeName: "source.puppet",
    path: "puppet.tmLanguage.json"
  },
  {
    id: "purescript",
    scopeName: "source.purescript",
    path: "purescript.tmLanguage.json"
  },
  {
    id: "python",
    scopeName: "source.python",
    path: "python.tmLanguage.json",
    samplePath: "python.sample",
    aliases: ["py"]
  },
  {
    id: "r",
    scopeName: "source.r",
    path: "r.tmLanguage.json"
  },
  {
    id: "raku",
    scopeName: "source.perl.6",
    path: "raku.tmLanguage.json",
    aliases: ["perl6"]
  },
  {
    id: "razor",
    scopeName: "text.aspnetcorerazor",
    path: "razor.tmLanguage.json",
    embeddedLangs: ["html", "csharp"]
  },
  {
    id: "rel",
    scopeName: "source.rel",
    path: "rel.tmLanguage.json",
    samplePath: "rel.sample"
  },
  {
    id: "riscv",
    scopeName: "source.riscv",
    path: "riscv.tmLanguage.json"
  },
  {
    id: "rst",
    scopeName: "source.rst",
    path: "rst.tmLanguage.json",
    embeddedLangs: ["cpp", "python", "javascript", "shellscript", "yaml", "cmake", "ruby"]
  },
  {
    id: "ruby",
    scopeName: "source.ruby",
    path: "ruby.tmLanguage.json",
    samplePath: "ruby.sample",
    aliases: ["rb"],
    embeddedLangs: ["html", "xml", "sql", "css", "c", "javascript", "shellscript", "lua"]
  },
  {
    id: "rust",
    scopeName: "source.rust",
    path: "rust.tmLanguage.json",
    aliases: ["rs"]
  },
  {
    id: "sas",
    scopeName: "source.sas",
    path: "sas.tmLanguage.json",
    embeddedLangs: ["sql"]
  },
  {
    id: "sass",
    scopeName: "source.sass",
    path: "sass.tmLanguage.json"
  },
  {
    id: "scala",
    scopeName: "source.scala",
    path: "scala.tmLanguage.json"
  },
  {
    id: "scheme",
    scopeName: "source.scheme",
    path: "scheme.tmLanguage.json"
  },
  {
    id: "scss",
    scopeName: "source.css.scss",
    path: "scss.tmLanguage.json",
    embeddedLangs: ["css"]
  },
  {
    id: "shaderlab",
    scopeName: "source.shaderlab",
    path: "shaderlab.tmLanguage.json",
    aliases: ["shader"],
    embeddedLangs: ["hlsl"]
  },
  {
    id: "shellscript",
    scopeName: "source.shell",
    path: "shellscript.tmLanguage.json",
    aliases: ["shell", "bash", "sh", "zsh"]
  },
  {
    id: "smalltalk",
    scopeName: "source.smalltalk",
    path: "smalltalk.tmLanguage.json"
  },
  {
    id: "solidity",
    scopeName: "source.solidity",
    path: "solidity.tmLanguage.json"
  },
  {
    id: "sparql",
    scopeName: "source.sparql",
    path: "sparql.tmLanguage.json",
    samplePath: "sparql.sample",
    embeddedLangs: ["turtle"]
  },
  {
    id: "sql",
    scopeName: "source.sql",
    path: "sql.tmLanguage.json"
  },
  {
    id: "ssh-config",
    scopeName: "source.ssh-config",
    path: "ssh-config.tmLanguage.json"
  },
  {
    id: "stata",
    scopeName: "source.stata",
    path: "stata.tmLanguage.json",
    samplePath: "stata.sample",
    embeddedLangs: ["sql"]
  },
  {
    id: "stylus",
    scopeName: "source.stylus",
    path: "stylus.tmLanguage.json",
    aliases: ["styl"]
  },
  {
    id: "svelte",
    scopeName: "source.svelte",
    path: "svelte.tmLanguage.json",
    embeddedLangs: ["javascript", "typescript", "coffee", "stylus", "sass", "css", "scss", "less", "postcss", "pug", "markdown"]
  },
  {
    id: "swift",
    scopeName: "source.swift",
    path: "swift.tmLanguage.json"
  },
  {
    id: "system-verilog",
    scopeName: "source.systemverilog",
    path: "system-verilog.tmLanguage.json"
  },
  {
    id: "tasl",
    scopeName: "source.tasl",
    path: "tasl.tmLanguage.json",
    samplePath: "tasl.sample"
  },
  {
    id: "tcl",
    scopeName: "source.tcl",
    path: "tcl.tmLanguage.json"
  },
  {
    id: "tex",
    scopeName: "text.tex",
    path: "tex.tmLanguage.json",
    embeddedLangs: ["r"]
  },
  {
    id: "toml",
    scopeName: "source.toml",
    path: "toml.tmLanguage.json"
  },
  {
    id: "tsx",
    scopeName: "source.tsx",
    path: "tsx.tmLanguage.json",
    samplePath: "tsx.sample"
  },
  {
    id: "turtle",
    scopeName: "source.turtle",
    path: "turtle.tmLanguage.json",
    samplePath: "turtle.sample"
  },
  {
    id: "twig",
    scopeName: "text.html.twig",
    path: "twig.tmLanguage.json",
    embeddedLangs: ["css", "javascript", "php", "python", "ruby"]
  },
  {
    id: "typescript",
    scopeName: "source.ts",
    path: "typescript.tmLanguage.json",
    aliases: ["ts"]
  },
  {
    id: "v",
    scopeName: "source.v",
    path: "v.tmLanguage.json",
    samplePath: "v.sample"
  },
  {
    id: "vb",
    scopeName: "source.asp.vb.net",
    path: "vb.tmLanguage.json",
    aliases: ["cmd"]
  },
  {
    id: "verilog",
    scopeName: "source.verilog",
    path: "verilog.tmLanguage.json"
  },
  {
    id: "vhdl",
    scopeName: "source.vhdl",
    path: "vhdl.tmLanguage.json"
  },
  {
    id: "viml",
    scopeName: "source.viml",
    path: "viml.tmLanguage.json",
    aliases: ["vim", "vimscript"]
  },
  {
    id: "vue-html",
    scopeName: "text.html.vue-html",
    path: "vue-html.tmLanguage.json",
    embeddedLangs: ["vue", "javascript"]
  },
  {
    id: "vue",
    scopeName: "source.vue",
    path: "vue.tmLanguage.json",
    embeddedLangs: ["html", "markdown", "pug", "stylus", "sass", "css", "scss", "less", "javascript", "typescript", "jsx", "tsx", "json", "jsonc", "yaml", "toml", "graphql"]
  },
  {
    id: "wasm",
    scopeName: "source.wat",
    path: "wasm.tmLanguage.json"
  },
  {
    id: "wenyan",
    scopeName: "source.wenyan",
    path: "wenyan.tmLanguage.json",
    aliases: ["文言"]
  },
  {
    id: "xml",
    scopeName: "text.xml",
    path: "xml.tmLanguage.json",
    embeddedLangs: ["java"]
  },
  {
    id: "xsl",
    scopeName: "text.xml.xsl",
    path: "xsl.tmLanguage.json",
    embeddedLangs: ["xml"]
  },
  {
    id: "yaml",
    scopeName: "source.yaml",
    path: "yaml.tmLanguage.json"
  },
  {
    id: "zenscript",
    scopeName: "source.zenscript",
    path: "zenscript.tmLanguage.json",
    samplePath: "zenscript.sample"
  }
];
var FontStyle = /* @__PURE__ */ ((FontStyle2) => {
  FontStyle2[FontStyle2["NotSet"] = -1] = "NotSet";
  FontStyle2[FontStyle2["None"] = 0] = "None";
  FontStyle2[FontStyle2["Italic"] = 1] = "Italic";
  FontStyle2[FontStyle2["Bold"] = 2] = "Bold";
  FontStyle2[FontStyle2["Underline"] = 4] = "Underline";
  return FontStyle2;
})(FontStyle || {});
class StackElementMetadata {
  static toBinaryStr(metadata) {
    let r2 = metadata.toString(2);
    while (r2.length < 32) {
      r2 = "0" + r2;
    }
    return r2;
  }
  static printMetadata(metadata) {
    let languageId = StackElementMetadata.getLanguageId(metadata);
    let tokenType = StackElementMetadata.getTokenType(metadata);
    let fontStyle = StackElementMetadata.getFontStyle(metadata);
    let foreground = StackElementMetadata.getForeground(metadata);
    let background = StackElementMetadata.getBackground(metadata);
    console.log({
      languageId,
      tokenType,
      fontStyle,
      foreground,
      background
    });
  }
  static getLanguageId(metadata) {
    return (metadata & 255) >>> 0;
  }
  static getTokenType(metadata) {
    return (metadata & 768) >>> 8;
  }
  static getFontStyle(metadata) {
    return (metadata & 14336) >>> 11;
  }
  static getForeground(metadata) {
    return (metadata & 8372224) >>> 15;
  }
  static getBackground(metadata) {
    return (metadata & 4286578688) >>> 24;
  }
  static containsBalancedBrackets(metadata) {
    return (metadata & 1024) !== 0;
  }
  static set(metadata, languageId, tokenType, fontStyle, foreground, background) {
    let _languageId = StackElementMetadata.getLanguageId(metadata);
    let _tokenType = StackElementMetadata.getTokenType(metadata);
    let _fontStyle = StackElementMetadata.getFontStyle(metadata);
    let _foreground = StackElementMetadata.getForeground(metadata);
    let _background = StackElementMetadata.getBackground(metadata);
    let _containsBalancedBracketsBit = StackElementMetadata.containsBalancedBrackets(
      metadata
    ) ? 1 : 0;
    if (languageId !== 0) {
      _languageId = languageId;
    }
    if (tokenType !== 0) {
      _tokenType = tokenType === 8 ? 0 : tokenType;
    }
    if (fontStyle !== -1) {
      _fontStyle = fontStyle;
    }
    if (foreground !== 0) {
      _foreground = foreground;
    }
    if (background !== 0) {
      _background = background;
    }
    return (_languageId << 0 | _tokenType << 8 | _fontStyle << 11 | _containsBalancedBracketsBit << 10 | _foreground << 15 | _background << 24) >>> 0;
  }
}
function trimEndSlash(str) {
  if (str.endsWith("/") || str.endsWith("\\"))
    return str.slice(0, -1);
  return str;
}
function trimStartDot(str) {
  if (str.startsWith("./"))
    return str.slice(2);
  return str;
}
function dirpathparts(str) {
  const parts = str.split(/[\/\\]/g);
  return parts.slice(0, parts.length - 1);
}
function join(...parts) {
  return parts.map(trimEndSlash).map(trimStartDot).join("/");
}
function groupBy(elements, keyGetter) {
  const map2 = /* @__PURE__ */ new Map();
  for (const element of elements) {
    const key = keyGetter(element);
    if (map2.has(key)) {
      const group = map2.get(key);
      group.push(element);
    } else {
      map2.set(key, [element]);
    }
  }
  return map2;
}
function createScanner(text, ignoreTrivia = false) {
  const len = text.length;
  let pos = 0, value = "", tokenOffset = 0, token = 16, lineNumber = 0, lineStartOffset = 0, tokenLineStartOffset = 0, prevTokenLineStartOffset = 0, scanError = 0;
  function scanHexDigits(count2, exact) {
    let digits = 0;
    let value2 = 0;
    while (digits < count2 || !exact) {
      let ch2 = text.charCodeAt(pos);
      if (ch2 >= 48 && ch2 <= 57) {
        value2 = value2 * 16 + ch2 - 48;
      } else if (ch2 >= 65 && ch2 <= 70) {
        value2 = value2 * 16 + ch2 - 65 + 10;
      } else if (ch2 >= 97 && ch2 <= 102) {
        value2 = value2 * 16 + ch2 - 97 + 10;
      } else {
        break;
      }
      pos++;
      digits++;
    }
    if (digits < count2) {
      value2 = -1;
    }
    return value2;
  }
  function setPosition(newPosition) {
    pos = newPosition;
    value = "";
    tokenOffset = 0;
    token = 16;
    scanError = 0;
  }
  function scanNumber() {
    let start = pos;
    if (text.charCodeAt(pos) === 48) {
      pos++;
    } else {
      pos++;
      while (pos < text.length && isDigit(text.charCodeAt(pos))) {
        pos++;
      }
    }
    if (pos < text.length && text.charCodeAt(pos) === 46) {
      pos++;
      if (pos < text.length && isDigit(text.charCodeAt(pos))) {
        pos++;
        while (pos < text.length && isDigit(text.charCodeAt(pos))) {
          pos++;
        }
      } else {
        scanError = 3;
        return text.substring(start, pos);
      }
    }
    let end = pos;
    if (pos < text.length && (text.charCodeAt(pos) === 69 || text.charCodeAt(pos) === 101)) {
      pos++;
      if (pos < text.length && text.charCodeAt(pos) === 43 || text.charCodeAt(pos) === 45) {
        pos++;
      }
      if (pos < text.length && isDigit(text.charCodeAt(pos))) {
        pos++;
        while (pos < text.length && isDigit(text.charCodeAt(pos))) {
          pos++;
        }
        end = pos;
      } else {
        scanError = 3;
      }
    }
    return text.substring(start, end);
  }
  function scanString() {
    let result = "", start = pos;
    while (true) {
      if (pos >= len) {
        result += text.substring(start, pos);
        scanError = 2;
        break;
      }
      const ch2 = text.charCodeAt(pos);
      if (ch2 === 34) {
        result += text.substring(start, pos);
        pos++;
        break;
      }
      if (ch2 === 92) {
        result += text.substring(start, pos);
        pos++;
        if (pos >= len) {
          scanError = 2;
          break;
        }
        const ch22 = text.charCodeAt(pos++);
        switch (ch22) {
          case 34:
            result += '"';
            break;
          case 92:
            result += "\\";
            break;
          case 47:
            result += "/";
            break;
          case 98:
            result += "\b";
            break;
          case 102:
            result += "\f";
            break;
          case 110:
            result += "\n";
            break;
          case 114:
            result += "\r";
            break;
          case 116:
            result += "	";
            break;
          case 117:
            const ch3 = scanHexDigits(4, true);
            if (ch3 >= 0) {
              result += String.fromCharCode(ch3);
            } else {
              scanError = 4;
            }
            break;
          default:
            scanError = 5;
        }
        start = pos;
        continue;
      }
      if (ch2 >= 0 && ch2 <= 31) {
        if (isLineBreak(ch2)) {
          result += text.substring(start, pos);
          scanError = 2;
          break;
        } else {
          scanError = 6;
        }
      }
      pos++;
    }
    return result;
  }
  function scanNext() {
    value = "";
    scanError = 0;
    tokenOffset = pos;
    lineStartOffset = lineNumber;
    prevTokenLineStartOffset = tokenLineStartOffset;
    if (pos >= len) {
      tokenOffset = len;
      return token = 17;
    }
    let code2 = text.charCodeAt(pos);
    if (isWhiteSpace(code2)) {
      do {
        pos++;
        value += String.fromCharCode(code2);
        code2 = text.charCodeAt(pos);
      } while (isWhiteSpace(code2));
      return token = 15;
    }
    if (isLineBreak(code2)) {
      pos++;
      value += String.fromCharCode(code2);
      if (code2 === 13 && text.charCodeAt(pos) === 10) {
        pos++;
        value += "\n";
      }
      lineNumber++;
      tokenLineStartOffset = pos;
      return token = 14;
    }
    switch (code2) {
      case 123:
        pos++;
        return token = 1;
      case 125:
        pos++;
        return token = 2;
      case 91:
        pos++;
        return token = 3;
      case 93:
        pos++;
        return token = 4;
      case 58:
        pos++;
        return token = 6;
      case 44:
        pos++;
        return token = 5;
      case 34:
        pos++;
        value = scanString();
        return token = 10;
      case 47:
        const start = pos - 1;
        if (text.charCodeAt(pos + 1) === 47) {
          pos += 2;
          while (pos < len) {
            if (isLineBreak(text.charCodeAt(pos))) {
              break;
            }
            pos++;
          }
          value = text.substring(start, pos);
          return token = 12;
        }
        if (text.charCodeAt(pos + 1) === 42) {
          pos += 2;
          const safeLength = len - 1;
          let commentClosed = false;
          while (pos < safeLength) {
            const ch2 = text.charCodeAt(pos);
            if (ch2 === 42 && text.charCodeAt(pos + 1) === 47) {
              pos += 2;
              commentClosed = true;
              break;
            }
            pos++;
            if (isLineBreak(ch2)) {
              if (ch2 === 13 && text.charCodeAt(pos) === 10) {
                pos++;
              }
              lineNumber++;
              tokenLineStartOffset = pos;
            }
          }
          if (!commentClosed) {
            pos++;
            scanError = 1;
          }
          value = text.substring(start, pos);
          return token = 13;
        }
        value += String.fromCharCode(code2);
        pos++;
        return token = 16;
      case 45:
        value += String.fromCharCode(code2);
        pos++;
        if (pos === len || !isDigit(text.charCodeAt(pos))) {
          return token = 16;
        }
      case 48:
      case 49:
      case 50:
      case 51:
      case 52:
      case 53:
      case 54:
      case 55:
      case 56:
      case 57:
        value += scanNumber();
        return token = 11;
      default:
        while (pos < len && isUnknownContentCharacter(code2)) {
          pos++;
          code2 = text.charCodeAt(pos);
        }
        if (tokenOffset !== pos) {
          value = text.substring(tokenOffset, pos);
          switch (value) {
            case "true":
              return token = 8;
            case "false":
              return token = 9;
            case "null":
              return token = 7;
          }
          return token = 16;
        }
        value += String.fromCharCode(code2);
        pos++;
        return token = 16;
    }
  }
  function isUnknownContentCharacter(code2) {
    if (isWhiteSpace(code2) || isLineBreak(code2)) {
      return false;
    }
    switch (code2) {
      case 125:
      case 93:
      case 123:
      case 91:
      case 34:
      case 58:
      case 44:
      case 47:
        return false;
    }
    return true;
  }
  function scanNextNonTrivia() {
    let result;
    do {
      result = scanNext();
    } while (result >= 12 && result <= 15);
    return result;
  }
  return {
    setPosition,
    getPosition: () => pos,
    scan: ignoreTrivia ? scanNextNonTrivia : scanNext,
    getToken: () => token,
    getTokenValue: () => value,
    getTokenOffset: () => tokenOffset,
    getTokenLength: () => pos - tokenOffset,
    getTokenStartLine: () => lineStartOffset,
    getTokenStartCharacter: () => tokenOffset - prevTokenLineStartOffset,
    getTokenError: () => scanError
  };
}
function isWhiteSpace(ch2) {
  return ch2 === 32 || ch2 === 9;
}
function isLineBreak(ch2) {
  return ch2 === 10 || ch2 === 13;
}
function isDigit(ch2) {
  return ch2 >= 48 && ch2 <= 57;
}
var CharacterCodes;
(function(CharacterCodes2) {
  CharacterCodes2[CharacterCodes2["lineFeed"] = 10] = "lineFeed";
  CharacterCodes2[CharacterCodes2["carriageReturn"] = 13] = "carriageReturn";
  CharacterCodes2[CharacterCodes2["space"] = 32] = "space";
  CharacterCodes2[CharacterCodes2["_0"] = 48] = "_0";
  CharacterCodes2[CharacterCodes2["_1"] = 49] = "_1";
  CharacterCodes2[CharacterCodes2["_2"] = 50] = "_2";
  CharacterCodes2[CharacterCodes2["_3"] = 51] = "_3";
  CharacterCodes2[CharacterCodes2["_4"] = 52] = "_4";
  CharacterCodes2[CharacterCodes2["_5"] = 53] = "_5";
  CharacterCodes2[CharacterCodes2["_6"] = 54] = "_6";
  CharacterCodes2[CharacterCodes2["_7"] = 55] = "_7";
  CharacterCodes2[CharacterCodes2["_8"] = 56] = "_8";
  CharacterCodes2[CharacterCodes2["_9"] = 57] = "_9";
  CharacterCodes2[CharacterCodes2["a"] = 97] = "a";
  CharacterCodes2[CharacterCodes2["b"] = 98] = "b";
  CharacterCodes2[CharacterCodes2["c"] = 99] = "c";
  CharacterCodes2[CharacterCodes2["d"] = 100] = "d";
  CharacterCodes2[CharacterCodes2["e"] = 101] = "e";
  CharacterCodes2[CharacterCodes2["f"] = 102] = "f";
  CharacterCodes2[CharacterCodes2["g"] = 103] = "g";
  CharacterCodes2[CharacterCodes2["h"] = 104] = "h";
  CharacterCodes2[CharacterCodes2["i"] = 105] = "i";
  CharacterCodes2[CharacterCodes2["j"] = 106] = "j";
  CharacterCodes2[CharacterCodes2["k"] = 107] = "k";
  CharacterCodes2[CharacterCodes2["l"] = 108] = "l";
  CharacterCodes2[CharacterCodes2["m"] = 109] = "m";
  CharacterCodes2[CharacterCodes2["n"] = 110] = "n";
  CharacterCodes2[CharacterCodes2["o"] = 111] = "o";
  CharacterCodes2[CharacterCodes2["p"] = 112] = "p";
  CharacterCodes2[CharacterCodes2["q"] = 113] = "q";
  CharacterCodes2[CharacterCodes2["r"] = 114] = "r";
  CharacterCodes2[CharacterCodes2["s"] = 115] = "s";
  CharacterCodes2[CharacterCodes2["t"] = 116] = "t";
  CharacterCodes2[CharacterCodes2["u"] = 117] = "u";
  CharacterCodes2[CharacterCodes2["v"] = 118] = "v";
  CharacterCodes2[CharacterCodes2["w"] = 119] = "w";
  CharacterCodes2[CharacterCodes2["x"] = 120] = "x";
  CharacterCodes2[CharacterCodes2["y"] = 121] = "y";
  CharacterCodes2[CharacterCodes2["z"] = 122] = "z";
  CharacterCodes2[CharacterCodes2["A"] = 65] = "A";
  CharacterCodes2[CharacterCodes2["B"] = 66] = "B";
  CharacterCodes2[CharacterCodes2["C"] = 67] = "C";
  CharacterCodes2[CharacterCodes2["D"] = 68] = "D";
  CharacterCodes2[CharacterCodes2["E"] = 69] = "E";
  CharacterCodes2[CharacterCodes2["F"] = 70] = "F";
  CharacterCodes2[CharacterCodes2["G"] = 71] = "G";
  CharacterCodes2[CharacterCodes2["H"] = 72] = "H";
  CharacterCodes2[CharacterCodes2["I"] = 73] = "I";
  CharacterCodes2[CharacterCodes2["J"] = 74] = "J";
  CharacterCodes2[CharacterCodes2["K"] = 75] = "K";
  CharacterCodes2[CharacterCodes2["L"] = 76] = "L";
  CharacterCodes2[CharacterCodes2["M"] = 77] = "M";
  CharacterCodes2[CharacterCodes2["N"] = 78] = "N";
  CharacterCodes2[CharacterCodes2["O"] = 79] = "O";
  CharacterCodes2[CharacterCodes2["P"] = 80] = "P";
  CharacterCodes2[CharacterCodes2["Q"] = 81] = "Q";
  CharacterCodes2[CharacterCodes2["R"] = 82] = "R";
  CharacterCodes2[CharacterCodes2["S"] = 83] = "S";
  CharacterCodes2[CharacterCodes2["T"] = 84] = "T";
  CharacterCodes2[CharacterCodes2["U"] = 85] = "U";
  CharacterCodes2[CharacterCodes2["V"] = 86] = "V";
  CharacterCodes2[CharacterCodes2["W"] = 87] = "W";
  CharacterCodes2[CharacterCodes2["X"] = 88] = "X";
  CharacterCodes2[CharacterCodes2["Y"] = 89] = "Y";
  CharacterCodes2[CharacterCodes2["Z"] = 90] = "Z";
  CharacterCodes2[CharacterCodes2["asterisk"] = 42] = "asterisk";
  CharacterCodes2[CharacterCodes2["backslash"] = 92] = "backslash";
  CharacterCodes2[CharacterCodes2["closeBrace"] = 125] = "closeBrace";
  CharacterCodes2[CharacterCodes2["closeBracket"] = 93] = "closeBracket";
  CharacterCodes2[CharacterCodes2["colon"] = 58] = "colon";
  CharacterCodes2[CharacterCodes2["comma"] = 44] = "comma";
  CharacterCodes2[CharacterCodes2["dot"] = 46] = "dot";
  CharacterCodes2[CharacterCodes2["doubleQuote"] = 34] = "doubleQuote";
  CharacterCodes2[CharacterCodes2["minus"] = 45] = "minus";
  CharacterCodes2[CharacterCodes2["openBrace"] = 123] = "openBrace";
  CharacterCodes2[CharacterCodes2["openBracket"] = 91] = "openBracket";
  CharacterCodes2[CharacterCodes2["plus"] = 43] = "plus";
  CharacterCodes2[CharacterCodes2["slash"] = 47] = "slash";
  CharacterCodes2[CharacterCodes2["formFeed"] = 12] = "formFeed";
  CharacterCodes2[CharacterCodes2["tab"] = 9] = "tab";
})(CharacterCodes || (CharacterCodes = {}));
var ParseOptions;
(function(ParseOptions2) {
  ParseOptions2.DEFAULT = {
    allowTrailingComma: false
  };
})(ParseOptions || (ParseOptions = {}));
function parse$1(text, errors = [], options = ParseOptions.DEFAULT) {
  let currentProperty = null;
  let currentParent = [];
  const previousParents = [];
  function onValue(value) {
    if (Array.isArray(currentParent)) {
      currentParent.push(value);
    } else if (currentProperty !== null) {
      currentParent[currentProperty] = value;
    }
  }
  const visitor = {
    onObjectBegin: () => {
      const object = {};
      onValue(object);
      previousParents.push(currentParent);
      currentParent = object;
      currentProperty = null;
    },
    onObjectProperty: (name) => {
      currentProperty = name;
    },
    onObjectEnd: () => {
      currentParent = previousParents.pop();
    },
    onArrayBegin: () => {
      const array = [];
      onValue(array);
      previousParents.push(currentParent);
      currentParent = array;
      currentProperty = null;
    },
    onArrayEnd: () => {
      currentParent = previousParents.pop();
    },
    onLiteralValue: onValue,
    onError: (error, offset2, length) => {
      errors.push({ error, offset: offset2, length });
    }
  };
  visit(text, visitor, options);
  return currentParent[0];
}
function visit(text, visitor, options = ParseOptions.DEFAULT) {
  const _scanner = createScanner(text, false);
  const _jsonPath = [];
  function toNoArgVisit(visitFunction) {
    return visitFunction ? () => visitFunction(_scanner.getTokenOffset(), _scanner.getTokenLength(), _scanner.getTokenStartLine(), _scanner.getTokenStartCharacter()) : () => true;
  }
  function toNoArgVisitWithPath(visitFunction) {
    return visitFunction ? () => visitFunction(_scanner.getTokenOffset(), _scanner.getTokenLength(), _scanner.getTokenStartLine(), _scanner.getTokenStartCharacter(), () => _jsonPath.slice()) : () => true;
  }
  function toOneArgVisit(visitFunction) {
    return visitFunction ? (arg) => visitFunction(arg, _scanner.getTokenOffset(), _scanner.getTokenLength(), _scanner.getTokenStartLine(), _scanner.getTokenStartCharacter()) : () => true;
  }
  function toOneArgVisitWithPath(visitFunction) {
    return visitFunction ? (arg) => visitFunction(arg, _scanner.getTokenOffset(), _scanner.getTokenLength(), _scanner.getTokenStartLine(), _scanner.getTokenStartCharacter(), () => _jsonPath.slice()) : () => true;
  }
  const onObjectBegin = toNoArgVisitWithPath(visitor.onObjectBegin), onObjectProperty = toOneArgVisitWithPath(visitor.onObjectProperty), onObjectEnd = toNoArgVisit(visitor.onObjectEnd), onArrayBegin = toNoArgVisitWithPath(visitor.onArrayBegin), onArrayEnd = toNoArgVisit(visitor.onArrayEnd), onLiteralValue = toOneArgVisitWithPath(visitor.onLiteralValue), onSeparator = toOneArgVisit(visitor.onSeparator), onComment = toNoArgVisit(visitor.onComment), onError = toOneArgVisit(visitor.onError);
  const disallowComments = options && options.disallowComments;
  const allowTrailingComma = options && options.allowTrailingComma;
  function scanNext() {
    while (true) {
      const token = _scanner.scan();
      switch (_scanner.getTokenError()) {
        case 4:
          handleError2(
            14
            /* ParseErrorCode.InvalidUnicode */
          );
          break;
        case 5:
          handleError2(
            15
            /* ParseErrorCode.InvalidEscapeCharacter */
          );
          break;
        case 3:
          handleError2(
            13
            /* ParseErrorCode.UnexpectedEndOfNumber */
          );
          break;
        case 1:
          if (!disallowComments) {
            handleError2(
              11
              /* ParseErrorCode.UnexpectedEndOfComment */
            );
          }
          break;
        case 2:
          handleError2(
            12
            /* ParseErrorCode.UnexpectedEndOfString */
          );
          break;
        case 6:
          handleError2(
            16
            /* ParseErrorCode.InvalidCharacter */
          );
          break;
      }
      switch (token) {
        case 12:
        case 13:
          if (disallowComments) {
            handleError2(
              10
              /* ParseErrorCode.InvalidCommentToken */
            );
          } else {
            onComment();
          }
          break;
        case 16:
          handleError2(
            1
            /* ParseErrorCode.InvalidSymbol */
          );
          break;
        case 15:
        case 14:
          break;
        default:
          return token;
      }
    }
  }
  function handleError2(error, skipUntilAfter = [], skipUntil = []) {
    onError(error);
    if (skipUntilAfter.length + skipUntil.length > 0) {
      let token = _scanner.getToken();
      while (token !== 17) {
        if (skipUntilAfter.indexOf(token) !== -1) {
          scanNext();
          break;
        } else if (skipUntil.indexOf(token) !== -1) {
          break;
        }
        token = scanNext();
      }
    }
  }
  function parseString(isValue) {
    const value = _scanner.getTokenValue();
    if (isValue) {
      onLiteralValue(value);
    } else {
      onObjectProperty(value);
      _jsonPath.push(value);
    }
    scanNext();
    return true;
  }
  function parseLiteral() {
    switch (_scanner.getToken()) {
      case 11:
        const tokenValue = _scanner.getTokenValue();
        let value = Number(tokenValue);
        if (isNaN(value)) {
          handleError2(
            2
            /* ParseErrorCode.InvalidNumberFormat */
          );
          value = 0;
        }
        onLiteralValue(value);
        break;
      case 7:
        onLiteralValue(null);
        break;
      case 8:
        onLiteralValue(true);
        break;
      case 9:
        onLiteralValue(false);
        break;
      default:
        return false;
    }
    scanNext();
    return true;
  }
  function parseProperty() {
    if (_scanner.getToken() !== 10) {
      handleError2(3, [], [
        2,
        5
        /* SyntaxKind.CommaToken */
      ]);
      return false;
    }
    parseString(false);
    if (_scanner.getToken() === 6) {
      onSeparator(":");
      scanNext();
      if (!parseValue2()) {
        handleError2(4, [], [
          2,
          5
          /* SyntaxKind.CommaToken */
        ]);
      }
    } else {
      handleError2(5, [], [
        2,
        5
        /* SyntaxKind.CommaToken */
      ]);
    }
    _jsonPath.pop();
    return true;
  }
  function parseObject() {
    onObjectBegin();
    scanNext();
    let needsComma = false;
    while (_scanner.getToken() !== 2 && _scanner.getToken() !== 17) {
      if (_scanner.getToken() === 5) {
        if (!needsComma) {
          handleError2(4, [], []);
        }
        onSeparator(",");
        scanNext();
        if (_scanner.getToken() === 2 && allowTrailingComma) {
          break;
        }
      } else if (needsComma) {
        handleError2(6, [], []);
      }
      if (!parseProperty()) {
        handleError2(4, [], [
          2,
          5
          /* SyntaxKind.CommaToken */
        ]);
      }
      needsComma = true;
    }
    onObjectEnd();
    if (_scanner.getToken() !== 2) {
      handleError2(7, [
        2
        /* SyntaxKind.CloseBraceToken */
      ], []);
    } else {
      scanNext();
    }
    return true;
  }
  function parseArray() {
    onArrayBegin();
    scanNext();
    let isFirstElement = true;
    let needsComma = false;
    while (_scanner.getToken() !== 4 && _scanner.getToken() !== 17) {
      if (_scanner.getToken() === 5) {
        if (!needsComma) {
          handleError2(4, [], []);
        }
        onSeparator(",");
        scanNext();
        if (_scanner.getToken() === 4 && allowTrailingComma) {
          break;
        }
      } else if (needsComma) {
        handleError2(6, [], []);
      }
      if (isFirstElement) {
        _jsonPath.push(0);
        isFirstElement = false;
      } else {
        _jsonPath[_jsonPath.length - 1]++;
      }
      if (!parseValue2()) {
        handleError2(4, [], [
          4,
          5
          /* SyntaxKind.CommaToken */
        ]);
      }
      needsComma = true;
    }
    onArrayEnd();
    if (!isFirstElement) {
      _jsonPath.pop();
    }
    if (_scanner.getToken() !== 4) {
      handleError2(8, [
        4
        /* SyntaxKind.CloseBracketToken */
      ], []);
    } else {
      scanNext();
    }
    return true;
  }
  function parseValue2() {
    switch (_scanner.getToken()) {
      case 3:
        return parseArray();
      case 1:
        return parseObject();
      case 10:
        return parseString(true);
      default:
        return parseLiteral();
    }
  }
  scanNext();
  if (_scanner.getToken() === 17) {
    if (options.allowEmptyContent) {
      return true;
    }
    handleError2(4, [], []);
    return false;
  }
  if (!parseValue2()) {
    handleError2(4, [], []);
    return false;
  }
  if (_scanner.getToken() !== 17) {
    handleError2(9, [], []);
  }
  return true;
}
var ScanError;
(function(ScanError2) {
  ScanError2[ScanError2["None"] = 0] = "None";
  ScanError2[ScanError2["UnexpectedEndOfComment"] = 1] = "UnexpectedEndOfComment";
  ScanError2[ScanError2["UnexpectedEndOfString"] = 2] = "UnexpectedEndOfString";
  ScanError2[ScanError2["UnexpectedEndOfNumber"] = 3] = "UnexpectedEndOfNumber";
  ScanError2[ScanError2["InvalidUnicode"] = 4] = "InvalidUnicode";
  ScanError2[ScanError2["InvalidEscapeCharacter"] = 5] = "InvalidEscapeCharacter";
  ScanError2[ScanError2["InvalidCharacter"] = 6] = "InvalidCharacter";
})(ScanError || (ScanError = {}));
var SyntaxKind;
(function(SyntaxKind2) {
  SyntaxKind2[SyntaxKind2["OpenBraceToken"] = 1] = "OpenBraceToken";
  SyntaxKind2[SyntaxKind2["CloseBraceToken"] = 2] = "CloseBraceToken";
  SyntaxKind2[SyntaxKind2["OpenBracketToken"] = 3] = "OpenBracketToken";
  SyntaxKind2[SyntaxKind2["CloseBracketToken"] = 4] = "CloseBracketToken";
  SyntaxKind2[SyntaxKind2["CommaToken"] = 5] = "CommaToken";
  SyntaxKind2[SyntaxKind2["ColonToken"] = 6] = "ColonToken";
  SyntaxKind2[SyntaxKind2["NullKeyword"] = 7] = "NullKeyword";
  SyntaxKind2[SyntaxKind2["TrueKeyword"] = 8] = "TrueKeyword";
  SyntaxKind2[SyntaxKind2["FalseKeyword"] = 9] = "FalseKeyword";
  SyntaxKind2[SyntaxKind2["StringLiteral"] = 10] = "StringLiteral";
  SyntaxKind2[SyntaxKind2["NumericLiteral"] = 11] = "NumericLiteral";
  SyntaxKind2[SyntaxKind2["LineCommentTrivia"] = 12] = "LineCommentTrivia";
  SyntaxKind2[SyntaxKind2["BlockCommentTrivia"] = 13] = "BlockCommentTrivia";
  SyntaxKind2[SyntaxKind2["LineBreakTrivia"] = 14] = "LineBreakTrivia";
  SyntaxKind2[SyntaxKind2["Trivia"] = 15] = "Trivia";
  SyntaxKind2[SyntaxKind2["Unknown"] = 16] = "Unknown";
  SyntaxKind2[SyntaxKind2["EOF"] = 17] = "EOF";
})(SyntaxKind || (SyntaxKind = {}));
const parse = parse$1;
var ParseErrorCode;
(function(ParseErrorCode2) {
  ParseErrorCode2[ParseErrorCode2["InvalidSymbol"] = 1] = "InvalidSymbol";
  ParseErrorCode2[ParseErrorCode2["InvalidNumberFormat"] = 2] = "InvalidNumberFormat";
  ParseErrorCode2[ParseErrorCode2["PropertyNameExpected"] = 3] = "PropertyNameExpected";
  ParseErrorCode2[ParseErrorCode2["ValueExpected"] = 4] = "ValueExpected";
  ParseErrorCode2[ParseErrorCode2["ColonExpected"] = 5] = "ColonExpected";
  ParseErrorCode2[ParseErrorCode2["CommaExpected"] = 6] = "CommaExpected";
  ParseErrorCode2[ParseErrorCode2["CloseBraceExpected"] = 7] = "CloseBraceExpected";
  ParseErrorCode2[ParseErrorCode2["CloseBracketExpected"] = 8] = "CloseBracketExpected";
  ParseErrorCode2[ParseErrorCode2["EndOfFileExpected"] = 9] = "EndOfFileExpected";
  ParseErrorCode2[ParseErrorCode2["InvalidCommentToken"] = 10] = "InvalidCommentToken";
  ParseErrorCode2[ParseErrorCode2["UnexpectedEndOfComment"] = 11] = "UnexpectedEndOfComment";
  ParseErrorCode2[ParseErrorCode2["UnexpectedEndOfString"] = 12] = "UnexpectedEndOfString";
  ParseErrorCode2[ParseErrorCode2["UnexpectedEndOfNumber"] = 13] = "UnexpectedEndOfNumber";
  ParseErrorCode2[ParseErrorCode2["InvalidUnicode"] = 14] = "InvalidUnicode";
  ParseErrorCode2[ParseErrorCode2["InvalidEscapeCharacter"] = 15] = "InvalidEscapeCharacter";
  ParseErrorCode2[ParseErrorCode2["InvalidCharacter"] = 16] = "InvalidCharacter";
})(ParseErrorCode || (ParseErrorCode = {}));
"process" in globalThis && typeof process !== "undefined" && typeof process.release !== "undefined" && process.release.name === "node";
let CDN_ROOT = "";
const WASM_PATH = "dist/";
function setCDN(root) {
  CDN_ROOT = root.endsWith("/") ? root : root + "/";
}
let _onigurumaPromise = null;
async function getOniguruma(wasmPath) {
  if (!_onigurumaPromise) {
    let loader;
    {
      {
        loader = mainExports$1.loadWASM({
          data: await (globalThis.__shiki_fetch__ || globalThis.fetch)(_resolvePath(join(...dirpathparts(wasmPath), "onig.wasm")))
        });
      }
    }
    _onigurumaPromise = loader.then(() => {
      return {
        createOnigScanner(patterns2) {
          return mainExports$1.createOnigScanner(patterns2);
        },
        createOnigString(s5) {
          return mainExports$1.createOnigString(s5);
        }
      };
    });
  }
  return _onigurumaPromise;
}
function _resolvePath(filepath) {
  {
    return `${CDN_ROOT}${filepath}`;
  }
}
async function _fetchAssets(filepath) {
  const path = _resolvePath(filepath);
  {
    return await (globalThis.__shiki_fetch__ || globalThis.fetch)(path).then((r2) => r2.text());
  }
}
async function _fetchJSONAssets(filepath) {
  const errors = [];
  const rawTheme = parse(await _fetchAssets(filepath), errors, {
    allowTrailingComma: true
  });
  if (errors.length) {
    throw errors[0];
  }
  return rawTheme;
}
async function fetchTheme(themePath) {
  let theme = await _fetchJSONAssets(themePath);
  const shikiTheme = toShikiTheme(theme);
  if (shikiTheme.include) {
    const includedTheme = await fetchTheme(join(...dirpathparts(themePath), shikiTheme.include));
    if (includedTheme.settings) {
      shikiTheme.settings = includedTheme.settings.concat(shikiTheme.settings);
    }
    if (includedTheme.bg && !shikiTheme.bg) {
      shikiTheme.bg = includedTheme.bg;
    }
    if (includedTheme.colors) {
      shikiTheme.colors = { ...includedTheme.colors, ...shikiTheme.colors };
    }
    delete shikiTheme.include;
  }
  return shikiTheme;
}
async function fetchGrammar(filepath) {
  return await _fetchJSONAssets(filepath);
}
function repairTheme(theme) {
  if (!theme.settings)
    theme.settings = [];
  if (theme.settings[0] && theme.settings[0].settings && !theme.settings[0].scope) {
    return;
  }
  theme.settings.unshift({
    settings: {
      foreground: theme.fg,
      background: theme.bg
    }
  });
}
function toShikiTheme(rawTheme) {
  const type = rawTheme.type || "dark";
  const shikiTheme = {
    name: rawTheme.name,
    type,
    ...rawTheme,
    ...getThemeDefaultColors(rawTheme)
  };
  if (rawTheme.include) {
    shikiTheme.include = rawTheme.include;
  }
  if (rawTheme.tokenColors) {
    shikiTheme.settings = rawTheme.tokenColors;
    delete shikiTheme.tokenColors;
  }
  repairTheme(shikiTheme);
  return shikiTheme;
}
const VSCODE_FALLBACK_EDITOR_FG = { light: "#333333", dark: "#bbbbbb" };
const VSCODE_FALLBACK_EDITOR_BG = { light: "#fffffe", dark: "#1e1e1e" };
function getThemeDefaultColors(theme) {
  var _a2, _b, _c2, _d2;
  let fg2, bg2;
  let settings = theme.settings ? theme.settings : theme.tokenColors;
  const globalSetting = settings ? settings.find((s5) => {
    return !s5.name && !s5.scope;
  }) : void 0;
  if ((_a2 = globalSetting == null ? void 0 : globalSetting.settings) == null ? void 0 : _a2.foreground) {
    fg2 = globalSetting.settings.foreground;
  }
  if ((_b = globalSetting == null ? void 0 : globalSetting.settings) == null ? void 0 : _b.background) {
    bg2 = globalSetting.settings.background;
  }
  if (!fg2 && ((_c2 = theme == null ? void 0 : theme.colors) == null ? void 0 : _c2["editor.foreground"])) {
    fg2 = theme.colors["editor.foreground"];
  }
  if (!bg2 && ((_d2 = theme == null ? void 0 : theme.colors) == null ? void 0 : _d2["editor.background"])) {
    bg2 = theme.colors["editor.background"];
  }
  if (!fg2) {
    fg2 = theme.type === "light" ? VSCODE_FALLBACK_EDITOR_FG.light : VSCODE_FALLBACK_EDITOR_FG.dark;
  }
  if (!bg2) {
    bg2 = theme.type === "light" ? VSCODE_FALLBACK_EDITOR_BG.light : VSCODE_FALLBACK_EDITOR_BG.dark;
  }
  return {
    fg: fg2,
    bg: bg2
  };
}
class Resolver {
  constructor(onigLibPromise, onigLibName) {
    this.languagesPath = "languages/";
    this.languageMap = {};
    this.scopeToLangMap = {};
    this._onigLibPromise = onigLibPromise;
    this._onigLibName = onigLibName;
  }
  get onigLib() {
    return this._onigLibPromise;
  }
  getOnigLibName() {
    return this._onigLibName;
  }
  getLangRegistration(langIdOrAlias) {
    return this.languageMap[langIdOrAlias];
  }
  async loadGrammar(scopeName) {
    const lang = this.scopeToLangMap[scopeName];
    if (!lang) {
      return null;
    }
    if (lang.grammar) {
      return lang.grammar;
    }
    const g2 = await fetchGrammar(
      languages.includes(lang) ? `${this.languagesPath}${lang.path}` : lang.path
    );
    lang.grammar = g2;
    return g2;
  }
  addLanguage(l2) {
    this.languageMap[l2.id] = l2;
    if (l2.aliases) {
      l2.aliases.forEach((a4) => {
        this.languageMap[a4] = l2;
      });
    }
    this.scopeToLangMap[l2.scopeName] = l2;
  }
}
function tokenizeWithTheme(theme, colorMap, fileContents, grammar, options) {
  let lines = fileContents.split(/\r\n|\r|\n/);
  let ruleStack = mainExports.INITIAL;
  let actual = [];
  let final = [];
  for (let i3 = 0, len = lines.length; i3 < len; i3++) {
    let line = lines[i3];
    if (line === "") {
      actual = [];
      final.push([]);
      continue;
    }
    let resultWithScopes;
    let tokensWithScopes;
    let tokensWithScopesIndex;
    if (options.includeExplanation) {
      resultWithScopes = grammar.tokenizeLine(line, ruleStack);
      tokensWithScopes = resultWithScopes.tokens;
      tokensWithScopesIndex = 0;
    }
    let result = grammar.tokenizeLine2(line, ruleStack);
    let tokensLength = result.tokens.length / 2;
    for (let j2 = 0; j2 < tokensLength; j2++) {
      let startIndex = result.tokens[2 * j2];
      let nextStartIndex = j2 + 1 < tokensLength ? result.tokens[2 * j2 + 2] : line.length;
      if (startIndex === nextStartIndex) {
        continue;
      }
      let metadata = result.tokens[2 * j2 + 1];
      let foreground = StackElementMetadata.getForeground(metadata);
      let foregroundColor = colorMap[foreground];
      let fontStyle = StackElementMetadata.getFontStyle(metadata);
      let explanation = [];
      if (options.includeExplanation) {
        let offset2 = 0;
        while (startIndex + offset2 < nextStartIndex) {
          let tokenWithScopes = tokensWithScopes[tokensWithScopesIndex];
          let tokenWithScopesText = line.substring(
            tokenWithScopes.startIndex,
            tokenWithScopes.endIndex
          );
          offset2 += tokenWithScopesText.length;
          explanation.push({
            content: tokenWithScopesText,
            scopes: explainThemeScopes(theme, tokenWithScopes.scopes)
          });
          tokensWithScopesIndex++;
        }
      }
      actual.push({
        content: line.substring(startIndex, nextStartIndex),
        color: foregroundColor,
        fontStyle,
        explanation
      });
    }
    final.push(actual);
    actual = [];
    ruleStack = result.ruleStack;
  }
  return final;
}
function explainThemeScopes(theme, scopes) {
  let result = [];
  for (let i3 = 0, len = scopes.length; i3 < len; i3++) {
    let parentScopes = scopes.slice(0, i3);
    let scope = scopes[i3];
    result[i3] = {
      scopeName: scope,
      themeMatches: explainThemeScope(theme, scope, parentScopes)
    };
  }
  return result;
}
function matchesOne(selector, scope) {
  let selectorPrefix = selector + ".";
  if (selector === scope || scope.substring(0, selectorPrefix.length) === selectorPrefix) {
    return true;
  }
  return false;
}
function matches(selector, selectorParentScopes, scope, parentScopes) {
  if (!matchesOne(selector, scope)) {
    return false;
  }
  let selectorParentIndex = selectorParentScopes.length - 1;
  let parentIndex = parentScopes.length - 1;
  while (selectorParentIndex >= 0 && parentIndex >= 0) {
    if (matchesOne(selectorParentScopes[selectorParentIndex], parentScopes[parentIndex])) {
      selectorParentIndex--;
    }
    parentIndex--;
  }
  if (selectorParentIndex === -1) {
    return true;
  }
  return false;
}
function explainThemeScope(theme, scope, parentScopes) {
  let result = [], resultLen = 0;
  for (let i3 = 0, len = theme.settings.length; i3 < len; i3++) {
    let setting = theme.settings[i3];
    let selectors;
    if (typeof setting.scope === "string") {
      selectors = setting.scope.split(/,/).map((scope2) => scope2.trim());
    } else if (Array.isArray(setting.scope)) {
      selectors = setting.scope;
    } else {
      continue;
    }
    for (let j2 = 0, lenJ = selectors.length; j2 < lenJ; j2++) {
      let rawSelector = selectors[j2];
      let rawSelectorPieces = rawSelector.split(/ /);
      let selector = rawSelectorPieces[rawSelectorPieces.length - 1];
      let selectorParentScopes = rawSelectorPieces.slice(0, rawSelectorPieces.length - 1);
      if (matches(selector, selectorParentScopes, scope, parentScopes)) {
        result[resultLen++] = setting;
        j2 = lenJ;
      }
    }
  }
  return result;
}
const defaultElements = {
  pre({ className, style, children }) {
    return `<pre class="${className}" style="${style}">${children}</pre>`;
  },
  code({ children }) {
    return `<code>${children}</code>`;
  },
  line({ className, children }) {
    return `<span class="${className}">${children}</span>`;
  },
  token({ style, children }) {
    return `<span style="${style}">${children}</span>`;
  }
};
function renderToHtml(lines, options = {}) {
  const bg2 = options.bg || "#fff";
  const optionsByLineNumber = groupBy(options.lineOptions ?? [], (option) => option.line);
  const userElements = options.elements || {};
  function h4(type = "", props = {}, children) {
    const element = userElements[type] || defaultElements[type];
    if (element) {
      children = children.filter(Boolean);
      return element({
        ...props,
        children: type === "code" ? children.join("\n") : children.join("")
      });
    }
    return "";
  }
  return h4(
    "pre",
    { className: "shiki " + (options.themeName || ""), style: `background-color: ${bg2}` },
    [
      options.langId ? `<div class="language-id">${options.langId}</div>` : "",
      h4(
        "code",
        {},
        lines.map((line, index) => {
          const lineNumber = index + 1;
          const lineOptions = optionsByLineNumber.get(lineNumber) ?? [];
          const lineClasses = getLineClasses(lineOptions).join(" ");
          return h4(
            "line",
            {
              className: lineClasses,
              lines,
              line,
              index
            },
            line.map((token, index2) => {
              const cssDeclarations = [`color: ${token.color || options.fg}`];
              if (token.fontStyle & FontStyle.Italic) {
                cssDeclarations.push("font-style: italic");
              }
              if (token.fontStyle & FontStyle.Bold) {
                cssDeclarations.push("font-weight: bold");
              }
              if (token.fontStyle & FontStyle.Underline) {
                cssDeclarations.push("text-decoration: underline");
              }
              return h4(
                "token",
                {
                  style: cssDeclarations.join("; "),
                  tokens: line,
                  token,
                  index: index2
                },
                [escapeHtml(token.content)]
              );
            })
          );
        })
      )
    ]
  );
}
const htmlEscapes = {
  "&": "&amp;",
  "<": "&lt;",
  ">": "&gt;",
  '"': "&quot;",
  "'": "&#39;"
};
function escapeHtml(html) {
  return html.replace(/[&<>"']/g, (chr) => htmlEscapes[chr]);
}
function getLineClasses(lineOptions) {
  const lineClasses = /* @__PURE__ */ new Set(["line"]);
  for (const lineOption of lineOptions) {
    for (const lineClass of lineOption.classes ?? []) {
      lineClasses.add(lineClass);
    }
  }
  return Array.from(lineClasses);
}
class Registry extends mainExports.Registry {
  constructor(_resolver2) {
    super(_resolver2);
    this._resolver = _resolver2;
    this.themesPath = "themes/";
    this._resolvedThemes = {};
    this._resolvedGrammars = {};
    this._langGraph = /* @__PURE__ */ new Map();
    this._langMap = languages.reduce((acc, lang) => {
      acc[lang.id] = lang;
      return acc;
    }, {});
  }
  getTheme(theme) {
    if (typeof theme === "string") {
      return this._resolvedThemes[theme];
    } else {
      return theme;
    }
  }
  async loadTheme(theme) {
    if (typeof theme === "string") {
      if (!this._resolvedThemes[theme]) {
        this._resolvedThemes[theme] = await fetchTheme(`${this.themesPath}${theme}.json`);
      }
      return this._resolvedThemes[theme];
    } else {
      theme = toShikiTheme(theme);
      if (theme.name) {
        this._resolvedThemes[theme.name] = theme;
      }
      return theme;
    }
  }
  async loadThemes(themes2) {
    return await Promise.all(themes2.map((theme) => this.loadTheme(theme)));
  }
  getLoadedThemes() {
    return Object.keys(this._resolvedThemes);
  }
  getGrammar(name) {
    return this._resolvedGrammars[name];
  }
  async loadLanguage(lang) {
    var _a2;
    const embeddedLanguages = (_a2 = lang.embeddedLangs) == null ? void 0 : _a2.reduce(async (acc, l2, idx) => {
      if (!this.getLoadedLanguages().includes(l2) && this._resolver.getLangRegistration(l2)) {
        await this._resolver.loadGrammar(this._resolver.getLangRegistration(l2).scopeName);
        acc[this._resolver.getLangRegistration(l2).scopeName] = idx + 2;
        return acc;
      }
    }, {});
    const grammarConfig = {
      embeddedLanguages,
      balancedBracketSelectors: lang.balancedBracketSelectors || ["*"],
      unbalancedBracketSelectors: lang.unbalancedBracketSelectors || []
    };
    const g2 = await this.loadGrammarWithConfiguration(lang.scopeName, 1, grammarConfig);
    this._resolvedGrammars[lang.id] = g2;
    if (lang.aliases) {
      lang.aliases.forEach((la2) => {
        this._resolvedGrammars[la2] = g2;
      });
    }
  }
  async loadLanguages(langs) {
    for (const lang of langs) {
      this.resolveEmbeddedLanguages(lang);
    }
    const langsGraphArray = Array.from(this._langGraph.values());
    for (const lang of langsGraphArray) {
      this._resolver.addLanguage(lang);
    }
    for (const lang of langsGraphArray) {
      await this.loadLanguage(lang);
    }
  }
  getLoadedLanguages() {
    return Object.keys(this._resolvedGrammars);
  }
  resolveEmbeddedLanguages(lang) {
    if (!this._langGraph.has(lang.id)) {
      this._langGraph.set(lang.id, lang);
    }
    if (lang.embeddedLangs) {
      for (const embeddedLang of lang.embeddedLangs) {
        this._langGraph.set(embeddedLang, this._langMap[embeddedLang]);
      }
    }
  }
}
function resolveLang(lang) {
  return typeof lang === "string" ? languages.find((l2) => {
    var _a2;
    return l2.id === lang || ((_a2 = l2.aliases) == null ? void 0 : _a2.includes(lang));
  }) : lang;
}
function resolveOptions(options) {
  var _a2;
  let _languages = languages;
  let _themes = options.themes || [];
  let _wasmPath = ((_a2 = options.paths) == null ? void 0 : _a2.wasm) ? options.paths.wasm.endsWith("/") ? options.paths.wasm : options.paths.wasm + "/" : WASM_PATH;
  if (options.langs) {
    _languages = options.langs.map(resolveLang);
  }
  if (options.theme) {
    _themes.unshift(options.theme);
  }
  if (!_themes.length) {
    _themes = ["nord"];
  }
  return { _languages, _themes, _wasmPath };
}
async function getHighlighter(options) {
  var _a2, _b;
  const { _languages, _themes, _wasmPath } = resolveOptions(options);
  const _resolver2 = new Resolver(getOniguruma(_wasmPath), "vscode-oniguruma");
  const _registry = new Registry(_resolver2);
  if ((_a2 = options.paths) == null ? void 0 : _a2.themes) {
    _registry.themesPath = options.paths.themes.endsWith("/") ? options.paths.themes : options.paths.themes + "/";
  }
  if ((_b = options.paths) == null ? void 0 : _b.languages) {
    _resolver2.languagesPath = options.paths.languages.endsWith("/") ? options.paths.languages : options.paths.languages + "/";
  }
  const themes2 = await _registry.loadThemes(_themes);
  const _defaultTheme = themes2[0];
  let _currentTheme;
  await _registry.loadLanguages(_languages);
  let COLOR_REPLACEMENTS = {
    "#000001": "var(--shiki-color-text)",
    "#000002": "var(--shiki-color-background)",
    "#000004": "var(--shiki-token-constant)",
    "#000005": "var(--shiki-token-string)",
    "#000006": "var(--shiki-token-comment)",
    "#000007": "var(--shiki-token-keyword)",
    "#000008": "var(--shiki-token-parameter)",
    "#000009": "var(--shiki-token-function)",
    "#000010": "var(--shiki-token-string-expression)",
    "#000011": "var(--shiki-token-punctuation)",
    "#000012": "var(--shiki-token-link)"
  };
  function setColorReplacements(map2) {
    COLOR_REPLACEMENTS = map2;
  }
  function fixCssVariablesTheme(theme, colorMap) {
    theme.bg = COLOR_REPLACEMENTS[theme.bg] || theme.bg;
    theme.fg = COLOR_REPLACEMENTS[theme.fg] || theme.fg;
    colorMap.forEach((val, i3) => {
      colorMap[i3] = COLOR_REPLACEMENTS[val] || val;
    });
  }
  function getTheme(theme) {
    const _theme = theme ? _registry.getTheme(theme) : _defaultTheme;
    if (!_theme) {
      throw Error(`No theme registration for ${theme}`);
    }
    if (!_currentTheme || _currentTheme.name !== _theme.name) {
      _registry.setTheme(_theme);
      _currentTheme = _theme;
    }
    const _colorMap = _registry.getColorMap();
    if (_theme.type === "css") {
      fixCssVariablesTheme(_theme, _colorMap);
    }
    return { _theme, _colorMap };
  }
  function getGrammar(lang) {
    const _grammar = _registry.getGrammar(lang);
    if (!_grammar) {
      throw Error(`No language registration for ${lang}`);
    }
    return { _grammar };
  }
  function codeToThemedTokens(code2, lang = "text", theme, options2 = { includeExplanation: true }) {
    if (isPlaintext(lang)) {
      const lines = code2.split(/\r\n|\r|\n/);
      return [...lines.map((line) => [{ content: line }])];
    }
    const { _grammar } = getGrammar(lang);
    const { _theme, _colorMap } = getTheme(theme);
    return tokenizeWithTheme(_theme, _colorMap, code2, _grammar, options2);
  }
  function codeToHtml(code2, arg1 = "text", arg2) {
    let options2;
    if (typeof arg1 === "object") {
      options2 = arg1;
    } else {
      options2 = {
        lang: arg1,
        theme: arg2
      };
    }
    const tokens = codeToThemedTokens(code2, options2.lang, options2.theme, {
      includeExplanation: false
    });
    const { _theme } = getTheme(options2.theme);
    return renderToHtml(tokens, {
      fg: _theme.fg,
      bg: _theme.bg,
      lineOptions: options2 == null ? void 0 : options2.lineOptions,
      themeName: _theme.name
    });
  }
  async function loadTheme(theme) {
    await _registry.loadTheme(theme);
  }
  async function loadLanguage(lang) {
    const _lang = resolveLang(lang);
    _resolver2.addLanguage(_lang);
    await _registry.loadLanguage(_lang);
  }
  function getLoadedThemes() {
    return _registry.getLoadedThemes();
  }
  function getLoadedLanguages() {
    return _registry.getLoadedLanguages();
  }
  function getBackgroundColor(theme) {
    const { _theme } = getTheme(theme);
    return _theme.bg;
  }
  function getForegroundColor(theme) {
    const { _theme } = getTheme(theme);
    return _theme.fg;
  }
  return {
    codeToThemedTokens,
    codeToHtml,
    getTheme: (theme) => {
      return getTheme(theme)._theme;
    },
    loadTheme,
    loadLanguage,
    getBackgroundColor,
    getForegroundColor,
    getLoadedThemes,
    getLoadedLanguages,
    setColorReplacements
  };
}
function isPlaintext(lang) {
  return !lang || ["plaintext", "txt", "text"].includes(lang);
}
const version = "0.2.0";
setCDN(`https://cdn.jsdelivr.net/npm/shiki-es@${version}/dist/assets/`);
var commonjsGlobal = typeof globalThis !== "undefined" ? globalThis : typeof window !== "undefined" ? window : typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : {};
var flexsearch_bundle = { exports: {} };
flexsearch_bundle.exports;
(function(module) {
  (function _f(self) {
    try {
      if (module)
        self = module;
    } catch (e3) {
    }
    self._factory = _f;
    var t;
    function u(a4) {
      return "undefined" !== typeof a4 ? a4 : true;
    }
    function aa(a4) {
      const b4 = Array(a4);
      for (let c3 = 0; c3 < a4; c3++)
        b4[c3] = v();
      return b4;
    }
    function v() {
      return /* @__PURE__ */ Object.create(null);
    }
    function ba(a4, b4) {
      return b4.length - a4.length;
    }
    function x(a4) {
      return "string" === typeof a4;
    }
    function C(a4) {
      return "object" === typeof a4;
    }
    function D(a4) {
      return "function" === typeof a4;
    }
    function ca(a4, b4) {
      var c3 = da;
      if (a4 && (b4 && (a4 = E(a4, b4)), this.H && (a4 = E(a4, this.H)), this.J && 1 < a4.length && (a4 = E(a4, this.J)), c3 || "" === c3)) {
        a4 = a4.split(c3);
        if (this.filter) {
          b4 = this.filter;
          c3 = a4.length;
          const d4 = [];
          for (let e3 = 0, f2 = 0; e3 < c3; e3++) {
            const g2 = a4[e3];
            g2 && !b4[g2] && (d4[f2++] = g2);
          }
          a4 = d4;
        }
        return a4;
      }
      return a4;
    }
    const da = /[\p{Z}\p{S}\p{P}\p{C}]+/u, ea = /[\u0300-\u036f]/g;
    function fa(a4, b4) {
      const c3 = Object.keys(a4), d4 = c3.length, e3 = [];
      let f2 = "", g2 = 0;
      for (let h4 = 0, k3, m4; h4 < d4; h4++)
        k3 = c3[h4], (m4 = a4[k3]) ? (e3[g2++] = F(b4 ? "(?!\\b)" + k3 + "(\\b|_)" : k3), e3[g2++] = m4) : f2 += (f2 ? "|" : "") + k3;
      f2 && (e3[g2++] = F(b4 ? "(?!\\b)(" + f2 + ")(\\b|_)" : "(" + f2 + ")"), e3[g2] = "");
      return e3;
    }
    function E(a4, b4) {
      for (let c3 = 0, d4 = b4.length; c3 < d4 && (a4 = a4.replace(b4[c3], b4[c3 + 1]), a4); c3 += 2)
        ;
      return a4;
    }
    function F(a4) {
      return new RegExp(a4, "g");
    }
    function ha(a4) {
      let b4 = "", c3 = "";
      for (let d4 = 0, e3 = a4.length, f2; d4 < e3; d4++)
        (f2 = a4[d4]) !== c3 && (b4 += c3 = f2);
      return b4;
    }
    var ja = { encode: ia, F: false, G: "" };
    function ia(a4) {
      return ca.call(this, ("" + a4).toLowerCase(), false);
    }
    const ka = {}, G = {};
    function la(a4) {
      I(a4, "add");
      I(a4, "append");
      I(a4, "search");
      I(a4, "update");
      I(a4, "remove");
    }
    function I(a4, b4) {
      a4[b4 + "Async"] = function() {
        const c3 = this, d4 = arguments;
        var e3 = d4[d4.length - 1];
        let f2;
        D(e3) && (f2 = e3, delete d4[d4.length - 1]);
        e3 = new Promise(function(g2) {
          setTimeout(function() {
            c3.async = true;
            const h4 = c3[b4].apply(c3, d4);
            c3.async = false;
            g2(h4);
          });
        });
        return f2 ? (e3.then(f2), this) : e3;
      };
    }
    function ma(a4, b4, c3, d4) {
      const e3 = a4.length;
      let f2 = [], g2, h4, k3 = 0;
      d4 && (d4 = []);
      for (let m4 = e3 - 1; 0 <= m4; m4--) {
        const n2 = a4[m4], w3 = n2.length, q3 = v();
        let r2 = !g2;
        for (let l2 = 0; l2 < w3; l2++) {
          const p2 = n2[l2], z4 = p2.length;
          if (z4)
            for (let B3 = 0, A2, y4; B3 < z4; B3++)
              if (y4 = p2[B3], g2) {
                if (g2[y4]) {
                  if (!m4) {
                    if (c3)
                      c3--;
                    else if (f2[k3++] = y4, k3 === b4)
                      return f2;
                  }
                  if (m4 || d4)
                    q3[y4] = 1;
                  r2 = true;
                }
                if (d4 && (h4[y4] = (A2 = h4[y4]) ? ++A2 : A2 = 1, A2 < e3)) {
                  const H5 = d4[A2 - 2] || (d4[A2 - 2] = []);
                  H5[H5.length] = y4;
                }
              } else
                q3[y4] = 1;
        }
        if (d4)
          g2 || (h4 = q3);
        else if (!r2)
          return [];
        g2 = q3;
      }
      if (d4)
        for (let m4 = d4.length - 1, n2, w3; 0 <= m4; m4--) {
          n2 = d4[m4];
          w3 = n2.length;
          for (let q3 = 0, r2; q3 < w3; q3++)
            if (r2 = n2[q3], !g2[r2]) {
              if (c3)
                c3--;
              else if (f2[k3++] = r2, k3 === b4)
                return f2;
              g2[r2] = 1;
            }
        }
      return f2;
    }
    function na(a4, b4) {
      const c3 = v(), d4 = v(), e3 = [];
      for (let f2 = 0; f2 < a4.length; f2++)
        c3[a4[f2]] = 1;
      for (let f2 = 0, g2; f2 < b4.length; f2++) {
        g2 = b4[f2];
        for (let h4 = 0, k3; h4 < g2.length; h4++)
          k3 = g2[h4], c3[k3] && !d4[k3] && (d4[k3] = 1, e3[e3.length] = k3);
      }
      return e3;
    }
    function J(a4) {
      this.l = true !== a4 && a4;
      this.cache = v();
      this.h = [];
    }
    function oa(a4, b4, c3) {
      C(a4) && (a4 = a4.query);
      let d4 = this.cache.get(a4);
      d4 || (d4 = this.search(a4, b4, c3), this.cache.set(a4, d4));
      return d4;
    }
    J.prototype.set = function(a4, b4) {
      if (!this.cache[a4]) {
        var c3 = this.h.length;
        c3 === this.l ? delete this.cache[this.h[c3 - 1]] : c3++;
        for (--c3; 0 < c3; c3--)
          this.h[c3] = this.h[c3 - 1];
        this.h[0] = a4;
      }
      this.cache[a4] = b4;
    };
    J.prototype.get = function(a4) {
      const b4 = this.cache[a4];
      if (this.l && b4 && (a4 = this.h.indexOf(a4))) {
        const c3 = this.h[a4 - 1];
        this.h[a4 - 1] = this.h[a4];
        this.h[a4] = c3;
      }
      return b4;
    };
    const qa = { memory: { charset: "latin:extra", D: 3, B: 4, m: false }, performance: { D: 3, B: 3, s: false, context: { depth: 2, D: 1 } }, match: { charset: "latin:extra", G: "reverse" }, score: { charset: "latin:advanced", D: 20, B: 3, context: { depth: 3, D: 9 } }, "default": {} };
    function ra(a4, b4, c3, d4, e3, f2) {
      setTimeout(function() {
        const g2 = a4(c3, JSON.stringify(f2));
        g2 && g2.then ? g2.then(function() {
          b4.export(a4, b4, c3, d4, e3 + 1);
        }) : b4.export(a4, b4, c3, d4, e3 + 1);
      });
    }
    function K(a4, b4) {
      if (!(this instanceof K))
        return new K(a4);
      var c3;
      if (a4) {
        x(a4) ? a4 = qa[a4] : (c3 = a4.preset) && (a4 = Object.assign({}, c3[c3], a4));
        c3 = a4.charset;
        var d4 = a4.lang;
        x(c3) && (-1 === c3.indexOf(":") && (c3 += ":default"), c3 = G[c3]);
        x(d4) && (d4 = ka[d4]);
      } else
        a4 = {};
      let e3, f2, g2 = a4.context || {};
      this.encode = a4.encode || c3 && c3.encode || ia;
      this.register = b4 || v();
      this.D = e3 = a4.resolution || 9;
      this.G = b4 = c3 && c3.G || a4.tokenize || "strict";
      this.depth = "strict" === b4 && g2.depth;
      this.l = u(g2.bidirectional);
      this.s = f2 = u(a4.optimize);
      this.m = u(a4.fastupdate);
      this.B = a4.minlength || 1;
      this.C = a4.boost;
      this.map = f2 ? aa(e3) : v();
      this.A = e3 = g2.resolution || 1;
      this.h = f2 ? aa(e3) : v();
      this.F = c3 && c3.F || a4.rtl;
      this.H = (b4 = a4.matcher || d4 && d4.H) && fa(b4, false);
      this.J = (b4 = a4.stemmer || d4 && d4.J) && fa(b4, true);
      if (c3 = b4 = a4.filter || d4 && d4.filter) {
        c3 = b4;
        d4 = v();
        for (let h4 = 0, k3 = c3.length; h4 < k3; h4++)
          d4[c3[h4]] = 1;
        c3 = d4;
      }
      this.filter = c3;
      this.cache = (b4 = a4.cache) && new J(b4);
    }
    t = K.prototype;
    t.append = function(a4, b4) {
      return this.add(a4, b4, true);
    };
    t.add = function(a4, b4, c3, d4) {
      if (b4 && (a4 || 0 === a4)) {
        if (!d4 && !c3 && this.register[a4])
          return this.update(a4, b4);
        b4 = this.encode(b4);
        if (d4 = b4.length) {
          const m4 = v(), n2 = v(), w3 = this.depth, q3 = this.D;
          for (let r2 = 0; r2 < d4; r2++) {
            let l2 = b4[this.F ? d4 - 1 - r2 : r2];
            var e3 = l2.length;
            if (l2 && e3 >= this.B && (w3 || !n2[l2])) {
              var f2 = L(q3, d4, r2), g2 = "";
              switch (this.G) {
                case "full":
                  if (3 < e3) {
                    for (f2 = 0; f2 < e3; f2++)
                      for (var h4 = e3; h4 > f2; h4--)
                        if (h4 - f2 >= this.B) {
                          var k3 = L(q3, d4, r2, e3, f2);
                          g2 = l2.substring(f2, h4);
                          M(this, n2, g2, k3, a4, c3);
                        }
                    break;
                  }
                case "reverse":
                  if (2 < e3) {
                    for (h4 = e3 - 1; 0 < h4; h4--)
                      g2 = l2[h4] + g2, g2.length >= this.B && M(
                        this,
                        n2,
                        g2,
                        L(q3, d4, r2, e3, h4),
                        a4,
                        c3
                      );
                    g2 = "";
                  }
                case "forward":
                  if (1 < e3) {
                    for (h4 = 0; h4 < e3; h4++)
                      g2 += l2[h4], g2.length >= this.B && M(this, n2, g2, f2, a4, c3);
                    break;
                  }
                default:
                  if (this.C && (f2 = Math.min(f2 / this.C(b4, l2, r2) | 0, q3 - 1)), M(this, n2, l2, f2, a4, c3), w3 && 1 < d4 && r2 < d4 - 1) {
                    for (e3 = v(), g2 = this.A, f2 = l2, h4 = Math.min(w3 + 1, d4 - r2), e3[f2] = 1, k3 = 1; k3 < h4; k3++)
                      if ((l2 = b4[this.F ? d4 - 1 - r2 - k3 : r2 + k3]) && l2.length >= this.B && !e3[l2]) {
                        e3[l2] = 1;
                        const p2 = this.l && l2 > f2;
                        M(this, m4, p2 ? f2 : l2, L(g2 + (d4 / 2 > g2 ? 0 : 1), d4, r2, h4 - 1, k3 - 1), a4, c3, p2 ? l2 : f2);
                      }
                  }
              }
            }
          }
          this.m || (this.register[a4] = 1);
        }
      }
      return this;
    };
    function L(a4, b4, c3, d4, e3) {
      return c3 && 1 < a4 ? b4 + (d4 || 0) <= a4 ? c3 + (e3 || 0) : (a4 - 1) / (b4 + (d4 || 0)) * (c3 + (e3 || 0)) + 1 | 0 : 0;
    }
    function M(a4, b4, c3, d4, e3, f2, g2) {
      let h4 = g2 ? a4.h : a4.map;
      if (!b4[c3] || g2 && !b4[c3][g2])
        a4.s && (h4 = h4[d4]), g2 ? (b4 = b4[c3] || (b4[c3] = v()), b4[g2] = 1, h4 = h4[g2] || (h4[g2] = v())) : b4[c3] = 1, h4 = h4[c3] || (h4[c3] = []), a4.s || (h4 = h4[d4] || (h4[d4] = [])), f2 && -1 !== h4.indexOf(e3) || (h4[h4.length] = e3, a4.m && (a4 = a4.register[e3] || (a4.register[e3] = []), a4[a4.length] = h4));
    }
    t.search = function(a4, b4, c3) {
      c3 || (!b4 && C(a4) ? (c3 = a4, a4 = c3.query) : C(b4) && (c3 = b4));
      let d4 = [], e3;
      let f2, g2 = 0;
      if (c3) {
        b4 = c3.limit;
        g2 = c3.offset || 0;
        var h4 = c3.context;
        f2 = c3.suggest;
      }
      if (a4 && (a4 = this.encode(a4), e3 = a4.length, 1 < e3)) {
        c3 = v();
        var k3 = [];
        for (let n2 = 0, w3 = 0, q3; n2 < e3; n2++)
          if ((q3 = a4[n2]) && q3.length >= this.B && !c3[q3])
            if (this.s || f2 || this.map[q3])
              k3[w3++] = q3, c3[q3] = 1;
            else
              return d4;
        a4 = k3;
        e3 = a4.length;
      }
      if (!e3)
        return d4;
      b4 || (b4 = 100);
      h4 = this.depth && 1 < e3 && false !== h4;
      c3 = 0;
      let m4;
      h4 ? (m4 = a4[0], c3 = 1) : 1 < e3 && a4.sort(ba);
      for (let n2, w3; c3 < e3; c3++) {
        w3 = a4[c3];
        h4 ? (n2 = sa(this, d4, f2, b4, g2, 2 === e3, w3, m4), f2 && false === n2 && d4.length || (m4 = w3)) : n2 = sa(this, d4, f2, b4, g2, 1 === e3, w3);
        if (n2)
          return n2;
        if (f2 && c3 === e3 - 1) {
          k3 = d4.length;
          if (!k3) {
            if (h4) {
              h4 = 0;
              c3 = -1;
              continue;
            }
            return d4;
          }
          if (1 === k3)
            return ta(d4[0], b4, g2);
        }
      }
      return ma(d4, b4, g2, f2);
    };
    function sa(a4, b4, c3, d4, e3, f2, g2, h4) {
      let k3 = [], m4 = h4 ? a4.h : a4.map;
      a4.s || (m4 = ua(m4, g2, h4, a4.l));
      if (m4) {
        let n2 = 0;
        const w3 = Math.min(m4.length, h4 ? a4.A : a4.D);
        for (let q3 = 0, r2 = 0, l2, p2; q3 < w3; q3++)
          if (l2 = m4[q3]) {
            if (a4.s && (l2 = ua(l2, g2, h4, a4.l)), e3 && l2 && f2 && (p2 = l2.length, p2 <= e3 ? (e3 -= p2, l2 = null) : (l2 = l2.slice(e3), e3 = 0)), l2 && (k3[n2++] = l2, f2 && (r2 += l2.length, r2 >= d4)))
              break;
          }
        if (n2) {
          if (f2)
            return ta(k3, d4, 0);
          b4[b4.length] = k3;
          return;
        }
      }
      return !c3 && k3;
    }
    function ta(a4, b4, c3) {
      a4 = 1 === a4.length ? a4[0] : [].concat.apply([], a4);
      return c3 || a4.length > b4 ? a4.slice(c3, c3 + b4) : a4;
    }
    function ua(a4, b4, c3, d4) {
      c3 ? (d4 = d4 && b4 > c3, a4 = (a4 = a4[d4 ? b4 : c3]) && a4[d4 ? c3 : b4]) : a4 = a4[b4];
      return a4;
    }
    t.contain = function(a4) {
      return !!this.register[a4];
    };
    t.update = function(a4, b4) {
      return this.remove(a4).add(a4, b4);
    };
    t.remove = function(a4, b4) {
      const c3 = this.register[a4];
      if (c3) {
        if (this.m)
          for (let d4 = 0, e3; d4 < c3.length; d4++)
            e3 = c3[d4], e3.splice(e3.indexOf(a4), 1);
        else
          N(this.map, a4, this.D, this.s), this.depth && N(this.h, a4, this.A, this.s);
        b4 || delete this.register[a4];
        if (this.cache) {
          b4 = this.cache;
          for (let d4 = 0, e3, f2; d4 < b4.h.length; d4++)
            f2 = b4.h[d4], e3 = b4.cache[f2], -1 !== e3.indexOf(a4) && (b4.h.splice(d4--, 1), delete b4.cache[f2]);
        }
      }
      return this;
    };
    function N(a4, b4, c3, d4, e3) {
      let f2 = 0;
      if (a4.constructor === Array)
        if (e3)
          b4 = a4.indexOf(b4), -1 !== b4 ? 1 < a4.length && (a4.splice(b4, 1), f2++) : f2++;
        else {
          e3 = Math.min(a4.length, c3);
          for (let g2 = 0, h4; g2 < e3; g2++)
            if (h4 = a4[g2])
              f2 = N(h4, b4, c3, d4, e3), d4 || f2 || delete a4[g2];
        }
      else
        for (let g2 in a4)
          (f2 = N(a4[g2], b4, c3, d4, e3)) || delete a4[g2];
      return f2;
    }
    t.searchCache = oa;
    t.export = function(a4, b4, c3, d4, e3) {
      let f2, g2;
      switch (e3 || (e3 = 0)) {
        case 0:
          f2 = "reg";
          if (this.m) {
            g2 = v();
            for (let h4 in this.register)
              g2[h4] = 1;
          } else
            g2 = this.register;
          break;
        case 1:
          f2 = "cfg";
          g2 = { doc: 0, opt: this.s ? 1 : 0 };
          break;
        case 2:
          f2 = "map";
          g2 = this.map;
          break;
        case 3:
          f2 = "ctx";
          g2 = this.h;
          break;
        default:
          return;
      }
      ra(a4, b4 || this, c3 ? c3 + "." + f2 : f2, d4, e3, g2);
      return true;
    };
    t.import = function(a4, b4) {
      if (b4)
        switch (x(b4) && (b4 = JSON.parse(b4)), a4) {
          case "cfg":
            this.s = !!b4.opt;
            break;
          case "reg":
            this.m = false;
            this.register = b4;
            break;
          case "map":
            this.map = b4;
            break;
          case "ctx":
            this.h = b4;
        }
    };
    la(K.prototype);
    function va(a4) {
      a4 = a4.data;
      var b4 = self._index;
      const c3 = a4.args;
      var d4 = a4.task;
      switch (d4) {
        case "init":
          d4 = a4.options || {};
          a4 = a4.factory;
          b4 = d4.encode;
          d4.cache = false;
          b4 && 0 === b4.indexOf("function") && (d4.encode = Function("return " + b4)());
          a4 ? (Function("return " + a4)()(self), self._index = new self.FlexSearch.Index(d4), delete self.FlexSearch) : self._index = new K(d4);
          break;
        default:
          a4 = a4.id, b4 = b4[d4].apply(b4, c3), postMessage("search" === d4 ? { id: a4, msg: b4 } : { id: a4 });
      }
    }
    let wa = 0;
    function O(a4) {
      if (!(this instanceof O))
        return new O(a4);
      var b4;
      a4 ? D(b4 = a4.encode) && (a4.encode = b4.toString()) : a4 = {};
      (b4 = (self || window)._factory) && (b4 = b4.toString());
      const c3 = self.exports, d4 = this;
      this.o = xa(b4, c3, a4.worker);
      this.h = v();
      if (this.o) {
        if (c3)
          this.o.on("message", function(e3) {
            d4.h[e3.id](e3.msg);
            delete d4.h[e3.id];
          });
        else
          this.o.onmessage = function(e3) {
            e3 = e3.data;
            d4.h[e3.id](e3.msg);
            delete d4.h[e3.id];
          };
        this.o.postMessage({ task: "init", factory: b4, options: a4 });
      }
    }
    P("add");
    P("append");
    P("search");
    P("update");
    P("remove");
    function P(a4) {
      O.prototype[a4] = O.prototype[a4 + "Async"] = function() {
        const b4 = this, c3 = [].slice.call(arguments);
        var d4 = c3[c3.length - 1];
        let e3;
        D(d4) && (e3 = d4, c3.splice(c3.length - 1, 1));
        d4 = new Promise(function(f2) {
          setTimeout(function() {
            b4.h[++wa] = f2;
            b4.o.postMessage({ task: a4, id: wa, args: c3 });
          });
        });
        return e3 ? (d4.then(e3), this) : d4;
      };
    }
    function xa(a, b, c) {
      let d;
      try {
        d = b ? eval('new (require("worker_threads")["Worker"])("../dist/node/node.js")') : a ? new Worker(URL.createObjectURL(new Blob(["onmessage=" + va.toString()], { type: "text/javascript" }))) : new Worker(x(c) ? c : "worker/worker.js", { type: "module" });
      } catch (e3) {
      }
      return d;
    }
    function Q(a4) {
      if (!(this instanceof Q))
        return new Q(a4);
      var b4 = a4.document || a4.doc || a4, c3;
      this.K = [];
      this.h = [];
      this.A = [];
      this.register = v();
      this.key = (c3 = b4.key || b4.id) && S(c3, this.A) || "id";
      this.m = u(a4.fastupdate);
      this.C = (c3 = b4.store) && true !== c3 && [];
      this.store = c3 && v();
      this.I = (c3 = b4.tag) && S(c3, this.A);
      this.l = c3 && v();
      this.cache = (c3 = a4.cache) && new J(c3);
      a4.cache = false;
      this.o = a4.worker;
      this.async = false;
      c3 = v();
      let d4 = b4.index || b4.field || b4;
      x(d4) && (d4 = [d4]);
      for (let e3 = 0, f2, g2; e3 < d4.length; e3++)
        f2 = d4[e3], x(f2) || (g2 = f2, f2 = f2.field), g2 = C(g2) ? Object.assign({}, a4, g2) : a4, this.o && (c3[f2] = new O(g2), c3[f2].o || (this.o = false)), this.o || (c3[f2] = new K(g2, this.register)), this.K[e3] = S(f2, this.A), this.h[e3] = f2;
      if (this.C)
        for (a4 = b4.store, x(a4) && (a4 = [a4]), b4 = 0; b4 < a4.length; b4++)
          this.C[b4] = S(a4[b4], this.A);
      this.index = c3;
    }
    function S(a4, b4) {
      const c3 = a4.split(":");
      let d4 = 0;
      for (let e3 = 0; e3 < c3.length; e3++)
        a4 = c3[e3], 0 <= a4.indexOf("[]") && (a4 = a4.substring(0, a4.length - 2)) && (b4[d4] = true), a4 && (c3[d4++] = a4);
      d4 < c3.length && (c3.length = d4);
      return 1 < d4 ? c3 : c3[0];
    }
    function T(a4, b4) {
      if (x(b4))
        a4 = a4[b4];
      else
        for (let c3 = 0; a4 && c3 < b4.length; c3++)
          a4 = a4[b4[c3]];
      return a4;
    }
    function U(a4, b4, c3, d4, e3) {
      a4 = a4[e3];
      if (d4 === c3.length - 1)
        b4[e3] = a4;
      else if (a4)
        if (a4.constructor === Array)
          for (b4 = b4[e3] = Array(a4.length), e3 = 0; e3 < a4.length; e3++)
            U(a4, b4, c3, d4, e3);
        else
          b4 = b4[e3] || (b4[e3] = v()), e3 = c3[++d4], U(a4, b4, c3, d4, e3);
    }
    function V(a4, b4, c3, d4, e3, f2, g2, h4) {
      if (a4 = a4[g2])
        if (d4 === b4.length - 1) {
          if (a4.constructor === Array) {
            if (c3[d4]) {
              for (b4 = 0; b4 < a4.length; b4++)
                e3.add(f2, a4[b4], true, true);
              return;
            }
            a4 = a4.join(" ");
          }
          e3.add(f2, a4, h4, true);
        } else if (a4.constructor === Array)
          for (g2 = 0; g2 < a4.length; g2++)
            V(a4, b4, c3, d4, e3, f2, g2, h4);
        else
          g2 = b4[++d4], V(a4, b4, c3, d4, e3, f2, g2, h4);
    }
    t = Q.prototype;
    t.add = function(a4, b4, c3) {
      C(a4) && (b4 = a4, a4 = T(b4, this.key));
      if (b4 && (a4 || 0 === a4)) {
        if (!c3 && this.register[a4])
          return this.update(a4, b4);
        for (let d4 = 0, e3, f2; d4 < this.h.length; d4++)
          f2 = this.h[d4], e3 = this.K[d4], x(e3) && (e3 = [e3]), V(b4, e3, this.A, 0, this.index[f2], a4, e3[0], c3);
        if (this.I) {
          let d4 = T(b4, this.I), e3 = v();
          x(d4) && (d4 = [d4]);
          for (let f2 = 0, g2, h4; f2 < d4.length; f2++)
            if (g2 = d4[f2], !e3[g2] && (e3[g2] = 1, h4 = this.l[g2] || (this.l[g2] = []), !c3 || -1 === h4.indexOf(a4))) {
              if (h4[h4.length] = a4, this.m) {
                const k3 = this.register[a4] || (this.register[a4] = []);
                k3[k3.length] = h4;
              }
            }
        }
        if (this.store && (!c3 || !this.store[a4])) {
          let d4;
          if (this.C) {
            d4 = v();
            for (let e3 = 0, f2; e3 < this.C.length; e3++)
              f2 = this.C[e3], x(f2) ? d4[f2] = b4[f2] : U(b4, d4, f2, 0, f2[0]);
          }
          this.store[a4] = d4 || b4;
        }
      }
      return this;
    };
    t.append = function(a4, b4) {
      return this.add(a4, b4, true);
    };
    t.update = function(a4, b4) {
      return this.remove(a4).add(a4, b4);
    };
    t.remove = function(a4) {
      C(a4) && (a4 = T(a4, this.key));
      if (this.register[a4]) {
        for (var b4 = 0; b4 < this.h.length && (this.index[this.h[b4]].remove(a4, !this.o), !this.m); b4++)
          ;
        if (this.I && !this.m)
          for (let c3 in this.l) {
            b4 = this.l[c3];
            const d4 = b4.indexOf(a4);
            -1 !== d4 && (1 < b4.length ? b4.splice(d4, 1) : delete this.l[c3]);
          }
        this.store && delete this.store[a4];
        delete this.register[a4];
      }
      return this;
    };
    t.search = function(a4, b4, c3, d4) {
      c3 || (!b4 && C(a4) ? (c3 = a4, a4 = c3.query) : C(b4) && (c3 = b4, b4 = 0));
      let e3 = [], f2 = [], g2, h4, k3, m4, n2, w3, q3 = 0;
      if (c3)
        if (c3.constructor === Array)
          k3 = c3, c3 = null;
        else {
          k3 = (g2 = c3.pluck) || c3.index || c3.field;
          m4 = c3.tag;
          h4 = this.store && c3.enrich;
          n2 = "and" === c3.bool;
          b4 = c3.limit || 100;
          w3 = c3.offset || 0;
          if (m4 && (x(m4) && (m4 = [m4]), !a4)) {
            for (let l2 = 0, p2; l2 < m4.length; l2++)
              if (p2 = ya.call(this, m4[l2], b4, w3, h4))
                e3[e3.length] = p2, q3++;
            return q3 ? e3 : [];
          }
          x(k3) && (k3 = [k3]);
        }
      k3 || (k3 = this.h);
      n2 = n2 && (1 < k3.length || m4 && 1 < m4.length);
      const r2 = !d4 && (this.o || this.async) && [];
      for (let l2 = 0, p2, z4, B3; l2 < k3.length; l2++) {
        let A2;
        z4 = k3[l2];
        x(z4) || (A2 = z4, z4 = z4.field);
        if (r2)
          r2[l2] = this.index[z4].searchAsync(a4, b4, A2 || c3);
        else {
          d4 ? p2 = d4[l2] : p2 = this.index[z4].search(a4, b4, A2 || c3);
          B3 = p2 && p2.length;
          if (m4 && B3) {
            const y4 = [];
            let H5 = 0;
            n2 && (y4[0] = [p2]);
            for (let X4 = 0, pa2, R4; X4 < m4.length; X4++)
              if (pa2 = m4[X4], B3 = (R4 = this.l[pa2]) && R4.length)
                H5++, y4[y4.length] = n2 ? [R4] : R4;
            H5 && (p2 = n2 ? ma(y4, b4 || 100, w3 || 0) : na(p2, y4), B3 = p2.length);
          }
          if (B3)
            f2[q3] = z4, e3[q3++] = p2;
          else if (n2)
            return [];
        }
      }
      if (r2) {
        const l2 = this;
        return new Promise(function(p2) {
          Promise.all(r2).then(function(z4) {
            p2(l2.search(a4, b4, c3, z4));
          });
        });
      }
      if (!q3)
        return [];
      if (g2 && (!h4 || !this.store))
        return e3[0];
      for (let l2 = 0, p2; l2 < f2.length; l2++) {
        p2 = e3[l2];
        p2.length && h4 && (p2 = za.call(this, p2));
        if (g2)
          return p2;
        e3[l2] = { field: f2[l2], result: p2 };
      }
      return e3;
    };
    function ya(a4, b4, c3, d4) {
      let e3 = this.l[a4], f2 = e3 && e3.length - c3;
      if (f2 && 0 < f2) {
        if (f2 > b4 || c3)
          e3 = e3.slice(c3, c3 + b4);
        d4 && (e3 = za.call(this, e3));
        return { tag: a4, result: e3 };
      }
    }
    function za(a4) {
      const b4 = Array(a4.length);
      for (let c3 = 0, d4; c3 < a4.length; c3++)
        d4 = a4[c3], b4[c3] = { id: d4, doc: this.store[d4] };
      return b4;
    }
    t.contain = function(a4) {
      return !!this.register[a4];
    };
    t.get = function(a4) {
      return this.store[a4];
    };
    t.set = function(a4, b4) {
      this.store[a4] = b4;
      return this;
    };
    t.searchCache = oa;
    t.export = function(a4, b4, c3, d4, e3) {
      e3 || (e3 = 0);
      d4 || (d4 = 0);
      if (d4 < this.h.length) {
        const f2 = this.h[d4], g2 = this.index[f2];
        b4 = this;
        setTimeout(function() {
          g2.export(a4, b4, e3 ? f2.replace(":", "-") : "", d4, e3++) || (d4++, e3 = 1, b4.export(a4, b4, f2, d4, e3));
        });
      } else {
        let f2;
        switch (e3) {
          case 1:
            c3 = "tag";
            f2 = this.l;
            break;
          case 2:
            c3 = "store";
            f2 = this.store;
            break;
          default:
            return;
        }
        ra(a4, this, c3, d4, e3, f2);
      }
    };
    t.import = function(a4, b4) {
      if (b4)
        switch (x(b4) && (b4 = JSON.parse(b4)), a4) {
          case "tag":
            this.l = b4;
            break;
          case "reg":
            this.m = false;
            this.register = b4;
            for (let d4 = 0, e3; d4 < this.h.length; d4++)
              e3 = this.index[this.h[d4]], e3.register = b4, e3.m = false;
            break;
          case "store":
            this.store = b4;
            break;
          default:
            a4 = a4.split(".");
            const c3 = a4[0];
            a4 = a4[1];
            c3 && a4 && this.index[c3].import(a4, b4);
        }
    };
    la(Q.prototype);
    var Ba = { encode: Aa, F: false, G: "" };
    const Ca = [F("[àáâãäå]"), "a", F("[èéêë]"), "e", F("[ìíîï]"), "i", F("[òóôõöő]"), "o", F("[ùúûüű]"), "u", F("[ýŷÿ]"), "y", F("ñ"), "n", F("[çc]"), "k", F("ß"), "s", F(" & "), " and "];
    function Aa(a4) {
      var b4 = a4;
      b4.normalize && (b4 = b4.normalize("NFD").replace(ea, ""));
      return ca.call(this, b4.toLowerCase(), !a4.normalize && Ca);
    }
    var Ea = { encode: Da, F: false, G: "strict" };
    const Fa = /[^a-z0-9]+/, Ga = { b: "p", v: "f", w: "f", z: "s", x: "s", "ß": "s", d: "t", n: "m", c: "k", g: "k", j: "k", q: "k", i: "e", y: "e", u: "o" };
    function Da(a4) {
      a4 = Aa.call(this, a4).join(" ");
      const b4 = [];
      if (a4) {
        const c3 = a4.split(Fa), d4 = c3.length;
        for (let e3 = 0, f2, g2 = 0; e3 < d4; e3++)
          if ((a4 = c3[e3]) && (!this.filter || !this.filter[a4])) {
            f2 = a4[0];
            let h4 = Ga[f2] || f2, k3 = h4;
            for (let m4 = 1; m4 < a4.length; m4++) {
              f2 = a4[m4];
              const n2 = Ga[f2] || f2;
              n2 && n2 !== k3 && (h4 += n2, k3 = n2);
            }
            b4[g2++] = h4;
          }
      }
      return b4;
    }
    var Ia = { encode: Ha, F: false, G: "" };
    const Ja = [F("ae"), "a", F("oe"), "o", F("sh"), "s", F("th"), "t", F("ph"), "f", F("pf"), "f", F("(?![aeo])h(?![aeo])"), "", F("(?!^[aeo])h(?!^[aeo])"), ""];
    function Ha(a4, b4) {
      a4 && (a4 = Da.call(this, a4).join(" "), 2 < a4.length && (a4 = E(a4, Ja)), b4 || (1 < a4.length && (a4 = ha(a4)), a4 && (a4 = a4.split(" "))));
      return a4;
    }
    var La = { encode: Ka, F: false, G: "" };
    const Ma = F("(?!\\b)[aeo]");
    function Ka(a4) {
      a4 && (a4 = Ha.call(this, a4, true), 1 < a4.length && (a4 = a4.replace(Ma, "")), 1 < a4.length && (a4 = ha(a4)), a4 && (a4 = a4.split(" ")));
      return a4;
    }
    G["latin:default"] = ja;
    G["latin:simple"] = Ba;
    G["latin:balance"] = Ea;
    G["latin:advanced"] = Ia;
    G["latin:extra"] = La;
    const W = self;
    let Y;
    const Z = { Index: K, Document: Q, Worker: O, registerCharset: function(a4, b4) {
      G[a4] = b4;
    }, registerLanguage: function(a4, b4) {
      ka[a4] = b4;
    } };
    (Y = W.define) && Y.amd ? Y([], function() {
      return Z;
    }) : W.exports ? W.exports = Z : W.FlexSearch = Z;
  })(commonjsGlobal);
})(flexsearch_bundle);
var flexsearch_bundleExports = flexsearch_bundle.exports;
const MountStory = /* @__PURE__ */ defineComponent$1({
  name: "MountStory",
  props: {
    story: {
      type: Object,
      required: true
    }
  },
  setup(props) {
    const options = props.story.file.component;
    let rawVariants = [];
    if (options.onMount) {
      rawVariants = [{
        id: "_default",
        title: "default",
        onMount: options.onMount,
        onMountControls: options.onMountControls
      }];
    } else {
      rawVariants = options.variants;
    }
    for (const index in props.story.variants) {
      const rawVariant = rawVariants[index];
      Object.assign(props.story.variants[index], {
        slots: () => ({ default: rawVariant.onMount, controls: rawVariant.onMountControls }),
        source: rawVariant.source ?? options.source,
        responsiveDisabled: rawVariant.responsiveDisabled ?? options.responsiveDisabled,
        autoPropsDisabled: rawVariant.autoPropsDisabled ?? options.autoPropsDisabled,
        setupApp: rawVariant.setupApp ?? options.setupApp,
        configReady: true
      });
    }
  },
  render() {
    return null;
  }
});
/*!
 * pinia v2.1.7
 * (c) 2023 Eduardo San Martin Morote
 * @license MIT
 */
const piniaSymbol = Symbol("pinia");
var MutationType;
(function(MutationType2) {
  MutationType2["direct"] = "direct";
  MutationType2["patchObject"] = "patch object";
  MutationType2["patchFunction"] = "patch function";
})(MutationType || (MutationType = {}));
const IS_CLIENT = typeof window !== "undefined";
const USE_DEVTOOLS = IS_CLIENT;
const _global = /* @__PURE__ */ (() => typeof window === "object" && window.window === window ? window : typeof self === "object" && self.self === self ? self : typeof global === "object" && global.global === global ? global : typeof globalThis === "object" ? globalThis : { HTMLElement: null })();
function bom(blob, { autoBom = false } = {}) {
  if (autoBom && /^\s*(?:text\/\S*|application\/xml|\S*\/\S*\+xml)\s*;.*charset\s*=\s*utf-8/i.test(blob.type)) {
    return new Blob([String.fromCharCode(65279), blob], { type: blob.type });
  }
  return blob;
}
function download(url, name, opts) {
  const xhr = new XMLHttpRequest();
  xhr.open("GET", url);
  xhr.responseType = "blob";
  xhr.onload = function() {
    saveAs(xhr.response, name, opts);
  };
  xhr.onerror = function() {
    console.error("could not download file");
  };
  xhr.send();
}
function corsEnabled(url) {
  const xhr = new XMLHttpRequest();
  xhr.open("HEAD", url, false);
  try {
    xhr.send();
  } catch (e3) {
  }
  return xhr.status >= 200 && xhr.status <= 299;
}
function click(node) {
  try {
    node.dispatchEvent(new MouseEvent("click"));
  } catch (e3) {
    const evt = document.createEvent("MouseEvents");
    evt.initMouseEvent("click", true, true, window, 0, 0, 0, 80, 20, false, false, false, false, 0, null);
    node.dispatchEvent(evt);
  }
}
const _navigator = typeof navigator === "object" ? navigator : { userAgent: "" };
const isMacOSWebView = /* @__PURE__ */ (() => /Macintosh/.test(_navigator.userAgent) && /AppleWebKit/.test(_navigator.userAgent) && !/Safari/.test(_navigator.userAgent))();
const saveAs = !IS_CLIENT ? () => {
} : (
  // Use download attribute first if possible (#193 Lumia mobile) unless this is a macOS WebView or mini program
  typeof HTMLAnchorElement !== "undefined" && "download" in HTMLAnchorElement.prototype && !isMacOSWebView ? downloadSaveAs : (
    // Use msSaveOrOpenBlob as a second approach
    "msSaveOrOpenBlob" in _navigator ? msSaveAs : (
      // Fallback to using FileReader and a popup
      fileSaverSaveAs
    )
  )
);
function downloadSaveAs(blob, name = "download", opts) {
  const a4 = document.createElement("a");
  a4.download = name;
  a4.rel = "noopener";
  if (typeof blob === "string") {
    a4.href = blob;
    if (a4.origin !== location.origin) {
      if (corsEnabled(a4.href)) {
        download(blob, name, opts);
      } else {
        a4.target = "_blank";
        click(a4);
      }
    } else {
      click(a4);
    }
  } else {
    a4.href = URL.createObjectURL(blob);
    setTimeout(function() {
      URL.revokeObjectURL(a4.href);
    }, 4e4);
    setTimeout(function() {
      click(a4);
    }, 0);
  }
}
function msSaveAs(blob, name = "download", opts) {
  if (typeof blob === "string") {
    if (corsEnabled(blob)) {
      download(blob, name, opts);
    } else {
      const a4 = document.createElement("a");
      a4.href = blob;
      a4.target = "_blank";
      setTimeout(function() {
        click(a4);
      });
    }
  } else {
    navigator.msSaveOrOpenBlob(bom(blob, opts), name);
  }
}
function fileSaverSaveAs(blob, name, opts, popup) {
  popup = popup || open("", "_blank");
  if (popup) {
    popup.document.title = popup.document.body.innerText = "downloading...";
  }
  if (typeof blob === "string")
    return download(blob, name, opts);
  const force = blob.type === "application/octet-stream";
  const isSafari = /constructor/i.test(String(_global.HTMLElement)) || "safari" in _global;
  const isChromeIOS = /CriOS\/[\d]+/.test(navigator.userAgent);
  if ((isChromeIOS || force && isSafari || isMacOSWebView) && typeof FileReader !== "undefined") {
    const reader = new FileReader();
    reader.onloadend = function() {
      let url = reader.result;
      if (typeof url !== "string") {
        popup = null;
        throw new Error("Wrong reader.result type");
      }
      url = isChromeIOS ? url : url.replace(/^data:[^;]*;/, "data:attachment/file;");
      if (popup) {
        popup.location.href = url;
      } else {
        location.assign(url);
      }
      popup = null;
    };
    reader.readAsDataURL(blob);
  } else {
    const url = URL.createObjectURL(blob);
    if (popup)
      popup.location.assign(url);
    else
      location.href = url;
    popup = null;
    setTimeout(function() {
      URL.revokeObjectURL(url);
    }, 4e4);
  }
}
function toastMessage(message, type) {
  const piniaMessage = "🍍 " + message;
  if (typeof __VUE_DEVTOOLS_TOAST__ === "function") {
    __VUE_DEVTOOLS_TOAST__(piniaMessage, type);
  } else if (type === "error") {
    console.error(piniaMessage);
  } else if (type === "warn") {
    console.warn(piniaMessage);
  } else {
    console.log(piniaMessage);
  }
}
function isPinia(o2) {
  return "_a" in o2 && "install" in o2;
}
function checkClipboardAccess() {
  if (!("clipboard" in navigator)) {
    toastMessage(`Your browser doesn't support the Clipboard API`, "error");
    return true;
  }
}
function checkNotFocusedError(error) {
  if (error instanceof Error && error.message.toLowerCase().includes("document is not focused")) {
    toastMessage('You need to activate the "Emulate a focused page" setting in the "Rendering" panel of devtools.', "warn");
    return true;
  }
  return false;
}
async function actionGlobalCopyState(pinia) {
  if (checkClipboardAccess())
    return;
  try {
    await navigator.clipboard.writeText(JSON.stringify(pinia.state.value));
    toastMessage("Global state copied to clipboard.");
  } catch (error) {
    if (checkNotFocusedError(error))
      return;
    toastMessage(`Failed to serialize the state. Check the console for more details.`, "error");
    console.error(error);
  }
}
async function actionGlobalPasteState(pinia) {
  if (checkClipboardAccess())
    return;
  try {
    loadStoresState(pinia, JSON.parse(await navigator.clipboard.readText()));
    toastMessage("Global state pasted from clipboard.");
  } catch (error) {
    if (checkNotFocusedError(error))
      return;
    toastMessage(`Failed to deserialize the state from clipboard. Check the console for more details.`, "error");
    console.error(error);
  }
}
async function actionGlobalSaveState(pinia) {
  try {
    saveAs(new Blob([JSON.stringify(pinia.state.value)], {
      type: "text/plain;charset=utf-8"
    }), "pinia-state.json");
  } catch (error) {
    toastMessage(`Failed to export the state as JSON. Check the console for more details.`, "error");
    console.error(error);
  }
}
let fileInput;
function getFileOpener() {
  if (!fileInput) {
    fileInput = document.createElement("input");
    fileInput.type = "file";
    fileInput.accept = ".json";
  }
  function openFile() {
    return new Promise((resolve2, reject) => {
      fileInput.onchange = async () => {
        const files = fileInput.files;
        if (!files)
          return resolve2(null);
        const file = files.item(0);
        if (!file)
          return resolve2(null);
        return resolve2({ text: await file.text(), file });
      };
      fileInput.oncancel = () => resolve2(null);
      fileInput.onerror = reject;
      fileInput.click();
    });
  }
  return openFile;
}
async function actionGlobalOpenStateFile(pinia) {
  try {
    const open2 = getFileOpener();
    const result = await open2();
    if (!result)
      return;
    const { text, file } = result;
    loadStoresState(pinia, JSON.parse(text));
    toastMessage(`Global state imported from "${file.name}".`);
  } catch (error) {
    toastMessage(`Failed to import the state from JSON. Check the console for more details.`, "error");
    console.error(error);
  }
}
function loadStoresState(pinia, state) {
  for (const key in state) {
    const storeState = pinia.state.value[key];
    if (storeState) {
      Object.assign(storeState, state[key]);
    } else {
      pinia.state.value[key] = state[key];
    }
  }
}
function formatDisplay(display) {
  return {
    _custom: {
      display
    }
  };
}
const PINIA_ROOT_LABEL = "🍍 Pinia (root)";
const PINIA_ROOT_ID = "_root";
function formatStoreForInspectorTree(store) {
  return isPinia(store) ? {
    id: PINIA_ROOT_ID,
    label: PINIA_ROOT_LABEL
  } : {
    id: store.$id,
    label: store.$id
  };
}
function formatStoreForInspectorState(store) {
  if (isPinia(store)) {
    const storeNames = Array.from(store._s.keys());
    const storeMap = store._s;
    const state2 = {
      state: storeNames.map((storeId) => ({
        editable: true,
        key: storeId,
        value: store.state.value[storeId]
      })),
      getters: storeNames.filter((id2) => storeMap.get(id2)._getters).map((id2) => {
        const store2 = storeMap.get(id2);
        return {
          editable: false,
          key: id2,
          value: store2._getters.reduce((getters, key) => {
            getters[key] = store2[key];
            return getters;
          }, {})
        };
      })
    };
    return state2;
  }
  const state = {
    state: Object.keys(store.$state).map((key) => ({
      editable: true,
      key,
      value: store.$state[key]
    }))
  };
  if (store._getters && store._getters.length) {
    state.getters = store._getters.map((getterName) => ({
      editable: false,
      key: getterName,
      value: store[getterName]
    }));
  }
  if (store._customProperties.size) {
    state.customProperties = Array.from(store._customProperties).map((key) => ({
      editable: true,
      key,
      value: store[key]
    }));
  }
  return state;
}
function formatEventData(events) {
  if (!events)
    return {};
  if (Array.isArray(events)) {
    return events.reduce((data, event) => {
      data.keys.push(event.key);
      data.operations.push(event.type);
      data.oldValue[event.key] = event.oldValue;
      data.newValue[event.key] = event.newValue;
      return data;
    }, {
      oldValue: {},
      keys: [],
      operations: [],
      newValue: {}
    });
  } else {
    return {
      operation: formatDisplay(events.type),
      key: formatDisplay(events.key),
      oldValue: events.oldValue,
      newValue: events.newValue
    };
  }
}
function formatMutationType(type) {
  switch (type) {
    case MutationType.direct:
      return "mutation";
    case MutationType.patchFunction:
      return "$patch";
    case MutationType.patchObject:
      return "$patch";
    default:
      return "unknown";
  }
}
let isTimelineActive = true;
const componentStateTypes = [];
const MUTATIONS_LAYER_ID = "pinia:mutations";
const INSPECTOR_ID = "pinia";
const { assign: assign$1 } = Object;
const getStoreType = (id2) => "🍍 " + id2;
function registerPiniaDevtools(app, pinia) {
  setupDevtoolsPlugin({
    id: "dev.esm.pinia",
    label: "Pinia 🍍",
    logo: "https://pinia.vuejs.org/logo.svg",
    packageName: "pinia",
    homepage: "https://pinia.vuejs.org",
    componentStateTypes,
    app
  }, (api) => {
    if (typeof api.now !== "function") {
      toastMessage("You seem to be using an outdated version of Vue Devtools. Are you still using the Beta release instead of the stable one? You can find the links at https://devtools.vuejs.org/guide/installation.html.");
    }
    api.addTimelineLayer({
      id: MUTATIONS_LAYER_ID,
      label: `Pinia 🍍`,
      color: 15064968
    });
    api.addInspector({
      id: INSPECTOR_ID,
      label: "Pinia 🍍",
      icon: "storage",
      treeFilterPlaceholder: "Search stores",
      actions: [
        {
          icon: "content_copy",
          action: () => {
            actionGlobalCopyState(pinia);
          },
          tooltip: "Serialize and copy the state"
        },
        {
          icon: "content_paste",
          action: async () => {
            await actionGlobalPasteState(pinia);
            api.sendInspectorTree(INSPECTOR_ID);
            api.sendInspectorState(INSPECTOR_ID);
          },
          tooltip: "Replace the state with the content of your clipboard"
        },
        {
          icon: "save",
          action: () => {
            actionGlobalSaveState(pinia);
          },
          tooltip: "Save the state as a JSON file"
        },
        {
          icon: "folder_open",
          action: async () => {
            await actionGlobalOpenStateFile(pinia);
            api.sendInspectorTree(INSPECTOR_ID);
            api.sendInspectorState(INSPECTOR_ID);
          },
          tooltip: "Import the state from a JSON file"
        }
      ],
      nodeActions: [
        {
          icon: "restore",
          tooltip: 'Reset the state (with "$reset")',
          action: (nodeId) => {
            const store = pinia._s.get(nodeId);
            if (!store) {
              toastMessage(`Cannot reset "${nodeId}" store because it wasn't found.`, "warn");
            } else if (typeof store.$reset !== "function") {
              toastMessage(`Cannot reset "${nodeId}" store because it doesn't have a "$reset" method implemented.`, "warn");
            } else {
              store.$reset();
              toastMessage(`Store "${nodeId}" reset.`);
            }
          }
        }
      ]
    });
    api.on.inspectComponent((payload, ctx) => {
      const proxy = payload.componentInstance && payload.componentInstance.proxy;
      if (proxy && proxy._pStores) {
        const piniaStores = payload.componentInstance.proxy._pStores;
        Object.values(piniaStores).forEach((store) => {
          payload.instanceData.state.push({
            type: getStoreType(store.$id),
            key: "state",
            editable: true,
            value: store._isOptionsAPI ? {
              _custom: {
                value: toRaw(store.$state),
                actions: [
                  {
                    icon: "restore",
                    tooltip: "Reset the state of this store",
                    action: () => store.$reset()
                  }
                ]
              }
            } : (
              // NOTE: workaround to unwrap transferred refs
              Object.keys(store.$state).reduce((state, key) => {
                state[key] = store.$state[key];
                return state;
              }, {})
            )
          });
          if (store._getters && store._getters.length) {
            payload.instanceData.state.push({
              type: getStoreType(store.$id),
              key: "getters",
              editable: false,
              value: store._getters.reduce((getters, key) => {
                try {
                  getters[key] = store[key];
                } catch (error) {
                  getters[key] = error;
                }
                return getters;
              }, {})
            });
          }
        });
      }
    });
    api.on.getInspectorTree((payload) => {
      if (payload.app === app && payload.inspectorId === INSPECTOR_ID) {
        let stores = [pinia];
        stores = stores.concat(Array.from(pinia._s.values()));
        payload.rootNodes = (payload.filter ? stores.filter((store) => "$id" in store ? store.$id.toLowerCase().includes(payload.filter.toLowerCase()) : PINIA_ROOT_LABEL.toLowerCase().includes(payload.filter.toLowerCase())) : stores).map(formatStoreForInspectorTree);
      }
    });
    api.on.getInspectorState((payload) => {
      if (payload.app === app && payload.inspectorId === INSPECTOR_ID) {
        const inspectedStore = payload.nodeId === PINIA_ROOT_ID ? pinia : pinia._s.get(payload.nodeId);
        if (!inspectedStore) {
          return;
        }
        if (inspectedStore) {
          payload.state = formatStoreForInspectorState(inspectedStore);
        }
      }
    });
    api.on.editInspectorState((payload, ctx) => {
      if (payload.app === app && payload.inspectorId === INSPECTOR_ID) {
        const inspectedStore = payload.nodeId === PINIA_ROOT_ID ? pinia : pinia._s.get(payload.nodeId);
        if (!inspectedStore) {
          return toastMessage(`store "${payload.nodeId}" not found`, "error");
        }
        const { path } = payload;
        if (!isPinia(inspectedStore)) {
          if (path.length !== 1 || !inspectedStore._customProperties.has(path[0]) || path[0] in inspectedStore.$state) {
            path.unshift("$state");
          }
        } else {
          path.unshift("state");
        }
        isTimelineActive = false;
        payload.set(inspectedStore, path, payload.state.value);
        isTimelineActive = true;
      }
    });
    api.on.editComponentState((payload) => {
      if (payload.type.startsWith("🍍")) {
        const storeId = payload.type.replace(/^🍍\s*/, "");
        const store = pinia._s.get(storeId);
        if (!store) {
          return toastMessage(`store "${storeId}" not found`, "error");
        }
        const { path } = payload;
        if (path[0] !== "state") {
          return toastMessage(`Invalid path for store "${storeId}":
${path}
Only state can be modified.`);
        }
        path[0] = "$state";
        isTimelineActive = false;
        payload.set(store, path, payload.state.value);
        isTimelineActive = true;
      }
    });
  });
}
function addStoreToDevtools(app, store) {
  if (!componentStateTypes.includes(getStoreType(store.$id))) {
    componentStateTypes.push(getStoreType(store.$id));
  }
  setupDevtoolsPlugin({
    id: "dev.esm.pinia",
    label: "Pinia 🍍",
    logo: "https://pinia.vuejs.org/logo.svg",
    packageName: "pinia",
    homepage: "https://pinia.vuejs.org",
    componentStateTypes,
    app,
    settings: {
      logStoreChanges: {
        label: "Notify about new/deleted stores",
        type: "boolean",
        defaultValue: true
      }
      // useEmojis: {
      //   label: 'Use emojis in messages ⚡️',
      //   type: 'boolean',
      //   defaultValue: true,
      // },
    }
  }, (api) => {
    const now2 = typeof api.now === "function" ? api.now.bind(api) : Date.now;
    store.$onAction(({ after, onError, name, args }) => {
      const groupId = runningActionId++;
      api.addTimelineEvent({
        layerId: MUTATIONS_LAYER_ID,
        event: {
          time: now2(),
          title: "🛫 " + name,
          subtitle: "start",
          data: {
            store: formatDisplay(store.$id),
            action: formatDisplay(name),
            args
          },
          groupId
        }
      });
      after((result) => {
        activeAction = void 0;
        api.addTimelineEvent({
          layerId: MUTATIONS_LAYER_ID,
          event: {
            time: now2(),
            title: "🛬 " + name,
            subtitle: "end",
            data: {
              store: formatDisplay(store.$id),
              action: formatDisplay(name),
              args,
              result
            },
            groupId
          }
        });
      });
      onError((error) => {
        activeAction = void 0;
        api.addTimelineEvent({
          layerId: MUTATIONS_LAYER_ID,
          event: {
            time: now2(),
            logType: "error",
            title: "💥 " + name,
            subtitle: "end",
            data: {
              store: formatDisplay(store.$id),
              action: formatDisplay(name),
              args,
              error
            },
            groupId
          }
        });
      });
    }, true);
    store._customProperties.forEach((name) => {
      watch(() => unref(store[name]), (newValue, oldValue) => {
        api.notifyComponentUpdate();
        api.sendInspectorState(INSPECTOR_ID);
        if (isTimelineActive) {
          api.addTimelineEvent({
            layerId: MUTATIONS_LAYER_ID,
            event: {
              time: now2(),
              title: "Change",
              subtitle: name,
              data: {
                newValue,
                oldValue
              },
              groupId: activeAction
            }
          });
        }
      }, { deep: true });
    });
    store.$subscribe(({ events, type }, state) => {
      api.notifyComponentUpdate();
      api.sendInspectorState(INSPECTOR_ID);
      if (!isTimelineActive)
        return;
      const eventData = {
        time: now2(),
        title: formatMutationType(type),
        data: assign$1({ store: formatDisplay(store.$id) }, formatEventData(events)),
        groupId: activeAction
      };
      if (type === MutationType.patchFunction) {
        eventData.subtitle = "⤵️";
      } else if (type === MutationType.patchObject) {
        eventData.subtitle = "🧩";
      } else if (events && !Array.isArray(events)) {
        eventData.subtitle = events.type;
      }
      if (events) {
        eventData.data["rawEvent(s)"] = {
          _custom: {
            display: "DebuggerEvent",
            type: "object",
            tooltip: "raw DebuggerEvent[]",
            value: events
          }
        };
      }
      api.addTimelineEvent({
        layerId: MUTATIONS_LAYER_ID,
        event: eventData
      });
    }, { detached: true, flush: "sync" });
    const hotUpdate = store._hotUpdate;
    store._hotUpdate = markRaw((newStore) => {
      hotUpdate(newStore);
      api.addTimelineEvent({
        layerId: MUTATIONS_LAYER_ID,
        event: {
          time: now2(),
          title: "🔥 " + store.$id,
          subtitle: "HMR update",
          data: {
            store: formatDisplay(store.$id),
            info: formatDisplay(`HMR update`)
          }
        }
      });
      api.notifyComponentUpdate();
      api.sendInspectorTree(INSPECTOR_ID);
      api.sendInspectorState(INSPECTOR_ID);
    });
    const { $dispose } = store;
    store.$dispose = () => {
      $dispose();
      api.notifyComponentUpdate();
      api.sendInspectorTree(INSPECTOR_ID);
      api.sendInspectorState(INSPECTOR_ID);
      api.getSettings().logStoreChanges && toastMessage(`Disposed "${store.$id}" store 🗑`);
    };
    api.notifyComponentUpdate();
    api.sendInspectorTree(INSPECTOR_ID);
    api.sendInspectorState(INSPECTOR_ID);
    api.getSettings().logStoreChanges && toastMessage(`"${store.$id}" store installed 🆕`);
  });
}
let runningActionId = 0;
let activeAction;
function patchActionForGrouping(store, actionNames, wrapWithProxy) {
  const actions = actionNames.reduce((storeActions, actionName) => {
    storeActions[actionName] = toRaw(store)[actionName];
    return storeActions;
  }, {});
  for (const actionName in actions) {
    store[actionName] = function() {
      const _actionId = runningActionId;
      const trackedStore = wrapWithProxy ? new Proxy(store, {
        get(...args) {
          activeAction = _actionId;
          return Reflect.get(...args);
        },
        set(...args) {
          activeAction = _actionId;
          return Reflect.set(...args);
        }
      }) : store;
      activeAction = _actionId;
      const retValue = actions[actionName].apply(trackedStore, arguments);
      activeAction = void 0;
      return retValue;
    };
  }
}
function devtoolsPlugin({ app, store, options }) {
  if (store.$id.startsWith("__hot:")) {
    return;
  }
  store._isOptionsAPI = !!options.state;
  patchActionForGrouping(store, Object.keys(options.actions), store._isOptionsAPI);
  const originalHotUpdate = store._hotUpdate;
  toRaw(store)._hotUpdate = function(newStore) {
    originalHotUpdate.apply(this, arguments);
    patchActionForGrouping(store, Object.keys(newStore._hmrPayload.actions), !!store._isOptionsAPI);
  };
  addStoreToDevtools(
    app,
    // FIXME: is there a way to allow the assignment from Store<Id, S, G, A> to StoreGeneric?
    store
  );
}
function createPinia() {
  const scope = effectScope(true);
  const state = scope.run(() => ref({}));
  let _p2 = [];
  let toBeInstalled = [];
  const pinia = markRaw({
    install(app) {
      {
        pinia._a = app;
        app.provide(piniaSymbol, pinia);
        app.config.globalProperties.$pinia = pinia;
        if (USE_DEVTOOLS) {
          registerPiniaDevtools(app, pinia);
        }
        toBeInstalled.forEach((plugin2) => _p2.push(plugin2));
        toBeInstalled = [];
      }
    },
    use(plugin2) {
      if (!this._a && !isVue2) {
        toBeInstalled.push(plugin2);
      } else {
        _p2.push(plugin2);
      }
      return this;
    },
    _p: _p2,
    // it's actually undefined here
    // @ts-expect-error
    _a: null,
    _e: scope,
    _s: /* @__PURE__ */ new Map(),
    state
  });
  if (USE_DEVTOOLS && typeof Proxy !== "undefined") {
    pinia.use(devtoolsPlugin);
  }
  return pinia;
}
function defineSetupVue3(handler) {
  return handler;
}
const resource$1 = {};
const resource = {
  "cookies": {
    "accept": (() => {
      const fn2 = (ctx) => {
        const { normalize: _normalize } = ctx;
        return _normalize(["Accepteer geselecteerd cookies"]);
      };
      fn2.source = "Accepteer geselecteerd cookies";
      return fn2;
    })(),
    "others": (() => {
      const fn2 = (ctx) => {
        const { normalize: _normalize } = ctx;
        return _normalize(["Andere"]);
      };
      fn2.source = "Andere";
      return fn2;
    })(),
    "analytics": (() => {
      const fn2 = (ctx) => {
        const { normalize: _normalize } = ctx;
        return _normalize(["Analytics"]);
      };
      fn2.source = "Analytics";
      return fn2;
    })()
  },
  "label": {
    "optional": (() => {
      const fn2 = (ctx) => {
        const { normalize: _normalize } = ctx;
        return _normalize(["Optioneel"]);
      };
      fn2.source = "Optioneel";
      return fn2;
    })(),
    "cancel": (() => {
      const fn2 = (ctx) => {
        const { normalize: _normalize } = ctx;
        return _normalize(["Annuleren"]);
      };
      fn2.source = "Annuleren";
      return fn2;
    })(),
    "confirm": (() => {
      const fn2 = (ctx) => {
        const { normalize: _normalize } = ctx;
        return _normalize(["Bevestigen"]);
      };
      fn2.source = "Bevestigen";
      return fn2;
    })(),
    "confirm_text": (() => {
      const fn2 = (ctx) => {
        const { normalize: _normalize } = ctx;
        return _normalize(["Weet u zeker dat u door wilt gaan met deze actie?"]);
      };
      fn2.source = "Weet u zeker dat u door wilt gaan met deze actie?";
      return fn2;
    })(),
    "filter": (() => {
      const fn2 = (ctx) => {
        const { normalize: _normalize } = ctx;
        return _normalize(["Filter"]);
      };
      fn2.source = "Filter";
      return fn2;
    })(),
    "drop_file": (() => {
      const fn2 = (ctx) => {
        const { normalize: _normalize } = ctx;
        return _normalize(["Sleep uw foto hier."]);
      };
      fn2.source = "Sleep uw foto hier.";
      return fn2;
    })(),
    "select": (() => {
      const fn2 = (ctx) => {
        const { normalize: _normalize } = ctx;
        return _normalize(["Selecteer"]);
      };
      fn2.source = "Selecteer";
      return fn2;
    })()
  },
  "labels": {
    "no_results": (() => {
      const fn2 = (ctx) => {
        const { normalize: _normalize } = ctx;
        return _normalize(["Geen resultaten"]);
      };
      fn2.source = "Geen resultaten";
      return fn2;
    })(),
    "select": (() => {
      const fn2 = (ctx) => {
        const { normalize: _normalize } = ctx;
        return _normalize(["Selecteer"]);
      };
      fn2.source = "Selecteer";
      return fn2;
    })(),
    "loading": (() => {
      const fn2 = (ctx) => {
        const { normalize: _normalize } = ctx;
        return _normalize(["Laden..."]);
      };
      fn2.source = "Laden...";
      return fn2;
    })()
  },
  "errors": {
    "invalid_type": (() => {
      const fn2 = (ctx) => {
        const { normalize: _normalize } = ctx;
        return _normalize(["Het veld is verplicht."]);
      };
      fn2.source = "Het veld is verplicht.";
      return fn2;
    })(),
    "pdf": (() => {
      const fn2 = (ctx) => {
        const { normalize: _normalize } = ctx;
        return _normalize(["Er is iets foutgelopen met het downloaden van de PDF."]);
      };
      fn2.source = "Er is iets foutgelopen met het downloaden van de PDF.";
      return fn2;
    })(),
    "invalid_type_string": (() => {
      const fn2 = (ctx) => {
        const { normalize: _normalize } = ctx;
        return _normalize(["Het type moet een tekst zijn."]);
      };
      fn2.source = "Het type moet een tekst zijn.";
      return fn2;
    })(),
    "invalid_type_number": (() => {
      const fn2 = (ctx) => {
        const { normalize: _normalize } = ctx;
        return _normalize(["Het type moet een nummer zijn."]);
      };
      fn2.source = "Het type moet een nummer zijn.";
      return fn2;
    })(),
    "invalid_type_boolean": (() => {
      const fn2 = (ctx) => {
        const { normalize: _normalize } = ctx;
        return _normalize(["Het type moet juist of onjuist zijn."]);
      };
      fn2.source = "Het type moet juist of onjuist zijn.";
      return fn2;
    })(),
    "invalid_type_array": (() => {
      const fn2 = (ctx) => {
        const { normalize: _normalize } = ctx;
        return _normalize(["Het type moet een lijst zijn."]);
      };
      fn2.source = "Het type moet een lijst zijn.";
      return fn2;
    })(),
    "invalid_type_object": (() => {
      const fn2 = (ctx) => {
        const { normalize: _normalize } = ctx;
        return _normalize(["Het type moet een object zijn."]);
      };
      fn2.source = "Het type moet een object zijn.";
      return fn2;
    })(),
    "invalid_type_date": (() => {
      const fn2 = (ctx) => {
        const { normalize: _normalize } = ctx;
        return _normalize(["Het type moet een datum zijn."]);
      };
      fn2.source = "Het type moet een datum zijn.";
      return fn2;
    })(),
    "invalid_type_null": (() => {
      const fn2 = (ctx) => {
        const { normalize: _normalize } = ctx;
        return _normalize(["Het type moet ongelding zijn."]);
      };
      fn2.source = "Het type moet ongelding zijn.";
      return fn2;
    })(),
    "invalid_type_undefined": (() => {
      const fn2 = (ctx) => {
        const { normalize: _normalize } = ctx;
        return _normalize(["Het type moet niet gedefineerd zijn."]);
      };
      fn2.source = "Het type moet niet gedefineerd zijn.";
      return fn2;
    })(),
    "invalid_type_nan": (() => {
      const fn2 = (ctx) => {
        const { normalize: _normalize } = ctx;
        return _normalize(["Het type moet niet een nummer zijn."]);
      };
      fn2.source = "Het type moet niet een nummer zijn.";
      return fn2;
    })(),
    "invalid_union": (() => {
      const fn2 = (ctx) => {
        const { normalize: _normalize } = ctx;
        return _normalize(["Een ongeldige samenstelling."]);
      };
      fn2.source = "Een ongeldige samenstelling.";
      return fn2;
    })(),
    "invalid_email": (() => {
      const fn2 = (ctx) => {
        const { normalize: _normalize } = ctx;
        return _normalize(["Ongeldig e-mailadres."]);
      };
      fn2.source = "Ongeldig e-mailadres.";
      return fn2;
    })(),
    "invalid_url": (() => {
      const fn2 = (ctx) => {
        const { normalize: _normalize } = ctx;
        return _normalize(["Ongeldige URL."]);
      };
      fn2.source = "Ongeldige URL.";
      return fn2;
    })(),
    "invalid_uuid": (() => {
      const fn2 = (ctx) => {
        const { normalize: _normalize } = ctx;
        return _normalize(["Ongeldige UUID."]);
      };
      fn2.source = "Ongeldige UUID.";
      return fn2;
    })(),
    "invalid_regex": (() => {
      const fn2 = (ctx) => {
        const { normalize: _normalize } = ctx;
        return _normalize(["Ongeldige REGEX."]);
      };
      fn2.source = "Ongeldige REGEX.";
      return fn2;
    })(),
    "invalid_datetime": (() => {
      const fn2 = (ctx) => {
        const { normalize: _normalize } = ctx;
        return _normalize(["Ongeldige datetime."]);
      };
      fn2.source = "Ongeldige datetime.";
      return fn2;
    })(),
    "invalid_string": (() => {
      const fn2 = (ctx) => {
        const { normalize: _normalize } = ctx;
        return _normalize(["Ongeldige tekst."]);
      };
      fn2.source = "Ongeldige tekst.";
      return fn2;
    })(),
    "invalid_date": (() => {
      const fn2 = (ctx) => {
        const { normalize: _normalize } = ctx;
        return _normalize(["Ongeldige datum."]);
      };
      fn2.source = "Ongeldige datum.";
      return fn2;
    })(),
    "too_big_string": (() => {
      const fn2 = (ctx) => {
        const { normalize: _normalize, interpolate: _interpolate, named: _named } = ctx;
        return _normalize(["Max. ", _interpolate(_named("max")), " karakters lang."]);
      };
      fn2.source = "Max. {max} karakters lang.";
      return fn2;
    })(),
    "too_big_number": (() => {
      const fn2 = (ctx) => {
        const { normalize: _normalize, interpolate: _interpolate, named: _named } = ctx;
        return _normalize(["Max. ", _interpolate(_named("max")), " groot."]);
      };
      fn2.source = "Max. {max} groot.";
      return fn2;
    })(),
    "too_big_array": (() => {
      const fn2 = (ctx) => {
        const { normalize: _normalize, interpolate: _interpolate, named: _named } = ctx;
        return _normalize(["Max. ", _interpolate(_named("max")), " elementen."]);
      };
      fn2.source = "Max. {max} elementen.";
      return fn2;
    })(),
    "too_big_date": (() => {
      const fn2 = (ctx) => {
        const { normalize: _normalize, interpolate: _interpolate, named: _named } = ctx;
        return _normalize(["Max. ", _interpolate(_named("max")), " datum."]);
      };
      fn2.source = "Max. {max} datum.";
      return fn2;
    })(),
    "too_big": (() => {
      const fn2 = (ctx) => {
        const { normalize: _normalize, interpolate: _interpolate, named: _named } = ctx;
        return _normalize(["Max. ", _interpolate(_named("max")), " groot."]);
      };
      fn2.source = "Max. {max} groot.";
      return fn2;
    })(),
    "too_small_string": (() => {
      const fn2 = (ctx) => {
        const { normalize: _normalize, interpolate: _interpolate, named: _named, plural: _plural } = ctx;
        return _plural([_normalize(["Dit veld is verplicht."]), _normalize(["Dit veld is verplicht."]), _normalize(["Min. ", _interpolate(_named("min")), " karakters lang."])]);
      };
      fn2.source = "Dit veld is verplicht. | Dit veld is verplicht. | Min. {min} karakters lang.";
      return fn2;
    })(),
    "too_small_number": (() => {
      const fn2 = (ctx) => {
        const { normalize: _normalize, interpolate: _interpolate, named: _named } = ctx;
        return _normalize(["Min. ", _interpolate(_named("min")), " groot."]);
      };
      fn2.source = "Min. {min} groot.";
      return fn2;
    })(),
    "too_small_array": (() => {
      const fn2 = (ctx) => {
        const { normalize: _normalize, interpolate: _interpolate, named: _named } = ctx;
        return _normalize(["Min. ", _interpolate(_named("min")), " elementen."]);
      };
      fn2.source = "Min. {min} elementen.";
      return fn2;
    })(),
    "too_small_date": (() => {
      const fn2 = (ctx) => {
        const { normalize: _normalize, interpolate: _interpolate, named: _named } = ctx;
        return _normalize(["Min. ", _interpolate(_named("min")), " datum."]);
      };
      fn2.source = "Min. {min} datum.";
      return fn2;
    })(),
    "too_small": (() => {
      const fn2 = (ctx) => {
        const { normalize: _normalize, interpolate: _interpolate, named: _named } = ctx;
        return _normalize(["Min. ", _interpolate(_named("min")), " lang."]);
      };
      fn2.source = "Min. {min} lang.";
      return fn2;
    })(),
    "invalid_type_function": (() => {
      const fn2 = (ctx) => {
        const { normalize: _normalize } = ctx;
        return _normalize(["Het type moet een functie zijn."]);
      };
      fn2.source = "Het type moet een functie zijn.";
      return fn2;
    })(),
    "invalid_type_symbol": (() => {
      const fn2 = (ctx) => {
        const { normalize: _normalize } = ctx;
        return _normalize(["Het type moet een symbool zijn."]);
      };
      fn2.source = "Het type moet een symbool zijn.";
      return fn2;
    })(),
    "invalid_type_bigint": (() => {
      const fn2 = (ctx) => {
        const { normalize: _normalize } = ctx;
        return _normalize(["Het type moet een bigint zijn."]);
      };
      fn2.source = "Het type moet een bigint zijn.";
      return fn2;
    })(),
    "invalid_type_integer": (() => {
      const fn2 = (ctx) => {
        const { normalize: _normalize } = ctx;
        return _normalize(["Het type moet een geheel getal zijn."]);
      };
      fn2.source = "Het type moet een geheel getal zijn.";
      return fn2;
    })()
  }
};
var ColorGeneratorRoutes = /* @__PURE__ */ ((ColorGeneratorRoutes2) => {
  ColorGeneratorRoutes2["COLOR_GENERATOR_INDEX"] = "COLOR_GENERATOR_INDEX";
  return ColorGeneratorRoutes2;
})(ColorGeneratorRoutes || {});
var GlobalRoutes = /* @__PURE__ */ ((GlobalRoutes2) => {
  GlobalRoutes2["TAB1"] = "Tab1";
  GlobalRoutes2["TAB2"] = "Tab2";
  GlobalRoutes2["TAB3"] = "Tab3";
  return GlobalRoutes2;
})(GlobalRoutes || {});
const ROUTES = {
  ...GlobalRoutes,
  ...ColorGeneratorRoutes
};
const colorGeneratorRoutes = [
  {
    name: ROUTES.COLOR_GENERATOR_INDEX,
    path: "/",
    component: () => __vitePreload(() => import("./ColorGeneratorView-x5-blpKL.js"), true ? __vite__mapDeps([0,1,2,3,4,5,6]) : void 0)
  }
];
const routes = [
  {
    name: ROUTES.TAB1,
    path: "/tab1",
    component: () => __vitePreload(() => import("./TabTest-giLcosIl.js"), true ? __vite__mapDeps([7,5]) : void 0)
  },
  {
    name: ROUTES.TAB2,
    path: "/tab2",
    component: () => __vitePreload(() => import("./TabTest-giLcosIl.js"), true ? __vite__mapDeps([7,5]) : void 0)
  },
  {
    name: ROUTES.TAB3,
    path: "/tab3",
    component: () => __vitePreload(() => import("./TabTest-giLcosIl.js"), true ? __vite__mapDeps([7,5]) : void 0)
  },
  ...colorGeneratorRoutes
];
const router = createRouter({
  history: createWebHistory(),
  routes
});
const setupVue3 = defineSetupVue3(async ({ app }) => {
  await __vitePreload(() => import("./globals-w40geAFS.js"), true ? __vite__mapDeps([]) : void 0);
  await __vitePreload(() => import("./transitions-w40geAFS.js"), true ? __vite__mapDeps([]) : void 0);
  const pinia = createPinia();
  const i18n = createI18n({
    legacy: false,
    locale: "nl",
    // set locale
    fallbackLocale: "nl",
    // set fallback locale
    messages: {
      nl: resource,
      en: resource$1
    }
  });
  app.use(pinia).use(router).use(i18n);
});
const h$1 = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  setupVue3
}, Symbol.toStringTag, { value: "Module" }));
const v$2 = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null
}, Symbol.toStringTag, { value: "Module" }));
const RenderStory = /* @__PURE__ */ defineComponent$1({
  name: "RenderStory",
  props: {
    variant: {
      type: Object,
      required: true
    },
    story: {
      type: Object,
      required: true
    },
    slotName: {
      type: String,
      default: "default"
    }
  },
  emits: {
    ready: () => true
  },
  setup(props, { emit: emit2 }) {
    const sandbox = ref$1();
    let mounting = false;
    let app;
    let appHooks;
    async function unmountVariant() {
      var _a2;
      if (app) {
        await ((_a2 = app.onUnmount) == null ? void 0 : _a2.call(app));
        if (appHooks) {
          for (const hook of appHooks.onUnmount) {
            await hook();
          }
        }
        app.el.parentNode.removeChild(app.el);
        app = null;
      }
    }
    async function mountVariant() {
      var _a2;
      if (mounting)
        return;
      mounting = true;
      await unmountVariant();
      app = {
        el: document.createElement("div")
      };
      if (typeof props.variant.setupApp === "function") {
        await props.variant.setupApp({
          app,
          story: props.story,
          variant: props.variant
        });
      }
      await ((_a2 = app.onMount) == null ? void 0 : _a2.call(app));
      appHooks = {
        onUpdate: [],
        onUnmount: []
      };
      const api = {
        el: app.el,
        state: props.variant.state,
        onUpdate: (cb) => {
          appHooks.onUpdate.push(cb);
        },
        onUnmount: (cb) => {
          appHooks.onUnmount.push(cb);
        }
      };
      const onMount = props.variant.slots()[props.slotName];
      await onMount(api);
      sandbox.value.appendChild(app.el);
      emit2("ready");
    }
    onMounted$1(async () => {
      if (props.variant.configReady) {
        await mountVariant();
      }
    });
    watch$1(() => props.variant, async (value) => {
      if (value.configReady && !mounting) {
        if (!app) {
          await mountVariant();
        }
      }
    }, {
      deep: true
    });
    watch$1(() => props.variant.state, async () => {
      if (appHooks) {
        for (const hook of appHooks.onUpdate) {
          await hook();
        }
      }
    }, {
      deep: true
    });
    onBeforeUnmount$1(() => {
      unmountVariant();
    });
    return {
      sandbox
    };
  },
  render() {
    return h$4("div", {
      ref: "sandbox"
    });
  }
});
function generateSourceCode() {
}
const client$1 = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  MountStory,
  RenderStory,
  generateSourceCode
}, Symbol.toStringTag, { value: "Module" }));
const i$1 = (s5) => s5 !== null && typeof s5 == "object";
function o$1(s5, e3 = /* @__PURE__ */ new WeakMap()) {
  const t3 = isRef(s5) ? unref(s5) : s5;
  if (typeof t3 == "symbol")
    return t3.toString();
  if (!i$1(t3))
    return t3;
  if (e3.has(t3))
    return e3.get(t3);
  if (Array.isArray(t3)) {
    const r2 = [];
    return e3.set(t3, r2), r2.push(...t3.map((n2) => o$1(n2, e3))), r2;
  } else {
    const r2 = {};
    return e3.set(t3, r2), h(t3, r2, e3), r2;
  }
}
const h = (s5, e3, t3 = /* @__PURE__ */ new WeakMap()) => {
  Object.keys(s5).forEach((r2) => {
    e3[r2] = o$1(s5[r2], t3);
  });
};
function a(s5, e3 = /* @__PURE__ */ new WeakMap()) {
  const t3 = isRef$1(s5) ? unref$1(s5) : s5;
  if (typeof t3 == "symbol")
    return t3.toString();
  if (!i$1(t3))
    return t3;
  if (e3.has(t3))
    return e3.get(t3);
  if (Array.isArray(t3)) {
    const r2 = [];
    return e3.set(t3, r2), r2.push(...t3.map((n2) => a(n2, e3))), r2;
  } else {
    const r2 = {};
    return e3.set(t3, r2), d(t3, r2, e3), r2;
  }
}
const d = (s5, e3, t3 = /* @__PURE__ */ new WeakMap()) => {
  Object.keys(s5).forEach((r2) => {
    e3[r2] = o$1(s5[r2], t3);
  });
};
function A$1(s5, e3) {
  let t3 = false;
  const r2 = watch$1(() => s5, (u3) => {
    u3 != null && (t3 ? t3 = false : (t3 = true, applyState(e3, a(u3))));
  }, {
    deep: true,
    immediate: true
  }), n2 = watch(() => e3, (u3) => {
    u3 != null && (t3 ? t3 = false : (t3 = true, applyState(s5, o$1(u3))));
  }, {
    deep: true,
    immediate: true
  });
  return {
    stop() {
      r2(), n2();
    }
  };
}
const v$1 = /* @__PURE__ */ defineComponent({
  // eslint-disable-next-line vue/multi-word-component-names
  name: "Variant",
  __histoireType: "variant",
  props: {
    initState: {
      type: Function,
      default: void 0
    },
    source: {
      type: String,
      default: void 0
    },
    responsiveDisabled: {
      type: Boolean,
      default: false
    },
    autoPropsDisabled: {
      type: Boolean,
      default: false
    },
    setupApp: {
      type: Function,
      default: void 0
    },
    meta: {
      type: Object,
      default: void 0
    }
  },
  async setup(t3) {
    const e3 = useAttrs(), i3 = getCurrentInstance(), n2 = inject("implicitState");
    if (typeof t3.initState == "function") {
      const s5 = await t3.initState();
      applyState(e3.variant.state, o$1(s5));
    }
    A$1(e3.variant.state, n2());
    function a4() {
      Object.assign(e3.variant, {
        slots: () => i3.proxy.$slots,
        source: t3.source,
        responsiveDisabled: t3.responsiveDisabled,
        autoPropsDisabled: t3.autoPropsDisabled,
        setupApp: t3.setupApp,
        meta: t3.meta,
        configReady: true
      });
    }
    return a4(), {
      updateVariant: a4
    };
  },
  render() {
    return this.updateVariant(), null;
  }
});
const k$1 = /* @__PURE__ */ defineComponent({
  // eslint-disable-next-line vue/multi-word-component-names
  name: "Story",
  __histoireType: "story",
  inheritAttrs: false,
  props: {
    initState: {
      type: Function,
      default: void 0
    },
    meta: {
      type: Object,
      default: void 0
    }
  },
  setup(d4) {
    const a4 = getCurrentInstance(), f2 = useAttrs(), n2 = computed(() => f2.story);
    provide("story", n2);
    const e3 = a4.parent, r2 = {
      $data: e3.data
    };
    function c3(i3, t3) {
      typeof t3 == "function" || t3 != null && t3.__file || typeof (t3 == null ? void 0 : t3.render) == "function" || typeof (t3 == null ? void 0 : t3.setup) == "function" || (r2[i3] = t3);
    }
    for (const i3 in e3.exposed)
      c3(i3, e3.exposed[i3]);
    for (const i3 in e3.devtoolsRawSetupState)
      c3(i3, e3.devtoolsRawSetupState[i3]);
    provide("implicitState", () => reactive({ ...r2 }));
    function y4() {
      Object.assign(f2.story, {
        meta: d4.meta,
        slots: () => a4.proxy.$slots
      });
    }
    return {
      story: n2,
      updateStory: y4
    };
  },
  render() {
    this.updateStory();
    const [d4] = this.story.variants;
    if (d4.id === "_default")
      return h$3(v$1, {
        variant: d4,
        initState: this.initState,
        ...this.$attrs
      }, this.$slots);
    let a4 = 0;
    const f2 = (e3) => {
      var c3, y4, i3, t3, h4, m4;
      const r2 = [];
      for (const o2 of e3)
        if (((c3 = o2.type) == null ? void 0 : c3.__histoireType) === "variant") {
          const p2 = {};
          if (p2.variant = this.story.variants[a4], !p2.variant)
            continue;
          !((y4 = o2.props) != null && y4.initState) && !((i3 = o2.props) != null && i3["init-state"]) && (p2.initState = this.initState);
          for (const s5 in this.$attrs)
            typeof ((t3 = o2.props) == null ? void 0 : t3[s5]) > "u" && (p2[s5] = this.$attrs[s5]);
          for (const s5 in this.story)
            !omitInheritStoryProps.includes(s5) && typeof ((h4 = o2.props) == null ? void 0 : h4[s5]) > "u" && (p2[s5] = this.story[s5]);
          a4++, r2.push(cloneVNode(o2, p2));
        } else
          (m4 = o2.children) != null && m4.length && (o2.children = f2(o2.children)), r2.push(o2);
      return r2;
    };
    let n2 = this.$slots.default();
    return n2 = f2(n2), n2;
  }
});
function M(e3) {
  e3.component("Story", k$1), e3.component("Variant", v$1);
  for (const o2 in Nm)
    e3.component(o2, A(Nm[o2]));
}
function A(e3) {
  return /* @__PURE__ */ defineComponent({
    name: e3.name,
    inheritAttrs: false,
    setup(o2, { attrs: n2 }) {
      const a4 = ref(), p2 = ref(), m4 = reactive$1({});
      function c3(l2) {
        Object.assign(m4, l2);
      }
      c3(n2), onBeforeUpdate(() => {
        c3(n2);
      });
      let t3 = [];
      const r2 = ref([]);
      function S4() {
        r2.value.forEach((l2, f2) => {
          const h4 = p2.value.querySelector(`[renderslotid="${f2}"]`);
          if (!h4)
            return;
          const s5 = a4.value.querySelector(`[slotid="${f2}"]`);
          for (; s5.firstChild; )
            s5.removeChild(s5.lastChild);
          s5.appendChild(h4);
        });
      }
      let i3;
      return onMounted(() => {
        i3 = createApp$1({
          mounted() {
            r2.value = t3, t3 = [];
          },
          updated() {
            r2.value = t3, t3 = [];
          },
          render() {
            return h$4(e3, {
              ...m4,
              key: "component"
            }, {
              default: (l2) => (t3.push(l2), h$4("div", {
                slotId: t3.length - 1
              }))
            });
          }
        }), i3.mount(a4.value);
      }), onUpdated(() => {
        S4();
      }), onBeforeUnmount(() => {
        i3.unmount();
      }), {
        el: a4,
        slotEl: p2,
        slotCalls: r2
      };
    },
    render() {
      return [
        h$3("div", {
          ref: "el"
        }),
        h$3("div", {
          ref: "slotEl"
        }, this.slotCalls.map((o2, n2) => h$3("div", {
          renderSlotId: n2
        }, this.$slots.default(o2))))
      ];
    }
  });
}
const n = {
  path: "/",
  name: void 0,
  redirectedFrom: void 0,
  params: {},
  query: {},
  hash: "",
  fullPath: "/",
  matched: [],
  meta: {},
  href: "/"
}, c = /* @__PURE__ */ defineComponent({
  name: "RouterLinkStub",
  compatConfig: { MODE: 3 },
  props: {
    to: {
      type: [String, Object],
      required: true
    },
    custom: {
      type: Boolean,
      default: false
    }
  },
  render() {
    var e3, a4;
    const o2 = computed(() => n), r2 = (a4 = (e3 = this.$slots) == null ? void 0 : e3.default) == null ? void 0 : a4.call(e3, {
      route: o2,
      href: computed(() => o2.value.href),
      isActive: computed(() => false),
      isExactActive: computed(() => false),
      // eslint-disable-next-line @typescript-eslint/no-empty-function
      navigate: async () => {
      }
    });
    return this.custom ? r2 : h$3("a", void 0, r2);
  }
});
const R$1 = /* @__PURE__ */ defineComponent$1({
  name: "MountStory",
  props: {
    story: {
      type: Object,
      required: true
    }
  },
  setup(n2) {
    const i3 = ref$1();
    let t3;
    async function p2() {
      const u3 = [];
      t3 = createApp({
        name: "MountStorySubApp",
        render: () => {
          const e3 = h$3(n2.story.file.component, {
            story: n2.story
          }), o2 = [];
          o2.push(e3);
          for (const [d4, l2] of u3.entries())
            o2.push(
              h$3(
                l2,
                {
                  story: n2.story,
                  variant: null
                },
                () => o2[d4]
              )
            );
          return h$3(
            Suspense,
            void 0,
            o2.at(-1)
          );
        }
      }), M(t3), t3.component("RouterLink", c), watch$1(() => n2.story.variants, () => {
        t3._instance.proxy.$forceUpdate();
      });
      const m4 = {
        app: t3,
        story: n2.story,
        variant: null,
        addWrapper: (e3) => {
          u3.push(e3);
        }
      };
      if (typeof (v$2 == null ? void 0 : void 0) == "function") {
        const e3 = void 0;
        await e3(m4);
      }
      if (typeof (h$1 == null ? void 0 : setupVue3) == "function") {
        const e3 = setupVue3;
        await e3(m4);
      }
      u3.reverse();
      const f2 = document.createElement("div");
      i3.value.appendChild(f2), t3.mount(f2);
    }
    function c$12() {
      t3 == null || t3.unmount();
    }
    return watch$1(() => n2.story.id, async () => {
      c$12(), await p2();
    }), onMounted$1(async () => {
      await p2();
    }), onUnmounted$1(() => {
      c$12();
    }), {
      el: i3
    };
  },
  render() {
    return h$4("div", {
      ref: "el"
    });
  }
});
var m$1 = function() {
  return m$1 = Object.assign || function(t3) {
    for (var n2, r2 = 1, i3 = arguments.length; r2 < i3; r2++) {
      n2 = arguments[r2];
      for (var o2 in n2)
        Object.prototype.hasOwnProperty.call(n2, o2) && (t3[o2] = n2[o2]);
    }
    return t3;
  }, m$1.apply(this, arguments);
};
typeof SuppressedError == "function" ? SuppressedError : function(e3, t3, n2) {
  var r2 = new Error(n2);
  return r2.name = "SuppressedError", r2.error = e3, r2.suppressed = t3, r2;
};
function r(u3) {
  return u3.toLowerCase();
}
var R = [/([a-z0-9])([A-Z])/g, /([A-Z])([A-Z][a-z])/g], _ = /[^A-Z0-9]+/gi;
function o(a4, e3) {
  e3 === void 0 && (e3 = {});
  for (var r$12 = e3.splitRegexp, l2 = r$12 === void 0 ? R : r$12, i3 = e3.stripRegexp, f2 = i3 === void 0 ? _ : i3, d4 = e3.transform, g2 = d4 === void 0 ? r : d4, p2 = e3.delimiter, s5 = p2 === void 0 ? " " : p2, t3 = v(v(a4, l2, "$1\0$2"), f2, "\0"), c3 = 0, n2 = t3.length; t3.charAt(c3) === "\0"; )
    c3++;
  for (; t3.charAt(n2 - 1) === "\0"; )
    n2--;
  return t3.slice(c3, n2).split("\0").map(g2).join(s5);
}
function v(a4, e3, r2) {
  return e3 instanceof RegExp ? a4.replace(e3, r2) : e3.reduce(function(l2, i3) {
    return l2.replace(i3, r2);
  }, a4);
}
function f(r2, a4) {
  var e3 = r2.charAt(0), s5 = r2.substr(1).toLowerCase();
  return a4 > 0 && e3 >= "0" && e3 <= "9" ? "_" + e3 + s5 : "" + e3.toUpperCase() + s5;
}
function i(r2, a4) {
  return a4 === void 0 && (a4 = {}), o(r2, m$1({ delimiter: "", transform: f }, a4));
}
function m(a4, r2) {
  return r2 === 0 ? a4.toLowerCase() : f(a4, r2);
}
function C(a4, r2) {
  return r2 === void 0 && (r2 = {}), i(a4, m$1({ transform: m }, r2));
}
async function te(e3) {
  var _2, d4, y4, x3;
  const o2 = ((d4 = (_2 = e3.slots()).default) == null ? void 0 : d4.call(_2, { state: e3.state ?? {} })) ?? [], c3 = Array.isArray(o2) ? o2 : [o2], m4 = [];
  for (const a4 in c3) {
    const A2 = c3[a4];
    m4.push(...(await k(A2, (x3 = (y4 = e3.state) == null ? void 0 : y4._hPropState) == null ? void 0 : x3[a4])).lines);
  }
  return m4.join(`
`);
}
async function k(e3, o2 = null) {
  var d4;
  if (e3.type === Text)
    return {
      // @ts-ignore
      lines: [e3.children],
      isText: true
    };
  const c3 = [];
  if (typeof e3.type == "object" || typeof e3.type == "string") {
    let y4 = function(t3, s5, i3 = null) {
      let r2 = "";
      for (const T4 in s5.modifiers)
        s5.modifiers[T4] && (r2 += `.${T4}`);
      let u3 = "";
      s5.arg && (u3 = `:${s5.arg}`), i3 && (i3 = i3.replace(/^\$(setup|props|data)\./g, ""));
      const l2 = i3 ? [i3] : U(s5.value), f2 = [], L3 = `v-${t3}${u3}${r2}="`;
      l2.length > 1 ? (f2.push(`${L3}${l2[0]}`), f2.push(...l2.slice(1, l2.length - 1)), f2.push(`${l2[l2.length - 1]}"`), A2 = true) : f2.push(`${L3}${l2[0] ?? ""}"`), a4.push(f2);
    }, x3 = function(t3, s5) {
      var i3, r2, u3, l2;
      if (typeof s5 != "string" || (i3 = e3.dynamicProps) != null && i3.includes(t3)) {
        let f2 = ":";
        t3.startsWith("on") && (f2 = "@");
        const L3 = f2 === "@" ? `${t3[2].toLowerCase()}${t3.slice(3)}` : t3, M4 = [`onUpdate:${t3}`, `onUpdate:${C(t3)}`].find((p2) => {
          var $3;
          return (($3 = e3.dynamicProps) == null ? void 0 : $3.includes(p2)) || p2 in e3.props;
        });
        if (f2 === ":" && M4) {
          j2.push(M4);
          const $3 = e3.props[M4].toString();
          let V3;
          const B3 = /\(\$event\) => (.*?) = \$event/.exec($3);
          B3 && (V3 = B3[1]);
          const K3 = `${t3 === "modelValue" ? "model" : t3}Modifiers`, W2 = e3.props[K3] ?? {};
          j2.push(K3), y4("model", {
            arg: t3 === "modelValue" ? null : t3,
            modifiers: W2,
            value: s5
          }, V3);
          return;
        }
        if (typeof s5 > "u")
          return;
        let h4;
        if (typeof s5 == "string" && s5.startsWith("{{") && s5.endsWith("}}"))
          h4 = S(s5.substring(2, s5.length - 2).trim()).split(`
`);
        else if (typeof s5 == "function") {
          let p2 = S(s5.toString().replace(/'/g, "\\'").replace(/"/g, "'"));
          const $3 = /function ([^\s]+)\(/.exec(p2);
          $3 ? h4 = [$3[1]] : (p2.startsWith("($event) => ") && (p2 = p2.substring(12)), h4 = p2.split(`
`));
        } else
          h4 = U(s5);
        if (h4.length > 1) {
          A2 = true;
          const p2 = [`${f2}${L3}="${h4[0]}`];
          p2.push(...h4.slice(1, h4.length - 1)), p2.push(`${h4[h4.length - 1]}"`), a4.push(p2);
        } else
          a4.push([`${f2}${L3}="${h4[0]}"`]);
      } else
        ((l2 = (u3 = (r2 = e3.type) == null ? void 0 : r2.props) == null ? void 0 : u3[t3]) == null ? void 0 : l2.type) === Boolean ? a4.push([t3]) : a4.push([`${t3}="${s5}"`]);
    };
    (d4 = e3.type) != null && d4.__asyncLoader && !e3.type.__asyncResolved && await e3.type.__asyncLoader();
    const a4 = [];
    let A2 = false;
    const j2 = [
      "key"
    ];
    if (e3.dirs) {
      for (const t3 of e3.dirs)
        if (t3.dir === vModelText || t3.dir === vModelSelect || t3.dir === vModelRadio || t3.dir === vModelCheckbox || t3.dir === vModelDynamic) {
          const i3 = [`onUpdate:${t3.arg ?? "modelValue"}`, `onUpdate:${C(t3.arg ?? "modelValue")}`].find((l2) => e3.props[l2]), r2 = e3.props[i3];
          let u3 = null;
          if (r2) {
            j2.push(i3);
            const l2 = r2.toString(), f2 = /\(\$event\) => (.*?) = \$event/.exec(l2);
            f2 && (u3 = f2[1]);
          }
          y4("model", t3, u3);
        } else if (t3.instance._ || t3.instance.$) {
          const s5 = t3.instance.$ ?? t3.instance._;
          let i3;
          for (const r2 of [s5.directives, s5.appContext.directives]) {
            for (const u3 in r2)
              if (r2[u3] === t3.dir) {
                i3 = u3;
                break;
              }
            if (i3)
              break;
          }
          i3 && y4(i3, t3);
        }
    }
    for (const t3 in e3.props) {
      if (j2.includes(t3) || o2 && t3 in o2)
        continue;
      const s5 = e3.props[t3];
      x3(t3, s5);
    }
    if (o2)
      for (const t3 in o2)
        x3(t3, o2[t3]);
    a4.length > 1 && (A2 = true);
    const b4 = Q(e3);
    let w3 = false;
    const n2 = [];
    if (typeof e3.children == "string")
      b4 === "pre" ? n2.push(e3.children) : n2.push(...e3.children.split(`
`)), w3 = true;
    else if (Array.isArray(e3.children)) {
      let t3;
      for (const s5 of e3.children) {
        const i3 = await k(s5);
        if (i3.isText) {
          t3 === void 0 && (t3 = true);
          const r2 = i3.lines[0];
          !n2.length || /^\s/.test(r2) ? n2.push(r2.trim()) : n2[n2.length - 1] += r2;
        } else
          t3 === void 0 && (t3 = false), n2.push(...i3.lines);
      }
      t3 !== void 0 && (w3 = t3);
    }
    if (e3.children && typeof e3.children == "object" && !Array.isArray(e3.children)) {
      for (const t3 in e3.children)
        if (typeof e3.children[t3] == "function") {
          const s5 = createAutoBuildingObject((l2) => `{{ ${l2} }}`, (l2, f2) => {
            if (f2 === "__v_isRef")
              return () => false;
          }), i3 = e3.children[t3](s5.proxy), r2 = [];
          for (const l2 of i3)
            r2.push(...(await k(l2)).lines);
          const u3 = Object.keys(s5.cache);
          u3.length ? (n2.push(`<template #${t3}="{ ${u3.join(", ")} }">`), n2.push(...indent(r2)), n2.push("</template>")) : t3 === "default" ? n2.push(...r2) : (n2.push(`<template #${t3}>`), n2.push(...indent(r2)), n2.push("</template>"));
        }
    }
    const g2 = [`<${b4}`];
    if (A2) {
      for (const t3 of a4)
        g2.push(...indent(t3));
      n2.length > 0 && g2.push(">");
    } else
      a4.length === 1 && (g2[0] += ` ${a4[0]}`), n2.length > 0 && (g2[0] += ">");
    const R4 = voidElements.includes(b4.toLowerCase());
    n2.length > 0 ? n2.length === 1 && g2.length === 1 && !a4.length && w3 ? c3.push(`${g2[0]}${n2[0]}</${b4}>`) : (c3.push(...g2), c3.push(...indent(n2)), c3.push(`</${b4}>`)) : g2.length > 1 ? (c3.push(...g2), c3.push(R4 ? ">" : "/>")) : c3.push(`${g2[0]}${R4 ? "" : " /"}>`);
  } else if ((e3 == null ? void 0 : e3.shapeFlag) & 16)
    for (const y4 of e3.children)
      c3.push(...(await k(y4)).lines);
  return {
    lines: c3
  };
}
function Q(e3) {
  var o2, c3, m4, _2;
  if (typeof e3.type == "string")
    return e3.type;
  if ((o2 = e3.type) != null && o2.__asyncResolved) {
    const d4 = (c3 = e3.type) == null ? void 0 : c3.__asyncResolved;
    return d4.name ?? P(d4.__file);
  } else {
    if ((m4 = e3.type) != null && m4.name)
      return e3.type.name;
    if ((_2 = e3.type) != null && _2.__file)
      return P(e3.type.__file);
  }
  return "Anonymous";
}
function P(e3) {
  const o2 = /([^/]+)\.vue$/.exec(e3);
  return o2 ? i(o2[1]) : "Anonymous";
}
function U(e3) {
  const o2 = !!(e3 != null && e3.__autoBuildingObject), c3 = serializeJs(e3);
  return o2 ? [S(c3.__autoBuildingObjectGetKey)] : S(c3).split(`
`);
}
function S(e3) {
  return e3.replace(/\$setup\./g, "");
}
const z = /* @__PURE__ */ defineComponent$1({
  name: "RenderStory",
  props: {
    variant: {
      type: Object,
      required: true
    },
    story: {
      type: Object,
      required: true
    },
    slotName: {
      type: String,
      default: "default"
    }
  },
  emits: {
    ready: () => true
  },
  setup(e3, { emit: P2 }) {
    const b4 = ref$1();
    let a4, m4 = false;
    const i3 = reactive({});
    A$1(e3.variant.state, i3);
    function S4() {
      a4 && (a4.unmount(), a4 = null);
    }
    async function g2() {
      if (m4)
        return;
      m4 = true, S4();
      let u3;
      const p2 = [];
      a4 = createApp({
        name: "RenderStorySubApp",
        setup() {
          onMounted(() => {
            m4 = false;
          });
        },
        render: () => {
          var f2, o2, n2, y4;
          const r2 = ((o2 = (f2 = e3.variant.slots()) == null ? void 0 : f2[e3.slotName]) == null ? void 0 : o2.call(f2, {
            state: i3
          })) ?? ((y4 = (n2 = e3.story.slots()) == null ? void 0 : n2[e3.slotName]) == null ? void 0 : y4.call(n2, {
            state: i3
          }));
          if (e3.slotName === "default" && !e3.variant.autoPropsDisabled) {
            const c3 = w3(r2), l2 = JSON.stringify(c3);
            (!u3 || u3 !== l2) && (applyState(e3.variant.state, {
              _hPropDefs: c3
            }), e3.variant.state._hPropState || applyState(e3.variant.state, {
              _hPropState: {}
            }), u3 = l2);
          }
          const t3 = [];
          t3.push(r2);
          for (const [c3, l2] of p2.entries())
            t3.push(
              h$3(l2, {
                story: e3.story,
                variant: e3.variant
              }, () => t3[c3])
            );
          return t3.at(-1);
        }
      }), M(a4), a4.component("RouterLink", c);
      const s5 = {
        app: a4,
        story: e3.story,
        variant: e3.variant,
        addWrapper: (r2) => {
          p2.push(r2);
        }
      };
      if (typeof (v$2 == null ? void 0 : void 0) == "function") {
        const r2 = void 0;
        await r2(s5);
      }
      if (typeof (h$1 == null ? void 0 : setupVue3) == "function") {
        const r2 = setupVue3;
        await r2(s5);
      }
      if (typeof e3.variant.setupApp == "function") {
        const r2 = e3.variant.setupApp;
        await r2(s5);
      }
      p2.reverse();
      const d4 = document.createElement("div");
      b4.value.appendChild(d4), a4.mount(d4), P2("ready");
    }
    function w3(u3) {
      var d4, r2;
      const p2 = [];
      let s5 = 0;
      for (const t3 of u3) {
        if (typeof t3.type == "object") {
          const f2 = [];
          for (const o2 in t3.type.props) {
            const n2 = t3.type.props[o2];
            let y4, c3;
            n2 && (y4 = (Array.isArray(n2.type) ? n2.type : typeof n2 == "function" ? [n2] : [n2.type]).map((N3) => {
              switch (N3) {
                case String:
                  return "string";
                case Number:
                  return "number";
                case Boolean:
                  return "boolean";
                case Object:
                  return "object";
                case Array:
                  return "array";
                default:
                  return "unknown";
              }
            }), c3 = typeof n2.default == "function" ? n2.default.toString() : n2.default), f2.push({
              name: o2,
              types: y4,
              required: n2 == null ? void 0 : n2.required,
              default: c3
            }), ((r2 = (d4 = i3 == null ? void 0 : i3._hPropState) == null ? void 0 : d4[s5]) == null ? void 0 : r2[o2]) != null && (t3.props || (t3.props = {}), t3.props[o2] = i3._hPropState[s5][o2], t3.dynamicProps || (t3.dynamicProps = []), t3.dynamicProps.includes(o2) || t3.dynamicProps.push(o2));
          }
          p2.push({
            name: Q(t3),
            index: s5,
            props: f2
          }), s5++;
        }
        Array.isArray(t3.children) && p2.push(...w3(t3.children));
      }
      return p2.filter((t3) => t3.props.length);
    }
    return onMounted$1(async () => {
      e3.variant.configReady && await g2();
    }), watch$1(() => e3.variant, async (u3) => {
      u3.configReady && !m4 && (a4 ? a4._instance.proxy.$forceUpdate() : await g2());
    }, {
      deep: true
    }), onBeforeUnmount$1(() => {
      S4();
    }), {
      sandbox: b4
    };
  },
  render() {
    return h$4("div", {
      ref: "sandbox"
    });
  }
});
const client = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  MountStory: R$1,
  RenderStory: z,
  generateSourceCode: te,
  getTagName: Q
}, Symbol.toStringTag, { value: "Module" }));
export {
  mergeProps$1 as $,
  pushScopeId$1 as A,
  popScopeId$1 as B,
  vShow$1 as C,
  defineAsyncComponent$1 as D,
  reactive$1 as E,
  Fragment$1 as F,
  normalizeStyle$1 as G,
  useTitle as H,
  Icon as I,
  onMounted$1 as J,
  createApp$1 as K,
  createPinia$1 as L,
  plugin as M,
  parseQuery$1 as N,
  h$4 as O,
  applyState as P,
  Comp25 as Q,
  defineAsyncComponent as R,
  createRouter$1 as S,
  Transition$1 as T,
  createWebHistory$1 as U,
  createWebHashHistory as V,
  useDark as W,
  useToggle as X,
  markRaw$1 as Y,
  watchEffect$1 as Z,
  __vitePreload as _,
  useRoute$1 as a,
  be as a$,
  resolveDynamicComponent$1 as a0,
  toRefs as a1,
  useTransition as a2,
  syncRefs as a3,
  unindent as a4,
  useRouter$1 as a5,
  useResizeObserver as a6,
  Am as a7,
  withModifiers$1 as a8,
  renderSlot$1 as a9,
  reactive as aA,
  createBaseVNode as aB,
  normalizeProps as aC,
  guardReactiveProps as aD,
  createTextVNode as aE,
  toDisplayString$1 as aF,
  createElementBlock as aG,
  renderSlot as aH,
  createCommentVNode as aI,
  normalizeClass as aJ,
  mergeModels as aK,
  useModel as aL,
  withKeys as aM,
  Transition as aN,
  withModifiers as aO,
  Fragment as aP,
  ref as aQ,
  mergeProps as aR,
  useAttrs as aS,
  Ka as aT,
  computed as aU,
  toValue$2 as aV,
  withDirectives as aW,
  vModelText as aX,
  ge$3 as aY,
  $e$1 as aZ,
  Ie$3 as a_,
  vModelText$1 as aa,
  onUnmounted$1 as ab,
  VTooltip as ac,
  createStaticVNode as ad,
  toRaw$1 as ae,
  Dropdown as af,
  clone as ag,
  omit$1 as ah,
  useTimeoutFn as ai,
  onClickOutside as aj,
  nextTick$1 as ak,
  Mm as al,
  gm as am,
  ym as an,
  wm as ao,
  shallowRef$1 as ap,
  getHighlighter as aq,
  onBeforeUnmount$1 as ar,
  scrollIntoView as as,
  useMediaQuery as at,
  defineComponent as au,
  resolveComponent as av,
  openBlock as aw,
  createBlock as ax,
  withCtx as ay,
  createVNode as az,
  createElementBlock$1 as b,
  RouterLink as b0,
  resolveDynamicComponent as b1,
  Se$3 as b2,
  renderList as b3,
  inject as b4,
  provide as b5,
  _e$1 as b6,
  Ye$1 as b7,
  he as b8,
  Se$1 as b9,
  markRaw as bA,
  bt as bB,
  refDebounced as bC,
  useFocusWithin as bD,
  onKeyDown as bE,
  onMounted as bF,
  ye$1 as bG,
  Ge$1 as bH,
  je$2 as bI,
  vShow as bJ,
  vModelCheckbox as bK,
  vModelDynamic as bL,
  pushScopeId as bM,
  popScopeId as bN,
  twMerge as bO,
  extendTailwindMerge as bP,
  defineConfig as bQ,
  useFocus as bR,
  refDebounced$1 as bS,
  flexsearch_bundleExports as bT,
  client$1 as bU,
  client as bV,
  ze$2 as ba,
  watch as bb,
  Ue$2 as bc,
  Ie$4 as bd,
  useI18n as be,
  _e$2 as bf,
  Je$1 as bg,
  je$3 as bh,
  Ge$2 as bi,
  We$1 as bj,
  Fe$1 as bk,
  Ae$1 as bl,
  useCssVars as bm,
  ie$1 as bn,
  me$2 as bo,
  pe$2 as bp,
  xe$1 as bq,
  Ie$2 as br,
  useRouteQuery as bs,
  useRoute as bt,
  RouterView as bu,
  ye as bv,
  useSwipe as bw,
  normalizeStyle as bx,
  h$3 as by,
  $t as bz,
  computed$2 as c,
  defineComponent$1 as d,
  createVNode$1 as e,
  unref$1 as f,
  createBaseVNode$1 as g,
  createCommentVNode$1 as h,
  defineStore as i,
  useStorage as j,
  watch$1 as k,
  resolveComponent$1 as l,
  withKeys$1 as m,
  normalizeClass$1 as n,
  openBlock$1 as o,
  renderList$1 as p,
  createBlock$1 as q,
  ref$1 as r,
  useEventListener$1 as s,
  toDisplayString$2 as t,
  useCssVars$1 as u,
  isRef$1 as v,
  withCtx$1 as w,
  resolveDirective as x,
  withDirectives$1 as y,
  createTextVNode$1 as z
};
function __vite__mapDeps(indexes) {
  if (!__vite__mapDeps.viteFileDeps) {
    __vite__mapDeps.viteFileDeps = ["assets/ColorGeneratorView-x5-blpKL.js","assets/AppInput-AFEKyk2H.js","assets/appInput.style-6wm4Enpg.js","assets/cva-zAQhILdM.js","assets/AppIcon-9br4U6Dr.js","assets/_plugin-vue_export-helper-yVxbj29m.js","assets/AppButton-3AH1zsJ6.js","assets/TabTest-giLcosIl.js"]
  }
  return indexes.map((i) => __vite__mapDeps.viteFileDeps[i])
}
