[
  {
    "component": "AppDatePicker",
    "name": "AppDatePicker",
    "files": [
      {
        "name": "AppDatePicker.vue",
        "dir": "./src/components/datepicker",
        "placementDir": "datepicker",
        "type": "components",
        "content": "<script setup lang=\"ts\" generic=\"TRange extends boolean\">\nimport AppDateSelector from '@/components/datepicker/AppDateSelector.vue'\nimport AppIcon from '@/components/icon/AppIcon.vue'\nimport AppInput from '@/components/input/AppInput.vue'\nimport { fadeTransition } from '@/transitions'\nimport type { DateSelectorProps, ModelDate } from '@/types/datePicker.type'\n\nconst {\n  hasTimePicker = false,\n  isMonthPicker = false,\n  isRange = false,\n  isTimePicker = false,\n  isWeekPicker = false,\n  isYearPicker = false,\n\n  allowedDates,\n  autoRange,\n  disabledDates,\n  disabledWeekDays,\n  endDate,\n  filters,\n  flow,\n  maxDate,\n  maxRange,\n  minDate,\n  minRange,\n  startDate,\n  yearRange,\n} = defineProps<Omit<DateSelectorProps<TRange>, 'isInput'>>()\n\nconst date = defineModel<ModelDate<TRange>>({\n  default: null,\n})\n</script>\n\n<template>\n  <!-- eslint-disable vue/valid-v-model -->\n  <AppDateSelector\n    v-model=\"(date as any)\"\n\n    :has-time-picker=\"hasTimePicker\"\n    :is-month-picker=\"isMonthPicker\"\n    :is-range=\"isRange\"\n    :is-time-picker=\"isTimePicker\"\n    :is-week-picker=\"isWeekPicker\"\n    :is-year-picker=\"isYearPicker\"\n\n    :allowed-dates=\"allowedDates\"\n    :auto-range=\"autoRange\"\n    :disabled-dates=\"disabledDates\"\n    :disabled-week-days=\"disabledWeekDays\"\n    :end-date=\"endDate\"\n    :filters=\"filters\"\n    :flow=\"flow\"\n    :max-date=\"maxDate\"\n    :max-range=\"maxRange\"\n    :min-date=\"minDate\"\n    :min-range=\"minRange\"\n    :start-date=\"startDate\"\n    :year-range=\"yearRange\"\n\n    is-input\n  >\n    <template\n      #input=\"{\n        value,\n        onInput,\n        onEnter,\n        onTab,\n        onBlur,\n        onKeypress,\n        onPaste,\n        onClear,\n        isMenuOpen,\n      }\"\n    >\n      <AppInput\n        icon-left=\"calendar\"\n        :model-value=\"value\"\n        is-readonly\n        :is-outside-focused=\"isMenuOpen\"\n        @input=\"onInput\"\n        @keydown.enter=\"onEnter\"\n        @keydown.tab=\"onTab\"\n        @blur=\"onBlur\"\n        @keypress=\"onKeypress\"\n        @paste=\"onPaste\"\n      >\n        <template #right>\n          <Transition v-bind=\"fadeTransition\">\n            <button v-if=\"value\">\n              <AppIcon icon=\"close\" class=\"h-4 px-2\" @click.stop=\"onClear\" />\n            </button>\n          </Transition>\n        </template>\n      </AppInput>\n    </template>\n  </AppDateSelector>\n</template>\n"
      },
      {
        "name": "AppDateSelector.vue",
        "dir": "./src/components/datepicker",
        "placementDir": "datepicker",
        "type": "components",
        "content": "<script setup lang=\"ts\" generic=\"TRange extends boolean\">\nimport VueDatePicker from '@vuepic/vue-datepicker'\n\nimport '@vuepic/vue-datepicker/dist/main.css'\nimport AppIcon from '@/components/icon/AppIcon.vue'\nimport type { DateSelectorProps, ModelDate } from '@/types/datePicker.type'\n\nconst {\n  hasTimePicker = false,\n  isMonthPicker = false,\n  isRange = false,\n  isTimePicker = false,\n  isWeekPicker = false,\n  isYearPicker = false,\n  isInput = false,\n\n  allowedDates,\n  autoRange,\n  disabledDates,\n  disabledWeekDays,\n  endDate,\n  filters,\n  flow,\n  maxDate,\n  maxRange,\n  minDate,\n  minRange,\n  startDate,\n  yearRange,\n} = defineProps<DateSelectorProps<TRange>>()\n\nconst emits = defineEmits<{\n  close: []\n}>()\n\nconst date = defineModel<ModelDate<TRange>>({\n  default: null,\n})\n\nfunction handleClose(): void {\n  emits('close')\n}\n</script>\n\n<template>\n  <!-- eslint-disable vue/valid-v-model -->\n  <VueDatePicker\n    v-model=\"(date as any)\"\n\n    :time-picker=\"isTimePicker\"\n    :month-picker=\"isMonthPicker\"\n    :year-picker=\"isYearPicker\"\n    :week-picker=\"isWeekPicker\"\n    :range=\"isRange\"\n    :inline=\"!isInput\"\n\n    :allowed-dates=\"allowedDates\"\n    :auto-range=\"autoRange\"\n    :disabled-dates=\"disabledDates\"\n    :disabled-week-days=\"disabledWeekDays\"\n    :filters=\"filters\"\n    :flow=\"flow\"\n    :enable-time-picker=\"hasTimePicker\"\n    :min-range=\"minRange\"\n    :max-range=\"maxRange\"\n    :min-date=\"minDate\"\n    :max-date=\"maxDate\"\n    :start-date=\"startDate\"\n    :end-date=\"endDate\"\n    :year-range=\"yearRange\"\n    :clearable=\"false\"\n\n    teleport=\"body\"\n    is-24\n    auto-apply\n    no-disabled-range\n    :ignore-time-validation=\"!hasTimePicker\"\n    :hide-input-icon=\"true\"\n\n    :transitions=\"{\n      // @ts-expect-error - This works but the library typing is wrong\n      menuAppearTop: 'popover',\n      menuAppearBottom: 'popover',\n    }\"\n    @closed=\"handleClose\"\n  >\n    <template\n      #dp-input=\"{\n        value,\n        onInput,\n        onEnter,\n        onTab,\n        onBlur,\n        onKeypress,\n        onPaste,\n        onClear,\n        isMenuOpen,\n      }\"\n    >\n      <slot\n        name=\"input\"\n        :value=\"value\"\n        :on-input=\"onInput\"\n        :on-enter=\"onEnter\"\n        :on-tab=\"onTab\"\n        :on-blur=\"onBlur\"\n        :on-keypress=\"onKeypress\"\n        :on-paste=\"onPaste\"\n        :on-clear=\"onClear\"\n        :is-menu-open=\"isMenuOpen\"\n      />\n    </template>\n    <template #calendar-icon>\n      <AppIcon icon=\"calendar\" />\n    </template>\n    <template #input-icon>\n      <AppIcon icon=\"calendar\" />\n    </template>\n    <template #clear-icon>\n      <AppIcon icon=\"close\" />\n    </template>\n    <template #arrow-left>\n      <AppIcon icon=\"chevronLeft\" />\n    </template>\n    <template #arrow-right>\n      <AppIcon icon=\"chevronRight\" />\n    </template>\n    <template #arrow-up>\n      <AppIcon icon=\"chevronUp\" />\n    </template>\n    <template #arrow-down>\n      <AppIcon icon=\"chevronDown\" />\n    </template>\n    <template #clock-icon>\n      <AppIcon icon=\"clock\" />\n    </template>\n  </VueDatePicker>\n</template>\n\n<style lang=\"scss\">\n.dp__arrow_top {\n  @apply hidden;\n}\n\n.dp__menu {\n  @apply rounded-card border-border bg-popover text-popover-foreground;\n}\n\n.dp__calendar_item {\n  @apply rounded-button;\n}\n\n.dp__cell_inner {\n  @apply rounded-button hover:bg-neutral-100;\n}\n\n.dp__active_date, .dp__overlay_cell_active, .dp__range_start, .dp__range_end {\n  @apply bg-primary text-primary-foreground hover:bg-primary;\n}\n\n.dp__range_between {\n  @apply bg-primary/20 text-black rounded-button;\n}\n\n.dp__today {\n  @apply border-primary;\n}\n\n.dp__btn, .dp__inner_nav {\n  @apply hover:bg-neutral-100 text-black rounded-button;\n}\n\n.dp__cell_offset {\n  @apply hover:bg-neutral-100 text-neutral-300;\n}\n\n.dp__overlay {\n  @apply rounded-card border-border bg-popover text-popover-foreground;\n}\n</style>\n"
      },
      {
        "name": "AppFormDatePicker.vue",
        "dir": "./src/components/datepicker",
        "placementDir": "datepicker",
        "type": "components",
        "content": "<script setup lang=\"ts\" generic=\"TInputType extends InputType, TRange extends boolean = false\">\nimport { useAttrs } from 'vue'\nimport type { DateSelectorProps, ModelDate } from '@/types/datePicker.type'\nimport AppDateSelector from '@/components/datepicker/AppDateSelector.vue'\nimport { fadeTransition } from '@/transitions'\nimport AppIcon from '@/components/icon/AppIcon.vue'\nimport type { InputFormProps, InputType } from '@/types/input.type'\nimport { useFormInput } from '@/composables/form/useFormInput'\nimport AppInput from '@/components/input/AppInput.vue'\nimport AppFormLabel from '@/components/form-label/AppFormLabel.vue'\nimport AppText from '@/components/text/AppText.vue'\nimport AppFormError from '@/components/form-error/AppFormError.vue'\n\nexport type DateProps<TRange extends boolean> = Omit<DateSelectorProps<TRange>, 'isInput'>\ntype Props = DateProps<TRange> & Omit<InputFormProps<TInputType>, 'onBlur'>\nconst {\n  hasTimePicker = false,\n  isMonthPicker = false,\n  isRange = false,\n  isTimePicker = false,\n  isWeekPicker = false,\n  isYearPicker = false,\n\n  allowedDates,\n  autoRange,\n  disabledDates,\n  disabledWeekDays,\n  endDate,\n  filters,\n  flow,\n  maxDate,\n  maxRange,\n  minDate,\n  minRange,\n  startDate,\n  yearRange,\n\n  errors = null,\n  label = null,\n  description = null,\n  isRequired = false,\n  isTouched,\n  type,\n\n} = defineProps<Props>()\n\nconst emits = defineEmits<{\n  blur: []\n}>()\nconst attrs = useAttrs()\n\nconst date = defineModel<ModelDate<TRange>>({\n  default: null,\n})\n\nconst { id, isInvalid } = useFormInput({\n  isTouched: () => isTouched,\n  errors: () => errors,\n  type: type ?? 'text',\n  value: date,\n})\n\nfunction handleBlur(isOpen: boolean): void {\n  if (!isOpen)\n    emits('blur')\n}\n\nfunction handleClose(): void {\n  emits('blur')\n}\n</script>\n\n<template>\n  <div class=\"w-full\" :class=\"attrs.class\">\n    <AppFormLabel\n      v-if=\"label !== null\"\n      :id=\"id\"\n      :is-disabled=\"isDisabled ?? false\"\n      :is-invalid=\"isInvalid\"\n      :is-required=\"isRequired\"\n      :label=\"label\"\n    />\n    <!-- eslint-disable vue/valid-v-model -->\n    <AppDateSelector\n      v-model=\"(date as any)\"\n      :has-time-picker=\"hasTimePicker\"\n      :is-month-picker=\"isMonthPicker\"\n      :is-range=\"isRange\"\n      :is-time-picker=\"isTimePicker\"\n      :is-week-picker=\"isWeekPicker\"\n      :is-year-picker=\"isYearPicker\"\n\n      :allowed-dates=\"allowedDates\"\n      :auto-range=\"autoRange\"\n      :disabled-dates=\"disabledDates\"\n      :disabled-week-days=\"disabledWeekDays\"\n      :end-date=\"endDate\"\n      :filters=\"filters\"\n      :flow=\"flow\"\n      :max-date=\"maxDate\"\n      :max-range=\"maxRange\"\n      :min-date=\"minDate\"\n      :min-range=\"minRange\"\n      :start-date=\"startDate\"\n      :year-range=\"yearRange\"\n\n      is-input\n      @close=\"handleClose\"\n    >\n      <template\n        #input=\"{\n          value,\n          onInput,\n          onEnter,\n          onTab,\n          onKeypress,\n          onPaste,\n          onClear,\n          isMenuOpen,\n        }\"\n      >\n        <AppInput\n          v-bind=\"{\n            ...attrs,\n            onBlur: undefined,\n          }\"\n\n          icon-left=\"calendar\"\n          :model-value=\"value\"\n          :is-invalid=\"isInvalid\"\n          is-readonly\n          :is-outside-focused=\"isMenuOpen\"\n          type=\"text\"\n          @input=\"onInput\"\n          @keydown.enter=\"onEnter\"\n          @keydown.tab=\"onTab\"\n          @keypress=\"onKeypress\"\n          @paste=\"onPaste\"\n          @blur=\"handleBlur(isMenuOpen)\"\n        >\n          <template #right>\n            <Transition v-bind=\"fadeTransition\">\n              <button v-if=\"value\">\n                <AppIcon icon=\"close\" class=\"h-4 px-2\" @click.stop=\"onClear\" />\n              </button>\n            </Transition>\n          </template>\n        </AppInput>\n      </template>\n    </AppDateSelector>\n    <AppText\n      v-if=\"description !== null\"\n      class=\"mt-1\"\n      variant=\"caption\"\n    >\n      {{ description }}\n    </AppText>\n\n    <AppFormError\n      :errors=\"errors\"\n      :is-touched=\"isTouched\"\n    />\n  </div>\n</template>\n"
      },
      {
        "name": "datePicker.type.ts",
        "dir": "./src/types",
        "placementDir": "",
        "type": "types",
        "content": "import type { VueDatePickerProps } from '@vuepic/vue-datepicker'\n\nexport interface DateSelectorProps<TRange extends boolean> {\n  /**\n   * If the date picker is a range.\n   */\n  isRange?: TRange\n  /**\n   * If the date picker is a time picker.\n   */\n  isTimePicker?: boolean\n  /**\n   * If the date picker is a month picker.\n   */\n  isMonthPicker?: boolean\n  /**\n   * If the date picker is a year picker.\n   */\n  isYearPicker?: boolean\n  /**\n   * If the date picker is a week picker.\n   */\n  isWeekPicker?: boolean\n  /**\n   * If the date picker has a timepicker.\n   */\n  hasTimePicker?: boolean\n  /**\n   * If the date picker is an input.\n   */\n  isInput?: boolean\n\n  /**\n   * The minimum range of the date picker.\n   */\n  minRange?: number\n  /**\n   * The maximum range of the date picker.\n   */\n  maxRange?: number\n  /**\n   * The minimum date of the date picker.\n   */\n  autoRange?: number\n  /**\n   * The maximum date of the date picker.\n   */\n  minDate?: Date\n  /**\n   * The maximum date of the date picker.\n   */\n  maxDate?: Date\n  /**\n   * The flow of the date picker, it will ask information in order.\n   */\n  flow?: ('month' | 'year' | 'calendar' | 'time' | 'minutes' | 'hours' | 'seconds')[]\n  /**\n   * The start date of the date picker.\n   */\n  startDate?: Date\n  /**\n   * The end date of the date picker.\n   */\n  endDate?: Date\n  /**\n   * The filters of the date picker.\n   */\n  filters?: VueDatePickerProps['filters']\n  /**\n   * The year range of the date picker.\n   */\n  yearRange?: [number, number]\n  /**\n   * The allowed dates of the date picker.\n   */\n  allowedDates?: Date[]\n  /**\n   * The disabled dates of the date picker.\n   */\n  disabledDates?: Date[]\n  /**\n   * The disabled week days of the date picker.\n   */\n  disabledWeekDays?: number[]\n}\n\n/**\n * The type of the date picker, [Date, Date] if range, Date if not.\n */\nexport type ModelDate<TRange> = TRange extends true ? [Date | null, Date | null] : Date | null\n"
      }
    ],
    "internalDependencies": [
      "AppInput",
      "AppText"
    ],
    "dependencies": [
      "@vuepic/vue-datepicker"
    ]
  },
  {
    "component": "TransitionHeight",
    "name": "AppHeightTransition",
    "files": [
      {
        "name": "AppHeightTransition.vue",
        "dir": "./src/components/transitions",
        "placementDir": "transitions",
        "type": "components",
        "content": "<script lang=\"ts\" setup>\nimport { computed } from 'vue'\n\ninterface Props {\n  /**\n   * The duration of the transition in seconds.\n   */\n  duration?: number\n}\n\nconst props = withDefaults(defineProps<Props>(), {\n  duration: 0.5,\n})\n\nconst durationString = computed(() => `${props.duration}s`)\n\nfunction enter(element: Element): void {\n  const htmlElement: HTMLElement = element as HTMLElement\n  const width = getComputedStyle(htmlElement).width\n\n  htmlElement.style.width = width\n  htmlElement.style.position = 'absolute'\n  htmlElement.style.visibility = 'hidden'\n  htmlElement.style.height = 'auto'\n\n  const height = getComputedStyle(htmlElement).height\n\n  htmlElement.style.width = ''\n  htmlElement.style.position = ''\n  htmlElement.style.visibility = ''\n  htmlElement.style.height = ''\n\n  getComputedStyle(htmlElement)\n\n  requestAnimationFrame(() => {\n    htmlElement.style.height = height\n  })\n}\n\nfunction afterEnter(element: Element): void {\n  const htmlElement: HTMLElement = element as HTMLElement\n  htmlElement.style.height = 'auto'\n}\n\nfunction leave(element: Element): void {\n  const htmlElement: HTMLElement = element as HTMLElement\n  const height = getComputedStyle(htmlElement).height\n\n  htmlElement.style.height = height\n  getComputedStyle(htmlElement)\n\n  requestAnimationFrame(() => {\n    htmlElement.style.height = '0'\n  })\n}\n</script>\n\n<template>\n  <transition\n    name=\"expand\"\n    @after-enter=\"afterEnter\"\n    @enter=\"enter\"\n    @leave=\"leave\"\n  >\n    <slot />\n  </transition>\n</template>\n\n<style scoped>\n.expand-enter-active,\n.expand-leave-active {\n  transition: height v-bind(durationString) cubic-bezier(0.645, 0.045, 0.355, 1), opacity v-bind(durationString);\n  overflow: hidden;\n}\n\n.expand-enter-from,\n.expand-leave-to {\n  opacity: 0;\n  height: 0;\n}\n\n* {\n  will-change: height;\n  transform: translateZ(0);\n  backface-visibility: hidden;\n}\n</style>\n"
      }
    ]
  },
  {
    "component": "AppInput",
    "name": "AppInput",
    "files": [
      {
        "name": "AppInput.vue",
        "dir": "./src/components/input",
        "placementDir": "input",
        "type": "components",
        "content": "<!-- eslint-disable-next-line vue/max-len -->\n<script setup lang=\"ts\" generic=\"T extends InputType\">\nimport { computed, ref, useAttrs } from 'vue'\n\nimport { input, inputIcon, inputWrapper } from './appInput.style'\nimport type { InputProps, InputType, InputValue } from '@/types/input.type'\nimport AppIcon from '@/components/icon/AppIcon.vue'\n\nconst props = withDefaults(defineProps<InputProps<T>>(), {\n  // @ts-expect-error Yet another vue ts error\n  type: 'text',\n  isOutsideFocused: false,\n  isDisabled: false,\n  isInvalid: false,\n  isCompact: false,\n  isReadonly: false,\n  iconLeft: null,\n  iconRight: null,\n})\n\nconst value = defineModel<InputValue<T>>({\n  required: true,\n})\n\nconst computedValue = computed<InputValue<T>>({\n  get: () => value.value,\n  set: (newValue: InputValue<T>) => {\n    const { type } = props\n\n    if (type === 'number')\n      value.value = (newValue === '' ? '' : Number(newValue)) as InputValue<T>\n    else value.value = newValue\n  },\n})\n\nconst isFocused = ref<boolean>(false)\n\nconst attrs = useAttrs()\n\nconst inputWrapperClasses = computed<string>(() => {\n  const { isDisabled, isInvalid, isCompact } = props\n\n  return inputWrapper({\n    isDisabled,\n    isInvalid,\n    isCompact,\n    isFocused: isFocused.value || props.isOutsideFocused,\n    class: attrs.class as string,\n  })\n})\n\nconst inputClasses = computed<string>(() => input({ isReadonly: props.isReadonly }))\n\nconst inputIconClasses = computed<string>(() => {\n  const { isInvalid } = props\n\n  return inputIcon({\n    isInvalid,\n  })\n})\n\nconst inputAttrs = computed<Record<string, unknown>>(() => ({\n  ...props,\n  ...attrs,\n  class: undefined,\n}))\n\nfunction onFocus(): void {\n  isFocused.value = true\n}\n\nfunction onBlur(): void {\n  isFocused.value = false\n}\n</script>\n\n<template>\n  <div :class=\"inputWrapperClasses\">\n    <slot name=\"left\">\n      <AppIcon\n        v-if=\"iconLeft !== null\"\n        class=\"ml-3\"\n        :class=\"inputIconClasses\"\n        :icon=\"iconLeft\"\n      />\n    </slot>\n\n    <input\n      v-model=\"computedValue\"\n      v-bind=\"inputAttrs\"\n      :class=\"inputClasses\"\n      :readonly=\"isReadonly\"\n      :disabled=\"isDisabled\"\n      :type=\"type as string\"\n      @blur=\"onBlur\"\n      @focus=\"onFocus\"\n    >\n\n    <slot name=\"right\">\n      <AppIcon\n        v-if=\"iconRight !== null\"\n        class=\"mr-3\"\n        :class=\"inputIconClasses\"\n        :icon=\"iconRight\"\n      />\n    </slot>\n  </div>\n</template>\n"
      },
      {
        "name": "AppFormInput.vue",
        "dir": "./src/components/input",
        "placementDir": "input",
        "type": "components",
        "content": "<script setup lang=\"ts\" generic=\"TInputType extends InputType\">\nimport { ref, useAttrs } from 'vue'\nimport type { InputFormProps, InputType, InputValue } from '@/types/input.type'\nimport AppInput from '@/components/input/AppInput.vue'\nimport AppButton from '@/components/button/AppButton.vue'\nimport AppText from '@/components/text/AppText.vue'\nimport AppFormError from '@/components/form-error/AppFormError.vue'\nimport AppFormLabel from '@/components/form-label/AppFormLabel.vue'\nimport { useFormInput } from '@/composables/form/useFormInput'\n\nconst props = withDefaults(defineProps<InputFormProps<TInputType>>(), {\n  errors: null,\n  label: null,\n  description: null,\n  isRequired: false,\n})\n\nconst value = defineModel<InputValue<TInputType>>({\n  required: true,\n})\n\nconst isPasswordVisible = ref<boolean>(false)\n\n/**\n * For some reason, props which are defined in AppInput are parsed as attributes instead of props\n * This is a workaround to get the props from AppInput.\n */\nconst attrs = useAttrs()\n\nconst { computedValue, id, isInvalid, computedType } = useFormInput({\n  isTouched: props.isTouched,\n  errors: props.errors,\n  type: props.type ?? 'text',\n  isPasswordVisible,\n  value,\n})\n\nfunction onTogglePassword(): void {\n  isPasswordVisible.value = !isPasswordVisible.value\n}\n</script>\n\n<template>\n  <div :class=\"attrs.class\">\n    <AppFormLabel\n      v-if=\"label !== null\"\n      :id=\"id\"\n      :is-disabled=\"isDisabled ?? false\"\n      :is-invalid=\"isInvalid\"\n      :is-required=\"isRequired\"\n      :label=\"label\"\n    />\n\n    <AppInput\n      :id=\"id\"\n      v-model=\"computedValue\"\n      v-bind=\"{\n        ...(props as Record<string, unknown>),\n        ...attrs,\n        class: undefined,\n      }\"\n      :is-invalid=\"isInvalid\"\n      :type=\"computedType\"\n    >\n      <template #left>\n        <slot name=\"left\" />\n      </template>\n\n      <template #right>\n        <slot name=\"right\">\n          <AppButton\n            v-if=\"type === 'password'\"\n            class=\"scale-[85%]\"\n            :icon-left=\"isPasswordVisible ? 'eyeSlash' : 'eye'\"\n            size=\"icon\"\n            variant=\"ghost\"\n            @click=\"onTogglePassword\"\n          />\n        </slot>\n      </template>\n    </AppInput>\n\n    <AppText\n      v-if=\"description !== null\"\n      class=\"mt-1\"\n      variant=\"caption\"\n    >\n      {{ description }}\n    </AppText>\n\n    <AppFormError\n      :errors=\"errors\"\n      :is-touched=\"isTouched\"\n    />\n  </div>\n</template>\n"
      },
      {
        "name": "AppFormTextarea.vue",
        "dir": "./src/components/input",
        "placementDir": "input",
        "type": "components",
        "content": "<script setup lang=\"ts\">\nimport { type TextareaHTMLAttributes, useAttrs } from 'vue'\nimport type { z } from 'zod'\n\nimport { computed } from 'vue'\nimport { textarea } from '@/components/input/appTextarea.style'\nimport { generateUuid } from '@/utils/uuid/generateUuid'\nimport AppFormError from '@/components/form-error/AppFormError.vue'\nimport AppFormLabel from '@/components/form-label/AppFormLabel.vue'\n\nexport interface Props extends /* @vue-ignore */ Omit<TextareaHTMLAttributes, 'disabled'> {\n  /**\n   * The error messages associated with the component, if any.\n   * It should be an object with an \"_errors\" property containing an array of strings.\n   */\n  errors?: z.ZodFormattedError<string> | undefined | null\n\n  /**\n   * The label to be displayed above the component.\n   */\n  label?: string | null\n\n  /**\n   * Determines if the component has emitted a `blur` event.\n   */\n  isTouched: boolean\n\n  /**\n   * Determines if the input is required.\n   */\n  isRequired?: boolean\n\n  /**\n   * Whether the input is disabled or not.\n   * If true, the input is disabled and cannot be focused.\n   */\n  isDisabled?: boolean\n\n  /**\n   * The resize property specifies whether or not an element is resizable by the user.\n   * It can be set to none, both, horizontal or vertical:\n   */\n  resize?: 'none' | 'vertical' | 'horizontal' | 'both' | 'block' | 'inline'\n\n  /**\n   * The tailwind class to be applied to the textarea.\n   */\n  heightClass?: string\n}\n\nconst props = withDefaults(defineProps<Props>(), {\n  label: null,\n  isDisabled: false,\n  isRequired: false,\n  resize: 'none',\n})\n\nconst value = defineModel<string | undefined>({\n  required: true,\n})\n\nconst id = `app-form-input-${generateUuid()}`\nconst attrs = useAttrs()\n\nconst isInvalid = computed<boolean>(() => {\n  const { errors, isTouched } = props\n\n  return isTouched && errors != null\n})\n\nconst textareaAttrs = computed<Record<string, unknown>>(() => ({\n  ...props,\n  ...attrs,\n  class: undefined,\n}))\n\nconst textareaClasses = computed<string>(() => {\n  const { isDisabled } = props\n\n  return textarea({\n    isDisabled,\n    isInvalid: isInvalid.value,\n  })\n})\n</script>\n\n<template>\n  <div>\n    <AppFormLabel\n      v-if=\"label !== null\"\n      :id=\"id\"\n      :is-disabled=\"isDisabled ?? false\"\n      :is-invalid=\"isInvalid\"\n      :is-required=\"isRequired\"\n      :label=\"label\"\n    />\n\n    <textarea\n      v-model=\"value\"\n      v-bind=\"textareaAttrs\"\n      :class=\"[\n        textareaClasses,\n        heightClass,\n        {\n          'resize-none': resize === 'none',\n          'resize-vertical': resize === 'vertical',\n          'resize-horizontal': resize === 'horizontal',\n          'resize-both': resize === 'both',\n        },\n      ]\"\n      :disabled=\"isDisabled\"\n    />\n\n    <AppFormError\n      :errors=\"errors\"\n      :is-touched=\"isTouched\"\n    />\n  </div>\n</template>\n"
      },
      {
        "name": "appInput.style.ts",
        "dir": "./src/components/input",
        "placementDir": "input",
        "type": "components",
        "content": "import { cva } from '@/utils/tailwind/cva'\n\nexport const inputWrapper = cva({\n  base: 'relative flex w-full items-center rounded-input border border-solid border-input-border bg-background shadow-input-shadow ring-offset-background duration-100',\n  variants: {\n    isDisabled: {\n      true: 'cursor-not-allowed bg-input-disabled opacity-50',\n    },\n    isFocused: {\n      true: 'border-primary ring-2 ring-primary ring-offset-2',\n    },\n    isInvalid: {\n      true: 'border-destructive text-destructive ring-destructive',\n    },\n    isCompact: {\n      true: 'h-8',\n      false: 'h-10',\n    },\n  },\n  defaultVariants: {\n    isCompact: false,\n  },\n})\n\nexport const input = cva({\n  base: 'h-full w-full truncate bg-transparent px-3 py-2 text-subtext text-input-foreground outline-none placeholder:text-input-foreground/50 placeholder:transition-all placeholder:duration-300 focus:placeholder:translate-x-1 focus:placeholder:opacity-0 disabled:cursor-not-allowed',\n  variants: {\n    isReadonly: {\n      true: 'focus:placeholder:translate-x-0 focus:placeholder:opacity-100',\n    },\n    isSelect: {\n      true: 'focus:placeholder:translate-x-0 focus:placeholder:opacity-100',\n    },\n  },\n})\n\nexport const inputIcon = cva({\n  base: 'h-3.5 w-3.5 text-input-foreground',\n  variants: {\n    isInvalid: {\n      true: 'text-destructive',\n    },\n  },\n})\n"
      },
      {
        "name": "appTextarea.style.ts",
        "dir": "./src/components/input",
        "placementDir": "input",
        "type": "components",
        "content": "import { cva } from '@/utils/tailwind/cva'\n\nexport const textarea = cva({\n  base: 'w-full rounded-input border border-solid border-input-border bg-background p-3 text-subtext text-input-foreground shadow-input-shadow ring-offset-background transition duration-100 focus-visible:border-primary focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-primary focus-visible:ring-offset-2 disabled:cursor-not-allowed',\n  variants: {\n    isDisabled: {\n      true: 'bg-input-disabled opacity-50',\n    },\n    isInvalid: {\n      true: '!border-destructive text-destructive focus-visible:ring-destructive',\n    },\n  },\n})\n"
      },
      {
        "name": "useFormInput.ts",
        "dir": "./src/composables/form",
        "placementDir": "form",
        "type": "composables",
        "content": "import type { MaybeRefOrGetter, Ref } from 'vue'\nimport { computed, toValue } from 'vue'\nimport type { ZodFormattedError } from 'zod'\nimport type { InputType, InputValue } from '@/types/input.type'\nimport { generateUuid } from '@/utils/uuid/generateUuid'\n\nexport interface UseFormInputProps<TInputType extends InputType> {\n  /**\n   * The error messages associated with the component, if any.\n   * It should be an object with an \"_errors\" property containing an array of strings.\n   */\n  errors?: MaybeRefOrGetter<ZodFormattedError<string> | undefined | null>\n\n  /**\n   * Determines if the component has emitted a `blur` event.\n   */\n  isTouched: MaybeRefOrGetter<boolean>\n\n  /**\n   * The value of the input.\n   */\n  value: Ref<InputValue<TInputType>>\n\n  /**\n   * Whether the input border should be red.\n   */\n  isPasswordVisible?: MaybeRefOrGetter<boolean>\n\n  /**\n   * The type of input for the component. Can be one of:\n   * 'date', 'email', 'number', 'password', 'text', 'time', 'datetime-local'\n   * Defaults to 'text'.\n   */\n  type: MaybeRefOrGetter<TInputType>\n}\n\nexport function useFormInput<TInputType extends InputType>({\n  errors,\n  isTouched,\n  value,\n  type,\n  isPasswordVisible,\n}: UseFormInputProps<TInputType>): {\n    id: string\n    isInvalid: Ref<boolean>\n    computedValue: Ref<InputValue<TInputType>>\n    computedType: Ref<InputType>\n  } {\n  const id = `app-form-date-${generateUuid()}`\n  const isInvalid = computed<boolean>(() => {\n    return toValue(isTouched) && toValue(errors) != null\n  })\n\n  const computedValue = computed<InputValue<TInputType>>({\n    get: () => toValue(value),\n    set: (newValue: InputValue<TInputType>) => {\n      if (toValue(type) === 'number')\n        value.value = (newValue === '' ? '' : Number(newValue)) as InputValue<TInputType>\n      else value.value = newValue\n    },\n  })\n\n  const computedType = computed<InputType>(() => {\n    if (toValue(type) === 'password' && toValue(isPasswordVisible))\n      return 'text'\n\n    return toValue(type) ?? 'text'\n  })\n  return {\n    id,\n    isInvalid,\n    computedValue,\n    computedType,\n  }\n}\n"
      },
      {
        "name": "input.type.ts",
        "dir": "./src/types",
        "placementDir": "",
        "type": "types",
        "content": "import type { ZodFormattedError } from 'zod'\nimport type { InputHTMLAttributes } from 'vue'\nimport type { Icon } from '@/icons'\nimport type { ModelDate } from '@/types/datePicker.type'\n\nexport type InputType =\n  | 'date'\n  | 'datetime-local'\n  | 'email'\n  | 'number'\n  | 'password'\n  | 'text'\n  | 'time'\nexport type InputValue<T> = (T extends 'number' ? number : string) | null | ModelDate<any>\nexport interface InputFormProps<T extends InputType> extends Omit<InputProps<T>, 'isInvalid'> {\n  /**\n   * The error messages associated with the component, if any.\n   * It should be an object with an \"_errors\" property containing an array of strings.\n   */\n  errors?: ZodFormattedError<string> | undefined | null\n\n  /**\n   * The label to be displayed above the component.\n   */\n  label?: string | null\n\n  /**\n   * Extra information to be displayed below the input.\n   */\n  description?: string | null\n\n  /**\n   * Determines if the component has emitted a `blur` event.\n   */\n  isTouched: boolean\n\n  /**\n   * Determines if the input is required.\n   */\n  isRequired?: boolean\n}\n\nexport interface InputProps<T extends InputType>\n  extends /* @vue-ignore */ Omit<InputHTMLAttributes, 'disabled'> {\n  /**\n   * The type of input for the component. Can be one of:\n   * 'date', 'email', 'number', 'password', 'text', 'time', 'datetime-local'\n   * Defaults to 'text'.\n   */\n  type?: T\n\n  /**\n   * Whether the input is disabled or not.\n   * If true, the input is disabled and cannot be focused.\n   */\n  isDisabled?: boolean\n\n  /**\n   * Whether the input border should be red.\n   */\n  isInvalid?: boolean\n\n  /**\n   *  Whether the input is uneditable.\n   */\n  isReadonly?: boolean\n\n  /**\n   * The icon to display on the left side of the input.\n   */\n  iconLeft?: Icon | null\n\n  /**\n   * The icon to display on the right side of the input.\n   */\n  iconRight?: Icon | null\n\n  /**\n   *  Whether the input is compact or not.\n   */\n  isCompact?: boolean\n\n  /**\n   * Whether the input is focussed from the outside (e.g. a dropdown that is open).\n   */\n  isOutsideFocused?: boolean\n}\n"
      }
    ],
    "internalDependencies": [
      "AppFormError",
      "AppButton",
      "AppFormLabel",
      "AppText"
    ]
  },
  {
    "component": "AppSelect",
    "name": "AppSelect",
    "files": [
      {
        "name": "AppFormSelect.vue",
        "dir": "./src/components/select",
        "placementDir": "select",
        "type": "components",
        "content": "<script setup lang=\"ts\" generic=\"T\">\nimport type { z } from 'zod'\nimport { computed, useAttrs } from 'vue'\nimport type { AppSelectProps } from '@/components/select/AppSelect.vue'\nimport { generateUuid } from '@/utils/uuid/generateUuid'\nimport AppFormLabel from '@/components/form-label/AppFormLabel.vue'\nimport AppSelect from '@/components/select/AppSelect.vue'\nimport AppText from '@/components/text/AppText.vue'\nimport AppFormError from '@/components/form-error/AppFormError.vue'\n\ninterface AppFormSelectProps extends AppSelectProps<T> {\n  /**\n   * The error messages associated with the component, if any.\n   * It should be an object with an \"_errors\" property containing an array of strings.\n   */\n  errors?: z.ZodFormattedError<string> | undefined | null\n\n  /**\n   * The label to be displayed above the component.\n   */\n  label?: string | null\n\n  /**\n   * Extra information to be displayed below the input.\n   */\n  description?: string | null\n\n  /**\n   * Determines if the component has emitted a `blur` event.\n   */\n  isTouched: boolean\n\n  /**\n   * Determines if the input is required.\n   */\n  isRequired?: boolean\n}\n\nconst {\n  errors = null,\n  label = null,\n  description = null,\n  isRequired = false,\n  items,\n  displayFunction,\n  isDisabled,\n  isTouched,\n  keyValue,\n} = defineProps<AppFormSelectProps>()\n\nconst emits = defineEmits<{\n  blur: []\n}>()\n\nconst value = defineModel<T | T[]>({\n  required: true,\n})\n\nconst id = `app-form-select-${generateUuid()}`\n\n/**\n * For some reason, props which are defined in AppInput are parsed as attributes instead of props\n * This is a workaround to get the props from AppInput.\n */\nconst attrs = useAttrs()\n\nfunction onHide(): void {\n  emits('blur')\n}\n\nconst isInvalid = computed<boolean>(() => {\n  return isTouched && errors != null\n})\n</script>\n\n<template>\n  <div :class=\"attrs.class\">\n    <AppFormLabel\n      v-if=\"label !== null\"\n      :id=\"id\"\n      :is-disabled=\"isDisabled ?? false\"\n      :is-required=\"isRequired\"\n      :label=\"label\"\n    />\n\n    <AppSelect\n      :id=\"id\"\n      v-model=\"value\"\n      :items=\"items\"\n      :placeholder=\"placeholder\"\n      :is-filterable=\"isFilterable\"\n      :key-value=\"(keyValue as keyof T)\"\n      :is-disabled=\"isDisabled\"\n      :display-function=\"displayFunction\"\n      :is-touched=\"isTouched\"\n      :is-invalid=\"isInvalid\"\n      v-bind=\"{\n        ...attrs,\n        class: undefined,\n      }\"\n      @hide=\"onHide\"\n    />\n\n    <AppText\n      v-if=\"description !== null\"\n      class=\"mt-1\"\n      variant=\"caption\"\n    >\n      {{ description }}\n    </AppText>\n\n    <AppFormError\n      :errors=\"errors\"\n      :is-touched=\"isTouched\"\n    />\n  </div>\n</template>\n"
      },
      {
        "name": "AppSelect.vue",
        "dir": "./src/components/select",
        "placementDir": "select",
        "type": "components",
        "content": "<script setup lang=\"ts\" generic=\"T\">\nimport AppSelectContainer from '@/components/select/AppSelectContainer.vue'\nimport AppSelectInput from '@/components/select/AppSelectInput.vue'\nimport AppSelectOption from '@/components/select/AppSelectOption.vue'\nimport AppSelectOptions from '@/components/select/AppSelectOptions.vue'\n\nexport interface AppSelectProps<T> {\n  /**\n   * Function that determines the output of an item.\n   */\n  displayFunction?: (value: T) => string\n\n  /**\n   * Key of the value for comparing.\n   */\n  keyValue?: keyof T\n\n  /**\n   * List of possible items.\n   */\n  items: T[]\n\n  /**\n   * Determines if the select is disabled.\n   */\n  isDisabled?: boolean\n\n  /**\n   * Placeholder text inside the select.\n   */\n  placeholder?: string\n\n  /**\n   * Determines if you can filter inside the input.\n   */\n  isFilterable?: boolean\n\n  /**\n   * Determines if is invalid or valid.\n   */\n  isInvalid?: boolean\n}\n\nconst {\n  items,\n  displayFunction = (value: T): string => {\n    return String(value)\n  },\n  isFilterable = false,\n  isInvalid = false,\n} = defineProps<AppSelectProps<T>>()\n\nconst emits = defineEmits<{\n  hide: []\n  show: []\n  'update:search': [string]\n}>()\n\nconst model = defineModel<T | T[]>({\n  required: true,\n})\n\nfunction onHide(): void {\n  emits('hide')\n}\n\nfunction onShow(): void {\n  emits('show')\n}\n\nfunction onUpdateSearch(search: string): void {\n  emits('update:search', search)\n}\n</script>\n\n<template>\n  <AppSelectContainer\n    v-slot=\"{ items: slotItems, isOpen }\"\n    v-model=\"model\"\n    :items=\"items\"\n    :is-disabled=\"isDisabled\"\n    :display-function=\"displayFunction\"\n    :is-filterable=\"isFilterable\"\n    :is-invalid=\"isInvalid\"\n    @hide=\"onHide\"\n    @show=\"onShow\"\n    @update:search=\"onUpdateSearch\"\n  >\n    <AppSelectInput\n      :placeholder=\"placeholder\"\n      :is-open=\"isOpen\"\n    />\n    <AppSelectOptions\n      v-slot=\"{ item, active, disabled, selected }\"\n      :items=\"slotItems\"\n      :is-open=\"isOpen\"\n    >\n      <slot>\n        <AppSelectOption\n          :value=\"item\"\n          :is-active=\"active\"\n          :is-disabled=\"disabled\"\n          :is-selected=\"selected\"\n        />\n      </slot>\n    </AppSelectOptions>\n  </AppSelectContainer>\n</template>\n"
      },
      {
        "name": "AppSelectContainer.vue",
        "dir": "./src/components/select",
        "placementDir": "select",
        "type": "components",
        "content": "<script setup lang=\"ts\" generic=\"T, TModel extends T[] | T | undefined\">\nimport { computed, ref, watch } from 'vue'\nimport {\n  Combobox,\n  Listbox,\n} from '@headlessui/vue'\nimport { Float } from '@headlessui-float/vue'\nimport { popoverTransition } from '@/transitions'\nimport { useProvideAppSelectContext } from '@/composables/select/useAppSelectContext'\n\nexport interface AppSelectProps<T> {\n  /**\n   * Function that determines the output of an item.\n   */\n  displayFunction?: (value: T) => string\n\n  /**\n   * Key of the value for comparing.\n   */\n  keyValue?: keyof T\n\n  /**\n   * List of possible items.\n   */\n  items: T[]\n\n  /**\n   * Determines if the select is disabled.\n   */\n  isDisabled?: boolean\n\n  /**\n   * Placeholder text inside the select.\n   */\n  placeholder?: string\n\n  /**\n   * Determines if you can filter inside the input.\n   */\n  isFilterable?: boolean\n\n  /**\n   * Determines if is invalid or valid.\n   */\n  isInvalid?: boolean\n}\n\nconst {\n  items,\n  displayFunction = (value: T): string => {\n    return String(value)\n  },\n  isDisabled = false,\n  isFilterable = false,\n  isInvalid = false,\n} = defineProps<AppSelectProps<T>>()\n\nconst emits = defineEmits<{\n  hide: []\n  show: []\n  'update:search': [string]\n}>()\n\nconst model = defineModel<TModel>('modelValue', { required: true })\nconst isMultiple = computed<boolean>(() => Array.isArray(model.value))\nconst search = ref<string>('')\n\nfunction getDisplayValue(value: T | T[] | undefined): string {\n  if (value == null)\n    return ''\n  else\n    if (Array.isArray(value))\n      return value.map(value => displayFunction(value)).join(', ')\n    else\n      return displayFunction(value)\n}\n\nconst filteredItems = computed(() => {\n  if (!isFilterable)\n    return items\n\n  return items.filter((item) => {\n    return getDisplayValue(item)?.toLowerCase().includes(search.value.toLowerCase())\n  })\n})\n\nuseProvideAppSelectContext({\n  value: model,\n  search,\n  getDisplayValue,\n  isFilterable: computed(() => isFilterable),\n  isInvalid: computed(() => isInvalid),\n  isDisabled: computed(() => isDisabled),\n})\nwatch(search, () => {\n  onSearchChange(search.value)\n})\n\nfunction onSearchChange(search: string): void {\n  emits('update:search', search)\n}\n\nfunction onHide(): void {\n  emits('hide')\n}\n\nfunction onShow(): void {\n  emits('show')\n}\n</script>\n\n<template>\n  <!-- eslint-disable vue/valid-v-model -->\n  <div class=\"text-left\">\n    <Combobox\n      v-if=\"isFilterable\"\n      v-slot=\"{ open }\"\n      v-model=\"(model as any)\"\n      :disabled=\"isDisabled\"\n      immediate\n      :multiple=\"isMultiple\"\n    >\n      <Float\n        placement=\"bottom-start\"\n        adaptive-width\n        :offset=\"4\"\n        flip\n        v-bind=\"popoverTransition\"\n        @hide=\"onHide\"\n        @show=\"onShow\"\n      >\n        <slot :items=\"filteredItems\" :is-open=\"open\" />\n      </Float>\n    </Combobox>\n    <Listbox\n      v-else\n      v-slot=\"{ open }\"\n      v-model=\"(model as any)\"\n      :disabled=\"isDisabled\"\n      immediate\n      :multiple=\"isMultiple\"\n    >\n      <Float\n        placement=\"bottom-start\"\n        adaptive-width\n        :offset=\"4\"\n        flip\n        v-bind=\"popoverTransition\"\n        @hide=\"onHide\"\n        @show=\"onShow\"\n      >\n        <slot :items=\"filteredItems\" :is-open=\"open\" />\n      </Float>\n    </ListBox>\n  </div>\n</template>\n"
      },
      {
        "name": "AppSelectInput.vue",
        "dir": "./src/components/select",
        "placementDir": "select",
        "type": "components",
        "content": "<script setup lang=\"ts\">\nimport { ComboboxButton, ComboboxInput, ListboxButton } from '@headlessui/vue'\nimport { computed, ref } from 'vue'\nimport { useI18n } from 'vue-i18n'\nimport { useAppSelectContext } from '@/composables/select/useAppSelectContext'\nimport AppIcon from '@/components/icon/AppIcon.vue'\nimport { input, inputIcon, inputWrapper } from '@/components/input/appInput.style'\nimport type { Icon } from '@/icons'\n\ninterface Props {\n  /**\n   * Placeholder text inside the select.\n   */\n  placeholder?: string\n\n  /**\n   * The icon to display on the left side of the input.\n   */\n  iconLeft?: Icon\n\n  /**\n   * Determines if the select is open.\n   */\n  isOpen: boolean\n}\nconst { isOpen } = defineProps<Props>()\n\nconst emits = defineEmits<{\n  blur: []\n}>()\n\nconst { t } = useI18n()\n\nconst {\n  getDisplayValue,\n  search,\n  value,\n  isFilterable,\n  isDisabled,\n  isInvalid,\n} = useAppSelectContext()\n\nconst isFocused = ref<boolean>(false)\nconst hasValue = computed<boolean>(() => {\n  if (Array.isArray(value.value))\n    return value.value.length > 0\n  else\n    return value.value !== null && value.value !== undefined && value.value !== ''\n})\n\nfunction handleSearchChange(event: Event): void {\n  search.value = (event.target as HTMLInputElement).value\n}\n\nfunction onFocus(): void {\n  isFocused.value = true\n}\n\nfunction onBlur(): void {\n  isFocused.value = false\n  if (!isOpen)\n    emits('blur')\n}\n</script>\n\n<template>\n  <div\n    v-if=\"isFilterable\"\n  >\n    <div\n      :class=\" inputWrapper({\n        isDisabled,\n        isFocused: isFocused || isOpen,\n        isInvalid,\n      })\n      \"\n    >\n      <slot name=\"left\">\n        <AppIcon\n          v-if=\"iconLeft != null\"\n          class=\"ml-3\"\n          :icon=\"iconLeft\"\n          :class=\"inputIcon()\"\n        />\n      </slot>\n      <ComboboxInput\n        :class=\"input({ isSelect: true })\"\n        :display-value=\"hasValue && !isOpen ? (getDisplayValue as any) : () => undefined\"\n        :placeholder=\"hasValue ? getDisplayValue(value) : (placeholder ?? t('label.select'))\"\n        :disabled=\"isDisabled\"\n        @change=\"handleSearchChange\"\n        @blur=\"onBlur\"\n        @focus=\"onFocus\"\n      />\n      <ComboboxButton\n        v-slot=\"{ open }\"\n        class=\"inset-y-0 right-0 flex items-center pr-2\"\n      >\n        <AppIcon\n          class=\"h-3 w-3 shrink-0 transition-transform duration-200\"\n          :class=\"[{\n            'rotate-180': open,\n          }, inputIcon()]\"\n          icon=\"chevronDown\"\n          aria-hidden=\"true\"\n        />\n      </ComboboxButton>\n    </div>\n  </div>\n  <div v-else>\n    <ListboxButton\n      :class=\"\n        inputWrapper({\n          isFocused: isFocused || isOpen,\n          isDisabled,\n          isInvalid,\n        })\n      \"\n      @blur=\"onBlur\"\n      @focus=\"onFocus\"\n    >\n      <slot name=\"left\">\n        <AppIcon\n          v-if=\"iconLeft != null\"\n          class=\"ml-3\"\n          :icon=\"iconLeft\"\n          :class=\"inputIcon()\"\n        />\n      </slot>\n\n      <div\n        class=\"flex w-full items-center justify-between\"\n        :class=\"input({ isSelect: true })\"\n      >\n        <span class=\"truncate\">\n          <template v-if=\"hasValue\">\n            {{ getDisplayValue(value) }}\n          </template>\n\n          <span\n            v-else-if=\"placeholder != null\"\n            class=\"text-input-foreground/50\"\n          >\n            {{ placeholder }}\n          </span>\n        </span>\n      </div>\n      <div class=\"inset-y-0 right-0 flex items-center pr-2\">\n        <AppIcon\n          class=\"h-3 w-3 shrink-0 transition-transform duration-200\"\n          icon=\"chevronDown\"\n          :class=\"[{\n            'rotate-180': isOpen,\n          }, inputIcon()]\"\n          aria-hidden=\"true\"\n        />\n      </div>\n    </ListboxButton>\n  </div>\n</template>\n"
      },
      {
        "name": "AppSelectOption.vue",
        "dir": "./src/components/select",
        "placementDir": "select",
        "type": "components",
        "content": "<script setup lang=\"ts\" generic=\"T\">\nimport { computed } from 'vue'\nimport { appSelectOptionVariants } from '@/components/select/appSelect.style'\nimport type { AppSelectOptionProps } from '@/components/select/appSelect.style'\nimport { useAppSelectContext } from '@/composables/select/useAppSelectContext'\n\ninterface Props {\n  /**\n   * The value of the option.\n   */\n  value: T\n\n  /**\n   * Determines if the option is active.\n   */\n  isActive?: boolean\n\n  /**\n   * Determines if the option is selected.\n   */\n  isSelected?: boolean\n\n  /**\n   * Determines if the option is disabled.\n   */\n  isDisabled?: boolean\n}\n\nconst {\n  value,\n  isActive = false,\n  isSelected = false,\n  isDisabled = false,\n} = defineProps<Props>()\n\nconst optionStatus = computed<AppSelectOptionProps['variant']>(() => {\n  if (isDisabled)\n    return 'disabled'\n  else\n    return 'default'\n})\n\nconst { getDisplayValue } = useAppSelectContext()\n</script>\n\n<template>\n  <button :class=\"appSelectOptionVariants({ variant: optionStatus, selected: isSelected, active: isActive })\">\n    {{ getDisplayValue(value) }}\n  </button>\n</template>\n"
      },
      {
        "name": "AppSelectOptions.vue",
        "dir": "./src/components/select",
        "placementDir": "select",
        "type": "components",
        "content": "<script setup lang=\"ts\" generic=\"T\">\nimport {\n  ComboboxOption,\n  ComboboxOptions,\n  ListboxOption,\n  ListboxOptions,\n} from '@headlessui/vue'\nimport AppHeightTransition from '@/components/transitions/AppHeightTransition.vue'\nimport { useAppSelectContext } from '@/composables/select/useAppSelectContext'\n\ninterface Props {\n  /**\n   * List of possible items.\n   */\n  items: T[]\n\n  /**\n   * Determines if the select is open.\n   */\n  isOpen: boolean\n}\ndefineProps<Props>()\n\nconst {\n  isFilterable,\n} = useAppSelectContext<T>()\n</script>\n\n<template>\n  <ComboboxOptions v-if=\"isFilterable\" class=\"rounded bg-popover p-2\">\n    <AppHeightTransition>\n      <div>\n        <ComboboxOption\n          v-for=\"(item, index) in items\" v-slot=\"{ active, selected, disabled }\" :key=\"index\"\n          :value=\"(item as any)\"\n        >\n          <slot :item=\"item\" :active=\"active\" :selected=\"selected\" :disabled=\"disabled\" :is-open=\"isOpen\" />\n        </ComboboxOption>\n      </div>\n    </AppHeightTransition>\n  </ComboboxOptions>\n  <ListboxOptions v-else class=\"rounded bg-popover p-2\">\n    <AppHeightTransition>\n      <div class=\"flex flex-col gap-1\">\n        <ListboxOption\n          v-for=\"(item, index) in items\" v-slot=\"{ active, selected, disabled }\" :key=\"index\"\n          :value=\"(item as any)\"\n        >\n          <slot :item=\"item\" :active=\"active\" :selected=\"selected\" :disabled=\"disabled\" :is-open=\"isOpen\" />\n        </ListboxOption>\n      </div>\n    </AppHeightTransition>\n  </ListboxOptions>\n</template>\n"
      },
      {
        "name": "appSelect.style.ts",
        "dir": "./src/components/select",
        "placementDir": "select",
        "type": "components",
        "content": "import type { VariantProps } from '@/utils/tailwind/cva'\nimport { cva } from '@/utils/tailwind/cva'\n\nexport const variantOptions = {\n  default: 'bg-popover text-popover-foreground',\n  disabled: 'bg-destructive text-destructive-foreground hover:bg-destructive/90 shadow-focus-destructive',\n}\n\nexport const active = {\n  true: 'bg-secondary text-secondary-foreground bg-secondary/80',\n}\n\nexport const selected = {\n  true: 'text-primary underline-offset-4 underline hover:bg-secondary/80',\n}\n\nexport const appSelectOptionVariants = cva(\n  {\n    base: 'flex w-full gap-2 rounded border border-transparent bg-white px-2 py-1 text-left text-black transition-all',\n    variants: {\n      variant: variantOptions,\n      active,\n      selected,\n    },\n    defaultVariants: {\n      variant: 'default',\n    },\n  },\n)\n\nexport type AppSelectOptionProps = VariantProps<typeof appSelectOptionVariants>\nexport const AppSelectOptionVariantOptions = Object.keys(variantOptions)\n"
      },
      {
        "name": "useAppSelectContext.ts",
        "dir": "./src/composables/select",
        "placementDir": "select",
        "type": "composables",
        "content": "import { inject, provide } from 'vue'\nimport type { ComputedRef, InjectionKey, Ref } from 'vue'\n\nexport interface AppSelectContext<T> {\n  getDisplayValue: (value: T) => string\n  value: Ref<T>\n  search: Ref<string>\n  isFilterable: ComputedRef<boolean>\n  isInvalid: ComputedRef<boolean>\n  isDisabled: ComputedRef<boolean>\n}\n\nexport const appSelectContext = Symbol('AppSelectContext') as InjectionKey<AppSelectContext<any>>\n\nexport function useAppSelectContext<T>(): AppSelectContext<T> {\n  const context = inject(appSelectContext, null)\n  if (!context)\n    throw new Error('AppSelectContext not provided')\n\n  return context\n}\n\nexport function useProvideAppSelectContext<T>(context: AppSelectContext<T>): void {\n  provide(appSelectContext, context)\n}\n"
      },
      {
        "name": "appInput.style.ts",
        "dir": "./src/components/input",
        "placementDir": "input",
        "type": "components",
        "content": "import { cva } from '@/utils/tailwind/cva'\n\nexport const inputWrapper = cva({\n  base: 'relative flex w-full items-center rounded-input border border-solid border-input-border bg-background shadow-input-shadow ring-offset-background duration-100',\n  variants: {\n    isDisabled: {\n      true: 'cursor-not-allowed bg-input-disabled opacity-50',\n    },\n    isFocused: {\n      true: 'border-primary ring-2 ring-primary ring-offset-2',\n    },\n    isInvalid: {\n      true: 'border-destructive text-destructive ring-destructive',\n    },\n    isCompact: {\n      true: 'h-8',\n      false: 'h-10',\n    },\n  },\n  defaultVariants: {\n    isCompact: false,\n  },\n})\n\nexport const input = cva({\n  base: 'h-full w-full truncate bg-transparent px-3 py-2 text-subtext text-input-foreground outline-none placeholder:text-input-foreground/50 placeholder:transition-all placeholder:duration-300 focus:placeholder:translate-x-1 focus:placeholder:opacity-0 disabled:cursor-not-allowed',\n  variants: {\n    isReadonly: {\n      true: 'focus:placeholder:translate-x-0 focus:placeholder:opacity-100',\n    },\n    isSelect: {\n      true: 'focus:placeholder:translate-x-0 focus:placeholder:opacity-100',\n    },\n  },\n})\n\nexport const inputIcon = cva({\n  base: 'h-3.5 w-3.5 text-input-foreground',\n  variants: {\n    isInvalid: {\n      true: 'text-destructive',\n    },\n  },\n})\n"
      }
    ],
    "dependencies": [
      "@headlessui/vue",
      "@headlessui-float/vue"
    ],
    "internalDependencies": [
      "AppFormError",
      "AppText",
      "AppFormLabel"
    ]
  },
  {
    "component": "AppButton",
    "name": "Button",
    "files": [
      {
        "name": "AppButton.vue",
        "dir": "./src/components/button",
        "placementDir": "button",
        "type": "components",
        "content": "<script setup lang=\"ts\">\nimport type { ButtonHTMLAttributes } from 'vue'\nimport type { RouteLocationRaw, RouteRecordRaw } from 'vue-router'\nimport { RouterLink } from 'vue-router'\nimport { computed, useAttrs } from 'vue'\n\nimport type { ButtonProps } from '@/components/button/appButton.style'\nimport { button } from '@/components/button/appButton.style'\nimport type { Icon } from '@/icons'\nimport AppButtonIconOrLoader from '@/components/button/AppButtonIconOrLoader.vue'\nimport AppLoader from '@/components/loader/AppLoader.vue'\n\nexport interface Props extends /* @vue-ignore */ ButtonHTMLAttributes {\n  /**\n   * Whether the button is disabled or not.\n   * If true, the button is disabled and cannot be clicked.\n   */\n  isDisabled?: boolean\n\n  /**\n   * Whether to show a loading indicator and disable the button.\n   * If true, the button is disabled and a loading indicator is displayed.\n   */\n  isLoading?: boolean\n\n  /**\n   * Determines the visual style of the button. Available options are:\n   * Values are 'default', 'secondary', 'outline', 'ghost', 'destructive', 'success', 'warning'\n   */\n  variant?: ButtonProps['variant']\n\n  /**\n   * Determines the size of the button. Available options are:\n   * Values are 'default', 'sm', 'lg'\n   */\n  size?: ButtonProps['size']\n\n  /**\n   * Specifies the icon to display on the left side of the button.\n   */\n  iconLeft?: Icon | null\n\n  /**\n   * Specifies the icon to display on the right side of the button.\n   */\n  iconRight?: Icon | null\n\n  /**\n   * The route to navigate to when the button is clicked.\n   * If defined, renders a `<RouterLink>` element instead of an `<a>` element.\n   */\n  to?: RouteRecordRaw | null\n\n  /**\n   * The URL to navigate to when the button is clicked.\n   * If defined, renders an `<a>` element instead of a `button` element.\n   */\n  href?: string | null\n\n  /**\n   * The type of the native button element. Defaults to 'button'.\n   * Values are 'button', 'reset', and 'submit'.\n   */\n  type?: 'button' | 'reset' | 'submit'\n\n  /**\n   * The tag to use for the button.\n   */\n  as?: string\n}\n\nconst {\n  isDisabled = false,\n  isLoading = false,\n\n  variant = 'default',\n  size = 'default',\n\n  iconLeft = null,\n  iconRight = null,\n\n  to = null,\n  href = null,\n\n  type = 'button',\n  as,\n} = defineProps<Props>()\n\nconst attrs = useAttrs()\n\nconst buttonClasses = computed<string>(() =>\n  button({\n    size,\n    variant,\n    isLoading,\n    class: attrs.class as string,\n  }),\n)\n\nconst componentType = computed<string | typeof RouterLink>(() => {\n  if (as !== undefined)\n    return as\n\n  if (to !== null)\n    return RouterLink\n\n  else if (href !== null)\n    return 'a'\n\n  return 'button'\n})\n\nconst componentProps = computed<Record<string, unknown>>(() => {\n  if (componentType.value === 'a') {\n    return {\n      href: href as string,\n      target: '_blank',\n      rel: 'noopener noreferrer',\n      class: buttonClasses.value,\n    }\n  }\n\n  if (componentType.value === RouterLink) {\n    return {\n      to: to as RouteLocationRaw,\n      class: buttonClasses.value,\n    }\n  }\n\n  return {\n    type,\n    disabled: isDisabled || isLoading,\n    class: buttonClasses.value,\n  }\n})\n</script>\n\n<template>\n  <!-- Not casting `componentProps` to `any` throws a ts error on build -->\n  <Component\n    :is=\"componentType\"\n    v-bind=\"componentProps\"\n  >\n    <AppButtonIconOrLoader\n      v-if=\"iconLeft !== null\"\n      :icon=\"iconLeft\"\n      :is-loading=\"isLoading\"\n      :size=\"size\"\n      :variant=\"variant\"\n    />\n\n    <span\n      class=\"whitespace-nowrap\"\n      :class=\"{\n        'opacity-0': isLoading && iconLeft === null && iconRight === null,\n      }\"\n    >\n      <slot />\n    </span>\n\n    <div\n      v-if=\"isLoading && iconLeft === null && iconRight === null\"\n      class=\"absolute left-1/2 top-1/2 -translate-x-1/2 -translate-y-1/2\"\n    >\n      <AppLoader class=\"h-5 w-5\" />\n    </div>\n\n    <AppButtonIconOrLoader\n      v-if=\"iconRight !== null\"\n      :icon=\"iconRight\"\n      :is-loading=\"isLoading\"\n      :size=\"size\"\n      :variant=\"variant\"\n    />\n  </Component>\n</template>\n"
      },
      {
        "name": "appButton.style.ts",
        "dir": "./src/components/button",
        "placementDir": "button",
        "type": "components",
        "content": "import type { VariantProps } from '@/utils/tailwind/cva'\nimport { cva } from '@/utils/tailwind/cva'\n\nexport const variantOptions = {\n  default: 'bg-primary text-primary-foreground hover:bg-primary/90',\n  destructive: 'bg-destructive text-destructive-foreground hover:bg-destructive/90 shadow-focus-destructive',\n  outline: 'border border-primary hover:bg-secondary text-secondary-foreground',\n  secondary: 'bg-secondary text-secondary-foreground hover:bg-secondary/80',\n  ghost: 'hover:bg-black/5 border-transparent',\n  link: 'text-primary underline-offset-4 hover:underline',\n}\n\nexport const sizeOptions = {\n  icon: 'h-10 p-1 w-10',\n  default: 'h-10 px-4 py-2',\n  sm: 'h-9 rounded px-3',\n  xs: 'h-8 rounded px-2',\n  lg: 'h-11 rounded px-8',\n}\n\nexport const button = cva({\n  base: 'relative inline-flex flex-shrink-0 items-center justify-center gap-x-2 rounded-button border border-solid text-subtext font-medium ring-offset-background transition-colors duration-100 focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50',\n  variants: {\n    variant: variantOptions,\n    size: sizeOptions,\n    isLoading: {\n      true: 'opacity-100',\n    },\n    isRounded: {\n      true: 'rounded-full',\n    },\n  },\n  defaultVariants: {\n    variant: 'default',\n    size: 'default',\n  },\n})\n\nexport const buttonIcon = cva({\n  variants: {\n    size: {\n      default: 'h-3.5 w-3.5',\n      sm: 'h-3.5 w-3.5',\n      lg: 'h-4 w-4',\n      icon: 'h-3.5 w-3.5',\n      xs: 'h-3 w-3',\n    },\n  },\n  defaultVariants: {\n    size: 'default',\n  },\n})\n\nexport const buttonVariantOptions = Object.keys(variantOptions)\nexport const buttonSizeOptions = Object.keys(sizeOptions)\nexport type ButtonProps = VariantProps<typeof button>\n"
      },
      {
        "name": "AppButtonIconOrLoader.vue",
        "dir": "./src/components/button",
        "placementDir": "button",
        "type": "components",
        "content": "<script setup lang=\"ts\">\nimport { computed } from 'vue'\nimport type { ButtonProps } from '@/components/button/appButton.style'\nimport { buttonIcon } from '@/components/button/appButton.style'\nimport AppLoader from '@/components/loader/AppLoader.vue'\nimport AppIcon from '@/components/icon/AppIcon.vue'\nimport type { Icon } from '@/icons'\n\ninterface Props {\n  icon: Icon\n  isLoading: boolean\n  size: ButtonProps['size']\n  variant: ButtonProps['variant']\n}\n\nconst { isLoading, size } = defineProps<Props>()\n\nconst buttonIconClasses = computed<string>(() =>\n  buttonIcon({\n    size,\n  }),\n)\n</script>\n\n<template>\n  <div\n    v-if=\"isLoading\"\n    class=\"relative\"\n    :class=\"buttonIconClasses\"\n  >\n    <div class=\"absolute left-1/2 top-1/2 -translate-x-1/2 -translate-y-1/2\">\n      <AppLoader class=\"h-4 w-4\" />\n    </div>\n  </div>\n\n  <AppIcon\n    v-else\n    :class=\"buttonIconClasses\"\n    :icon=\"icon\"\n  />\n</template>\n"
      }
    ],
    "internalDependencies": [
      "AppLoader"
    ]
  },
  {
    "component": "AppCard",
    "name": "Card",
    "files": [
      {
        "name": "AppCard.vue",
        "dir": "./src/components/card",
        "placementDir": "card",
        "type": "components",
        "content": "<script setup lang=\"ts\">\nimport AppText from '@/components/text/AppText.vue'\n\ninterface Props {\n  /**\n   * The main content of the card.\n   */\n  content?: string\n\n  /**\n   * The title of the card.\n   */\n  title?: string\n\n  /**\n   * The subtitle of the card.\n   */\n  subtitle?: string\n\n  /**\n   * The footer of the card.\n   */\n  footer?: string\n\n  /**\n   * The image to display on the header of the card.\n   */\n  headerImage?: string\n}\n\ndefineProps<Props>()\n\ndefineSlots<{\n  content?: () => any\n  header?: () => any\n  default?: () => any\n  footer?: () => any\n  headerImage?: () => any\n}>()\n</script>\n\n<template>\n  <section\n    class=\"\n    flex flex-col overflow-hidden\n    rounded-card border bg-card\n    text-card-foreground shadow-card-shadow\n    transition-shadow duration-300\n    hover:shadow-card-hover-shadow\n    focus:shadow-card-hover-shadow\"\n  >\n    <slot>\n      <slot name=\"headerImage\">\n        <img\n          v-if=\"headerImage\"\n          :src=\"headerImage\"\n          class=\"h-48 w-full object-cover\"\n        >\n      </slot>\n      <div class=\"flex flex-col gap-4 p-4\">\n        <slot name=\"header\">\n          <div v-if=\"title || subtitle\">\n            <AppText\n              v-if=\"title\"\n              boldness=\"semibold\"\n              variant=\"heading\"\n            >\n              {{ title }}\n            </AppText>\n            <AppText\n              v-if=\"subtitle\"\n              class=\"text-muted-foreground\"\n            >\n              {{ subtitle }}\n            </AppText>\n          </div>\n        </slot>\n        <slot name=\"content\">\n          <AppText v-if=\"content\">\n            {{ content }}\n          </AppText>\n        </slot>\n        <slot name=\"footer\">\n          <AppText v-if=\"footer\">\n            {{ footer }}\n          </AppText>\n        </slot>\n      </div>\n    </slot>\n  </section>\n</template>\n"
      },
      {
        "name": "AppCardContent.vue",
        "dir": "./src/components/card",
        "placementDir": "card",
        "type": "components",
        "content": "<script setup lang=\"ts\">\nimport { twMerge } from '@/utils//tailwind/twMerge'\n\nconst props = defineProps<{\n  /**\n   * The class to be applied to the card content.\n   */\n  class?: string\n}>()\n</script>\n\n<template>\n  <div :class=\"twMerge('flex flex-col gap-1 p-4 pt-0', props.class)\">\n    <slot />\n  </div>\n</template>\n"
      },
      {
        "name": "AppCardDescription.vue",
        "dir": "./src/components/card",
        "placementDir": "card",
        "type": "components",
        "content": "<script setup lang=\"ts\">\nimport AppText from '@/components/text/AppText.vue'\n</script>\n\n<template>\n  <AppText\n    class=\"text-muted-foreground\"\n  >\n    <slot />\n  </AppText>\n</template>\n"
      },
      {
        "name": "AppCardFooter.vue",
        "dir": "./src/components/card",
        "placementDir": "card",
        "type": "components",
        "content": "<script setup lang=\"ts\">\nimport { twMerge } from '@/utils//tailwind/twMerge'\n\nconst props = defineProps<{\n  /**\n   * The class to be applied to the card content.\n   */\n  class?: string\n}>()\n</script>\n\n<template>\n  <div :class=\"twMerge('flex flex-col gap-1 p-4 pt-0', props.class)\">\n    <slot />\n  </div>\n</template>\n"
      },
      {
        "name": "AppCardHeader.vue",
        "dir": "./src/components/card",
        "placementDir": "card",
        "type": "components",
        "content": "<script setup lang=\"ts\">\nimport { twMerge } from '@/utils//tailwind/twMerge'\n\nconst props = defineProps<{\n  /**\n   * The class to be applied to the card content.\n   */\n  class?: string\n}>()\n</script>\n\n<template>\n  <div :class=\"twMerge('flex flex-col p-4', props.class)\">\n    <slot />\n  </div>\n</template>\n"
      },
      {
        "name": "AppCardHeaderImage.vue",
        "dir": "./src/components/card",
        "placementDir": "card",
        "type": "components",
        "content": "<script setup lang=\"ts\">\nimport { twMerge } from '@/utils//tailwind/twMerge'\n\nconst props = defineProps<{\n  /**\n   * The image source.\n   */\n  src: string\n\n  /**\n   * The class to be applied to the card content.\n   */\n  class?: string\n}>()\n</script>\n\n<template>\n  <img\n    :src=\"src\"\n    :class=\"twMerge('h-48 w-full object-cover', props.class)\"\n  >\n</template>\n"
      },
      {
        "name": "AppCardTitle.vue",
        "dir": "./src/components/card",
        "placementDir": "card",
        "type": "components",
        "content": "<script setup lang=\"ts\">\nimport AppText from '@/components/text/AppText.vue'\n</script>\n\n<template>\n  <AppText\n    boldness=\"semibold\"\n    variant=\"heading\"\n  >\n    <slot />\n  </AppText>\n</template>\n"
      },
      {
        "name": "AppCard.story.vue",
        "dir": "./src/components/card",
        "placementDir": "card",
        "type": "components",
        "content": "<script setup lang=\"ts\">\nimport { reactive } from 'vue'\nimport Image from '@/assets/test-image.jpg'\nimport AppCard from '@/components/card/AppCard.vue'\nimport AppButton from '@/components/button/AppButton.vue'\nimport AppCardHeaderImage from '@/components/card/AppCardHeaderImage.vue'\nimport AppCardHeader from '@/components/card/AppCardHeader.vue'\nimport AppCardTitle from '@/components/card/AppCardTitle.vue'\nimport AppCardDescription from '@/components/card/AppCardDescription.vue'\nimport AppCardContent from '@/components/card/AppCardContent.vue'\nimport AppCardFooter from '@/components/card/AppCardFooter.vue'\n\ninterface State {\n  title?: string\n  subtitle?: string\n  content?: string\n  footer?: string\n  headerImage: string\n\n  hasFooterButton?: boolean\n  hasHeaderImage?: boolean\n  hasHeader?: boolean\n  hasFooter?: boolean\n  hasContent?: boolean\n  isCustom?: boolean\n}\n\nconst state = reactive<State>({\n  title: 'Modal title',\n  subtitle: 'Modal subtitle',\n  content: 'Modal content',\n  headerImage: Image,\n  hasHeaderImage: true,\n  hasContent: true,\n  hasFooter: true,\n  hasHeader: true,\n  isCustom: false,\n})\n</script>\n\n<template>\n  <Story\n    title=\"Card/AppCard\"\n  >\n    <Variant title=\"Default\" auto-props-disabled>\n      <template #controls>\n        <HstText v-model=\"state.title\" title=\"Title\" />\n        <HstText v-model=\"state.subtitle\" title=\"Subtitle\" />\n        <HstText v-model=\"state.footer\" title=\"Footer\" />\n        <HstTextarea v-model=\"state.content\" title=\"Content\" />\n\n        <HstCheckbox v-model=\"state.hasHeader\" title=\"Has header\" />\n        <HstCheckbox v-model=\"state.hasHeaderImage\" title=\"Has header image\" />\n        <HstCheckbox v-model=\"state.hasContent\" title=\"Has content\" />\n        <HstCheckbox v-model=\"state.hasFooter\" title=\"Has footer\" />\n      </template>\n\n      <div class=\"w-96 p-12\">\n        <AppCard>\n          <AppCardHeaderImage v-if=\"state.hasHeaderImage\" :src=\"state.headerImage\" />\n          <AppCardHeader v-if=\"state.hasHeader\">\n            <AppCardTitle>\n              {{ state.title }}\n            </AppCardTitle>\n            <AppCardDescription>\n              {{ state.subtitle }}\n            </AppCardDescription>\n          </AppCardHeader>\n          <AppCardContent v-if=\"state.hasContent\">\n            <p>{{ state.content }}</p>\n          </AppCardContent>\n          <AppCardFooter v-if=\"state.hasFooter\">\n            <AppButton class=\"w-full\">\n              Button\n            </AppButton>\n          </AppCardFooter>\n        </AppCard>\n      </div>\n    </Variant>\n  </Story>\n</template>\n"
      }
    ],
    "internalDependencies": [
      "AppText"
    ],
    "dependencies": []
  },
  {
    "component": "AppFormError",
    "name": "FormError",
    "files": [
      {
        "name": "AppFormError.vue",
        "dir": "./src/components/form-error",
        "placementDir": "form-error",
        "type": "components",
        "content": "<script setup lang=\"ts\">\nimport type { z } from 'zod'\nimport AppIcon from '@/components/icon/AppIcon.vue'\nimport AppText from '@/components/text/AppText.vue'\nimport AppHeightTransition from '@/components/transitions/AppHeightTransition.vue'\n\ninterface Props {\n  errors?: z.ZodFormattedError<string> | null | undefined\n  isTouched?: boolean\n}\n\nconst { errors, isTouched = true } = defineProps<Props>()\n</script>\n\n<template>\n  <AppHeightTransition :duration=\"0.2\">\n    <div v-if=\"errors != null && isTouched\">\n      <div class=\"flex items-center gap-x-2\">\n        <AppIcon\n          class=\"w-3.5 shrink-0 text-destructive\"\n          icon=\"warning\"\n        />\n\n        <AppText\n          v-if=\"errors != null\"\n          class=\"text-destructive\"\n          variant=\"subtext\"\n        >\n          {{ errors._errors[0] }}\n        </AppText>\n      </div>\n    </div>\n  </AppHeightTransition>\n</template>\n"
      }
    ],
    "internalDependencies": [
      "TransitionHeight"
    ]
  },
  {
    "component": "AppFormLabel",
    "name": "FormLabel",
    "files": [
      {
        "name": "AppFormLabel.vue",
        "dir": "./src/components/form-label",
        "placementDir": "form-label",
        "type": "components",
        "content": "<script setup lang=\"ts\">\nimport { computed } from 'vue'\nimport { formLabel } from '@/components/form-label/appFormLabel.style'\n\nexport interface AppFormLabelProps {\n  /**\n   * The label text to be displayed.\n   */\n  label: string\n\n  /**\n   *\n   */\n  id: string\n\n  /**\n   *\n   */\n  isDisabled: boolean\n\n  /**\n   *\n   */\n  isInvalid?: boolean\n\n  /**\n   *\n   */\n  isRequired: boolean\n}\n\nconst { label, id, isDisabled, isInvalid = false, isRequired } = defineProps<AppFormLabelProps>()\n\nconst formLabelClasses = computed<string>(() =>\n  formLabel({\n    isInvalid,\n    isDisabled,\n  }),\n)\n\nconst computedLabel = computed<string | null>(() => {\n  if (label == null)\n    return null\n\n  return isRequired ? `${label} *` : label\n})\n</script>\n\n<template>\n  <label\n    v-if=\"label !== null\"\n    :class=\"formLabelClasses\"\n    :for=\"id\"\n  >\n    {{ computedLabel }}\n  </label>\n</template>\n"
      },
      {
        "name": "appFormLabel.style.ts",
        "dir": "./src/components/form-label",
        "placementDir": "form-label",
        "type": "components",
        "content": "import { cva } from '@/utils/tailwind/cva'\n\nexport const formLabel = cva({\n  base: 'text-subtext text-muted-foreground',\n  variants: {\n    isInvalid: {\n      true: 'text-destructive',\n    },\n    isDisabled: {\n      true: 'opacity-50',\n    },\n  },\n})\n"
      }
    ]
  },
  {
    "component": "AppIcon",
    "name": "Icon",
    "files": [
      {
        "name": "AppIcon.vue",
        "dir": "./src/components/icon",
        "placementDir": "icon",
        "type": "components",
        "content": "<script setup lang=\"ts\">\nimport { twMerge } from 'tailwind-merge'\nimport { computed, useAttrs } from 'vue'\nimport { icons } from '@/icons'\nimport type { Icon } from '@/icons'\nimport type { IconProps } from '@/components/icon/appIcon.style'\nimport { iconVariants } from '@/components/icon/appIcon.style'\n\ninterface Props {\n  /**\n   * The icon to display.\n   */\n  icon: Icon\n\n  /**\n   * The size of the icon.\n   */\n  size?: IconProps['size']\n}\n\nconst { icon, size = 'default' } = defineProps<Props>()\n\nconst attrs = useAttrs()\n\nconst iconComponent = computed(() => icons[icon])\n</script>\n\n<template>\n  <Component :is=\"iconComponent\" :class=\"twMerge(iconVariants({ size }), attrs?.class as string)\" />\n</template>\n"
      },
      {
        "name": "appIcon.style.ts",
        "dir": "./src/components/icon",
        "placementDir": "icon",
        "type": "components",
        "content": "import type { VariantProps } from '@/utils/tailwind/cva'\nimport { cva } from '@/utils/tailwind/cva'\n\nexport const sizeOptions = {\n  default: 'h-6',\n  sm: 'h-4',\n  lg: 'h-8',\n  full: 'h-full',\n}\n\nexport const iconVariants = cva(\n  {\n    base: null,\n    variants: {\n      size: sizeOptions,\n    },\n    defaultVariants: {\n      size: 'default',\n    },\n  },\n)\n\nexport type IconProps = VariantProps<typeof iconVariants>\n\nexport const iconSizeOptions = Object.keys(sizeOptions)\n"
      }
    ],
    "internalDependencies": []
  },
  {
    "component": "AppLoader",
    "name": "Loader",
    "files": [
      {
        "name": "AppLoader.vue",
        "dir": "./src/components/loader",
        "placementDir": "loader",
        "type": "components",
        "content": "<template>\n  <svg viewBox=\"25 25 50 50\">\n    <circle\n      class=\"h-full w-full\"\n      cx=\"100%\"\n      cy=\"100%\"\n      fill=\"none\"\n      r=\"20\"\n      stroke=\"currentColor\"\n      stroke-miterlimit=\"10\"\n      stroke-width=\"2\"\n    />\n  </svg>\n</template>\n\n<style scoped>\nsvg {\n  animation: loading-spinner-rotate 1s linear infinite;\n}\nsvg circle {\n  stroke-dasharray: 1, 200;\n  stroke-dashoffset: 0;\n  animation: loading-spinner-dash 2s ease-in-out infinite, loading-spinner-color 8s ease-in-out infinite;\n  stroke-linecap: round;\n  stroke-width: 4px;\n}\n\n@keyframes loading-spinner-rotate {\n  100% {\n    transform: rotate(360deg);\n  }\n}\n\n@keyframes loading-spinner-dash {\n  0% {\n    stroke-dasharray: 1, 200;\n    stroke-dashoffset: 0;\n  }\n  50% {\n    stroke-dasharray: 89, 200;\n    stroke-dashoffset: -35px;\n  }\n  100% {\n    stroke-dasharray: 89, 200;\n    stroke-dashoffset: -124px;\n  }\n}\n</style>\n"
      }
    ]
  },
  {
    "component": "AppMenu",
    "name": "Menu",
    "files": [
      {
        "name": "AppMenu.vue",
        "dir": "./src/components/menu",
        "placementDir": "menu",
        "type": "components",
        "content": "<script setup lang=\"ts\">\nimport type { Props as ButtonProps } from '@/components/button/AppButton.vue'\nimport AppMenuButton from '@/components/menu/AppMenuButton.vue'\nimport AppMenuContainer from '@/components/menu/AppMenuContainer.vue'\nimport AppMenuDivider from '@/components/menu/AppMenuDivider.vue'\nimport AppMenuItem from '@/components/menu/AppMenuItem.vue'\nimport AppMenuPanel from '@/components/menu/AppMenuPanel.vue'\nimport type { MenuConfiguration, MenuOption } from '@/types/menu.type'\n\ndefineProps<{\n  /**\n   * The menu configuration, which is an array of menu options.\n   */\n  menuConfiguration: MenuConfiguration\n  /**\n   * The button props, which are passed to the button component.\n   */\n  buttonProps?: ButtonProps\n}>()\nexport type MenuItemComponent = typeof AppMenuItem | typeof AppMenuDivider\nfunction getMenuConfigurationItem(type: MenuOption): MenuItemComponent {\n  switch (type) {\n    case 'divider':\n      return AppMenuDivider\n    case 'item':\n      return AppMenuItem\n  }\n}\n</script>\n\n<template>\n  <AppMenuContainer>\n    <AppMenuButton v-bind=\"buttonProps\">\n      <slot />\n    </AppMenuButton>\n    <AppMenuPanel>\n      <slot name=\"panel-top\" />\n      <Component\n        :is=\"getMenuConfigurationItem(menuItem.type)\"\n        v-for=\"(menuItem, index) in menuConfiguration\"\n        :key=\"index\"\n        v-bind=\"menuItem\"\n      />\n    </AppMenuPanel>\n    <slot name=\"panel-bottom\" />\n  </AppMenuContainer>\n</template>\n"
      },
      {
        "name": "AppMenuButton.vue",
        "dir": "./src/components/menu",
        "placementDir": "menu",
        "type": "components",
        "content": "<script setup lang=\"ts\">\nimport { MenuButton } from '@headlessui/vue'\nimport type { Props } from '@/components/button/AppButton.vue'\nimport AppButton from '@/components/button/AppButton.vue'\nimport AppIcon from '@/components/icon/AppIcon.vue'\n\nconst props = defineProps<Props>()\n</script>\n\n<template>\n  <MenuButton v-slot=\"{ open }\" as=\"div\" class=\"max-w-max\">\n    <slot name=\"element\" :open=\"open\">\n      <AppButton v-bind=\"props\">\n        <div class=\"flex items-center gap-2\">\n          <slot :open=\"open\" />\n          <AppIcon\n            size=\"sm\"\n            icon=\"chevronDown\"\n            class=\"transition\"\n            :class=\"{\n              'rotate-180': open,\n            }\"\n          />\n        </div>\n      </AppButton>\n    </slot>\n  </MenuButton>\n</template>\n"
      },
      {
        "name": "AppMenuContainer.vue",
        "dir": "./src/components/menu",
        "placementDir": "menu",
        "type": "components",
        "content": "<script setup lang=\"ts\">\nimport { Float } from '@headlessui-float/vue'\nimport { Menu } from '@headlessui/vue'\nimport { popoverTransition } from '@/transitions'\nimport type { FloatProps } from '@/types/float.type'\n\nconst {\n  placement = 'bottom-end',\n  hasAdaptiveWidth = false,\n  hasAutoPlacement = false,\n  hasNoFlip = false,\n  hasNoOffset = false,\n  hasNoShift = false,\n} = defineProps<FloatProps>()\n\nconst SHIFT_VALUE = 8\nconst OFFSET_VALUE = 4\nconst FLIP_VALUE = 8\n</script>\n\n<template>\n  <Menu>\n    <Float\n      :placement=\"placement\"\n      :adaptive-width=\"hasAdaptiveWidth\"\n      :auto-placement=\"hasAutoPlacement\"\n      :flip=\"hasNoFlip ? undefined : FLIP_VALUE\"\n      :shift=\"hasNoShift ? undefined : SHIFT_VALUE\"\n      :offset=\"hasNoOffset ? undefined : OFFSET_VALUE\"\n\n      portal\n      v-bind=\"popoverTransition\"\n      tailwindcss-origin-class\n    >\n      <slot />\n    </Float>\n  </Menu>\n</template>\n"
      },
      {
        "name": "AppMenuDivider.vue",
        "dir": "./src/components/menu",
        "placementDir": "menu",
        "type": "components",
        "content": "<template>\n  <div class=\"h-px w-full bg-neutral-300\" />\n</template>\n"
      },
      {
        "name": "AppMenuItem.vue",
        "dir": "./src/components/menu",
        "placementDir": "menu",
        "type": "components",
        "content": "<script setup lang=\"ts\">\nimport { MenuItem } from '@headlessui/vue'\nimport { RouterLink } from 'vue-router'\nimport { menuItemVariants } from '@/components/menu/appMenuItem.style'\nimport AppText from '@/components/text/AppText.vue'\nimport AppIcon from '@/components/icon/AppIcon.vue'\nimport type { MenuItemProps } from '@/types/menu.type'\nimport AppTextDescription from '@/components/text/AppTextDescription.vue'\n\ninterface MenuItemSlotProps {\n  /**\n   * If the menu item is active.\n   */\n  active: boolean\n  /**\n   * If the menu item is disabled.\n   */\n  disabled: boolean\n  /**\n   * Close the menu.\n   */\n  close: () => void\n}\n\nconst {\n  iconLeft,\n  isDisabled,\n  text,\n  description,\n  onSelect,\n} = defineProps<MenuItemProps>()\nconst emits = defineEmits<{\n  click: []\n}>()\n\nfunction handleClick(): void {\n  if (isDisabled)\n    return\n  onSelect?.()\n  emits('click')\n}\n</script>\n\n<template>\n  <MenuItem\n    v-slot=\"{ active, disabled, close }: MenuItemSlotProps\"\n    :disabled=\"isDisabled\"\n  >\n    <Component\n      :is=\"to ? RouterLink : 'button'\"\n      :to=\"to\"\n      disabled\n      :class=\"menuItemVariants({\n        isDisabled,\n        isActive: active,\n      })\"\n      @click=\"handleClick\"\n    >\n      <slot\n        name=\"element\"\n        :is-disabled=\"isDisabled\"\n        :active=\"active\"\n        :close=\"close\"\n      >\n        <slot name=\"left\" />\n        <div class=\"flex items-center gap-2\">\n          <slot name=\"icon-left\">\n            <AppIcon\n              v-if=\"iconLeft\"\n              :icon=\"iconLeft\"\n              size=\"sm\"\n              class=\"mr-2\"\n            />\n          </slot>\n          <slot\n            :is-active=\"active\"\n            :is-disabled=\"disabled || isDisabled\"\n            :close=\"close\"\n          >\n            <AppTextDescription :text=\"text\" :description=\"description\" />\n          </slot>\n        </div>\n        <slot name=\"right\" />\n      </slot>\n    </Component>\n  </MenuItem>\n</template>\n"
      },
      {
        "name": "AppMenuPanel.vue",
        "dir": "./src/components/menu",
        "placementDir": "menu",
        "type": "components",
        "content": "<script setup lang=\"ts\">\nimport { MenuItems } from '@headlessui/vue'\n</script>\n\n<template>\n  <MenuItems\n    class=\"max-w-max overflow-hidden rounded-popover border border-border bg-popover text-popover-foreground shadow-popover-shadow\"\n  >\n    <slot />\n  </MenuItems>\n</template>\n"
      },
      {
        "name": "menu.type.ts",
        "dir": "./src/types",
        "placementDir": "",
        "type": "types",
        "content": "import type { RouteRecordRaw } from 'vue-router'\nimport type { Icon } from '@/icons'\n\nexport interface MenuItemProps {\n  /**\n   * The type of the menu item, decides the rendering\n   */\n  type: 'item'\n  /**\n   * The icon to display on the left of the menu item\n   */\n  iconLeft?: Icon\n  /**\n   * If the menu item is disabled\n   */\n  isDisabled?: boolean\n  /**\n   * The text to display on the menu item\n   */\n  text: string\n  /**\n   * The description to display on the menu item\n   */\n  description?: string\n  /**\n   * Callback if a menu item is selected\n   */\n  onSelect?: () => void\n  /**\n   * The route to navigate to, renders as a router-link\n   */\n  to?: RouteRecordRaw\n}\n\nexport interface MenuDividerProps {\n  /**\n   * The type of the menu item, decides the rendering\n   */\n  type: 'divider'\n}\n\n/**\n * The type of the menu item, decides the rendering\n */\nexport type MenuOption = 'item' | 'divider'\n\n/**\n * The configuration for the menu\n */\nexport type MenuConfiguration = (MenuItemProps | MenuDividerProps)[]\n"
      },
      {
        "name": "float.type.ts",
        "dir": "./src/types",
        "placementDir": "",
        "type": "types",
        "content": "import type { FloatProps as HeadlessFloatProps } from '@headlessui-float/vue'\n\nexport interface FloatProps {\n  /**\n   * The placement of the menu, default bottom-end.\n   */\n  placement?: HeadlessFloatProps['placement']\n  /**\n   * Whether the menu should adapt its width to the content.\n   */\n  hasAdaptiveWidth?: HeadlessFloatProps['adaptiveWidth']\n  /**\n   * Whether the menu has no offset.\n   */\n  hasNoOffset?: boolean\n  /**\n   * Whether the menu should sheft when it reaches the viewport bounds.\n   */\n  hasNoShift?: boolean\n  /**\n   * Whether the menu should flip when it reaches the viewport bounds.\n   */\n  hasNoFlip?: boolean\n  /**\n   * Whether the menu should automatically place itself.\n   */\n  hasAutoPlacement?: boolean\n}\n"
      },
      {
        "name": "appMenuItem.style.ts",
        "dir": "./src/components/menu",
        "placementDir": "menu",
        "type": "components",
        "content": "import type { VariantProps } from '@/utils/tailwind/cva'\nimport { cva } from '@/utils/tailwind/cva'\n\nexport const menuItemVariants = cva(\n  {\n    base: 'flex min-w-40 max-w-max items-center justify-between gap-2 px-4 py-2',\n    variants: {\n      isActive: {\n        true: 'bg-neutral-100',\n      },\n      isDisabled: {\n        true: 'cursor-not-allowed text-neutral-400',\n      },\n    },\n    defaultVariants: {\n      isActive: false,\n      isDisabled: false,\n    },\n  },\n)\n\nexport type MenuItemProps = VariantProps<typeof menuItemVariants>\n"
      }
    ],
    "internalDependencies": [
      "AppButton",
      "AppText"
    ],
    "dependencies": [
      "@headlessui/vue",
      "@headlessui-float/vue"
    ]
  },
  {
    "component": "AppModal",
    "name": "Modal",
    "files": [
      {
        "name": "AppModal.vue",
        "dir": "./src/components/modal",
        "placementDir": "modal",
        "type": "components",
        "content": "<script setup lang=\"ts\">\nimport {\n  Dialog,\n  DialogPanel,\n  TransitionChild,\n  TransitionRoot,\n} from '@headlessui/vue'\nimport type { ModalProps } from '@/components/modal/appModal.style'\nimport { modalVariants } from '@/components/modal/appModal.style'\nimport { modalBackgroundTransition, modalTransition } from '@/transitions'\nimport { useProvideModalContext } from '@/composables/modal/useModalContext'\n\ninterface Props {\n  /**\n   * Determines if the can close when clicking outside.\n   */\n  hasIrremovableMask?: boolean\n\n  /**\n   * The size of the modal.\n   */\n  size?: ModalProps['size']\n}\n\nconst {\n  hasIrremovableMask = false,\n  size = 'default',\n} = defineProps<Props>()\n\ndefineSlots<{\n  default: (props: { close: () => void }) => any\n}>()\n\nuseProvideModalContext({\n  close: handleCloseModal,\n})\n\nconst isOpen = defineModel<boolean>('isOpen', {\n  required: true,\n})\n\nfunction handleCloseModal(): void {\n  isOpen.value = false\n}\n\nfunction handleClickOutside(): void {\n  if (!hasIrremovableMask)\n    handleCloseModal()\n}\n</script>\n\n<template>\n  <TransitionRoot appear :show=\"isOpen\" as=\"template\">\n    <Dialog class=\"relative z-[999]\" @close=\"handleClickOutside\">\n      <TransitionChild\n        as=\"template\"\n        v-bind=\"modalBackgroundTransition\"\n      >\n        <div class=\"fixed inset-0 bg-black/25\" />\n      </TransitionChild>\n\n      <div class=\"fixed inset-0 flex min-h-full items-center justify-center overflow-y-auto\">\n        <TransitionChild\n          as=\"template\"\n          v-bind=\"modalTransition\"\n        >\n          <DialogPanel :class=\"modalVariants({ size })\">\n            <slot :close=\"handleCloseModal\" />\n          </DialogPanel>\n        </TransitionChild>\n      </div>\n    </Dialog>\n  </TransitionRoot>\n</template>\n"
      },
      {
        "name": "AppModalContent.vue",
        "dir": "./src/components/modal",
        "placementDir": "modal",
        "type": "components",
        "content": "<script setup lang=\"ts\">\nimport { twMerge } from '@/utils//tailwind/twMerge'\n\nconst props = defineProps<{\n  /**\n   * The class to be applied to the modal content.\n   */\n  class?: string\n}>()\n</script>\n\n<template>\n  <div :class=\"twMerge('flex flex-col gap-1 p-4 pt-0', props.class)\">\n    <slot />\n  </div>\n</template>\n"
      },
      {
        "name": "AppModalFooter.vue",
        "dir": "./src/components/modal",
        "placementDir": "modal",
        "type": "components",
        "content": "<script setup lang=\"ts\">\nimport { twMerge } from '@/utils//tailwind/twMerge'\n\nconst props = defineProps<{\n  /**\n   * The class to be applied to the modal footer.\n   */\n  class?: string\n}>()\n</script>\n\n<template>\n  <div :class=\"twMerge('flex flex-col gap-1 p-4 pt-0', props.class)\">\n    <slot />\n  </div>\n</template>\n"
      },
      {
        "name": "AppModalHeader.vue",
        "dir": "./src/components/modal",
        "placementDir": "modal",
        "type": "components",
        "content": "<script setup lang=\"ts\">\nimport { DialogTitle } from '@headlessui/vue'\nimport AppIcon from '@/components/icon/AppIcon.vue'\nimport { twMerge } from '@/utils//tailwind/twMerge'\nimport { useModalContext } from '@/composables/modal/useModalContext'\n\ninterface Props {\n  /**\n   * Determines if there is a close button on the modal.\n   */\n  hideCloseButton?: boolean\n\n  /**\n   * The class to be applied to the modal header.\n   */\n  class?: string\n}\n\nconst props = defineProps<Props>()\nconst { close } = useModalContext()\n\nfunction handleClickCloseButton(): void {\n  close()\n}\n</script>\n\n<template>\n  <div :class=\"twMerge('flex p-4 justify-between gap-4', props.class)\">\n    <DialogTitle>\n      <slot />\n    </DialogTitle>\n    <div v-if=\"!hideCloseButton\">\n      <button @click=\"handleClickCloseButton\">\n        <AppIcon icon=\"close\" />\n      </button>\n    </div>\n  </div>\n</template>\n"
      },
      {
        "name": "AppModalTitle.vue",
        "dir": "./src/components/modal",
        "placementDir": "modal",
        "type": "components",
        "content": "<script setup lang=\"ts\">\nimport AppText from '@/components/text/AppText.vue'\n</script>\n\n<template>\n  <AppText variant=\"heading\">\n    <slot />\n  </AppText>\n</template>\n"
      },
      {
        "name": "AppModalDescription.vue",
        "dir": "./src/components/modal",
        "placementDir": "modal",
        "type": "components",
        "content": "<script setup lang=\"ts\">\nimport AppText from '@/components/text/AppText.vue'\n</script>\n\n<template>\n  <AppText variant=\"body\" class=\"text-muted-foreground\">\n    <slot />\n  </AppText>\n</template>\n"
      },
      {
        "name": "appModal.style.ts",
        "dir": "./src/components/modal",
        "placementDir": "modal",
        "type": "components",
        "content": "import type { VariantProps } from '@/utils/tailwind/cva'\nimport { cva } from '@/utils/tailwind/cva'\n\nexport const sizeOptions = {\n  default: 'w-[80ch] ',\n  sm: 'w-[60ch]',\n  full: 'w-full',\n  lg: 'w-[120ch]',\n}\n\nexport const modalVariants = cva(\n  {\n    base: 'flex flex-col rounded-modal bg-popover text-left text-popover-foreground shadow-modal-shadow',\n    variants: {\n      size: sizeOptions,\n    },\n    defaultVariants: {\n      size: 'default',\n    },\n  },\n)\n\nexport type ModalProps = VariantProps<typeof modalVariants>\nexport const modalSizeOptions = Object.keys(sizeOptions)\n"
      },
      {
        "name": "useModal.ts",
        "dir": "./src/composables/modal",
        "placementDir": "modal",
        "type": "composables",
        "content": "import type { Ref } from 'vue'\nimport { onUnmounted, ref, watch } from 'vue'\nimport type { RenderedModal, UseModalOptions, UseModalReturnType } from '@/types/useModal.type'\nimport { generateUuid } from '@/utils/uuid/generateUuid'\n\nconst renderedModals = ref<RenderedModal[]>([])\n\nexport function useModalContainer(): {\n  modals: Ref<RenderedModal[]>\n} {\n  return { modals: renderedModals }\n}\n\nexport function useModal<P>({ component, attrs }: UseModalOptions<P>): UseModalReturnType {\n  const id = generateUuid()\n  let onOpenCb: (() => void) | null = null\n  let onCloseCb: (() => void) | null = null\n\n  const onOpen = (cb: () => void): void => {\n    onOpenCb = cb\n  }\n\n  const onClose = (cb: () => void): void => {\n    onCloseCb = cb\n  }\n\n  const modal = ref<RenderedModal>({\n    id,\n    component,\n    attrs,\n    isOpen: false,\n  })\n\n  renderedModals.value.push(modal.value)\n\n  const open = (): void => {\n    modal.value.isOpen = true\n    onOpenCb?.()\n  }\n\n  const close = (): void => {\n    modal.value.isOpen = false\n    onCloseCb?.()\n  }\n\n  const moveToTop = (): void => {\n    renderedModals.value = renderedModals.value.filter(modal => modal.id !== id).concat(modal.value)\n  }\n\n  const moveToBottom = (): void => {\n    renderedModals.value = [modal.value].concat(renderedModals.value.filter(modal => modal.id !== id))\n  }\n\n  const destroy = (): void => {\n    renderedModals.value = renderedModals.value.filter(modal => modal.id !== id)\n  }\n\n  watch(() => modal.value.isOpen, (isOpen) => {\n    if (isOpen)\n      onOpenCb?.()\n    else\n      onCloseCb?.()\n  })\n\n  onUnmounted(() => {\n    destroy()\n  })\n\n  return {\n    open,\n    close,\n    destroy,\n    moveToTop,\n    moveToBottom,\n    onOpen,\n    onClose,\n  }\n}\n"
      },
      {
        "name": "useModalContext.ts",
        "dir": "./src/composables/modal",
        "placementDir": "modal",
        "type": "composables",
        "content": "import { inject, provide } from 'vue'\n\nimport type { InjectionKey } from 'vue'\n\ninterface ModalContext {\n  close: () => void\n}\n\nexport const modalContext = Symbol('ModalContext') as InjectionKey<{\n  close: () => void\n}>\n\nexport function useModalContext(): ModalContext {\n  const context = inject(modalContext, null)\n\n  if (context === null) {\n    const err = new Error('Component is missing a parent <AppModal /> component.')\n    throw err\n  }\n\n  return context\n}\n\nexport function useProvideModalContext(context: ModalContext): void {\n  provide(modalContext, context)\n}\n"
      },
      {
        "name": "useModal.type.ts",
        "dir": "./src/types",
        "placementDir": "",
        "type": "types",
        "content": "export interface Constructor<P = any> {\n  __isFragment?: never\n  __isTeleport?: never\n  __isSuspense?: never\n  new (...args: any[]): { $props: P }\n}\n\nexport interface UseModalOptions<P> {\n  component: Constructor<P>\n  attrs?: (Omit<P, 'isOpen'>) | (object extends P ? null : never)\n}\n\nexport interface UseModalReturnType {\n  open: () => void\n  close: () => void\n  moveToTop: () => void\n  moveToBottom: () => void\n  destroy: () => void\n  onOpen: (cb: () => void) => void\n  onClose: (cb: () => void) => void\n}\n\nexport interface RenderedModal extends UseModalOptions<any> {\n  id: string\n  isOpen: boolean\n}\n"
      },
      {
        "name": "AppModal.story.vue",
        "dir": "./src/components/modal",
        "placementDir": "modal",
        "type": "components",
        "content": "<script setup lang=\"ts\">\nimport { reactive } from 'vue'\nimport AppModal from '@/components/modal/AppModal.vue'\nimport AppButton from '@/components/button/AppButton.vue'\nimport type { ModalProps } from '@/components/modal/appModal.style'\nimport { modalSizeOptions } from '@/components/modal/appModal.style'\n\nimport AppModalHeader from '@/components/modal/AppModalHeader.vue'\nimport AppModalTitle from '@/components/modal/AppModalTitle.vue'\nimport AppModalDescription from '@/components/modal/AppModalDescription.vue'\nimport AppModalContent from '@/components/modal/AppModalContent.vue'\nimport AppModalFooter from '@/components/modal/AppModalFooter.vue'\n\ninterface State {\n  isOpen: boolean\n  hideCloseButton?: boolean\n  hasIrremovableMask?: boolean\n  title?: string\n  content?: string\n  description?: string\n  size?: ModalProps['size']\n}\n\nconst state = reactive<State>({\n  isOpen: false,\n  hideCloseButton: false,\n  hasIrremovableMask: false,\n  title: 'Modal title',\n  description: 'Description here',\n  content: 'Content here Lorem ipsum dolor sit amet consectetur adipisicing elit. Error temporibus nulla ab eius enim similique atque officia? Porro consectetur, ea iusto perspiciatis ullam nisi minus, inventore iste quisquam placeat nemo?Lorem ipsum dolor sit amet consectetur adipisicing elit. In quidem ullam ipsam minima, vitae commodi expedita corporis aliquid illum quis laudantium adipisci laboriosam est maxime quae enim aliquam sed ipsa.Lorem, ipsum dolor sit amet consectetur adipisicing elit. Nam iste, adipisci sapiente odit beatae architecto aspernatur perferendis quis. Esse dicta, minima non aperiam sunt ad veniam ab velit officiis magni.',\n})\n\nfunction handleClick(): void {\n  state.isOpen = true\n}\n</script>\n\n<template>\n  <Story\n    title=\"Modals/AppModal\"\n  >\n    <Variant title=\"Default\" auto-props-disabled>\n      <template #controls>\n        <HstCheckbox v-model=\"state.isOpen\" title=\"Open\" />\n        <HstCheckbox v-model=\"state.hideCloseButton\" title=\"No close button\" />\n        <HstCheckbox v-model=\"state.hasIrremovableMask\" title=\"Not dismissable\" />\n        <HstSelect v-model=\"state.size\" title=\"Size\" :options=\"modalSizeOptions\" />\n\n        <HstText v-model=\"state.title\" title=\"Title\" />\n        <HstText v-model=\"state.description\" title=\"Description\" />\n\n        <HstTextarea v-model=\"state.content\" title=\"Content\" />\n      </template>\n\n      <AppButton @click=\"handleClick\">\n        Click me\n      </AppButton>\n      <AppModal\n        v-model:is-open=\"state.isOpen\" :size=\"state.size\"\n        :has-irremovable-mask=\"state.hasIrremovableMask\"\n      >\n        <template #default=\"{ close }\">\n          <AppModalHeader :close=\"close\" :hide-close-button=\"state.hideCloseButton\">\n            <AppModalTitle>\n              {{ state.title }}\n            </AppModalTitle>\n            <AppModalDescription>\n              {{ state.content }}\n            </AppModalDescription>\n          </AppModalHeader>\n          <AppModalContent>\n            {{ state.content }}\n          </AppModalContent>\n          <AppModalFooter>\n            <div class=\"flex justify-end gap-2\">\n              <AppButton variant=\"ghost\" @click=\"close\">\n                Cancel\n              </AppButton>\n              <AppButton @click=\"close\">\n                Confirm\n              </AppButton>\n            </div>\n          </AppModalFooter>\n        </template>\n      </AppModal>\n    </Variant>\n  </Story>\n</template>\n"
      }
    ],
    "dependencies": [
      "@headlessui/vue"
    ],
    "internalDependencies": [
      "AppText",
      "AppButton",
      "AppIcon"
    ]
  },
  {
    "component": "AppPopover",
    "name": "Popover",
    "files": [
      {
        "name": "AppPopover.vue",
        "dir": "./src/components/popover",
        "placementDir": "popover",
        "type": "components",
        "content": "<script setup lang=\"ts\">\nimport { Float } from '@headlessui-float/vue'\nimport { Popover, PopoverButton, PopoverPanel } from '@headlessui/vue'\nimport { popoverTransition } from '@/transitions'\nimport type { FloatProps } from '@/types/float.type'\n\nexport interface PopoverProps extends FloatProps {\n  /**\n   * Decides if the popover state is managed from the outside.\n   */\n  isManual?: boolean\n  /**\n   * Decides if the popover element is a div or a button.\n   */\n  isDiv?: boolean\n}\n\nconst {\n  placement = 'bottom',\n  hasAdaptiveWidth = false,\n  hasAutoPlacement = false,\n  hasNoFlip = false,\n  hasNoOffset = false,\n  hasNoShift = false,\n  isDiv = false,\n  isManual = false,\n} = defineProps<PopoverProps>()\n\nconst SHIFT_VALUE = 8\nconst OFFSET_VALUE = 4\nconst FLIP_VALUE = 8\n\nconst isOpen = defineModel<boolean>({\n  default: false,\n})\n\nfunction closeManual(): void {\n  isOpen.value = false\n}\n</script>\n\n<template>\n  <Popover>\n    <Float\n      :placement=\"placement\"\n      :adaptive-width=\"hasAdaptiveWidth\"\n      :auto-placement=\"hasAutoPlacement\"\n      :flip=\"hasNoFlip ? undefined : FLIP_VALUE\"\n      :shift=\"hasNoShift ? undefined : SHIFT_VALUE\"\n      :offset=\"hasNoOffset ? undefined : OFFSET_VALUE\"\n\n      portal\n      v-bind=\"popoverTransition\"\n      tailwindcss-origin-class\n    >\n      <PopoverButton :as=\"isDiv ? 'div' : 'button'\" class=\"max-w-max rounded-button\">\n        <slot name=\"element\" />\n      </PopoverButton>\n\n      <PopoverPanel\n        v-if=\"!isManual\"\n        v-slot=\"{ close }\"\n        :focus=\"true\"\n        class=\"rounded-popover border border-border bg-popover px-4 py-3 text-popover-foreground shadow-popover-shadow\"\n      >\n        <slot name=\"panel\" :close=\"close\" />\n      </PopoverPanel>\n      <PopoverPanel\n        v-else\n        v-show=\"isOpen\"\n        :focus=\"true\"\n        static\n        class=\"rounded-popover border border-border bg-popover px-4 py-3 text-popover-foreground shadow-popover-shadow\"\n      >\n        <slot name=\"panel\" :close=\"closeManual\" />\n      </PopoverPanel>\n    </Float>\n  </Popover>\n</template>\n"
      },
      {
        "name": "float.type.ts",
        "dir": "./src/types",
        "placementDir": "",
        "type": "types",
        "content": "import type { FloatProps as HeadlessFloatProps } from '@headlessui-float/vue'\n\nexport interface FloatProps {\n  /**\n   * The placement of the menu, default bottom-end.\n   */\n  placement?: HeadlessFloatProps['placement']\n  /**\n   * Whether the menu should adapt its width to the content.\n   */\n  hasAdaptiveWidth?: HeadlessFloatProps['adaptiveWidth']\n  /**\n   * Whether the menu has no offset.\n   */\n  hasNoOffset?: boolean\n  /**\n   * Whether the menu should sheft when it reaches the viewport bounds.\n   */\n  hasNoShift?: boolean\n  /**\n   * Whether the menu should flip when it reaches the viewport bounds.\n   */\n  hasNoFlip?: boolean\n  /**\n   * Whether the menu should automatically place itself.\n   */\n  hasAutoPlacement?: boolean\n}\n"
      }
    ],
    "dependencies": [
      "@headlessui/vue",
      "@headlessui-float/vue"
    ]
  },
  {
    "component": "AppSwitch",
    "name": "Switch",
    "files": [
      {
        "name": "AppSwitch.vue",
        "dir": "./src/components/switch",
        "placementDir": "switch",
        "type": "components",
        "content": "<script setup lang=\"ts\" generic=\"TValue\">\nimport { Switch } from '@headlessui/vue'\nimport { computed } from 'vue'\nimport AppSwitchIndicator from '@/components/switch/AppSwitchIndicator.vue'\n\nexport interface AppSwitchProps<TValue> {\n  /**\n   * The value if the switch is checked.\n   */\n  value?: TValue\n\n  /**\n   * Determines if the switch is a checkbox.\n   */\n  isCheckbox?: boolean\n\n  /**\n   * Determines if the switch is disabled.\n   */\n  isDisabled?: boolean\n\n  /**\n   * Determines if the switch is invalid.\n   */\n  isInvalid?: boolean\n\n  /**\n   * The class to apply when the switch is selected.\n   */\n  selectedBackgroundClass?: string\n\n  /**\n   * The name of the switch.\n   */\n  name?: string\n}\n\nconst {\n  value = true as TValue,\n  isDisabled = false,\n  isCheckbox = false,\n  selectedBackgroundClass = 'bg-primary',\n} = defineProps<AppSwitchProps<TValue>>()\n\nconst emits = defineEmits<{\n  'focus': []\n  'blur': []\n}>()\n\nconst model = defineModel<TValue | null>({\n  required: true,\n  default: null,\n})\n\nconst isSelected = computed<boolean>({\n  get() {\n    return model.value === value\n  },\n  set(isSelectedValue: boolean) {\n    if (isSelectedValue)\n      model.value = value\n    else\n      model.value = null\n  },\n})\n\nfunction onFocus(): void {\n  emits('focus')\n}\n\nfunction onBlur(): void {\n  emits('blur')\n}\n</script>\n\n<template>\n  <!-- eslint-disable vue/valid-v-model -->\n  <Switch\n    v-model=\"isSelected\"\n    :value=\"(typeof value === 'string') ? value : undefined\"\n    :name=\"name\"\n    :disabled=\"isDisabled\"\n    class=\"flex justify-start\"\n    @blur=\"onBlur\"\n    @focus=\"onFocus\"\n  >\n    <slot\n      :is-selected=\"isSelected\"\n      :is-checkbox=\"isCheckbox\"\n      :is-disabled=\"isDisabled\"\n      :selected-background-class=\"selectedBackgroundClass\"\n    >\n      <AppSwitchIndicator\n        :is-selected=\"isSelected\"\n        :is-checkbox=\"isCheckbox\"\n        :is-disabled=\"isDisabled\"\n        :selected-background-class=\"selectedBackgroundClass\"\n      />\n    </slot>\n  </Switch>\n</template>\n"
      },
      {
        "name": "AppFormSwitch.vue",
        "dir": "./src/components/switch",
        "placementDir": "switch",
        "type": "components",
        "content": "<script setup lang=\"ts\" generic=\"TValue\">\nimport type { z } from 'zod'\n\nimport { computed } from 'vue'\nimport { generateUuid } from '@/utils/uuid/generateUuid'\nimport AppText from '@/components/text/AppText.vue'\nimport AppFormError from '@/components/form-error/AppFormError.vue'\nimport AppFormLabel from '@/components/form-label/AppFormLabel.vue'\nimport type { AppSwitchProps } from '@/components/switch/AppSwitch.vue'\nimport AppSwitch from '@/components/switch/AppSwitch.vue'\n\nexport interface Props<T> extends Omit<AppSwitchProps<T>, 'isInvalid'> {\n  /**\n   * The error messages associated with the component, if any.\n   * It should be an object with an \"_errors\" property containing an array of strings.\n   */\n  errors?: z.ZodFormattedError<string> | undefined | null\n\n  /**\n   * The label to be displayed above the component.\n   */\n  label?: string | null\n\n  /**\n   * Extra information to be displayed below the input.\n   */\n  description?: string | null\n\n  /**\n   * Determines if the component has emitted a `blur` event.\n   */\n  isTouched: boolean\n\n  /**\n   * Determines if the input is required.\n   */\n  isRequired?: boolean\n}\n\nconst props = withDefaults(defineProps<Props<TValue>>(), {\n  errors: null,\n  label: null,\n  description: null,\n  isRequired: false,\n})\n\nconst emits = defineEmits<{\n  blur: []\n  focus: []\n}>()\n\nconst value = defineModel<TValue | null>({\n  required: true,\n})\n\nconst id = `app-form-switch-${generateUuid()}`\n\nconst isInvalid = computed<boolean>(() => {\n  const { errors, isTouched } = props\n\n  return isTouched && errors != null\n})\n\nfunction onBlur(): void {\n  emits('blur')\n}\n\nfunction onFocus(): void {\n  emits('focus')\n}\n</script>\n\n<template>\n  <div class=\"flex flex-col\">\n    <AppFormLabel\n      v-if=\"label !== null\"\n      :id=\"id\"\n      :is-disabled=\"isDisabled ?? false\"\n      :is-invalid=\"isInvalid\"\n      :is-required=\"isRequired\"\n      :label=\"label\"\n    />\n\n    <AppSwitch\n      :id=\"id\"\n      v-model=\"value\"\n      v-bind=\"props\"\n      :is-invalid=\"isInvalid\"\n      @blur=\"onBlur\"\n      @focus=\"onFocus\"\n    />\n\n    <AppText\n      v-if=\"description !== null\"\n      class=\"mt-1\"\n      variant=\"caption\"\n    >\n      {{ description }}\n    </AppText>\n\n    <AppFormError\n      :errors=\"errors\"\n      :is-touched=\"isTouched\"\n    />\n  </div>\n</template>\n"
      },
      {
        "name": "AppSwitchIndicator.vue",
        "dir": "./src/components/switch",
        "placementDir": "switch",
        "type": "components",
        "content": "<script setup lang=\"ts\">\nimport { computed } from 'vue'\nimport AppIcon from '@/components/icon/AppIcon.vue'\nimport { switchWrapper } from '@/components/switch/appSwitch.style'\n\ninterface Props {\n  /**\n   * Determines if the switch is selected.\n   */\n  isSelected: boolean\n\n  /**\n   * Determines if the switch is a checkbox.\n   */\n  isCheckbox?: boolean\n\n  /**\n   * Determines if the switch is disabled.\n   */\n  isDisabled?: boolean\n\n  /**\n   * Determines if the switch is invalid.\n   */\n  isInvalid?: boolean\n\n  /**\n   * The class to apply when the switch is selected.\n   */\n  selectedBackgroundClass?: string\n}\nconst {\n  isSelected,\n  isCheckbox = false,\n  isDisabled = false,\n  isInvalid = false,\n  selectedBackgroundClass = 'bg-primary',\n} = defineProps<Props>()\nconst wrapperClasses = computed<string>(() => {\n  return isSelected ? selectedBackgroundClass : 'bg-neutral-200'\n})\n</script>\n\n<template>\n  <div\n    :class=\"switchWrapper({ isCheckbox, isInvalid, isDisabled, class: wrapperClasses })\"\n  >\n    <AppIcon\n      v-if=\"isCheckbox\"\n      size=\"full\"\n      icon=\"checkmark\" class=\"p-0.5 text-white duration-200\" :class=\"{\n        'opacity-100': isSelected,\n        'opacity-0': !isSelected,\n      }\"\n    />\n    <span\n      v-else\n      class=\"inline-block h-5 w-5 rounded-full bg-white duration-100\"\n      :class=\"isSelected ? 'translate-x-[1.15rem]' : 'translate-x-0.5'\"\n    />\n  </div>\n</template>\n"
      },
      {
        "name": "AppSwitchContainer.vue",
        "dir": "./src/components/switch",
        "placementDir": "switch",
        "type": "components",
        "content": "<script setup lang=\"ts\">\nimport { SwitchGroup } from '@headlessui/vue'\n</script>\n\n<template>\n  <SwitchGroup>\n    <slot />\n  </SwitchGroup>\n</template>\n"
      },
      {
        "name": "AppSwitchDescription.vue",
        "dir": "./src/components/switch",
        "placementDir": "switch",
        "type": "components",
        "content": "<script setup lang=\"ts\">\nimport { SwitchDescription } from '@headlessui/vue'\nimport AppText from '@/components/text/AppText.vue'\n\ninterface Props {\n  /**\n   * The description of the switch.\n   */\n  description: string | null\n}\ndefineProps<Props>()\n</script>\n\n<template>\n  <SwitchDescription>\n    <AppText\n      class=\"mt-1\"\n      variant=\"caption\"\n    >\n      {{ description }}\n    </AppText>\n  </SwitchDescription>\n</template>\n"
      },
      {
        "name": "AppSwitchLabel.vue",
        "dir": "./src/components/switch",
        "placementDir": "switch",
        "type": "components",
        "content": "<script setup lang=\"ts\">\nimport { SwitchLabel } from '@headlessui/vue'\nimport { useAttrs } from 'vue'\nimport type { AppFormLabelProps } from '@/components/form-label/AppFormLabel.vue'\nimport AppFormLabel from '@/components/form-label/AppFormLabel.vue'\n\nconst props = defineProps<AppFormLabelProps>()\nconst attr = useAttrs()\n</script>\n\n<template>\n  <SwitchLabel>\n    <AppFormLabel v-bind=\"props\" :class=\"attr.class\" />\n  </SwitchLabel>\n</template>\n"
      },
      {
        "name": "appSwitch.style.ts",
        "dir": "./src/components/switch",
        "placementDir": "switch",
        "type": "components",
        "content": "import { cva } from '@/utils/tailwind/cva'\n\nexport const switchWrapper = cva({\n  base: 'transition duration-200',\n  variants: {\n    isCheckbox: {\n      true: 'flex h-6 w-6 items-center justify-center rounded-input border border-border bg-neutral-200',\n      false: 'relative inline-flex h-6 w-10 items-center rounded-full border bg-white ring-primary ring-offset-background duration-100 focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-offset-2',\n    },\n    isDisabled: {\n      true: 'cursor-not-allowed bg-input-disabled opacity-50',\n    },\n    isInvalid: {\n      true: 'border-destructive text-destructive focus-visible:ring-destructive',\n    },\n  },\n})\n\nexport const switchElement = cva({\n  base: 'h-4 w-4 rounded-full bg-input-disabled',\n  variants: {\n    isCheckbox: {\n      true: 'h-4 w-4',\n      false: 'bg-input-disabled opacity-50',\n    },\n    isInvalid: {\n      true: '!border-destructive text-destructive focus-visible:ring-destructive',\n    },\n  },\n})\n"
      }
    ],
    "internalDependencies": [
      "AppFormError",
      "AppFormLabel",
      "AppText"
    ]
  },
  {
    "component": "AppTabs",
    "name": "Tabs",
    "files": [
      {
        "name": "AppTabs.vue",
        "dir": "./src/components/tabs",
        "placementDir": "tabs",
        "type": "components",
        "content": "<script setup lang=\"ts\" generic=\"TRouter  extends true | false | undefined = false\">\nimport { computed, watch } from 'vue'\nimport type { RouteLocationRaw } from 'vue-router'\nimport { RouterLink, RouterView, useRoute } from 'vue-router'\nimport AppIcon from '@/components/icon/AppIcon.vue'\nimport AppTabsGroup from '@/components/tabs/AppTabsGroup.vue'\nimport AppTabsList from '@/components/tabs/AppTabsList.vue'\nimport AppTabsTab from '@/components/tabs/AppTabsTab.vue'\nimport type { Icon } from '@/icons'\nimport AppTabsPanels from '@/components/tabs/AppTabsPanels.vue'\nimport { useTabQuery } from '@/composables/tabs/useTabsQuery'\n\nexport interface TabWithRoutes {\n  label: string\n  icon?: Icon\n  to: RouteLocationRaw\n}\n\nexport interface TabWithoutRoutes {\n  label: string\n  icon?: Icon\n  to?: never\n}\n\ninterface Props<THasRoutes> {\n  /**\n   * If true, the tabs will use the router to determine which tab is active, to with a route is required.\n   * If false, the tabs will use query params to determine which tab is active.\n   * If undefined, the tabs will use query params if the router is not available.\n   */\n  isRouter?: THasRoutes\n  /**\n   * The tabs to display.\n   * If using the router, the tabs must have a `to` property.\n   * If not using the router, the tabs must not have a `to` property.\n   */\n  tabs: THasRoutes extends true ? TabWithRoutes[] : TabWithoutRoutes[]\n  /**\n   * The name of the tab query param, in case you use multiple tabs on the page.\n   */\n  tabId?: string\n}\n\nconst { isRouter = false, tabs, tabId = 'default' } = defineProps<Props<TRouter>>()\n\nconst selectedTab = defineModel<number>({\n  default: 0,\n})\n\n// Need this or it errors because of bad generics\nconst allTabs = computed(() => {\n  return tabs\n})\n\nconst isUsingRouter = computed<boolean>(() => {\n  // @ts-expect-error Generics in Vue SFCs are not supported yet\n  return !!isRouter || isRouter === ''\n})\n\nfunction changeTab(index: number): void {\n  selectedTab.value = index\n}\n\nfunction isActive(index: number): boolean {\n  return selectedTab.value === index\n}\n\nconst tabComponent = computed(() => {\n  return isUsingRouter.value ? RouterLink : 'button'\n})\n\n// Router logic\nconst route = useRoute()\nwatch(() => route?.path, () => {\n  if (!isUsingRouter.value)\n    return\n\n  const tab = (allTabs.value as TabWithRoutes[]).find((tab) => {\n    return route?.matched.find((route) => {\n      return tab.to === route?.path\n    })\n  })\n  if (tab)\n    selectedTab.value = (allTabs.value as TabWithRoutes[]).indexOf(tab)\n})\n\n// Tab logic in query params\nif (!isUsingRouter.value)\n  useTabQuery({ selectedTab, tabId })\n</script>\n\n<template>\n  <AppTabsGroup :selected-index=\"selectedTab\" as=\"div\" @change=\"changeTab\">\n    <AppTabsList class=\"bg-background text-foreground\">\n      <AppTabsTab\n        :is=\"tabComponent\"\n        v-for=\"(tab, index) in allTabs\"\n        :key=\"index\"\n        :to=\"(tab as TabWithRoutes)?.to ?? undefined\"\n        :is-active=\"isActive(index)\"\n      >\n        <div class=\"flex w-full min-w-max items-center justify-center space-x-2 text-center\">\n          <span class=\"flex-none\">{{ tab.label }}</span>\n          <AppIcon v-if=\"tab.icon\" class=\"flex-none\" :icon=\"tab.icon\" />\n        </div>\n      </AppTabsTab>\n    </AppTabsList>\n    <AppTabsPanels>\n      <slot v-if=\"!isUsingRouter\" />\n      <RouterView v-else />\n    </AppTabsPanels>\n  </AppTabsGroup>\n</template>\n"
      },
      {
        "name": "AppTabsGroup.vue",
        "dir": "./src/components/tabs",
        "placementDir": "tabs",
        "type": "components",
        "content": "<script setup lang=\"ts\">\nimport { TabGroup } from '@headlessui/vue'\n\ndefineSlots<{\n  /**\n   * Slot inside of TabGroup, should contain all Tab logic.\n   */\n  default: void\n}>()\n</script>\n\n<template>\n  <TabGroup>\n    <slot />\n  </TabGroup>\n</template>\n"
      },
      {
        "name": "AppTabsList.vue",
        "dir": "./src/components/tabs",
        "placementDir": "tabs",
        "type": "components",
        "content": "<script setup lang=\"ts\">\nimport { TabList } from '@headlessui/vue'\n\ndefineSlots<{\n  /**\n   * Slot inside of TabList, should contain Tab elements.\n   */\n  default: void\n}>()\n</script>\n\n<template>\n  <TabList class=\"flex w-full flex-wrap justify-stretch\">\n    <slot />\n  </TabList>\n</template>\n"
      },
      {
        "name": "AppTabsPanel.vue",
        "dir": "./src/components/tabs",
        "placementDir": "tabs",
        "type": "components",
        "content": "<script setup lang=\"ts\">\nimport { TabPanel } from '@headlessui/vue'\n\ndefineSlots<{\n  /**\n   * Slot inside of TabPanel, should contain panel content.\n   */\n  default: void\n}>()\n</script>\n\n<template>\n  <TabPanel class=\"text-foreground\">\n    <slot />\n  </TabPanel>\n</template>\n"
      },
      {
        "name": "AppTabsPanels.vue",
        "dir": "./src/components/tabs",
        "placementDir": "tabs",
        "type": "components",
        "content": "<script setup lang=\"ts\">\nimport { TabPanels } from '@headlessui/vue'\n\ndefineSlots<{\n  /**\n   * Slot inside of TabPanel, should contain TabPanels.\n   */\n  default: void\n}>()\n</script>\n\n<template>\n  <TabPanels>\n    <slot />\n  </TabPanels>\n</template>\n"
      },
      {
        "name": "AppTabsTab.vue",
        "dir": "./src/components/tabs",
        "placementDir": "tabs",
        "type": "components",
        "content": "<script setup lang=\"ts\">\nimport { Tab } from '@headlessui/vue'\nimport { computed } from 'vue'\nimport type { RouteLocationRaw } from 'vue-router'\nimport { RouterLink } from 'vue-router'\nimport { tabVariants } from '@/components/tabs/appTabs.style'\nimport { fadeTransition } from '@/transitions'\n\nconst { to } = defineProps<{\n  /**\n   * Whether the tab is active.\n   */\n  isActive: boolean\n  /**\n   * Route name to link to.\n   */\n  to?: RouteLocationRaw\n\n}>()\ndefineSlots<{\n  /**\n   * Slot inside of Tab, should contain Tab.\n   */\n  default: void\n}>()\n\nconst isRouter = computed(() => !!to)\n</script>\n\n<template>\n  <Component\n    :is=\"isRouter ? RouterLink : Tab\"\n    :to=\"to\"\n    class=\"relative flex flex-1\"\n    :class=\"tabVariants()\"\n  >\n    <slot />\n    <Transition v-bind=\"fadeTransition\">\n      <div v-if=\"isActive\" class=\"absolute bottom-0 left-0 h-0.5 w-full translate-y-px bg-primary\" />\n    </Transition>\n  </Component>\n</template>\n"
      },
      {
        "name": "appTabs.style.ts",
        "dir": "./src/components/tabs",
        "placementDir": "tabs",
        "type": "components",
        "content": "import type { VariantProps } from '@/utils/tailwind/cva'\nimport { cva } from '@/utils/tailwind/cva'\n\nexport const tabVariants = cva(\n  {\n    base: 'rounded-t-button border border-transparent border-b-neutral-200  px-4 py-2 text-foreground outline-none duration-100 first-letter:rounded-t-button focus-visible:border-primary',\n    variants: {\n    },\n  },\n)\n\nexport type TabProps = VariantProps<typeof tabVariants>\n"
      },
      {
        "name": "useTabsQuery.ts",
        "dir": "./src/composables/tabs",
        "placementDir": "tabs",
        "type": "composables",
        "content": "import type { Ref } from 'vue'\nimport { watch } from 'vue'\nimport { useRouteQuery } from '@vueuse/router'\n\nexport interface TabQueryParams {\n  tabId?: string | null\n  selectedTab: Ref<number | null>\n}\n\nexport function useTabQuery({ tabId = null, selectedTab }: TabQueryParams): void {\n  const query = useRouteQuery<string>(`tab-${tabId ?? 'default'}`)\n  let isInitialized = false\n  if (query !== null)\n    selectedTab.value = Number(query.value)\n\n  const setTabQuery = (value: number | null): void => {\n    query.value = value?.toString() ?? ''\n  }\n\n  watch(query, (value) => {\n    if (value === null)\n      return\n    isInitialized = true\n    selectedTab.value = Number(value)\n  }, { immediate: true })\n\n  watch(selectedTab, (value) => {\n    if (!isInitialized)\n      return\n    setTabQuery(value)\n  })\n}\n"
      }
    ],
    "internalDependencies": [],
    "dependencies": [
      "@vueuse/router"
    ]
  },
  {
    "component": "AppText",
    "name": "Text",
    "files": [
      {
        "name": "AppText.vue",
        "dir": "./src/components/text",
        "placementDir": "text",
        "type": "components",
        "content": "<script setup lang=\"ts\">\nimport { useAttrs } from 'vue'\nimport { textVariants } from '@/components/text/appText.style'\nimport type { TextProps } from '@/components/text/appText.style'\n\ntype TextType = 'p' | 'span' | 'h1' | 'h2' | 'h3' | 'h4' | 'h5' | 'h6' | 'div' | 'blockquote'\n\ninterface Props {\n  /**\n   * The variant of the text.\n   */\n  variant?: TextProps['variant']\n\n  /**\n   * The boldness of the text.\n   */\n  boldness?: TextProps['boldness']\n\n  /**\n   * The number of lines to truncate the text.\n   */\n  numberOfLines?: TextProps['truncate']\n\n  /**\n   * The HTML tag to use for the text.\n   */\n  as?: TextType\n}\n\nconst {\n  variant = 'body',\n  numberOfLines,\n  boldness,\n  as = 'p',\n} = defineProps<Props>()\n\nconst attrs = useAttrs()\n</script>\n\n<template>\n  <Component :is=\"as\" :class=\"textVariants({ variant, boldness, truncate: numberOfLines, class: attrs?.class as string })\">\n    <slot />\n  </Component>\n</template>\n"
      },
      {
        "name": "appText.style.ts",
        "dir": "./src/components/text",
        "placementDir": "text",
        "type": "components",
        "content": "import type { VariantProps } from '@/utils/tailwind/cva'\nimport { cva } from '@/utils/tailwind/cva'\n\nexport const variantOptions = {\n  hero: 'text-hero',\n  title: 'text-title',\n  subtitle: 'text-subtitle',\n  heading: 'text-heading',\n  body: 'text-body',\n  subtext: 'text-subtext',\n  caption: 'text-caption',\n}\n\nexport const boldnessOptions = {\n  bold: 'font-bold',\n  normal: 'font-normal',\n  light: 'font-light',\n  thin: 'font-thin',\n  extrabold: 'font-extrabold',\n  semibold: 'font-semibold',\n  none: null,\n}\n\nexport const truncateOptions = {\n  1: 'line-clamp-1',\n  2: 'line-clamp-2',\n  3: 'line-clamp-3',\n  4: 'line-clamp-4',\n  5: 'line-clamp-5',\n  6: 'line-clamp-6',\n}\n\nexport const textVariants = cva(\n  {\n    base: null,\n    variants: {\n      variant: variantOptions,\n      boldness: boldnessOptions,\n      truncate: truncateOptions,\n    },\n    defaultVariants: {\n      variant: 'body',\n      boldness: 'none',\n      truncate: undefined,\n    },\n  },\n)\n\nexport type TextProps = VariantProps<typeof textVariants>\n\nexport const textVariantOptions = Object.keys(variantOptions)\nexport const textBoldnessOptions = Object.keys(boldnessOptions)\nexport const textTruncateOptions = Object.keys(truncateOptions)\n"
      },
      {
        "name": "AppTextDescription.vue",
        "dir": "./src/components/text",
        "placementDir": "text",
        "type": "components",
        "content": "<script setup lang=\"ts\">\nimport { useAttrs } from 'vue'\nimport { textVariants } from '@/components/text/appText.style'\nimport type { TextProps } from '@/components/text/appText.style'\nimport AppText from '@/components/text/AppText.vue'\n\ninterface Props {\n  /**\n   * The main text.\n   */\n  text: string\n\n  /**\n   * The subtext.\n   */\n  description?: string\n}\n\ndefineProps<Props>()\n</script>\n\n<template>\n  <div class=\"text-left\">\n    <AppText\n      variant=\"body\"\n    >\n      {{ text }}\n    </AppText>\n    <AppText\n      v-if=\"description\"\n      variant=\"subtext\"\n      class=\"text-muted-foreground\"\n    >\n      {{ description }}\n    </AppText>\n  </div>\n</template>\n"
      }
    ],
    "internalDependencies": []
  },
  {
    "component": "AppTooltip",
    "name": "Tooltip",
    "files": [
      {
        "name": "AppTooltip.vue",
        "dir": "./src/components/tooltip",
        "placementDir": "tooltip",
        "type": "components",
        "content": "<script lang=\"ts\" setup>\nimport { debouncedRef, onKeyDown, useFocusWithin } from '@vueuse/core'\nimport { onMounted, ref, watch } from 'vue'\nimport type { PopoverProps } from '@/components/popover/AppPopover.vue'\nimport AppPopover from '@/components/popover/AppPopover.vue'\n\ninterface Props extends Omit<PopoverProps, 'isManual'> {\n  hasManualElementBinding?: boolean\n  hasManualPanelBinding?: boolean\n  delay?: number\n}\n\nconst {\n  hasAdaptiveWidth,\n  hasAutoPlacement,\n  hasNoFlip,\n  hasNoShift,\n  hasNoOffset,\n  placement,\n  isDiv = true,\n  delay = 300,\n  hasManualElementBinding = false,\n  hasManualPanelBinding = false,\n} = defineProps<Props>()\n\nconst isPopoverShown = defineModel<boolean>({\n  default: false,\n})\n\nconst isPopoverShownDebounced = debouncedRef(isPopoverShown, delay)\nconst panelElement = ref<HTMLElement | null>(null)\nconst elementElement = ref<HTMLElement | null>(null)\nconst { focused: isFocusWithinPanel } = useFocusWithin(panelElement)\n\nconst isInPanel = ref<boolean>(false)\nconst isInElement = ref<boolean>(false)\n\nwatch(() => isFocusWithinPanel.value, (value) => {\n  if (value)\n    handleOpen()\n  else\n    handleClose()\n})\n\nfunction handleOpen(): void {\n  if (!isInPanel.value && !isInElement.value && !isFocusWithinPanel.value)\n    return\n  isPopoverShown.value = true\n}\n\nfunction handleClose(): void {\n  if (isInPanel.value || isInElement.value || isFocusWithinPanel.value)\n    return\n  isPopoverShown.value = false\n}\n\nfunction handleForceClose(): void {\n  isPopoverShown.value = false\n}\n\nfunction onElementFocus(): void {\n  isInElement.value = true\n  handleOpen()\n}\n\nfunction onElementBlur(): void {\n  isInElement.value = false\n  handleClose()\n}\n\nfunction onElementMouseOver(): void {\n  isInElement.value = true\n  handleOpen()\n}\n\nfunction onElementMouseLeave(): void {\n  isInElement.value = false\n  handleClose()\n}\n\nonKeyDown('Escape', handleForceClose)\n\nconst elementEvents = {\n  onFocus: onElementFocus,\n  onBlur: onElementBlur,\n  onmouseover: onElementMouseOver,\n  onmouseleave: onElementMouseLeave,\n}\n\nconst panelEvents = {\n  onmouseover: onPanelMouseOver,\n  onmouseleave: onPanelMouseLeave,\n}\n\nfunction onPanelMouseOver(): void {\n  isInPanel.value = true\n  handleOpen()\n}\n\nfunction onPanelMouseLeave(): void {\n  isInPanel.value = false\n  handleClose()\n}\n\nfunction addPanelEvents(): void {\n  if (hasManualPanelBinding)\n    return\n  panelElement.value?.addEventListener('mouseover', onPanelMouseOver)\n  panelElement.value?.addEventListener('mouseleave', onPanelMouseLeave)\n}\n\nwatch(() => panelElement.value, () => {\n  if (!panelElement.value)\n    return\n  panelElement.value.addEventListener('mouseover', onPanelMouseOver)\n  panelElement.value.addEventListener('mouseleave', onPanelMouseLeave)\n})\n\nfunction addElementEvents(): void {\n  if (hasManualElementBinding)\n    return\n  elementElement.value?.children[0]?.addEventListener('focus', onElementFocus)\n  elementElement.value?.children[0]?.addEventListener('blur', onElementBlur)\n  elementElement.value?.children[0]?.addEventListener('mouseover', onElementMouseOver)\n  elementElement.value?.children[0]?.addEventListener('mouseleave', onElementMouseLeave)\n}\n\nonMounted(() => {\n  addPanelEvents()\n  addElementEvents()\n})\n</script>\n\n<template>\n  <AppPopover\n    v-model=\"isPopoverShownDebounced\"\n    is-manual\n    class=\"max-w-max\"\n    v-bind=\"{\n      hasAdaptiveWidth,\n      hasAutoPlacement,\n      hasNoFlip,\n      hasNoShift,\n      hasNoOffset,\n      placement,\n      isDiv,\n    }\"\n  >\n    <template #element>\n      <div ref=\"elementElement\">\n        <slot\n          name=\"element\"\n          :events=\"elementEvents\"\n          :close=\"handleClose\"\n          :force-close=\"handleForceClose\"\n        />\n      </div>\n    </template>\n    <template #panel>\n      <div ref=\"panelElement\">\n        <slot\n          name=\"panel\"\n          :close=\"handleClose\"\n          :force-close=\"handleForceClose\"\n          :events=\"panelEvents\"\n        />\n      </div>\n    </template>\n  </AppPopover>\n</template>\n"
      }
    ],
    "internalDependencies": [
      "AppPopover"
    ]
  }
]