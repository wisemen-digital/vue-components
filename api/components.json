[
  {
    "component": "AppButton",
    "name": "Button",
    "files": [
      {
        "name": "AppButton.vue",
        "dir": "./src/components/app/button",
        "placementDir": "app/button",
        "type": "components",
        "content": "<script setup lang=\"ts\">\nimport AppIcon from '@/components/app/icon/AppIcon.vue'\nimport AppButtonLoader from '@/components/app/button/AppButtonLoader.vue'\nimport { buttonVariants } from '@/components/app/button/appButton.style'\nimport type { ButtonProps } from '@/components/app/button/appButton.style'\nimport type { Icon } from '@/icons'\n\ninterface Props {\n  isDisabled?: boolean\n  isLoading?: boolean\n  isRounded?: boolean\n  variant?: ButtonProps['variant']\n  size?: ButtonProps['size']\n  prefixIcon?: Icon\n  suffixIcon?: Icon\n}\n\nconst {\n  variant = 'default',\n  size = 'default',\n  isDisabled = false,\n  isLoading = false,\n  prefixIcon,\n  suffixIcon,\n} = defineProps<Props>()\n\nconst emits = defineEmits(['component:click'])\n\nfunction handleClick(): void {\n  if (!isDisabled && !isLoading)\n    emits('component:click')\n}\n</script>\n\n<template>\n  <button :class=\"buttonVariants({ variant, size, isRounded })\" @click=\"handleClick\">\n    <div :class=\"{ 'opacity-30': isLoading }\" class=\"flex items-center gap-2 whitespace-nowrap transition-opacity\">\n      <slot name=\"prefix\">\n        <AppIcon v-if=\"prefixIcon\" :icon=\"prefixIcon\" />\n      </slot>\n      <slot />\n      <slot name=\"suffix\">\n        <AppIcon v-if=\"suffixIcon\" :icon=\"suffixIcon\" />\n      </slot>\n    </div>\n    <AppButtonLoader :is-loading=\"isLoading\" />\n  </button>\n</template>\n"
      },
      {
        "name": "appButton.style.ts",
        "dir": "./src/components/app/button",
        "placementDir": "app/button",
        "type": "components",
        "content": "import type { VariantProps } from '@/utils/tailwind/cva'\nimport { cva } from '@/utils/tailwind/cva'\n\nexport const variantOptions = {\n  default: 'bg-primary text-primary-foreground hover:bg-primary/90',\n  destructive: 'bg-destructive text-destructive-foreground hover:bg-destructive/90 shadow-focus-destructive',\n  outline: 'border border-primary hover:bg-secondary text-secondary-foreground',\n  secondary: 'bg-secondary text-secondary-foreground hover:bg-secondary/80',\n  ghost: 'hover:bg-secondary text-secondary-foreground',\n  link: 'text-primary underline-offset-4 hover:underline',\n}\n\nexport const sizeOptions = {\n  icon: 'h-10 p-3 w-10',\n  default: 'h-10 px-4 py-2',\n  sm: 'h-9 rounded px-3',\n  lg: 'h-11 rounded px-8',\n}\n\nexport const loaderVariantOptions = {\n  white: 'bg-white',\n  primary: 'bg-primary',\n}\n\nexport const buttonVariants = cva(\n  {\n    base: 'relative inline-flex items-center justify-center rounded text-subtext font-medium text-destructive-foreground transition-colors disabled:pointer-events-none disabled:opacity-50',\n    variants: {\n      variant: variantOptions,\n      size: sizeOptions,\n      isRounded: {\n        true: 'rounded-full',\n        false: null,\n      },\n    },\n    defaultVariants: {\n      variant: 'default',\n      size: 'default',\n    },\n  },\n)\n\nexport type ButtonProps = VariantProps<typeof buttonVariants>\n\nexport const buttonVariantOptions = Object.keys(variantOptions)\nexport const buttonSizeOptions = Object.keys(sizeOptions)\n"
      },
      {
        "name": "AppButtonLoader.vue",
        "dir": "./src/components/app/button",
        "placementDir": "app/button",
        "type": "components",
        "content": "<script setup lang=\"ts\">\nimport { fadeTransition } from '@/transitions'\n\ninterface Props {\n  isLoading: boolean\n}\nconst {\n  isLoading,\n} = defineProps<Props>()\n</script>\n\n<template>\n  <!-- eslint-disable tailwindcss/no-custom-classname -->\n  <Transition v-bind=\"fadeTransition\">\n    <div v-if=\"isLoading\" class=\"absolute left-1/2 top-1/2 -translate-x-1/2 -translate-y-1/2\">\n      <div class=\"relative inline-block h-2.5 w-10\">\n        <div\n          v-for=\"i in 4\" :key=\"i\" class=\"orb bg-current shadow-focus absolute top-[1px] h-2 w-2 rounded-full\"\n        />\n      </div>\n    </div>\n  </Transition>\n</template>\n\n<style lang=\"scss\" scoped>\n.orb:nth-child(1) {\n  left: 4px;\n  animation: lds-ellipsis1 0.6s infinite;\n}\n\n.orb:nth-child(2) {\n  left: 4px;\n  animation: lds-ellipsis2 0.6s infinite;\n}\n\n.orb:nth-child(3) {\n  left: 16px;\n  animation: lds-ellipsis2 0.6s infinite;\n}\n\n.orb:nth-child(4) {\n  left: 28px;\n  animation: lds-ellipsis3 0.6s infinite;\n}\n\n@keyframes lds-ellipsis1 {\n  0% {\n    transform: scale(0);\n  }\n\n  100% {\n    transform: scale(1);\n  }\n}\n\n@keyframes lds-ellipsis3 {\n  0% {\n    transform: scale(1);\n  }\n\n  100% {\n    transform: scale(0);\n  }\n}\n\n@keyframes lds-ellipsis2 {\n  0% {\n    transform: translate(0, 0);\n  }\n\n  100% {\n    transform: translate(12px, 0);\n  }\n}\n</style>\n"
      }
    ],
    "internalDependencies": []
  },
  {
    "component": "FormError",
    "name": "FormError",
    "files": [
      {
        "name": "FormError.vue",
        "dir": "./src/components/form/error",
        "placementDir": "form/errors",
        "type": "components",
        "content": "<script setup lang=\"ts\">\ninterface Props {\n  errorMessage?: string\n}\nconst { errorMessage } = defineProps<Props>()\n</script>\n\n<template>\n  <p class=\"text-subtext text-destructive\">\n    <slot>\n      {{ errorMessage }}\n    </slot>\n  </p>\n</template>\n"
      }
    ]
  },
  {
    "component": "FormInputField",
    "name": "FormInputField",
    "files": [
      {
        "name": "FormInputField.vue",
        "dir": "./src/components/form/field",
        "placementDir": "form/field",
        "type": "components",
        "content": "<script setup lang=\"ts\" generic=\"TModel extends string | number | undefined\">\nimport { useClipboard } from '@vueuse/core'\nimport type { Ref } from 'vue'\nimport { computed, ref } from 'vue'\nimport FormError from '@/components/form/error/FormError.vue'\nimport type { InputFieldProps } from '@/components/form/field/formInputField.style'\nimport { inputFieldExtraContentVariants, inputFieldVariants } from '@/components/form/field/formInputField.style'\nimport { generateUuid } from '@/utils/uuid/generateUuid'\nimport { useFormInputGroup } from '@/composables/form/group/useFormInputGroup'\nimport type { Icon } from '@/icons'\nimport AppIcon from '@/components/app/icon/AppIcon.vue'\nimport TransitionExpand from '@/components/app/transitions/TransitionExpand.vue'\n\ninterface Props {\n  isSuccess?: boolean\n  isReadOnly?: boolean\n  isDisabled?: boolean\n  isTouched?: boolean\n  isDirty?: boolean\n  isCopyable?: boolean\n  isOptional?: boolean\n  hasExtraContentBorder?: boolean\n  placeholder?: string\n  type?: TModel extends number ? 'number' : 'text' | 'password' | 'email' | 'tel' | 'url' | 'search'\n  label?: string\n  errors?: { _errors: string[] }\n  backContent?: string\n  frontContent?: string\n  backIcon?: Icon\n  frontIcon?: Icon\n}\n\nconst {\n  isSuccess = false,\n  isReadOnly = false,\n  isDisabled = false,\n  isTouched = false,\n  isDirty = false,\n  isCopyable = false,\n  placeholder,\n  backContent,\n  frontContent,\n  backIcon,\n  frontIcon,\n  label,\n  errors = { _errors: [] },\n  type = 'text',\n} = defineProps<Props>()\n\nconst emits = defineEmits<{\n  blur: []\n}>()\n\nconst slots = defineSlots<{\n  label?: () => any\n  frontContent?: () => any\n  backContent?: () => any\n}>()\nconst model = defineModel<TModel>()\nconst uuid = generateUuid()\nconst element = ref<HTMLElement>()\n\nconst errorShown = computed(() => errors._errors.length > 0 && (isTouched || isDirty))\n\n// Extra content logic\nconst hasFrontContent = computed(() => frontContent || slots.frontContent || frontIcon)\nconst hasBackContent = computed(() => backContent || slots.backContent || backIcon || isCopyable || type === 'password')\nconst currentExtraContent = computed<InputFieldProps['extraContent']>(() => {\n  if (hasFrontContent.value && hasBackContent.value)\n    return 'both'\n  if (hasFrontContent.value)\n    return 'front'\n  if (hasBackContent.value)\n    return 'back'\n  return 'default'\n})\n\n// Input status logic\nconst currentStatus = computed<InputFieldProps['status']>(() => {\n  if (errorShown.value)\n    return 'error'\n  if (isSuccess)\n    return 'success'\n  if (isReadOnly)\n    return 'readonly'\n  if (isDisabled)\n    return 'disabled'\n  return 'default'\n})\n\n// Copy logic\nconst copyModel = computed(() => model.value?.toString() ?? '')\nconst { copy } = useClipboard()\n\n// Adds grouping logic if a wrapped in FormGroup component\nif (type === 'number')\n  useFormInputGroup({ model: model as Ref<number>, element, uuid, isDisabled: computed(() => isDisabled) })\n\n// Password logic\nconst passwordShown = ref(false)\nfunction togglePasswordShown(): void {\n  passwordShown.value = !passwordShown.value\n}\nconst inputType = computed<string>(() => (type === 'password' && passwordShown.value) ? 'text' : type)\n</script>\n\n<template>\n  <div ref=\"element\">\n    <!-- Label -->\n    <div class=\"flex items-center justify-between gap-4\">\n      <label :for=\"uuid\">\n        <slot name=\"label\">\n          {{ label }}\n        </slot>\n      </label>\n      <p v-if=\"isOptional\" class=\"text-caption text-muted-foreground\">\n        Optional\n      </p>\n    </div>\n\n    <div class=\"flex\">\n      <!-- Content before the input -->\n      <div\n        v-if=\"hasFrontContent\" :class=\"\n          inputFieldExtraContentVariants(\n            {\n              extraContentType: 'front',\n              status: currentStatus,\n              extraContentBorder: hasExtraContentBorder,\n            },\n          )\"\n      >\n        <slot name=\"frontContent\">\n          <AppIcon v-if=\"frontIcon\" :icon=\"frontIcon\" />\n          <div v-else-if=\"frontContent\">\n            {{ frontContent }}\n          </div>\n        </slot>\n      </div>\n\n      <!-- Input -->\n      <input\n        :id=\"uuid\" v-model=\"model\" :disabled=\"isDisabled\" :type=\"inputType\" min=\"0\"\n        :class=\"inputFieldVariants({ status: currentStatus, extraContent: currentExtraContent })\"\n        :placeholder=\"placeholder\" :readonly=\"isReadOnly\" @blur=\"emits('blur')\"\n      >\n\n      <!-- Content after the input -->\n      <div\n        v-if=\"hasBackContent\" :class=\"\n          inputFieldExtraContentVariants(\n            {\n              extraContentType: 'back',\n              status: currentStatus,\n              extraContentBorder: hasExtraContentBorder,\n            },\n          )\"\n      >\n        <slot name=\"backContent\">\n          <button v-if=\"type === 'password'\" @click=\"togglePasswordShown\">\n            <AppIcon v-if=\"passwordShown\" icon=\"eyeSlash\" />\n            <AppIcon v-else icon=\"eye\" />\n          </button>\n          <button v-else-if=\"isCopyable\" @click=\"copy(copyModel)\">\n            Copy\n          </button>\n          <AppIcon v-else-if=\"backIcon\" :icon=\"backIcon\" />\n          <div v-else-if=\"backContent\">\n            {{ backContent }}\n          </div>\n        </slot>\n      </div>\n    </div>\n    <!-- Error -->\n    <TransitionExpand :duration=\"0.2\">\n      <FormError v-if=\"errorShown\" :error-message=\"errors._errors[0]\" />\n    </TransitionExpand>\n  </div>\n</template>\n"
      },
      {
        "name": "formInputField.style.ts",
        "dir": "./src/components/form/field",
        "placementDir": "form/field",
        "type": "components",
        "content": "import type { VariantProps } from '@/utils/tailwind/cva'\nimport { cva } from '@/utils/tailwind/cva'\n\nexport const statusOptions = {\n  default: 'border-border',\n  error: 'border-destructive',\n  success: 'border-success',\n  readonly: 'bg-muted text-muted-foreground',\n  disabled: 'opacity-60',\n}\n\nexport const extraContentOptions = {\n  default: '',\n  back: 'rounded-r-none border-r-0',\n  front: 'rounded-l-none border-l-0',\n  both: 'rounded-l-none border-l-0 rounded-r-none border-r-0',\n}\n\nexport const inputFieldVariants = cva(\n  {\n    base: 'relative w-full rounded border border-border bg-input px-4 py-2 placeholder:transition-all placeholder:duration-300 focus:placeholder:translate-x-1 focus:placeholder:opacity-0',\n    variants: {\n      status: statusOptions,\n      extraContent: extraContentOptions,\n    },\n    defaultVariants: {\n      status: 'default',\n      extraContent: 'default',\n    },\n  },\n)\n\nexport const extraContentTypes = {\n  back: 'rounded-l-none border-l-0',\n  front: 'rounded-r-none border-r-0',\n}\n\nexport const extraContentBorderOptions = {\n  true: '',\n  false: '',\n}\n\nexport const inputFieldExtraContentVariants = cva(\n  {\n    base: 'flex items-center justify-center rounded border border-border bg-input px-4',\n    variants: {\n      status: statusOptions,\n      extraContentType: extraContentTypes,\n      extraContentBorder: extraContentBorderOptions,\n    },\n    compoundVariants: [\n      {\n        extraContentBorder: true,\n        extraContentType: 'front',\n        class: 'border-r',\n      },\n      {\n        extraContentBorder: true,\n        extraContentType: 'back',\n        class: 'border-l',\n      },\n    ],\n    defaultVariants: {\n      extraContentType: 'back',\n    },\n  },\n)\n\nexport type InputFieldProps = VariantProps<typeof inputFieldVariants>\nexport const inputFieldStatusOptions = Object.keys(statusOptions)\n"
      }
    ],
    "internalDependencies": [
      "FormError",
      "FormInputGroupComposable",
      "TransitionExpand",
      "UtilsGenerateUuid"
    ],
    "dependencies": [
      "@vueuse/core"
    ]
  },
  {
    "component": "FormInputGroupComposable",
    "name": "FormInputGroupComposable",
    "files": [
      {
        "name": "useFormInputGroup.ts",
        "dir": "./src/composables/form/group",
        "placementDir": "form/group",
        "type": "composables",
        "content": "import type { Ref } from 'vue'\nimport { computed, onMounted, onUnmounted, ref, watch } from 'vue'\nimport { useFormInputGroupContext } from '@/composables/form/group/useFormInputGroupContext'\nimport type { Option } from '@/composables/form/group/useFormInputGroupContext'\n\nexport interface UseFormInputGroupParams {\n  model: Ref<number | null>\n  isDisabled?: Ref<boolean>\n  uuid: string\n  element: Ref<HTMLElement | undefined>\n}\n\nexport function useFormInputGroup({ model, uuid, isDisabled, element }: UseFormInputGroupParams): void {\n  const context = useFormInputGroupContext()\n  const propsRef = computed(() => ({\n    value: typeof model.value === 'number' ? model.value : 0,\n    disabled: isDisabled?.value,\n  }))\n  const option: Option = ref({ id: uuid, element: element.value, propsRef: propsRef.value }) as Option\n\n  const change = (value: number): void => {\n    if (isDisabled?.value || !context)\n      return\n\n    const newValue = context.change(option, value)\n    model.value = newValue\n  }\n\n  watch(\n    () => model.value,\n    (value) => {\n      if (!value)\n        return\n      change(value)\n    },\n  )\n\n  onMounted(() => {\n    if (context)\n      context.registerOption(option)\n  })\n  onUnmounted(() => {\n    if (context)\n      context.unregisterOption(uuid)\n  })\n}\n"
      },
      {
        "name": "useFormInputGroupContext.ts",
        "dir": "./src/composables/form/group",
        "placementDir": "form/group",
        "type": "composables",
        "content": "import { inject } from 'vue'\nimport type { ComputedRef, InjectionKey, Ref } from 'vue'\n\nexport type Option = Ref<{ id: string, element: HTMLElement | undefined, propsRef: { value: number, disabled: boolean } }>\n\nexport interface FormInputGroupStateDefinition {\n  // State\n  valueMeasurement?: ComputedRef<string>\n  percentProgress?: ComputedRef<boolean>\n  valueProgress?: ComputedRef<boolean>\n  maxLabel?: ComputedRef<boolean>\n\n  options: Ref<Option[]>\n  maxValue: ComputedRef<number | undefined>\n  valueUsed: ComputedRef<number>\n\n  disabled: Ref<boolean>\n  change(option: Option, newValue: number): number | null\n  registerOption(action: Option): void\n  unregisterOption(id: string): void\n}\n\nexport const FormInputGroupContext = Symbol('FormGroupContext') as InjectionKey<FormInputGroupStateDefinition>\n\nexport function useFormInputGroupContext(): FormInputGroupStateDefinition | null {\n  const context = inject(FormInputGroupContext, null)\n  return context\n}\n"
      }
    ]
  },
  {
    "component": "UtilsGenerateUuid",
    "name": "GenerateUuid",
    "files": [
      {
        "name": "generateUuid.ts",
        "dir": "./src/utils/uuid",
        "placementDir": "uuid",
        "type": "utils",
        "content": "export function generateUuid(): string { // Public Domain/MIT\n  let d = new Date().getTime()// Timestamp\n  let d2 = ((typeof performance !== 'undefined') && performance.now && (performance.now() * 1000)) || 0// Time in microseconds since page-load or 0 if unsupported\n  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, (c) => {\n    let r = Math.random() * 16// random number between 0 and 16\n    if (d > 0) { // Use timestamp until depleted\n      r = (d + r) % 16 | 0\n      d = Math.floor(d / 16)\n    }\n    else { // Use microseconds since page-load if supported\n      r = (d2 + r) % 16 | 0\n      d2 = Math.floor(d2 / 16)\n    }\n    return (c === 'x' ? r : (r & 0x3 | 0x8)).toString(16)\n  })\n}\n"
      }
    ]
  },
  {
    "component": "AppIcon",
    "name": "Icon",
    "files": [
      {
        "name": "AppIcon.vue",
        "dir": "./src/components/app/icon",
        "placementDir": "app/icon",
        "type": "components",
        "content": "<script setup lang=\"ts\">\nimport { twMerge } from 'tailwind-merge'\nimport { computed, useAttrs } from 'vue'\nimport { icons } from '@/icons'\nimport type { Icon } from '@/icons'\nimport type { IconProps } from '@/components/app/icon/appIcon.style'\nimport { iconVariants } from '@/components/app/icon/appIcon.style'\n\ninterface Props {\n  icon: Icon\n  size?: IconProps['size']\n}\n\nconst { icon, size = 'default' } = defineProps<Props>()\n\nconst attrs = useAttrs()\n\nconst iconComponent = computed(() => icons[icon])\n</script>\n\n<template>\n  <Component :is=\"iconComponent\" :class=\"twMerge(iconVariants({ size }), attrs?.class as string)\" />\n</template>\n"
      },
      {
        "name": "appIcon.style.ts",
        "dir": "./src/components/app/icon",
        "placementDir": "app/icon",
        "type": "components",
        "content": "import type { VariantProps } from '@/utils/tailwind/cva'\nimport { cva } from '@/utils/tailwind/cva'\n\nexport const sizeOptions = {\n  default: 'h-6',\n  sm: 'h-4',\n  lg: 'h-8',\n}\n\nexport const iconVariants = cva(\n  {\n    base: null,\n    variants: {\n      size: sizeOptions,\n    },\n    defaultVariants: {\n      size: 'default',\n    },\n  },\n)\n\nexport type IconProps = VariantProps<typeof iconVariants>\n\nexport const iconSizeOptions = Object.keys(sizeOptions)\n"
      }
    ],
    "internalDependencies": []
  },
  {
    "component": "AppModal",
    "name": "Modal",
    "files": [
      {
        "name": "AppModal.vue",
        "dir": "./src/components/app/modal",
        "placementDir": "app/modal",
        "type": "components",
        "content": "<script setup lang=\"ts\">\nimport {\n  Dialog,\n  DialogPanel,\n  TransitionChild,\n  TransitionRoot,\n} from '@headlessui/vue'\nimport type { ModalProps } from '@/components/app/modal/appModal.style'\nimport { modalVariants } from '@/components/app/modal/appModal.style'\nimport { modalBackgroundTransition, modalTransition } from '@/transitions'\nimport { useProvideModalContext } from '@/composables/app/modal/useModalContext'\n\ninterface Props {\n  hasIrremovableMask?: boolean\n  size?: ModalProps['size']\n}\n\nconst {\n  hasIrremovableMask = false,\n  size = 'default',\n} = defineProps<Props>()\n\ndefineSlots<{\n  default: (props: { close: () => void }) => any\n}>()\n\nuseProvideModalContext({\n  close: handleCloseModal,\n})\n\nconst isOpen = defineModel<boolean>('isOpen', {\n  required: true,\n})\n\nfunction handleCloseModal(): void {\n  isOpen.value = false\n}\n\nfunction handleClickOutside(): void {\n  if (!hasIrremovableMask)\n    handleCloseModal()\n}\n</script>\n\n<template>\n  <TransitionRoot appear :show=\"isOpen\" as=\"template\">\n    <Dialog class=\"relative z-[999]\" @close=\"handleClickOutside\">\n      <TransitionChild\n        as=\"template\"\n        v-bind=\"modalBackgroundTransition\"\n      >\n        <div class=\"fixed inset-0 bg-black/25\" />\n      </TransitionChild>\n\n      <div class=\"fixed inset-0 flex min-h-full items-center justify-center overflow-y-auto\">\n        <TransitionChild\n          as=\"template\"\n          v-bind=\"modalTransition\"\n        >\n          <DialogPanel :class=\"modalVariants({ size })\">\n            <slot :close=\"handleCloseModal\" />\n          </DialogPanel>\n        </TransitionChild>\n      </div>\n    </Dialog>\n  </TransitionRoot>\n</template>\n"
      },
      {
        "name": "AppModalContent.vue",
        "dir": "./src/components/app/modal",
        "placementDir": "app/modal",
        "type": "components",
        "content": "<script setup lang=\"ts\">\nimport { twMerge } from '@/utils//tailwind/twMerge'\n\nconst props = defineProps<{\n  class?: string\n}>()\n</script>\n\n<template>\n  <div :class=\"twMerge('flex flex-col gap-1 p-4 pt-0', props.class)\">\n    <slot />\n  </div>\n</template>\n"
      },
      {
        "name": "AppModalFooter.vue",
        "dir": "./src/components/app/modal",
        "placementDir": "app/modal",
        "type": "components",
        "content": "<script setup lang=\"ts\">\nimport { twMerge } from '@/utils//tailwind/twMerge'\n\nconst props = defineProps<{\n  class?: string\n}>()\n</script>\n\n<template>\n  <div :class=\"twMerge('flex flex-col gap-1 p-4 pt-0', props.class)\">\n    <slot />\n  </div>\n</template>\n"
      },
      {
        "name": "AppModalHeader.vue",
        "dir": "./src/components/app/modal",
        "placementDir": "app/modal",
        "type": "components",
        "content": "<script setup lang=\"ts\">\nimport { DialogTitle } from '@headlessui/vue'\nimport AppIcon from '@/components/app/icon/AppIcon.vue'\nimport { twMerge } from '@/utils//tailwind/twMerge'\nimport { useModalContext } from '@/composables/app/modal/useModalContext'\n\ninterface Props {\n  hideCloseButton?: boolean\n  class?: string\n}\n\nconst props = defineProps<Props>()\nconst { close } = useModalContext()\n\nfunction handleClickCloseButton(): void {\n  close()\n}\n</script>\n\n<template>\n  <div :class=\"twMerge('flex p-4 justify-between gap-4', props.class)\">\n    <DialogTitle>\n      <slot />\n    </DialogTitle>\n    <div v-if=\"!hideCloseButton\">\n      <button @click=\"handleClickCloseButton\">\n        <AppIcon icon=\"close\" />\n      </button>\n    </div>\n  </div>\n</template>\n"
      },
      {
        "name": "AppModalTitle.vue",
        "dir": "./src/components/app/modal",
        "placementDir": "app/modal",
        "type": "components",
        "content": "<script setup lang=\"ts\">\nimport AppText from '@/components/app/text/AppText.vue'\n</script>\n\n<template>\n  <AppText variant=\"heading\">\n    <slot />\n  </AppText>\n</template>\n"
      },
      {
        "name": "AppModalDescription.vue",
        "dir": "./src/components/app/modal",
        "placementDir": "app/modal",
        "type": "components",
        "content": "<script setup lang=\"ts\">\nimport AppText from '@/components/app/text/AppText.vue'\n</script>\n\n<template>\n  <AppText variant=\"body\" class=\"text-muted-foreground\">\n    <slot />\n  </AppText>\n</template>\n"
      },
      {
        "name": "appModal.style.ts",
        "dir": "./src/components/app/modal",
        "placementDir": "app/modal",
        "type": "components",
        "content": "import type { VariantProps } from '@/utils/tailwind/cva'\nimport { cva } from '@/utils/tailwind/cva'\n\nexport const sizeOptions = {\n  default: 'w-[80ch] ',\n  sm: 'w-[60ch]',\n  full: 'w-full',\n  lg: 'w-[120ch]',\n}\n\nexport const modalVariants = cva(\n  {\n    base: 'flex flex-col rounded-modal bg-popover text-left text-popover-foreground shadow-modal-shadow',\n    variants: {\n      size: sizeOptions,\n    },\n    defaultVariants: {\n      size: 'default',\n    },\n  },\n)\n\nexport type ModalProps = VariantProps<typeof modalVariants>\nexport const modalSizeOptions = Object.keys(sizeOptions)\n"
      },
      {
        "name": "useModal.ts",
        "dir": "./src/composables/app/modal",
        "placementDir": "app/modal",
        "type": "composables",
        "content": "import type { Ref } from 'vue'\nimport { onUnmounted, ref, watch } from 'vue'\nimport type { RenderedModal, UseModalOptions, UseModalReturnType } from '@/composables/app/modal/useModal.type'\nimport { generateUuid } from '@/utils/uuid/generateUuid'\n\nconst renderedModals = ref<RenderedModal[]>([])\n\nexport function useModalContainer(): {\n  modals: Ref<RenderedModal[]>\n} {\n  return { modals: renderedModals }\n}\n\nexport function useModal<P>({ component, attrs }: UseModalOptions<P>): UseModalReturnType {\n  const id = generateUuid()\n  let onOpenCb: (() => void) | null = null\n  let onCloseCb: (() => void) | null = null\n\n  const onOpen = (cb: () => void): void => {\n    onOpenCb = cb\n  }\n\n  const onClose = (cb: () => void): void => {\n    onCloseCb = cb\n  }\n\n  const modal = ref<RenderedModal>({\n    id,\n    component,\n    attrs,\n    isOpen: false,\n  })\n\n  renderedModals.value.push(modal.value)\n\n  const open = (): void => {\n    modal.value.isOpen = true\n    onOpenCb?.()\n  }\n\n  const close = (): void => {\n    modal.value.isOpen = false\n    onCloseCb?.()\n  }\n\n  const moveToTop = (): void => {\n    renderedModals.value = renderedModals.value.filter(modal => modal.id !== id).concat(modal.value)\n  }\n\n  const moveToBottom = (): void => {\n    renderedModals.value = [modal.value].concat(renderedModals.value.filter(modal => modal.id !== id))\n  }\n\n  const destroy = (): void => {\n    renderedModals.value = renderedModals.value.filter(modal => modal.id !== id)\n  }\n\n  watch(() => modal.value.isOpen, (isOpen) => {\n    if (isOpen)\n      onOpenCb?.()\n    else\n      onCloseCb?.()\n  })\n\n  onUnmounted(() => {\n    destroy()\n  })\n\n  return {\n    open,\n    close,\n    destroy,\n    moveToTop,\n    moveToBottom,\n    onOpen,\n    onClose,\n  }\n}\n"
      },
      {
        "name": "useModalContext.ts",
        "dir": "./src/composables/app/modal",
        "placementDir": "app/modal",
        "type": "composables",
        "content": "import { inject, provide } from 'vue'\n\nimport type { InjectionKey } from 'vue'\n\ninterface ModalContext {\n  close: () => void\n}\n\nexport const modalContext = Symbol('ModalContext') as InjectionKey<{\n  close: () => void\n}>\n\nexport function useModalContext(): ModalContext {\n  const context = inject(modalContext, null)\n\n  if (context === null) {\n    const err = new Error('Component is missing a parent <AppModal /> component.')\n    throw err\n  }\n\n  return context\n}\n\nexport function useProvideModalContext(context: ModalContext): void {\n  provide(modalContext, context)\n}\n"
      },
      {
        "name": "useModal.type.ts",
        "dir": "./src/composables/app/modal",
        "placementDir": "app/modal",
        "type": "composables",
        "content": "export interface Constructor<P = any> {\n  __isFragment?: never\n  __isTeleport?: never\n  __isSuspense?: never\n  new (...args: any[]): { $props: P }\n}\n\nexport interface UseModalOptions<P> {\n  component: Constructor<P>\n  attrs?: (Omit<P, 'isOpen'>) | (object extends P ? null : never)\n}\n\nexport interface UseModalReturnType {\n  open: () => void\n  close: () => void\n  moveToTop: () => void\n  moveToBottom: () => void\n  destroy: () => void\n  onOpen: (cb: () => void) => void\n  onClose: (cb: () => void) => void\n}\n\nexport interface RenderedModal extends UseModalOptions<any> {\n  id: string\n  isOpen: boolean\n}\n"
      },
      {
        "name": "AppModal.story.vue",
        "dir": "./src/components/app/modal",
        "placementDir": "app/modal",
        "type": "components",
        "content": "<script setup lang=\"ts\">\nimport { reactive } from 'vue'\nimport AppModal from '@/components/app/modal/AppModal.vue'\nimport AppButton from '@/components/app/button/AppButton.vue'\nimport type { ModalProps } from '@/components/app/modal/appModal.style'\nimport { modalSizeOptions } from '@/components/app/modal/appModal.style'\n\nimport AppModalHeader from '@/components/app/modal/AppModalHeader.vue'\nimport AppModalTitle from '@/components/app/modal/AppModalTitle.vue'\nimport AppModalDescription from '@/components/app/modal/AppModalDescription.vue'\nimport AppModalContent from '@/components/app/modal/AppModalContent.vue'\nimport AppModalFooter from '@/components/app/modal/AppModalFooter.vue'\n\ninterface State {\n  isOpen: boolean\n  hideCloseButton?: boolean\n  hasIrremovableMask?: boolean\n  title?: string\n  content?: string\n  description?: string\n  size?: ModalProps['size']\n}\n\nconst state = reactive<State>({\n  isOpen: false,\n  hideCloseButton: false,\n  hasIrremovableMask: false,\n  title: 'Modal title',\n  description: 'Description here',\n  content: 'Content here Lorem ipsum dolor sit amet consectetur adipisicing elit. Error temporibus nulla ab eius enim similique atque officia? Porro consectetur, ea iusto perspiciatis ullam nisi minus, inventore iste quisquam placeat nemo?Lorem ipsum dolor sit amet consectetur adipisicing elit. In quidem ullam ipsam minima, vitae commodi expedita corporis aliquid illum quis laudantium adipisci laboriosam est maxime quae enim aliquam sed ipsa.Lorem, ipsum dolor sit amet consectetur adipisicing elit. Nam iste, adipisci sapiente odit beatae architecto aspernatur perferendis quis. Esse dicta, minima non aperiam sunt ad veniam ab velit officiis magni.',\n})\n\nfunction handleClick(): void {\n  state.isOpen = true\n}\n</script>\n\n<template>\n  <Story\n    title=\"App/Modals/AppModal\"\n  >\n    <Variant title=\"Default\" auto-props-disabled>\n      <template #controls>\n        <HstCheckbox v-model=\"state.isOpen\" title=\"Open\" />\n        <HstCheckbox v-model=\"state.hideCloseButton\" title=\"No close button\" />\n        <HstCheckbox v-model=\"state.hasIrremovableMask\" title=\"Not dismissable\" />\n        <HstSelect v-model=\"state.size\" title=\"Size\" :options=\"modalSizeOptions\" />\n\n        <HstText v-model=\"state.title\" title=\"Title\" />\n        <HstText v-model=\"state.description\" title=\"Description\" />\n\n        <HstTextarea v-model=\"state.content\" title=\"Content\" />\n      </template>\n\n      <AppButton @component:click=\"handleClick\">\n        Click me\n      </AppButton>\n      <AppModal\n        v-model:is-open=\"state.isOpen\" :size=\"state.size\"\n        :has-irremovable-mask=\"state.hasIrremovableMask\"\n      >\n        <template #default=\"{ close }\">\n          <AppModalHeader :close=\"close\" :hide-close-button=\"state.hideCloseButton\">\n            <AppModalTitle>\n              {{ state.title }}\n            </AppModalTitle>\n            <AppModalDescription>\n              {{ state.content }}\n            </AppModalDescription>\n          </AppModalHeader>\n          <AppModalContent>\n            {{ state.content }}\n          </AppModalContent>\n          <AppModalFooter>\n            <div class=\"flex justify-end gap-2\">\n              <AppButton variant=\"ghost\" @click=\"close\">\n                Cancel\n              </AppButton>\n              <AppButton @click=\"close\">\n                Confirm\n              </AppButton>\n            </div>\n          </AppModalFooter>\n        </template>\n      </AppModal>\n    </Variant>\n  </Story>\n</template>\n"
      }
    ],
    "dependencies": [
      "@headlessui/vue"
    ],
    "internalDependencies": [
      "AppText",
      "AppButton",
      "AppIcon"
    ]
  },
  {
    "component": "AppPopover",
    "name": "Popover",
    "files": [
      {
        "name": "AppPopover.vue",
        "dir": "./src/components/app/popover",
        "placementDir": "app/popover",
        "type": "components",
        "content": "<script setup lang=\"ts\">\nimport type { FloatProps } from '@headlessui-float/vue'\nimport { Float } from '@headlessui-float/vue'\nimport { Popover, PopoverButton, PopoverPanel } from '@headlessui/vue'\nimport { popoverTransition } from '@/transitions'\n\nexport interface Props {\n  placement?: FloatProps['placement']\n\n  hasAdaptiveWidth?: FloatProps['adaptiveWidth']\n  hasNoOffset?: boolean\n  hasNoShift?: boolean\n  hasNoFlip?: boolean\n  hasAutoPlacement?: boolean\n}\n\nconst {\n  placement = 'bottom',\n\n  hasAdaptiveWidth = false,\n  hasAutoPlacement = false,\n  hasNoFlip = false,\n  hasNoOffset = false,\n  hasNoShift = false,\n} = defineProps<Props>()\n\nconst SHIFT_VALUE = 8\nconst OFFSET_VALUE = 4\nconst FLIP_VALUE = 8\n</script>\n\n<template>\n  <Popover>\n    <Float\n      :placement=\"placement\"\n      :adaptive-width=\"hasAdaptiveWidth\"\n      :auto-placement=\"hasAutoPlacement\"\n\n      :flip=\"hasNoFlip ? undefined : FLIP_VALUE\"\n      :shift=\"hasNoShift ? undefined : SHIFT_VALUE\"\n      :offset=\"hasNoOffset ? undefined : OFFSET_VALUE\"\n\n      portal\n      v-bind=\"popoverTransition\"\n      tailwindcss-origin-class\n    >\n      <PopoverButton as=\"div\" class=\"max-w-max\">\n        <slot name=\"activator\" />\n      </PopoverButton>\n\n      <PopoverPanel\n        v-slot=\"{ close }\"\n        class=\"rounded-popover border border-border bg-popover px-4 py-3 text-popover-foreground shadow-popover-shadow\"\n      >\n        <slot name=\"panel\" :close=\"close\" />\n      </PopoverPanel>\n    </Float>\n  </Popover>\n</template>\n"
      }
    ],
    "dependencies": [
      "@headlessui/vue",
      "@headlessui-float/vue"
    ]
  },
  {
    "component": "AppText",
    "name": "Text",
    "files": [
      {
        "name": "AppText.vue",
        "dir": "./src/components/app/text",
        "placementDir": "app/text",
        "type": "components",
        "content": "<script setup lang=\"ts\">\nimport { useAttrs } from 'vue'\nimport { textVariants } from '@/components/app/text/appText.style'\nimport type { TextProps } from '@/components/app/text/appText.style'\n\ntype TextType = 'p' | 'span' | 'h1' | 'h2' | 'h3' | 'h4' | 'h5' | 'h6' | 'div' | 'blockquote'\n\ninterface Props {\n  variant?: TextProps['variant']\n  boldness?: TextProps['boldness']\n  numberOfLines?: TextProps['truncate']\n  as?: TextType\n}\n\nconst {\n  variant = 'body',\n  numberOfLines,\n  boldness,\n  as = 'p',\n} = defineProps<Props>()\n\nconst attrs = useAttrs()\n</script>\n\n<template>\n  <Component :is=\"as\" :class=\"textVariants({ variant, boldness, truncate: numberOfLines, class: attrs?.class as string })\">\n    <slot />\n  </Component>\n</template>\n"
      },
      {
        "name": "appText.style.ts",
        "dir": "./src/components/app/text",
        "placementDir": "app/text",
        "type": "components",
        "content": "import type { VariantProps } from '@/utils/tailwind/cva'\nimport { cva } from '@/utils/tailwind/cva'\n\nexport const variantOptions = {\n  hero: 'text-hero',\n  title: 'text-title',\n  subtitle: 'text-subtitle',\n  heading: 'text-heading',\n  body: 'text-body',\n  subtext: 'text-subtext',\n  caption: 'text-caption',\n}\n\nexport const boldnessOptions = {\n  bold: 'font-bold',\n  normal: 'font-normal',\n  light: 'font-light',\n  thin: 'font-thin',\n  extrabold: 'font-extrabold',\n  semibold: 'font-semibold',\n  none: null,\n}\n\nexport const truncateOptions = {\n  1: 'line-clamp-1',\n  2: 'line-clamp-2',\n  3: 'line-clamp-3',\n  4: 'line-clamp-4',\n  5: 'line-clamp-5',\n  6: 'line-clamp-6',\n}\n\nexport const textVariants = cva(\n  {\n    base: null,\n    variants: {\n      variant: variantOptions,\n      boldness: boldnessOptions,\n      truncate: truncateOptions,\n    },\n    defaultVariants: {\n      variant: 'body',\n      boldness: 'none',\n      truncate: undefined,\n    },\n  },\n)\n\nexport type TextProps = VariantProps<typeof textVariants>\n\nexport const textVariantOptions = Object.keys(variantOptions)\nexport const textBoldnessOptions = Object.keys(boldnessOptions)\nexport const textTruncateOptions = Object.keys(truncateOptions)\n"
      }
    ],
    "internalDependencies": []
  },
  {
    "component": "TransitionExpand",
    "name": "TransitionExpand",
    "files": [
      {
        "name": "TransitionExpand.vue",
        "dir": "./src/components/app/transitions",
        "placementDir": "transitions",
        "type": "components",
        "content": "<script lang=\"ts\" setup>\nimport { computed } from 'vue'\n\ninterface Props {\n  duration?: number\n}\n\nconst props = withDefaults(defineProps<Props>(), {\n  duration: 0.5,\n})\n\nconst durationString = computed(() => `${props.duration}s`)\n\nfunction enter(element: Element): void {\n  const htmlElement: HTMLElement = element as HTMLElement\n  const width = getComputedStyle(htmlElement).width\n\n  htmlElement.style.width = width\n  htmlElement.style.position = 'absolute'\n  htmlElement.style.visibility = 'hidden'\n  htmlElement.style.height = 'auto'\n\n  const height = getComputedStyle(htmlElement).height\n\n  htmlElement.style.width = ''\n  htmlElement.style.position = ''\n  htmlElement.style.visibility = ''\n  htmlElement.style.height = ''\n\n  getComputedStyle(htmlElement)\n\n  requestAnimationFrame(() => {\n    htmlElement.style.height = height\n  })\n}\n\nfunction afterEnter(element: Element): void {\n  const htmlElement: HTMLElement = element as HTMLElement\n  htmlElement.style.height = 'auto'\n}\n\nfunction leave(element: Element): void {\n  const htmlElement: HTMLElement = element as HTMLElement\n  const height = getComputedStyle(htmlElement).height\n\n  htmlElement.style.height = height\n  getComputedStyle(htmlElement)\n\n  requestAnimationFrame(() => {\n    htmlElement.style.height = '0'\n  })\n}\n</script>\n\n<template>\n  <transition\n    name=\"expand\"\n    @after-enter=\"afterEnter\"\n    @enter=\"enter\"\n    @leave=\"leave\"\n  >\n    <slot />\n  </transition>\n</template>\n\n<style scoped>\n.expand-enter-active,\n.expand-leave-active {\n  transition: height v-bind(durationString) cubic-bezier(0.645, 0.045, 0.355, 1), opacity v-bind(durationString);\n  overflow: hidden;\n}\n\n.expand-enter-from,\n.expand-leave-to {\n  opacity: 0;\n  height: 0;\n}\n\n* {\n  will-change: height;\n  transform: translateZ(0);\n  backface-visibility: hidden;\n}\n</style>\n"
      }
    ]
  }
]